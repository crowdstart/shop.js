(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('react'), require('react-dom')) :
	typeof define === 'function' && define.amd ? define(['exports', 'react', 'react-dom'], factory) :
	(global = global || self, factory((global.shop = global.shop || {}, global.shop.js = {}), global.React, global.ReactDOM));
}(this, (function (exports, React, ReactDOM) { 'use strict';

	var React__default = 'default' in React ? React['default'] : React;
	var ReactDOM__default = 'default' in ReactDOM ? ReactDOM['default'] : ReactDOM;

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function commonjsRequire () {
		throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
	}

	function unwrapExports (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	function getCjsExportFromNamespace (n) {
		return n && n['default'] || n;
	}

	var performanceNow = createCommonjsModule(function (module) {
	// Generated by CoffeeScript 1.12.2
	(function() {
	  var getNanoSeconds, hrtime, loadTime, moduleLoadTime, nodeLoadTime, upTime;

	  if ((typeof performance !== "undefined" && performance !== null) && performance.now) {
	    module.exports = function() {
	      return performance.now();
	    };
	  } else if ((typeof process !== "undefined" && process !== null) && process.hrtime) {
	    module.exports = function() {
	      return (getNanoSeconds() - nodeLoadTime) / 1e6;
	    };
	    hrtime = process.hrtime;
	    getNanoSeconds = function() {
	      var hr;
	      hr = hrtime();
	      return hr[0] * 1e9 + hr[1];
	    };
	    moduleLoadTime = getNanoSeconds();
	    upTime = process.uptime() * 1e9;
	    nodeLoadTime = moduleLoadTime - upTime;
	  } else if (Date.now) {
	    module.exports = function() {
	      return Date.now() - loadTime;
	    };
	    loadTime = Date.now();
	  } else {
	    module.exports = function() {
	      return new Date().getTime() - loadTime;
	    };
	    loadTime = new Date().getTime();
	  }

	}).call(commonjsGlobal);

	//# sourceMappingURL=performance-now.js.map
	});

	var root = typeof window === 'undefined' ? commonjsGlobal : window
	  , vendors = ['moz', 'webkit']
	  , suffix = 'AnimationFrame'
	  , raf = root['request' + suffix]
	  , caf = root['cancel' + suffix] || root['cancelRequest' + suffix];

	for(var i = 0; !raf && i < vendors.length; i++) {
	  raf = root[vendors[i] + 'Request' + suffix];
	  caf = root[vendors[i] + 'Cancel' + suffix]
	      || root[vendors[i] + 'CancelRequest' + suffix];
	}

	// Some versions of FF have rAF but not cAF
	if(!raf || !caf) {
	  var last = 0
	    , id = 0
	    , queue = []
	    , frameDuration = 1000 / 60;

	  raf = function(callback) {
	    if(queue.length === 0) {
	      var _now = performanceNow()
	        , next = Math.max(0, frameDuration - (_now - last));
	      last = next + _now;
	      setTimeout(function() {
	        var cp = queue.slice(0);
	        // Clear queue here to prevent
	        // callbacks from appending listeners
	        // to the current frame's queue
	        queue.length = 0;
	        for(var i = 0; i < cp.length; i++) {
	          if(!cp[i].cancelled) {
	            try{
	              cp[i].callback(last);
	            } catch(e) {
	              setTimeout(function() { throw e }, 0);
	            }
	          }
	        }
	      }, Math.round(next));
	    }
	    queue.push({
	      handle: ++id,
	      callback: callback,
	      cancelled: false
	    });
	    return id
	  };

	  caf = function(handle) {
	    for(var i = 0; i < queue.length; i++) {
	      if(queue[i].handle === handle) {
	        queue[i].cancelled = true;
	      }
	    }
	  };
	}

	var raf_1 = function(fn) {
	  // Wrap in a new function to prevent
	  // `cancel` potentially being assigned
	  // to the native rAF function
	  return raf.call(root, fn)
	};
	var cancel = function() {
	  caf.apply(root, arguments);
	};
	var polyfill = function(object) {
	  if (!object) {
	    object = root;
	  }
	  object.requestAnimationFrame = raf;
	  object.cancelAnimationFrame = caf;
	};
	raf_1.cancel = cancel;
	raf_1.polyfill = polyfill;

	var classnames = createCommonjsModule(function (module) {
	/*!
	  Copyright (c) 2017 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/
	/* global define */

	(function () {

		var hasOwn = {}.hasOwnProperty;

		function classNames () {
			var classes = [];

			for (var i = 0; i < arguments.length; i++) {
				var arg = arguments[i];
				if (!arg) continue;

				var argType = typeof arg;

				if (argType === 'string' || argType === 'number') {
					classes.push(arg);
				} else if (Array.isArray(arg) && arg.length) {
					var inner = classNames.apply(null, arg);
					if (inner) {
						classes.push(inner);
					}
				} else if (argType === 'object') {
					for (var key in arg) {
						if (hasOwn.call(arg, key) && arg[key]) {
							classes.push(key);
						}
					}
				}
			}

			return classes.join(' ');
		}

		if ( module.exports) {
			classNames.default = classNames;
			module.exports = classNames;
		} else {
			window.classNames = classNames;
		}
	}());
	});

	var moment = createCommonjsModule(function (module, exports) {
	(function (global, factory) {
	     module.exports = factory() ;
	}(commonjsGlobal, (function () {
	    var hookCallback;

	    function hooks() {
	        return hookCallback.apply(null, arguments);
	    }

	    // This is done to register the method called with moment()
	    // without creating circular dependencies.
	    function setHookCallback(callback) {
	        hookCallback = callback;
	    }

	    function isArray(input) {
	        return (
	            input instanceof Array ||
	            Object.prototype.toString.call(input) === '[object Array]'
	        );
	    }

	    function isObject(input) {
	        // IE8 will treat undefined and null as object if it wasn't for
	        // input != null
	        return (
	            input != null &&
	            Object.prototype.toString.call(input) === '[object Object]'
	        );
	    }

	    function hasOwnProp(a, b) {
	        return Object.prototype.hasOwnProperty.call(a, b);
	    }

	    function isObjectEmpty(obj) {
	        if (Object.getOwnPropertyNames) {
	            return Object.getOwnPropertyNames(obj).length === 0;
	        } else {
	            var k;
	            for (k in obj) {
	                if (hasOwnProp(obj, k)) {
	                    return false;
	                }
	            }
	            return true;
	        }
	    }

	    function isUndefined(input) {
	        return input === void 0;
	    }

	    function isNumber(input) {
	        return (
	            typeof input === 'number' ||
	            Object.prototype.toString.call(input) === '[object Number]'
	        );
	    }

	    function isDate(input) {
	        return (
	            input instanceof Date ||
	            Object.prototype.toString.call(input) === '[object Date]'
	        );
	    }

	    function map(arr, fn) {
	        var res = [],
	            i;
	        for (i = 0; i < arr.length; ++i) {
	            res.push(fn(arr[i], i));
	        }
	        return res;
	    }

	    function extend(a, b) {
	        for (var i in b) {
	            if (hasOwnProp(b, i)) {
	                a[i] = b[i];
	            }
	        }

	        if (hasOwnProp(b, 'toString')) {
	            a.toString = b.toString;
	        }

	        if (hasOwnProp(b, 'valueOf')) {
	            a.valueOf = b.valueOf;
	        }

	        return a;
	    }

	    function createUTC(input, format, locale, strict) {
	        return createLocalOrUTC(input, format, locale, strict, true).utc();
	    }

	    function defaultParsingFlags() {
	        // We need to deep clone this object.
	        return {
	            empty: false,
	            unusedTokens: [],
	            unusedInput: [],
	            overflow: -2,
	            charsLeftOver: 0,
	            nullInput: false,
	            invalidEra: null,
	            invalidMonth: null,
	            invalidFormat: false,
	            userInvalidated: false,
	            iso: false,
	            parsedDateParts: [],
	            era: null,
	            meridiem: null,
	            rfc2822: false,
	            weekdayMismatch: false,
	        };
	    }

	    function getParsingFlags(m) {
	        if (m._pf == null) {
	            m._pf = defaultParsingFlags();
	        }
	        return m._pf;
	    }

	    var some;
	    if (Array.prototype.some) {
	        some = Array.prototype.some;
	    } else {
	        some = function (fun) {
	            var t = Object(this),
	                len = t.length >>> 0,
	                i;

	            for (i = 0; i < len; i++) {
	                if (i in t && fun.call(this, t[i], i, t)) {
	                    return true;
	                }
	            }

	            return false;
	        };
	    }

	    function isValid(m) {
	        if (m._isValid == null) {
	            var flags = getParsingFlags(m),
	                parsedParts = some.call(flags.parsedDateParts, function (i) {
	                    return i != null;
	                }),
	                isNowValid =
	                    !isNaN(m._d.getTime()) &&
	                    flags.overflow < 0 &&
	                    !flags.empty &&
	                    !flags.invalidEra &&
	                    !flags.invalidMonth &&
	                    !flags.invalidWeekday &&
	                    !flags.weekdayMismatch &&
	                    !flags.nullInput &&
	                    !flags.invalidFormat &&
	                    !flags.userInvalidated &&
	                    (!flags.meridiem || (flags.meridiem && parsedParts));

	            if (m._strict) {
	                isNowValid =
	                    isNowValid &&
	                    flags.charsLeftOver === 0 &&
	                    flags.unusedTokens.length === 0 &&
	                    flags.bigHour === undefined;
	            }

	            if (Object.isFrozen == null || !Object.isFrozen(m)) {
	                m._isValid = isNowValid;
	            } else {
	                return isNowValid;
	            }
	        }
	        return m._isValid;
	    }

	    function createInvalid(flags) {
	        var m = createUTC(NaN);
	        if (flags != null) {
	            extend(getParsingFlags(m), flags);
	        } else {
	            getParsingFlags(m).userInvalidated = true;
	        }

	        return m;
	    }

	    // Plugins that add properties should also add the key here (null value),
	    // so we can properly clone ourselves.
	    var momentProperties = (hooks.momentProperties = []),
	        updateInProgress = false;

	    function copyConfig(to, from) {
	        var i, prop, val;

	        if (!isUndefined(from._isAMomentObject)) {
	            to._isAMomentObject = from._isAMomentObject;
	        }
	        if (!isUndefined(from._i)) {
	            to._i = from._i;
	        }
	        if (!isUndefined(from._f)) {
	            to._f = from._f;
	        }
	        if (!isUndefined(from._l)) {
	            to._l = from._l;
	        }
	        if (!isUndefined(from._strict)) {
	            to._strict = from._strict;
	        }
	        if (!isUndefined(from._tzm)) {
	            to._tzm = from._tzm;
	        }
	        if (!isUndefined(from._isUTC)) {
	            to._isUTC = from._isUTC;
	        }
	        if (!isUndefined(from._offset)) {
	            to._offset = from._offset;
	        }
	        if (!isUndefined(from._pf)) {
	            to._pf = getParsingFlags(from);
	        }
	        if (!isUndefined(from._locale)) {
	            to._locale = from._locale;
	        }

	        if (momentProperties.length > 0) {
	            for (i = 0; i < momentProperties.length; i++) {
	                prop = momentProperties[i];
	                val = from[prop];
	                if (!isUndefined(val)) {
	                    to[prop] = val;
	                }
	            }
	        }

	        return to;
	    }

	    // Moment prototype object
	    function Moment(config) {
	        copyConfig(this, config);
	        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
	        if (!this.isValid()) {
	            this._d = new Date(NaN);
	        }
	        // Prevent infinite loop in case updateOffset creates new moment
	        // objects.
	        if (updateInProgress === false) {
	            updateInProgress = true;
	            hooks.updateOffset(this);
	            updateInProgress = false;
	        }
	    }

	    function isMoment(obj) {
	        return (
	            obj instanceof Moment || (obj != null && obj._isAMomentObject != null)
	        );
	    }

	    function warn(msg) {
	        if (
	            hooks.suppressDeprecationWarnings === false &&
	            typeof console !== 'undefined' &&
	            console.warn
	        ) {
	            console.warn('Deprecation warning: ' + msg);
	        }
	    }

	    function deprecate(msg, fn) {
	        var firstTime = true;

	        return extend(function () {
	            if (hooks.deprecationHandler != null) {
	                hooks.deprecationHandler(null, msg);
	            }
	            if (firstTime) {
	                var args = [],
	                    arg,
	                    i,
	                    key;
	                for (i = 0; i < arguments.length; i++) {
	                    arg = '';
	                    if (typeof arguments[i] === 'object') {
	                        arg += '\n[' + i + '] ';
	                        for (key in arguments[0]) {
	                            if (hasOwnProp(arguments[0], key)) {
	                                arg += key + ': ' + arguments[0][key] + ', ';
	                            }
	                        }
	                        arg = arg.slice(0, -2); // Remove trailing comma and space
	                    } else {
	                        arg = arguments[i];
	                    }
	                    args.push(arg);
	                }
	                warn(
	                    msg +
	                        '\nArguments: ' +
	                        Array.prototype.slice.call(args).join('') +
	                        '\n' +
	                        new Error().stack
	                );
	                firstTime = false;
	            }
	            return fn.apply(this, arguments);
	        }, fn);
	    }

	    var deprecations = {};

	    function deprecateSimple(name, msg) {
	        if (hooks.deprecationHandler != null) {
	            hooks.deprecationHandler(name, msg);
	        }
	        if (!deprecations[name]) {
	            warn(msg);
	            deprecations[name] = true;
	        }
	    }

	    hooks.suppressDeprecationWarnings = false;
	    hooks.deprecationHandler = null;

	    function isFunction(input) {
	        return (
	            (typeof Function !== 'undefined' && input instanceof Function) ||
	            Object.prototype.toString.call(input) === '[object Function]'
	        );
	    }

	    function set(config) {
	        var prop, i;
	        for (i in config) {
	            if (hasOwnProp(config, i)) {
	                prop = config[i];
	                if (isFunction(prop)) {
	                    this[i] = prop;
	                } else {
	                    this['_' + i] = prop;
	                }
	            }
	        }
	        this._config = config;
	        // Lenient ordinal parsing accepts just a number in addition to
	        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
	        // TODO: Remove "ordinalParse" fallback in next major release.
	        this._dayOfMonthOrdinalParseLenient = new RegExp(
	            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
	                '|' +
	                /\d{1,2}/.source
	        );
	    }

	    function mergeConfigs(parentConfig, childConfig) {
	        var res = extend({}, parentConfig),
	            prop;
	        for (prop in childConfig) {
	            if (hasOwnProp(childConfig, prop)) {
	                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
	                    res[prop] = {};
	                    extend(res[prop], parentConfig[prop]);
	                    extend(res[prop], childConfig[prop]);
	                } else if (childConfig[prop] != null) {
	                    res[prop] = childConfig[prop];
	                } else {
	                    delete res[prop];
	                }
	            }
	        }
	        for (prop in parentConfig) {
	            if (
	                hasOwnProp(parentConfig, prop) &&
	                !hasOwnProp(childConfig, prop) &&
	                isObject(parentConfig[prop])
	            ) {
	                // make sure changes to properties don't modify parent config
	                res[prop] = extend({}, res[prop]);
	            }
	        }
	        return res;
	    }

	    function Locale(config) {
	        if (config != null) {
	            this.set(config);
	        }
	    }

	    var keys;

	    if (Object.keys) {
	        keys = Object.keys;
	    } else {
	        keys = function (obj) {
	            var i,
	                res = [];
	            for (i in obj) {
	                if (hasOwnProp(obj, i)) {
	                    res.push(i);
	                }
	            }
	            return res;
	        };
	    }

	    var defaultCalendar = {
	        sameDay: '[Today at] LT',
	        nextDay: '[Tomorrow at] LT',
	        nextWeek: 'dddd [at] LT',
	        lastDay: '[Yesterday at] LT',
	        lastWeek: '[Last] dddd [at] LT',
	        sameElse: 'L',
	    };

	    function calendar(key, mom, now) {
	        var output = this._calendar[key] || this._calendar['sameElse'];
	        return isFunction(output) ? output.call(mom, now) : output;
	    }

	    function zeroFill(number, targetLength, forceSign) {
	        var absNumber = '' + Math.abs(number),
	            zerosToFill = targetLength - absNumber.length,
	            sign = number >= 0;
	        return (
	            (sign ? (forceSign ? '+' : '') : '-') +
	            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +
	            absNumber
	        );
	    }

	    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
	        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
	        formatFunctions = {},
	        formatTokenFunctions = {};

	    // token:    'M'
	    // padded:   ['MM', 2]
	    // ordinal:  'Mo'
	    // callback: function () { this.month() + 1 }
	    function addFormatToken(token, padded, ordinal, callback) {
	        var func = callback;
	        if (typeof callback === 'string') {
	            func = function () {
	                return this[callback]();
	            };
	        }
	        if (token) {
	            formatTokenFunctions[token] = func;
	        }
	        if (padded) {
	            formatTokenFunctions[padded[0]] = function () {
	                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
	            };
	        }
	        if (ordinal) {
	            formatTokenFunctions[ordinal] = function () {
	                return this.localeData().ordinal(
	                    func.apply(this, arguments),
	                    token
	                );
	            };
	        }
	    }

	    function removeFormattingTokens(input) {
	        if (input.match(/\[[\s\S]/)) {
	            return input.replace(/^\[|\]$/g, '');
	        }
	        return input.replace(/\\/g, '');
	    }

	    function makeFormatFunction(format) {
	        var array = format.match(formattingTokens),
	            i,
	            length;

	        for (i = 0, length = array.length; i < length; i++) {
	            if (formatTokenFunctions[array[i]]) {
	                array[i] = formatTokenFunctions[array[i]];
	            } else {
	                array[i] = removeFormattingTokens(array[i]);
	            }
	        }

	        return function (mom) {
	            var output = '',
	                i;
	            for (i = 0; i < length; i++) {
	                output += isFunction(array[i])
	                    ? array[i].call(mom, format)
	                    : array[i];
	            }
	            return output;
	        };
	    }

	    // format date using native date object
	    function formatMoment(m, format) {
	        if (!m.isValid()) {
	            return m.localeData().invalidDate();
	        }

	        format = expandFormat(format, m.localeData());
	        formatFunctions[format] =
	            formatFunctions[format] || makeFormatFunction(format);

	        return formatFunctions[format](m);
	    }

	    function expandFormat(format, locale) {
	        var i = 5;

	        function replaceLongDateFormatTokens(input) {
	            return locale.longDateFormat(input) || input;
	        }

	        localFormattingTokens.lastIndex = 0;
	        while (i >= 0 && localFormattingTokens.test(format)) {
	            format = format.replace(
	                localFormattingTokens,
	                replaceLongDateFormatTokens
	            );
	            localFormattingTokens.lastIndex = 0;
	            i -= 1;
	        }

	        return format;
	    }

	    var defaultLongDateFormat = {
	        LTS: 'h:mm:ss A',
	        LT: 'h:mm A',
	        L: 'MM/DD/YYYY',
	        LL: 'MMMM D, YYYY',
	        LLL: 'MMMM D, YYYY h:mm A',
	        LLLL: 'dddd, MMMM D, YYYY h:mm A',
	    };

	    function longDateFormat(key) {
	        var format = this._longDateFormat[key],
	            formatUpper = this._longDateFormat[key.toUpperCase()];

	        if (format || !formatUpper) {
	            return format;
	        }

	        this._longDateFormat[key] = formatUpper
	            .match(formattingTokens)
	            .map(function (tok) {
	                if (
	                    tok === 'MMMM' ||
	                    tok === 'MM' ||
	                    tok === 'DD' ||
	                    tok === 'dddd'
	                ) {
	                    return tok.slice(1);
	                }
	                return tok;
	            })
	            .join('');

	        return this._longDateFormat[key];
	    }

	    var defaultInvalidDate = 'Invalid date';

	    function invalidDate() {
	        return this._invalidDate;
	    }

	    var defaultOrdinal = '%d',
	        defaultDayOfMonthOrdinalParse = /\d{1,2}/;

	    function ordinal(number) {
	        return this._ordinal.replace('%d', number);
	    }

	    var defaultRelativeTime = {
	        future: 'in %s',
	        past: '%s ago',
	        s: 'a few seconds',
	        ss: '%d seconds',
	        m: 'a minute',
	        mm: '%d minutes',
	        h: 'an hour',
	        hh: '%d hours',
	        d: 'a day',
	        dd: '%d days',
	        w: 'a week',
	        ww: '%d weeks',
	        M: 'a month',
	        MM: '%d months',
	        y: 'a year',
	        yy: '%d years',
	    };

	    function relativeTime(number, withoutSuffix, string, isFuture) {
	        var output = this._relativeTime[string];
	        return isFunction(output)
	            ? output(number, withoutSuffix, string, isFuture)
	            : output.replace(/%d/i, number);
	    }

	    function pastFuture(diff, output) {
	        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
	        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
	    }

	    var aliases = {};

	    function addUnitAlias(unit, shorthand) {
	        var lowerCase = unit.toLowerCase();
	        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
	    }

	    function normalizeUnits(units) {
	        return typeof units === 'string'
	            ? aliases[units] || aliases[units.toLowerCase()]
	            : undefined;
	    }

	    function normalizeObjectUnits(inputObject) {
	        var normalizedInput = {},
	            normalizedProp,
	            prop;

	        for (prop in inputObject) {
	            if (hasOwnProp(inputObject, prop)) {
	                normalizedProp = normalizeUnits(prop);
	                if (normalizedProp) {
	                    normalizedInput[normalizedProp] = inputObject[prop];
	                }
	            }
	        }

	        return normalizedInput;
	    }

	    var priorities = {};

	    function addUnitPriority(unit, priority) {
	        priorities[unit] = priority;
	    }

	    function getPrioritizedUnits(unitsObj) {
	        var units = [],
	            u;
	        for (u in unitsObj) {
	            if (hasOwnProp(unitsObj, u)) {
	                units.push({ unit: u, priority: priorities[u] });
	            }
	        }
	        units.sort(function (a, b) {
	            return a.priority - b.priority;
	        });
	        return units;
	    }

	    function isLeapYear(year) {
	        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
	    }

	    function absFloor(number) {
	        if (number < 0) {
	            // -0 -> 0
	            return Math.ceil(number) || 0;
	        } else {
	            return Math.floor(number);
	        }
	    }

	    function toInt(argumentForCoercion) {
	        var coercedNumber = +argumentForCoercion,
	            value = 0;

	        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
	            value = absFloor(coercedNumber);
	        }

	        return value;
	    }

	    function makeGetSet(unit, keepTime) {
	        return function (value) {
	            if (value != null) {
	                set$1(this, unit, value);
	                hooks.updateOffset(this, keepTime);
	                return this;
	            } else {
	                return get(this, unit);
	            }
	        };
	    }

	    function get(mom, unit) {
	        return mom.isValid()
	            ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]()
	            : NaN;
	    }

	    function set$1(mom, unit, value) {
	        if (mom.isValid() && !isNaN(value)) {
	            if (
	                unit === 'FullYear' &&
	                isLeapYear(mom.year()) &&
	                mom.month() === 1 &&
	                mom.date() === 29
	            ) {
	                value = toInt(value);
	                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](
	                    value,
	                    mom.month(),
	                    daysInMonth(value, mom.month())
	                );
	            } else {
	                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
	            }
	        }
	    }

	    // MOMENTS

	    function stringGet(units) {
	        units = normalizeUnits(units);
	        if (isFunction(this[units])) {
	            return this[units]();
	        }
	        return this;
	    }

	    function stringSet(units, value) {
	        if (typeof units === 'object') {
	            units = normalizeObjectUnits(units);
	            var prioritized = getPrioritizedUnits(units),
	                i;
	            for (i = 0; i < prioritized.length; i++) {
	                this[prioritized[i].unit](units[prioritized[i].unit]);
	            }
	        } else {
	            units = normalizeUnits(units);
	            if (isFunction(this[units])) {
	                return this[units](value);
	            }
	        }
	        return this;
	    }

	    var match1 = /\d/, //       0 - 9
	        match2 = /\d\d/, //      00 - 99
	        match3 = /\d{3}/, //     000 - 999
	        match4 = /\d{4}/, //    0000 - 9999
	        match6 = /[+-]?\d{6}/, // -999999 - 999999
	        match1to2 = /\d\d?/, //       0 - 99
	        match3to4 = /\d\d\d\d?/, //     999 - 9999
	        match5to6 = /\d\d\d\d\d\d?/, //   99999 - 999999
	        match1to3 = /\d{1,3}/, //       0 - 999
	        match1to4 = /\d{1,4}/, //       0 - 9999
	        match1to6 = /[+-]?\d{1,6}/, // -999999 - 999999
	        matchUnsigned = /\d+/, //       0 - inf
	        matchSigned = /[+-]?\d+/, //    -inf - inf
	        matchOffset = /Z|[+-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
	        matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z
	        matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
	        // any word (or two) characters or numbers including two/three word month in arabic.
	        // includes scottish gaelic two word and hyphenated months
	        matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
	        regexes;

	    regexes = {};

	    function addRegexToken(token, regex, strictRegex) {
	        regexes[token] = isFunction(regex)
	            ? regex
	            : function (isStrict, localeData) {
	                  return isStrict && strictRegex ? strictRegex : regex;
	              };
	    }

	    function getParseRegexForToken(token, config) {
	        if (!hasOwnProp(regexes, token)) {
	            return new RegExp(unescapeFormat(token));
	        }

	        return regexes[token](config._strict, config._locale);
	    }

	    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
	    function unescapeFormat(s) {
	        return regexEscape(
	            s
	                .replace('\\', '')
	                .replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (
	                    matched,
	                    p1,
	                    p2,
	                    p3,
	                    p4
	                ) {
	                    return p1 || p2 || p3 || p4;
	                })
	        );
	    }

	    function regexEscape(s) {
	        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
	    }

	    var tokens = {};

	    function addParseToken(token, callback) {
	        var i,
	            func = callback;
	        if (typeof token === 'string') {
	            token = [token];
	        }
	        if (isNumber(callback)) {
	            func = function (input, array) {
	                array[callback] = toInt(input);
	            };
	        }
	        for (i = 0; i < token.length; i++) {
	            tokens[token[i]] = func;
	        }
	    }

	    function addWeekParseToken(token, callback) {
	        addParseToken(token, function (input, array, config, token) {
	            config._w = config._w || {};
	            callback(input, config._w, config, token);
	        });
	    }

	    function addTimeToArrayFromToken(token, input, config) {
	        if (input != null && hasOwnProp(tokens, token)) {
	            tokens[token](input, config._a, config, token);
	        }
	    }

	    var YEAR = 0,
	        MONTH = 1,
	        DATE = 2,
	        HOUR = 3,
	        MINUTE = 4,
	        SECOND = 5,
	        MILLISECOND = 6,
	        WEEK = 7,
	        WEEKDAY = 8;

	    function mod(n, x) {
	        return ((n % x) + x) % x;
	    }

	    var indexOf;

	    if (Array.prototype.indexOf) {
	        indexOf = Array.prototype.indexOf;
	    } else {
	        indexOf = function (o) {
	            // I know
	            var i;
	            for (i = 0; i < this.length; ++i) {
	                if (this[i] === o) {
	                    return i;
	                }
	            }
	            return -1;
	        };
	    }

	    function daysInMonth(year, month) {
	        if (isNaN(year) || isNaN(month)) {
	            return NaN;
	        }
	        var modMonth = mod(month, 12);
	        year += (month - modMonth) / 12;
	        return modMonth === 1
	            ? isLeapYear(year)
	                ? 29
	                : 28
	            : 31 - ((modMonth % 7) % 2);
	    }

	    // FORMATTING

	    addFormatToken('M', ['MM', 2], 'Mo', function () {
	        return this.month() + 1;
	    });

	    addFormatToken('MMM', 0, 0, function (format) {
	        return this.localeData().monthsShort(this, format);
	    });

	    addFormatToken('MMMM', 0, 0, function (format) {
	        return this.localeData().months(this, format);
	    });

	    // ALIASES

	    addUnitAlias('month', 'M');

	    // PRIORITY

	    addUnitPriority('month', 8);

	    // PARSING

	    addRegexToken('M', match1to2);
	    addRegexToken('MM', match1to2, match2);
	    addRegexToken('MMM', function (isStrict, locale) {
	        return locale.monthsShortRegex(isStrict);
	    });
	    addRegexToken('MMMM', function (isStrict, locale) {
	        return locale.monthsRegex(isStrict);
	    });

	    addParseToken(['M', 'MM'], function (input, array) {
	        array[MONTH] = toInt(input) - 1;
	    });

	    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
	        var month = config._locale.monthsParse(input, token, config._strict);
	        // if we didn't find a month name, mark the date as invalid.
	        if (month != null) {
	            array[MONTH] = month;
	        } else {
	            getParsingFlags(config).invalidMonth = input;
	        }
	    });

	    // LOCALES

	    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
	            '_'
	        ),
	        defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split(
	            '_'
	        ),
	        MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
	        defaultMonthsShortRegex = matchWord,
	        defaultMonthsRegex = matchWord;

	    function localeMonths(m, format) {
	        if (!m) {
	            return isArray(this._months)
	                ? this._months
	                : this._months['standalone'];
	        }
	        return isArray(this._months)
	            ? this._months[m.month()]
	            : this._months[
	                  (this._months.isFormat || MONTHS_IN_FORMAT).test(format)
	                      ? 'format'
	                      : 'standalone'
	              ][m.month()];
	    }

	    function localeMonthsShort(m, format) {
	        if (!m) {
	            return isArray(this._monthsShort)
	                ? this._monthsShort
	                : this._monthsShort['standalone'];
	        }
	        return isArray(this._monthsShort)
	            ? this._monthsShort[m.month()]
	            : this._monthsShort[
	                  MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'
	              ][m.month()];
	    }

	    function handleStrictParse(monthName, format, strict) {
	        var i,
	            ii,
	            mom,
	            llc = monthName.toLocaleLowerCase();
	        if (!this._monthsParse) {
	            // this is not used
	            this._monthsParse = [];
	            this._longMonthsParse = [];
	            this._shortMonthsParse = [];
	            for (i = 0; i < 12; ++i) {
	                mom = createUTC([2000, i]);
	                this._shortMonthsParse[i] = this.monthsShort(
	                    mom,
	                    ''
	                ).toLocaleLowerCase();
	                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
	            }
	        }

	        if (strict) {
	            if (format === 'MMM') {
	                ii = indexOf.call(this._shortMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._longMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        } else {
	            if (format === 'MMM') {
	                ii = indexOf.call(this._shortMonthsParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._longMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._longMonthsParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._shortMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        }
	    }

	    function localeMonthsParse(monthName, format, strict) {
	        var i, mom, regex;

	        if (this._monthsParseExact) {
	            return handleStrictParse.call(this, monthName, format, strict);
	        }

	        if (!this._monthsParse) {
	            this._monthsParse = [];
	            this._longMonthsParse = [];
	            this._shortMonthsParse = [];
	        }

	        // TODO: add sorting
	        // Sorting makes sure if one month (or abbr) is a prefix of another
	        // see sorting in computeMonthsParse
	        for (i = 0; i < 12; i++) {
	            // make the regex if we don't have it already
	            mom = createUTC([2000, i]);
	            if (strict && !this._longMonthsParse[i]) {
	                this._longMonthsParse[i] = new RegExp(
	                    '^' + this.months(mom, '').replace('.', '') + '$',
	                    'i'
	                );
	                this._shortMonthsParse[i] = new RegExp(
	                    '^' + this.monthsShort(mom, '').replace('.', '') + '$',
	                    'i'
	                );
	            }
	            if (!strict && !this._monthsParse[i]) {
	                regex =
	                    '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
	                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
	            }
	            // test the regex
	            if (
	                strict &&
	                format === 'MMMM' &&
	                this._longMonthsParse[i].test(monthName)
	            ) {
	                return i;
	            } else if (
	                strict &&
	                format === 'MMM' &&
	                this._shortMonthsParse[i].test(monthName)
	            ) {
	                return i;
	            } else if (!strict && this._monthsParse[i].test(monthName)) {
	                return i;
	            }
	        }
	    }

	    // MOMENTS

	    function setMonth(mom, value) {
	        var dayOfMonth;

	        if (!mom.isValid()) {
	            // No op
	            return mom;
	        }

	        if (typeof value === 'string') {
	            if (/^\d+$/.test(value)) {
	                value = toInt(value);
	            } else {
	                value = mom.localeData().monthsParse(value);
	                // TODO: Another silent failure?
	                if (!isNumber(value)) {
	                    return mom;
	                }
	            }
	        }

	        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
	        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
	        return mom;
	    }

	    function getSetMonth(value) {
	        if (value != null) {
	            setMonth(this, value);
	            hooks.updateOffset(this, true);
	            return this;
	        } else {
	            return get(this, 'Month');
	        }
	    }

	    function getDaysInMonth() {
	        return daysInMonth(this.year(), this.month());
	    }

	    function monthsShortRegex(isStrict) {
	        if (this._monthsParseExact) {
	            if (!hasOwnProp(this, '_monthsRegex')) {
	                computeMonthsParse.call(this);
	            }
	            if (isStrict) {
	                return this._monthsShortStrictRegex;
	            } else {
	                return this._monthsShortRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_monthsShortRegex')) {
	                this._monthsShortRegex = defaultMonthsShortRegex;
	            }
	            return this._monthsShortStrictRegex && isStrict
	                ? this._monthsShortStrictRegex
	                : this._monthsShortRegex;
	        }
	    }

	    function monthsRegex(isStrict) {
	        if (this._monthsParseExact) {
	            if (!hasOwnProp(this, '_monthsRegex')) {
	                computeMonthsParse.call(this);
	            }
	            if (isStrict) {
	                return this._monthsStrictRegex;
	            } else {
	                return this._monthsRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_monthsRegex')) {
	                this._monthsRegex = defaultMonthsRegex;
	            }
	            return this._monthsStrictRegex && isStrict
	                ? this._monthsStrictRegex
	                : this._monthsRegex;
	        }
	    }

	    function computeMonthsParse() {
	        function cmpLenRev(a, b) {
	            return b.length - a.length;
	        }

	        var shortPieces = [],
	            longPieces = [],
	            mixedPieces = [],
	            i,
	            mom;
	        for (i = 0; i < 12; i++) {
	            // make the regex if we don't have it already
	            mom = createUTC([2000, i]);
	            shortPieces.push(this.monthsShort(mom, ''));
	            longPieces.push(this.months(mom, ''));
	            mixedPieces.push(this.months(mom, ''));
	            mixedPieces.push(this.monthsShort(mom, ''));
	        }
	        // Sorting makes sure if one month (or abbr) is a prefix of another it
	        // will match the longer piece.
	        shortPieces.sort(cmpLenRev);
	        longPieces.sort(cmpLenRev);
	        mixedPieces.sort(cmpLenRev);
	        for (i = 0; i < 12; i++) {
	            shortPieces[i] = regexEscape(shortPieces[i]);
	            longPieces[i] = regexEscape(longPieces[i]);
	        }
	        for (i = 0; i < 24; i++) {
	            mixedPieces[i] = regexEscape(mixedPieces[i]);
	        }

	        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	        this._monthsShortRegex = this._monthsRegex;
	        this._monthsStrictRegex = new RegExp(
	            '^(' + longPieces.join('|') + ')',
	            'i'
	        );
	        this._monthsShortStrictRegex = new RegExp(
	            '^(' + shortPieces.join('|') + ')',
	            'i'
	        );
	    }

	    // FORMATTING

	    addFormatToken('Y', 0, 0, function () {
	        var y = this.year();
	        return y <= 9999 ? zeroFill(y, 4) : '+' + y;
	    });

	    addFormatToken(0, ['YY', 2], 0, function () {
	        return this.year() % 100;
	    });

	    addFormatToken(0, ['YYYY', 4], 0, 'year');
	    addFormatToken(0, ['YYYYY', 5], 0, 'year');
	    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

	    // ALIASES

	    addUnitAlias('year', 'y');

	    // PRIORITIES

	    addUnitPriority('year', 1);

	    // PARSING

	    addRegexToken('Y', matchSigned);
	    addRegexToken('YY', match1to2, match2);
	    addRegexToken('YYYY', match1to4, match4);
	    addRegexToken('YYYYY', match1to6, match6);
	    addRegexToken('YYYYYY', match1to6, match6);

	    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
	    addParseToken('YYYY', function (input, array) {
	        array[YEAR] =
	            input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
	    });
	    addParseToken('YY', function (input, array) {
	        array[YEAR] = hooks.parseTwoDigitYear(input);
	    });
	    addParseToken('Y', function (input, array) {
	        array[YEAR] = parseInt(input, 10);
	    });

	    // HELPERS

	    function daysInYear(year) {
	        return isLeapYear(year) ? 366 : 365;
	    }

	    // HOOKS

	    hooks.parseTwoDigitYear = function (input) {
	        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
	    };

	    // MOMENTS

	    var getSetYear = makeGetSet('FullYear', true);

	    function getIsLeapYear() {
	        return isLeapYear(this.year());
	    }

	    function createDate(y, m, d, h, M, s, ms) {
	        // can't just apply() to create a date:
	        // https://stackoverflow.com/q/181348
	        var date;
	        // the date constructor remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0) {
	            // preserve leap years using a full 400 year cycle, then reset
	            date = new Date(y + 400, m, d, h, M, s, ms);
	            if (isFinite(date.getFullYear())) {
	                date.setFullYear(y);
	            }
	        } else {
	            date = new Date(y, m, d, h, M, s, ms);
	        }

	        return date;
	    }

	    function createUTCDate(y) {
	        var date, args;
	        // the Date.UTC function remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0) {
	            args = Array.prototype.slice.call(arguments);
	            // preserve leap years using a full 400 year cycle, then reset
	            args[0] = y + 400;
	            date = new Date(Date.UTC.apply(null, args));
	            if (isFinite(date.getUTCFullYear())) {
	                date.setUTCFullYear(y);
	            }
	        } else {
	            date = new Date(Date.UTC.apply(null, arguments));
	        }

	        return date;
	    }

	    // start-of-first-week - start-of-year
	    function firstWeekOffset(year, dow, doy) {
	        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
	            fwd = 7 + dow - doy,
	            // first-week day local weekday -- which local weekday is fwd
	            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

	        return -fwdlw + fwd - 1;
	    }

	    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
	    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
	        var localWeekday = (7 + weekday - dow) % 7,
	            weekOffset = firstWeekOffset(year, dow, doy),
	            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
	            resYear,
	            resDayOfYear;

	        if (dayOfYear <= 0) {
	            resYear = year - 1;
	            resDayOfYear = daysInYear(resYear) + dayOfYear;
	        } else if (dayOfYear > daysInYear(year)) {
	            resYear = year + 1;
	            resDayOfYear = dayOfYear - daysInYear(year);
	        } else {
	            resYear = year;
	            resDayOfYear = dayOfYear;
	        }

	        return {
	            year: resYear,
	            dayOfYear: resDayOfYear,
	        };
	    }

	    function weekOfYear(mom, dow, doy) {
	        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
	            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
	            resWeek,
	            resYear;

	        if (week < 1) {
	            resYear = mom.year() - 1;
	            resWeek = week + weeksInYear(resYear, dow, doy);
	        } else if (week > weeksInYear(mom.year(), dow, doy)) {
	            resWeek = week - weeksInYear(mom.year(), dow, doy);
	            resYear = mom.year() + 1;
	        } else {
	            resYear = mom.year();
	            resWeek = week;
	        }

	        return {
	            week: resWeek,
	            year: resYear,
	        };
	    }

	    function weeksInYear(year, dow, doy) {
	        var weekOffset = firstWeekOffset(year, dow, doy),
	            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
	        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
	    }

	    // FORMATTING

	    addFormatToken('w', ['ww', 2], 'wo', 'week');
	    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

	    // ALIASES

	    addUnitAlias('week', 'w');
	    addUnitAlias('isoWeek', 'W');

	    // PRIORITIES

	    addUnitPriority('week', 5);
	    addUnitPriority('isoWeek', 5);

	    // PARSING

	    addRegexToken('w', match1to2);
	    addRegexToken('ww', match1to2, match2);
	    addRegexToken('W', match1to2);
	    addRegexToken('WW', match1to2, match2);

	    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (
	        input,
	        week,
	        config,
	        token
	    ) {
	        week[token.substr(0, 1)] = toInt(input);
	    });

	    // HELPERS

	    // LOCALES

	    function localeWeek(mom) {
	        return weekOfYear(mom, this._week.dow, this._week.doy).week;
	    }

	    var defaultLocaleWeek = {
	        dow: 0, // Sunday is the first day of the week.
	        doy: 6, // The week that contains Jan 6th is the first week of the year.
	    };

	    function localeFirstDayOfWeek() {
	        return this._week.dow;
	    }

	    function localeFirstDayOfYear() {
	        return this._week.doy;
	    }

	    // MOMENTS

	    function getSetWeek(input) {
	        var week = this.localeData().week(this);
	        return input == null ? week : this.add((input - week) * 7, 'd');
	    }

	    function getSetISOWeek(input) {
	        var week = weekOfYear(this, 1, 4).week;
	        return input == null ? week : this.add((input - week) * 7, 'd');
	    }

	    // FORMATTING

	    addFormatToken('d', 0, 'do', 'day');

	    addFormatToken('dd', 0, 0, function (format) {
	        return this.localeData().weekdaysMin(this, format);
	    });

	    addFormatToken('ddd', 0, 0, function (format) {
	        return this.localeData().weekdaysShort(this, format);
	    });

	    addFormatToken('dddd', 0, 0, function (format) {
	        return this.localeData().weekdays(this, format);
	    });

	    addFormatToken('e', 0, 0, 'weekday');
	    addFormatToken('E', 0, 0, 'isoWeekday');

	    // ALIASES

	    addUnitAlias('day', 'd');
	    addUnitAlias('weekday', 'e');
	    addUnitAlias('isoWeekday', 'E');

	    // PRIORITY
	    addUnitPriority('day', 11);
	    addUnitPriority('weekday', 11);
	    addUnitPriority('isoWeekday', 11);

	    // PARSING

	    addRegexToken('d', match1to2);
	    addRegexToken('e', match1to2);
	    addRegexToken('E', match1to2);
	    addRegexToken('dd', function (isStrict, locale) {
	        return locale.weekdaysMinRegex(isStrict);
	    });
	    addRegexToken('ddd', function (isStrict, locale) {
	        return locale.weekdaysShortRegex(isStrict);
	    });
	    addRegexToken('dddd', function (isStrict, locale) {
	        return locale.weekdaysRegex(isStrict);
	    });

	    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
	        var weekday = config._locale.weekdaysParse(input, token, config._strict);
	        // if we didn't get a weekday name, mark the date as invalid
	        if (weekday != null) {
	            week.d = weekday;
	        } else {
	            getParsingFlags(config).invalidWeekday = input;
	        }
	    });

	    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
	        week[token] = toInt(input);
	    });

	    // HELPERS

	    function parseWeekday(input, locale) {
	        if (typeof input !== 'string') {
	            return input;
	        }

	        if (!isNaN(input)) {
	            return parseInt(input, 10);
	        }

	        input = locale.weekdaysParse(input);
	        if (typeof input === 'number') {
	            return input;
	        }

	        return null;
	    }

	    function parseIsoWeekday(input, locale) {
	        if (typeof input === 'string') {
	            return locale.weekdaysParse(input) % 7 || 7;
	        }
	        return isNaN(input) ? null : input;
	    }

	    // LOCALES
	    function shiftWeekdays(ws, n) {
	        return ws.slice(n, 7).concat(ws.slice(0, n));
	    }

	    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
	            '_'
	        ),
	        defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        defaultWeekdaysRegex = matchWord,
	        defaultWeekdaysShortRegex = matchWord,
	        defaultWeekdaysMinRegex = matchWord;

	    function localeWeekdays(m, format) {
	        var weekdays = isArray(this._weekdays)
	            ? this._weekdays
	            : this._weekdays[
	                  m && m !== true && this._weekdays.isFormat.test(format)
	                      ? 'format'
	                      : 'standalone'
	              ];
	        return m === true
	            ? shiftWeekdays(weekdays, this._week.dow)
	            : m
	            ? weekdays[m.day()]
	            : weekdays;
	    }

	    function localeWeekdaysShort(m) {
	        return m === true
	            ? shiftWeekdays(this._weekdaysShort, this._week.dow)
	            : m
	            ? this._weekdaysShort[m.day()]
	            : this._weekdaysShort;
	    }

	    function localeWeekdaysMin(m) {
	        return m === true
	            ? shiftWeekdays(this._weekdaysMin, this._week.dow)
	            : m
	            ? this._weekdaysMin[m.day()]
	            : this._weekdaysMin;
	    }

	    function handleStrictParse$1(weekdayName, format, strict) {
	        var i,
	            ii,
	            mom,
	            llc = weekdayName.toLocaleLowerCase();
	        if (!this._weekdaysParse) {
	            this._weekdaysParse = [];
	            this._shortWeekdaysParse = [];
	            this._minWeekdaysParse = [];

	            for (i = 0; i < 7; ++i) {
	                mom = createUTC([2000, 1]).day(i);
	                this._minWeekdaysParse[i] = this.weekdaysMin(
	                    mom,
	                    ''
	                ).toLocaleLowerCase();
	                this._shortWeekdaysParse[i] = this.weekdaysShort(
	                    mom,
	                    ''
	                ).toLocaleLowerCase();
	                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
	            }
	        }

	        if (strict) {
	            if (format === 'dddd') {
	                ii = indexOf.call(this._weekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else if (format === 'ddd') {
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        } else {
	            if (format === 'dddd') {
	                ii = indexOf.call(this._weekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else if (format === 'ddd') {
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._weekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._weekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        }
	    }

	    function localeWeekdaysParse(weekdayName, format, strict) {
	        var i, mom, regex;

	        if (this._weekdaysParseExact) {
	            return handleStrictParse$1.call(this, weekdayName, format, strict);
	        }

	        if (!this._weekdaysParse) {
	            this._weekdaysParse = [];
	            this._minWeekdaysParse = [];
	            this._shortWeekdaysParse = [];
	            this._fullWeekdaysParse = [];
	        }

	        for (i = 0; i < 7; i++) {
	            // make the regex if we don't have it already

	            mom = createUTC([2000, 1]).day(i);
	            if (strict && !this._fullWeekdaysParse[i]) {
	                this._fullWeekdaysParse[i] = new RegExp(
	                    '^' + this.weekdays(mom, '').replace('.', '\\.?') + '$',
	                    'i'
	                );
	                this._shortWeekdaysParse[i] = new RegExp(
	                    '^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$',
	                    'i'
	                );
	                this._minWeekdaysParse[i] = new RegExp(
	                    '^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$',
	                    'i'
	                );
	            }
	            if (!this._weekdaysParse[i]) {
	                regex =
	                    '^' +
	                    this.weekdays(mom, '') +
	                    '|^' +
	                    this.weekdaysShort(mom, '') +
	                    '|^' +
	                    this.weekdaysMin(mom, '');
	                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
	            }
	            // test the regex
	            if (
	                strict &&
	                format === 'dddd' &&
	                this._fullWeekdaysParse[i].test(weekdayName)
	            ) {
	                return i;
	            } else if (
	                strict &&
	                format === 'ddd' &&
	                this._shortWeekdaysParse[i].test(weekdayName)
	            ) {
	                return i;
	            } else if (
	                strict &&
	                format === 'dd' &&
	                this._minWeekdaysParse[i].test(weekdayName)
	            ) {
	                return i;
	            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
	                return i;
	            }
	        }
	    }

	    // MOMENTS

	    function getSetDayOfWeek(input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
	        if (input != null) {
	            input = parseWeekday(input, this.localeData());
	            return this.add(input - day, 'd');
	        } else {
	            return day;
	        }
	    }

	    function getSetLocaleDayOfWeek(input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
	        return input == null ? weekday : this.add(input - weekday, 'd');
	    }

	    function getSetISODayOfWeek(input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }

	        // behaves the same as moment#day except
	        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
	        // as a setter, sunday should belong to the previous week.

	        if (input != null) {
	            var weekday = parseIsoWeekday(input, this.localeData());
	            return this.day(this.day() % 7 ? weekday : weekday - 7);
	        } else {
	            return this.day() || 7;
	        }
	    }

	    function weekdaysRegex(isStrict) {
	        if (this._weekdaysParseExact) {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                computeWeekdaysParse.call(this);
	            }
	            if (isStrict) {
	                return this._weekdaysStrictRegex;
	            } else {
	                return this._weekdaysRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                this._weekdaysRegex = defaultWeekdaysRegex;
	            }
	            return this._weekdaysStrictRegex && isStrict
	                ? this._weekdaysStrictRegex
	                : this._weekdaysRegex;
	        }
	    }

	    function weekdaysShortRegex(isStrict) {
	        if (this._weekdaysParseExact) {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                computeWeekdaysParse.call(this);
	            }
	            if (isStrict) {
	                return this._weekdaysShortStrictRegex;
	            } else {
	                return this._weekdaysShortRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
	                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
	            }
	            return this._weekdaysShortStrictRegex && isStrict
	                ? this._weekdaysShortStrictRegex
	                : this._weekdaysShortRegex;
	        }
	    }

	    function weekdaysMinRegex(isStrict) {
	        if (this._weekdaysParseExact) {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                computeWeekdaysParse.call(this);
	            }
	            if (isStrict) {
	                return this._weekdaysMinStrictRegex;
	            } else {
	                return this._weekdaysMinRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
	                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
	            }
	            return this._weekdaysMinStrictRegex && isStrict
	                ? this._weekdaysMinStrictRegex
	                : this._weekdaysMinRegex;
	        }
	    }

	    function computeWeekdaysParse() {
	        function cmpLenRev(a, b) {
	            return b.length - a.length;
	        }

	        var minPieces = [],
	            shortPieces = [],
	            longPieces = [],
	            mixedPieces = [],
	            i,
	            mom,
	            minp,
	            shortp,
	            longp;
	        for (i = 0; i < 7; i++) {
	            // make the regex if we don't have it already
	            mom = createUTC([2000, 1]).day(i);
	            minp = regexEscape(this.weekdaysMin(mom, ''));
	            shortp = regexEscape(this.weekdaysShort(mom, ''));
	            longp = regexEscape(this.weekdays(mom, ''));
	            minPieces.push(minp);
	            shortPieces.push(shortp);
	            longPieces.push(longp);
	            mixedPieces.push(minp);
	            mixedPieces.push(shortp);
	            mixedPieces.push(longp);
	        }
	        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
	        // will match the longer piece.
	        minPieces.sort(cmpLenRev);
	        shortPieces.sort(cmpLenRev);
	        longPieces.sort(cmpLenRev);
	        mixedPieces.sort(cmpLenRev);

	        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	        this._weekdaysShortRegex = this._weekdaysRegex;
	        this._weekdaysMinRegex = this._weekdaysRegex;

	        this._weekdaysStrictRegex = new RegExp(
	            '^(' + longPieces.join('|') + ')',
	            'i'
	        );
	        this._weekdaysShortStrictRegex = new RegExp(
	            '^(' + shortPieces.join('|') + ')',
	            'i'
	        );
	        this._weekdaysMinStrictRegex = new RegExp(
	            '^(' + minPieces.join('|') + ')',
	            'i'
	        );
	    }

	    // FORMATTING

	    function hFormat() {
	        return this.hours() % 12 || 12;
	    }

	    function kFormat() {
	        return this.hours() || 24;
	    }

	    addFormatToken('H', ['HH', 2], 0, 'hour');
	    addFormatToken('h', ['hh', 2], 0, hFormat);
	    addFormatToken('k', ['kk', 2], 0, kFormat);

	    addFormatToken('hmm', 0, 0, function () {
	        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
	    });

	    addFormatToken('hmmss', 0, 0, function () {
	        return (
	            '' +
	            hFormat.apply(this) +
	            zeroFill(this.minutes(), 2) +
	            zeroFill(this.seconds(), 2)
	        );
	    });

	    addFormatToken('Hmm', 0, 0, function () {
	        return '' + this.hours() + zeroFill(this.minutes(), 2);
	    });

	    addFormatToken('Hmmss', 0, 0, function () {
	        return (
	            '' +
	            this.hours() +
	            zeroFill(this.minutes(), 2) +
	            zeroFill(this.seconds(), 2)
	        );
	    });

	    function meridiem(token, lowercase) {
	        addFormatToken(token, 0, 0, function () {
	            return this.localeData().meridiem(
	                this.hours(),
	                this.minutes(),
	                lowercase
	            );
	        });
	    }

	    meridiem('a', true);
	    meridiem('A', false);

	    // ALIASES

	    addUnitAlias('hour', 'h');

	    // PRIORITY
	    addUnitPriority('hour', 13);

	    // PARSING

	    function matchMeridiem(isStrict, locale) {
	        return locale._meridiemParse;
	    }

	    addRegexToken('a', matchMeridiem);
	    addRegexToken('A', matchMeridiem);
	    addRegexToken('H', match1to2);
	    addRegexToken('h', match1to2);
	    addRegexToken('k', match1to2);
	    addRegexToken('HH', match1to2, match2);
	    addRegexToken('hh', match1to2, match2);
	    addRegexToken('kk', match1to2, match2);

	    addRegexToken('hmm', match3to4);
	    addRegexToken('hmmss', match5to6);
	    addRegexToken('Hmm', match3to4);
	    addRegexToken('Hmmss', match5to6);

	    addParseToken(['H', 'HH'], HOUR);
	    addParseToken(['k', 'kk'], function (input, array, config) {
	        var kInput = toInt(input);
	        array[HOUR] = kInput === 24 ? 0 : kInput;
	    });
	    addParseToken(['a', 'A'], function (input, array, config) {
	        config._isPm = config._locale.isPM(input);
	        config._meridiem = input;
	    });
	    addParseToken(['h', 'hh'], function (input, array, config) {
	        array[HOUR] = toInt(input);
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('hmm', function (input, array, config) {
	        var pos = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos));
	        array[MINUTE] = toInt(input.substr(pos));
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('hmmss', function (input, array, config) {
	        var pos1 = input.length - 4,
	            pos2 = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos1));
	        array[MINUTE] = toInt(input.substr(pos1, 2));
	        array[SECOND] = toInt(input.substr(pos2));
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('Hmm', function (input, array, config) {
	        var pos = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos));
	        array[MINUTE] = toInt(input.substr(pos));
	    });
	    addParseToken('Hmmss', function (input, array, config) {
	        var pos1 = input.length - 4,
	            pos2 = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos1));
	        array[MINUTE] = toInt(input.substr(pos1, 2));
	        array[SECOND] = toInt(input.substr(pos2));
	    });

	    // LOCALES

	    function localeIsPM(input) {
	        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
	        // Using charAt should be more compatible.
	        return (input + '').toLowerCase().charAt(0) === 'p';
	    }

	    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
	        // Setting the hour should keep the time, because the user explicitly
	        // specified which hour they want. So trying to maintain the same hour (in
	        // a new timezone) makes sense. Adding/subtracting hours does not follow
	        // this rule.
	        getSetHour = makeGetSet('Hours', true);

	    function localeMeridiem(hours, minutes, isLower) {
	        if (hours > 11) {
	            return isLower ? 'pm' : 'PM';
	        } else {
	            return isLower ? 'am' : 'AM';
	        }
	    }

	    var baseConfig = {
	        calendar: defaultCalendar,
	        longDateFormat: defaultLongDateFormat,
	        invalidDate: defaultInvalidDate,
	        ordinal: defaultOrdinal,
	        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
	        relativeTime: defaultRelativeTime,

	        months: defaultLocaleMonths,
	        monthsShort: defaultLocaleMonthsShort,

	        week: defaultLocaleWeek,

	        weekdays: defaultLocaleWeekdays,
	        weekdaysMin: defaultLocaleWeekdaysMin,
	        weekdaysShort: defaultLocaleWeekdaysShort,

	        meridiemParse: defaultLocaleMeridiemParse,
	    };

	    // internal storage for locale config files
	    var locales = {},
	        localeFamilies = {},
	        globalLocale;

	    function commonPrefix(arr1, arr2) {
	        var i,
	            minl = Math.min(arr1.length, arr2.length);
	        for (i = 0; i < minl; i += 1) {
	            if (arr1[i] !== arr2[i]) {
	                return i;
	            }
	        }
	        return minl;
	    }

	    function normalizeLocale(key) {
	        return key ? key.toLowerCase().replace('_', '-') : key;
	    }

	    // pick the locale from the array
	    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
	    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
	    function chooseLocale(names) {
	        var i = 0,
	            j,
	            next,
	            locale,
	            split;

	        while (i < names.length) {
	            split = normalizeLocale(names[i]).split('-');
	            j = split.length;
	            next = normalizeLocale(names[i + 1]);
	            next = next ? next.split('-') : null;
	            while (j > 0) {
	                locale = loadLocale(split.slice(0, j).join('-'));
	                if (locale) {
	                    return locale;
	                }
	                if (
	                    next &&
	                    next.length >= j &&
	                    commonPrefix(split, next) >= j - 1
	                ) {
	                    //the next array item is better than a shallower substring of this one
	                    break;
	                }
	                j--;
	            }
	            i++;
	        }
	        return globalLocale;
	    }

	    function loadLocale(name) {
	        var oldLocale = null,
	            aliasedRequire;
	        // TODO: Find a better way to register and load all the locales in Node
	        if (
	            locales[name] === undefined &&
	            'object' !== 'undefined' &&
	            module &&
	            module.exports
	        ) {
	            try {
	                oldLocale = globalLocale._abbr;
	                aliasedRequire = commonjsRequire;
	                aliasedRequire('./locale/' + name);
	                getSetGlobalLocale(oldLocale);
	            } catch (e) {
	                // mark as not found to avoid repeating expensive file require call causing high CPU
	                // when trying to find en-US, en_US, en-us for every format call
	                locales[name] = null; // null means not found
	            }
	        }
	        return locales[name];
	    }

	    // This function will load locale and then set the global locale.  If
	    // no arguments are passed in, it will simply return the current global
	    // locale key.
	    function getSetGlobalLocale(key, values) {
	        var data;
	        if (key) {
	            if (isUndefined(values)) {
	                data = getLocale(key);
	            } else {
	                data = defineLocale(key, values);
	            }

	            if (data) {
	                // moment.duration._locale = moment._locale = data;
	                globalLocale = data;
	            } else {
	                if (typeof console !== 'undefined' && console.warn) {
	                    //warn user if arguments are passed but the locale could not be set
	                    console.warn(
	                        'Locale ' + key + ' not found. Did you forget to load it?'
	                    );
	                }
	            }
	        }

	        return globalLocale._abbr;
	    }

	    function defineLocale(name, config) {
	        if (config !== null) {
	            var locale,
	                parentConfig = baseConfig;
	            config.abbr = name;
	            if (locales[name] != null) {
	                deprecateSimple(
	                    'defineLocaleOverride',
	                    'use moment.updateLocale(localeName, config) to change ' +
	                        'an existing locale. moment.defineLocale(localeName, ' +
	                        'config) should only be used for creating a new locale ' +
	                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'
	                );
	                parentConfig = locales[name]._config;
	            } else if (config.parentLocale != null) {
	                if (locales[config.parentLocale] != null) {
	                    parentConfig = locales[config.parentLocale]._config;
	                } else {
	                    locale = loadLocale(config.parentLocale);
	                    if (locale != null) {
	                        parentConfig = locale._config;
	                    } else {
	                        if (!localeFamilies[config.parentLocale]) {
	                            localeFamilies[config.parentLocale] = [];
	                        }
	                        localeFamilies[config.parentLocale].push({
	                            name: name,
	                            config: config,
	                        });
	                        return null;
	                    }
	                }
	            }
	            locales[name] = new Locale(mergeConfigs(parentConfig, config));

	            if (localeFamilies[name]) {
	                localeFamilies[name].forEach(function (x) {
	                    defineLocale(x.name, x.config);
	                });
	            }

	            // backwards compat for now: also set the locale
	            // make sure we set the locale AFTER all child locales have been
	            // created, so we won't end up with the child locale set.
	            getSetGlobalLocale(name);

	            return locales[name];
	        } else {
	            // useful for testing
	            delete locales[name];
	            return null;
	        }
	    }

	    function updateLocale(name, config) {
	        if (config != null) {
	            var locale,
	                tmpLocale,
	                parentConfig = baseConfig;

	            if (locales[name] != null && locales[name].parentLocale != null) {
	                // Update existing child locale in-place to avoid memory-leaks
	                locales[name].set(mergeConfigs(locales[name]._config, config));
	            } else {
	                // MERGE
	                tmpLocale = loadLocale(name);
	                if (tmpLocale != null) {
	                    parentConfig = tmpLocale._config;
	                }
	                config = mergeConfigs(parentConfig, config);
	                if (tmpLocale == null) {
	                    // updateLocale is called for creating a new locale
	                    // Set abbr so it will have a name (getters return
	                    // undefined otherwise).
	                    config.abbr = name;
	                }
	                locale = new Locale(config);
	                locale.parentLocale = locales[name];
	                locales[name] = locale;
	            }

	            // backwards compat for now: also set the locale
	            getSetGlobalLocale(name);
	        } else {
	            // pass null for config to unupdate, useful for tests
	            if (locales[name] != null) {
	                if (locales[name].parentLocale != null) {
	                    locales[name] = locales[name].parentLocale;
	                    if (name === getSetGlobalLocale()) {
	                        getSetGlobalLocale(name);
	                    }
	                } else if (locales[name] != null) {
	                    delete locales[name];
	                }
	            }
	        }
	        return locales[name];
	    }

	    // returns locale data
	    function getLocale(key) {
	        var locale;

	        if (key && key._locale && key._locale._abbr) {
	            key = key._locale._abbr;
	        }

	        if (!key) {
	            return globalLocale;
	        }

	        if (!isArray(key)) {
	            //short-circuit everything else
	            locale = loadLocale(key);
	            if (locale) {
	                return locale;
	            }
	            key = [key];
	        }

	        return chooseLocale(key);
	    }

	    function listLocales() {
	        return keys(locales);
	    }

	    function checkOverflow(m) {
	        var overflow,
	            a = m._a;

	        if (a && getParsingFlags(m).overflow === -2) {
	            overflow =
	                a[MONTH] < 0 || a[MONTH] > 11
	                    ? MONTH
	                    : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])
	                    ? DATE
	                    : a[HOUR] < 0 ||
	                      a[HOUR] > 24 ||
	                      (a[HOUR] === 24 &&
	                          (a[MINUTE] !== 0 ||
	                              a[SECOND] !== 0 ||
	                              a[MILLISECOND] !== 0))
	                    ? HOUR
	                    : a[MINUTE] < 0 || a[MINUTE] > 59
	                    ? MINUTE
	                    : a[SECOND] < 0 || a[SECOND] > 59
	                    ? SECOND
	                    : a[MILLISECOND] < 0 || a[MILLISECOND] > 999
	                    ? MILLISECOND
	                    : -1;

	            if (
	                getParsingFlags(m)._overflowDayOfYear &&
	                (overflow < YEAR || overflow > DATE)
	            ) {
	                overflow = DATE;
	            }
	            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
	                overflow = WEEK;
	            }
	            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
	                overflow = WEEKDAY;
	            }

	            getParsingFlags(m).overflow = overflow;
	        }

	        return m;
	    }

	    // iso 8601 regex
	    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
	    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
	        basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
	        tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
	        isoDates = [
	            ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
	            ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
	            ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
	            ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
	            ['YYYY-DDD', /\d{4}-\d{3}/],
	            ['YYYY-MM', /\d{4}-\d\d/, false],
	            ['YYYYYYMMDD', /[+-]\d{10}/],
	            ['YYYYMMDD', /\d{8}/],
	            ['GGGG[W]WWE', /\d{4}W\d{3}/],
	            ['GGGG[W]WW', /\d{4}W\d{2}/, false],
	            ['YYYYDDD', /\d{7}/],
	            ['YYYYMM', /\d{6}/, false],
	            ['YYYY', /\d{4}/, false],
	        ],
	        // iso time formats and regexes
	        isoTimes = [
	            ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
	            ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
	            ['HH:mm:ss', /\d\d:\d\d:\d\d/],
	            ['HH:mm', /\d\d:\d\d/],
	            ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
	            ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
	            ['HHmmss', /\d\d\d\d\d\d/],
	            ['HHmm', /\d\d\d\d/],
	            ['HH', /\d\d/],
	        ],
	        aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
	        // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
	        rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
	        obsOffsets = {
	            UT: 0,
	            GMT: 0,
	            EDT: -4 * 60,
	            EST: -5 * 60,
	            CDT: -5 * 60,
	            CST: -6 * 60,
	            MDT: -6 * 60,
	            MST: -7 * 60,
	            PDT: -7 * 60,
	            PST: -8 * 60,
	        };

	    // date from iso format
	    function configFromISO(config) {
	        var i,
	            l,
	            string = config._i,
	            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
	            allowTime,
	            dateFormat,
	            timeFormat,
	            tzFormat;

	        if (match) {
	            getParsingFlags(config).iso = true;

	            for (i = 0, l = isoDates.length; i < l; i++) {
	                if (isoDates[i][1].exec(match[1])) {
	                    dateFormat = isoDates[i][0];
	                    allowTime = isoDates[i][2] !== false;
	                    break;
	                }
	            }
	            if (dateFormat == null) {
	                config._isValid = false;
	                return;
	            }
	            if (match[3]) {
	                for (i = 0, l = isoTimes.length; i < l; i++) {
	                    if (isoTimes[i][1].exec(match[3])) {
	                        // match[2] should be 'T' or space
	                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
	                        break;
	                    }
	                }
	                if (timeFormat == null) {
	                    config._isValid = false;
	                    return;
	                }
	            }
	            if (!allowTime && timeFormat != null) {
	                config._isValid = false;
	                return;
	            }
	            if (match[4]) {
	                if (tzRegex.exec(match[4])) {
	                    tzFormat = 'Z';
	                } else {
	                    config._isValid = false;
	                    return;
	                }
	            }
	            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
	            configFromStringAndFormat(config);
	        } else {
	            config._isValid = false;
	        }
	    }

	    function extractFromRFC2822Strings(
	        yearStr,
	        monthStr,
	        dayStr,
	        hourStr,
	        minuteStr,
	        secondStr
	    ) {
	        var result = [
	            untruncateYear(yearStr),
	            defaultLocaleMonthsShort.indexOf(monthStr),
	            parseInt(dayStr, 10),
	            parseInt(hourStr, 10),
	            parseInt(minuteStr, 10),
	        ];

	        if (secondStr) {
	            result.push(parseInt(secondStr, 10));
	        }

	        return result;
	    }

	    function untruncateYear(yearStr) {
	        var year = parseInt(yearStr, 10);
	        if (year <= 49) {
	            return 2000 + year;
	        } else if (year <= 999) {
	            return 1900 + year;
	        }
	        return year;
	    }

	    function preprocessRFC2822(s) {
	        // Remove comments and folding whitespace and replace multiple-spaces with a single space
	        return s
	            .replace(/\([^)]*\)|[\n\t]/g, ' ')
	            .replace(/(\s\s+)/g, ' ')
	            .replace(/^\s\s*/, '')
	            .replace(/\s\s*$/, '');
	    }

	    function checkWeekday(weekdayStr, parsedInput, config) {
	        if (weekdayStr) {
	            // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
	            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
	                weekdayActual = new Date(
	                    parsedInput[0],
	                    parsedInput[1],
	                    parsedInput[2]
	                ).getDay();
	            if (weekdayProvided !== weekdayActual) {
	                getParsingFlags(config).weekdayMismatch = true;
	                config._isValid = false;
	                return false;
	            }
	        }
	        return true;
	    }

	    function calculateOffset(obsOffset, militaryOffset, numOffset) {
	        if (obsOffset) {
	            return obsOffsets[obsOffset];
	        } else if (militaryOffset) {
	            // the only allowed military tz is Z
	            return 0;
	        } else {
	            var hm = parseInt(numOffset, 10),
	                m = hm % 100,
	                h = (hm - m) / 100;
	            return h * 60 + m;
	        }
	    }

	    // date and time from ref 2822 format
	    function configFromRFC2822(config) {
	        var match = rfc2822.exec(preprocessRFC2822(config._i)),
	            parsedArray;
	        if (match) {
	            parsedArray = extractFromRFC2822Strings(
	                match[4],
	                match[3],
	                match[2],
	                match[5],
	                match[6],
	                match[7]
	            );
	            if (!checkWeekday(match[1], parsedArray, config)) {
	                return;
	            }

	            config._a = parsedArray;
	            config._tzm = calculateOffset(match[8], match[9], match[10]);

	            config._d = createUTCDate.apply(null, config._a);
	            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

	            getParsingFlags(config).rfc2822 = true;
	        } else {
	            config._isValid = false;
	        }
	    }

	    // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
	    function configFromString(config) {
	        var matched = aspNetJsonRegex.exec(config._i);
	        if (matched !== null) {
	            config._d = new Date(+matched[1]);
	            return;
	        }

	        configFromISO(config);
	        if (config._isValid === false) {
	            delete config._isValid;
	        } else {
	            return;
	        }

	        configFromRFC2822(config);
	        if (config._isValid === false) {
	            delete config._isValid;
	        } else {
	            return;
	        }

	        if (config._strict) {
	            config._isValid = false;
	        } else {
	            // Final attempt, use Input Fallback
	            hooks.createFromInputFallback(config);
	        }
	    }

	    hooks.createFromInputFallback = deprecate(
	        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
	            'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
	            'discouraged and will be removed in an upcoming major release. Please refer to ' +
	            'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
	        function (config) {
	            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
	        }
	    );

	    // Pick the first defined of two or three arguments.
	    function defaults(a, b, c) {
	        if (a != null) {
	            return a;
	        }
	        if (b != null) {
	            return b;
	        }
	        return c;
	    }

	    function currentDateArray(config) {
	        // hooks is actually the exported moment object
	        var nowValue = new Date(hooks.now());
	        if (config._useUTC) {
	            return [
	                nowValue.getUTCFullYear(),
	                nowValue.getUTCMonth(),
	                nowValue.getUTCDate(),
	            ];
	        }
	        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
	    }

	    // convert an array to a date.
	    // the array should mirror the parameters below
	    // note: all values past the year are optional and will default to the lowest possible value.
	    // [year, month, day , hour, minute, second, millisecond]
	    function configFromArray(config) {
	        var i,
	            date,
	            input = [],
	            currentDate,
	            expectedWeekday,
	            yearToUse;

	        if (config._d) {
	            return;
	        }

	        currentDate = currentDateArray(config);

	        //compute day of the year from weeks and weekdays
	        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
	            dayOfYearFromWeekInfo(config);
	        }

	        //if the day of the year is set, figure out what it is
	        if (config._dayOfYear != null) {
	            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

	            if (
	                config._dayOfYear > daysInYear(yearToUse) ||
	                config._dayOfYear === 0
	            ) {
	                getParsingFlags(config)._overflowDayOfYear = true;
	            }

	            date = createUTCDate(yearToUse, 0, config._dayOfYear);
	            config._a[MONTH] = date.getUTCMonth();
	            config._a[DATE] = date.getUTCDate();
	        }

	        // Default to current date.
	        // * if no year, month, day of month are given, default to today
	        // * if day of month is given, default month and year
	        // * if month is given, default only year
	        // * if year is given, don't default anything
	        for (i = 0; i < 3 && config._a[i] == null; ++i) {
	            config._a[i] = input[i] = currentDate[i];
	        }

	        // Zero out whatever was not defaulted, including time
	        for (; i < 7; i++) {
	            config._a[i] = input[i] =
	                config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];
	        }

	        // Check for 24:00:00.000
	        if (
	            config._a[HOUR] === 24 &&
	            config._a[MINUTE] === 0 &&
	            config._a[SECOND] === 0 &&
	            config._a[MILLISECOND] === 0
	        ) {
	            config._nextDay = true;
	            config._a[HOUR] = 0;
	        }

	        config._d = (config._useUTC ? createUTCDate : createDate).apply(
	            null,
	            input
	        );
	        expectedWeekday = config._useUTC
	            ? config._d.getUTCDay()
	            : config._d.getDay();

	        // Apply timezone offset from input. The actual utcOffset can be changed
	        // with parseZone.
	        if (config._tzm != null) {
	            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
	        }

	        if (config._nextDay) {
	            config._a[HOUR] = 24;
	        }

	        // check for mismatching day of week
	        if (
	            config._w &&
	            typeof config._w.d !== 'undefined' &&
	            config._w.d !== expectedWeekday
	        ) {
	            getParsingFlags(config).weekdayMismatch = true;
	        }
	    }

	    function dayOfYearFromWeekInfo(config) {
	        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;

	        w = config._w;
	        if (w.GG != null || w.W != null || w.E != null) {
	            dow = 1;
	            doy = 4;

	            // TODO: We need to take the current isoWeekYear, but that depends on
	            // how we interpret now (local, utc, fixed offset). So create
	            // a now version of current config (take local/utc/offset flags, and
	            // create now).
	            weekYear = defaults(
	                w.GG,
	                config._a[YEAR],
	                weekOfYear(createLocal(), 1, 4).year
	            );
	            week = defaults(w.W, 1);
	            weekday = defaults(w.E, 1);
	            if (weekday < 1 || weekday > 7) {
	                weekdayOverflow = true;
	            }
	        } else {
	            dow = config._locale._week.dow;
	            doy = config._locale._week.doy;

	            curWeek = weekOfYear(createLocal(), dow, doy);

	            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

	            // Default to current week.
	            week = defaults(w.w, curWeek.week);

	            if (w.d != null) {
	                // weekday -- low day numbers are considered next week
	                weekday = w.d;
	                if (weekday < 0 || weekday > 6) {
	                    weekdayOverflow = true;
	                }
	            } else if (w.e != null) {
	                // local weekday -- counting starts from beginning of week
	                weekday = w.e + dow;
	                if (w.e < 0 || w.e > 6) {
	                    weekdayOverflow = true;
	                }
	            } else {
	                // default to beginning of week
	                weekday = dow;
	            }
	        }
	        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
	            getParsingFlags(config)._overflowWeeks = true;
	        } else if (weekdayOverflow != null) {
	            getParsingFlags(config)._overflowWeekday = true;
	        } else {
	            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
	            config._a[YEAR] = temp.year;
	            config._dayOfYear = temp.dayOfYear;
	        }
	    }

	    // constant that refers to the ISO standard
	    hooks.ISO_8601 = function () {};

	    // constant that refers to the RFC 2822 form
	    hooks.RFC_2822 = function () {};

	    // date from string and format string
	    function configFromStringAndFormat(config) {
	        // TODO: Move this to another part of the creation flow to prevent circular deps
	        if (config._f === hooks.ISO_8601) {
	            configFromISO(config);
	            return;
	        }
	        if (config._f === hooks.RFC_2822) {
	            configFromRFC2822(config);
	            return;
	        }
	        config._a = [];
	        getParsingFlags(config).empty = true;

	        // This array is used to make a Date, either with `new Date` or `Date.UTC`
	        var string = '' + config._i,
	            i,
	            parsedInput,
	            tokens,
	            token,
	            skipped,
	            stringLength = string.length,
	            totalParsedInputLength = 0,
	            era;

	        tokens =
	            expandFormat(config._f, config._locale).match(formattingTokens) || [];

	        for (i = 0; i < tokens.length; i++) {
	            token = tokens[i];
	            parsedInput = (string.match(getParseRegexForToken(token, config)) ||
	                [])[0];
	            if (parsedInput) {
	                skipped = string.substr(0, string.indexOf(parsedInput));
	                if (skipped.length > 0) {
	                    getParsingFlags(config).unusedInput.push(skipped);
	                }
	                string = string.slice(
	                    string.indexOf(parsedInput) + parsedInput.length
	                );
	                totalParsedInputLength += parsedInput.length;
	            }
	            // don't parse if it's not a known token
	            if (formatTokenFunctions[token]) {
	                if (parsedInput) {
	                    getParsingFlags(config).empty = false;
	                } else {
	                    getParsingFlags(config).unusedTokens.push(token);
	                }
	                addTimeToArrayFromToken(token, parsedInput, config);
	            } else if (config._strict && !parsedInput) {
	                getParsingFlags(config).unusedTokens.push(token);
	            }
	        }

	        // add remaining unparsed input length to the string
	        getParsingFlags(config).charsLeftOver =
	            stringLength - totalParsedInputLength;
	        if (string.length > 0) {
	            getParsingFlags(config).unusedInput.push(string);
	        }

	        // clear _12h flag if hour is <= 12
	        if (
	            config._a[HOUR] <= 12 &&
	            getParsingFlags(config).bigHour === true &&
	            config._a[HOUR] > 0
	        ) {
	            getParsingFlags(config).bigHour = undefined;
	        }

	        getParsingFlags(config).parsedDateParts = config._a.slice(0);
	        getParsingFlags(config).meridiem = config._meridiem;
	        // handle meridiem
	        config._a[HOUR] = meridiemFixWrap(
	            config._locale,
	            config._a[HOUR],
	            config._meridiem
	        );

	        // handle era
	        era = getParsingFlags(config).era;
	        if (era !== null) {
	            config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
	        }

	        configFromArray(config);
	        checkOverflow(config);
	    }

	    function meridiemFixWrap(locale, hour, meridiem) {
	        var isPm;

	        if (meridiem == null) {
	            // nothing to do
	            return hour;
	        }
	        if (locale.meridiemHour != null) {
	            return locale.meridiemHour(hour, meridiem);
	        } else if (locale.isPM != null) {
	            // Fallback
	            isPm = locale.isPM(meridiem);
	            if (isPm && hour < 12) {
	                hour += 12;
	            }
	            if (!isPm && hour === 12) {
	                hour = 0;
	            }
	            return hour;
	        } else {
	            // this is not supposed to happen
	            return hour;
	        }
	    }

	    // date from string and array of format strings
	    function configFromStringAndArray(config) {
	        var tempConfig,
	            bestMoment,
	            scoreToBeat,
	            i,
	            currentScore,
	            validFormatFound,
	            bestFormatIsValid = false;

	        if (config._f.length === 0) {
	            getParsingFlags(config).invalidFormat = true;
	            config._d = new Date(NaN);
	            return;
	        }

	        for (i = 0; i < config._f.length; i++) {
	            currentScore = 0;
	            validFormatFound = false;
	            tempConfig = copyConfig({}, config);
	            if (config._useUTC != null) {
	                tempConfig._useUTC = config._useUTC;
	            }
	            tempConfig._f = config._f[i];
	            configFromStringAndFormat(tempConfig);

	            if (isValid(tempConfig)) {
	                validFormatFound = true;
	            }

	            // if there is any input that was not parsed add a penalty for that format
	            currentScore += getParsingFlags(tempConfig).charsLeftOver;

	            //or tokens
	            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

	            getParsingFlags(tempConfig).score = currentScore;

	            if (!bestFormatIsValid) {
	                if (
	                    scoreToBeat == null ||
	                    currentScore < scoreToBeat ||
	                    validFormatFound
	                ) {
	                    scoreToBeat = currentScore;
	                    bestMoment = tempConfig;
	                    if (validFormatFound) {
	                        bestFormatIsValid = true;
	                    }
	                }
	            } else {
	                if (currentScore < scoreToBeat) {
	                    scoreToBeat = currentScore;
	                    bestMoment = tempConfig;
	                }
	            }
	        }

	        extend(config, bestMoment || tempConfig);
	    }

	    function configFromObject(config) {
	        if (config._d) {
	            return;
	        }

	        var i = normalizeObjectUnits(config._i),
	            dayOrDate = i.day === undefined ? i.date : i.day;
	        config._a = map(
	            [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
	            function (obj) {
	                return obj && parseInt(obj, 10);
	            }
	        );

	        configFromArray(config);
	    }

	    function createFromConfig(config) {
	        var res = new Moment(checkOverflow(prepareConfig(config)));
	        if (res._nextDay) {
	            // Adding is smart enough around DST
	            res.add(1, 'd');
	            res._nextDay = undefined;
	        }

	        return res;
	    }

	    function prepareConfig(config) {
	        var input = config._i,
	            format = config._f;

	        config._locale = config._locale || getLocale(config._l);

	        if (input === null || (format === undefined && input === '')) {
	            return createInvalid({ nullInput: true });
	        }

	        if (typeof input === 'string') {
	            config._i = input = config._locale.preparse(input);
	        }

	        if (isMoment(input)) {
	            return new Moment(checkOverflow(input));
	        } else if (isDate(input)) {
	            config._d = input;
	        } else if (isArray(format)) {
	            configFromStringAndArray(config);
	        } else if (format) {
	            configFromStringAndFormat(config);
	        } else {
	            configFromInput(config);
	        }

	        if (!isValid(config)) {
	            config._d = null;
	        }

	        return config;
	    }

	    function configFromInput(config) {
	        var input = config._i;
	        if (isUndefined(input)) {
	            config._d = new Date(hooks.now());
	        } else if (isDate(input)) {
	            config._d = new Date(input.valueOf());
	        } else if (typeof input === 'string') {
	            configFromString(config);
	        } else if (isArray(input)) {
	            config._a = map(input.slice(0), function (obj) {
	                return parseInt(obj, 10);
	            });
	            configFromArray(config);
	        } else if (isObject(input)) {
	            configFromObject(config);
	        } else if (isNumber(input)) {
	            // from milliseconds
	            config._d = new Date(input);
	        } else {
	            hooks.createFromInputFallback(config);
	        }
	    }

	    function createLocalOrUTC(input, format, locale, strict, isUTC) {
	        var c = {};

	        if (format === true || format === false) {
	            strict = format;
	            format = undefined;
	        }

	        if (locale === true || locale === false) {
	            strict = locale;
	            locale = undefined;
	        }

	        if (
	            (isObject(input) && isObjectEmpty(input)) ||
	            (isArray(input) && input.length === 0)
	        ) {
	            input = undefined;
	        }
	        // object construction must be done this way.
	        // https://github.com/moment/moment/issues/1423
	        c._isAMomentObject = true;
	        c._useUTC = c._isUTC = isUTC;
	        c._l = locale;
	        c._i = input;
	        c._f = format;
	        c._strict = strict;

	        return createFromConfig(c);
	    }

	    function createLocal(input, format, locale, strict) {
	        return createLocalOrUTC(input, format, locale, strict, false);
	    }

	    var prototypeMin = deprecate(
	            'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
	            function () {
	                var other = createLocal.apply(null, arguments);
	                if (this.isValid() && other.isValid()) {
	                    return other < this ? this : other;
	                } else {
	                    return createInvalid();
	                }
	            }
	        ),
	        prototypeMax = deprecate(
	            'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
	            function () {
	                var other = createLocal.apply(null, arguments);
	                if (this.isValid() && other.isValid()) {
	                    return other > this ? this : other;
	                } else {
	                    return createInvalid();
	                }
	            }
	        );

	    // Pick a moment m from moments so that m[fn](other) is true for all
	    // other. This relies on the function fn to be transitive.
	    //
	    // moments should either be an array of moment objects or an array, whose
	    // first element is an array of moment objects.
	    function pickBy(fn, moments) {
	        var res, i;
	        if (moments.length === 1 && isArray(moments[0])) {
	            moments = moments[0];
	        }
	        if (!moments.length) {
	            return createLocal();
	        }
	        res = moments[0];
	        for (i = 1; i < moments.length; ++i) {
	            if (!moments[i].isValid() || moments[i][fn](res)) {
	                res = moments[i];
	            }
	        }
	        return res;
	    }

	    // TODO: Use [].sort instead?
	    function min() {
	        var args = [].slice.call(arguments, 0);

	        return pickBy('isBefore', args);
	    }

	    function max() {
	        var args = [].slice.call(arguments, 0);

	        return pickBy('isAfter', args);
	    }

	    var now = function () {
	        return Date.now ? Date.now() : +new Date();
	    };

	    var ordering = [
	        'year',
	        'quarter',
	        'month',
	        'week',
	        'day',
	        'hour',
	        'minute',
	        'second',
	        'millisecond',
	    ];

	    function isDurationValid(m) {
	        var key,
	            unitHasDecimal = false,
	            i;
	        for (key in m) {
	            if (
	                hasOwnProp(m, key) &&
	                !(
	                    indexOf.call(ordering, key) !== -1 &&
	                    (m[key] == null || !isNaN(m[key]))
	                )
	            ) {
	                return false;
	            }
	        }

	        for (i = 0; i < ordering.length; ++i) {
	            if (m[ordering[i]]) {
	                if (unitHasDecimal) {
	                    return false; // only allow non-integers for smallest unit
	                }
	                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
	                    unitHasDecimal = true;
	                }
	            }
	        }

	        return true;
	    }

	    function isValid$1() {
	        return this._isValid;
	    }

	    function createInvalid$1() {
	        return createDuration(NaN);
	    }

	    function Duration(duration) {
	        var normalizedInput = normalizeObjectUnits(duration),
	            years = normalizedInput.year || 0,
	            quarters = normalizedInput.quarter || 0,
	            months = normalizedInput.month || 0,
	            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
	            days = normalizedInput.day || 0,
	            hours = normalizedInput.hour || 0,
	            minutes = normalizedInput.minute || 0,
	            seconds = normalizedInput.second || 0,
	            milliseconds = normalizedInput.millisecond || 0;

	        this._isValid = isDurationValid(normalizedInput);

	        // representation for dateAddRemove
	        this._milliseconds =
	            +milliseconds +
	            seconds * 1e3 + // 1000
	            minutes * 6e4 + // 1000 * 60
	            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
	        // Because of dateAddRemove treats 24 hours as different from a
	        // day when working around DST, we need to store them separately
	        this._days = +days + weeks * 7;
	        // It is impossible to translate months into days without knowing
	        // which months you are are talking about, so we have to store
	        // it separately.
	        this._months = +months + quarters * 3 + years * 12;

	        this._data = {};

	        this._locale = getLocale();

	        this._bubble();
	    }

	    function isDuration(obj) {
	        return obj instanceof Duration;
	    }

	    function absRound(number) {
	        if (number < 0) {
	            return Math.round(-1 * number) * -1;
	        } else {
	            return Math.round(number);
	        }
	    }

	    // compare two arrays, return the number of differences
	    function compareArrays(array1, array2, dontConvert) {
	        var len = Math.min(array1.length, array2.length),
	            lengthDiff = Math.abs(array1.length - array2.length),
	            diffs = 0,
	            i;
	        for (i = 0; i < len; i++) {
	            if (
	                (dontConvert && array1[i] !== array2[i]) ||
	                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))
	            ) {
	                diffs++;
	            }
	        }
	        return diffs + lengthDiff;
	    }

	    // FORMATTING

	    function offset(token, separator) {
	        addFormatToken(token, 0, 0, function () {
	            var offset = this.utcOffset(),
	                sign = '+';
	            if (offset < 0) {
	                offset = -offset;
	                sign = '-';
	            }
	            return (
	                sign +
	                zeroFill(~~(offset / 60), 2) +
	                separator +
	                zeroFill(~~offset % 60, 2)
	            );
	        });
	    }

	    offset('Z', ':');
	    offset('ZZ', '');

	    // PARSING

	    addRegexToken('Z', matchShortOffset);
	    addRegexToken('ZZ', matchShortOffset);
	    addParseToken(['Z', 'ZZ'], function (input, array, config) {
	        config._useUTC = true;
	        config._tzm = offsetFromString(matchShortOffset, input);
	    });

	    // HELPERS

	    // timezone chunker
	    // '+10:00' > ['10',  '00']
	    // '-1530'  > ['-15', '30']
	    var chunkOffset = /([\+\-]|\d\d)/gi;

	    function offsetFromString(matcher, string) {
	        var matches = (string || '').match(matcher),
	            chunk,
	            parts,
	            minutes;

	        if (matches === null) {
	            return null;
	        }

	        chunk = matches[matches.length - 1] || [];
	        parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
	        minutes = +(parts[1] * 60) + toInt(parts[2]);

	        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
	    }

	    // Return a moment from input, that is local/utc/zone equivalent to model.
	    function cloneWithOffset(input, model) {
	        var res, diff;
	        if (model._isUTC) {
	            res = model.clone();
	            diff =
	                (isMoment(input) || isDate(input)
	                    ? input.valueOf()
	                    : createLocal(input).valueOf()) - res.valueOf();
	            // Use low-level api, because this fn is low-level api.
	            res._d.setTime(res._d.valueOf() + diff);
	            hooks.updateOffset(res, false);
	            return res;
	        } else {
	            return createLocal(input).local();
	        }
	    }

	    function getDateOffset(m) {
	        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
	        // https://github.com/moment/moment/pull/1871
	        return -Math.round(m._d.getTimezoneOffset());
	    }

	    // HOOKS

	    // This function will be called whenever a moment is mutated.
	    // It is intended to keep the offset in sync with the timezone.
	    hooks.updateOffset = function () {};

	    // MOMENTS

	    // keepLocalTime = true means only change the timezone, without
	    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
	    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
	    // +0200, so we adjust the time as needed, to be valid.
	    //
	    // Keeping the time actually adds/subtracts (one hour)
	    // from the actual represented time. That is why we call updateOffset
	    // a second time. In case it wants us to change the offset again
	    // _changeInProgress == true case, then we have to adjust, because
	    // there is no such time in the given timezone.
	    function getSetOffset(input, keepLocalTime, keepMinutes) {
	        var offset = this._offset || 0,
	            localAdjust;
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        if (input != null) {
	            if (typeof input === 'string') {
	                input = offsetFromString(matchShortOffset, input);
	                if (input === null) {
	                    return this;
	                }
	            } else if (Math.abs(input) < 16 && !keepMinutes) {
	                input = input * 60;
	            }
	            if (!this._isUTC && keepLocalTime) {
	                localAdjust = getDateOffset(this);
	            }
	            this._offset = input;
	            this._isUTC = true;
	            if (localAdjust != null) {
	                this.add(localAdjust, 'm');
	            }
	            if (offset !== input) {
	                if (!keepLocalTime || this._changeInProgress) {
	                    addSubtract(
	                        this,
	                        createDuration(input - offset, 'm'),
	                        1,
	                        false
	                    );
	                } else if (!this._changeInProgress) {
	                    this._changeInProgress = true;
	                    hooks.updateOffset(this, true);
	                    this._changeInProgress = null;
	                }
	            }
	            return this;
	        } else {
	            return this._isUTC ? offset : getDateOffset(this);
	        }
	    }

	    function getSetZone(input, keepLocalTime) {
	        if (input != null) {
	            if (typeof input !== 'string') {
	                input = -input;
	            }

	            this.utcOffset(input, keepLocalTime);

	            return this;
	        } else {
	            return -this.utcOffset();
	        }
	    }

	    function setOffsetToUTC(keepLocalTime) {
	        return this.utcOffset(0, keepLocalTime);
	    }

	    function setOffsetToLocal(keepLocalTime) {
	        if (this._isUTC) {
	            this.utcOffset(0, keepLocalTime);
	            this._isUTC = false;

	            if (keepLocalTime) {
	                this.subtract(getDateOffset(this), 'm');
	            }
	        }
	        return this;
	    }

	    function setOffsetToParsedOffset() {
	        if (this._tzm != null) {
	            this.utcOffset(this._tzm, false, true);
	        } else if (typeof this._i === 'string') {
	            var tZone = offsetFromString(matchOffset, this._i);
	            if (tZone != null) {
	                this.utcOffset(tZone);
	            } else {
	                this.utcOffset(0, true);
	            }
	        }
	        return this;
	    }

	    function hasAlignedHourOffset(input) {
	        if (!this.isValid()) {
	            return false;
	        }
	        input = input ? createLocal(input).utcOffset() : 0;

	        return (this.utcOffset() - input) % 60 === 0;
	    }

	    function isDaylightSavingTime() {
	        return (
	            this.utcOffset() > this.clone().month(0).utcOffset() ||
	            this.utcOffset() > this.clone().month(5).utcOffset()
	        );
	    }

	    function isDaylightSavingTimeShifted() {
	        if (!isUndefined(this._isDSTShifted)) {
	            return this._isDSTShifted;
	        }

	        var c = {},
	            other;

	        copyConfig(c, this);
	        c = prepareConfig(c);

	        if (c._a) {
	            other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
	            this._isDSTShifted =
	                this.isValid() && compareArrays(c._a, other.toArray()) > 0;
	        } else {
	            this._isDSTShifted = false;
	        }

	        return this._isDSTShifted;
	    }

	    function isLocal() {
	        return this.isValid() ? !this._isUTC : false;
	    }

	    function isUtcOffset() {
	        return this.isValid() ? this._isUTC : false;
	    }

	    function isUtc() {
	        return this.isValid() ? this._isUTC && this._offset === 0 : false;
	    }

	    // ASP.NET json date format regex
	    var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
	        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
	        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
	        // and further modified to allow for strings containing both week and day
	        isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

	    function createDuration(input, key) {
	        var duration = input,
	            // matching against regexp is expensive, do it on demand
	            match = null,
	            sign,
	            ret,
	            diffRes;

	        if (isDuration(input)) {
	            duration = {
	                ms: input._milliseconds,
	                d: input._days,
	                M: input._months,
	            };
	        } else if (isNumber(input) || !isNaN(+input)) {
	            duration = {};
	            if (key) {
	                duration[key] = +input;
	            } else {
	                duration.milliseconds = +input;
	            }
	        } else if ((match = aspNetRegex.exec(input))) {
	            sign = match[1] === '-' ? -1 : 1;
	            duration = {
	                y: 0,
	                d: toInt(match[DATE]) * sign,
	                h: toInt(match[HOUR]) * sign,
	                m: toInt(match[MINUTE]) * sign,
	                s: toInt(match[SECOND]) * sign,
	                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match
	            };
	        } else if ((match = isoRegex.exec(input))) {
	            sign = match[1] === '-' ? -1 : 1;
	            duration = {
	                y: parseIso(match[2], sign),
	                M: parseIso(match[3], sign),
	                w: parseIso(match[4], sign),
	                d: parseIso(match[5], sign),
	                h: parseIso(match[6], sign),
	                m: parseIso(match[7], sign),
	                s: parseIso(match[8], sign),
	            };
	        } else if (duration == null) {
	            // checks for null or undefined
	            duration = {};
	        } else if (
	            typeof duration === 'object' &&
	            ('from' in duration || 'to' in duration)
	        ) {
	            diffRes = momentsDifference(
	                createLocal(duration.from),
	                createLocal(duration.to)
	            );

	            duration = {};
	            duration.ms = diffRes.milliseconds;
	            duration.M = diffRes.months;
	        }

	        ret = new Duration(duration);

	        if (isDuration(input) && hasOwnProp(input, '_locale')) {
	            ret._locale = input._locale;
	        }

	        if (isDuration(input) && hasOwnProp(input, '_isValid')) {
	            ret._isValid = input._isValid;
	        }

	        return ret;
	    }

	    createDuration.fn = Duration.prototype;
	    createDuration.invalid = createInvalid$1;

	    function parseIso(inp, sign) {
	        // We'd normally use ~~inp for this, but unfortunately it also
	        // converts floats to ints.
	        // inp may be undefined, so careful calling replace on it.
	        var res = inp && parseFloat(inp.replace(',', '.'));
	        // apply sign while we're at it
	        return (isNaN(res) ? 0 : res) * sign;
	    }

	    function positiveMomentsDifference(base, other) {
	        var res = {};

	        res.months =
	            other.month() - base.month() + (other.year() - base.year()) * 12;
	        if (base.clone().add(res.months, 'M').isAfter(other)) {
	            --res.months;
	        }

	        res.milliseconds = +other - +base.clone().add(res.months, 'M');

	        return res;
	    }

	    function momentsDifference(base, other) {
	        var res;
	        if (!(base.isValid() && other.isValid())) {
	            return { milliseconds: 0, months: 0 };
	        }

	        other = cloneWithOffset(other, base);
	        if (base.isBefore(other)) {
	            res = positiveMomentsDifference(base, other);
	        } else {
	            res = positiveMomentsDifference(other, base);
	            res.milliseconds = -res.milliseconds;
	            res.months = -res.months;
	        }

	        return res;
	    }

	    // TODO: remove 'name' arg after deprecation is removed
	    function createAdder(direction, name) {
	        return function (val, period) {
	            var dur, tmp;
	            //invert the arguments, but complain about it
	            if (period !== null && !isNaN(+period)) {
	                deprecateSimple(
	                    name,
	                    'moment().' +
	                        name +
	                        '(period, number) is deprecated. Please use moment().' +
	                        name +
	                        '(number, period). ' +
	                        'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'
	                );
	                tmp = val;
	                val = period;
	                period = tmp;
	            }

	            dur = createDuration(val, period);
	            addSubtract(this, dur, direction);
	            return this;
	        };
	    }

	    function addSubtract(mom, duration, isAdding, updateOffset) {
	        var milliseconds = duration._milliseconds,
	            days = absRound(duration._days),
	            months = absRound(duration._months);

	        if (!mom.isValid()) {
	            // No op
	            return;
	        }

	        updateOffset = updateOffset == null ? true : updateOffset;

	        if (months) {
	            setMonth(mom, get(mom, 'Month') + months * isAdding);
	        }
	        if (days) {
	            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
	        }
	        if (milliseconds) {
	            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
	        }
	        if (updateOffset) {
	            hooks.updateOffset(mom, days || months);
	        }
	    }

	    var add = createAdder(1, 'add'),
	        subtract = createAdder(-1, 'subtract');

	    function isString(input) {
	        return typeof input === 'string' || input instanceof String;
	    }

	    // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
	    function isMomentInput(input) {
	        return (
	            isMoment(input) ||
	            isDate(input) ||
	            isString(input) ||
	            isNumber(input) ||
	            isNumberOrStringArray(input) ||
	            isMomentInputObject(input) ||
	            input === null ||
	            input === undefined
	        );
	    }

	    function isMomentInputObject(input) {
	        var objectTest = isObject(input) && !isObjectEmpty(input),
	            propertyTest = false,
	            properties = [
	                'years',
	                'year',
	                'y',
	                'months',
	                'month',
	                'M',
	                'days',
	                'day',
	                'd',
	                'dates',
	                'date',
	                'D',
	                'hours',
	                'hour',
	                'h',
	                'minutes',
	                'minute',
	                'm',
	                'seconds',
	                'second',
	                's',
	                'milliseconds',
	                'millisecond',
	                'ms',
	            ],
	            i,
	            property;

	        for (i = 0; i < properties.length; i += 1) {
	            property = properties[i];
	            propertyTest = propertyTest || hasOwnProp(input, property);
	        }

	        return objectTest && propertyTest;
	    }

	    function isNumberOrStringArray(input) {
	        var arrayTest = isArray(input),
	            dataTypeTest = false;
	        if (arrayTest) {
	            dataTypeTest =
	                input.filter(function (item) {
	                    return !isNumber(item) && isString(input);
	                }).length === 0;
	        }
	        return arrayTest && dataTypeTest;
	    }

	    function isCalendarSpec(input) {
	        var objectTest = isObject(input) && !isObjectEmpty(input),
	            propertyTest = false,
	            properties = [
	                'sameDay',
	                'nextDay',
	                'lastDay',
	                'nextWeek',
	                'lastWeek',
	                'sameElse',
	            ],
	            i,
	            property;

	        for (i = 0; i < properties.length; i += 1) {
	            property = properties[i];
	            propertyTest = propertyTest || hasOwnProp(input, property);
	        }

	        return objectTest && propertyTest;
	    }

	    function getCalendarFormat(myMoment, now) {
	        var diff = myMoment.diff(now, 'days', true);
	        return diff < -6
	            ? 'sameElse'
	            : diff < -1
	            ? 'lastWeek'
	            : diff < 0
	            ? 'lastDay'
	            : diff < 1
	            ? 'sameDay'
	            : diff < 2
	            ? 'nextDay'
	            : diff < 7
	            ? 'nextWeek'
	            : 'sameElse';
	    }

	    function calendar$1(time, formats) {
	        // Support for single parameter, formats only overload to the calendar function
	        if (arguments.length === 1) {
	            if (isMomentInput(arguments[0])) {
	                time = arguments[0];
	                formats = undefined;
	            } else if (isCalendarSpec(arguments[0])) {
	                formats = arguments[0];
	                time = undefined;
	            }
	        }
	        // We want to compare the start of today, vs this.
	        // Getting start-of-today depends on whether we're local/utc/offset or not.
	        var now = time || createLocal(),
	            sod = cloneWithOffset(now, this).startOf('day'),
	            format = hooks.calendarFormat(this, sod) || 'sameElse',
	            output =
	                formats &&
	                (isFunction(formats[format])
	                    ? formats[format].call(this, now)
	                    : formats[format]);

	        return this.format(
	            output || this.localeData().calendar(format, this, createLocal(now))
	        );
	    }

	    function clone() {
	        return new Moment(this);
	    }

	    function isAfter(input, units) {
	        var localInput = isMoment(input) ? input : createLocal(input);
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(units) || 'millisecond';
	        if (units === 'millisecond') {
	            return this.valueOf() > localInput.valueOf();
	        } else {
	            return localInput.valueOf() < this.clone().startOf(units).valueOf();
	        }
	    }

	    function isBefore(input, units) {
	        var localInput = isMoment(input) ? input : createLocal(input);
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(units) || 'millisecond';
	        if (units === 'millisecond') {
	            return this.valueOf() < localInput.valueOf();
	        } else {
	            return this.clone().endOf(units).valueOf() < localInput.valueOf();
	        }
	    }

	    function isBetween(from, to, units, inclusivity) {
	        var localFrom = isMoment(from) ? from : createLocal(from),
	            localTo = isMoment(to) ? to : createLocal(to);
	        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
	            return false;
	        }
	        inclusivity = inclusivity || '()';
	        return (
	            (inclusivity[0] === '('
	                ? this.isAfter(localFrom, units)
	                : !this.isBefore(localFrom, units)) &&
	            (inclusivity[1] === ')'
	                ? this.isBefore(localTo, units)
	                : !this.isAfter(localTo, units))
	        );
	    }

	    function isSame(input, units) {
	        var localInput = isMoment(input) ? input : createLocal(input),
	            inputMs;
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(units) || 'millisecond';
	        if (units === 'millisecond') {
	            return this.valueOf() === localInput.valueOf();
	        } else {
	            inputMs = localInput.valueOf();
	            return (
	                this.clone().startOf(units).valueOf() <= inputMs &&
	                inputMs <= this.clone().endOf(units).valueOf()
	            );
	        }
	    }

	    function isSameOrAfter(input, units) {
	        return this.isSame(input, units) || this.isAfter(input, units);
	    }

	    function isSameOrBefore(input, units) {
	        return this.isSame(input, units) || this.isBefore(input, units);
	    }

	    function diff(input, units, asFloat) {
	        var that, zoneDelta, output;

	        if (!this.isValid()) {
	            return NaN;
	        }

	        that = cloneWithOffset(input, this);

	        if (!that.isValid()) {
	            return NaN;
	        }

	        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

	        units = normalizeUnits(units);

	        switch (units) {
	            case 'year':
	                output = monthDiff(this, that) / 12;
	                break;
	            case 'month':
	                output = monthDiff(this, that);
	                break;
	            case 'quarter':
	                output = monthDiff(this, that) / 3;
	                break;
	            case 'second':
	                output = (this - that) / 1e3;
	                break; // 1000
	            case 'minute':
	                output = (this - that) / 6e4;
	                break; // 1000 * 60
	            case 'hour':
	                output = (this - that) / 36e5;
	                break; // 1000 * 60 * 60
	            case 'day':
	                output = (this - that - zoneDelta) / 864e5;
	                break; // 1000 * 60 * 60 * 24, negate dst
	            case 'week':
	                output = (this - that - zoneDelta) / 6048e5;
	                break; // 1000 * 60 * 60 * 24 * 7, negate dst
	            default:
	                output = this - that;
	        }

	        return asFloat ? output : absFloor(output);
	    }

	    function monthDiff(a, b) {
	        if (a.date() < b.date()) {
	            // end-of-month calculations work correct when the start month has more
	            // days than the end month.
	            return -monthDiff(b, a);
	        }
	        // difference in months
	        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
	            // b is in (anchor - 1 month, anchor + 1 month)
	            anchor = a.clone().add(wholeMonthDiff, 'months'),
	            anchor2,
	            adjust;

	        if (b - anchor < 0) {
	            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
	            // linear across the month
	            adjust = (b - anchor) / (anchor - anchor2);
	        } else {
	            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
	            // linear across the month
	            adjust = (b - anchor) / (anchor2 - anchor);
	        }

	        //check for negative zero, return zero if negative zero
	        return -(wholeMonthDiff + adjust) || 0;
	    }

	    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
	    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

	    function toString() {
	        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
	    }

	    function toISOString(keepOffset) {
	        if (!this.isValid()) {
	            return null;
	        }
	        var utc = keepOffset !== true,
	            m = utc ? this.clone().utc() : this;
	        if (m.year() < 0 || m.year() > 9999) {
	            return formatMoment(
	                m,
	                utc
	                    ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'
	                    : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ'
	            );
	        }
	        if (isFunction(Date.prototype.toISOString)) {
	            // native implementation is ~50x faster, use it when we can
	            if (utc) {
	                return this.toDate().toISOString();
	            } else {
	                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)
	                    .toISOString()
	                    .replace('Z', formatMoment(m, 'Z'));
	            }
	        }
	        return formatMoment(
	            m,
	            utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'
	        );
	    }

	    /**
	     * Return a human readable representation of a moment that can
	     * also be evaluated to get a new moment which is the same
	     *
	     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
	     */
	    function inspect() {
	        if (!this.isValid()) {
	            return 'moment.invalid(/* ' + this._i + ' */)';
	        }
	        var func = 'moment',
	            zone = '',
	            prefix,
	            year,
	            datetime,
	            suffix;
	        if (!this.isLocal()) {
	            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
	            zone = 'Z';
	        }
	        prefix = '[' + func + '("]';
	        year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
	        datetime = '-MM-DD[T]HH:mm:ss.SSS';
	        suffix = zone + '[")]';

	        return this.format(prefix + year + datetime + suffix);
	    }

	    function format(inputString) {
	        if (!inputString) {
	            inputString = this.isUtc()
	                ? hooks.defaultFormatUtc
	                : hooks.defaultFormat;
	        }
	        var output = formatMoment(this, inputString);
	        return this.localeData().postformat(output);
	    }

	    function from(time, withoutSuffix) {
	        if (
	            this.isValid() &&
	            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
	        ) {
	            return createDuration({ to: this, from: time })
	                .locale(this.locale())
	                .humanize(!withoutSuffix);
	        } else {
	            return this.localeData().invalidDate();
	        }
	    }

	    function fromNow(withoutSuffix) {
	        return this.from(createLocal(), withoutSuffix);
	    }

	    function to(time, withoutSuffix) {
	        if (
	            this.isValid() &&
	            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
	        ) {
	            return createDuration({ from: this, to: time })
	                .locale(this.locale())
	                .humanize(!withoutSuffix);
	        } else {
	            return this.localeData().invalidDate();
	        }
	    }

	    function toNow(withoutSuffix) {
	        return this.to(createLocal(), withoutSuffix);
	    }

	    // If passed a locale key, it will set the locale for this
	    // instance.  Otherwise, it will return the locale configuration
	    // variables for this instance.
	    function locale(key) {
	        var newLocaleData;

	        if (key === undefined) {
	            return this._locale._abbr;
	        } else {
	            newLocaleData = getLocale(key);
	            if (newLocaleData != null) {
	                this._locale = newLocaleData;
	            }
	            return this;
	        }
	    }

	    var lang = deprecate(
	        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
	        function (key) {
	            if (key === undefined) {
	                return this.localeData();
	            } else {
	                return this.locale(key);
	            }
	        }
	    );

	    function localeData() {
	        return this._locale;
	    }

	    var MS_PER_SECOND = 1000,
	        MS_PER_MINUTE = 60 * MS_PER_SECOND,
	        MS_PER_HOUR = 60 * MS_PER_MINUTE,
	        MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

	    // actual modulo - handles negative numbers (for dates before 1970):
	    function mod$1(dividend, divisor) {
	        return ((dividend % divisor) + divisor) % divisor;
	    }

	    function localStartOfDate(y, m, d) {
	        // the date constructor remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0) {
	            // preserve leap years using a full 400 year cycle, then reset
	            return new Date(y + 400, m, d) - MS_PER_400_YEARS;
	        } else {
	            return new Date(y, m, d).valueOf();
	        }
	    }

	    function utcStartOfDate(y, m, d) {
	        // Date.UTC remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0) {
	            // preserve leap years using a full 400 year cycle, then reset
	            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
	        } else {
	            return Date.UTC(y, m, d);
	        }
	    }

	    function startOf(units) {
	        var time, startOfDate;
	        units = normalizeUnits(units);
	        if (units === undefined || units === 'millisecond' || !this.isValid()) {
	            return this;
	        }

	        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

	        switch (units) {
	            case 'year':
	                time = startOfDate(this.year(), 0, 1);
	                break;
	            case 'quarter':
	                time = startOfDate(
	                    this.year(),
	                    this.month() - (this.month() % 3),
	                    1
	                );
	                break;
	            case 'month':
	                time = startOfDate(this.year(), this.month(), 1);
	                break;
	            case 'week':
	                time = startOfDate(
	                    this.year(),
	                    this.month(),
	                    this.date() - this.weekday()
	                );
	                break;
	            case 'isoWeek':
	                time = startOfDate(
	                    this.year(),
	                    this.month(),
	                    this.date() - (this.isoWeekday() - 1)
	                );
	                break;
	            case 'day':
	            case 'date':
	                time = startOfDate(this.year(), this.month(), this.date());
	                break;
	            case 'hour':
	                time = this._d.valueOf();
	                time -= mod$1(
	                    time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
	                    MS_PER_HOUR
	                );
	                break;
	            case 'minute':
	                time = this._d.valueOf();
	                time -= mod$1(time, MS_PER_MINUTE);
	                break;
	            case 'second':
	                time = this._d.valueOf();
	                time -= mod$1(time, MS_PER_SECOND);
	                break;
	        }

	        this._d.setTime(time);
	        hooks.updateOffset(this, true);
	        return this;
	    }

	    function endOf(units) {
	        var time, startOfDate;
	        units = normalizeUnits(units);
	        if (units === undefined || units === 'millisecond' || !this.isValid()) {
	            return this;
	        }

	        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

	        switch (units) {
	            case 'year':
	                time = startOfDate(this.year() + 1, 0, 1) - 1;
	                break;
	            case 'quarter':
	                time =
	                    startOfDate(
	                        this.year(),
	                        this.month() - (this.month() % 3) + 3,
	                        1
	                    ) - 1;
	                break;
	            case 'month':
	                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
	                break;
	            case 'week':
	                time =
	                    startOfDate(
	                        this.year(),
	                        this.month(),
	                        this.date() - this.weekday() + 7
	                    ) - 1;
	                break;
	            case 'isoWeek':
	                time =
	                    startOfDate(
	                        this.year(),
	                        this.month(),
	                        this.date() - (this.isoWeekday() - 1) + 7
	                    ) - 1;
	                break;
	            case 'day':
	            case 'date':
	                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
	                break;
	            case 'hour':
	                time = this._d.valueOf();
	                time +=
	                    MS_PER_HOUR -
	                    mod$1(
	                        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
	                        MS_PER_HOUR
	                    ) -
	                    1;
	                break;
	            case 'minute':
	                time = this._d.valueOf();
	                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
	                break;
	            case 'second':
	                time = this._d.valueOf();
	                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
	                break;
	        }

	        this._d.setTime(time);
	        hooks.updateOffset(this, true);
	        return this;
	    }

	    function valueOf() {
	        return this._d.valueOf() - (this._offset || 0) * 60000;
	    }

	    function unix() {
	        return Math.floor(this.valueOf() / 1000);
	    }

	    function toDate() {
	        return new Date(this.valueOf());
	    }

	    function toArray() {
	        var m = this;
	        return [
	            m.year(),
	            m.month(),
	            m.date(),
	            m.hour(),
	            m.minute(),
	            m.second(),
	            m.millisecond(),
	        ];
	    }

	    function toObject() {
	        var m = this;
	        return {
	            years: m.year(),
	            months: m.month(),
	            date: m.date(),
	            hours: m.hours(),
	            minutes: m.minutes(),
	            seconds: m.seconds(),
	            milliseconds: m.milliseconds(),
	        };
	    }

	    function toJSON() {
	        // new Date(NaN).toJSON() === null
	        return this.isValid() ? this.toISOString() : null;
	    }

	    function isValid$2() {
	        return isValid(this);
	    }

	    function parsingFlags() {
	        return extend({}, getParsingFlags(this));
	    }

	    function invalidAt() {
	        return getParsingFlags(this).overflow;
	    }

	    function creationData() {
	        return {
	            input: this._i,
	            format: this._f,
	            locale: this._locale,
	            isUTC: this._isUTC,
	            strict: this._strict,
	        };
	    }

	    addFormatToken('N', 0, 0, 'eraAbbr');
	    addFormatToken('NN', 0, 0, 'eraAbbr');
	    addFormatToken('NNN', 0, 0, 'eraAbbr');
	    addFormatToken('NNNN', 0, 0, 'eraName');
	    addFormatToken('NNNNN', 0, 0, 'eraNarrow');

	    addFormatToken('y', ['y', 1], 'yo', 'eraYear');
	    addFormatToken('y', ['yy', 2], 0, 'eraYear');
	    addFormatToken('y', ['yyy', 3], 0, 'eraYear');
	    addFormatToken('y', ['yyyy', 4], 0, 'eraYear');

	    addRegexToken('N', matchEraAbbr);
	    addRegexToken('NN', matchEraAbbr);
	    addRegexToken('NNN', matchEraAbbr);
	    addRegexToken('NNNN', matchEraName);
	    addRegexToken('NNNNN', matchEraNarrow);

	    addParseToken(['N', 'NN', 'NNN', 'NNNN', 'NNNNN'], function (
	        input,
	        array,
	        config,
	        token
	    ) {
	        var era = config._locale.erasParse(input, token, config._strict);
	        if (era) {
	            getParsingFlags(config).era = era;
	        } else {
	            getParsingFlags(config).invalidEra = input;
	        }
	    });

	    addRegexToken('y', matchUnsigned);
	    addRegexToken('yy', matchUnsigned);
	    addRegexToken('yyy', matchUnsigned);
	    addRegexToken('yyyy', matchUnsigned);
	    addRegexToken('yo', matchEraYearOrdinal);

	    addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
	    addParseToken(['yo'], function (input, array, config, token) {
	        var match;
	        if (config._locale._eraYearOrdinalRegex) {
	            match = input.match(config._locale._eraYearOrdinalRegex);
	        }

	        if (config._locale.eraYearOrdinalParse) {
	            array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
	        } else {
	            array[YEAR] = parseInt(input, 10);
	        }
	    });

	    function localeEras(m, format) {
	        var i,
	            l,
	            date,
	            eras = this._eras || getLocale('en')._eras;
	        for (i = 0, l = eras.length; i < l; ++i) {
	            switch (typeof eras[i].since) {
	                case 'string':
	                    // truncate time
	                    date = hooks(eras[i].since).startOf('day');
	                    eras[i].since = date.valueOf();
	                    break;
	            }

	            switch (typeof eras[i].until) {
	                case 'undefined':
	                    eras[i].until = +Infinity;
	                    break;
	                case 'string':
	                    // truncate time
	                    date = hooks(eras[i].until).startOf('day').valueOf();
	                    eras[i].until = date.valueOf();
	                    break;
	            }
	        }
	        return eras;
	    }

	    function localeErasParse(eraName, format, strict) {
	        var i,
	            l,
	            eras = this.eras(),
	            name,
	            abbr,
	            narrow;
	        eraName = eraName.toUpperCase();

	        for (i = 0, l = eras.length; i < l; ++i) {
	            name = eras[i].name.toUpperCase();
	            abbr = eras[i].abbr.toUpperCase();
	            narrow = eras[i].narrow.toUpperCase();

	            if (strict) {
	                switch (format) {
	                    case 'N':
	                    case 'NN':
	                    case 'NNN':
	                        if (abbr === eraName) {
	                            return eras[i];
	                        }
	                        break;

	                    case 'NNNN':
	                        if (name === eraName) {
	                            return eras[i];
	                        }
	                        break;

	                    case 'NNNNN':
	                        if (narrow === eraName) {
	                            return eras[i];
	                        }
	                        break;
	                }
	            } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
	                return eras[i];
	            }
	        }
	    }

	    function localeErasConvertYear(era, year) {
	        var dir = era.since <= era.until ? +1 : -1;
	        if (year === undefined) {
	            return hooks(era.since).year();
	        } else {
	            return hooks(era.since).year() + (year - era.offset) * dir;
	        }
	    }

	    function getEraName() {
	        var i,
	            l,
	            val,
	            eras = this.localeData().eras();
	        for (i = 0, l = eras.length; i < l; ++i) {
	            // truncate time
	            val = this.startOf('day').valueOf();

	            if (eras[i].since <= val && val <= eras[i].until) {
	                return eras[i].name;
	            }
	            if (eras[i].until <= val && val <= eras[i].since) {
	                return eras[i].name;
	            }
	        }

	        return '';
	    }

	    function getEraNarrow() {
	        var i,
	            l,
	            val,
	            eras = this.localeData().eras();
	        for (i = 0, l = eras.length; i < l; ++i) {
	            // truncate time
	            val = this.startOf('day').valueOf();

	            if (eras[i].since <= val && val <= eras[i].until) {
	                return eras[i].narrow;
	            }
	            if (eras[i].until <= val && val <= eras[i].since) {
	                return eras[i].narrow;
	            }
	        }

	        return '';
	    }

	    function getEraAbbr() {
	        var i,
	            l,
	            val,
	            eras = this.localeData().eras();
	        for (i = 0, l = eras.length; i < l; ++i) {
	            // truncate time
	            val = this.startOf('day').valueOf();

	            if (eras[i].since <= val && val <= eras[i].until) {
	                return eras[i].abbr;
	            }
	            if (eras[i].until <= val && val <= eras[i].since) {
	                return eras[i].abbr;
	            }
	        }

	        return '';
	    }

	    function getEraYear() {
	        var i,
	            l,
	            dir,
	            val,
	            eras = this.localeData().eras();
	        for (i = 0, l = eras.length; i < l; ++i) {
	            dir = eras[i].since <= eras[i].until ? +1 : -1;

	            // truncate time
	            val = this.startOf('day').valueOf();

	            if (
	                (eras[i].since <= val && val <= eras[i].until) ||
	                (eras[i].until <= val && val <= eras[i].since)
	            ) {
	                return (
	                    (this.year() - hooks(eras[i].since).year()) * dir +
	                    eras[i].offset
	                );
	            }
	        }

	        return this.year();
	    }

	    function erasNameRegex(isStrict) {
	        if (!hasOwnProp(this, '_erasNameRegex')) {
	            computeErasParse.call(this);
	        }
	        return isStrict ? this._erasNameRegex : this._erasRegex;
	    }

	    function erasAbbrRegex(isStrict) {
	        if (!hasOwnProp(this, '_erasAbbrRegex')) {
	            computeErasParse.call(this);
	        }
	        return isStrict ? this._erasAbbrRegex : this._erasRegex;
	    }

	    function erasNarrowRegex(isStrict) {
	        if (!hasOwnProp(this, '_erasNarrowRegex')) {
	            computeErasParse.call(this);
	        }
	        return isStrict ? this._erasNarrowRegex : this._erasRegex;
	    }

	    function matchEraAbbr(isStrict, locale) {
	        return locale.erasAbbrRegex(isStrict);
	    }

	    function matchEraName(isStrict, locale) {
	        return locale.erasNameRegex(isStrict);
	    }

	    function matchEraNarrow(isStrict, locale) {
	        return locale.erasNarrowRegex(isStrict);
	    }

	    function matchEraYearOrdinal(isStrict, locale) {
	        return locale._eraYearOrdinalRegex || matchUnsigned;
	    }

	    function computeErasParse() {
	        var abbrPieces = [],
	            namePieces = [],
	            narrowPieces = [],
	            mixedPieces = [],
	            i,
	            l,
	            eras = this.eras();

	        for (i = 0, l = eras.length; i < l; ++i) {
	            namePieces.push(regexEscape(eras[i].name));
	            abbrPieces.push(regexEscape(eras[i].abbr));
	            narrowPieces.push(regexEscape(eras[i].narrow));

	            mixedPieces.push(regexEscape(eras[i].name));
	            mixedPieces.push(regexEscape(eras[i].abbr));
	            mixedPieces.push(regexEscape(eras[i].narrow));
	        }

	        this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	        this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
	        this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
	        this._erasNarrowRegex = new RegExp(
	            '^(' + narrowPieces.join('|') + ')',
	            'i'
	        );
	    }

	    // FORMATTING

	    addFormatToken(0, ['gg', 2], 0, function () {
	        return this.weekYear() % 100;
	    });

	    addFormatToken(0, ['GG', 2], 0, function () {
	        return this.isoWeekYear() % 100;
	    });

	    function addWeekYearFormatToken(token, getter) {
	        addFormatToken(0, [token, token.length], 0, getter);
	    }

	    addWeekYearFormatToken('gggg', 'weekYear');
	    addWeekYearFormatToken('ggggg', 'weekYear');
	    addWeekYearFormatToken('GGGG', 'isoWeekYear');
	    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

	    // ALIASES

	    addUnitAlias('weekYear', 'gg');
	    addUnitAlias('isoWeekYear', 'GG');

	    // PRIORITY

	    addUnitPriority('weekYear', 1);
	    addUnitPriority('isoWeekYear', 1);

	    // PARSING

	    addRegexToken('G', matchSigned);
	    addRegexToken('g', matchSigned);
	    addRegexToken('GG', match1to2, match2);
	    addRegexToken('gg', match1to2, match2);
	    addRegexToken('GGGG', match1to4, match4);
	    addRegexToken('gggg', match1to4, match4);
	    addRegexToken('GGGGG', match1to6, match6);
	    addRegexToken('ggggg', match1to6, match6);

	    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (
	        input,
	        week,
	        config,
	        token
	    ) {
	        week[token.substr(0, 2)] = toInt(input);
	    });

	    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
	        week[token] = hooks.parseTwoDigitYear(input);
	    });

	    // MOMENTS

	    function getSetWeekYear(input) {
	        return getSetWeekYearHelper.call(
	            this,
	            input,
	            this.week(),
	            this.weekday(),
	            this.localeData()._week.dow,
	            this.localeData()._week.doy
	        );
	    }

	    function getSetISOWeekYear(input) {
	        return getSetWeekYearHelper.call(
	            this,
	            input,
	            this.isoWeek(),
	            this.isoWeekday(),
	            1,
	            4
	        );
	    }

	    function getISOWeeksInYear() {
	        return weeksInYear(this.year(), 1, 4);
	    }

	    function getISOWeeksInISOWeekYear() {
	        return weeksInYear(this.isoWeekYear(), 1, 4);
	    }

	    function getWeeksInYear() {
	        var weekInfo = this.localeData()._week;
	        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
	    }

	    function getWeeksInWeekYear() {
	        var weekInfo = this.localeData()._week;
	        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
	    }

	    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
	        var weeksTarget;
	        if (input == null) {
	            return weekOfYear(this, dow, doy).year;
	        } else {
	            weeksTarget = weeksInYear(input, dow, doy);
	            if (week > weeksTarget) {
	                week = weeksTarget;
	            }
	            return setWeekAll.call(this, input, week, weekday, dow, doy);
	        }
	    }

	    function setWeekAll(weekYear, week, weekday, dow, doy) {
	        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
	            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

	        this.year(date.getUTCFullYear());
	        this.month(date.getUTCMonth());
	        this.date(date.getUTCDate());
	        return this;
	    }

	    // FORMATTING

	    addFormatToken('Q', 0, 'Qo', 'quarter');

	    // ALIASES

	    addUnitAlias('quarter', 'Q');

	    // PRIORITY

	    addUnitPriority('quarter', 7);

	    // PARSING

	    addRegexToken('Q', match1);
	    addParseToken('Q', function (input, array) {
	        array[MONTH] = (toInt(input) - 1) * 3;
	    });

	    // MOMENTS

	    function getSetQuarter(input) {
	        return input == null
	            ? Math.ceil((this.month() + 1) / 3)
	            : this.month((input - 1) * 3 + (this.month() % 3));
	    }

	    // FORMATTING

	    addFormatToken('D', ['DD', 2], 'Do', 'date');

	    // ALIASES

	    addUnitAlias('date', 'D');

	    // PRIORITY
	    addUnitPriority('date', 9);

	    // PARSING

	    addRegexToken('D', match1to2);
	    addRegexToken('DD', match1to2, match2);
	    addRegexToken('Do', function (isStrict, locale) {
	        // TODO: Remove "ordinalParse" fallback in next major release.
	        return isStrict
	            ? locale._dayOfMonthOrdinalParse || locale._ordinalParse
	            : locale._dayOfMonthOrdinalParseLenient;
	    });

	    addParseToken(['D', 'DD'], DATE);
	    addParseToken('Do', function (input, array) {
	        array[DATE] = toInt(input.match(match1to2)[0]);
	    });

	    // MOMENTS

	    var getSetDayOfMonth = makeGetSet('Date', true);

	    // FORMATTING

	    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

	    // ALIASES

	    addUnitAlias('dayOfYear', 'DDD');

	    // PRIORITY
	    addUnitPriority('dayOfYear', 4);

	    // PARSING

	    addRegexToken('DDD', match1to3);
	    addRegexToken('DDDD', match3);
	    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
	        config._dayOfYear = toInt(input);
	    });

	    // HELPERS

	    // MOMENTS

	    function getSetDayOfYear(input) {
	        var dayOfYear =
	            Math.round(
	                (this.clone().startOf('day') - this.clone().startOf('year')) / 864e5
	            ) + 1;
	        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
	    }

	    // FORMATTING

	    addFormatToken('m', ['mm', 2], 0, 'minute');

	    // ALIASES

	    addUnitAlias('minute', 'm');

	    // PRIORITY

	    addUnitPriority('minute', 14);

	    // PARSING

	    addRegexToken('m', match1to2);
	    addRegexToken('mm', match1to2, match2);
	    addParseToken(['m', 'mm'], MINUTE);

	    // MOMENTS

	    var getSetMinute = makeGetSet('Minutes', false);

	    // FORMATTING

	    addFormatToken('s', ['ss', 2], 0, 'second');

	    // ALIASES

	    addUnitAlias('second', 's');

	    // PRIORITY

	    addUnitPriority('second', 15);

	    // PARSING

	    addRegexToken('s', match1to2);
	    addRegexToken('ss', match1to2, match2);
	    addParseToken(['s', 'ss'], SECOND);

	    // MOMENTS

	    var getSetSecond = makeGetSet('Seconds', false);

	    // FORMATTING

	    addFormatToken('S', 0, 0, function () {
	        return ~~(this.millisecond() / 100);
	    });

	    addFormatToken(0, ['SS', 2], 0, function () {
	        return ~~(this.millisecond() / 10);
	    });

	    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
	    addFormatToken(0, ['SSSS', 4], 0, function () {
	        return this.millisecond() * 10;
	    });
	    addFormatToken(0, ['SSSSS', 5], 0, function () {
	        return this.millisecond() * 100;
	    });
	    addFormatToken(0, ['SSSSSS', 6], 0, function () {
	        return this.millisecond() * 1000;
	    });
	    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
	        return this.millisecond() * 10000;
	    });
	    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
	        return this.millisecond() * 100000;
	    });
	    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
	        return this.millisecond() * 1000000;
	    });

	    // ALIASES

	    addUnitAlias('millisecond', 'ms');

	    // PRIORITY

	    addUnitPriority('millisecond', 16);

	    // PARSING

	    addRegexToken('S', match1to3, match1);
	    addRegexToken('SS', match1to3, match2);
	    addRegexToken('SSS', match1to3, match3);

	    var token, getSetMillisecond;
	    for (token = 'SSSS'; token.length <= 9; token += 'S') {
	        addRegexToken(token, matchUnsigned);
	    }

	    function parseMs(input, array) {
	        array[MILLISECOND] = toInt(('0.' + input) * 1000);
	    }

	    for (token = 'S'; token.length <= 9; token += 'S') {
	        addParseToken(token, parseMs);
	    }

	    getSetMillisecond = makeGetSet('Milliseconds', false);

	    // FORMATTING

	    addFormatToken('z', 0, 0, 'zoneAbbr');
	    addFormatToken('zz', 0, 0, 'zoneName');

	    // MOMENTS

	    function getZoneAbbr() {
	        return this._isUTC ? 'UTC' : '';
	    }

	    function getZoneName() {
	        return this._isUTC ? 'Coordinated Universal Time' : '';
	    }

	    var proto = Moment.prototype;

	    proto.add = add;
	    proto.calendar = calendar$1;
	    proto.clone = clone;
	    proto.diff = diff;
	    proto.endOf = endOf;
	    proto.format = format;
	    proto.from = from;
	    proto.fromNow = fromNow;
	    proto.to = to;
	    proto.toNow = toNow;
	    proto.get = stringGet;
	    proto.invalidAt = invalidAt;
	    proto.isAfter = isAfter;
	    proto.isBefore = isBefore;
	    proto.isBetween = isBetween;
	    proto.isSame = isSame;
	    proto.isSameOrAfter = isSameOrAfter;
	    proto.isSameOrBefore = isSameOrBefore;
	    proto.isValid = isValid$2;
	    proto.lang = lang;
	    proto.locale = locale;
	    proto.localeData = localeData;
	    proto.max = prototypeMax;
	    proto.min = prototypeMin;
	    proto.parsingFlags = parsingFlags;
	    proto.set = stringSet;
	    proto.startOf = startOf;
	    proto.subtract = subtract;
	    proto.toArray = toArray;
	    proto.toObject = toObject;
	    proto.toDate = toDate;
	    proto.toISOString = toISOString;
	    proto.inspect = inspect;
	    if (typeof Symbol !== 'undefined' && Symbol.for != null) {
	        proto[Symbol.for('nodejs.util.inspect.custom')] = function () {
	            return 'Moment<' + this.format() + '>';
	        };
	    }
	    proto.toJSON = toJSON;
	    proto.toString = toString;
	    proto.unix = unix;
	    proto.valueOf = valueOf;
	    proto.creationData = creationData;
	    proto.eraName = getEraName;
	    proto.eraNarrow = getEraNarrow;
	    proto.eraAbbr = getEraAbbr;
	    proto.eraYear = getEraYear;
	    proto.year = getSetYear;
	    proto.isLeapYear = getIsLeapYear;
	    proto.weekYear = getSetWeekYear;
	    proto.isoWeekYear = getSetISOWeekYear;
	    proto.quarter = proto.quarters = getSetQuarter;
	    proto.month = getSetMonth;
	    proto.daysInMonth = getDaysInMonth;
	    proto.week = proto.weeks = getSetWeek;
	    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
	    proto.weeksInYear = getWeeksInYear;
	    proto.weeksInWeekYear = getWeeksInWeekYear;
	    proto.isoWeeksInYear = getISOWeeksInYear;
	    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
	    proto.date = getSetDayOfMonth;
	    proto.day = proto.days = getSetDayOfWeek;
	    proto.weekday = getSetLocaleDayOfWeek;
	    proto.isoWeekday = getSetISODayOfWeek;
	    proto.dayOfYear = getSetDayOfYear;
	    proto.hour = proto.hours = getSetHour;
	    proto.minute = proto.minutes = getSetMinute;
	    proto.second = proto.seconds = getSetSecond;
	    proto.millisecond = proto.milliseconds = getSetMillisecond;
	    proto.utcOffset = getSetOffset;
	    proto.utc = setOffsetToUTC;
	    proto.local = setOffsetToLocal;
	    proto.parseZone = setOffsetToParsedOffset;
	    proto.hasAlignedHourOffset = hasAlignedHourOffset;
	    proto.isDST = isDaylightSavingTime;
	    proto.isLocal = isLocal;
	    proto.isUtcOffset = isUtcOffset;
	    proto.isUtc = isUtc;
	    proto.isUTC = isUtc;
	    proto.zoneAbbr = getZoneAbbr;
	    proto.zoneName = getZoneName;
	    proto.dates = deprecate(
	        'dates accessor is deprecated. Use date instead.',
	        getSetDayOfMonth
	    );
	    proto.months = deprecate(
	        'months accessor is deprecated. Use month instead',
	        getSetMonth
	    );
	    proto.years = deprecate(
	        'years accessor is deprecated. Use year instead',
	        getSetYear
	    );
	    proto.zone = deprecate(
	        'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',
	        getSetZone
	    );
	    proto.isDSTShifted = deprecate(
	        'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',
	        isDaylightSavingTimeShifted
	    );

	    function createUnix(input) {
	        return createLocal(input * 1000);
	    }

	    function createInZone() {
	        return createLocal.apply(null, arguments).parseZone();
	    }

	    function preParsePostFormat(string) {
	        return string;
	    }

	    var proto$1 = Locale.prototype;

	    proto$1.calendar = calendar;
	    proto$1.longDateFormat = longDateFormat;
	    proto$1.invalidDate = invalidDate;
	    proto$1.ordinal = ordinal;
	    proto$1.preparse = preParsePostFormat;
	    proto$1.postformat = preParsePostFormat;
	    proto$1.relativeTime = relativeTime;
	    proto$1.pastFuture = pastFuture;
	    proto$1.set = set;
	    proto$1.eras = localeEras;
	    proto$1.erasParse = localeErasParse;
	    proto$1.erasConvertYear = localeErasConvertYear;
	    proto$1.erasAbbrRegex = erasAbbrRegex;
	    proto$1.erasNameRegex = erasNameRegex;
	    proto$1.erasNarrowRegex = erasNarrowRegex;

	    proto$1.months = localeMonths;
	    proto$1.monthsShort = localeMonthsShort;
	    proto$1.monthsParse = localeMonthsParse;
	    proto$1.monthsRegex = monthsRegex;
	    proto$1.monthsShortRegex = monthsShortRegex;
	    proto$1.week = localeWeek;
	    proto$1.firstDayOfYear = localeFirstDayOfYear;
	    proto$1.firstDayOfWeek = localeFirstDayOfWeek;

	    proto$1.weekdays = localeWeekdays;
	    proto$1.weekdaysMin = localeWeekdaysMin;
	    proto$1.weekdaysShort = localeWeekdaysShort;
	    proto$1.weekdaysParse = localeWeekdaysParse;

	    proto$1.weekdaysRegex = weekdaysRegex;
	    proto$1.weekdaysShortRegex = weekdaysShortRegex;
	    proto$1.weekdaysMinRegex = weekdaysMinRegex;

	    proto$1.isPM = localeIsPM;
	    proto$1.meridiem = localeMeridiem;

	    function get$1(format, index, field, setter) {
	        var locale = getLocale(),
	            utc = createUTC().set(setter, index);
	        return locale[field](utc, format);
	    }

	    function listMonthsImpl(format, index, field) {
	        if (isNumber(format)) {
	            index = format;
	            format = undefined;
	        }

	        format = format || '';

	        if (index != null) {
	            return get$1(format, index, field, 'month');
	        }

	        var i,
	            out = [];
	        for (i = 0; i < 12; i++) {
	            out[i] = get$1(format, i, field, 'month');
	        }
	        return out;
	    }

	    // ()
	    // (5)
	    // (fmt, 5)
	    // (fmt)
	    // (true)
	    // (true, 5)
	    // (true, fmt, 5)
	    // (true, fmt)
	    function listWeekdaysImpl(localeSorted, format, index, field) {
	        if (typeof localeSorted === 'boolean') {
	            if (isNumber(format)) {
	                index = format;
	                format = undefined;
	            }

	            format = format || '';
	        } else {
	            format = localeSorted;
	            index = format;
	            localeSorted = false;

	            if (isNumber(format)) {
	                index = format;
	                format = undefined;
	            }

	            format = format || '';
	        }

	        var locale = getLocale(),
	            shift = localeSorted ? locale._week.dow : 0,
	            i,
	            out = [];

	        if (index != null) {
	            return get$1(format, (index + shift) % 7, field, 'day');
	        }

	        for (i = 0; i < 7; i++) {
	            out[i] = get$1(format, (i + shift) % 7, field, 'day');
	        }
	        return out;
	    }

	    function listMonths(format, index) {
	        return listMonthsImpl(format, index, 'months');
	    }

	    function listMonthsShort(format, index) {
	        return listMonthsImpl(format, index, 'monthsShort');
	    }

	    function listWeekdays(localeSorted, format, index) {
	        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
	    }

	    function listWeekdaysShort(localeSorted, format, index) {
	        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
	    }

	    function listWeekdaysMin(localeSorted, format, index) {
	        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
	    }

	    getSetGlobalLocale('en', {
	        eras: [
	            {
	                since: '0001-01-01',
	                until: +Infinity,
	                offset: 1,
	                name: 'Anno Domini',
	                narrow: 'AD',
	                abbr: 'AD',
	            },
	            {
	                since: '0000-12-31',
	                until: -Infinity,
	                offset: 1,
	                name: 'Before Christ',
	                narrow: 'BC',
	                abbr: 'BC',
	            },
	        ],
	        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
	        ordinal: function (number) {
	            var b = number % 10,
	                output =
	                    toInt((number % 100) / 10) === 1
	                        ? 'th'
	                        : b === 1
	                        ? 'st'
	                        : b === 2
	                        ? 'nd'
	                        : b === 3
	                        ? 'rd'
	                        : 'th';
	            return number + output;
	        },
	    });

	    // Side effect imports

	    hooks.lang = deprecate(
	        'moment.lang is deprecated. Use moment.locale instead.',
	        getSetGlobalLocale
	    );
	    hooks.langData = deprecate(
	        'moment.langData is deprecated. Use moment.localeData instead.',
	        getLocale
	    );

	    var mathAbs = Math.abs;

	    function abs() {
	        var data = this._data;

	        this._milliseconds = mathAbs(this._milliseconds);
	        this._days = mathAbs(this._days);
	        this._months = mathAbs(this._months);

	        data.milliseconds = mathAbs(data.milliseconds);
	        data.seconds = mathAbs(data.seconds);
	        data.minutes = mathAbs(data.minutes);
	        data.hours = mathAbs(data.hours);
	        data.months = mathAbs(data.months);
	        data.years = mathAbs(data.years);

	        return this;
	    }

	    function addSubtract$1(duration, input, value, direction) {
	        var other = createDuration(input, value);

	        duration._milliseconds += direction * other._milliseconds;
	        duration._days += direction * other._days;
	        duration._months += direction * other._months;

	        return duration._bubble();
	    }

	    // supports only 2.0-style add(1, 's') or add(duration)
	    function add$1(input, value) {
	        return addSubtract$1(this, input, value, 1);
	    }

	    // supports only 2.0-style subtract(1, 's') or subtract(duration)
	    function subtract$1(input, value) {
	        return addSubtract$1(this, input, value, -1);
	    }

	    function absCeil(number) {
	        if (number < 0) {
	            return Math.floor(number);
	        } else {
	            return Math.ceil(number);
	        }
	    }

	    function bubble() {
	        var milliseconds = this._milliseconds,
	            days = this._days,
	            months = this._months,
	            data = this._data,
	            seconds,
	            minutes,
	            hours,
	            years,
	            monthsFromDays;

	        // if we have a mix of positive and negative values, bubble down first
	        // check: https://github.com/moment/moment/issues/2166
	        if (
	            !(
	                (milliseconds >= 0 && days >= 0 && months >= 0) ||
	                (milliseconds <= 0 && days <= 0 && months <= 0)
	            )
	        ) {
	            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
	            days = 0;
	            months = 0;
	        }

	        // The following code bubbles up values, see the tests for
	        // examples of what that means.
	        data.milliseconds = milliseconds % 1000;

	        seconds = absFloor(milliseconds / 1000);
	        data.seconds = seconds % 60;

	        minutes = absFloor(seconds / 60);
	        data.minutes = minutes % 60;

	        hours = absFloor(minutes / 60);
	        data.hours = hours % 24;

	        days += absFloor(hours / 24);

	        // convert days to months
	        monthsFromDays = absFloor(daysToMonths(days));
	        months += monthsFromDays;
	        days -= absCeil(monthsToDays(monthsFromDays));

	        // 12 months -> 1 year
	        years = absFloor(months / 12);
	        months %= 12;

	        data.days = days;
	        data.months = months;
	        data.years = years;

	        return this;
	    }

	    function daysToMonths(days) {
	        // 400 years have 146097 days (taking into account leap year rules)
	        // 400 years have 12 months === 4800
	        return (days * 4800) / 146097;
	    }

	    function monthsToDays(months) {
	        // the reverse of daysToMonths
	        return (months * 146097) / 4800;
	    }

	    function as(units) {
	        if (!this.isValid()) {
	            return NaN;
	        }
	        var days,
	            months,
	            milliseconds = this._milliseconds;

	        units = normalizeUnits(units);

	        if (units === 'month' || units === 'quarter' || units === 'year') {
	            days = this._days + milliseconds / 864e5;
	            months = this._months + daysToMonths(days);
	            switch (units) {
	                case 'month':
	                    return months;
	                case 'quarter':
	                    return months / 3;
	                case 'year':
	                    return months / 12;
	            }
	        } else {
	            // handle milliseconds separately because of floating point math errors (issue #1867)
	            days = this._days + Math.round(monthsToDays(this._months));
	            switch (units) {
	                case 'week':
	                    return days / 7 + milliseconds / 6048e5;
	                case 'day':
	                    return days + milliseconds / 864e5;
	                case 'hour':
	                    return days * 24 + milliseconds / 36e5;
	                case 'minute':
	                    return days * 1440 + milliseconds / 6e4;
	                case 'second':
	                    return days * 86400 + milliseconds / 1000;
	                // Math.floor prevents floating point math errors here
	                case 'millisecond':
	                    return Math.floor(days * 864e5) + milliseconds;
	                default:
	                    throw new Error('Unknown unit ' + units);
	            }
	        }
	    }

	    // TODO: Use this.as('ms')?
	    function valueOf$1() {
	        if (!this.isValid()) {
	            return NaN;
	        }
	        return (
	            this._milliseconds +
	            this._days * 864e5 +
	            (this._months % 12) * 2592e6 +
	            toInt(this._months / 12) * 31536e6
	        );
	    }

	    function makeAs(alias) {
	        return function () {
	            return this.as(alias);
	        };
	    }

	    var asMilliseconds = makeAs('ms'),
	        asSeconds = makeAs('s'),
	        asMinutes = makeAs('m'),
	        asHours = makeAs('h'),
	        asDays = makeAs('d'),
	        asWeeks = makeAs('w'),
	        asMonths = makeAs('M'),
	        asQuarters = makeAs('Q'),
	        asYears = makeAs('y');

	    function clone$1() {
	        return createDuration(this);
	    }

	    function get$2(units) {
	        units = normalizeUnits(units);
	        return this.isValid() ? this[units + 's']() : NaN;
	    }

	    function makeGetter(name) {
	        return function () {
	            return this.isValid() ? this._data[name] : NaN;
	        };
	    }

	    var milliseconds = makeGetter('milliseconds'),
	        seconds = makeGetter('seconds'),
	        minutes = makeGetter('minutes'),
	        hours = makeGetter('hours'),
	        days = makeGetter('days'),
	        months = makeGetter('months'),
	        years = makeGetter('years');

	    function weeks() {
	        return absFloor(this.days() / 7);
	    }

	    var round = Math.round,
	        thresholds = {
	            ss: 44, // a few seconds to seconds
	            s: 45, // seconds to minute
	            m: 45, // minutes to hour
	            h: 22, // hours to day
	            d: 26, // days to month/week
	            w: null, // weeks to month
	            M: 11, // months to year
	        };

	    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
	    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
	        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
	    }

	    function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
	        var duration = createDuration(posNegDuration).abs(),
	            seconds = round(duration.as('s')),
	            minutes = round(duration.as('m')),
	            hours = round(duration.as('h')),
	            days = round(duration.as('d')),
	            months = round(duration.as('M')),
	            weeks = round(duration.as('w')),
	            years = round(duration.as('y')),
	            a =
	                (seconds <= thresholds.ss && ['s', seconds]) ||
	                (seconds < thresholds.s && ['ss', seconds]) ||
	                (minutes <= 1 && ['m']) ||
	                (minutes < thresholds.m && ['mm', minutes]) ||
	                (hours <= 1 && ['h']) ||
	                (hours < thresholds.h && ['hh', hours]) ||
	                (days <= 1 && ['d']) ||
	                (days < thresholds.d && ['dd', days]);

	        if (thresholds.w != null) {
	            a =
	                a ||
	                (weeks <= 1 && ['w']) ||
	                (weeks < thresholds.w && ['ww', weeks]);
	        }
	        a = a ||
	            (months <= 1 && ['M']) ||
	            (months < thresholds.M && ['MM', months]) ||
	            (years <= 1 && ['y']) || ['yy', years];

	        a[2] = withoutSuffix;
	        a[3] = +posNegDuration > 0;
	        a[4] = locale;
	        return substituteTimeAgo.apply(null, a);
	    }

	    // This function allows you to set the rounding function for relative time strings
	    function getSetRelativeTimeRounding(roundingFunction) {
	        if (roundingFunction === undefined) {
	            return round;
	        }
	        if (typeof roundingFunction === 'function') {
	            round = roundingFunction;
	            return true;
	        }
	        return false;
	    }

	    // This function allows you to set a threshold for relative time strings
	    function getSetRelativeTimeThreshold(threshold, limit) {
	        if (thresholds[threshold] === undefined) {
	            return false;
	        }
	        if (limit === undefined) {
	            return thresholds[threshold];
	        }
	        thresholds[threshold] = limit;
	        if (threshold === 's') {
	            thresholds.ss = limit - 1;
	        }
	        return true;
	    }

	    function humanize(argWithSuffix, argThresholds) {
	        if (!this.isValid()) {
	            return this.localeData().invalidDate();
	        }

	        var withSuffix = false,
	            th = thresholds,
	            locale,
	            output;

	        if (typeof argWithSuffix === 'object') {
	            argThresholds = argWithSuffix;
	            argWithSuffix = false;
	        }
	        if (typeof argWithSuffix === 'boolean') {
	            withSuffix = argWithSuffix;
	        }
	        if (typeof argThresholds === 'object') {
	            th = Object.assign({}, thresholds, argThresholds);
	            if (argThresholds.s != null && argThresholds.ss == null) {
	                th.ss = argThresholds.s - 1;
	            }
	        }

	        locale = this.localeData();
	        output = relativeTime$1(this, !withSuffix, th, locale);

	        if (withSuffix) {
	            output = locale.pastFuture(+this, output);
	        }

	        return locale.postformat(output);
	    }

	    var abs$1 = Math.abs;

	    function sign(x) {
	        return (x > 0) - (x < 0) || +x;
	    }

	    function toISOString$1() {
	        // for ISO strings we do not use the normal bubbling rules:
	        //  * milliseconds bubble up until they become hours
	        //  * days do not bubble at all
	        //  * months bubble up until they become years
	        // This is because there is no context-free conversion between hours and days
	        // (think of clock changes)
	        // and also not between days and months (28-31 days per month)
	        if (!this.isValid()) {
	            return this.localeData().invalidDate();
	        }

	        var seconds = abs$1(this._milliseconds) / 1000,
	            days = abs$1(this._days),
	            months = abs$1(this._months),
	            minutes,
	            hours,
	            years,
	            s,
	            total = this.asSeconds(),
	            totalSign,
	            ymSign,
	            daysSign,
	            hmsSign;

	        if (!total) {
	            // this is the same as C#'s (Noda) and python (isodate)...
	            // but not other JS (goog.date)
	            return 'P0D';
	        }

	        // 3600 seconds -> 60 minutes -> 1 hour
	        minutes = absFloor(seconds / 60);
	        hours = absFloor(minutes / 60);
	        seconds %= 60;
	        minutes %= 60;

	        // 12 months -> 1 year
	        years = absFloor(months / 12);
	        months %= 12;

	        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
	        s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';

	        totalSign = total < 0 ? '-' : '';
	        ymSign = sign(this._months) !== sign(total) ? '-' : '';
	        daysSign = sign(this._days) !== sign(total) ? '-' : '';
	        hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

	        return (
	            totalSign +
	            'P' +
	            (years ? ymSign + years + 'Y' : '') +
	            (months ? ymSign + months + 'M' : '') +
	            (days ? daysSign + days + 'D' : '') +
	            (hours || minutes || seconds ? 'T' : '') +
	            (hours ? hmsSign + hours + 'H' : '') +
	            (minutes ? hmsSign + minutes + 'M' : '') +
	            (seconds ? hmsSign + s + 'S' : '')
	        );
	    }

	    var proto$2 = Duration.prototype;

	    proto$2.isValid = isValid$1;
	    proto$2.abs = abs;
	    proto$2.add = add$1;
	    proto$2.subtract = subtract$1;
	    proto$2.as = as;
	    proto$2.asMilliseconds = asMilliseconds;
	    proto$2.asSeconds = asSeconds;
	    proto$2.asMinutes = asMinutes;
	    proto$2.asHours = asHours;
	    proto$2.asDays = asDays;
	    proto$2.asWeeks = asWeeks;
	    proto$2.asMonths = asMonths;
	    proto$2.asQuarters = asQuarters;
	    proto$2.asYears = asYears;
	    proto$2.valueOf = valueOf$1;
	    proto$2._bubble = bubble;
	    proto$2.clone = clone$1;
	    proto$2.get = get$2;
	    proto$2.milliseconds = milliseconds;
	    proto$2.seconds = seconds;
	    proto$2.minutes = minutes;
	    proto$2.hours = hours;
	    proto$2.days = days;
	    proto$2.weeks = weeks;
	    proto$2.months = months;
	    proto$2.years = years;
	    proto$2.humanize = humanize;
	    proto$2.toISOString = toISOString$1;
	    proto$2.toString = toISOString$1;
	    proto$2.toJSON = toISOString$1;
	    proto$2.locale = locale;
	    proto$2.localeData = localeData;

	    proto$2.toIsoString = deprecate(
	        'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',
	        toISOString$1
	    );
	    proto$2.lang = lang;

	    // FORMATTING

	    addFormatToken('X', 0, 0, 'unix');
	    addFormatToken('x', 0, 0, 'valueOf');

	    // PARSING

	    addRegexToken('x', matchSigned);
	    addRegexToken('X', matchTimestamp);
	    addParseToken('X', function (input, array, config) {
	        config._d = new Date(parseFloat(input) * 1000);
	    });
	    addParseToken('x', function (input, array, config) {
	        config._d = new Date(toInt(input));
	    });

	    //! moment.js

	    hooks.version = '2.26.0';

	    setHookCallback(createLocal);

	    hooks.fn = proto;
	    hooks.min = min;
	    hooks.max = max;
	    hooks.now = now;
	    hooks.utc = createUTC;
	    hooks.unix = createUnix;
	    hooks.months = listMonths;
	    hooks.isDate = isDate;
	    hooks.locale = getSetGlobalLocale;
	    hooks.invalid = createInvalid;
	    hooks.duration = createDuration;
	    hooks.isMoment = isMoment;
	    hooks.weekdays = listWeekdays;
	    hooks.parseZone = createInZone;
	    hooks.localeData = getLocale;
	    hooks.isDuration = isDuration;
	    hooks.monthsShort = listMonthsShort;
	    hooks.weekdaysMin = listWeekdaysMin;
	    hooks.defineLocale = defineLocale;
	    hooks.updateLocale = updateLocale;
	    hooks.locales = listLocales;
	    hooks.weekdaysShort = listWeekdaysShort;
	    hooks.normalizeUnits = normalizeUnits;
	    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
	    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
	    hooks.calendarFormat = getCalendarFormat;
	    hooks.prototype = proto;

	    // currently HTML5 input type only supports 24-hour formats
	    hooks.HTML5_FMT = {
	        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type="datetime-local" />
	        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type="datetime-local" step="1" />
	        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type="datetime-local" step="0.001" />
	        DATE: 'YYYY-MM-DD', // <input type="date" />
	        TIME: 'HH:mm', // <input type="time" />
	        TIME_SECONDS: 'HH:mm:ss', // <input type="time" step="1" />
	        TIME_MS: 'HH:mm:ss.SSS', // <input type="time" step="0.001" />
	        WEEK: 'GGGG-[W]WW', // <input type="week" />
	        MONTH: 'YYYY-MM', // <input type="month" />
	    };

	    return hooks;

	})));
	});

	var momentTimezone = createCommonjsModule(function (module) {
	//! moment-timezone.js
	//! version : 0.5.31
	//! Copyright (c) JS Foundation and other contributors
	//! license : MIT
	//! github.com/moment/moment-timezone

	(function (root, factory) {

		/*global define*/
		if ( module.exports) {
			module.exports = factory(moment); // Node
		} else {
			factory(root.moment);                        // Browser
		}
	}(commonjsGlobal, function (moment) {

		// Resolves es6 module loading issue
		if (moment.version === undefined && moment.default) {
			moment = moment.default;
		}

		// Do not load moment-timezone a second time.
		// if (moment.tz !== undefined) {
		// 	logError('Moment Timezone ' + moment.tz.version + ' was already loaded ' + (moment.tz.dataVersion ? 'with data from ' : 'without any data') + moment.tz.dataVersion);
		// 	return moment;
		// }

		var VERSION = "0.5.31",
			zones = {},
			links = {},
			countries = {},
			names = {},
			guesses = {},
			cachedGuess;

		if (!moment || typeof moment.version !== 'string') {
			logError('Moment Timezone requires Moment.js. See https://momentjs.com/timezone/docs/#/use-it/browser/');
		}

		var momentVersion = moment.version.split('.'),
			major = +momentVersion[0],
			minor = +momentVersion[1];

		// Moment.js version check
		if (major < 2 || (major === 2 && minor < 6)) {
			logError('Moment Timezone requires Moment.js >= 2.6.0. You are using Moment.js ' + moment.version + '. See momentjs.com');
		}

		/************************************
			Unpacking
		************************************/

		function charCodeToInt(charCode) {
			if (charCode > 96) {
				return charCode - 87;
			} else if (charCode > 64) {
				return charCode - 29;
			}
			return charCode - 48;
		}

		function unpackBase60(string) {
			var i = 0,
				parts = string.split('.'),
				whole = parts[0],
				fractional = parts[1] || '',
				multiplier = 1,
				num,
				out = 0,
				sign = 1;

			// handle negative numbers
			if (string.charCodeAt(0) === 45) {
				i = 1;
				sign = -1;
			}

			// handle digits before the decimal
			for (i; i < whole.length; i++) {
				num = charCodeToInt(whole.charCodeAt(i));
				out = 60 * out + num;
			}

			// handle digits after the decimal
			for (i = 0; i < fractional.length; i++) {
				multiplier = multiplier / 60;
				num = charCodeToInt(fractional.charCodeAt(i));
				out += num * multiplier;
			}

			return out * sign;
		}

		function arrayToInt (array) {
			for (var i = 0; i < array.length; i++) {
				array[i] = unpackBase60(array[i]);
			}
		}

		function intToUntil (array, length) {
			for (var i = 0; i < length; i++) {
				array[i] = Math.round((array[i - 1] || 0) + (array[i] * 60000)); // minutes to milliseconds
			}

			array[length - 1] = Infinity;
		}

		function mapIndices (source, indices) {
			var out = [], i;

			for (i = 0; i < indices.length; i++) {
				out[i] = source[indices[i]];
			}

			return out;
		}

		function unpack (string) {
			var data = string.split('|'),
				offsets = data[2].split(' '),
				indices = data[3].split(''),
				untils  = data[4].split(' ');

			arrayToInt(offsets);
			arrayToInt(indices);
			arrayToInt(untils);

			intToUntil(untils, indices.length);

			return {
				name       : data[0],
				abbrs      : mapIndices(data[1].split(' '), indices),
				offsets    : mapIndices(offsets, indices),
				untils     : untils,
				population : data[5] | 0
			};
		}

		/************************************
			Zone object
		************************************/

		function Zone (packedString) {
			if (packedString) {
				this._set(unpack(packedString));
			}
		}

		Zone.prototype = {
			_set : function (unpacked) {
				this.name       = unpacked.name;
				this.abbrs      = unpacked.abbrs;
				this.untils     = unpacked.untils;
				this.offsets    = unpacked.offsets;
				this.population = unpacked.population;
			},

			_index : function (timestamp) {
				var target = +timestamp,
					untils = this.untils,
					i;

				for (i = 0; i < untils.length; i++) {
					if (target < untils[i]) {
						return i;
					}
				}
			},

			countries : function () {
				var zone_name = this.name;
				return Object.keys(countries).filter(function (country_code) {
					return countries[country_code].zones.indexOf(zone_name) !== -1;
				});
			},

			parse : function (timestamp) {
				var target  = +timestamp,
					offsets = this.offsets,
					untils  = this.untils,
					max     = untils.length - 1,
					offset, offsetNext, offsetPrev, i;

				for (i = 0; i < max; i++) {
					offset     = offsets[i];
					offsetNext = offsets[i + 1];
					offsetPrev = offsets[i ? i - 1 : i];

					if (offset < offsetNext && tz.moveAmbiguousForward) {
						offset = offsetNext;
					} else if (offset > offsetPrev && tz.moveInvalidForward) {
						offset = offsetPrev;
					}

					if (target < untils[i] - (offset * 60000)) {
						return offsets[i];
					}
				}

				return offsets[max];
			},

			abbr : function (mom) {
				return this.abbrs[this._index(mom)];
			},

			offset : function (mom) {
				logError("zone.offset has been deprecated in favor of zone.utcOffset");
				return this.offsets[this._index(mom)];
			},

			utcOffset : function (mom) {
				return this.offsets[this._index(mom)];
			}
		};

		/************************************
			Country object
		************************************/

		function Country (country_name, zone_names) {
			this.name = country_name;
			this.zones = zone_names;
		}

		/************************************
			Current Timezone
		************************************/

		function OffsetAt(at) {
			var timeString = at.toTimeString();
			var abbr = timeString.match(/\([a-z ]+\)/i);
			if (abbr && abbr[0]) {
				// 17:56:31 GMT-0600 (CST)
				// 17:56:31 GMT-0600 (Central Standard Time)
				abbr = abbr[0].match(/[A-Z]/g);
				abbr = abbr ? abbr.join('') : undefined;
			} else {
				// 17:56:31 CST
				// 17:56:31 GMT+0800 (台北標準時間)
				abbr = timeString.match(/[A-Z]{3,5}/g);
				abbr = abbr ? abbr[0] : undefined;
			}

			if (abbr === 'GMT') {
				abbr = undefined;
			}

			this.at = +at;
			this.abbr = abbr;
			this.offset = at.getTimezoneOffset();
		}

		function ZoneScore(zone) {
			this.zone = zone;
			this.offsetScore = 0;
			this.abbrScore = 0;
		}

		ZoneScore.prototype.scoreOffsetAt = function (offsetAt) {
			this.offsetScore += Math.abs(this.zone.utcOffset(offsetAt.at) - offsetAt.offset);
			if (this.zone.abbr(offsetAt.at).replace(/[^A-Z]/g, '') !== offsetAt.abbr) {
				this.abbrScore++;
			}
		};

		function findChange(low, high) {
			var mid, diff;

			while ((diff = ((high.at - low.at) / 12e4 | 0) * 6e4)) {
				mid = new OffsetAt(new Date(low.at + diff));
				if (mid.offset === low.offset) {
					low = mid;
				} else {
					high = mid;
				}
			}

			return low;
		}

		function userOffsets() {
			var startYear = new Date().getFullYear() - 2,
				last = new OffsetAt(new Date(startYear, 0, 1)),
				offsets = [last],
				change, next, i;

			for (i = 1; i < 48; i++) {
				next = new OffsetAt(new Date(startYear, i, 1));
				if (next.offset !== last.offset) {
					change = findChange(last, next);
					offsets.push(change);
					offsets.push(new OffsetAt(new Date(change.at + 6e4)));
				}
				last = next;
			}

			for (i = 0; i < 4; i++) {
				offsets.push(new OffsetAt(new Date(startYear + i, 0, 1)));
				offsets.push(new OffsetAt(new Date(startYear + i, 6, 1)));
			}

			return offsets;
		}

		function sortZoneScores (a, b) {
			if (a.offsetScore !== b.offsetScore) {
				return a.offsetScore - b.offsetScore;
			}
			if (a.abbrScore !== b.abbrScore) {
				return a.abbrScore - b.abbrScore;
			}
			if (a.zone.population !== b.zone.population) {
				return b.zone.population - a.zone.population;
			}
			return b.zone.name.localeCompare(a.zone.name);
		}

		function addToGuesses (name, offsets) {
			var i, offset;
			arrayToInt(offsets);
			for (i = 0; i < offsets.length; i++) {
				offset = offsets[i];
				guesses[offset] = guesses[offset] || {};
				guesses[offset][name] = true;
			}
		}

		function guessesForUserOffsets (offsets) {
			var offsetsLength = offsets.length,
				filteredGuesses = {},
				out = [],
				i, j, guessesOffset;

			for (i = 0; i < offsetsLength; i++) {
				guessesOffset = guesses[offsets[i].offset] || {};
				for (j in guessesOffset) {
					if (guessesOffset.hasOwnProperty(j)) {
						filteredGuesses[j] = true;
					}
				}
			}

			for (i in filteredGuesses) {
				if (filteredGuesses.hasOwnProperty(i)) {
					out.push(names[i]);
				}
			}

			return out;
		}

		function rebuildGuess () {

			// use Intl API when available and returning valid time zone
			try {
				var intlName = Intl.DateTimeFormat().resolvedOptions().timeZone;
				if (intlName && intlName.length > 3) {
					var name = names[normalizeName(intlName)];
					if (name) {
						return name;
					}
					logError("Moment Timezone found " + intlName + " from the Intl api, but did not have that data loaded.");
				}
			} catch (e) {
				// Intl unavailable, fall back to manual guessing.
			}

			var offsets = userOffsets(),
				offsetsLength = offsets.length,
				guesses = guessesForUserOffsets(offsets),
				zoneScores = [],
				zoneScore, i, j;

			for (i = 0; i < guesses.length; i++) {
				zoneScore = new ZoneScore(getZone(guesses[i]), offsetsLength);
				for (j = 0; j < offsetsLength; j++) {
					zoneScore.scoreOffsetAt(offsets[j]);
				}
				zoneScores.push(zoneScore);
			}

			zoneScores.sort(sortZoneScores);

			return zoneScores.length > 0 ? zoneScores[0].zone.name : undefined;
		}

		function guess (ignoreCache) {
			if (!cachedGuess || ignoreCache) {
				cachedGuess = rebuildGuess();
			}
			return cachedGuess;
		}

		/************************************
			Global Methods
		************************************/

		function normalizeName (name) {
			return (name || '').toLowerCase().replace(/\//g, '_');
		}

		function addZone (packed) {
			var i, name, split, normalized;

			if (typeof packed === "string") {
				packed = [packed];
			}

			for (i = 0; i < packed.length; i++) {
				split = packed[i].split('|');
				name = split[0];
				normalized = normalizeName(name);
				zones[normalized] = packed[i];
				names[normalized] = name;
				addToGuesses(normalized, split[2].split(' '));
			}
		}

		function getZone (name, caller) {

			name = normalizeName(name);

			var zone = zones[name];
			var link;

			if (zone instanceof Zone) {
				return zone;
			}

			if (typeof zone === 'string') {
				zone = new Zone(zone);
				zones[name] = zone;
				return zone;
			}

			// Pass getZone to prevent recursion more than 1 level deep
			if (links[name] && caller !== getZone && (link = getZone(links[name], getZone))) {
				zone = zones[name] = new Zone();
				zone._set(link);
				zone.name = names[name];
				return zone;
			}

			return null;
		}

		function getNames () {
			var i, out = [];

			for (i in names) {
				if (names.hasOwnProperty(i) && (zones[i] || zones[links[i]]) && names[i]) {
					out.push(names[i]);
				}
			}

			return out.sort();
		}

		function getCountryNames () {
			return Object.keys(countries);
		}

		function addLink (aliases) {
			var i, alias, normal0, normal1;

			if (typeof aliases === "string") {
				aliases = [aliases];
			}

			for (i = 0; i < aliases.length; i++) {
				alias = aliases[i].split('|');

				normal0 = normalizeName(alias[0]);
				normal1 = normalizeName(alias[1]);

				links[normal0] = normal1;
				names[normal0] = alias[0];

				links[normal1] = normal0;
				names[normal1] = alias[1];
			}
		}

		function addCountries (data) {
			var i, country_code, country_zones, split;
			if (!data || !data.length) return;
			for (i = 0; i < data.length; i++) {
				split = data[i].split('|');
				country_code = split[0].toUpperCase();
				country_zones = split[1].split(' ');
				countries[country_code] = new Country(
					country_code,
					country_zones
				);
			}
		}

		function getCountry (name) {
			name = name.toUpperCase();
			return countries[name] || null;
		}

		function zonesForCountry(country, with_offset) {
			country = getCountry(country);

			if (!country) return null;

			var zones = country.zones.sort();

			if (with_offset) {
				return zones.map(function (zone_name) {
					var zone = getZone(zone_name);
					return {
						name: zone_name,
						offset: zone.utcOffset(new Date())
					};
				});
			}

			return zones;
		}

		function loadData (data) {
			addZone(data.zones);
			addLink(data.links);
			addCountries(data.countries);
			tz.dataVersion = data.version;
		}

		function zoneExists (name) {
			if (!zoneExists.didShowError) {
				zoneExists.didShowError = true;
					logError("moment.tz.zoneExists('" + name + "') has been deprecated in favor of !moment.tz.zone('" + name + "')");
			}
			return !!getZone(name);
		}

		function needsOffset (m) {
			var isUnixTimestamp = (m._f === 'X' || m._f === 'x');
			return !!(m._a && (m._tzm === undefined) && !isUnixTimestamp);
		}

		function logError (message) {
			if (typeof console !== 'undefined' && typeof console.error === 'function') {
				console.error(message);
			}
		}

		/************************************
			moment.tz namespace
		************************************/

		function tz (input) {
			var args = Array.prototype.slice.call(arguments, 0, -1),
				name = arguments[arguments.length - 1],
				zone = getZone(name),
				out  = moment.utc.apply(null, args);

			if (zone && !moment.isMoment(input) && needsOffset(out)) {
				out.add(zone.parse(out), 'minutes');
			}

			out.tz(name);

			return out;
		}

		tz.version      = VERSION;
		tz.dataVersion  = '';
		tz._zones       = zones;
		tz._links       = links;
		tz._names       = names;
		tz._countries	= countries;
		tz.add          = addZone;
		tz.link         = addLink;
		tz.load         = loadData;
		tz.zone         = getZone;
		tz.zoneExists   = zoneExists; // deprecated in 0.1.0
		tz.guess        = guess;
		tz.names        = getNames;
		tz.Zone         = Zone;
		tz.unpack       = unpack;
		tz.unpackBase60 = unpackBase60;
		tz.needsOffset  = needsOffset;
		tz.moveInvalidForward   = true;
		tz.moveAmbiguousForward = false;
		tz.countries    = getCountryNames;
		tz.zonesForCountry = zonesForCountry;

		/************************************
			Interface with Moment.js
		************************************/

		var fn = moment.fn;

		moment.tz = tz;

		moment.defaultZone = null;

		moment.updateOffset = function (mom, keepTime) {
			var zone = moment.defaultZone,
				offset;

			if (mom._z === undefined) {
				if (zone && needsOffset(mom) && !mom._isUTC) {
					mom._d = moment.utc(mom._a)._d;
					mom.utc().add(zone.parse(mom), 'minutes');
				}
				mom._z = zone;
			}
			if (mom._z) {
				offset = mom._z.utcOffset(mom);
				if (Math.abs(offset) < 16) {
					offset = offset / 60;
				}
				if (mom.utcOffset !== undefined) {
					var z = mom._z;
					mom.utcOffset(-offset, keepTime);
					mom._z = z;
				} else {
					mom.zone(offset, keepTime);
				}
			}
		};

		fn.tz = function (name, keepTime) {
			if (name) {
				if (typeof name !== 'string') {
					throw new Error('Time zone name must be a string, got ' + name + ' [' + typeof name + ']');
				}
				this._z = getZone(name);
				if (this._z) {
					moment.updateOffset(this, keepTime);
				} else {
					logError("Moment Timezone has no data for " + name + ". See http://momentjs.com/timezone/docs/#/data-loading/.");
				}
				return this;
			}
			if (this._z) { return this._z.name; }
		};

		function abbrWrap (old) {
			return function () {
				if (this._z) { return this._z.abbr(this); }
				return old.call(this);
			};
		}

		function resetZoneWrap (old) {
			return function () {
				this._z = null;
				return old.apply(this, arguments);
			};
		}

		function resetZoneWrap2 (old) {
			return function () {
				if (arguments.length > 0) this._z = null;
				return old.apply(this, arguments);
			};
		}

		fn.zoneName  = abbrWrap(fn.zoneName);
		fn.zoneAbbr  = abbrWrap(fn.zoneAbbr);
		fn.utc       = resetZoneWrap(fn.utc);
		fn.local     = resetZoneWrap(fn.local);
		fn.utcOffset = resetZoneWrap2(fn.utcOffset);

		moment.tz.setDefault = function(name) {
			if (major < 2 || (major === 2 && minor < 9)) {
				logError('Moment Timezone setDefault() requires Moment.js >= 2.9.0. You are using Moment.js ' + moment.version + '.');
			}
			moment.defaultZone = name ? getZone(name) : null;
			return moment;
		};

		// Cloning a moment should include the _z property.
		var momentProperties = moment.momentProperties;
		if (Object.prototype.toString.call(momentProperties) === '[object Array]') {
			// moment 2.8.1+
			momentProperties.push('_z');
			momentProperties.push('_a');
		} else if (momentProperties) {
			// moment 2.7.0
			momentProperties._z = null;
		}

		// INJECT DATA

		return moment;
	}));
	});

	const version="2020a";const zones=["Africa/Abidjan|LMT GMT|g.8 0|01|-2ldXH.Q|48e5","Africa/Accra|LMT GMT +0020|.Q 0 -k|012121212121212121212121212121212121212121212121|-26BbX.8 6tzX.8 MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE|41e5","Africa/Nairobi|LMT EAT +0230 +0245|-2r.g -30 -2u -2J|01231|-1F3Cr.g 3Dzr.g okMu MFXJ|47e5","Africa/Algiers|PMT WET WEST CET CEST|-9.l 0 -10 -10 -20|0121212121212121343431312123431213|-2nco9.l cNb9.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 DA0 Imo0 rd0 De0 9Xz0 1fb0 1ap0 16K0 2yo0 mEp0 hwL0 jxA0 11A0 dDd0 17b0 11B0 1cN0 2Dy0 1cN0 1fB0 1cL0|26e5","Africa/Lagos|LMT WAT|-d.A -10|01|-22y0d.A|17e6","Africa/Bissau|LMT -01 GMT|12.k 10 0|012|-2ldX0 2xoo0|39e4","Africa/Maputo|LMT CAT|-2a.k -20|01|-2GJea.k|26e5","Africa/Cairo|EET EEST|-20 -30|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-1bIO0 vb0 1ip0 11z0 1iN0 1nz0 12p0 1pz0 10N0 1pz0 16p0 1jz0 s3d0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1WL0 rd0 1Rz0 wp0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1qL0 Xd0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1ny0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 WL0 1qN0 Rb0 1wp0 On0 1zd0 Lz0 1EN0 Fb0 c10 8n0 8Nd0 gL0 e10 mn0|15e6","Africa/Casablanca|LMT +00 +01|u.k 0 -10|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-2gMnt.E 130Lt.E rb0 Dd0 dVb0 b6p0 TX0 EoB0 LL0 gnd0 rz0 43d0 AL0 1Nd0 XX0 1Cp0 pz0 dEp0 4mn0 SyN0 AL0 1Nd0 wn0 1FB0 Db0 1zd0 Lz0 1Nf0 wM0 co0 go0 1o00 s00 dA0 vc0 11A0 A00 e00 y00 11A0 uM0 e00 Dc0 11A0 s00 e00 IM0 WM0 mo0 gM0 LA0 WM0 jA0 e00 28M0 e00 2600 gM0 2600 e00 2600 gM0 2600 e00 28M0 e00 2600 gM0 2600 e00 28M0 e00 2600 gM0 2600 e00 2600 gM0 2600 e00 28M0 e00 2600 gM0 2600 e00 2600 gM0 2600 gM0 2600 e00 2600 gM0|32e5","Africa/Ceuta|WET WEST CET CEST|0 -10 -10 -20|010101010101010101010232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-25KN0 11z0 drd0 18p0 3HX0 17d0 1fz0 1a10 1io0 1a00 1y7o0 LL0 gnd0 rz0 43d0 AL0 1Nd0 XX0 1Cp0 pz0 dEp0 4VB0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|85e3","Africa/El_Aaiun|LMT -01 +00 +01|Q.M 10 0 -10|012323232323232323232323232323232323232323232323232323232323232323232323232323232323|-1rDz7.c 1GVA7.c 6L0 AL0 1Nd0 XX0 1Cp0 pz0 1cBB0 AL0 1Nd0 wn0 1FB0 Db0 1zd0 Lz0 1Nf0 wM0 co0 go0 1o00 s00 dA0 vc0 11A0 A00 e00 y00 11A0 uM0 e00 Dc0 11A0 s00 e00 IM0 WM0 mo0 gM0 LA0 WM0 jA0 e00 28M0 e00 2600 gM0 2600 e00 2600 gM0 2600 e00 28M0 e00 2600 gM0 2600 e00 28M0 e00 2600 gM0 2600 e00 2600 gM0 2600 e00 28M0 e00 2600 gM0 2600 e00 2600 gM0 2600 gM0 2600 e00 2600 gM0|20e4","Africa/Johannesburg|SAST SAST SAST|-1u -20 -30|012121|-2GJdu 1Ajdu 1cL0 1cN0 1cL0|84e5","Africa/Juba|LMT CAT CAST EAT|-26.s -20 -30 -30|01212121212121212121212121212121213|-1yW26.s 1zK06.s 16L0 1iN0 17b0 1jd0 17b0 1ip0 17z0 1i10 17X0 1hB0 18n0 1hd0 19b0 1gp0 19z0 1iN0 17b0 1ip0 17z0 1i10 18n0 1hd0 18L0 1gN0 19b0 1gp0 19z0 1iN0 17z0 1i10 17X0 yGd0|","Africa/Khartoum|LMT CAT CAST EAT|-2a.8 -20 -30 -30|012121212121212121212121212121212131|-1yW2a.8 1zK0a.8 16L0 1iN0 17b0 1jd0 17b0 1ip0 17z0 1i10 17X0 1hB0 18n0 1hd0 19b0 1gp0 19z0 1iN0 17b0 1ip0 17z0 1i10 18n0 1hd0 18L0 1gN0 19b0 1gp0 19z0 1iN0 17z0 1i10 17X0 yGd0 HjL0|51e5","Africa/Monrovia|MMT MMT GMT|H.8 I.u 0|012|-23Lzg.Q 28G01.m|11e5","Africa/Ndjamena|LMT WAT WAST|-10.c -10 -20|0121|-2le10.c 2J3c0.c Wn0|13e5","Africa/Sao_Tome|LMT GMT WAT|A.J 0 -10|0121|-2le00 4i6N0 2q00|","Africa/Tripoli|LMT CET CEST EET|-Q.I -10 -20 -20|012121213121212121212121213123123|-21JcQ.I 1hnBQ.I vx0 4iP0 xx0 4eN0 Bb0 7ip0 U0n0 A10 1db0 1cN0 1db0 1dd0 1db0 1eN0 1bb0 1e10 1cL0 1c10 1db0 1dd0 1db0 1cN0 1db0 1q10 fAn0 1ep0 1db0 AKq0 TA0 1o00|11e5","Africa/Tunis|PMT CET CEST|-9.l -10 -20|0121212121212121212121212121212121|-2nco9.l 18pa9.l 1qM0 DA0 3Tc0 11B0 1ze0 WM0 7z0 3d0 14L0 1cN0 1f90 1ar0 16J0 1gXB0 WM0 1rA0 11c0 nwo0 Ko0 1cM0 1cM0 1rA0 10M0 zuM0 10N0 1aN0 1qM0 WM0 1qM0 11A0 1o00|20e5","Africa/Windhoek|+0130 SAST SAST CAT WAT|-1u -20 -30 -20 -10|01213434343434343434343434343434343434343434343434343|-2GJdu 1Ajdu 1cL0 1SqL0 9Io0 16P0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0|32e4","America/Adak|NST NWT NPT BST BDT AHST HST HDT|b0 a0 a0 b0 a0 a0 a0 90|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17SX0 8wW0 iB0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cm0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|326","America/Anchorage|AST AWT APT AHST AHDT YST AKST AKDT|a0 90 90 a0 90 90 90 80|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17T00 8wX0 iA0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cm0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|30e4","America/Port_of_Spain|LMT AST|46.4 40|01|-2kNvR.U|43e3","America/Araguaina|LMT -03 -02|3c.M 30 20|0121212121212121212121212121212121212121212121212121|-2glwL.c HdKL.c 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 dMN0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 ny10 Lz0|14e4","America/Argentina/Buenos_Aires|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323232323232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 A4p0 uL0 1qN0 WL0|","America/Argentina/Catamarca|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323132321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 rlB0 7B0 8zb0 uL0|","America/Argentina/Cordoba|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323132323232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 A4p0 uL0 1qN0 WL0|","America/Argentina/Jujuy|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323121323232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1ze0 TX0 1ld0 WK0 1wp0 TX0 A4p0 uL0|","America/Argentina/La_Rioja|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323231232321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Qn0 qO0 16n0 Rb0 1wp0 TX0 rlB0 7B0 8zb0 uL0|","America/Argentina/Mendoza|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232312121321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1u20 SL0 1vd0 Tb0 1wp0 TW0 ri10 Op0 7TX0 uL0|","America/Argentina/Rio_Gallegos|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323232321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 rlB0 7B0 8zb0 uL0|","America/Argentina/Salta|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323231323232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 A4p0 uL0|","America/Argentina/San_Juan|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323231232321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Qn0 qO0 16n0 Rb0 1wp0 TX0 rld0 m10 8lb0 uL0|","America/Argentina/San_Luis|CMT -04 -03 -02|4g.M 40 30 20|012121212121212121212121212121212121212121232323121212321212|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 XX0 1q20 SL0 AN0 vDb0 m10 8lb0 8L0 jd0 1qN0 WL0 1qN0|","America/Argentina/Tucuman|CMT -04 -03 -02|4g.M 40 30 20|0121212121212121212121212121212121212121212323232313232123232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 rlB0 4N0 8BX0 uL0 1qN0 WL0|","America/Argentina/Ushuaia|CMT -04 -03 -02|4g.M 40 30 20|01212121212121212121212121212121212121212123232323232321232|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 rkN0 8p0 8zb0 uL0|","America/Curacao|LMT -0430 AST|4z.L 4u 40|012|-2kV7o.d 28KLS.d|15e4","America/Asuncion|AMT -04 -03|3O.E 40 30|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-1x589.k 1DKM9.k 3CL0 3Dd0 10L0 1pB0 10n0 1pB0 10n0 1pB0 1cL0 1dd0 1db0 1dd0 1cL0 1dd0 1cL0 1dd0 1cL0 1dd0 1db0 1dd0 1cL0 1dd0 1cL0 1dd0 1cL0 1dd0 1db0 1dd0 1cL0 1lB0 14n0 1dd0 1cL0 1fd0 WL0 1rd0 1aL0 1dB0 Xz0 1qp0 Xb0 1qN0 10L0 1rB0 TX0 1tB0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 WN0 1qL0 11B0 1nX0 1ip0 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 TX0 1tB0 19X0 1a10 1fz0 1a10 1fz0 1cN0 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0|28e5","America/Atikokan|CST CDT CWT CPT EST|60 50 50 50 50|0101234|-25TQ0 1in0 Rnb0 3je0 8x30 iw0|28e2","America/Bahia_Banderas|LMT MST CST PST MDT CDT|71 70 60 80 60 50|0121212131414141414141414141414141414152525252525252525252525252525252525252525252525252525252|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nW0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|84e3","America/Bahia|LMT -03 -02|2y.4 30 20|01212121212121212121212121212121212121212121212121212121212121|-2glxp.U HdLp.U 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 l5B0 Rb0|27e5","America/Barbados|LMT BMT AST ADT|3W.t 3W.t 40 30|01232323232|-1Q0I1.v jsM0 1ODC1.v IL0 1ip0 17b0 1ip0 17b0 1ld0 13b0|28e4","America/Belem|LMT -03 -02|3d.U 30 20|012121212121212121212121212121|-2glwK.4 HdKK.4 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0|20e5","America/Belize|LMT CST -0530 CDT|5Q.M 60 5u 50|01212121212121212121212121212121212121212121212121213131|-2kBu7.c fPA7.c Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1f0Mu qn0 lxB0 mn0|57e3","America/Blanc-Sablon|AST ADT AWT APT|40 30 30 30|010230|-25TS0 1in0 UGp0 8x50 iu0|11e2","America/Boa_Vista|LMT -04 -03|42.E 40 30|0121212121212121212121212121212121|-2glvV.k HdKV.k 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 smp0 WL0 1tB0 2L0|62e2","America/Bogota|BMT -05 -04|4U.g 50 40|0121|-2eb73.I 38yo3.I 2en0|90e5","America/Boise|PST PDT MST MWT MPT MDT|80 70 70 60 60 60|0101023425252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-261q0 1nX0 11B0 1nX0 8C10 JCL0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 Dd0 1Kn0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|21e4","America/Cambridge_Bay|-00 MST MWT MPT MDDT MDT CST CDT EST|0 70 60 60 50 60 60 50 50|0123141515151515151515151515151515151515151515678651515151515151515151515151515151515151515151515151515151515151515151515151|-21Jc0 RO90 8x20 ix0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11A0 1nX0 2K0 WQ0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|15e2","America/Campo_Grande|LMT -04 -03|3C.s 40 30|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2glwl.w HdLl.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 1C10 Lz0 1Ip0 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1HB0 FX0|77e4","America/Cancun|LMT CST EST EDT CDT|5L.4 60 50 40 50|0123232341414141414141414141414141414141412|-1UQG0 2q2o0 yLB0 1lb0 14p0 1lb0 14p0 Lz0 xB0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 Dd0|63e4","America/Caracas|CMT -0430 -04|4r.E 4u 40|01212|-2kV7w.k 28KM2.k 1IwOu kqo0|29e5","America/Cayenne|LMT -04 -03|3t.k 40 30|012|-2mrwu.E 2gWou.E|58e3","America/Panama|CMT EST|5j.A 50|01|-2uduE.o|15e5","America/Chicago|CST CDT EST CWT CPT|60 50 50 50 50|01010101010101010101010101010101010102010101010103401010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 1wp0 TX0 WN0 1qL0 1cN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 11B0 1Hz0 14p0 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 RB0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|92e5","America/Chihuahua|LMT MST CST CDT MDT|74.k 70 60 50 60|0121212323241414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 2zQN0 1lb0 14p0 1lb0 14q0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|81e4","America/Costa_Rica|SJMT CST CDT|5A.d 60 50|0121212121|-1Xd6n.L 2lu0n.L Db0 1Kp0 Db0 pRB0 15b0 1kp0 mL0|12e5","America/Creston|MST PST|70 80|010|-29DR0 43B0|53e2","America/Cuiaba|LMT -04 -03|3I.k 40 30|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2glwf.E HdLf.E 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 4a10 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1HB0 FX0|54e4","America/Danmarkshavn|LMT -03 -02 GMT|1e.E 30 20 0|01212121212121212121212121212121213|-2a5WJ.k 2z5fJ.k 19U0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 DC0|8","America/Dawson_Creek|PST PDT PWT PPT MST|80 70 70 70 70|0102301010101010101010101010101010101010101010101010101014|-25TO0 1in0 UGp0 8x10 iy0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 ML0|12e3","America/Dawson|YST YDT YWT YPT YDDT PST PDT MST|90 80 80 80 70 80 70 70|01010230405656565656565656565656565656565656565656565656565656565656565656565656565656565657|-25TN0 1in0 1o10 13V0 Ser0 8x00 iz0 LCL0 1fA0 jrA0 fNd0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0|13e2","America/Denver|MST MDT MWT MPT|70 60 60 60|01010101023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261r0 1nX0 11B0 1nX0 11B0 1qL0 WN0 mn0 Ord0 8x20 ix0 LCN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|26e5","America/Detroit|LMT CST EST EWT EPT EDT|5w.b 60 50 40 40 40|0123425252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-2Cgir.N peqr.N 156L0 8x40 iv0 6fd0 11z0 JxX1 SMX 1cN0 1cL0 aW10 1cL0 s10 1Vz0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|37e5","America/Edmonton|LMT MST MDT MWT MPT|7x.Q 70 60 60 60|0121212121212134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2yd4q.8 shdq.8 1in0 17d0 hz0 2dB0 1fz0 1a10 11z0 1qN0 WL0 1qN0 11z0 IGN0 8x20 ix0 3NB0 11z0 XQp0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|10e5","America/Eirunepe|LMT -05 -04|4D.s 50 40|0121212121212121212121212121212121|-2glvk.w HdLk.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 dPB0 On0 yTd0 d5X0|31e3","America/El_Salvador|LMT CST CDT|5U.M 60 50|012121|-1XiG3.c 2Fvc3.c WL0 1qN0 WL0|11e5","America/Tijuana|LMT MST PST PDT PWT PPT|7M.4 70 80 70 70 70|012123245232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UQE0 4PX0 8mM0 8lc0 SN0 1cL0 pHB0 83r0 zI0 5O10 1Rz0 cOO0 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 BUp0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|20e5","America/Fort_Nelson|PST PDT PWT PPT MST|80 70 70 70 70|01023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010104|-25TO0 1in0 UGp0 8x10 iy0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0|39e2","America/Fort_Wayne|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|010101023010101010101010101040454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 QI10 Db0 RB0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 5Tz0 1o10 qLb0 1cL0 1cN0 1cL0 1qhd0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|","America/Fortaleza|LMT -03 -02|2y 30 20|0121212121212121212121212121212121212121|-2glxq HdLq 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 5z0 2mN0 On0|34e5","America/Glace_Bay|LMT AST ADT AWT APT|3X.M 40 30 30 30|012134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsI0.c CwO0.c 1in0 UGp0 8x50 iu0 iq10 11z0 Jg10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|19e3","America/Godthab|LMT -03 -02|3q.U 30 20|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a5Ux.4 2z5dx.4 19U0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|17e3","America/Goose_Bay|NST NDT NST NDT NWT NPT AST ADT ADDT|3u.Q 2u.Q 3u 2u 2u 2u 40 30 20|010232323232323245232323232323232323232323232323232323232326767676767676767676767676767676767676767676768676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-25TSt.8 1in0 DXb0 2HbX.8 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 WL0 1qN0 WL0 1qN0 7UHu itu 1tB0 WL0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1tB0 WL0 1ld0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 S10 g0u 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14n1 1lb0 14p0 1nW0 11C0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zcX Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|76e2","America/Grand_Turk|KMT EST EDT AST|57.a 50 40 40|01212121212121212121212121212121212121212121212121212121212121212121212121232121212121212121212121212121212121212121|-2l1uQ.O 2HHBQ.O 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 5Ip0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|37e2","America/Guatemala|LMT CST CDT|62.4 60 50|0121212121|-24KhV.U 2efXV.U An0 mtd0 Nz0 ifB0 17b0 zDB0 11z0|13e5","America/Guayaquil|QMT -05 -04|5e 50 40|0121|-1yVSK 2uILK rz0|27e5","America/Guyana|LMT -0345 -03 -04|3Q.E 3J 30 40|0123|-2dvU7.k 2r6LQ.k Bxbf|80e4","America/Halifax|LMT AST ADT AWT APT|4e.o 40 30 30 30|0121212121212121212121212121212121212121212121212134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsHJ.A xzzJ.A 1db0 3I30 1in0 3HX0 IL0 1E10 ML0 1yN0 Pb0 1Bd0 Mn0 1Bd0 Rz0 1w10 Xb0 1w10 LX0 1w10 Xb0 1w10 Lz0 1C10 Jz0 1E10 OL0 1yN0 Un0 1qp0 Xb0 1qp0 11X0 1w10 Lz0 1HB0 LX0 1C10 FX0 1w10 Xb0 1qp0 Xb0 1BB0 LX0 1td0 Xb0 1qp0 Xb0 Rf0 8x50 iu0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 3Qp0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 3Qp0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 6i10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|39e4","America/Havana|HMT CST CDT|5t.A 50 40|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1Meuu.o 72zu.o ML0 sld0 An0 1Nd0 Db0 1Nd0 An0 6Ep0 An0 1Nd0 An0 JDd0 Mn0 1Ap0 On0 1fd0 11X0 1qN0 WL0 1wp0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 14n0 1ld0 14L0 1kN0 15b0 1kp0 1cL0 1cN0 1fz0 1a10 1fz0 1fB0 11z0 14p0 1nX0 11B0 1nX0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 1a10 1in0 1a10 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 17c0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 11A0 6i00 Rc0 1wo0 U00 1tA0 Rc0 1wo0 U00 1wo0 U00 1zc0 U00 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0|21e5","America/Hermosillo|LMT MST CST PST MDT|7n.Q 70 60 80 60|0121212131414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0|64e4","America/Indiana/Knox|CST CDT CWT CPT EST|60 50 50 50 50|0101023010101010101010101010101010101040101010101010101010101010101010101010101010101010141010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 11z0 1o10 11z0 1o10 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 3Cn0 8wp0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 z8o0 1o00 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|","America/Indiana/Marengo|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101023010101010101010104545454545414545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 dyN0 11z0 6fd0 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 jrz0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1VA0 LA0 1BX0 1e6p0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|","America/Indiana/Petersburg|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010104010101010101010101010141014545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 njX0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 3Fb0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 19co0 1o00 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|","America/Indiana/Tell_City|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010401054541010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 njX0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 8wn0 1cN0 1cL0 1cN0 1cK0 1cN0 1cL0 1qhd0 1o00 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|","America/Indiana/Vevay|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|010102304545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 kPB0 Awn0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1lnd0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|","America/Indiana/Vincennes|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010101010454541014545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 g0p0 11z0 1o10 11z0 1qL0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 caL0 1cL0 1cN0 1cL0 1qhd0 1o00 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|","America/Indiana/Winamac|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010101010101010454541054545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 jrz0 1cL0 1cN0 1cL0 1qhd0 1o00 Rd0 1za0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|","America/Inuvik|-00 PST PDDT MST MDT|0 80 60 70 60|0121343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-FnA0 tWU0 1fA0 wPe0 2pz0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|35e2","America/Iqaluit|-00 EWT EPT EST EDDT EDT CST CDT|0 40 40 50 30 40 60 50|01234353535353535353535353535353535353535353567353535353535353535353535353535353535353535353535353535353535353535353535353|-16K00 7nX0 iv0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11C0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|67e2","America/Jamaica|KMT EST EDT|57.a 50 40|0121212121212121212121|-2l1uQ.O 2uM1Q.O 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0|94e4","America/Juneau|PST PWT PPT PDT YDT YST AKST AKDT|80 70 70 70 80 90 90 80|01203030303030303030303030403030356767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cM0 1cM0 1cL0 1cN0 1fz0 1a10 1fz0 co0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|33e3","America/Kentucky/Louisville|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101010102301010101010101010101010101454545454545414545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 3Fd0 Nb0 LPd0 11z0 RB0 8x30 iw0 1nX1 e0X 9vd0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 xz0 gso0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1VA0 LA0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|","America/Kentucky/Monticello|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101023010101010101010101010101010101010101010101010101010101010101010101454545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 SWp0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|","America/La_Paz|CMT BST -04|4w.A 3w.A 40|012|-1x37r.o 13b0|19e5","America/Lima|LMT -05 -04|58.A 50 40|0121212121212121|-2tyGP.o 1bDzP.o zX0 1aN0 1cL0 1cN0 1cL0 1PrB0 zX0 1O10 zX0 6Gp0 zX0 98p0 zX0|11e6","America/Los_Angeles|PST PDT PWT PPT|80 70 70 70|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261q0 1nX0 11B0 1nX0 SgN0 8x10 iy0 5Wp1 1VaX 3dA0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1fA0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|15e6","America/Maceio|LMT -03 -02|2m.Q 30 20|012121212121212121212121212121212121212121|-2glxB.8 HdLB.8 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 dMN0 Lz0 8Q10 WL0 1tB0 5z0 2mN0 On0|93e4","America/Managua|MMT CST EST CDT|5J.c 60 50 50|0121313121213131|-1quie.M 1yAMe.M 4mn0 9Up0 Dz0 1K10 Dz0 s3F0 1KH0 DB0 9In0 k8p0 19X0 1o30 11y0|22e5","America/Manaus|LMT -04 -03|40.4 40 30|01212121212121212121212121212121|-2glvX.U HdKX.U 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 dPB0 On0|19e5","America/Martinique|FFMT AST ADT|44.k 40 30|0121|-2mPTT.E 2LPbT.E 19X0|39e4","America/Matamoros|LMT CST CDT|6E 60 50|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1UQG0 2FjC0 1nX0 i6p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|45e4","America/Mazatlan|LMT MST CST PST MDT|75.E 70 60 80 60|0121212131414141414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|44e4","America/Menominee|CST CDT CWT CPT EST|60 50 50 50 50|01010230101041010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 LCN0 1fz0 6410 9Jb0 1cM0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|85e2","America/Merida|LMT CST EST CDT|5W.s 60 50 50|0121313131313131313131313131313131313131313131313131313131313131313131313131313131313131|-1UQG0 2q2o0 2hz0 wu30 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|11e5","America/Metlakatla|PST PWT PPT PDT AKST AKDT|80 70 70 70 90 80|01203030303030303030303030303030304545450454545454545454545454545454545454545454|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1hU10 Rd0 1zb0 Op0 1zb0 Op0 1zb0 uM0 jB0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|14e2","America/Mexico_City|LMT MST CST CDT CWT|6A.A 70 60 50 50|012121232324232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 gEn0 TX0 3xd0 Jb0 6zB0 SL0 e5d0 17b0 1Pff0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|20e6","America/Miquelon|LMT AST -03 -02|3I.E 40 30 20|012323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2mKkf.k 2LTAf.k gQ10 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|61e2","America/Moncton|EST AST ADT AWT APT|50 40 30 30 30|012121212121212121212134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsH0 CwN0 1in0 zAo0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1K10 Lz0 1zB0 NX0 1u10 Wn0 S20 8x50 iu0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 3Cp0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14n1 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 ReX 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|64e3","America/Monterrey|LMT CST CDT|6F.g 60 50|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1UQG0 2FjC0 1nX0 i6p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0|41e5","America/Montevideo|LMT MMT -04 -03 -0330 -0230 -02 -0130|3I.P 3I.P 40 30 3u 2u 20 1u|012343434343434343434343435353636353636375363636363636363636363636363636363636363636363|-2tRUf.9 sVc0 8jcf.9 1db0 1dcu 1cLu 1dcu 1cLu ircu 11zu 1o0u 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 1qMu WLu 1fAu 1cLu 1o0u 11zu NAu 3jXu zXu Dq0u 19Xu pcu jz0 cm10 19X0 6tB0 1fbu 3o0u jX0 4vB0 xz0 3Cp0 mmu 1a10 IMu Db0 4c10 uL0 1Nd0 An0 1SN0 uL0 mp0 28L0 iPB0 un0 1SN0 xz0 1zd0 Lz0 1zd0 Rb0 1zd0 On0 1wp0 Rb0 s8p0 1fB0 1ip0 11z0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 11z0|17e5","America/Toronto|EST EDT EWT EPT|50 40 40 40|01010101010101010101010101010101010101010101012301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TR0 1in0 11Wu 1nzu 1fD0 WJ0 1wr0 Nb0 1Ap0 On0 1zd0 On0 1wp0 TX0 1tB0 TX0 1tB0 TX0 1tB0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 4kM0 8x40 iv0 1o10 11z0 1nX0 11z0 1o10 11z0 1o10 1qL0 11D0 1nX0 11B0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|65e5","America/Nassau|LMT EST EDT|59.u 50 40|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2kNuO.u 26XdO.u 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|24e4","America/New_York|EST EDT EWT EPT|50 40 40 40|01010101010101010101010101010101010101010101010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261t0 1nX0 11B0 1nX0 11B0 1qL0 1a10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 RB0 8x40 iv0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|21e6","America/Nipigon|EST EDT EWT EPT|50 40 40 40|010123010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TR0 1in0 Rnb0 3je0 8x40 iv0 19yN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|16e2","America/Nome|NST NWT NPT BST BDT YST AKST AKDT|b0 a0 a0 b0 a0 90 90 80|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17SX0 8wW0 iB0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cl0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|38e2","America/Noronha|LMT -02 -01|29.E 20 10|0121212121212121212121212121212121212121|-2glxO.k HdKO.k 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 2L0 2pB0 On0|30e2","America/North_Dakota/Beulah|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101014545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|","America/North_Dakota/Center|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101014545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14o0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|","America/North_Dakota/New_Salem|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101454545454545454545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14o0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|","America/Ojinaga|LMT MST CST CDT MDT|6V.E 70 60 50 60|0121212323241414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 2zQN0 1lb0 14p0 1lb0 14q0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e3","America/Pangnirtung|-00 AST AWT APT ADDT ADT EDT EST CST CDT|0 40 30 30 20 30 40 50 60 50|012314151515151515151515151515151515167676767689767676767676767676767676767676767676767676767676767676767676767676767676767|-1XiM0 PnG0 8x50 iu0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1o00 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11C0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|14e2","America/Paramaribo|LMT PMT PMT -0330 -03|3E.E 3E.Q 3E.A 3u 30|01234|-2nDUj.k Wqo0.c qanX.I 1yVXN.o|24e4","America/Phoenix|MST MDT MWT|70 60 60|01010202010|-261r0 1nX0 11B0 1nX0 SgN0 4Al1 Ap0 1db0 SWqX 1cL0|42e5","America/Port-au-Prince|PPMT EST EDT|4N 50 40|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-28RHb 2FnMb 19X0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14q0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 i6n0 1nX0 11B0 1nX0 d430 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 3iN0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e5","America/Rio_Branco|LMT -05 -04|4v.c 50 40|01212121212121212121212121212121|-2glvs.M HdLs.M 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 NBd0 d5X0|31e4","America/Porto_Velho|LMT -04 -03|4f.A 40 30|012121212121212121212121212121|-2glvI.o HdKI.o 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0|37e4","America/Puerto_Rico|AST AWT APT|40 30 30|0120|-17lU0 7XT0 iu0|24e5","America/Punta_Arenas|SMT -05 -04 -03|4G.K 50 40 30|0102021212121212121232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323|-2q2jh.e fJAh.e 5knG.K 1Vzh.e jRAG.K 1pbh.e 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 nHX0 op0 blz0 ko0 Qeo0 WL0 1zd0 On0 1ip0 11z0 1o10 11z0 1qN0 WL0 1ld0 14n0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0|","America/Rainy_River|CST CDT CWT CPT|60 50 50 50|010123010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TQ0 1in0 Rnb0 3je0 8x30 iw0 19yN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|842","America/Rankin_Inlet|-00 CST CDDT CDT EST|0 60 40 50 50|012131313131313131313131313131313131313131313431313131313131313131313131313131313131313131313131313131313131313131313131|-vDc0 keu0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|26e2","America/Recife|LMT -03 -02|2j.A 30 20|0121212121212121212121212121212121212121|-2glxE.o HdLE.o 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 2L0 2pB0 On0|33e5","America/Regina|LMT MST MDT MWT MPT CST|6W.A 70 60 60 60 60|012121212121212121212121341212121212121212121212121215|-2AD51.o uHe1.o 1in0 s2L0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 66N0 1cL0 1cN0 19X0 1fB0 1cL0 1fB0 1cL0 1cN0 1cL0 M30 8x20 ix0 1ip0 1cL0 1ip0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 3NB0 1cL0 1cN0|19e4","America/Resolute|-00 CST CDDT CDT EST|0 60 40 50 50|012131313131313131313131313131313131313131313431313131313431313131313131313131313131313131313131313131313131313131313131|-SnA0 GWS0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|229","America/Santarem|LMT -04 -03|3C.M 40 30|0121212121212121212121212121212|-2glwl.c HdLl.c 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 NBd0|21e4","America/Santiago|SMT -05 -04 -03|4G.K 50 40 30|010202121212121212321232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323|-2q2jh.e fJAh.e 5knG.K 1Vzh.e jRAG.K 1pbh.e 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 nHX0 op0 9Bz0 jb0 1oN0 ko0 Qeo0 WL0 1zd0 On0 1ip0 11z0 1o10 11z0 1qN0 WL0 1ld0 14n0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1zb0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0|62e5","America/Santo_Domingo|SDMT EST EDT -0430 AST|4E 50 40 4u 40|01213131313131414|-1ttjk 1lJMk Mn0 6sp0 Lbu 1Cou yLu 1RAu wLu 1QMu xzu 1Q0u xXu 1PAu 13jB0 e00|29e5","America/Sao_Paulo|LMT -03 -02|36.s 30 20|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2glwR.w HdKR.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 pTd0 PX0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 1C10 Lz0 1Ip0 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1HB0 FX0|20e6","America/Scoresbysund|LMT -02 -01 +00|1r.Q 20 10 0|0121323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2a5Ww.8 2z5ew.8 1a00 1cK0 1cL0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|452","America/Sitka|PST PWT PPT PDT YST AKST AKDT|80 70 70 70 90 90 80|01203030303030303030303030303030345656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 co0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|90e2","America/St_Johns|NST NDT NST NDT NWT NPT NDDT|3u.Q 2u.Q 3u 2u 2u 2u 1u|01010101010101010101010101010101010102323232323232324523232323232323232323232323232323232323232323232323232323232323232323232323232323232326232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-28oit.8 14L0 1nB0 1in0 1gm0 Dz0 1JB0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1fB0 19X0 1fB0 19X0 10O0 eKX.8 19X0 1iq0 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 WL0 1qN0 WL0 1qN0 7UHu itu 1tB0 WL0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1tB0 WL0 1ld0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14n1 1lb0 14p0 1nW0 11C0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zcX Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|11e4","America/Swift_Current|LMT MST MDT MWT MPT CST|7b.k 70 60 60 60 60|012134121212121212121215|-2AD4M.E uHdM.E 1in0 UGp0 8x20 ix0 1o10 17b0 1ip0 11z0 1o10 11z0 1o10 11z0 isN0 1cL0 3Cp0 1cL0 1cN0 11z0 1qN0 WL0 pMp0|16e3","America/Tegucigalpa|LMT CST CDT|5M.Q 60 50|01212121|-1WGGb.8 2ETcb.8 WL0 1qN0 WL0 GRd0 AL0|11e5","America/Thule|LMT AST ADT|4z.8 40 30|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a5To.Q 31NBo.Q 1cL0 1cN0 1cL0 1fB0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|656","America/Thunder_Bay|CST EST EWT EPT EDT|60 50 40 40 40|0123141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141|-2q5S0 1iaN0 8x40 iv0 XNB0 1cL0 1cN0 1fz0 1cN0 1cL0 3Cp0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|11e4","America/Vancouver|PST PDT PWT PPT|80 70 70 70|0102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TO0 1in0 UGp0 8x10 iy0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|23e5","America/Whitehorse|YST YDT YWT YPT YDDT PST PDT MST|90 80 80 80 70 80 70 70|01010230405656565656565656565656565656565656565656565656565656565656565656565656565656565657|-25TN0 1in0 1o10 13V0 Ser0 8x00 iz0 LCL0 1fA0 3NA0 vrd0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0|23e3","America/Winnipeg|CST CDT CWT CPT|60 50 50 50|010101023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aIi0 WL0 3ND0 1in0 Jap0 Rb0 aCN0 8x30 iw0 1tB0 11z0 1ip0 11z0 1o10 11z0 1o10 11z0 1rd0 10L0 1op0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 1cL0 1cN0 11z0 6i10 WL0 6i10 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|66e4","America/Yakutat|YST YWT YPT YDT AKST AKDT|90 80 80 80 90 80|01203030303030303030303030303030304545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-17T10 8x00 iz0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cn0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|642","America/Yellowknife|-00 MST MWT MPT MDDT MDT|0 70 60 60 50 60|012314151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151|-1pdA0 hix0 8x20 ix0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|19e3","Antarctica/Casey|-00 +08 +11|0 -80 -b0|01212121|-2q00 1DjS0 T90 40P0 KL0 blz0 3m10|10","Antarctica/Davis|-00 +07 +05|0 -70 -50|01012121|-vyo0 iXt0 alj0 1D7v0 VB0 3Wn0 KN0|70","Antarctica/DumontDUrville|-00 +10|0 -a0|0101|-U0o0 cfq0 bFm0|80","Antarctica/Macquarie|AEST AEDT -00 +11|-a0 -b0 0 -b0|0102010101010101010101010101010101010101010101010101010101010101010101010101010101010101013|-29E80 19X0 4SL0 1ayy0 Lvs0 1cM0 1o00 Rc0 1wo0 Rc0 1wo0 U00 1wo0 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 1cM0|1","Antarctica/Mawson|-00 +06 +05|0 -60 -50|012|-CEo0 2fyk0|60","Pacific/Auckland|NZMT NZST NZST NZDT|-bu -cu -c0 -d0|01020202020202020202020202023232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323|-1GCVu Lz0 1tB0 11zu 1o0u 11zu 1o0u 11zu 1o0u 14nu 1lcu 14nu 1lcu 1lbu 11Au 1nXu 11Au 1nXu 11Au 1nXu 11Au 1nXu 11Au 1qLu WMu 1qLu 11Au 1n1bu IM0 1C00 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1qM0 14o0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1io0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00|14e5","Antarctica/Palmer|-00 -03 -04 -02|0 30 40 20|0121212121213121212121212121212121212121212121212121212121212121212121212121212121|-cao0 nD0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 jsN0 14N0 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0|40","Antarctica/Rothera|-00 -03|0 30|01|gOo0|130","Antarctica/Syowa|-00 +03|0 -30|01|-vs00|20","Antarctica/Troll|-00 +00 +02|0 0 -20|01212121212121212121212121212121212121212121212121212121212121212121|1puo0 hd0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|40","Antarctica/Vostok|-00 +06|0 -60|01|-tjA0|25","Europe/Oslo|CET CEST|-10 -20|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2awM0 Qm0 W6o0 5pf0 WM0 1fA0 1cM0 1cM0 1cM0 1cM0 wJc0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1qM0 WM0 zpc0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|62e4","Asia/Riyadh|LMT +03|-36.Q -30|01|-TvD6.Q|57e5","Asia/Almaty|LMT +05 +06 +07|-57.M -50 -60 -70|012323232323232323232321232323232323232323232323232|-1Pc57.M eUo7.M 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0|15e5","Asia/Amman|LMT EET EEST|-2n.I -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1yW2n.I 1HiMn.I KL0 1oN0 11b0 1oN0 11b0 1pd0 1dz0 1cp0 11b0 1op0 11b0 fO10 1db0 1e10 1cL0 1cN0 1cL0 1cN0 1fz0 1pd0 10n0 1ld0 14n0 1hB0 15b0 1ip0 19X0 1cN0 1cL0 1cN0 17b0 1ld0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1So0 y00 1fc0 1dc0 1co0 1dc0 1cM0 1cM0 1cM0 1o00 11A0 1lc0 17c0 1cM0 1cM0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 4bX0 Dd0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|25e5","Asia/Anadyr|LMT +12 +13 +14 +11|-bN.U -c0 -d0 -e0 -b0|01232121212121212121214121212121212121212121212121212121212141|-1PcbN.U eUnN.U 23CL0 1db0 2q10 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|13e3","Asia/Aqtau|LMT +04 +05 +06|-3l.4 -40 -50 -60|012323232323232323232123232312121212121212121212|-1Pc3l.4 eUnl.4 24PX0 2pX0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0|15e4","Asia/Aqtobe|LMT +04 +05 +06|-3M.E -40 -50 -60|0123232323232323232321232323232323232323232323232|-1Pc3M.E eUnM.E 23CL0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0|27e4","Asia/Ashgabat|LMT +04 +05 +06|-3R.w -40 -50 -60|0123232323232323232323212|-1Pc3R.w eUnR.w 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0|41e4","Asia/Atyrau|LMT +03 +05 +06 +04|-3r.I -30 -50 -60 -40|01232323232323232323242323232323232324242424242|-1Pc3r.I eUor.I 24PW0 2pX0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 2sp0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0|","Asia/Baghdad|BMT +03 +04|-2V.A -30 -40|012121212121212121212121212121212121212121212121212121|-26BeV.A 2ACnV.A 11b0 1cp0 1dz0 1dd0 1db0 1cN0 1cp0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1de0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0|66e5","Asia/Qatar|LMT +04 +03|-3q.8 -40 -30|012|-21Jfq.8 27BXq.8|96e4","Asia/Baku|LMT +03 +04 +05|-3j.o -30 -40 -50|01232323232323232323232123232323232323232323232323232323232323232|-1Pc3j.o 1jUoj.o WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 1cM0 9Je0 1o00 11z0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00|27e5","Asia/Bangkok|BMT +07|-6G.4 -70|01|-218SG.4|15e6","Asia/Barnaul|LMT +06 +07 +08|-5z -60 -70 -80|0123232323232323232323212323232321212121212121212121212121212121212|-21S5z pCnz 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 p90 LE0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0|","Asia/Beirut|EET EEST|-20 -30|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-21aq0 1on0 1410 1db0 19B0 1in0 1ip0 WL0 1lQp0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 q6N0 En0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1op0 11b0 dA10 17b0 1iN0 17b0 1iN0 17b0 1iN0 17b0 1vB0 SL0 1mp0 13z0 1iN0 17b0 1iN0 17b0 1jd0 12n0 1a10 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0|22e5","Asia/Bishkek|LMT +05 +06 +07|-4W.o -50 -60 -70|012323232323232323232321212121212121212121212121212|-1Pc4W.o eUnW.o 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2e00 1tX0 17b0 1ip0 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1cPu 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0|87e4","Asia/Brunei|LMT +0730 +08|-7D.E -7u -80|012|-1KITD.E gDc9.E|42e4","Asia/Kolkata|MMT IST +0630|-5l.a -5u -6u|012121|-2zOtl.a 1r2LP.a 1un0 HB0 7zX0|15e6","Asia/Chita|LMT +08 +09 +10|-7x.Q -80 -90 -a0|012323232323232323232321232323232323232323232323232323232323232312|-21Q7x.Q pAnx.Q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3re0|33e4","Asia/Choibalsan|LMT +07 +08 +10 +09|-7C -70 -80 -a0 -90|0123434343434343434343434343434343434343434343424242|-2APHC 2UkoC cKn0 1da0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 3Db0 h1f0 1cJ0 1cP0 1cJ0|38e3","Asia/Shanghai|CST CDT|-80 -90|01010101010101010101010101010|-23uw0 18n0 OjB0 Rz0 11d0 1wL0 A10 8HX0 1G10 Tz0 1ip0 1jX0 1cN0 11b0 1oN0 aL0 1tU30 Rb0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0|23e6","Asia/Colombo|MMT +0530 +06 +0630|-5j.w -5u -60 -6u|01231321|-2zOtj.w 1rFbN.w 1zzu 7Apu 23dz0 11zu n3cu|22e5","Asia/Dhaka|HMT +0630 +0530 +06 +07|-5R.k -6u -5u -60 -70|0121343|-18LFR.k 1unn.k HB0 m6n0 2kxbu 1i00|16e6","Asia/Damascus|LMT EET EEST|-2p.c -20 -30|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-21Jep.c Hep.c 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1xRB0 11X0 1oN0 10L0 1pB0 11b0 1oN0 10L0 1mp0 13X0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 Nb0 1AN0 Nb0 bcp0 19X0 1gp0 19X0 3ld0 1xX0 Vd0 1Bz0 Sp0 1vX0 10p0 1dz0 1cN0 1cL0 1db0 1db0 1g10 1an0 1ap0 1db0 1fd0 1db0 1cN0 1db0 1dd0 1db0 1cp0 1dz0 1c10 1dX0 1cN0 1db0 1dd0 1db0 1cN0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1db0 1cN0 1db0 1cN0 19z0 1fB0 1qL0 11B0 1on0 Wp0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0|26e5","Asia/Dili|LMT +08 +09|-8m.k -80 -90|01212|-2le8m.k 1dnXm.k 1nfA0 Xld0|19e4","Asia/Dubai|LMT +04|-3F.c -40|01|-21JfF.c|39e5","Asia/Dushanbe|LMT +05 +06 +07|-4z.c -50 -60 -70|012323232323232323232321|-1Pc4z.c eUnz.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2hB0|76e4","Asia/Famagusta|LMT EET EEST +03|-2f.M -20 -30 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212312121212121212121212121212121212121212121|-1Vc2f.M 2a3cf.M 1cL0 1qp0 Xz0 19B0 19X0 1fB0 1db0 1cp0 1cL0 1fB0 19X0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1o30 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 15U0 2Ks0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|","Asia/Gaza|EET EEST IST IDT|-20 -30 -20 -30|0101010101010101010101010101010123232323232323232323232323232320101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-1c2q0 5Rb0 10r0 1px0 10N0 1pz0 16p0 1jB0 16p0 1jx0 pBd0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 dW0 hfB0 Db0 1fB0 Rb0 bXd0 gM0 8Q00 IM0 1wM0 11z0 1C10 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 M10 C00 17c0 1io0 17c0 1io0 17c0 1o00 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 17c0 1io0 18N0 1bz0 19z0 1gp0 1610 1iL0 11z0 1o10 14o0 1lA1 SKX 1xd1 MKX 1AN0 1a00 1fA0 1cL0 1cN0 1nX0 1210 1nz0 1220 1qL0 WN0 1qL0 WN0 1qL0 11c0 1oo0 11c0 1rc0 Wo0 1rc0 Wo0 1rc0 11c0 1oo0 11c0 1oo0 11c0 1oo0 11c0 1rc0 Wo0 1rc0 11c0 1oo0 11c0 1oo0 11c0 1oo0 11c0 1oo0 11c0 1rc0 Wo0 1rc0 11c0 1oo0 11c0 1oo0 11c0 1oo0 11c0 1rc0|18e5","Asia/Hebron|EET EEST IST IDT|-20 -30 -20 -30|010101010101010101010101010101012323232323232323232323232323232010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-1c2q0 5Rb0 10r0 1px0 10N0 1pz0 16p0 1jB0 16p0 1jx0 pBd0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 dW0 hfB0 Db0 1fB0 Rb0 bXd0 gM0 8Q00 IM0 1wM0 11z0 1C10 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 M10 C00 17c0 1io0 17c0 1io0 17c0 1o00 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 17c0 1io0 18N0 1bz0 19z0 1gp0 1610 1iL0 12L0 1mN0 14o0 1lc0 Tb0 1xd1 MKX bB0 cn0 1cN0 1a00 1fA0 1cL0 1cN0 1nX0 1210 1nz0 1220 1qL0 WN0 1qL0 WN0 1qL0 11c0 1oo0 11c0 1rc0 Wo0 1rc0 Wo0 1rc0 11c0 1oo0 11c0 1oo0 11c0 1oo0 11c0 1rc0 Wo0 1rc0 11c0 1oo0 11c0 1oo0 11c0 1oo0 11c0 1oo0 11c0 1rc0 Wo0 1rc0 11c0 1oo0 11c0 1oo0 11c0 1oo0 11c0 1rc0|25e4","Asia/Ho_Chi_Minh|LMT PLMT +07 +08 +09|-76.E -76.u -70 -80 -90|0123423232|-2yC76.E bK00.a 1h7b6.u 5lz0 18o0 3Oq0 k5b0 aW00 BAM0|90e5","Asia/Hong_Kong|LMT HKT HKST HKWT JST|-7A.G -80 -90 -8u -90|0123412121212121212121212121212121212121212121212121212121212121212121|-2CFH0 1taO0 Hc0 xUu 9tBu 11z0 1tDu Rc0 1wo0 11A0 1cM0 11A0 1o00 11A0 1o00 11A0 1o00 14o0 1o00 11A0 1nX0 U10 1tz0 U10 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1wn0 Rd0 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 17d0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 s10 1Vz0 1cN0 1cL0 1cN0 1cL0 6fd0 14n0|73e5","Asia/Hovd|LMT +06 +07 +08|-66.A -60 -70 -80|012323232323232323232323232323232323232323232323232|-2APG6.A 2Uko6.A cKn0 1db0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 kEp0 1cJ0 1cP0 1cJ0|81e3","Asia/Irkutsk|IMT +07 +08 +09|-6V.5 -70 -80 -90|01232323232323232323232123232323232323232323232323232323232323232|-21zGV.5 pjXV.5 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|60e4","Europe/Istanbul|IMT EET EEST +03 +04|-1U.U -20 -30 -30 -40|0121212121212121212121212121212121212121212121234312121212121212121212121212121212121212121212121212121212121212123|-2ogNU.U dzzU.U 11b0 8tB0 1on0 1410 1db0 19B0 1in0 3Rd0 Un0 1oN0 11b0 zSN0 CL0 mp0 1Vz0 1gN0 8yn0 1yp0 ML0 1kp0 17b0 1ip0 17b0 1fB0 19X0 1ip0 19X0 1ip0 17b0 qdB0 38L0 1jd0 Tz0 l6O0 11A0 WN0 1qL0 TB0 1tX0 U10 1tz0 11B0 1in0 17d0 z90 cne0 pb0 2Cp0 1800 14o0 1dc0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1a00 1fA0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WO0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 Xc0 1qo0 WM0 1qM0 11A0 1o00 1200 1nA0 11A0 1tA0 U00 15w0|13e6","Asia/Jakarta|BMT +0720 +0730 +09 +08 WIB|-77.c -7k -7u -90 -80 -70|01232425|-1Q0Tk luM0 mPzO 8vWu 6kpu 4PXu xhcu|31e6","Asia/Jayapura|LMT +09 +0930 WIT|-9m.M -90 -9u -90|0123|-1uu9m.M sMMm.M L4nu|26e4","Asia/Jerusalem|JMT IST IDT IDDT|-2k.E -20 -30 -40|012121212121321212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-26Bek.E SyMk.E 5Rb0 10r0 1px0 10N0 1pz0 16p0 1jB0 16p0 1jx0 3LB0 Em0 or0 1cn0 1dB0 16n0 10O0 1ja0 1tC0 14o0 1cM0 1a00 11A0 1Na0 An0 1MP0 AJ0 1Kp0 LC0 1oo0 Wl0 EQN0 Db0 1fB0 Rb0 bXd0 gM0 8Q00 IM0 1wM0 11z0 1C10 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 1hB0 1dX0 1ep0 1aL0 1eN0 17X0 1nf0 11z0 1tB0 19W0 1e10 17b0 1ep0 1gL0 18N0 1fz0 1eN0 17b0 1gq0 1gn0 19d0 1dz0 1c10 17X0 1hB0 1gn0 19d0 1dz0 1c10 17X0 1kp0 1dz0 1c10 1aL0 1eN0 1oL0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0|81e4","Asia/Kabul|+04 +0430|-40 -4u|01|-10Qs0|46e5","Asia/Kamchatka|LMT +11 +12 +13|-ay.A -b0 -c0 -d0|012323232323232323232321232323232323232323232323232323232323212|-1SLKy.A ivXy.A 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|18e4","Asia/Karachi|LMT +0530 +0630 +05 PKT PKST|-4s.c -5u -6u -50 -50 -60|012134545454|-2xoss.c 1qOKW.c 7zX0 eup0 LqMu 1fy00 1cL0 dK10 11b0 1610 1jX0|24e6","Asia/Urumqi|LMT +06|-5O.k -60|01|-1GgtO.k|32e5","Asia/Kathmandu|LMT +0530 +0545|-5F.g -5u -5J|012|-21JhF.g 2EGMb.g|12e5","Asia/Khandyga|LMT +08 +09 +10 +11|-92.d -80 -90 -a0 -b0|0123232323232323232323212323232323232323232323232343434343434343432|-21Q92.d pAp2.d 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 qK0 yN0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 17V0 7zD0|66e2","Asia/Krasnoyarsk|LMT +06 +07 +08|-6b.q -60 -70 -80|01232323232323232323232123232323232323232323232323232323232323232|-21Hib.q prAb.q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|10e5","Asia/Kuala_Lumpur|SMT +07 +0720 +0730 +09 +08|-6T.p -70 -7k -7u -90 -80|0123435|-2Bg6T.p 17anT.p l5XE 17bO 8Fyu 1so1u|71e5","Asia/Kuching|LMT +0730 +08 +0820 +09|-7l.k -7u -80 -8k -90|0123232323232323242|-1KITl.k gDbP.k 6ynu AnE 1O0k AnE 1NAk AnE 1NAk AnE 1NAk AnE 1O0k AnE 1NAk AnE pAk 8Fz0|13e4","Asia/Macau|LMT CST +09 +10 CDT|-7y.a -80 -90 -a0 -90|012323214141414141414141414141414141414141414141414141414141414141414141|-2CFHy.a 1uqKy.a PX0 1kn0 15B0 11b0 4Qq0 1oM0 11c0 1ko0 1u00 11A0 1cM0 11c0 1o00 11A0 1o00 11A0 1oo0 1400 1o00 11A0 1o00 U00 1tA0 U00 1wo0 Rc0 1wru U10 1tz0 U10 1tz0 U10 1tz0 U10 1wn0 Rd0 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 17d0 1cK0 1cO0 1cK0 1cO0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 s10 1Vz0 1cN0 1cL0 1cN0 1cL0 6fd0 14n0|57e4","Asia/Magadan|LMT +10 +11 +12|-a3.c -a0 -b0 -c0|012323232323232323232321232323232323232323232323232323232323232312|-1Pca3.c eUo3.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3Cq0|95e3","Asia/Makassar|LMT MMT +08 +09 WITA|-7V.A -7V.A -80 -90 -80|01234|-21JjV.A vfc0 myLV.A 8ML0|15e5","Asia/Manila|PST PDT JST|-80 -90 -90|010201010|-1kJI0 AL0 cK10 65X0 mXB0 vX0 VK10 1db0|24e6","Asia/Nicosia|LMT EET EEST|-2d.s -20 -30|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1Vc2d.s 2a3cd.s 1cL0 1qp0 Xz0 19B0 19X0 1fB0 1db0 1cp0 1cL0 1fB0 19X0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1o30 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|32e4","Asia/Novokuznetsk|LMT +06 +07 +08|-5M.M -60 -70 -80|012323232323232323232321232323232323232323232323232323232323212|-1PctM.M eULM.M 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|55e4","Asia/Novosibirsk|LMT +06 +07 +08|-5v.E -60 -70 -80|0123232323232323232323212323212121212121212121212121212121212121212|-21Qnv.E pAFv.E 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 ml0 Os0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 4eN0|15e5","Asia/Omsk|LMT +05 +06 +07|-4R.u -50 -60 -70|01232323232323232323232123232323232323232323232323232323232323232|-224sR.u pMLR.u 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|12e5","Asia/Oral|LMT +03 +05 +06 +04|-3p.o -30 -50 -60 -40|01232323232323232424242424242424242424242424242|-1Pc3p.o eUop.o 23CK0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 1cM0 1cM0 IM0 1EM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0|27e4","Asia/Pontianak|LMT PMT +0730 +09 +08 WITA WIB|-7h.k -7h.k -7u -90 -80 -80 -70|012324256|-2ua7h.k XE00 munL.k 8Rau 6kpu 4PXu xhcu Wqnu|23e4","Asia/Pyongyang|LMT KST JST KST|-8n -8u -90 -90|012313|-2um8n 97XR 1lTzu 2Onc0 6BA0|29e5","Asia/Qostanay|LMT +04 +05 +06|-4e.s -40 -50 -60|012323232323232323232123232323232323232323232323|-1Pc4e.s eUoe.s 23CL0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0|","Asia/Qyzylorda|LMT +04 +05 +06|-4l.Q -40 -50 -60|01232323232323232323232323232323232323232323232|-1Pc4l.Q eUol.Q 23CL0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 3ao0 1EM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 zQl0|73e4","Asia/Rangoon|RMT +0630 +09|-6o.L -6u -90|0121|-21Jio.L SmnS.L 7j9u|48e5","Asia/Sakhalin|LMT +09 +11 +12 +10|-9u.M -90 -b0 -c0 -a0|01232323232323232323232423232323232424242424242424242424242424242|-2AGVu.M 1BoMu.M 1qFa0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 2pB0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0|58e4","Asia/Samarkand|LMT +04 +05 +06|-4r.R -40 -50 -60|01232323232323232323232|-1Pc4r.R eUor.R 23CL0 3Db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0|36e4","Asia/Seoul|LMT KST JST KST KDT KDT|-8r.Q -8u -90 -90 -a0 -9u|012343434343151515151515134343|-2um8r.Q 97XV.Q 1m1zu 6CM0 Fz0 1kN0 14n0 1kN0 14L0 1zd0 On0 69B0 2I0u OL0 1FB0 Rb0 1qN0 TX0 1tB0 TX0 1tB0 TX0 1tB0 TX0 2ap0 12FBu 11A0 1o00 11A0|23e6","Asia/Srednekolymsk|LMT +10 +11 +12|-ae.Q -a0 -b0 -c0|01232323232323232323232123232323232323232323232323232323232323232|-1Pcae.Q eUoe.Q 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|35e2","Asia/Taipei|CST JST CDT|-80 -90 -90|01020202020202020202020202020202020202020|-1iw80 joM0 1yo0 Tz0 1ip0 1jX0 1cN0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 10N0 1BX0 10p0 1pz0 10p0 1pz0 10p0 1db0 1dd0 1db0 1cN0 1db0 1cN0 1db0 1cN0 1db0 1BB0 ML0 1Bd0 ML0 uq10 1db0 1cN0 1db0 97B0 AL0|74e5","Asia/Tashkent|LMT +05 +06 +07|-4B.b -50 -60 -70|012323232323232323232321|-1Pc4B.b eUnB.b 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0|23e5","Asia/Tbilisi|TBMT +03 +04 +05|-2X.b -30 -40 -50|0123232323232323232323212121232323232323232323212|-1Pc2X.b 1jUnX.b WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 1cK0 1cL0 1cN0 1cL0 1cN0 2pz0 1cL0 1fB0 3Nz0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 An0 Os0 WM0|11e5","Asia/Tehran|LMT TMT +0330 +04 +05 +0430|-3p.I -3p.I -3u -40 -50 -4u|01234325252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-2btDp.I 1d3c0 1huLT.I TXu 1pz0 sN0 vAu 1cL0 1dB0 1en0 pNB0 UL0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 64p0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0|14e6","Asia/Thimphu|LMT +0530 +06|-5W.A -5u -60|012|-Su5W.A 1BGMs.A|79e3","Asia/Tokyo|JST JDT|-90 -a0|010101010|-QJJ0 Rc0 1lc0 14o0 1zc0 Oo0 1zc0 Oo0|38e6","Asia/Tomsk|LMT +06 +07 +08|-5D.P -60 -70 -80|0123232323232323232323212323232323232323232323212121212121212121212|-21NhD.P pxzD.P 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 co0 1bB0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3Qp0|10e5","Asia/Ulaanbaatar|LMT +07 +08 +09|-77.w -70 -80 -90|012323232323232323232323232323232323232323232323232|-2APH7.w 2Uko7.w cKn0 1db0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 kEp0 1cJ0 1cP0 1cJ0|12e5","Asia/Ust-Nera|LMT +08 +09 +12 +11 +10|-9w.S -80 -90 -c0 -b0 -a0|012343434343434343434345434343434343434343434343434343434343434345|-21Q9w.S pApw.S 23CL0 1d90 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 17V0 7zD0|65e2","Asia/Vladivostok|LMT +09 +10 +11|-8L.v -90 -a0 -b0|01232323232323232323232123232323232323232323232323232323232323232|-1SJIL.v itXL.v 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|60e4","Asia/Yakutsk|LMT +08 +09 +10|-8C.W -80 -90 -a0|01232323232323232323232123232323232323232323232323232323232323232|-21Q8C.W pAoC.W 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|28e4","Asia/Yekaterinburg|LMT PMT +04 +05 +06|-42.x -3J.5 -40 -50 -60|012343434343434343434343234343434343434343434343434343434343434343|-2ag42.x 7mQh.s qBvJ.5 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|14e5","Asia/Yerevan|LMT +03 +04 +05|-2W -30 -40 -50|0123232323232323232323212121212323232323232323232323232323232|-1Pc2W 1jUnW WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2pB0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 4RX0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0|13e5","Atlantic/Azores|HMT -02 -01 +00 WET|1S.w 20 10 0 0|01212121212121212121212121212121212121212121232123212321232121212121212121212121212121212121212121232323232323232323232323232323234323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2ldW0 aPX0 Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 3Co0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 qIl0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cL0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|25e4","Atlantic/Bermuda|LMT AST ADT|4j.i 40 30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1BnRE.G 1LTbE.G 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|65e3","Atlantic/Canary|LMT -01 WET WEST|11.A 10 0 -10|01232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UtaW.o XPAW.o 1lAK0 1a10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|54e4","Atlantic/Cape_Verde|LMT -02 -01|1y.4 20 10|01212|-2ldW0 1eEo0 7zX0 1djf0|50e4","Atlantic/Faroe|LMT WET WEST|r.4 0 -10|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2uSnw.U 2Wgow.U 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|49e3","Atlantic/Madeira|FMT -01 +00 +01 WET WEST|17.A 10 0 -10 0 -10|01212121212121212121212121212121212121212121232123212321232121212121212121212121212121212121212121454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-2ldX0 aPX0 Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 3Co0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 qIl0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|27e4","Atlantic/Reykjavik|LMT -01 +00 GMT|1s 10 0 0|012121212121212121212121212121212121212121212121212121212121212121213|-2uWmw mfaw 1Bd0 ML0 1LB0 Cn0 1LB0 3fX0 C10 HrX0 1cO0 LB0 1EL0 LA0 1C00 Oo0 1wo0 Rc0 1wo0 Rc0 1wo0 Rc0 1zc0 Oo0 1zc0 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0|12e4","Atlantic/South_Georgia|-02|20|0||30","Atlantic/Stanley|SMT -04 -03 -02|3P.o 40 30 20|012121212121212323212121212121212121212121212121212121212121212121212|-2kJw8.A 12bA8.A 19X0 1fB0 19X0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 Cn0 1Cc10 WL0 1qL0 U10 1tz0 2mN0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1tz0 U10 1tz0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1tz0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qN0 U10 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1wn0 U10 1tz0 U10 1tz0 U10|21e2","Australia/Sydney|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 14o0 1o00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 11A0 1o00 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|40e5","Australia/Adelaide|ACST ACDT|-9u -au|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lt xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 Oo0 1zc0 WM0 1qM0 Rc0 1zc0 U00 1tA0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|11e5","Australia/Brisbane|AEST AEDT|-a0 -b0|01010101010101010|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 H1A0 Oo0 1zc0 Oo0 1zc0 Oo0|20e5","Australia/Broken_Hill|ACST ACDT|-9u -au|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lt xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 14o0 1o00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|18e3","Australia/Currie|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-29E80 19X0 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|746","Australia/Darwin|ACST ACDT|-9u -au|010101010|-293lt xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0|12e4","Australia/Eucla|+0845 +0945|-8J -9J|0101010101010101010|-293kI xcX 10jd0 yL0 1cN0 1cL0 1gSp0 Oo0 l5A0 Oo0 iJA0 G00 zU00 IM0 1qM0 11A0 1o00 11A0|368","Australia/Hobart|AEST AEDT|-a0 -b0|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-29E80 19X0 10jd0 yL0 1cN0 1cL0 1fB0 19X0 VfB0 1cM0 1o00 Rc0 1wo0 Rc0 1wo0 U00 1wo0 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|21e4","Australia/Lord_Howe|AEST +1030 +1130 +11|-a0 -au -bu -b0|0121212121313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313|raC0 1zdu Rb0 1zd0 On0 1zd0 On0 1zd0 On0 1zd0 TXu 1qMu WLu 1tAu WLu 1tAu TXu 1tAu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu 11zu 1o0u 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 11Au 1nXu 1qMu 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 1qMu 11zu 1o0u WLu 1qMu 14nu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1fzu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu|347","Australia/Lindeman|AEST AEDT|-a0 -b0|010101010101010101010|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 H1A0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0|10","Australia/Melbourne|AEST AEDT|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1qM0 11A0 1tA0 U00 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 11A0 1o00 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|39e5","Australia/Perth|AWST AWDT|-80 -90|0101010101010101010|-293jX xcX 10jd0 yL0 1cN0 1cL0 1gSp0 Oo0 l5A0 Oo0 iJA0 G00 zU00 IM0 1qM0 11A0 1o00 11A0|18e5","CET|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|","Pacific/Easter|EMT -07 -06 -05|7h.s 70 60 50|012121212121212121212121212123232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323|-1uSgG.w 1s4IG.w WL0 1zd0 On0 1ip0 11z0 1o10 11z0 1qN0 WL0 1ld0 14n0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 2pA0 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1o10 11z0 1qN0 WL0 1fB0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 46n0 Ap0 1Nb0 Ap0 1Nb0 Ap0 1zb0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0|30e2","CST6CDT|CST CDT CWT CPT|60 50 50 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|","EET|EET EEST|-20 -30|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|hDB0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|","Europe/Dublin|DMT IST GMT BST IST|p.l -y.D 0 -10 -10|01232323232324242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242|-2ax9y.D Rc0 1fzy.D 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 g600 14o0 1wo0 17c0 1io0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1a00 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1tA0 IM0 90o0 U00 1tA0 U00 1tA0 U00 1tA0 U00 1tA0 WM0 1qM0 WM0 1qM0 WM0 1tA0 U00 1tA0 U00 1tA0 11z0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 14o0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5","EST|EST|50|0||","EST5EDT|EST EDT EWT EPT|50 40 40 40|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261t0 1nX0 11B0 1nX0 SgN0 8x40 iv0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|","Etc/GMT-0|GMT|0|0||","Etc/GMT-1|+01|-10|0||","Pacific/Port_Moresby|+10|-a0|0||25e4","Etc/GMT-11|+11|-b0|0||","Pacific/Tarawa|+12|-c0|0||29e3","Etc/GMT-13|+13|-d0|0||","Etc/GMT-14|+14|-e0|0||","Etc/GMT-2|+02|-20|0||","Etc/GMT-3|+03|-30|0||","Etc/GMT-4|+04|-40|0||","Etc/GMT-5|+05|-50|0||","Etc/GMT-6|+06|-60|0||","Indian/Christmas|+07|-70|0||21e2","Etc/GMT-8|+08|-80|0||","Pacific/Palau|+09|-90|0||21e3","Etc/GMT+1|-01|10|0||","Etc/GMT+10|-10|a0|0||","Etc/GMT+11|-11|b0|0||","Etc/GMT+12|-12|c0|0||","Etc/GMT+3|-03|30|0||","Etc/GMT+4|-04|40|0||","Etc/GMT+5|-05|50|0||","Etc/GMT+6|-06|60|0||","Etc/GMT+7|-07|70|0||","Etc/GMT+8|-08|80|0||","Etc/GMT+9|-09|90|0||","Etc/UTC|UTC|0|0||","Europe/Amsterdam|AMT NST +0120 +0020 CEST CET|-j.w -1j.w -1k -k -20 -10|010101010101010101010101010101010101010101012323234545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545|-2aFcj.w 11b0 1iP0 11A0 1io0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1co0 1io0 1yo0 Pc0 1a00 1fA0 1Bc0 Mo0 1tc0 Uo0 1tA0 U00 1uo0 W00 1s00 VA0 1so0 Vc0 1sM0 UM0 1wo0 Rc0 1u00 Wo0 1rA0 W00 1s00 VA0 1sM0 UM0 1w00 fV0 BCX.w 1tA0 U00 1u00 Wo0 1sm0 601k WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|16e5","Europe/Andorra|WET CET CEST|0 -10 -20|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-UBA0 1xIN0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|79e3","Europe/Astrakhan|LMT +03 +04 +05|-3c.c -30 -40 -50|012323232323232323212121212121212121212121212121212121212121212|-1Pcrc.c eUMc.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0|10e5","Europe/Athens|AMT EET EEST CEST CET|-1y.Q -20 -30 -20 -10|012123434121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a61x.Q CNbx.Q mn0 kU10 9b0 3Es0 Xa0 1fb0 1dd0 k3X0 Nz0 SCp0 1vc0 SO0 1cM0 1a00 1ao0 1fc0 1a10 1fG0 1cg0 1dX0 1bX0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|35e5","Europe/London|GMT BST BDST|0 -10 -20|0101010101010101010101010101010101010101010101010121212121210101210101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2axa0 Rc0 1fA0 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 2Rz0 Dc0 1zc0 Oo0 1zc0 Rc0 1wo0 17c0 1iM0 FA0 xB0 1fA0 1a00 14o0 bb0 LA0 xB0 Rc0 1wo0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1a00 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1tA0 IM0 90o0 U00 1tA0 U00 1tA0 U00 1tA0 U00 1tA0 WM0 1qM0 WM0 1qM0 WM0 1tA0 U00 1tA0 U00 1tA0 11z0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 14o0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|10e6","Europe/Belgrade|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-19RC0 3IP0 WM0 1fA0 1cM0 1cM0 1rc0 Qo0 1vmo0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5","Europe/Berlin|CET CEST CEMT|-10 -20 -30|01010101010101210101210101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 kL0 Nc0 m10 WM0 1ao0 1cp0 dX0 jz0 Dd0 1io0 17c0 1fA0 1a00 1ehA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|41e5","Europe/Prague|CET CEST GMT|-10 -20 0|01010101010101010201010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 1cM0 1qM0 11c0 mp0 xA0 mn0 17c0 1io0 17c0 1fc0 1ao0 1bNc0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|13e5","Europe/Brussels|WET CET CEST WEST|0 -10 -20 -10|0121212103030303030303030303030303030303030303030303212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ehc0 3zX0 11c0 1iO0 11A0 1o00 11A0 my0 Ic0 1qM0 Rc0 1EM0 UM0 1u00 10o0 1io0 1io0 17c0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a30 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 y00 5Wn0 WM0 1fA0 1cM0 16M0 1iM0 16M0 1C00 Uo0 1eeo0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|21e5","Europe/Bucharest|BMT EET EEST|-1I.o -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1xApI.o 20LI.o RA0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Axc0 On0 1fA0 1a10 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cK0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cL0 1cN0 1cL0 1fB0 1nX0 11E0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|19e5","Europe/Budapest|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1ip0 17b0 1op0 1tb0 Q2m0 3Ne0 WM0 1fA0 1cM0 1cM0 1oJ0 1dc0 1030 1fA0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1iM0 1fA0 8Ha0 Rb0 1wN0 Rb0 1BB0 Lz0 1C20 LB0 SNX0 1a10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|17e5","Europe/Zurich|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-19Lc0 11A0 1o00 11A0 1xG10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|38e4","Europe/Chisinau|CMT BMT EET EEST CEST CET MSK MSD|-1T -1I.o -20 -30 -20 -10 -30 -40|012323232323232323234545467676767676767676767323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-26jdT wGMa.A 20LI.o RA0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 27A0 2en0 39g0 WM0 1fA0 1cM0 V90 1t7z0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 gL0 WO0 1cM0 1cM0 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1nX0 11D0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|67e4","Europe/Copenhagen|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2azC0 Tz0 VuO0 60q0 WM0 1fA0 1cM0 1cM0 1cM0 S00 1HA0 Nc0 1C00 Dc0 1Nc0 Ao0 1h5A0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5","Europe/Gibraltar|GMT BST BDST CET CEST|0 -10 -20 -10 -20|010101010101010101010101010101010101010101010101012121212121010121010101010101010101034343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-2axa0 Rc0 1fA0 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 2Rz0 Dc0 1zc0 Oo0 1zc0 Rc0 1wo0 17c0 1iM0 FA0 xB0 1fA0 1a00 14o0 bb0 LA0 xB0 Rc0 1wo0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 10Jz0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|30e3","Europe/Helsinki|HMT EET EEST|-1D.N -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1WuND.N OULD.N 1dA0 1xGq0 1cM0 1cM0 1cM0 1cN0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5","Europe/Kaliningrad|CET CEST EET EEST MSK MSD +03|-10 -20 -20 -30 -30 -40 -30|01010101010101232454545454545454543232323232323232323232323232323232323232323262|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 390 7A0 1en0 12N0 1pbb0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|44e4","Europe/Kiev|KMT EET MSK CEST CET MSD EEST|-22.4 -20 -30 -20 -10 -40 -30|0123434252525252525252525256161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161|-1Pc22.4 eUo2.4 rnz0 2Hg0 WM0 1fA0 da0 1v4m0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 Db0 3220 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|34e5","Europe/Kirov|LMT +03 +04 +05|-3i.M -30 -40 -50|01232323232323232321212121212121212121212121212121212121212121|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|48e4","Europe/Lisbon|LMT WET WEST WEMT CET CEST|A.J 0 -10 -20 -10 -20|012121212121212121212121212121212121212121212321232123212321212121212121212121212121212121212121214121212121212121212121212121212124545454212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2le00 aPX0 Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 3Co0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 pvy0 1cM0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|27e5","Europe/Luxembourg|LMT CET CEST WET WEST WEST WET|-o.A -10 -20 0 -10 -20 -10|0121212134343434343434343434343434343434343434343434565651212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2DG0o.A t6mo.A TB0 1nX0 Up0 1o20 11A0 rW0 CM0 1qP0 R90 1EO0 UK0 1u20 10m0 1ip0 1in0 17e0 19W0 1fB0 1db0 1cp0 1in0 17d0 1fz0 1a10 1in0 1a10 1in0 17f0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 vA0 60L0 WM0 1fA0 1cM0 17c0 1io0 16M0 1C00 Uo0 1eeo0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|54e4","Europe/Madrid|WET WEST WEMT CET CEST|0 -10 -20 -10 -20|010101010101010101210343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-25Td0 19B0 1cL0 1dd0 b1z0 18p0 3HX0 17d0 1fz0 1a10 1io0 1a00 1in0 17d0 iIn0 Hd0 1cL0 bb0 1200 2s20 14n0 5aL0 Mp0 1vz0 17d0 1in0 17d0 1in0 17d0 1in0 17d0 6hX0 11B0 XHX0 1a10 1fz0 1a10 19X0 1cN0 1fz0 1a10 1fC0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|62e5","Europe/Malta|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2arB0 Lz0 1cN0 1db0 1410 1on0 Wp0 1qL0 17d0 1cL0 M3B0 5M20 WM0 1fA0 1co0 17c0 1iM0 16m0 1de0 1lc0 14m0 1lc0 WO0 1qM0 GTW0 On0 1C10 LA0 1C00 LA0 1EM0 LA0 1C00 LA0 1zc0 Oo0 1C00 Oo0 1co0 1cM0 1lA0 Xc0 1qq0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1iN0 19z0 1fB0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|42e4","Europe/Minsk|MMT EET MSK CEST CET MSD EEST +03|-1O -20 -30 -20 -10 -40 -30 -30|01234343252525252525252525261616161616161616161616161616161616161617|-1Pc1O eUnO qNX0 3gQ0 WM0 1fA0 1cM0 Al0 1tsn0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 3Fc0 1cN0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0|19e5","Europe/Monaco|PMT WET WEST WEMT CET CEST|-9.l 0 -10 -20 -10 -20|01212121212121212121212121212121212121212121212121232323232345454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-2nco9.l cNb9.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 1u00 10o0 1io0 1wo0 Rc0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Df0 2RV0 11z0 11B0 1ze0 WM0 1fA0 1cM0 1fa0 1aq0 16M0 1ekn0 1cL0 1fC0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|38e3","Europe/Moscow|MMT MMT MST MDST MSD MSK +05 EET EEST MSK|-2u.h -2v.j -3v.j -4v.j -40 -30 -50 -20 -30 -40|012132345464575454545454545454545458754545454545454545454545454545454545454595|-2ag2u.h 2pyW.W 1bA0 11X0 GN0 1Hb0 c4v.j ik0 3DA0 dz0 15A0 c10 2q10 iM10 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0|16e6","Europe/Paris|PMT WET WEST CEST CET WEMT|-9.l 0 -10 -20 -10 -20|0121212121212121212121212121212121212121212121212123434352543434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434|-2nco8.l cNb8.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 1u00 10o0 1io0 1wo0 Rc0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Df0 Ik0 5M30 WM0 1fA0 1cM0 Vx0 hB0 1aq0 16M0 1ekn0 1cL0 1fC0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|11e6","Europe/Riga|RMT LST EET MSK CEST CET MSD EEST|-1A.y -2A.y -20 -30 -20 -10 -40 -30|010102345454536363636363636363727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272|-25TzA.y 11A0 1iM0 ko0 gWm0 yDXA.y 2bX0 3fE0 WM0 1fA0 1cM0 1cM0 4m0 1sLy0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 1o00 11A0 1o00 11A0 1qM0 3oo0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|64e4","Europe/Rome|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2arB0 Lz0 1cN0 1db0 1410 1on0 Wp0 1qL0 17d0 1cL0 M3B0 5M20 WM0 1fA0 1cM0 16M0 1iM0 16m0 1de0 1lc0 14m0 1lc0 WO0 1qM0 GTW0 On0 1C10 LA0 1C00 LA0 1EM0 LA0 1C00 LA0 1zc0 Oo0 1C00 Oo0 1C00 LA0 1zc0 Oo0 1C00 LA0 1C00 LA0 1zc0 Oo0 1C00 Oo0 1zc0 Oo0 1fC0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|39e5","Europe/Samara|LMT +03 +04 +05|-3k.k -30 -40 -50|0123232323232323232121232323232323232323232323232323232323212|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 2y10 14m0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 2sp0 WM0|12e5","Europe/Saratov|LMT +03 +04 +05|-34.i -30 -40 -50|012323232323232321212121212121212121212121212121212121212121212|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1cM0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 5810|","Europe/Simferopol|SMT EET MSK CEST CET MSD EEST MSK|-2g -20 -30 -20 -10 -40 -30 -40|012343432525252525252525252161616525252616161616161616161616161616161616172|-1Pc2g eUog rEn0 2qs0 WM0 1fA0 1cM0 3V0 1u0L0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Q00 4eL0 1cL0 1cN0 1cL0 1cN0 dX0 WL0 1cN0 1cL0 1fB0 1o30 11B0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11z0 1nW0|33e4","Europe/Sofia|EET CET CEST EEST|-20 -10 -20 -30|01212103030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030|-168L0 WM0 1fA0 1cM0 1cM0 1cN0 1mKH0 1dd0 1fb0 1ap0 1fb0 1a20 1fy0 1a30 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1nX0 11E0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|12e5","Europe/Stockholm|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2azC0 TB0 2yDe0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|15e5","Europe/Tallinn|TMT CET CEST EET MSK MSD EEST|-1D -10 -20 -20 -30 -40 -30|012103421212454545454545454546363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363|-26oND teD 11A0 1Ta0 4rXl KSLD 2FX0 2Jg0 WM0 1fA0 1cM0 18J0 1sTX0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o10 11A0 1qM0 5QM0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|41e4","Europe/Tirane|LMT CET CEST|-1j.k -10 -20|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2glBj.k 14pcj.k 5LC0 WM0 4M0 1fCK0 10n0 1op0 11z0 1pd0 11z0 1qN0 WL0 1qp0 Xb0 1qp0 Xb0 1qp0 11z0 1lB0 11z0 1qN0 11z0 1iN0 16n0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|42e4","Europe/Ulyanovsk|LMT +03 +04 +05 +02|-3d.A -30 -40 -50 -20|01232323232323232321214121212121212121212121212121212121212121212|-22WM0 qH90 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1fA0 2pB0 IM0 rX0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 3rd0|13e5","Europe/Uzhgorod|CET CEST MSK MSD EET EEST|-10 -20 -30 -40 -20 -30|010101023232323232323232320454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-1cqL0 6i00 WM0 1fA0 1cM0 1ml0 1Cp0 1r3W0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Q00 1Nf0 2pw0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|11e4","Europe/Vienna|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 3KM0 14o0 LA00 6i00 WM0 1fA0 1cM0 1cM0 1cM0 400 2qM0 1ao0 1co0 1cM0 1io0 17c0 1gHa0 19X0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|18e5","Europe/Vilnius|WMT KMT CET EET MSK CEST MSD EEST|-1o -1z.A -10 -20 -30 -20 -40 -30|012324525254646464646464646473737373737373737352537373737373737373737373737373737373737373737373737373737373737373737373|-293do 6ILM.o 1Ooz.A zz0 Mfd0 29W0 3is0 WM0 1fA0 1cM0 LV0 1tgL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11B0 1o00 11A0 1qM0 8io0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|54e4","Europe/Volgograd|LMT +03 +04 +05|-2V.E -30 -40 -50|012323232323232321212121212121212121212121212121212121212121212|-21IqV.E psLV.E 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 2pB0 1cM0 1cM0 1cM0 1fA0 1cM0 3Co0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 8Hz0 9Jd0|10e5","Europe/Warsaw|WMT CET CEST EET EEST|-1o -10 -20 -20 -30|012121234312121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ctdo 1LXo 11d0 1iO0 11A0 1o00 11A0 1on0 11A0 6zy0 HWP0 5IM0 WM0 1fA0 1cM0 1dz0 1mL0 1en0 15B0 1aq0 1nA0 11A0 1io0 17c0 1fA0 1a00 iDX0 LA0 1cM0 1cM0 1C00 Oo0 1cM0 1cM0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1C00 LA0 uso0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|17e5","Europe/Zaporozhye|+0220 EET MSK CEST CET MSD EEST|-2k -20 -30 -20 -10 -40 -30|01234342525252525252525252526161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161|-1Pc2k eUok rdb0 2RE0 WM0 1fA0 8m0 1v9a0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cK0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|77e4","HST|HST|a0|0||","Indian/Chagos|LMT +05 +06|-4N.E -50 -60|012|-2xosN.E 3AGLN.E|30e2","Indian/Cocos|+0630|-6u|0||596","Indian/Kerguelen|-00 +05|0 -50|01|-MG00|130","Indian/Mahe|LMT +04|-3F.M -40|01|-2yO3F.M|79e3","Indian/Maldives|MMT +05|-4S -50|01|-olgS|35e4","Indian/Mauritius|LMT +04 +05|-3O -40 -50|012121|-2xorO 34unO 14L0 12kr0 11z0|15e4","Indian/Reunion|LMT +04|-3F.Q -40|01|-2mDDF.Q|84e4","Pacific/Kwajalein|+11 +10 +09 -12 +12|-b0 -a0 -90 c0 -c0|012034|-1kln0 akp0 6Up0 12ry0 Wan0|14e3","MET|MET MEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|","MST|MST|70|0||","MST7MDT|MST MDT MWT MPT|70 60 60 60|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|","Pacific/Chatham|+1215 +1245 +1345|-cf -cJ -dJ|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-WqAf 1adef IM0 1C00 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1qM0 14o0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1io0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00|600","Pacific/Apia|LMT -1130 -11 -10 +14 +13|bq.U bu b0 a0 -e0 -d0|01232345454545454545454545454545454545454545454545454545454|-2nDMx.4 1yW03.4 2rRbu 1ff0 1a00 CI0 AQ0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00|37e3","Pacific/Bougainville|+10 +09 +11|-a0 -90 -b0|0102|-16Wy0 7CN0 2MQp0|18e4","Pacific/Chuuk|+10 +09|-a0 -90|01010|-2ewy0 axB0 RVX0 axd0|49e3","Pacific/Efate|LMT +11 +12|-bd.g -b0 -c0|0121212121212121212121|-2l9nd.g 2Szcd.g 1cL0 1oN0 10L0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 Lz0 1Nd0 An0|66e3","Pacific/Enderbury|-12 -11 +13|c0 b0 -d0|012|nIc0 B7X0|1","Pacific/Fakaofo|-11 +13|b0 -d0|01|1Gfn0|483","Pacific/Fiji|LMT +12 +13|-bT.I -c0 -d0|0121212121212121212121212121212121212121212121212121212121212121|-2bUzT.I 3m8NT.I LA0 1EM0 IM0 nJc0 LA0 1o00 Rc0 1wo0 Ao0 1Nc0 Ao0 1Q00 xz0 1SN0 uM0 1SM0 uM0 1VA0 s00 1VA0 s00 1VA0 s00 20o0 pc0 20o0 s00 20o0 pc0 20o0 pc0 20o0 pc0 20o0 pc0 20o0 s00 1VA0 s00 20o0 pc0 20o0 pc0 20o0 pc0 20o0 pc0 20o0 s00 20o0 pc0 20o0 pc0 20o0 pc0 20o0 pc0 20o0 s00 1VA0 s00|88e4","Pacific/Galapagos|LMT -05 -06|5W.o 50 60|01212|-1yVS1.A 2dTz1.A gNd0 rz0|25e3","Pacific/Gambier|LMT -09|8X.M 90|01|-2jof0.c|125","Pacific/Guadalcanal|LMT +11|-aD.M -b0|01|-2joyD.M|11e4","Pacific/Guam|GST +09 GDT ChST|-a0 -90 -b0 -a0|01020202020202020203|-18jK0 6pB0 AhB0 3QL0 g2p0 3p91 WOX rX0 1zd0 Rb0 1wp0 Rb0 5xd0 rX0 5sN0 zb1 1C0X On0 ULb0|17e4","Pacific/Honolulu|HST HDT HWT HPT HST|au 9u 9u 9u a0|0102304|-1thLu 8x0 lef0 8wWu iAu 46p0|37e4","Pacific/Kiritimati|-1040 -10 +14|aE a0 -e0|012|nIaE B7Xk|51e2","Pacific/Kosrae|+11 +09 +10 +12|-b0 -90 -a0 -c0|01021030|-2ewz0 axC0 HBy0 akp0 axd0 WOK0 1bdz0|66e2","Pacific/Majuro|+11 +09 +10 +12|-b0 -90 -a0 -c0|0102103|-2ewz0 axC0 HBy0 akp0 6RB0 12um0|28e3","Pacific/Marquesas|LMT -0930|9i 9u|01|-2joeG|86e2","Pacific/Pago_Pago|LMT SST|bm.M b0|01|-2nDMB.c|37e2","Pacific/Nauru|LMT +1130 +09 +12|-b7.E -bu -90 -c0|01213|-1Xdn7.E QCnB.E 7mqu 1lnbu|10e3","Pacific/Niue|-1120 -1130 -11|bk bu b0|012|-KfME 17y0a|12e2","Pacific/Norfolk|+1112 +1130 +1230 +11 +12|-bc -bu -cu -b0 -c0|012134343434343434343434343434343434343434|-Kgbc W01G Oo0 1COo0 9Jcu 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0|25e4","Pacific/Noumea|LMT +11 +12|-b5.M -b0 -c0|01212121|-2l9n5.M 2EqM5.M xX0 1PB0 yn0 HeP0 Ao0|98e3","Pacific/Pitcairn|-0830 -08|8u 80|01|18Vku|56","Pacific/Pohnpei|+11 +09 +10|-b0 -90 -a0|010210|-2ewz0 axC0 HBy0 akp0 axd0|34e3","Pacific/Rarotonga|-1030 -0930 -10|au 9u a0|012121212121212121212121212|lyWu IL0 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu Onu|13e3","Pacific/Tahiti|LMT -10|9W.g a0|01|-2joe1.I|18e4","Pacific/Tongatapu|+1220 +13 +14|-ck -d0 -e0|0121212121|-1aB0k 2n5dk 15A0 1wo0 xz0 1Q10 xz0 zWN0 s00|75e3","PST8PDT|PST PDT PWT PPT|80 70 70 70|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261q0 1nX0 11B0 1nX0 SgN0 8x10 iy0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0|","WET|WET WEST|0 -10|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|hDB0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00|"];const links=["Africa/Abidjan|Africa/Bamako","Africa/Abidjan|Africa/Banjul","Africa/Abidjan|Africa/Conakry","Africa/Abidjan|Africa/Dakar","Africa/Abidjan|Africa/Freetown","Africa/Abidjan|Africa/Lome","Africa/Abidjan|Africa/Nouakchott","Africa/Abidjan|Africa/Ouagadougou","Africa/Abidjan|Africa/Timbuktu","Africa/Abidjan|Atlantic/St_Helena","Africa/Cairo|Egypt","Africa/Johannesburg|Africa/Maseru","Africa/Johannesburg|Africa/Mbabane","Africa/Lagos|Africa/Bangui","Africa/Lagos|Africa/Brazzaville","Africa/Lagos|Africa/Douala","Africa/Lagos|Africa/Kinshasa","Africa/Lagos|Africa/Libreville","Africa/Lagos|Africa/Luanda","Africa/Lagos|Africa/Malabo","Africa/Lagos|Africa/Niamey","Africa/Lagos|Africa/Porto-Novo","Africa/Maputo|Africa/Blantyre","Africa/Maputo|Africa/Bujumbura","Africa/Maputo|Africa/Gaborone","Africa/Maputo|Africa/Harare","Africa/Maputo|Africa/Kigali","Africa/Maputo|Africa/Lubumbashi","Africa/Maputo|Africa/Lusaka","Africa/Nairobi|Africa/Addis_Ababa","Africa/Nairobi|Africa/Asmara","Africa/Nairobi|Africa/Asmera","Africa/Nairobi|Africa/Dar_es_Salaam","Africa/Nairobi|Africa/Djibouti","Africa/Nairobi|Africa/Kampala","Africa/Nairobi|Africa/Mogadishu","Africa/Nairobi|Indian/Antananarivo","Africa/Nairobi|Indian/Comoro","Africa/Nairobi|Indian/Mayotte","Africa/Tripoli|Libya","America/Adak|America/Atka","America/Adak|US/Aleutian","America/Anchorage|US/Alaska","America/Argentina/Buenos_Aires|America/Buenos_Aires","America/Argentina/Catamarca|America/Argentina/ComodRivadavia","America/Argentina/Catamarca|America/Catamarca","America/Argentina/Cordoba|America/Cordoba","America/Argentina/Cordoba|America/Rosario","America/Argentina/Jujuy|America/Jujuy","America/Argentina/Mendoza|America/Mendoza","America/Atikokan|America/Coral_Harbour","America/Chicago|US/Central","America/Curacao|America/Aruba","America/Curacao|America/Kralendijk","America/Curacao|America/Lower_Princes","America/Denver|America/Shiprock","America/Denver|Navajo","America/Denver|US/Mountain","America/Detroit|US/Michigan","America/Edmonton|Canada/Mountain","America/Fort_Wayne|America/Indiana/Indianapolis","America/Fort_Wayne|America/Indianapolis","America/Fort_Wayne|US/East-Indiana","America/Godthab|America/Nuuk","America/Halifax|Canada/Atlantic","America/Havana|Cuba","America/Indiana/Knox|America/Knox_IN","America/Indiana/Knox|US/Indiana-Starke","America/Jamaica|Jamaica","America/Kentucky/Louisville|America/Louisville","America/Los_Angeles|US/Pacific","America/Los_Angeles|US/Pacific-New","America/Manaus|Brazil/West","America/Mazatlan|Mexico/BajaSur","America/Mexico_City|Mexico/General","America/New_York|US/Eastern","America/Noronha|Brazil/DeNoronha","America/Panama|America/Cayman","America/Phoenix|US/Arizona","America/Port_of_Spain|America/Anguilla","America/Port_of_Spain|America/Antigua","America/Port_of_Spain|America/Dominica","America/Port_of_Spain|America/Grenada","America/Port_of_Spain|America/Guadeloupe","America/Port_of_Spain|America/Marigot","America/Port_of_Spain|America/Montserrat","America/Port_of_Spain|America/St_Barthelemy","America/Port_of_Spain|America/St_Kitts","America/Port_of_Spain|America/St_Lucia","America/Port_of_Spain|America/St_Thomas","America/Port_of_Spain|America/St_Vincent","America/Port_of_Spain|America/Tortola","America/Port_of_Spain|America/Virgin","America/Regina|Canada/Saskatchewan","America/Rio_Branco|America/Porto_Acre","America/Rio_Branco|Brazil/Acre","America/Santiago|Chile/Continental","America/Sao_Paulo|Brazil/East","America/St_Johns|Canada/Newfoundland","America/Tijuana|America/Ensenada","America/Tijuana|America/Santa_Isabel","America/Tijuana|Mexico/BajaNorte","America/Toronto|America/Montreal","America/Toronto|Canada/Eastern","America/Vancouver|Canada/Pacific","America/Whitehorse|Canada/Yukon","America/Winnipeg|Canada/Central","Asia/Ashgabat|Asia/Ashkhabad","Asia/Bangkok|Asia/Phnom_Penh","Asia/Bangkok|Asia/Vientiane","Asia/Dhaka|Asia/Dacca","Asia/Dubai|Asia/Muscat","Asia/Ho_Chi_Minh|Asia/Saigon","Asia/Hong_Kong|Hongkong","Asia/Jerusalem|Asia/Tel_Aviv","Asia/Jerusalem|Israel","Asia/Kathmandu|Asia/Katmandu","Asia/Kolkata|Asia/Calcutta","Asia/Kuala_Lumpur|Asia/Singapore","Asia/Kuala_Lumpur|Singapore","Asia/Macau|Asia/Macao","Asia/Makassar|Asia/Ujung_Pandang","Asia/Nicosia|Europe/Nicosia","Asia/Qatar|Asia/Bahrain","Asia/Rangoon|Asia/Yangon","Asia/Riyadh|Asia/Aden","Asia/Riyadh|Asia/Kuwait","Asia/Seoul|ROK","Asia/Shanghai|Asia/Chongqing","Asia/Shanghai|Asia/Chungking","Asia/Shanghai|Asia/Harbin","Asia/Shanghai|PRC","Asia/Taipei|ROC","Asia/Tehran|Iran","Asia/Thimphu|Asia/Thimbu","Asia/Tokyo|Japan","Asia/Ulaanbaatar|Asia/Ulan_Bator","Asia/Urumqi|Asia/Kashgar","Atlantic/Faroe|Atlantic/Faeroe","Atlantic/Reykjavik|Iceland","Atlantic/South_Georgia|Etc/GMT+2","Australia/Adelaide|Australia/South","Australia/Brisbane|Australia/Queensland","Australia/Broken_Hill|Australia/Yancowinna","Australia/Darwin|Australia/North","Australia/Hobart|Australia/Tasmania","Australia/Lord_Howe|Australia/LHI","Australia/Melbourne|Australia/Victoria","Australia/Perth|Australia/West","Australia/Sydney|Australia/ACT","Australia/Sydney|Australia/Canberra","Australia/Sydney|Australia/NSW","Etc/GMT-0|Etc/GMT","Etc/GMT-0|Etc/GMT+0","Etc/GMT-0|Etc/GMT0","Etc/GMT-0|Etc/Greenwich","Etc/GMT-0|GMT","Etc/GMT-0|GMT+0","Etc/GMT-0|GMT-0","Etc/GMT-0|GMT0","Etc/GMT-0|Greenwich","Etc/UTC|Etc/UCT","Etc/UTC|Etc/Universal","Etc/UTC|Etc/Zulu","Etc/UTC|UCT","Etc/UTC|UTC","Etc/UTC|Universal","Etc/UTC|Zulu","Europe/Belgrade|Europe/Ljubljana","Europe/Belgrade|Europe/Podgorica","Europe/Belgrade|Europe/Sarajevo","Europe/Belgrade|Europe/Skopje","Europe/Belgrade|Europe/Zagreb","Europe/Chisinau|Europe/Tiraspol","Europe/Dublin|Eire","Europe/Helsinki|Europe/Mariehamn","Europe/Istanbul|Asia/Istanbul","Europe/Istanbul|Turkey","Europe/Lisbon|Portugal","Europe/London|Europe/Belfast","Europe/London|Europe/Guernsey","Europe/London|Europe/Isle_of_Man","Europe/London|Europe/Jersey","Europe/London|GB","Europe/London|GB-Eire","Europe/Moscow|W-SU","Europe/Oslo|Arctic/Longyearbyen","Europe/Oslo|Atlantic/Jan_Mayen","Europe/Prague|Europe/Bratislava","Europe/Rome|Europe/San_Marino","Europe/Rome|Europe/Vatican","Europe/Warsaw|Poland","Europe/Zurich|Europe/Busingen","Europe/Zurich|Europe/Vaduz","Indian/Christmas|Etc/GMT-7","Pacific/Auckland|Antarctica/McMurdo","Pacific/Auckland|Antarctica/South_Pole","Pacific/Auckland|NZ","Pacific/Chatham|NZ-CHAT","Pacific/Chuuk|Pacific/Truk","Pacific/Chuuk|Pacific/Yap","Pacific/Easter|Chile/EasterIsland","Pacific/Guam|Pacific/Saipan","Pacific/Honolulu|Pacific/Johnston","Pacific/Honolulu|US/Hawaii","Pacific/Kwajalein|Kwajalein","Pacific/Pago_Pago|Pacific/Midway","Pacific/Pago_Pago|Pacific/Samoa","Pacific/Pago_Pago|US/Samoa","Pacific/Palau|Etc/GMT-9","Pacific/Pohnpei|Pacific/Ponape","Pacific/Port_Moresby|Etc/GMT-10","Pacific/Tarawa|Etc/GMT-12","Pacific/Tarawa|Pacific/Funafuti","Pacific/Tarawa|Pacific/Wake","Pacific/Tarawa|Pacific/Wallis"];const countries=["AD|Europe/Andorra","AE|Asia/Dubai","AF|Asia/Kabul","AG|America/Port_of_Spain America/Antigua","AI|America/Port_of_Spain America/Anguilla","AL|Europe/Tirane","AM|Asia/Yerevan","AO|Africa/Lagos Africa/Luanda","AQ|Antarctica/Casey Antarctica/Davis Antarctica/DumontDUrville Antarctica/Mawson Antarctica/Palmer Antarctica/Rothera Antarctica/Syowa Antarctica/Troll Antarctica/Vostok Pacific/Auckland Antarctica/McMurdo","AR|America/Argentina/Buenos_Aires America/Argentina/Cordoba America/Argentina/Salta America/Argentina/Jujuy America/Argentina/Tucuman America/Argentina/Catamarca America/Argentina/La_Rioja America/Argentina/San_Juan America/Argentina/Mendoza America/Argentina/San_Luis America/Argentina/Rio_Gallegos America/Argentina/Ushuaia","AS|Pacific/Pago_Pago","AT|Europe/Vienna","AU|Australia/Lord_Howe Antarctica/Macquarie Australia/Hobart Australia/Currie Australia/Melbourne Australia/Sydney Australia/Broken_Hill Australia/Brisbane Australia/Lindeman Australia/Adelaide Australia/Darwin Australia/Perth Australia/Eucla","AW|America/Curacao America/Aruba","AX|Europe/Helsinki Europe/Mariehamn","AZ|Asia/Baku","BA|Europe/Belgrade Europe/Sarajevo","BB|America/Barbados","BD|Asia/Dhaka","BE|Europe/Brussels","BF|Africa/Abidjan Africa/Ouagadougou","BG|Europe/Sofia","BH|Asia/Qatar Asia/Bahrain","BI|Africa/Maputo Africa/Bujumbura","BJ|Africa/Lagos Africa/Porto-Novo","BL|America/Port_of_Spain America/St_Barthelemy","BM|Atlantic/Bermuda","BN|Asia/Brunei","BO|America/La_Paz","BQ|America/Curacao America/Kralendijk","BR|America/Noronha America/Belem America/Fortaleza America/Recife America/Araguaina America/Maceio America/Bahia America/Sao_Paulo America/Campo_Grande America/Cuiaba America/Santarem America/Porto_Velho America/Boa_Vista America/Manaus America/Eirunepe America/Rio_Branco","BS|America/Nassau","BT|Asia/Thimphu","BW|Africa/Maputo Africa/Gaborone","BY|Europe/Minsk","BZ|America/Belize","CA|America/St_Johns America/Halifax America/Glace_Bay America/Moncton America/Goose_Bay America/Blanc-Sablon America/Toronto America/Nipigon America/Thunder_Bay America/Iqaluit America/Pangnirtung America/Atikokan America/Winnipeg America/Rainy_River America/Resolute America/Rankin_Inlet America/Regina America/Swift_Current America/Edmonton America/Cambridge_Bay America/Yellowknife America/Inuvik America/Creston America/Dawson_Creek America/Fort_Nelson America/Vancouver America/Whitehorse America/Dawson","CC|Indian/Cocos","CD|Africa/Maputo Africa/Lagos Africa/Kinshasa Africa/Lubumbashi","CF|Africa/Lagos Africa/Bangui","CG|Africa/Lagos Africa/Brazzaville","CH|Europe/Zurich","CI|Africa/Abidjan","CK|Pacific/Rarotonga","CL|America/Santiago America/Punta_Arenas Pacific/Easter","CM|Africa/Lagos Africa/Douala","CN|Asia/Shanghai Asia/Urumqi","CO|America/Bogota","CR|America/Costa_Rica","CU|America/Havana","CV|Atlantic/Cape_Verde","CW|America/Curacao","CX|Indian/Christmas","CY|Asia/Nicosia Asia/Famagusta","CZ|Europe/Prague","DE|Europe/Zurich Europe/Berlin Europe/Busingen","DJ|Africa/Nairobi Africa/Djibouti","DK|Europe/Copenhagen","DM|America/Port_of_Spain America/Dominica","DO|America/Santo_Domingo","DZ|Africa/Algiers","EC|America/Guayaquil Pacific/Galapagos","EE|Europe/Tallinn","EG|Africa/Cairo","EH|Africa/El_Aaiun","ER|Africa/Nairobi Africa/Asmara","ES|Europe/Madrid Africa/Ceuta Atlantic/Canary","ET|Africa/Nairobi Africa/Addis_Ababa","FI|Europe/Helsinki","FJ|Pacific/Fiji","FK|Atlantic/Stanley","FM|Pacific/Chuuk Pacific/Pohnpei Pacific/Kosrae","FO|Atlantic/Faroe","FR|Europe/Paris","GA|Africa/Lagos Africa/Libreville","GB|Europe/London","GD|America/Port_of_Spain America/Grenada","GE|Asia/Tbilisi","GF|America/Cayenne","GG|Europe/London Europe/Guernsey","GH|Africa/Accra","GI|Europe/Gibraltar","GL|America/Nuuk America/Danmarkshavn America/Scoresbysund America/Thule","GM|Africa/Abidjan Africa/Banjul","GN|Africa/Abidjan Africa/Conakry","GP|America/Port_of_Spain America/Guadeloupe","GQ|Africa/Lagos Africa/Malabo","GR|Europe/Athens","GS|Atlantic/South_Georgia","GT|America/Guatemala","GU|Pacific/Guam","GW|Africa/Bissau","GY|America/Guyana","HK|Asia/Hong_Kong","HN|America/Tegucigalpa","HR|Europe/Belgrade Europe/Zagreb","HT|America/Port-au-Prince","HU|Europe/Budapest","ID|Asia/Jakarta Asia/Pontianak Asia/Makassar Asia/Jayapura","IE|Europe/Dublin","IL|Asia/Jerusalem","IM|Europe/London Europe/Isle_of_Man","IN|Asia/Kolkata","IO|Indian/Chagos","IQ|Asia/Baghdad","IR|Asia/Tehran","IS|Atlantic/Reykjavik","IT|Europe/Rome","JE|Europe/London Europe/Jersey","JM|America/Jamaica","JO|Asia/Amman","JP|Asia/Tokyo","KE|Africa/Nairobi","KG|Asia/Bishkek","KH|Asia/Bangkok Asia/Phnom_Penh","KI|Pacific/Tarawa Pacific/Enderbury Pacific/Kiritimati","KM|Africa/Nairobi Indian/Comoro","KN|America/Port_of_Spain America/St_Kitts","KP|Asia/Pyongyang","KR|Asia/Seoul","KW|Asia/Riyadh Asia/Kuwait","KY|America/Panama America/Cayman","KZ|Asia/Almaty Asia/Qyzylorda Asia/Qostanay Asia/Aqtobe Asia/Aqtau Asia/Atyrau Asia/Oral","LA|Asia/Bangkok Asia/Vientiane","LB|Asia/Beirut","LC|America/Port_of_Spain America/St_Lucia","LI|Europe/Zurich Europe/Vaduz","LK|Asia/Colombo","LR|Africa/Monrovia","LS|Africa/Johannesburg Africa/Maseru","LT|Europe/Vilnius","LU|Europe/Luxembourg","LV|Europe/Riga","LY|Africa/Tripoli","MA|Africa/Casablanca","MC|Europe/Monaco","MD|Europe/Chisinau","ME|Europe/Belgrade Europe/Podgorica","MF|America/Port_of_Spain America/Marigot","MG|Africa/Nairobi Indian/Antananarivo","MH|Pacific/Majuro Pacific/Kwajalein","MK|Europe/Belgrade Europe/Skopje","ML|Africa/Abidjan Africa/Bamako","MM|Asia/Yangon","MN|Asia/Ulaanbaatar Asia/Hovd Asia/Choibalsan","MO|Asia/Macau","MP|Pacific/Guam Pacific/Saipan","MQ|America/Martinique","MR|Africa/Abidjan Africa/Nouakchott","MS|America/Port_of_Spain America/Montserrat","MT|Europe/Malta","MU|Indian/Mauritius","MV|Indian/Maldives","MW|Africa/Maputo Africa/Blantyre","MX|America/Mexico_City America/Cancun America/Merida America/Monterrey America/Matamoros America/Mazatlan America/Chihuahua America/Ojinaga America/Hermosillo America/Tijuana America/Bahia_Banderas","MY|Asia/Kuala_Lumpur Asia/Kuching","MZ|Africa/Maputo","NA|Africa/Windhoek","NC|Pacific/Noumea","NE|Africa/Lagos Africa/Niamey","NF|Pacific/Norfolk","NG|Africa/Lagos","NI|America/Managua","NL|Europe/Amsterdam","NO|Europe/Oslo","NP|Asia/Kathmandu","NR|Pacific/Nauru","NU|Pacific/Niue","NZ|Pacific/Auckland Pacific/Chatham","OM|Asia/Dubai Asia/Muscat","PA|America/Panama","PE|America/Lima","PF|Pacific/Tahiti Pacific/Marquesas Pacific/Gambier","PG|Pacific/Port_Moresby Pacific/Bougainville","PH|Asia/Manila","PK|Asia/Karachi","PL|Europe/Warsaw","PM|America/Miquelon","PN|Pacific/Pitcairn","PR|America/Puerto_Rico","PS|Asia/Gaza Asia/Hebron","PT|Europe/Lisbon Atlantic/Madeira Atlantic/Azores","PW|Pacific/Palau","PY|America/Asuncion","QA|Asia/Qatar","RE|Indian/Reunion","RO|Europe/Bucharest","RS|Europe/Belgrade","RU|Europe/Kaliningrad Europe/Moscow Europe/Simferopol Europe/Kirov Europe/Astrakhan Europe/Volgograd Europe/Saratov Europe/Ulyanovsk Europe/Samara Asia/Yekaterinburg Asia/Omsk Asia/Novosibirsk Asia/Barnaul Asia/Tomsk Asia/Novokuznetsk Asia/Krasnoyarsk Asia/Irkutsk Asia/Chita Asia/Yakutsk Asia/Khandyga Asia/Vladivostok Asia/Ust-Nera Asia/Magadan Asia/Sakhalin Asia/Srednekolymsk Asia/Kamchatka Asia/Anadyr","RW|Africa/Maputo Africa/Kigali","SA|Asia/Riyadh","SB|Pacific/Guadalcanal","SC|Indian/Mahe","SD|Africa/Khartoum","SE|Europe/Stockholm","SG|Asia/Singapore","SH|Africa/Abidjan Atlantic/St_Helena","SI|Europe/Belgrade Europe/Ljubljana","SJ|Europe/Oslo Arctic/Longyearbyen","SK|Europe/Prague Europe/Bratislava","SL|Africa/Abidjan Africa/Freetown","SM|Europe/Rome Europe/San_Marino","SN|Africa/Abidjan Africa/Dakar","SO|Africa/Nairobi Africa/Mogadishu","SR|America/Paramaribo","SS|Africa/Juba","ST|Africa/Sao_Tome","SV|America/El_Salvador","SX|America/Curacao America/Lower_Princes","SY|Asia/Damascus","SZ|Africa/Johannesburg Africa/Mbabane","TC|America/Grand_Turk","TD|Africa/Ndjamena","TF|Indian/Reunion Indian/Kerguelen","TG|Africa/Abidjan Africa/Lome","TH|Asia/Bangkok","TJ|Asia/Dushanbe","TK|Pacific/Fakaofo","TL|Asia/Dili","TM|Asia/Ashgabat","TN|Africa/Tunis","TO|Pacific/Tongatapu","TR|Europe/Istanbul","TT|America/Port_of_Spain","TV|Pacific/Funafuti","TW|Asia/Taipei","TZ|Africa/Nairobi Africa/Dar_es_Salaam","UA|Europe/Simferopol Europe/Kiev Europe/Uzhgorod Europe/Zaporozhye","UG|Africa/Nairobi Africa/Kampala","UM|Pacific/Pago_Pago Pacific/Wake Pacific/Honolulu Pacific/Midway","US|America/New_York America/Detroit America/Kentucky/Louisville America/Kentucky/Monticello America/Indiana/Indianapolis America/Indiana/Vincennes America/Indiana/Winamac America/Indiana/Marengo America/Indiana/Petersburg America/Indiana/Vevay America/Chicago America/Indiana/Tell_City America/Indiana/Knox America/Menominee America/North_Dakota/Center America/North_Dakota/New_Salem America/North_Dakota/Beulah America/Denver America/Boise America/Phoenix America/Los_Angeles America/Anchorage America/Juneau America/Sitka America/Metlakatla America/Yakutat America/Nome America/Adak Pacific/Honolulu","UY|America/Montevideo","UZ|Asia/Samarkand Asia/Tashkent","VA|Europe/Rome Europe/Vatican","VC|America/Port_of_Spain America/St_Vincent","VE|America/Caracas","VG|America/Port_of_Spain America/Tortola","VI|America/Port_of_Spain America/St_Thomas","VN|Asia/Bangkok Asia/Ho_Chi_Minh","VU|Pacific/Efate","WF|Pacific/Wallis","WS|Pacific/Apia","YE|Asia/Riyadh Asia/Aden","YT|Africa/Nairobi Indian/Mayotte","ZA|Africa/Johannesburg","ZM|Africa/Maputo Africa/Lusaka","ZW|Africa/Maputo Africa/Harare"];var latest = {version:version,zones:zones,links:links,countries:countries};

	var latest$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		version: version,
		zones: zones,
		links: links,
		countries: countries,
		'default': latest
	});

	var require$$1 = getCjsExportFromNamespace(latest$1);

	var momentTimezone$1 = createCommonjsModule(function (module) {
	var moment = module.exports = momentTimezone;
	moment.tz.load(require$$1);
	});

	var toString = function toString(obj) {
	  return Object.prototype.toString.call(obj);
	};

	var isFunction = function isFunction(value) {
	  var str;
	  str = toString(value);
	  return str === '[object Function]' || str === '[object GeneratorFunction]' || str === '[object AsyncFunction]';
	};

	var isString = function isString(maybeString) {
	  return typeof maybeString === 'string' || maybeString instanceof String;
	};

	var valueOrError = function valueOrError(e) {
	  return e && e.message ? e.message : e;
	};

	var valueOrEvent = function valueOrEvent(e) {
	  if (e && e.target) {
	    return e.target.value;
	  }

	  return e;
	};

	var getLanguage = function getLanguage() {
	  if (typeof window != 'undefined') {
	    return window.navigator.userLanguage || window.navigator.languages[0] || window.navigator.language;
	  }
	};

	var rfc3339 = 'YYYY-MM-DDTHH:mm:ssZ';
	var mmddyyyy = 'MM/DD/YYYY';
	var ddmmyyyy = 'DD/MM/YYYY'; // get the prefered format

	var defaultFormat = function defaultFormat() {
	  if (getLanguage() == 'en-US') {
	    return mmddyyyy;
	  } else {
	    return ddmmyyyy;
	  }
	}; // render a date in a format, or use defualt format if non is provided

	var renderDate = function renderDate(date, format) {
	  if (!format) {
	    format = defaultFormat();
	  }

	  return momentTimezone$1(date).format(format);
	}; // render a date for the UI

	var currencies = {
	  data: {
	    aud: '$',
	    cad: '$',
	    eur: '€',
	    gbp: '£',
	    hkd: '$',
	    jpy: '¥',
	    nzd: '$',
	    sgd: '$',
	    usd: '$',
	    ghc: '¢',
	    ars: '$',
	    bsd: '$',
	    bbd: '$',
	    bmd: '$',
	    bnd: '$',
	    kyd: '$',
	    clp: '$',
	    cop: '$',
	    xcd: '$',
	    svc: '$',
	    fjd: '$',
	    gyd: '$',
	    lrd: '$',
	    mxn: '$',
	    nad: '$',
	    sbd: '$',
	    srd: '$',
	    tvd: '$',
	    bob: '$b',
	    uyu: '$u',
	    egp: '£',
	    fkp: '£',
	    gip: '£',
	    ggp: '£',
	    imp: '£',
	    jep: '£',
	    lbp: '£',
	    shp: '£',
	    syp: '£',
	    cny: '¥',
	    afn: '؋',
	    thb: '฿',
	    khr: '៛',
	    crc: '₡',
	    trl: '₤',
	    ngn: '₦',
	    kpw: '₩',
	    krw: '₩',
	    ils: '₪',
	    vnd: '₫',
	    lak: '₭',
	    mnt: '₮',
	    cup: '₱',
	    php: '₱',
	    uah: '₴',
	    mur: '₨',
	    npr: '₨',
	    pkr: '₨',
	    scr: '₨',
	    lkr: '₨',
	    irr: '﷼',
	    omr: '﷼',
	    qar: '﷼',
	    sar: '﷼',
	    yer: '﷼',
	    pab: 'b/.',
	    vef: 'bs',
	    bzd: 'bz$',
	    nio: 'c$',
	    chf: 'chf',
	    huf: 'ft',
	    awg: 'ƒ',
	    ang: 'ƒ',
	    pyg: 'gs',
	    jmd: 'j$',
	    czk: 'kč',
	    bam: 'km',
	    hrk: 'kn',
	    dkk: 'kr',
	    eek: 'kr',
	    isk: 'kr',
	    nok: 'kr',
	    sek: 'kr',
	    hnl: 'l',
	    ron: 'lei',
	    all: 'lek',
	    lvl: 'ls',
	    ltl: 'lt',
	    mzn: 'mt',
	    twd: 'nt$',
	    bwp: 'p',
	    byr: 'p.',
	    gtq: 'q',
	    zar: 'r',
	    brl: 'r$',
	    dop: 'rd$',
	    myr: 'rm',
	    idr: 'rp',
	    sos: 's',
	    pen: 's/.',
	    ttd: 'tt$',
	    zwd: 'z$',
	    pln: 'zł',
	    mkd: 'ден',
	    rsd: 'Дин.',
	    bgn: 'лв',
	    kzt: 'лв',
	    kgs: 'лв',
	    uzs: 'лв',
	    azn: 'ман',
	    rub: 'руб',
	    inr: '',
	    try: '',
	    '': '$',
	    pnt: '',
	    btc: '',
	    eth: ''
	  }
	};
	var currencySigns = currencies.data;

	var isZeroDecimal = function isZeroDecimal(c) {
	  var code = c;

	  if (code) {
	    code = code.toLowerCase();
	  }

	  if (code === 'bif' || code === 'clp' || code === 'djf' || code === 'gnf' || code === 'jpy' || code === 'kmf' || code === 'krw' || code === 'mga' || code === 'pyg' || code === 'rwf' || code === 'vnd' || code === 'vuv' || code === 'xaf' || code === 'xof' || code === 'xpf') {
	    return true;
	  }

	  return false;
	}; // Convert data format to humanized format

	var renderUICurrencyFromJSON = function renderUICurrencyFromJSON(c, j) {
	  var code = c;
	  var jsonCurrency = j;

	  if (code) {
	    code = code.toLowerCase();
	  }

	  if (Number.isNaN(jsonCurrency)) {
	    jsonCurrency = 0;
	  }

	  var currentCurrencySign = currencySigns[code] != null ? currencySigns[code] : ''; // ethereum

	  if (code === 'eth' || code === 'btc' || code === 'xbt') {
	    jsonCurrency /= 1e9;
	    return currentCurrencySign + jsonCurrency;
	  }

	  jsonCurrency = "".concat(jsonCurrency); // jsonCurrency is not cents

	  if (isZeroDecimal(code)) {
	    return currentCurrencySign + jsonCurrency;
	  } // jsonCurrency is cents


	  while (jsonCurrency.length < 3) {
	    jsonCurrency = "0".concat(jsonCurrency);
	  }

	  return "".concat(currentCurrencySign).concat(jsonCurrency.substr(0, jsonCurrency.length - 2), ".").concat(jsonCurrency.substr(-2));
	}; // Convert data format to number

	function debounce(func, wait, immediate) {
	  var _arguments = arguments,
	      _this = this;

	  var timeout;
	  return function () {
	    var context = _this,
	        args = _arguments;
	    clearTimeout(timeout);
	    timeout = setTimeout(function () {
	      timeout = null;
	      if (!immediate) func.apply(context, args);
	    }, wait);
	    if (immediate && !timeout) func.apply(context, args);
	  };
	}
	//# sourceMappingURL=index.esm.js.map

	var common = {
	  black: '#000',
	  white: '#fff'
	};

	var red = {
	  50: '#ffebee',
	  100: '#ffcdd2',
	  200: '#ef9a9a',
	  300: '#e57373',
	  400: '#ef5350',
	  500: '#f44336',
	  600: '#e53935',
	  700: '#d32f2f',
	  800: '#c62828',
	  900: '#b71c1c',
	  A100: '#ff8a80',
	  A200: '#ff5252',
	  A400: '#ff1744',
	  A700: '#d50000'
	};

	var pink = {
	  50: '#fce4ec',
	  100: '#f8bbd0',
	  200: '#f48fb1',
	  300: '#f06292',
	  400: '#ec407a',
	  500: '#e91e63',
	  600: '#d81b60',
	  700: '#c2185b',
	  800: '#ad1457',
	  900: '#880e4f',
	  A100: '#ff80ab',
	  A200: '#ff4081',
	  A400: '#f50057',
	  A700: '#c51162'
	};

	var indigo = {
	  50: '#e8eaf6',
	  100: '#c5cae9',
	  200: '#9fa8da',
	  300: '#7986cb',
	  400: '#5c6bc0',
	  500: '#3f51b5',
	  600: '#3949ab',
	  700: '#303f9f',
	  800: '#283593',
	  900: '#1a237e',
	  A100: '#8c9eff',
	  A200: '#536dfe',
	  A400: '#3d5afe',
	  A700: '#304ffe'
	};

	var blue = {
	  50: '#e3f2fd',
	  100: '#bbdefb',
	  200: '#90caf9',
	  300: '#64b5f6',
	  400: '#42a5f5',
	  500: '#2196f3',
	  600: '#1e88e5',
	  700: '#1976d2',
	  800: '#1565c0',
	  900: '#0d47a1',
	  A100: '#82b1ff',
	  A200: '#448aff',
	  A400: '#2979ff',
	  A700: '#2962ff'
	};

	var green = {
	  50: '#e8f5e9',
	  100: '#c8e6c9',
	  200: '#a5d6a7',
	  300: '#81c784',
	  400: '#66bb6a',
	  500: '#4caf50',
	  600: '#43a047',
	  700: '#388e3c',
	  800: '#2e7d32',
	  900: '#1b5e20',
	  A100: '#b9f6ca',
	  A200: '#69f0ae',
	  A400: '#00e676',
	  A700: '#00c853'
	};

	var orange = {
	  50: '#fff3e0',
	  100: '#ffe0b2',
	  200: '#ffcc80',
	  300: '#ffb74d',
	  400: '#ffa726',
	  500: '#ff9800',
	  600: '#fb8c00',
	  700: '#f57c00',
	  800: '#ef6c00',
	  900: '#e65100',
	  A100: '#ffd180',
	  A200: '#ffab40',
	  A400: '#ff9100',
	  A700: '#ff6d00'
	};

	var grey = {
	  50: '#fafafa',
	  100: '#f5f5f5',
	  200: '#eeeeee',
	  300: '#e0e0e0',
	  400: '#bdbdbd',
	  500: '#9e9e9e',
	  600: '#757575',
	  700: '#616161',
	  800: '#424242',
	  900: '#212121',
	  A100: '#d5d5d5',
	  A200: '#aaaaaa',
	  A400: '#303030',
	  A700: '#616161'
	};

	function chainPropTypes(propType1, propType2) {
	  if (process.env.NODE_ENV === 'production') {
	    return function () {
	      return null;
	    };
	  }

	  return function validate() {
	    return propType1.apply(void 0, arguments) || propType2.apply(void 0, arguments);
	  };
	}

	function _extends() {
	  _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends.apply(this, arguments);
	}

	function _typeof(obj) {
	  "@babel/helpers - typeof";

	  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
	    _typeof = function _typeof(obj) {
	      return typeof obj;
	    };
	  } else {
	    _typeof = function _typeof(obj) {
	      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	    };
	  }

	  return _typeof(obj);
	}

	function isPlainObject(item) {
	  return item && _typeof(item) === 'object' && item.constructor === Object;
	}
	function deepmerge(target, source) {
	  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
	    clone: true
	  };
	  var output = options.clone ? _extends({}, target) : target;

	  if (isPlainObject(target) && isPlainObject(source)) {
	    Object.keys(source).forEach(function (key) {
	      // Avoid prototype pollution
	      if (key === '__proto__') {
	        return;
	      }

	      if (isPlainObject(source[key]) && key in target) {
	        output[key] = deepmerge(target[key], source[key], options);
	      } else {
	        output[key] = source[key];
	      }
	    });
	  }

	  return output;
	}

	/** @license React v16.13.1
	 * react-is.production.min.js
	 *
	 * Copyright (c) Facebook, Inc. and its affiliates.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */
	var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k$1=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?
	Symbol.for("react.suspense_list"):60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v=b?Symbol.for("react.block"):60121,w=b?Symbol.for("react.fundamental"):60117,x=b?Symbol.for("react.responder"):60118,y=b?Symbol.for("react.scope"):60119;
	function z(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k$1:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}var AsyncMode=l;var ConcurrentMode=m;var ContextConsumer=k$1;var ContextProvider=h;var Element$1=c;var ForwardRef=n;var Fragment=e;var Lazy=t;var Memo=r;var Portal=d;
	var Profiler=g;var StrictMode=f;var Suspense=p;var isAsyncMode=function(a){return A(a)||z(a)===l};var isConcurrentMode=A;var isContextConsumer=function(a){return z(a)===k$1};var isContextProvider=function(a){return z(a)===h};var isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c};var isForwardRef=function(a){return z(a)===n};var isFragment=function(a){return z(a)===e};var isLazy=function(a){return z(a)===t};
	var isMemo=function(a){return z(a)===r};var isPortal=function(a){return z(a)===d};var isProfiler=function(a){return z(a)===g};var isStrictMode=function(a){return z(a)===f};var isSuspense=function(a){return z(a)===p};
	var isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k$1||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};var typeOf=z;

	var reactIs_production_min = {
		AsyncMode: AsyncMode,
		ConcurrentMode: ConcurrentMode,
		ContextConsumer: ContextConsumer,
		ContextProvider: ContextProvider,
		Element: Element$1,
		ForwardRef: ForwardRef,
		Fragment: Fragment,
		Lazy: Lazy,
		Memo: Memo,
		Portal: Portal,
		Profiler: Profiler,
		StrictMode: StrictMode,
		Suspense: Suspense,
		isAsyncMode: isAsyncMode,
		isConcurrentMode: isConcurrentMode,
		isContextConsumer: isContextConsumer,
		isContextProvider: isContextProvider,
		isElement: isElement,
		isForwardRef: isForwardRef,
		isFragment: isFragment,
		isLazy: isLazy,
		isMemo: isMemo,
		isPortal: isPortal,
		isProfiler: isProfiler,
		isStrictMode: isStrictMode,
		isSuspense: isSuspense,
		isValidElementType: isValidElementType,
		typeOf: typeOf
	};

	var reactIs_development = createCommonjsModule(function (module, exports) {



	if (process.env.NODE_ENV !== "production") {
	  (function() {

	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var hasSymbol = typeof Symbol === 'function' && Symbol.for;
	var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
	// (unstable) APIs that have been removed. Can we remove the symbols?

	var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
	var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
	var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
	var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
	var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
	var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
	var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

	function isValidElementType(type) {
	  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
	  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
	}

	function typeOf(object) {
	  if (typeof object === 'object' && object !== null) {
	    var $$typeof = object.$$typeof;

	    switch ($$typeof) {
	      case REACT_ELEMENT_TYPE:
	        var type = object.type;

	        switch (type) {
	          case REACT_ASYNC_MODE_TYPE:
	          case REACT_CONCURRENT_MODE_TYPE:
	          case REACT_FRAGMENT_TYPE:
	          case REACT_PROFILER_TYPE:
	          case REACT_STRICT_MODE_TYPE:
	          case REACT_SUSPENSE_TYPE:
	            return type;

	          default:
	            var $$typeofType = type && type.$$typeof;

	            switch ($$typeofType) {
	              case REACT_CONTEXT_TYPE:
	              case REACT_FORWARD_REF_TYPE:
	              case REACT_LAZY_TYPE:
	              case REACT_MEMO_TYPE:
	              case REACT_PROVIDER_TYPE:
	                return $$typeofType;

	              default:
	                return $$typeof;
	            }

	        }

	      case REACT_PORTAL_TYPE:
	        return $$typeof;
	    }
	  }

	  return undefined;
	} // AsyncMode is deprecated along with isAsyncMode

	var AsyncMode = REACT_ASYNC_MODE_TYPE;
	var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
	var ContextConsumer = REACT_CONTEXT_TYPE;
	var ContextProvider = REACT_PROVIDER_TYPE;
	var Element = REACT_ELEMENT_TYPE;
	var ForwardRef = REACT_FORWARD_REF_TYPE;
	var Fragment = REACT_FRAGMENT_TYPE;
	var Lazy = REACT_LAZY_TYPE;
	var Memo = REACT_MEMO_TYPE;
	var Portal = REACT_PORTAL_TYPE;
	var Profiler = REACT_PROFILER_TYPE;
	var StrictMode = REACT_STRICT_MODE_TYPE;
	var Suspense = REACT_SUSPENSE_TYPE;
	var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

	function isAsyncMode(object) {
	  {
	    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
	      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

	      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
	    }
	  }

	  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
	}
	function isConcurrentMode(object) {
	  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
	}
	function isContextConsumer(object) {
	  return typeOf(object) === REACT_CONTEXT_TYPE;
	}
	function isContextProvider(object) {
	  return typeOf(object) === REACT_PROVIDER_TYPE;
	}
	function isElement(object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	}
	function isForwardRef(object) {
	  return typeOf(object) === REACT_FORWARD_REF_TYPE;
	}
	function isFragment(object) {
	  return typeOf(object) === REACT_FRAGMENT_TYPE;
	}
	function isLazy(object) {
	  return typeOf(object) === REACT_LAZY_TYPE;
	}
	function isMemo(object) {
	  return typeOf(object) === REACT_MEMO_TYPE;
	}
	function isPortal(object) {
	  return typeOf(object) === REACT_PORTAL_TYPE;
	}
	function isProfiler(object) {
	  return typeOf(object) === REACT_PROFILER_TYPE;
	}
	function isStrictMode(object) {
	  return typeOf(object) === REACT_STRICT_MODE_TYPE;
	}
	function isSuspense(object) {
	  return typeOf(object) === REACT_SUSPENSE_TYPE;
	}

	exports.AsyncMode = AsyncMode;
	exports.ConcurrentMode = ConcurrentMode;
	exports.ContextConsumer = ContextConsumer;
	exports.ContextProvider = ContextProvider;
	exports.Element = Element;
	exports.ForwardRef = ForwardRef;
	exports.Fragment = Fragment;
	exports.Lazy = Lazy;
	exports.Memo = Memo;
	exports.Portal = Portal;
	exports.Profiler = Profiler;
	exports.StrictMode = StrictMode;
	exports.Suspense = Suspense;
	exports.isAsyncMode = isAsyncMode;
	exports.isConcurrentMode = isConcurrentMode;
	exports.isContextConsumer = isContextConsumer;
	exports.isContextProvider = isContextProvider;
	exports.isElement = isElement;
	exports.isForwardRef = isForwardRef;
	exports.isFragment = isFragment;
	exports.isLazy = isLazy;
	exports.isMemo = isMemo;
	exports.isPortal = isPortal;
	exports.isProfiler = isProfiler;
	exports.isStrictMode = isStrictMode;
	exports.isSuspense = isSuspense;
	exports.isValidElementType = isValidElementType;
	exports.typeOf = typeOf;
	  })();
	}
	});
	var reactIs_development_1 = reactIs_development.AsyncMode;
	var reactIs_development_2 = reactIs_development.ConcurrentMode;
	var reactIs_development_3 = reactIs_development.ContextConsumer;
	var reactIs_development_4 = reactIs_development.ContextProvider;
	var reactIs_development_5 = reactIs_development.Element;
	var reactIs_development_6 = reactIs_development.ForwardRef;
	var reactIs_development_7 = reactIs_development.Fragment;
	var reactIs_development_8 = reactIs_development.Lazy;
	var reactIs_development_9 = reactIs_development.Memo;
	var reactIs_development_10 = reactIs_development.Portal;
	var reactIs_development_11 = reactIs_development.Profiler;
	var reactIs_development_12 = reactIs_development.StrictMode;
	var reactIs_development_13 = reactIs_development.Suspense;
	var reactIs_development_14 = reactIs_development.isAsyncMode;
	var reactIs_development_15 = reactIs_development.isConcurrentMode;
	var reactIs_development_16 = reactIs_development.isContextConsumer;
	var reactIs_development_17 = reactIs_development.isContextProvider;
	var reactIs_development_18 = reactIs_development.isElement;
	var reactIs_development_19 = reactIs_development.isForwardRef;
	var reactIs_development_20 = reactIs_development.isFragment;
	var reactIs_development_21 = reactIs_development.isLazy;
	var reactIs_development_22 = reactIs_development.isMemo;
	var reactIs_development_23 = reactIs_development.isPortal;
	var reactIs_development_24 = reactIs_development.isProfiler;
	var reactIs_development_25 = reactIs_development.isStrictMode;
	var reactIs_development_26 = reactIs_development.isSuspense;
	var reactIs_development_27 = reactIs_development.isValidElementType;
	var reactIs_development_28 = reactIs_development.typeOf;

	var reactIs = createCommonjsModule(function (module) {

	if (process.env.NODE_ENV === 'production') {
	  module.exports = reactIs_production_min;
	} else {
	  module.exports = reactIs_development;
	}
	});
	var reactIs_1 = reactIs.isFragment;
	var reactIs_2 = reactIs.ForwardRef;
	var reactIs_3 = reactIs.Memo;

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols = Object.getOwnPropertySymbols;
	var hasOwnProperty = Object.prototype.hasOwnProperty;
	var propIsEnumerable = Object.prototype.propertyIsEnumerable;

	function toObject(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
		var from;
		var to = toObject(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols) {
				symbols = getOwnPropertySymbols(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	var ReactPropTypesSecret_1 = ReactPropTypesSecret;

	var printWarning = function() {};

	if (process.env.NODE_ENV !== 'production') {
	  var ReactPropTypesSecret$1 = ReactPropTypesSecret_1;
	  var loggedTypeFailures = {};
	  var has = Function.call.bind(Object.prototype.hasOwnProperty);

	  printWarning = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */
	function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
	  if (process.env.NODE_ENV !== 'production') {
	    for (var typeSpecName in typeSpecs) {
	      if (has(typeSpecs, typeSpecName)) {
	        var error;
	        // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          if (typeof typeSpecs[typeSpecName] !== 'function') {
	            var err = Error(
	              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
	              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
	            );
	            err.name = 'Invariant Violation';
	            throw err;
	          }
	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error && !(error instanceof Error)) {
	          printWarning(
	            (componentName || 'React class') + ': type specification of ' +
	            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
	            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
	            'You may have forgotten to pass an argument to the type checker ' +
	            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
	            'shape all require an argument).'
	          );
	        }
	        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures[error.message] = true;

	          var stack = getStack ? getStack() : '';

	          printWarning(
	            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
	          );
	        }
	      }
	    }
	  }
	}

	/**
	 * Resets warning cache when testing.
	 *
	 * @private
	 */
	checkPropTypes.resetWarningCache = function() {
	  if (process.env.NODE_ENV !== 'production') {
	    loggedTypeFailures = {};
	  }
	};

	var checkPropTypes_1 = checkPropTypes;

	var has$1 = Function.call.bind(Object.prototype.hasOwnProperty);
	var printWarning$1 = function() {};

	if (process.env.NODE_ENV !== 'production') {
	  printWarning$1 = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	function emptyFunctionThatReturnsNull() {
	  return null;
	}

	var factoryWithTypeCheckers = function(isValidElement, throwOnDirectAccess) {
	  /* global Symbol */
	  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	  /**
	   * Returns the iterator method function contained on the iterable object.
	   *
	   * Be sure to invoke the function with the iterable as context:
	   *
	   *     var iteratorFn = getIteratorFn(myIterable);
	   *     if (iteratorFn) {
	   *       var iterator = iteratorFn.call(myIterable);
	   *       ...
	   *     }
	   *
	   * @param {?object} maybeIterable
	   * @return {?function}
	   */
	  function getIteratorFn(maybeIterable) {
	    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }

	  /**
	   * Collection of methods that allow declaration and validation of props that are
	   * supplied to React components. Example usage:
	   *
	   *   var Props = require('ReactPropTypes');
	   *   var MyArticle = React.createClass({
	   *     propTypes: {
	   *       // An optional string prop named "description".
	   *       description: Props.string,
	   *
	   *       // A required enum prop named "category".
	   *       category: Props.oneOf(['News','Photos']).isRequired,
	   *
	   *       // A prop named "dialog" that requires an instance of Dialog.
	   *       dialog: Props.instanceOf(Dialog).isRequired
	   *     },
	   *     render: function() { ... }
	   *   });
	   *
	   * A more formal specification of how these methods are used:
	   *
	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	   *   decl := ReactPropTypes.{type}(.isRequired)?
	   *
	   * Each and every declaration produces a function with the same signature. This
	   * allows the creation of custom validation functions. For example:
	   *
	   *  var MyLink = React.createClass({
	   *    propTypes: {
	   *      // An optional string or URI prop named "href".
	   *      href: function(props, propName, componentName) {
	   *        var propValue = props[propName];
	   *        if (propValue != null && typeof propValue !== 'string' &&
	   *            !(propValue instanceof URI)) {
	   *          return new Error(
	   *            'Expected a string or an URI for ' + propName + ' in ' +
	   *            componentName
	   *          );
	   *        }
	   *      }
	   *    },
	   *    render: function() {...}
	   *  });
	   *
	   * @internal
	   */

	  var ANONYMOUS = '<<anonymous>>';

	  // Important!
	  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
	  var ReactPropTypes = {
	    array: createPrimitiveTypeChecker('array'),
	    bool: createPrimitiveTypeChecker('boolean'),
	    func: createPrimitiveTypeChecker('function'),
	    number: createPrimitiveTypeChecker('number'),
	    object: createPrimitiveTypeChecker('object'),
	    string: createPrimitiveTypeChecker('string'),
	    symbol: createPrimitiveTypeChecker('symbol'),

	    any: createAnyTypeChecker(),
	    arrayOf: createArrayOfTypeChecker,
	    element: createElementTypeChecker(),
	    elementType: createElementTypeTypeChecker(),
	    instanceOf: createInstanceTypeChecker,
	    node: createNodeChecker(),
	    objectOf: createObjectOfTypeChecker,
	    oneOf: createEnumTypeChecker,
	    oneOfType: createUnionTypeChecker,
	    shape: createShapeTypeChecker,
	    exact: createStrictShapeTypeChecker,
	  };

	  /**
	   * inlined Object.is polyfill to avoid requiring consumers ship their own
	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	   */
	  /*eslint-disable no-self-compare*/
	  function is(x, y) {
	    // SameValue algorithm
	    if (x === y) {
	      // Steps 1-5, 7-10
	      // Steps 6.b-6.e: +0 != -0
	      return x !== 0 || 1 / x === 1 / y;
	    } else {
	      // Step 6.a: NaN == NaN
	      return x !== x && y !== y;
	    }
	  }
	  /*eslint-enable no-self-compare*/

	  /**
	   * We use an Error-like object for backward compatibility as people may call
	   * PropTypes directly and inspect their output. However, we don't use real
	   * Errors anymore. We don't inspect their stack anyway, and creating them
	   * is prohibitively expensive if they are created too often, such as what
	   * happens in oneOfType() for any type before the one that matched.
	   */
	  function PropTypeError(message) {
	    this.message = message;
	    this.stack = '';
	  }
	  // Make `instanceof Error` still work for returned errors.
	  PropTypeError.prototype = Error.prototype;

	  function createChainableTypeChecker(validate) {
	    if (process.env.NODE_ENV !== 'production') {
	      var manualPropTypeCallCache = {};
	      var manualPropTypeWarningCount = 0;
	    }
	    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	      componentName = componentName || ANONYMOUS;
	      propFullName = propFullName || propName;

	      if (secret !== ReactPropTypesSecret_1) {
	        if (throwOnDirectAccess) {
	          // New behavior only for users of `prop-types` package
	          var err = new Error(
	            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	            'Use `PropTypes.checkPropTypes()` to call them. ' +
	            'Read more at http://fb.me/use-check-prop-types'
	          );
	          err.name = 'Invariant Violation';
	          throw err;
	        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
	          // Old behavior for people using React.PropTypes
	          var cacheKey = componentName + ':' + propName;
	          if (
	            !manualPropTypeCallCache[cacheKey] &&
	            // Avoid spamming the console because they are often not actionable except for lib authors
	            manualPropTypeWarningCount < 3
	          ) {
	            printWarning$1(
	              'You are manually calling a React.PropTypes validation ' +
	              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
	              'and will throw in the standalone `prop-types` package. ' +
	              'You may be seeing this warning due to a third-party PropTypes ' +
	              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
	            );
	            manualPropTypeCallCache[cacheKey] = true;
	            manualPropTypeWarningCount++;
	          }
	        }
	      }
	      if (props[propName] == null) {
	        if (isRequired) {
	          if (props[propName] === null) {
	            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	          }
	          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	        }
	        return null;
	      } else {
	        return validate(props, propName, componentName, location, propFullName);
	      }
	    }

	    var chainedCheckType = checkType.bind(null, false);
	    chainedCheckType.isRequired = checkType.bind(null, true);

	    return chainedCheckType;
	  }

	  function createPrimitiveTypeChecker(expectedType) {
	    function validate(props, propName, componentName, location, propFullName, secret) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== expectedType) {
	        // `propValue` being instance of, say, date/regexp, pass the 'object'
	        // check, but we can offer a more precise error message here rather than
	        // 'of type `object`'.
	        var preciseType = getPreciseType(propValue);

	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createAnyTypeChecker() {
	    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
	  }

	  function createArrayOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	      }
	      var propValue = props[propName];
	      if (!Array.isArray(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	      }
	      for (var i = 0; i < propValue.length; i++) {
	        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret_1);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!isValidElement(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!reactIs.isValidElementType(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createInstanceTypeChecker(expectedClass) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!(props[propName] instanceof expectedClass)) {
	        var expectedClassName = expectedClass.name || ANONYMOUS;
	        var actualClassName = getClassName(props[propName]);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createEnumTypeChecker(expectedValues) {
	    if (!Array.isArray(expectedValues)) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (arguments.length > 1) {
	          printWarning$1(
	            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
	            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
	          );
	        } else {
	          printWarning$1('Invalid argument supplied to oneOf, expected an array.');
	        }
	      }
	      return emptyFunctionThatReturnsNull;
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      for (var i = 0; i < expectedValues.length; i++) {
	        if (is(propValue, expectedValues[i])) {
	          return null;
	        }
	      }

	      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
	        var type = getPreciseType(value);
	        if (type === 'symbol') {
	          return String(value);
	        }
	        return value;
	      });
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createObjectOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	      }
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	      }
	      for (var key in propValue) {
	        if (has$1(propValue, key)) {
	          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
	          if (error instanceof Error) {
	            return error;
	          }
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createUnionTypeChecker(arrayOfTypeCheckers) {
	    if (!Array.isArray(arrayOfTypeCheckers)) {
	      process.env.NODE_ENV !== 'production' ? printWarning$1('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
	      return emptyFunctionThatReturnsNull;
	    }

	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (typeof checker !== 'function') {
	        printWarning$1(
	          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
	          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
	        );
	        return emptyFunctionThatReturnsNull;
	      }
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	        var checker = arrayOfTypeCheckers[i];
	        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret_1) == null) {
	          return null;
	        }
	      }

	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createNodeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!isNode(props[propName])) {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      for (var key in shapeTypes) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          continue;
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createStrictShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      // We need to check all keys in case some are required but missing from
	      // props.
	      var allKeys = objectAssign({}, props[propName], shapeTypes);
	      for (var key in allKeys) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          return new PropTypeError(
	            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
	            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
	            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
	          );
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function isNode(propValue) {
	    switch (typeof propValue) {
	      case 'number':
	      case 'string':
	      case 'undefined':
	        return true;
	      case 'boolean':
	        return !propValue;
	      case 'object':
	        if (Array.isArray(propValue)) {
	          return propValue.every(isNode);
	        }
	        if (propValue === null || isValidElement(propValue)) {
	          return true;
	        }

	        var iteratorFn = getIteratorFn(propValue);
	        if (iteratorFn) {
	          var iterator = iteratorFn.call(propValue);
	          var step;
	          if (iteratorFn !== propValue.entries) {
	            while (!(step = iterator.next()).done) {
	              if (!isNode(step.value)) {
	                return false;
	              }
	            }
	          } else {
	            // Iterator will provide entry [k,v] tuples rather than values.
	            while (!(step = iterator.next()).done) {
	              var entry = step.value;
	              if (entry) {
	                if (!isNode(entry[1])) {
	                  return false;
	                }
	              }
	            }
	          }
	        } else {
	          return false;
	        }

	        return true;
	      default:
	        return false;
	    }
	  }

	  function isSymbol(propType, propValue) {
	    // Native Symbol.
	    if (propType === 'symbol') {
	      return true;
	    }

	    // falsy value can't be a Symbol
	    if (!propValue) {
	      return false;
	    }

	    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	    if (propValue['@@toStringTag'] === 'Symbol') {
	      return true;
	    }

	    // Fallback for non-spec compliant Symbols which are polyfilled.
	    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	      return true;
	    }

	    return false;
	  }

	  // Equivalent of `typeof` but with special handling for array and regexp.
	  function getPropType(propValue) {
	    var propType = typeof propValue;
	    if (Array.isArray(propValue)) {
	      return 'array';
	    }
	    if (propValue instanceof RegExp) {
	      // Old webkits (at least until Android 4.0) return 'function' rather than
	      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	      // passes PropTypes.object.
	      return 'object';
	    }
	    if (isSymbol(propType, propValue)) {
	      return 'symbol';
	    }
	    return propType;
	  }

	  // This handles more types than `getPropType`. Only used for error messages.
	  // See `createPrimitiveTypeChecker`.
	  function getPreciseType(propValue) {
	    if (typeof propValue === 'undefined' || propValue === null) {
	      return '' + propValue;
	    }
	    var propType = getPropType(propValue);
	    if (propType === 'object') {
	      if (propValue instanceof Date) {
	        return 'date';
	      } else if (propValue instanceof RegExp) {
	        return 'regexp';
	      }
	    }
	    return propType;
	  }

	  // Returns a string that is postfixed to a warning about an invalid type.
	  // For example, "undefined" or "of type array"
	  function getPostfixForTypeWarning(value) {
	    var type = getPreciseType(value);
	    switch (type) {
	      case 'array':
	      case 'object':
	        return 'an ' + type;
	      case 'boolean':
	      case 'date':
	      case 'regexp':
	        return 'a ' + type;
	      default:
	        return type;
	    }
	  }

	  // Returns class name of the object, if any.
	  function getClassName(propValue) {
	    if (!propValue.constructor || !propValue.constructor.name) {
	      return ANONYMOUS;
	    }
	    return propValue.constructor.name;
	  }

	  ReactPropTypes.checkPropTypes = checkPropTypes_1;
	  ReactPropTypes.resetWarningCache = checkPropTypes_1.resetWarningCache;
	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};

	function emptyFunction() {}
	function emptyFunctionWithReset() {}
	emptyFunctionWithReset.resetWarningCache = emptyFunction;

	var factoryWithThrowingShims = function() {
	  function shim(props, propName, componentName, location, propFullName, secret) {
	    if (secret === ReactPropTypesSecret_1) {
	      // It is still safe when called from React.
	      return;
	    }
	    var err = new Error(
	      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	      'Use PropTypes.checkPropTypes() to call them. ' +
	      'Read more at http://fb.me/use-check-prop-types'
	    );
	    err.name = 'Invariant Violation';
	    throw err;
	  }  shim.isRequired = shim;
	  function getShim() {
	    return shim;
	  }  // Important!
	  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
	  var ReactPropTypes = {
	    array: shim,
	    bool: shim,
	    func: shim,
	    number: shim,
	    object: shim,
	    string: shim,
	    symbol: shim,

	    any: shim,
	    arrayOf: getShim,
	    element: shim,
	    elementType: shim,
	    instanceOf: getShim,
	    node: shim,
	    objectOf: getShim,
	    oneOf: getShim,
	    oneOfType: getShim,
	    shape: getShim,
	    exact: getShim,

	    checkPropTypes: emptyFunctionWithReset,
	    resetWarningCache: emptyFunction
	  };

	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};

	var propTypes = createCommonjsModule(function (module) {
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	if (process.env.NODE_ENV !== 'production') {
	  var ReactIs = reactIs;

	  // By explicitly using `prop-types` you are opting into new development behavior.
	  // http://fb.me/prop-types-in-prod
	  var throwOnDirectAccess = true;
	  module.exports = factoryWithTypeCheckers(ReactIs.isElement, throwOnDirectAccess);
	} else {
	  // By explicitly using `prop-types` you are opting into new production behavior.
	  // http://fb.me/prop-types-in-prod
	  module.exports = factoryWithThrowingShims();
	}
	});
	var propTypes_1 = propTypes.elementType;

	function isClassComponent(elementType) {
	  // elementType.prototype?.isReactComponent
	  var _elementType$prototyp = elementType.prototype,
	      prototype = _elementType$prototyp === void 0 ? {} : _elementType$prototyp;
	  return Boolean(prototype.isReactComponent);
	}

	function acceptingRef(props, propName, componentName, location, propFullName) {
	  var element = props[propName];
	  var safePropName = propFullName || propName;

	  if (element == null) {
	    return null;
	  }

	  var warningHint;
	  var elementType = element.type;
	  /**
	   * Blacklisting instead of whitelisting
	   *
	   * Blacklisting will miss some components, such as React.Fragment. Those will at least
	   * trigger a warning in React.
	   * We can't whitelist because there is no safe way to detect React.forwardRef
	   * or class components. "Safe" means there's no public API.
	   *
	   */

	  if (typeof elementType === 'function' && !isClassComponent(elementType)) {
	    warningHint = 'Did you accidentally use a plain function component for an element instead?';
	  }

	  if (warningHint !== undefined) {
	    return new Error("Invalid ".concat(location, " `").concat(safePropName, "` supplied to `").concat(componentName, "`. ") + "Expected an element that can hold a ref. ".concat(warningHint, " ") + 'For more information see https://material-ui.com/r/caveat-with-refs-guide');
	  }

	  return null;
	}

	var elementAcceptingRef = chainPropTypes(propTypes.element, acceptingRef);
	elementAcceptingRef.isRequired = chainPropTypes(propTypes.element.isRequired, acceptingRef);

	function isClassComponent$1(elementType) {
	  // elementType.prototype?.isReactComponent
	  var _elementType$prototyp = elementType.prototype,
	      prototype = _elementType$prototyp === void 0 ? {} : _elementType$prototyp;
	  return Boolean(prototype.isReactComponent);
	}

	function elementTypeAcceptingRef(props, propName, componentName, location, propFullName) {
	  var propValue = props[propName];
	  var safePropName = propFullName || propName;

	  if (propValue == null) {
	    return null;
	  }

	  var warningHint;
	  /**
	   * Blacklisting instead of whitelisting
	   *
	   * Blacklisting will miss some components, such as React.Fragment. Those will at least
	   * trigger a warning in React.
	   * We can't whitelist because there is no safe way to detect React.forwardRef
	   * or class components. "Safe" means there's no public API.
	   *
	   */

	  if (typeof propValue === 'function' && !isClassComponent$1(propValue)) {
	    warningHint = 'Did you accidentally provide a plain function component instead?';
	  }

	  if (warningHint !== undefined) {
	    return new Error("Invalid ".concat(location, " `").concat(safePropName, "` supplied to `").concat(componentName, "`. ") + "Expected an element type that can hold a ref. ".concat(warningHint, " ") + 'For more information see https://material-ui.com/r/caveat-with-refs-guide');
	  }

	  return null;
	}

	var elementTypeAcceptingRef$1 = chainPropTypes(propTypes_1, elementTypeAcceptingRef);

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	// This module is based on https://github.com/airbnb/prop-types-exact repository.
	// However, in order to reduce the number of dependencies and to remove some extra safe checks
	// the module was forked.
	// Only exported for test purposes.
	var specialProperty = "exact-prop: \u200B";
	function exactProp(propTypes) {
	  if (process.env.NODE_ENV === 'production') {
	    return propTypes;
	  }

	  return _extends({}, propTypes, _defineProperty({}, specialProperty, function (props) {
	    var unsupportedProps = Object.keys(props).filter(function (prop) {
	      return !propTypes.hasOwnProperty(prop);
	    });

	    if (unsupportedProps.length > 0) {
	      return new Error("The following props are not supported: ".concat(unsupportedProps.map(function (prop) {
	        return "`".concat(prop, "`");
	      }).join(', '), ". Please remove them."));
	    }

	    return null;
	  }));
	}

	/**
	 * WARNING: Don't import this directly.
	 * Use `MuiError` from `@material-ui/utils/macros/MuiError.macro` instead.
	 * @param {number} code
	 */
	function formatMuiErrorMessage(code) {
	  // Apply babel-plugin-transform-template-literals in loose mode
	  // loose mode is safe iff we're concatenating primitives
	  // see https://babeljs.io/docs/en/babel-plugin-transform-template-literals#loose

	  /* eslint-disable prefer-template */
	  var url = 'https://material-ui.com/production-error/?code=' + code;

	  for (var i = 1; i < arguments.length; i += 1) {
	    // rest params over-transpile for this case
	    // eslint-disable-next-line prefer-rest-params
	    url += '&args[]=' + encodeURIComponent(arguments[i]);
	  }

	  return 'Minified Material-UI error #' + code + '; visit ' + url + ' for the full message.';
	  /* eslint-enable prefer-template */
	}

	// https://github.com/JamesMGreene/Function.name/blob/58b314d4a983110c3682f1228f845d39ccca1817/Function.name.js#L3

	var fnNameMatchRegex = /^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;
	function getFunctionName(fn) {
	  var match = "".concat(fn).match(fnNameMatchRegex);
	  var name = match && match[1];
	  return name || '';
	}
	/**
	 * @param {function} Component
	 * @param {string} fallback
	 * @returns {string | undefined}
	 */

	function getFunctionComponentName(Component) {
	  var fallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
	  return Component.displayName || Component.name || getFunctionName(Component) || fallback;
	}

	function getWrappedName(outerType, innerType, wrapperName) {
	  var functionName = getFunctionComponentName(innerType);
	  return outerType.displayName || (functionName !== '' ? "".concat(wrapperName, "(").concat(functionName, ")") : wrapperName);
	}
	/**
	 * cherry-pick from
	 * https://github.com/facebook/react/blob/769b1f270e1251d9dbdce0fcbd9e92e502d059b8/packages/shared/getComponentName.js
	 * originally forked from recompose/getDisplayName with added IE 11 support
	 *
	 * @param {React.ReactType} Component
	 * @returns {string | undefined}
	 */


	function getDisplayName(Component) {
	  if (Component == null) {
	    return undefined;
	  }

	  if (typeof Component === 'string') {
	    return Component;
	  }

	  if (typeof Component === 'function') {
	    return getFunctionComponentName(Component, 'Component');
	  }

	  if (_typeof(Component) === 'object') {
	    switch (Component.$$typeof) {
	      case reactIs_2:
	        return getWrappedName(Component, Component.render, 'ForwardRef');

	      case reactIs_3:
	        return getWrappedName(Component, Component.type, 'memo');

	      default:
	        return undefined;
	    }
	  }

	  return undefined;
	}

	function HTMLElementType(props, propName, componentName, location, propFullName) {
	  if (process.env.NODE_ENV === 'production') {
	    return null;
	  }

	  var propValue = props[propName];
	  var safePropName = propFullName || propName;

	  if (propValue == null) {
	    return null;
	  }

	  if (propValue && propValue.nodeType !== 1) {
	    return new Error("Invalid ".concat(location, " `").concat(safePropName, "` supplied to `").concat(componentName, "`. ") + "Expected an HTMLElement.");
	  }

	  return null;
	}

	/* eslint-disable */
	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var ponyfillGlobal = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();

	var refType = propTypes.oneOfType([propTypes.func, propTypes.object]);

	/** @license Material-UI v4.10.2
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var esm = /*#__PURE__*/Object.freeze({
		__proto__: null,
		chainPropTypes: chainPropTypes,
		deepmerge: deepmerge,
		elementAcceptingRef: elementAcceptingRef,
		elementTypeAcceptingRef: elementTypeAcceptingRef$1,
		exactProp: exactProp,
		formatMuiErrorMessage: formatMuiErrorMessage,
		getDisplayName: getDisplayName,
		HTMLElementType: HTMLElementType,
		ponyfillGlobal: ponyfillGlobal,
		refType: refType
	});

	/* eslint-disable no-use-before-define */

	/**
	 * Returns a number whose value is limited to the given range.
	 *
	 * @param {number} value The value to be clamped
	 * @param {number} min The lower boundary of the output range
	 * @param {number} max The upper boundary of the output range
	 * @returns {number} A number in the range [min, max]
	 */
	function clamp(value) {
	  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;

	  if (process.env.NODE_ENV !== 'production') {
	    if (value < min || value > max) {
	      console.error("Material-UI: The value provided ".concat(value, " is out of range [").concat(min, ", ").concat(max, "]."));
	    }
	  }

	  return Math.min(Math.max(min, value), max);
	}
	/**
	 * Converts a color from CSS hex format to CSS rgb format.
	 *
	 * @param {string} color - Hex color, i.e. #nnn or #nnnnnn
	 * @returns {string} A CSS rgb color string
	 */


	function hexToRgb(color) {
	  color = color.substr(1);
	  var re = new RegExp(".{1,".concat(color.length >= 6 ? 2 : 1, "}"), 'g');
	  var colors = color.match(re);

	  if (colors && colors[0].length === 1) {
	    colors = colors.map(function (n) {
	      return n + n;
	    });
	  }

	  return colors ? "rgb".concat(colors.length === 4 ? 'a' : '', "(").concat(colors.map(function (n, index) {
	    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;
	  }).join(', '), ")") : '';
	}
	/**
	 * Converts a color from hsl format to rgb format.
	 *
	 * @param {string} color - HSL color values
	 * @returns {string} rgb color values
	 */

	function hslToRgb(color) {
	  color = decomposeColor(color);
	  var _color = color,
	      values = _color.values;
	  var h = values[0];
	  var s = values[1] / 100;
	  var l = values[2] / 100;
	  var a = s * Math.min(l, 1 - l);

	  var f = function f(n) {
	    var k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (n + h / 30) % 12;
	    return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
	  };

	  var type = 'rgb';
	  var rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];

	  if (color.type === 'hsla') {
	    type += 'a';
	    rgb.push(values[3]);
	  }

	  return recomposeColor({
	    type: type,
	    values: rgb
	  });
	}
	/**
	 * Returns an object with the type and values of a color.
	 *
	 * Note: Does not support rgb % values.
	 *
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @returns {object} - A MUI color object: {type: string, values: number[]}
	 */

	function decomposeColor(color) {
	  // Idempotent
	  if (color.type) {
	    return color;
	  }

	  if (color.charAt(0) === '#') {
	    return decomposeColor(hexToRgb(color));
	  }

	  var marker = color.indexOf('(');
	  var type = color.substring(0, marker);

	  if (['rgb', 'rgba', 'hsl', 'hsla'].indexOf(type) === -1) {
	    throw new Error(process.env.NODE_ENV !== "production" ? "Material-UI: Unsupported `".concat(color, "` color.\nWe support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla().") : formatMuiErrorMessage(3, color));
	  }

	  var values = color.substring(marker + 1, color.length - 1).split(',');
	  values = values.map(function (value) {
	    return parseFloat(value);
	  });
	  return {
	    type: type,
	    values: values
	  };
	}
	/**
	 * Converts a color object with type and values to a string.
	 *
	 * @param {object} color - Decomposed color
	 * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'
	 * @param {array} color.values - [n,n,n] or [n,n,n,n]
	 * @returns {string} A CSS color string
	 */

	function recomposeColor(color) {
	  var type = color.type;
	  var values = color.values;

	  if (type.indexOf('rgb') !== -1) {
	    // Only convert the first 3 values to int (i.e. not alpha)
	    values = values.map(function (n, i) {
	      return i < 3 ? parseInt(n, 10) : n;
	    });
	  } else if (type.indexOf('hsl') !== -1) {
	    values[1] = "".concat(values[1], "%");
	    values[2] = "".concat(values[2], "%");
	  }

	  return "".concat(type, "(").concat(values.join(', '), ")");
	}
	/**
	 * Calculates the contrast ratio between two colors.
	 *
	 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
	 *
	 * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @returns {number} A contrast ratio value in the range 0 - 21.
	 */

	function getContrastRatio(foreground, background) {
	  var lumA = getLuminance(foreground);
	  var lumB = getLuminance(background);
	  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
	}
	/**
	 * The relative brightness of any point in a color space,
	 * normalized to 0 for darkest black and 1 for lightest white.
	 *
	 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
	 *
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @returns {number} The relative brightness of the color in the range 0 - 1
	 */

	function getLuminance(color) {
	  color = decomposeColor(color);
	  var rgb = color.type === 'hsl' ? decomposeColor(hslToRgb(color)).values : color.values;
	  rgb = rgb.map(function (val) {
	    val /= 255; // normalized

	    return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);
	  }); // Truncate at 3 digits

	  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
	}
	/**
	 * Set the absolute transparency of a color.
	 * Any existing alpha values are overwritten.
	 *
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @param {number} value - value to set the alpha channel to in the range 0 -1
	 * @returns {string} A CSS color string. Hex input values are returned as rgb
	 */

	function fade(color, value) {
	  color = decomposeColor(color);
	  value = clamp(value);

	  if (color.type === 'rgb' || color.type === 'hsl') {
	    color.type += 'a';
	  }

	  color.values[3] = value;
	  return recomposeColor(color);
	}
	/**
	 * Darkens a color.
	 *
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @param {number} coefficient - multiplier in the range 0 - 1
	 * @returns {string} A CSS color string. Hex input values are returned as rgb
	 */

	function darken(color, coefficient) {
	  color = decomposeColor(color);
	  coefficient = clamp(coefficient);

	  if (color.type.indexOf('hsl') !== -1) {
	    color.values[2] *= 1 - coefficient;
	  } else if (color.type.indexOf('rgb') !== -1) {
	    for (var i = 0; i < 3; i += 1) {
	      color.values[i] *= 1 - coefficient;
	    }
	  }

	  return recomposeColor(color);
	}
	/**
	 * Lightens a color.
	 *
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @param {number} coefficient - multiplier in the range 0 - 1
	 * @returns {string} A CSS color string. Hex input values are returned as rgb
	 */

	function lighten(color, coefficient) {
	  color = decomposeColor(color);
	  coefficient = clamp(coefficient);

	  if (color.type.indexOf('hsl') !== -1) {
	    color.values[2] += (100 - color.values[2]) * coefficient;
	  } else if (color.type.indexOf('rgb') !== -1) {
	    for (var i = 0; i < 3; i += 1) {
	      color.values[i] += (255 - color.values[i]) * coefficient;
	    }
	  }

	  return recomposeColor(color);
	}

	function _objectWithoutPropertiesLoose(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	function _objectWithoutProperties(source, excluded) {
	  if (source == null) return {};
	  var target = _objectWithoutPropertiesLoose(source, excluded);
	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	// Sorted ASC by size. That's important.
	// It can't be configured as it's used statically for propTypes.
	var keys = ['xs', 'sm', 'md', 'lg', 'xl']; // Keep in mind that @media is inclusive by the CSS specification.

	function createBreakpoints(breakpoints) {
	  var _breakpoints$values = breakpoints.values,
	      values = _breakpoints$values === void 0 ? {
	    xs: 0,
	    sm: 600,
	    md: 960,
	    lg: 1280,
	    xl: 1920
	  } : _breakpoints$values,
	      _breakpoints$unit = breakpoints.unit,
	      unit = _breakpoints$unit === void 0 ? 'px' : _breakpoints$unit,
	      _breakpoints$step = breakpoints.step,
	      step = _breakpoints$step === void 0 ? 5 : _breakpoints$step,
	      other = _objectWithoutProperties(breakpoints, ["values", "unit", "step"]);

	  function up(key) {
	    var value = typeof values[key] === 'number' ? values[key] : key;
	    return "@media (min-width:".concat(value).concat(unit, ")");
	  }

	  function down(key) {
	    var endIndex = keys.indexOf(key) + 1;
	    var upperbound = values[keys[endIndex]];

	    if (endIndex === keys.length) {
	      // xl down applies to all sizes
	      return up('xs');
	    }

	    var value = typeof upperbound === 'number' && endIndex > 0 ? upperbound : key;
	    return "@media (max-width:".concat(value - step / 100).concat(unit, ")");
	  }

	  function between(start, end) {
	    var endIndex = keys.indexOf(end);

	    if (endIndex === keys.length - 1) {
	      return up(start);
	    }

	    return "@media (min-width:".concat(typeof values[start] === 'number' ? values[start] : start).concat(unit, ") and ") + "(max-width:".concat((endIndex !== -1 && typeof values[keys[endIndex + 1]] === 'number' ? values[keys[endIndex + 1]] : end) - step / 100).concat(unit, ")");
	  }

	  function only(key) {
	    return between(key, key);
	  }

	  function width(key) {
	    return values[key];
	  }

	  return _extends({
	    keys: keys,
	    values: values,
	    up: up,
	    down: down,
	    between: between,
	    only: only,
	    width: width
	  }, other);
	}

	function createMixins(breakpoints, spacing, mixins) {
	  var _toolbar;

	  return _extends({
	    gutters: function gutters() {
	      var styles = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	      // To deprecate in v4.1
	      //       warning(
	      //         false,
	      //         [
	      //           'Material-UI: Theme.mixins.gutters() is deprecated.',
	      //           'You can use the source of the mixin directly:',
	      //           `
	      // paddingLeft: theme.spacing(2),
	      // paddingRight: theme.spacing(2),
	      // [theme.breakpoints.up('sm')]: {
	      //   paddingLeft: theme.spacing(3),
	      //   paddingRight: theme.spacing(3),
	      // },
	      // `,
	      //         ].join('\n'),
	      //       );
	      return _extends({
	        paddingLeft: spacing(2),
	        paddingRight: spacing(2)
	      }, styles, _defineProperty({}, breakpoints.up('sm'), _extends({
	        paddingLeft: spacing(3),
	        paddingRight: spacing(3)
	      }, styles[breakpoints.up('sm')])));
	    },
	    toolbar: (_toolbar = {
	      minHeight: 56
	    }, _defineProperty(_toolbar, "".concat(breakpoints.up('xs'), " and (orientation: landscape)"), {
	      minHeight: 48
	    }), _defineProperty(_toolbar, breakpoints.up('sm'), {
	      minHeight: 64
	    }), _toolbar)
	  }, mixins);
	}

	var light = {
	  // The colors used to style the text.
	  text: {
	    // The most important text.
	    primary: 'rgba(0, 0, 0, 0.87)',
	    // Secondary text.
	    secondary: 'rgba(0, 0, 0, 0.54)',
	    // Disabled text have even lower visual prominence.
	    disabled: 'rgba(0, 0, 0, 0.38)',
	    // Text hints.
	    hint: 'rgba(0, 0, 0, 0.38)'
	  },
	  // The color used to divide different elements.
	  divider: 'rgba(0, 0, 0, 0.12)',
	  // The background colors used to style the surfaces.
	  // Consistency between these values is important.
	  background: {
	    paper: common.white,
	    default: grey[50]
	  },
	  // The colors used to style the action elements.
	  action: {
	    // The color of an active action like an icon button.
	    active: 'rgba(0, 0, 0, 0.54)',
	    // The color of an hovered action.
	    hover: 'rgba(0, 0, 0, 0.04)',
	    hoverOpacity: 0.04,
	    // The color of a selected action.
	    selected: 'rgba(0, 0, 0, 0.08)',
	    selectedOpacity: 0.08,
	    // The color of a disabled action.
	    disabled: 'rgba(0, 0, 0, 0.26)',
	    // The background color of a disabled action.
	    disabledBackground: 'rgba(0, 0, 0, 0.12)',
	    disabledOpacity: 0.38,
	    focus: 'rgba(0, 0, 0, 0.12)',
	    focusOpacity: 0.12,
	    activatedOpacity: 0.12
	  }
	};
	var dark = {
	  text: {
	    primary: common.white,
	    secondary: 'rgba(255, 255, 255, 0.7)',
	    disabled: 'rgba(255, 255, 255, 0.5)',
	    hint: 'rgba(255, 255, 255, 0.5)',
	    icon: 'rgba(255, 255, 255, 0.5)'
	  },
	  divider: 'rgba(255, 255, 255, 0.12)',
	  background: {
	    paper: grey[800],
	    default: '#303030'
	  },
	  action: {
	    active: common.white,
	    hover: 'rgba(255, 255, 255, 0.08)',
	    hoverOpacity: 0.08,
	    selected: 'rgba(255, 255, 255, 0.16)',
	    selectedOpacity: 0.16,
	    disabled: 'rgba(255, 255, 255, 0.3)',
	    disabledBackground: 'rgba(255, 255, 255, 0.12)',
	    disabledOpacity: 0.38,
	    focus: 'rgba(255, 255, 255, 0.12)',
	    focusOpacity: 0.12,
	    activatedOpacity: 0.24
	  }
	};

	function addLightOrDark(intent, direction, shade, tonalOffset) {
	  var tonalOffsetLight = tonalOffset.light || tonalOffset;
	  var tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;

	  if (!intent[direction]) {
	    if (intent.hasOwnProperty(shade)) {
	      intent[direction] = intent[shade];
	    } else if (direction === 'light') {
	      intent.light = lighten(intent.main, tonalOffsetLight);
	    } else if (direction === 'dark') {
	      intent.dark = darken(intent.main, tonalOffsetDark);
	    }
	  }
	}

	function createPalette(palette) {
	  var _palette$primary = palette.primary,
	      primary = _palette$primary === void 0 ? {
	    light: indigo[300],
	    main: indigo[500],
	    dark: indigo[700]
	  } : _palette$primary,
	      _palette$secondary = palette.secondary,
	      secondary = _palette$secondary === void 0 ? {
	    light: pink.A200,
	    main: pink.A400,
	    dark: pink.A700
	  } : _palette$secondary,
	      _palette$error = palette.error,
	      error = _palette$error === void 0 ? {
	    light: red[300],
	    main: red[500],
	    dark: red[700]
	  } : _palette$error,
	      _palette$warning = palette.warning,
	      warning = _palette$warning === void 0 ? {
	    light: orange[300],
	    main: orange[500],
	    dark: orange[700]
	  } : _palette$warning,
	      _palette$info = palette.info,
	      info = _palette$info === void 0 ? {
	    light: blue[300],
	    main: blue[500],
	    dark: blue[700]
	  } : _palette$info,
	      _palette$success = palette.success,
	      success = _palette$success === void 0 ? {
	    light: green[300],
	    main: green[500],
	    dark: green[700]
	  } : _palette$success,
	      _palette$type = palette.type,
	      type = _palette$type === void 0 ? 'light' : _palette$type,
	      _palette$contrastThre = palette.contrastThreshold,
	      contrastThreshold = _palette$contrastThre === void 0 ? 3 : _palette$contrastThre,
	      _palette$tonalOffset = palette.tonalOffset,
	      tonalOffset = _palette$tonalOffset === void 0 ? 0.2 : _palette$tonalOffset,
	      other = _objectWithoutProperties(palette, ["primary", "secondary", "error", "warning", "info", "success", "type", "contrastThreshold", "tonalOffset"]); // Use the same logic as
	  // Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59
	  // and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54


	  function getContrastText(background) {
	    var contrastText = getContrastRatio(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;

	    if (process.env.NODE_ENV !== 'production') {
	      var contrast = getContrastRatio(background, contrastText);

	      if (contrast < 3) {
	        console.error(["Material-UI: The contrast ratio of ".concat(contrast, ":1 for ").concat(contrastText, " on ").concat(background), 'falls below the WCAG recommended absolute minimum contrast ratio of 3:1.', 'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast'].join('\n'));
	      }
	    }

	    return contrastText;
	  }

	  var augmentColor = function augmentColor(color) {
	    var mainShade = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;
	    var lightShade = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 300;
	    var darkShade = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 700;
	    color = _extends({}, color);

	    if (!color.main && color[mainShade]) {
	      color.main = color[mainShade];
	    }

	    if (!color.main) {
	      throw new Error(process.env.NODE_ENV !== "production" ? "Material-UI: The color provided to augmentColor(color) is invalid.\nThe color object needs to have a `main` property or a `".concat(mainShade, "` property.") : formatMuiErrorMessage(4, mainShade));
	    }

	    if (typeof color.main !== 'string') {
	      throw new Error(process.env.NODE_ENV !== "production" ? "Material-UI: The color provided to augmentColor(color) is invalid.\n`color.main` should be a string, but `".concat(JSON.stringify(color.main), "` was provided instead.\n\nDid you intend to use one of the following approaches?\n\nimport {\xA0green } from \"@material-ui/core/colors\";\n\nconst theme1 = createMuiTheme({ palette: {\n  primary: green,\n} });\n\nconst theme2 = createMuiTheme({ palette: {\n  primary: { main: green[500] },\n} });") : formatMuiErrorMessage(5, JSON.stringify(color.main)));
	    }

	    addLightOrDark(color, 'light', lightShade, tonalOffset);
	    addLightOrDark(color, 'dark', darkShade, tonalOffset);

	    if (!color.contrastText) {
	      color.contrastText = getContrastText(color.main);
	    }

	    return color;
	  };

	  var types = {
	    dark: dark,
	    light: light
	  };

	  if (process.env.NODE_ENV !== 'production') {
	    if (!types[type]) {
	      console.error("Material-UI: The palette type `".concat(type, "` is not supported."));
	    }
	  }

	  var paletteOutput = deepmerge(_extends({
	    // A collection of common colors.
	    common: common,
	    // The palette type, can be light or dark.
	    type: type,
	    // The colors used to represent primary interface elements for a user.
	    primary: augmentColor(primary),
	    // The colors used to represent secondary interface elements for a user.
	    secondary: augmentColor(secondary, 'A400', 'A200', 'A700'),
	    // The colors used to represent interface elements that the user should be made aware of.
	    error: augmentColor(error),
	    // The colors used to represent potentially dangerous actions or important messages.
	    warning: augmentColor(warning),
	    // The colors used to present information to the user that is neutral and not necessarily important.
	    info: augmentColor(info),
	    // The colors used to indicate the successful completion of an action that user triggered.
	    success: augmentColor(success),
	    // The grey colors.
	    grey: grey,
	    // Used by `getContrastText()` to maximize the contrast between
	    // the background and the text.
	    contrastThreshold: contrastThreshold,
	    // Takes a background color and returns the text color that maximizes the contrast.
	    getContrastText: getContrastText,
	    // Generate a rich color object.
	    augmentColor: augmentColor,
	    // Used by the functions below to shift a color's luminance by approximately
	    // two indexes within its tonal palette.
	    // E.g., shift from Red 500 to Red 300 or Red 700.
	    tonalOffset: tonalOffset
	  }, types[type]), other);
	  return paletteOutput;
	}

	function round(value) {
	  return Math.round(value * 1e5) / 1e5;
	}

	var caseAllCaps = {
	  textTransform: 'uppercase'
	};
	var defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';
	/**
	 * @see @link{https://material.io/design/typography/the-type-system.html}
	 * @see @link{https://material.io/design/typography/understanding-typography.html}
	 */

	function createTypography(palette, typography) {
	  var _ref = typeof typography === 'function' ? typography(palette) : typography,
	      _ref$fontFamily = _ref.fontFamily,
	      fontFamily = _ref$fontFamily === void 0 ? defaultFontFamily : _ref$fontFamily,
	      _ref$fontSize = _ref.fontSize,
	      fontSize = _ref$fontSize === void 0 ? 14 : _ref$fontSize,
	      _ref$fontWeightLight = _ref.fontWeightLight,
	      fontWeightLight = _ref$fontWeightLight === void 0 ? 300 : _ref$fontWeightLight,
	      _ref$fontWeightRegula = _ref.fontWeightRegular,
	      fontWeightRegular = _ref$fontWeightRegula === void 0 ? 400 : _ref$fontWeightRegula,
	      _ref$fontWeightMedium = _ref.fontWeightMedium,
	      fontWeightMedium = _ref$fontWeightMedium === void 0 ? 500 : _ref$fontWeightMedium,
	      _ref$fontWeightBold = _ref.fontWeightBold,
	      fontWeightBold = _ref$fontWeightBold === void 0 ? 700 : _ref$fontWeightBold,
	      _ref$htmlFontSize = _ref.htmlFontSize,
	      htmlFontSize = _ref$htmlFontSize === void 0 ? 16 : _ref$htmlFontSize,
	      allVariants = _ref.allVariants,
	      pxToRem2 = _ref.pxToRem,
	      other = _objectWithoutProperties(_ref, ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"]);

	  if (process.env.NODE_ENV !== 'production') {
	    if (typeof fontSize !== 'number') {
	      console.error('Material-UI: `fontSize` is required to be a number.');
	    }

	    if (typeof htmlFontSize !== 'number') {
	      console.error('Material-UI: `htmlFontSize` is required to be a number.');
	    }
	  }

	  var coef = fontSize / 14;

	  var pxToRem = pxToRem2 || function (size) {
	    return "".concat(size / htmlFontSize * coef, "rem");
	  };

	  var buildVariant = function buildVariant(fontWeight, size, lineHeight, letterSpacing, casing) {
	    return _extends({
	      fontFamily: fontFamily,
	      fontWeight: fontWeight,
	      fontSize: pxToRem(size),
	      // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
	      lineHeight: lineHeight
	    }, fontFamily === defaultFontFamily ? {
	      letterSpacing: "".concat(round(letterSpacing / size), "em")
	    } : {}, casing, allVariants);
	  };

	  var variants = {
	    h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
	    h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
	    h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
	    h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
	    h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
	    h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
	    subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
	    subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
	    body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
	    body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
	    button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
	    caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
	    overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps)
	  };
	  return deepmerge(_extends({
	    htmlFontSize: htmlFontSize,
	    pxToRem: pxToRem,
	    round: round,
	    // TODO v5: remove
	    fontFamily: fontFamily,
	    fontSize: fontSize,
	    fontWeightLight: fontWeightLight,
	    fontWeightRegular: fontWeightRegular,
	    fontWeightMedium: fontWeightMedium,
	    fontWeightBold: fontWeightBold
	  }, variants), other, {
	    clone: false // No need to clone deep

	  });
	}

	var shadowKeyUmbraOpacity = 0.2;
	var shadowKeyPenumbraOpacity = 0.14;
	var shadowAmbientShadowOpacity = 0.12;

	function createShadow() {
	  return ["".concat(arguments.length <= 0 ? undefined : arguments[0], "px ").concat(arguments.length <= 1 ? undefined : arguments[1], "px ").concat(arguments.length <= 2 ? undefined : arguments[2], "px ").concat(arguments.length <= 3 ? undefined : arguments[3], "px rgba(0,0,0,").concat(shadowKeyUmbraOpacity, ")"), "".concat(arguments.length <= 4 ? undefined : arguments[4], "px ").concat(arguments.length <= 5 ? undefined : arguments[5], "px ").concat(arguments.length <= 6 ? undefined : arguments[6], "px ").concat(arguments.length <= 7 ? undefined : arguments[7], "px rgba(0,0,0,").concat(shadowKeyPenumbraOpacity, ")"), "".concat(arguments.length <= 8 ? undefined : arguments[8], "px ").concat(arguments.length <= 9 ? undefined : arguments[9], "px ").concat(arguments.length <= 10 ? undefined : arguments[10], "px ").concat(arguments.length <= 11 ? undefined : arguments[11], "px rgba(0,0,0,").concat(shadowAmbientShadowOpacity, ")")].join(',');
	} // Values from https://github.com/material-components/material-components-web/blob/be8747f94574669cb5e7add1a7c54fa41a89cec7/packages/mdc-elevation/_variables.scss


	var shadows = ['none', createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];

	var shape = {
	  borderRadius: 4
	};

	var responsivePropType = process.env.NODE_ENV !== 'production' ? propTypes.oneOfType([propTypes.number, propTypes.string, propTypes.object, propTypes.array]) : {};

	function _arrayLikeToArray(arr, len) {
	  if (len == null || len > arr.length) len = arr.length;

	  for (var i = 0, arr2 = new Array(len); i < len; i++) {
	    arr2[i] = arr[i];
	  }

	  return arr2;
	}

	function _arrayWithoutHoles(arr) {
	  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
	}

	function _iterableToArray(iter) {
	  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
	}

	function _unsupportedIterableToArray(o, minLen) {
	  if (!o) return;
	  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
	  var n = Object.prototype.toString.call(o).slice(8, -1);
	  if (n === "Object" && o.constructor) n = o.constructor.name;
	  if (n === "Map" || n === "Set") return Array.from(o);
	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
	}

	function _nonIterableSpread() {
	  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	function _toConsumableArray(arr) {
	  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
	}

	function chainPropTypes$1(propType1, propType2) {
	  if (process.env.NODE_ENV === 'production') {
	    return function () {
	      return null;
	    };
	  }

	  return function validate() {
	    return propType1.apply(void 0, arguments) || propType2.apply(void 0, arguments);
	  };
	}

	function isPlainObject$1(item) {
	  return item && _typeof(item) === 'object' && item.constructor === Object;
	}
	function deepmerge$1(target, source) {
	  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
	    clone: true
	  };
	  var output = options.clone ? _extends({}, target) : target;

	  if (isPlainObject$1(target) && isPlainObject$1(source)) {
	    Object.keys(source).forEach(function (key) {
	      // Avoid prototype pollution
	      if (key === '__proto__') {
	        return;
	      }

	      if (isPlainObject$1(source[key]) && key in target) {
	        output[key] = deepmerge$1(target[key], source[key], options);
	      } else {
	        output[key] = source[key];
	      }
	    });
	  }

	  return output;
	}

	// This module is based on https://github.com/airbnb/prop-types-exact repository.
	// However, in order to reduce the number of dependencies and to remove some extra safe checks
	// the module was forked.
	// Only exported for test purposes.
	var specialProperty$1 = "exact-prop: \u200B";
	function exactProp$1(propTypes) {
	  if (process.env.NODE_ENV === 'production') {
	    return propTypes;
	  }

	  return _extends({}, propTypes, _defineProperty({}, specialProperty$1, function (props) {
	    var unsupportedProps = Object.keys(props).filter(function (prop) {
	      return !propTypes.hasOwnProperty(prop);
	    });

	    if (unsupportedProps.length > 0) {
	      return new Error("The following props are not supported: ".concat(unsupportedProps.map(function (prop) {
	        return "`".concat(prop, "`");
	      }).join(', '), ". Please remove them."));
	    }

	    return null;
	  }));
	}

	// https://github.com/JamesMGreene/Function.name/blob/58b314d4a983110c3682f1228f845d39ccca1817/Function.name.js#L3

	var fnNameMatchRegex$1 = /^\s*function(?:\s|\s*\/\*.*\*\/\s*)+([^(\s/]*)\s*/;
	function getFunctionName$1(fn) {
	  var match = "".concat(fn).match(fnNameMatchRegex$1);
	  var name = match && match[1];
	  return name || '';
	}
	/**
	 * @param {function} Component
	 * @param {string} fallback
	 * @returns {string | undefined}
	 */

	function getFunctionComponentName$1(Component) {
	  var fallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
	  return Component.displayName || Component.name || getFunctionName$1(Component) || fallback;
	}

	function getWrappedName$1(outerType, innerType, wrapperName) {
	  var functionName = getFunctionComponentName$1(innerType);
	  return outerType.displayName || (functionName !== '' ? "".concat(wrapperName, "(").concat(functionName, ")") : wrapperName);
	}
	/**
	 * cherry-pick from
	 * https://github.com/facebook/react/blob/769b1f270e1251d9dbdce0fcbd9e92e502d059b8/packages/shared/getComponentName.js
	 * originally forked from recompose/getDisplayName with added IE 11 support
	 *
	 * @param {React.ReactType} Component
	 * @returns {string | undefined}
	 */


	function getDisplayName$1(Component) {
	  if (Component == null) {
	    return undefined;
	  }

	  if (typeof Component === 'string') {
	    return Component;
	  }

	  if (typeof Component === 'function') {
	    return getFunctionComponentName$1(Component, 'Component');
	  }

	  if (_typeof(Component) === 'object') {
	    switch (Component.$$typeof) {
	      case reactIs_2:
	        return getWrappedName$1(Component, Component.render, 'ForwardRef');

	      case reactIs_3:
	        return getWrappedName$1(Component, Component.type, 'memo');

	      default:
	        return undefined;
	    }
	  }

	  return undefined;
	}

	function merge(acc, item) {
	  if (!item) {
	    return acc;
	  }

	  return deepmerge$1(acc, item, {
	    clone: false // No need to clone deep, it's way faster.

	  });
	}

	// For instance with the first breakpoint xs: [xs, sm[.

	var values = {
	  xs: 0,
	  sm: 600,
	  md: 960,
	  lg: 1280,
	  xl: 1920
	};
	var defaultBreakpoints = {
	  // Sorted ASC by size. That's important.
	  // It can't be configured as it's used statically for propTypes.
	  keys: ['xs', 'sm', 'md', 'lg', 'xl'],
	  up: function up(key) {
	    return "@media (min-width:".concat(values[key], "px)");
	  }
	};
	function handleBreakpoints(props, propValue, styleFromPropValue) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (!props.theme) {
	      console.error('Material-UI: You are calling a style function without a theme value.');
	    }
	  }

	  if (Array.isArray(propValue)) {
	    var themeBreakpoints = props.theme.breakpoints || defaultBreakpoints;
	    return propValue.reduce(function (acc, item, index) {
	      acc[themeBreakpoints.up(themeBreakpoints.keys[index])] = styleFromPropValue(propValue[index]);
	      return acc;
	    }, {});
	  }

	  if (_typeof(propValue) === 'object') {
	    var _themeBreakpoints = props.theme.breakpoints || defaultBreakpoints;

	    return Object.keys(propValue).reduce(function (acc, breakpoint) {
	      acc[_themeBreakpoints.up(breakpoint)] = styleFromPropValue(propValue[breakpoint]);
	      return acc;
	    }, {});
	  }

	  var output = styleFromPropValue(propValue);
	  return output;
	}

	function breakpoints(styleFunction) {
	  var newStyleFunction = function newStyleFunction(props) {
	    var base = styleFunction(props);
	    var themeBreakpoints = props.theme.breakpoints || defaultBreakpoints;
	    var extended = themeBreakpoints.keys.reduce(function (acc, key) {
	      if (props[key]) {
	        acc = acc || {};
	        acc[themeBreakpoints.up(key)] = styleFunction(_extends({
	          theme: props.theme
	        }, props[key]));
	      }

	      return acc;
	    }, null);
	    return merge(base, extended);
	  };

	  newStyleFunction.propTypes = process.env.NODE_ENV !== 'production' ? _extends(_extends({}, styleFunction.propTypes), {}, {
	    xs: propTypes.object,
	    sm: propTypes.object,
	    md: propTypes.object,
	    lg: propTypes.object,
	    xl: propTypes.object
	  }) : {};
	  newStyleFunction.filterProps = ['xs', 'sm', 'md', 'lg', 'xl'].concat(_toConsumableArray(styleFunction.filterProps));
	  return newStyleFunction;
	}

	function getPath(obj, path) {
	  if (!path || typeof path !== 'string') {
	    return null;
	  }

	  return path.split('.').reduce(function (acc, item) {
	    return acc && acc[item] ? acc[item] : null;
	  }, obj);
	}

	function style(options) {
	  var prop = options.prop,
	      _options$cssProperty = options.cssProperty,
	      cssProperty = _options$cssProperty === void 0 ? options.prop : _options$cssProperty,
	      themeKey = options.themeKey,
	      transform = options.transform;

	  var fn = function fn(props) {
	    if (props[prop] == null) {
	      return null;
	    }

	    var propValue = props[prop];
	    var theme = props.theme;
	    var themeMapping = getPath(theme, themeKey) || {};

	    var styleFromPropValue = function styleFromPropValue(propValueFinal) {
	      var value;

	      if (typeof themeMapping === 'function') {
	        value = themeMapping(propValueFinal);
	      } else if (Array.isArray(themeMapping)) {
	        value = themeMapping[propValueFinal] || propValueFinal;
	      } else {
	        value = getPath(themeMapping, propValueFinal) || propValueFinal;

	        if (transform) {
	          value = transform(value);
	        }
	      }

	      if (cssProperty === false) {
	        return value;
	      }

	      return _defineProperty({}, cssProperty, value);
	    };

	    return handleBreakpoints(props, propValue, styleFromPropValue);
	  };

	  fn.propTypes = process.env.NODE_ENV !== 'production' ? _defineProperty({}, prop, responsivePropType) : {};
	  fn.filterProps = [prop];
	  return fn;
	}

	function compose() {
	  for (var _len = arguments.length, styles = new Array(_len), _key = 0; _key < _len; _key++) {
	    styles[_key] = arguments[_key];
	  }

	  var fn = function fn(props) {
	    return styles.reduce(function (acc, style) {
	      var output = style(props);

	      if (output) {
	        return merge(acc, output);
	      }

	      return acc;
	    }, {});
	  }; // Alternative approach that doesn't yield any performance gain.
	  // const handlers = styles.reduce((acc, style) => {
	  //   style.filterProps.forEach(prop => {
	  //     acc[prop] = style;
	  //   });
	  //   return acc;
	  // }, {});
	  // const fn = props => {
	  //   return Object.keys(props).reduce((acc, prop) => {
	  //     if (handlers[prop]) {
	  //       return merge(acc, handlers[prop](props));
	  //     }
	  //     return acc;
	  //   }, {});
	  // };


	  fn.propTypes = process.env.NODE_ENV !== 'production' ? styles.reduce(function (acc, style) {
	    return _extends(acc, style.propTypes);
	  }, {}) : {};
	  fn.filterProps = styles.reduce(function (acc, style) {
	    return acc.concat(style.filterProps);
	  }, []);
	  return fn;
	}

	function getBorder(value) {
	  if (typeof value !== 'number') {
	    return value;
	  }

	  return "".concat(value, "px solid");
	}

	var border = style({
	  prop: 'border',
	  themeKey: 'borders',
	  transform: getBorder
	});
	var borderTop = style({
	  prop: 'borderTop',
	  themeKey: 'borders',
	  transform: getBorder
	});
	var borderRight = style({
	  prop: 'borderRight',
	  themeKey: 'borders',
	  transform: getBorder
	});
	var borderBottom = style({
	  prop: 'borderBottom',
	  themeKey: 'borders',
	  transform: getBorder
	});
	var borderLeft = style({
	  prop: 'borderLeft',
	  themeKey: 'borders',
	  transform: getBorder
	});
	var borderColor = style({
	  prop: 'borderColor',
	  themeKey: 'palette'
	});
	var borderRadius = style({
	  prop: 'borderRadius',
	  themeKey: 'shape'
	});
	var borders = compose(border, borderTop, borderRight, borderBottom, borderLeft, borderColor, borderRadius);

	function omit(input, fields) {
	  var output = {};
	  Object.keys(input).forEach(function (prop) {
	    if (fields.indexOf(prop) === -1) {
	      output[prop] = input[prop];
	    }
	  });
	  return output;
	}

	function css(styleFunction) {
	  var newStyleFunction = function newStyleFunction(props) {
	    var output = styleFunction(props);

	    if (props.css) {
	      return _extends(_extends({}, merge(output, styleFunction(_extends({
	        theme: props.theme
	      }, props.css)))), omit(props.css, [styleFunction.filterProps]));
	    }

	    return output;
	  };

	  newStyleFunction.propTypes = process.env.NODE_ENV !== 'production' ? _extends(_extends({}, styleFunction.propTypes), {}, {
	    css: propTypes.object
	  }) : {};
	  newStyleFunction.filterProps = ['css'].concat(_toConsumableArray(styleFunction.filterProps));
	  return newStyleFunction;
	}

	var displayPrint = style({
	  prop: 'displayPrint',
	  cssProperty: false,
	  transform: function transform(value) {
	    return {
	      '@media print': {
	        display: value
	      }
	    };
	  }
	});
	var displayRaw = style({
	  prop: 'display'
	});
	var overflow = style({
	  prop: 'overflow'
	});
	var textOverflow = style({
	  prop: 'textOverflow'
	});
	var visibility = style({
	  prop: 'visibility'
	});
	var whiteSpace = style({
	  prop: 'whiteSpace'
	});
	var display = compose(displayPrint, displayRaw, overflow, textOverflow, visibility, whiteSpace);

	var flexBasis = style({
	  prop: 'flexBasis'
	});
	var flexDirection = style({
	  prop: 'flexDirection'
	});
	var flexWrap = style({
	  prop: 'flexWrap'
	});
	var justifyContent = style({
	  prop: 'justifyContent'
	});
	var alignItems = style({
	  prop: 'alignItems'
	});
	var alignContent = style({
	  prop: 'alignContent'
	});
	var order = style({
	  prop: 'order'
	});
	var flex = style({
	  prop: 'flex'
	});
	var flexGrow = style({
	  prop: 'flexGrow'
	});
	var flexShrink = style({
	  prop: 'flexShrink'
	});
	var alignSelf = style({
	  prop: 'alignSelf'
	});
	var justifyItems = style({
	  prop: 'justifyItems'
	});
	var justifySelf = style({
	  prop: 'justifySelf'
	});
	var flexbox = compose(flexBasis, flexDirection, flexWrap, justifyContent, alignItems, alignContent, order, flex, flexGrow, flexShrink, alignSelf, justifyItems, justifySelf);

	var gridGap = style({
	  prop: 'gridGap'
	});
	var gridColumnGap = style({
	  prop: 'gridColumnGap'
	});
	var gridRowGap = style({
	  prop: 'gridRowGap'
	});
	var gridColumn = style({
	  prop: 'gridColumn'
	});
	var gridRow = style({
	  prop: 'gridRow'
	});
	var gridAutoFlow = style({
	  prop: 'gridAutoFlow'
	});
	var gridAutoColumns = style({
	  prop: 'gridAutoColumns'
	});
	var gridAutoRows = style({
	  prop: 'gridAutoRows'
	});
	var gridTemplateColumns = style({
	  prop: 'gridTemplateColumns'
	});
	var gridTemplateRows = style({
	  prop: 'gridTemplateRows'
	});
	var gridTemplateAreas = style({
	  prop: 'gridTemplateAreas'
	});
	var gridArea = style({
	  prop: 'gridArea'
	});
	var grid = compose(gridGap, gridColumnGap, gridRowGap, gridColumn, gridRow, gridAutoFlow, gridAutoColumns, gridAutoRows, gridTemplateColumns, gridTemplateRows, gridTemplateAreas, gridArea);

	var color = style({
	  prop: 'color',
	  themeKey: 'palette'
	});
	var bgcolor = style({
	  prop: 'bgcolor',
	  cssProperty: 'backgroundColor',
	  themeKey: 'palette'
	});
	var palette = compose(color, bgcolor);

	var position = style({
	  prop: 'position'
	});
	var zIndex = style({
	  prop: 'zIndex',
	  themeKey: 'zIndex'
	});
	var top = style({
	  prop: 'top'
	});
	var right = style({
	  prop: 'right'
	});
	var bottom = style({
	  prop: 'bottom'
	});
	var left = style({
	  prop: 'left'
	});
	var positions = compose(position, zIndex, top, right, bottom, left);

	var boxShadow = style({
	  prop: 'boxShadow',
	  themeKey: 'shadows'
	});

	function transform(value) {
	  return value <= 1 ? "".concat(value * 100, "%") : value;
	}

	var width = style({
	  prop: 'width',
	  transform: transform
	});
	var maxWidth = style({
	  prop: 'maxWidth',
	  transform: transform
	});
	var minWidth = style({
	  prop: 'minWidth',
	  transform: transform
	});
	var height = style({
	  prop: 'height',
	  transform: transform
	});
	var maxHeight = style({
	  prop: 'maxHeight',
	  transform: transform
	});
	var minHeight = style({
	  prop: 'minHeight',
	  transform: transform
	});
	var sizeWidth = style({
	  prop: 'size',
	  cssProperty: 'width',
	  transform: transform
	});
	var sizeHeight = style({
	  prop: 'size',
	  cssProperty: 'height',
	  transform: transform
	});
	var boxSizing = style({
	  prop: 'boxSizing'
	});
	var sizing = compose(width, maxWidth, minWidth, height, maxHeight, minHeight, boxSizing);

	function _arrayWithHoles(arr) {
	  if (Array.isArray(arr)) return arr;
	}

	function _iterableToArrayLimit(arr, i) {
	  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
	  var _arr = [];
	  var _n = true;
	  var _d = false;
	  var _e = undefined;

	  try {
	    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	      _arr.push(_s.value);

	      if (i && _arr.length === i) break;
	    }
	  } catch (err) {
	    _d = true;
	    _e = err;
	  } finally {
	    try {
	      if (!_n && _i["return"] != null) _i["return"]();
	    } finally {
	      if (_d) throw _e;
	    }
	  }

	  return _arr;
	}

	function _nonIterableRest() {
	  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	function _slicedToArray(arr, i) {
	  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
	}

	function memoize(fn) {
	  var cache = {};
	  return function (arg) {
	    if (cache[arg] === undefined) {
	      cache[arg] = fn(arg);
	    }

	    return cache[arg];
	  };
	}

	var properties = {
	  m: 'margin',
	  p: 'padding'
	};
	var directions = {
	  t: 'Top',
	  r: 'Right',
	  b: 'Bottom',
	  l: 'Left',
	  x: ['Left', 'Right'],
	  y: ['Top', 'Bottom']
	};
	var aliases = {
	  marginX: 'mx',
	  marginY: 'my',
	  paddingX: 'px',
	  paddingY: 'py'
	}; // memoize() impact:
	// From 300,000 ops/sec
	// To 350,000 ops/sec

	var getCssProperties = memoize(function (prop) {
	  // It's not a shorthand notation.
	  if (prop.length > 2) {
	    if (aliases[prop]) {
	      prop = aliases[prop];
	    } else {
	      return [prop];
	    }
	  }

	  var _prop$split = prop.split(''),
	      _prop$split2 = _slicedToArray(_prop$split, 2),
	      a = _prop$split2[0],
	      b = _prop$split2[1];

	  var property = properties[a];
	  var direction = directions[b] || '';
	  return Array.isArray(direction) ? direction.map(function (dir) {
	    return property + dir;
	  }) : [property + direction];
	});
	var spacingKeys = ['m', 'mt', 'mr', 'mb', 'ml', 'mx', 'my', 'p', 'pt', 'pr', 'pb', 'pl', 'px', 'py', 'margin', 'marginTop', 'marginRight', 'marginBottom', 'marginLeft', 'marginX', 'marginY', 'padding', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft', 'paddingX', 'paddingY'];
	function createUnarySpacing(theme) {
	  var themeSpacing = theme.spacing || 8;

	  if (typeof themeSpacing === 'number') {
	    return function (abs) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (typeof abs !== 'number') {
	          console.error("Material-UI: Expected spacing argument to be a number, got ".concat(abs, "."));
	        }
	      }

	      return themeSpacing * abs;
	    };
	  }

	  if (Array.isArray(themeSpacing)) {
	    return function (abs) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (abs > themeSpacing.length - 1) {
	          console.error(["Material-UI: The value provided (".concat(abs, ") overflows."), "The supported values are: ".concat(JSON.stringify(themeSpacing), "."), "".concat(abs, " > ").concat(themeSpacing.length - 1, ", you need to add the missing values.")].join('\n'));
	        }
	      }

	      return themeSpacing[abs];
	    };
	  }

	  if (typeof themeSpacing === 'function') {
	    return themeSpacing;
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    console.error(["Material-UI: The `theme.spacing` value (".concat(themeSpacing, ") is invalid."), 'It should be a number, an array or a function.'].join('\n'));
	  }

	  return function () {
	    return undefined;
	  };
	}

	function getValue(transformer, propValue) {
	  if (typeof propValue === 'string') {
	    return propValue;
	  }

	  var abs = Math.abs(propValue);
	  var transformed = transformer(abs);

	  if (propValue >= 0) {
	    return transformed;
	  }

	  if (typeof transformed === 'number') {
	    return -transformed;
	  }

	  return "-".concat(transformed);
	}

	function getStyleFromPropValue(cssProperties, transformer) {
	  return function (propValue) {
	    return cssProperties.reduce(function (acc, cssProperty) {
	      acc[cssProperty] = getValue(transformer, propValue);
	      return acc;
	    }, {});
	  };
	}

	function spacing(props) {
	  var theme = props.theme;
	  var transformer = createUnarySpacing(theme);
	  return Object.keys(props).map(function (prop) {
	    // Using a hash computation over an array iteration could be faster, but with only 28 items,
	    // it's doesn't worth the bundle size.
	    if (spacingKeys.indexOf(prop) === -1) {
	      return null;
	    }

	    var cssProperties = getCssProperties(prop);
	    var styleFromPropValue = getStyleFromPropValue(cssProperties, transformer);
	    var propValue = props[prop];
	    return handleBreakpoints(props, propValue, styleFromPropValue);
	  }).reduce(merge, {});
	}

	spacing.propTypes = process.env.NODE_ENV !== 'production' ? spacingKeys.reduce(function (obj, key) {
	  obj[key] = responsivePropType;
	  return obj;
	}, {}) : {};
	spacing.filterProps = spacingKeys;

	var fontFamily = style({
	  prop: 'fontFamily',
	  themeKey: 'typography'
	});
	var fontSize = style({
	  prop: 'fontSize',
	  themeKey: 'typography'
	});
	var fontStyle = style({
	  prop: 'fontStyle',
	  themeKey: 'typography'
	});
	var fontWeight = style({
	  prop: 'fontWeight',
	  themeKey: 'typography'
	});
	var letterSpacing = style({
	  prop: 'letterSpacing'
	});
	var lineHeight = style({
	  prop: 'lineHeight'
	});
	var textAlign = style({
	  prop: 'textAlign'
	});
	var typography = compose(fontFamily, fontSize, fontStyle, fontWeight, letterSpacing, lineHeight, textAlign);

	/** @license Material-UI v4.9.14
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var esm$1 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		borders: borders,
		breakpoints: breakpoints,
		compose: compose,
		css: css,
		display: display,
		flexbox: flexbox,
		grid: grid,
		palette: palette,
		positions: positions,
		shadows: boxShadow,
		sizing: sizing,
		spacing: spacing,
		style: style,
		typography: typography,
		border: border,
		borderTop: borderTop,
		borderRight: borderRight,
		borderBottom: borderBottom,
		borderLeft: borderLeft,
		borderColor: borderColor,
		borderRadius: borderRadius,
		flexBasis: flexBasis,
		flexDirection: flexDirection,
		flexWrap: flexWrap,
		justifyContent: justifyContent,
		alignItems: alignItems,
		alignContent: alignContent,
		order: order,
		flex: flex,
		flexGrow: flexGrow,
		flexShrink: flexShrink,
		alignSelf: alignSelf,
		justifyItems: justifyItems,
		justifySelf: justifySelf,
		gridGap: gridGap,
		gridColumnGap: gridColumnGap,
		gridRowGap: gridRowGap,
		gridColumn: gridColumn,
		gridRow: gridRow,
		gridAutoFlow: gridAutoFlow,
		gridAutoColumns: gridAutoColumns,
		gridAutoRows: gridAutoRows,
		gridTemplateColumns: gridTemplateColumns,
		gridTemplateRows: gridTemplateRows,
		gridTemplateAreas: gridTemplateAreas,
		gridArea: gridArea,
		color: color,
		bgcolor: bgcolor,
		position: position,
		zIndex: zIndex,
		top: top,
		right: right,
		bottom: bottom,
		left: left,
		width: width,
		maxWidth: maxWidth,
		minWidth: minWidth,
		height: height,
		maxHeight: maxHeight,
		minHeight: minHeight,
		sizeWidth: sizeWidth,
		sizeHeight: sizeHeight,
		boxSizing: boxSizing,
		createUnarySpacing: createUnarySpacing,
		fontFamily: fontFamily,
		fontSize: fontSize,
		fontStyle: fontStyle,
		fontWeight: fontWeight,
		letterSpacing: letterSpacing,
		lineHeight: lineHeight,
		textAlign: textAlign
	});

	var warnOnce;
	function createSpacing() {
	  var spacingInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;

	  // Already transformed.
	  if (spacingInput.mui) {
	    return spacingInput;
	  } // Material Design layouts are visually balanced. Most measurements align to an 8dp grid applied, which aligns both spacing and the overall layout.
	  // Smaller components, such as icons and type, can align to a 4dp grid.
	  // https://material.io/design/layout/understanding-layout.html#usage


	  var transform = createUnarySpacing({
	    spacing: spacingInput
	  });

	  var spacing = function spacing() {
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      if (!(args.length <= 4)) {
	        console.error("Material-UI: Too many arguments provided, expected between 0 and 4, got ".concat(args.length));
	      }
	    }

	    if (args.length === 0) {
	      return transform(1);
	    }

	    if (args.length === 1) {
	      return transform(args[0]);
	    }

	    return args.map(function (argument) {
	      if (typeof argument === 'string') {
	        return argument;
	      }

	      var output = transform(argument);
	      return typeof output === 'number' ? "".concat(output, "px") : output;
	    }).join(' ');
	  }; // Backward compatibility, to remove in v5.


	  Object.defineProperty(spacing, 'unit', {
	    get: function get() {
	      if (process.env.NODE_ENV !== 'production') {
	        if (!warnOnce || process.env.NODE_ENV === 'test') {
	          console.error(['Material-UI: theme.spacing.unit usage has been deprecated.', 'It will be removed in v5.', 'You can replace `theme.spacing.unit * y` with `theme.spacing(y)`.', '', 'You can use the `https://github.com/mui-org/material-ui/tree/master/packages/material-ui-codemod/README.md#theme-spacing-api` migration helper to make the process smoother.'].join('\n'));
	        }

	        warnOnce = true;
	      }

	      return spacingInput;
	    }
	  });
	  spacing.mui = true;
	  return spacing;
	}

	// Follow https://material.google.com/motion/duration-easing.html#duration-easing-natural-easing-curves
	// to learn the context in which each easing should be used.
	var easing = {
	  // This is the most common easing curve.
	  easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',
	  // Objects enter the screen at full velocity from off-screen and
	  // slowly decelerate to a resting point.
	  easeOut: 'cubic-bezier(0.0, 0, 0.2, 1)',
	  // Objects leave the screen at full velocity. They do not decelerate when off-screen.
	  easeIn: 'cubic-bezier(0.4, 0, 1, 1)',
	  // The sharp curve is used by objects that may return to the screen at any time.
	  sharp: 'cubic-bezier(0.4, 0, 0.6, 1)'
	}; // Follow https://material.io/guidelines/motion/duration-easing.html#duration-easing-common-durations
	// to learn when use what timing

	var duration = {
	  shortest: 150,
	  shorter: 200,
	  short: 250,
	  // most basic recommended timing
	  standard: 300,
	  // this is to be used in complex animations
	  complex: 375,
	  // recommended when something is entering screen
	  enteringScreen: 225,
	  // recommended when something is leaving screen
	  leavingScreen: 195
	};

	function formatMs(milliseconds) {
	  return "".concat(Math.round(milliseconds), "ms");
	}
	/**
	 * @param {string|Array} props
	 * @param {object} param
	 * @param {string} param.prop
	 * @param {number} param.duration
	 * @param {string} param.easing
	 * @param {number} param.delay
	 */


	var transitions = {
	  easing: easing,
	  duration: duration,
	  create: function create() {
	    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['all'];
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	    var _options$duration = options.duration,
	        durationOption = _options$duration === void 0 ? duration.standard : _options$duration,
	        _options$easing = options.easing,
	        easingOption = _options$easing === void 0 ? easing.easeInOut : _options$easing,
	        _options$delay = options.delay,
	        delay = _options$delay === void 0 ? 0 : _options$delay,
	        other = _objectWithoutProperties(options, ["duration", "easing", "delay"]);

	    if (process.env.NODE_ENV !== 'production') {
	      var isString = function isString(value) {
	        return typeof value === 'string';
	      };

	      var isNumber = function isNumber(value) {
	        return !isNaN(parseFloat(value));
	      };

	      if (!isString(props) && !Array.isArray(props)) {
	        console.error('Material-UI: Argument "props" must be a string or Array.');
	      }

	      if (!isNumber(durationOption) && !isString(durationOption)) {
	        console.error("Material-UI: Argument \"duration\" must be a number or a string but found ".concat(durationOption, "."));
	      }

	      if (!isString(easingOption)) {
	        console.error('Material-UI: Argument "easing" must be a string.');
	      }

	      if (!isNumber(delay) && !isString(delay)) {
	        console.error('Material-UI: Argument "delay" must be a number or a string.');
	      }

	      if (Object.keys(other).length !== 0) {
	        console.error("Material-UI: Unrecognized argument(s) [".concat(Object.keys(other).join(','), "]."));
	      }
	    }

	    return (Array.isArray(props) ? props : [props]).map(function (animatedProp) {
	      return "".concat(animatedProp, " ").concat(typeof durationOption === 'string' ? durationOption : formatMs(durationOption), " ").concat(easingOption, " ").concat(typeof delay === 'string' ? delay : formatMs(delay));
	    }).join(',');
	  },
	  getAutoHeightDuration: function getAutoHeightDuration(height) {
	    if (!height) {
	      return 0;
	    }

	    var constant = height / 36; // https://www.wolframalpha.com/input/?i=(4+%2B+15+*+(x+%2F+36+)+**+0.25+%2B+(x+%2F+36)+%2F+5)+*+10

	    return Math.round((4 + 15 * Math.pow(constant, 0.25) + constant / 5) * 10);
	  }
	};

	// We need to centralize the zIndex definitions as they work
	// like global values in the browser.
	var zIndex$1 = {
	  mobileStepper: 1000,
	  speedDial: 1050,
	  appBar: 1100,
	  drawer: 1200,
	  modal: 1300,
	  snackbar: 1400,
	  tooltip: 1500
	};

	function createMuiTheme() {
	  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	  var _options$breakpoints = options.breakpoints,
	      breakpointsInput = _options$breakpoints === void 0 ? {} : _options$breakpoints,
	      _options$mixins = options.mixins,
	      mixinsInput = _options$mixins === void 0 ? {} : _options$mixins,
	      _options$palette = options.palette,
	      paletteInput = _options$palette === void 0 ? {} : _options$palette,
	      spacingInput = options.spacing,
	      _options$typography = options.typography,
	      typographyInput = _options$typography === void 0 ? {} : _options$typography,
	      other = _objectWithoutProperties(options, ["breakpoints", "mixins", "palette", "spacing", "typography"]);

	  var palette = createPalette(paletteInput);
	  var breakpoints = createBreakpoints(breakpointsInput);
	  var spacing = createSpacing(spacingInput);
	  var muiTheme = deepmerge({
	    breakpoints: breakpoints,
	    direction: 'ltr',
	    mixins: createMixins(breakpoints, spacing, mixinsInput),
	    overrides: {},
	    // Inject custom styles
	    palette: palette,
	    props: {},
	    // Provide default props
	    shadows: shadows,
	    typography: createTypography(palette, typographyInput),
	    spacing: spacing,
	    shape: shape,
	    transitions: transitions,
	    zIndex: zIndex$1
	  }, other);

	  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    args[_key - 1] = arguments[_key];
	  }

	  muiTheme = args.reduce(function (acc, argument) {
	    return deepmerge(acc, argument);
	  }, muiTheme);

	  if (process.env.NODE_ENV !== 'production') {
	    var pseudoClasses = ['checked', 'disabled', 'error', 'focused', 'focusVisible', 'required', 'expanded', 'selected'];

	    var traverse = function traverse(node, parentKey) {
	      var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
	      var key; // eslint-disable-next-line guard-for-in, no-restricted-syntax

	      for (key in node) {
	        var child = node[key];

	        if (depth === 1) {
	          if (key.indexOf('Mui') === 0 && child) {
	            traverse(child, key, depth + 1);
	          }
	        } else if (pseudoClasses.indexOf(key) !== -1 && Object.keys(child).length > 0) {
	          if (process.env.NODE_ENV !== 'production') {
	            console.error(["Material-UI: The `".concat(parentKey, "` component increases ") + "the CSS specificity of the `".concat(key, "` internal state."), 'You can not override it like this: ', JSON.stringify(node, null, 2), '', 'Instead, you need to use the $ruleName syntax:', JSON.stringify({
	              root: _defineProperty({}, "&$".concat(key), child)
	            }, null, 2), '', 'https://material-ui.com/r/pseudo-classes-guide'].join('\n'));
	          } // Remove the style to prevent global conflicts.


	          node[key] = {};
	        }
	      }
	    };

	    traverse(muiTheme.overrides);
	  }

	  return muiTheme;
	}

	var hasSymbol = typeof Symbol === 'function' && Symbol.for;
	var nested = hasSymbol ? Symbol.for('mui.nested') : '__THEME_NESTED__';

	/**
	 * This is the list of the style rule name we use as drop in replacement for the built-in
	 * pseudo classes (:checked, :disabled, :focused, etc.).
	 *
	 * Why do they exist in the first place?
	 * These classes are used at a specificity of 2.
	 * It allows them to override previously definied styles as well as
	 * being untouched by simple user overrides.
	 */

	var pseudoClasses = ['checked', 'disabled', 'error', 'focused', 'focusVisible', 'required', 'expanded', 'selected']; // Returns a function which generates unique class names based on counters.
	// When new generator function is created, rule counter is reset.
	// We need to reset the rule counter for SSR for each request.
	//
	// It's inspired by
	// https://github.com/cssinjs/jss/blob/4e6a05dd3f7b6572fdd3ab216861d9e446c20331/src/utils/createGenerateClassName.js

	function createGenerateClassName() {
	  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  var _options$disableGloba = options.disableGlobal,
	      disableGlobal = _options$disableGloba === void 0 ? false : _options$disableGloba,
	      _options$productionPr = options.productionPrefix,
	      productionPrefix = _options$productionPr === void 0 ? 'jss' : _options$productionPr,
	      _options$seed = options.seed,
	      seed = _options$seed === void 0 ? '' : _options$seed;
	  var seedPrefix = seed === '' ? '' : "".concat(seed, "-");
	  var ruleCounter = 0;

	  var getNextCounterId = function getNextCounterId() {
	    ruleCounter += 1;

	    if (process.env.NODE_ENV !== 'production') {
	      if (ruleCounter >= 1e10) {
	        console.warn(['Material-UI: You might have a memory leak.', 'The ruleCounter is not supposed to grow that much.'].join(''));
	      }
	    }

	    return ruleCounter;
	  };

	  return function (rule, styleSheet) {
	    var name = styleSheet.options.name; // Is a global static MUI style?

	    if (name && name.indexOf('Mui') === 0 && !styleSheet.options.link && !disableGlobal) {
	      // We can use a shorthand class name, we never use the keys to style the components.
	      if (pseudoClasses.indexOf(rule.key) !== -1) {
	        return "Mui-".concat(rule.key);
	      }

	      var prefix = "".concat(seedPrefix).concat(name, "-").concat(rule.key);

	      if (!styleSheet.options.theme[nested] || seed !== '') {
	        return prefix;
	      }

	      return "".concat(prefix, "-").concat(getNextCounterId());
	    }

	    if (process.env.NODE_ENV === 'production') {
	      return "".concat(seedPrefix).concat(productionPrefix).concat(getNextCounterId());
	    }

	    var suffix = "".concat(rule.key, "-").concat(getNextCounterId()); // Help with debuggability.

	    if (styleSheet.options.classNamePrefix) {
	      return "".concat(seedPrefix).concat(styleSheet.options.classNamePrefix, "-").concat(suffix);
	    }

	    return "".concat(seedPrefix).concat(suffix);
	  };
	}

	function createStyles(styles) {
	  return styles;
	}

	/* eslint-disable no-restricted-syntax */
	function getThemeProps(params) {
	  var theme = params.theme,
	      name = params.name,
	      props = params.props;

	  if (!theme || !theme.props || !theme.props[name]) {
	    return props;
	  } // Resolve default props, code borrow from React source.
	  // https://github.com/facebook/react/blob/15a8f031838a553e41c0b66eb1bcf1da8448104d/packages/react/src/ReactElement.js#L221


	  var defaultProps = theme.props[name];
	  var propName;

	  for (propName in defaultProps) {
	    if (props[propName] === undefined) {
	      props[propName] = defaultProps[propName];
	    }
	  }

	  return props;
	}

	var isProduction = process.env.NODE_ENV === 'production';
	function warning(condition, message) {
	  if (!isProduction) {
	    if (condition) {
	      return;
	    }

	    var text = "Warning: " + message;

	    if (typeof console !== 'undefined') {
	      console.warn(text);
	    }

	    try {
	      throw Error(text);
	    } catch (x) {}
	  }
	}

	var _typeof$1 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var isBrowser = (typeof window === "undefined" ? "undefined" : _typeof$1(window)) === "object" && (typeof document === "undefined" ? "undefined" : _typeof$1(document)) === 'object' && document.nodeType === 9;

	function _defineProperties(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties(Constructor, staticProps);
	  return Constructor;
	}

	function _inheritsLoose(subClass, superClass) {
	  subClass.prototype = Object.create(superClass.prototype);
	  subClass.prototype.constructor = subClass;
	  subClass.__proto__ = superClass;
	}

	function _assertThisInitialized(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	var plainObjectConstrurctor = {}.constructor;
	function cloneStyle(style) {
	  if (style == null || typeof style !== 'object') return style;
	  if (Array.isArray(style)) return style.map(cloneStyle);
	  if (style.constructor !== plainObjectConstrurctor) return style;
	  var newStyle = {};

	  for (var name in style) {
	    newStyle[name] = cloneStyle(style[name]);
	  }

	  return newStyle;
	}

	/**
	 * Create a rule instance.
	 */

	function createRule(name, decl, options) {
	  if (name === void 0) {
	    name = 'unnamed';
	  }

	  var jss = options.jss;
	  var declCopy = cloneStyle(decl);
	  var rule = jss.plugins.onCreateRule(name, declCopy, options);
	  if (rule) return rule; // It is an at-rule and it has no instance.

	  if (name[0] === '@') {
	    process.env.NODE_ENV !== "production" ? warning(false, "[JSS] Unknown rule " + name) : void 0;
	  }

	  return null;
	}

	var join = function join(value, by) {
	  var result = '';

	  for (var i = 0; i < value.length; i++) {
	    // Remove !important from the value, it will be readded later.
	    if (value[i] === '!important') break;
	    if (result) result += by;
	    result += value[i];
	  }

	  return result;
	};
	/**
	 * Converts array values to string.
	 *
	 * `margin: [['5px', '10px']]` > `margin: 5px 10px;`
	 * `border: ['1px', '2px']` > `border: 1px, 2px;`
	 * `margin: [['5px', '10px'], '!important']` > `margin: 5px 10px !important;`
	 * `color: ['red', !important]` > `color: red !important;`
	 */


	function toCssValue(value, ignoreImportant) {
	  if (ignoreImportant === void 0) {
	    ignoreImportant = false;
	  }

	  if (!Array.isArray(value)) return value;
	  var cssValue = ''; // Support space separated values via `[['5px', '10px']]`.

	  if (Array.isArray(value[0])) {
	    for (var i = 0; i < value.length; i++) {
	      if (value[i] === '!important') break;
	      if (cssValue) cssValue += ', ';
	      cssValue += join(value[i], ' ');
	    }
	  } else cssValue = join(value, ', '); // Add !important, because it was ignored.


	  if (!ignoreImportant && value[value.length - 1] === '!important') {
	    cssValue += ' !important';
	  }

	  return cssValue;
	}

	/**
	 * Indent a string.
	 * http://jsperf.com/array-join-vs-for
	 */
	function indentStr(str, indent) {
	  var result = '';

	  for (var index = 0; index < indent; index++) {
	    result += '  ';
	  }

	  return result + str;
	}
	/**
	 * Converts a Rule to CSS string.
	 */


	function toCss(selector, style, options) {
	  if (options === void 0) {
	    options = {};
	  }

	  var result = '';
	  if (!style) return result;
	  var _options = options,
	      _options$indent = _options.indent,
	      indent = _options$indent === void 0 ? 0 : _options$indent;
	  var fallbacks = style.fallbacks;
	  if (selector) indent++; // Apply fallbacks first.

	  if (fallbacks) {
	    // Array syntax {fallbacks: [{prop: value}]}
	    if (Array.isArray(fallbacks)) {
	      for (var index = 0; index < fallbacks.length; index++) {
	        var fallback = fallbacks[index];

	        for (var prop in fallback) {
	          var value = fallback[prop];

	          if (value != null) {
	            if (result) result += '\n';
	            result += "" + indentStr(prop + ": " + toCssValue(value) + ";", indent);
	          }
	        }
	      }
	    } else {
	      // Object syntax {fallbacks: {prop: value}}
	      for (var _prop in fallbacks) {
	        var _value = fallbacks[_prop];

	        if (_value != null) {
	          if (result) result += '\n';
	          result += "" + indentStr(_prop + ": " + toCssValue(_value) + ";", indent);
	        }
	      }
	    }
	  }

	  for (var _prop2 in style) {
	    var _value2 = style[_prop2];

	    if (_value2 != null && _prop2 !== 'fallbacks') {
	      if (result) result += '\n';
	      result += "" + indentStr(_prop2 + ": " + toCssValue(_value2) + ";", indent);
	    }
	  } // Allow empty style in this case, because properties will be added dynamically.


	  if (!result && !options.allowEmpty) return result; // When rule is being stringified before selector was defined.

	  if (!selector) return result;
	  indent--;
	  if (result) result = "\n" + result + "\n";
	  return indentStr(selector + " {" + result, indent) + indentStr('}', indent);
	}

	var escapeRegex = /([[\].#*$><+~=|^:(),"'`\s])/g;
	var nativeEscape = typeof CSS !== 'undefined' && CSS.escape;
	var escape$1 = (function (str) {
	  return nativeEscape ? nativeEscape(str) : str.replace(escapeRegex, '\\$1');
	});

	var BaseStyleRule =
	/*#__PURE__*/
	function () {
	  function BaseStyleRule(key, style, options) {
	    this.type = 'style';
	    this.key = void 0;
	    this.isProcessed = false;
	    this.style = void 0;
	    this.renderer = void 0;
	    this.renderable = void 0;
	    this.options = void 0;
	    var sheet = options.sheet,
	        Renderer = options.Renderer;
	    this.key = key;
	    this.options = options;
	    this.style = style;
	    if (sheet) this.renderer = sheet.renderer;else if (Renderer) this.renderer = new Renderer();
	  }
	  /**
	   * Get or set a style property.
	   */


	  var _proto = BaseStyleRule.prototype;

	  _proto.prop = function prop(name, value, options) {
	    // It's a getter.
	    if (value === undefined) return this.style[name]; // Don't do anything if the value has not changed.

	    var force = options ? options.force : false;
	    if (!force && this.style[name] === value) return this;
	    var newValue = value;

	    if (!options || options.process !== false) {
	      newValue = this.options.jss.plugins.onChangeValue(value, name, this);
	    }

	    var isEmpty = newValue == null || newValue === false;
	    var isDefined = name in this.style; // Value is empty and wasn't defined before.

	    if (isEmpty && !isDefined && !force) return this; // We are going to remove this value.

	    var remove = isEmpty && isDefined;
	    if (remove) delete this.style[name];else this.style[name] = newValue; // Renderable is defined if StyleSheet option `link` is true.

	    if (this.renderable && this.renderer) {
	      if (remove) this.renderer.removeProperty(this.renderable, name);else this.renderer.setProperty(this.renderable, name, newValue);
	      return this;
	    }

	    var sheet = this.options.sheet;

	    if (sheet && sheet.attached) {
	      process.env.NODE_ENV !== "production" ? warning(false, '[JSS] Rule is not linked. Missing sheet option "link: true".') : void 0;
	    }

	    return this;
	  };

	  return BaseStyleRule;
	}();
	var StyleRule =
	/*#__PURE__*/
	function (_BaseStyleRule) {
	  _inheritsLoose(StyleRule, _BaseStyleRule);

	  function StyleRule(key, style, options) {
	    var _this;

	    _this = _BaseStyleRule.call(this, key, style, options) || this;
	    _this.selectorText = void 0;
	    _this.id = void 0;
	    _this.renderable = void 0;
	    var selector = options.selector,
	        scoped = options.scoped,
	        sheet = options.sheet,
	        generateId = options.generateId;

	    if (selector) {
	      _this.selectorText = selector;
	    } else if (scoped !== false) {
	      _this.id = generateId(_assertThisInitialized(_assertThisInitialized(_this)), sheet);
	      _this.selectorText = "." + escape$1(_this.id);
	    }

	    return _this;
	  }
	  /**
	   * Set selector string.
	   * Attention: use this with caution. Most browsers didn't implement
	   * selectorText setter, so this may result in rerendering of entire Style Sheet.
	   */


	  var _proto2 = StyleRule.prototype;

	  /**
	   * Apply rule to an element inline.
	   */
	  _proto2.applyTo = function applyTo(renderable) {
	    var renderer = this.renderer;

	    if (renderer) {
	      var json = this.toJSON();

	      for (var prop in json) {
	        renderer.setProperty(renderable, prop, json[prop]);
	      }
	    }

	    return this;
	  }
	  /**
	   * Returns JSON representation of the rule.
	   * Fallbacks are not supported.
	   * Useful for inline styles.
	   */
	  ;

	  _proto2.toJSON = function toJSON() {
	    var json = {};

	    for (var prop in this.style) {
	      var value = this.style[prop];
	      if (typeof value !== 'object') json[prop] = value;else if (Array.isArray(value)) json[prop] = toCssValue(value);
	    }

	    return json;
	  }
	  /**
	   * Generates a CSS string.
	   */
	  ;

	  _proto2.toString = function toString(options) {
	    var sheet = this.options.sheet;
	    var link = sheet ? sheet.options.link : false;
	    var opts = link ? _extends({}, options, {
	      allowEmpty: true
	    }) : options;
	    return toCss(this.selectorText, this.style, opts);
	  };

	  _createClass(StyleRule, [{
	    key: "selector",
	    set: function set(selector) {
	      if (selector === this.selectorText) return;
	      this.selectorText = selector;
	      var renderer = this.renderer,
	          renderable = this.renderable;
	      if (!renderable || !renderer) return;
	      var hasChanged = renderer.setSelector(renderable, selector); // If selector setter is not implemented, rerender the rule.

	      if (!hasChanged) {
	        renderer.replaceRule(renderable, this);
	      }
	    }
	    /**
	     * Get selector string.
	     */
	    ,
	    get: function get() {
	      return this.selectorText;
	    }
	  }]);

	  return StyleRule;
	}(BaseStyleRule);
	var pluginStyleRule = {
	  onCreateRule: function onCreateRule(name, style, options) {
	    if (name[0] === '@' || options.parent && options.parent.type === 'keyframes') {
	      return null;
	    }

	    return new StyleRule(name, style, options);
	  }
	};

	var defaultToStringOptions = {
	  indent: 1,
	  children: true
	};
	var atRegExp = /@([\w-]+)/;
	/**
	 * Conditional rule for @media, @supports
	 */

	var ConditionalRule =
	/*#__PURE__*/
	function () {
	  function ConditionalRule(key, styles, options) {
	    this.type = 'conditional';
	    this.at = void 0;
	    this.key = void 0;
	    this.query = void 0;
	    this.rules = void 0;
	    this.options = void 0;
	    this.isProcessed = false;
	    this.renderable = void 0;
	    this.key = key; // Key might contain a unique suffix in case the `name` passed by user was duplicate.

	    this.query = options.name;
	    var atMatch = key.match(atRegExp);
	    this.at = atMatch ? atMatch[1] : 'unknown';
	    this.options = options;
	    this.rules = new RuleList(_extends({}, options, {
	      parent: this
	    }));

	    for (var name in styles) {
	      this.rules.add(name, styles[name]);
	    }

	    this.rules.process();
	  }
	  /**
	   * Get a rule.
	   */


	  var _proto = ConditionalRule.prototype;

	  _proto.getRule = function getRule(name) {
	    return this.rules.get(name);
	  }
	  /**
	   * Get index of a rule.
	   */
	  ;

	  _proto.indexOf = function indexOf(rule) {
	    return this.rules.indexOf(rule);
	  }
	  /**
	   * Create and register rule, run plugins.
	   */
	  ;

	  _proto.addRule = function addRule(name, style, options) {
	    var rule = this.rules.add(name, style, options);
	    if (!rule) return null;
	    this.options.jss.plugins.onProcessRule(rule);
	    return rule;
	  }
	  /**
	   * Generates a CSS string.
	   */
	  ;

	  _proto.toString = function toString(options) {
	    if (options === void 0) {
	      options = defaultToStringOptions;
	    }

	    if (options.indent == null) options.indent = defaultToStringOptions.indent;
	    if (options.children == null) options.children = defaultToStringOptions.children;

	    if (options.children === false) {
	      return this.query + " {}";
	    }

	    var children = this.rules.toString(options);
	    return children ? this.query + " {\n" + children + "\n}" : '';
	  };

	  return ConditionalRule;
	}();
	var keyRegExp = /@media|@supports\s+/;
	var pluginConditionalRule = {
	  onCreateRule: function onCreateRule(key, styles, options) {
	    return keyRegExp.test(key) ? new ConditionalRule(key, styles, options) : null;
	  }
	};

	var defaultToStringOptions$1 = {
	  indent: 1,
	  children: true
	};
	var nameRegExp = /@keyframes\s+([\w-]+)/;
	/**
	 * Rule for @keyframes
	 */

	var KeyframesRule =
	/*#__PURE__*/
	function () {
	  function KeyframesRule(key, frames, options) {
	    this.type = 'keyframes';
	    this.at = '@keyframes';
	    this.key = void 0;
	    this.name = void 0;
	    this.id = void 0;
	    this.rules = void 0;
	    this.options = void 0;
	    this.isProcessed = false;
	    this.renderable = void 0;
	    var nameMatch = key.match(nameRegExp);

	    if (nameMatch && nameMatch[1]) {
	      this.name = nameMatch[1];
	    } else {
	      this.name = 'noname';
	      process.env.NODE_ENV !== "production" ? warning(false, "[JSS] Bad keyframes name " + key) : void 0;
	    }

	    this.key = this.type + "-" + this.name;
	    this.options = options;
	    var scoped = options.scoped,
	        sheet = options.sheet,
	        generateId = options.generateId;
	    this.id = scoped === false ? this.name : escape$1(generateId(this, sheet));
	    this.rules = new RuleList(_extends({}, options, {
	      parent: this
	    }));

	    for (var name in frames) {
	      this.rules.add(name, frames[name], _extends({}, options, {
	        parent: this
	      }));
	    }

	    this.rules.process();
	  }
	  /**
	   * Generates a CSS string.
	   */


	  var _proto = KeyframesRule.prototype;

	  _proto.toString = function toString(options) {
	    if (options === void 0) {
	      options = defaultToStringOptions$1;
	    }

	    if (options.indent == null) options.indent = defaultToStringOptions$1.indent;
	    if (options.children == null) options.children = defaultToStringOptions$1.children;

	    if (options.children === false) {
	      return this.at + " " + this.id + " {}";
	    }

	    var children = this.rules.toString(options);
	    if (children) children = "\n" + children + "\n";
	    return this.at + " " + this.id + " {" + children + "}";
	  };

	  return KeyframesRule;
	}();
	var keyRegExp$1 = /@keyframes\s+/;
	var refRegExp = /\$([\w-]+)/g;

	var findReferencedKeyframe = function findReferencedKeyframe(val, keyframes) {
	  if (typeof val === 'string') {
	    return val.replace(refRegExp, function (match, name) {
	      if (name in keyframes) {
	        return keyframes[name];
	      }

	      process.env.NODE_ENV !== "production" ? warning(false, "[JSS] Referenced keyframes rule \"" + name + "\" is not defined.") : void 0;
	      return match;
	    });
	  }

	  return val;
	};
	/**
	 * Replace the reference for a animation name.
	 */


	var replaceRef = function replaceRef(style, prop, keyframes) {
	  var value = style[prop];
	  var refKeyframe = findReferencedKeyframe(value, keyframes);

	  if (refKeyframe !== value) {
	    style[prop] = refKeyframe;
	  }
	};

	var plugin = {
	  onCreateRule: function onCreateRule(key, frames, options) {
	    return typeof key === 'string' && keyRegExp$1.test(key) ? new KeyframesRule(key, frames, options) : null;
	  },
	  // Animation name ref replacer.
	  onProcessStyle: function onProcessStyle(style, rule, sheet) {
	    if (rule.type !== 'style' || !sheet) return style;
	    if ('animation-name' in style) replaceRef(style, 'animation-name', sheet.keyframes);
	    if ('animation' in style) replaceRef(style, 'animation', sheet.keyframes);
	    return style;
	  },
	  onChangeValue: function onChangeValue(val, prop, rule) {
	    var sheet = rule.options.sheet;

	    if (!sheet) {
	      return val;
	    }

	    switch (prop) {
	      case 'animation':
	        return findReferencedKeyframe(val, sheet.keyframes);

	      case 'animation-name':
	        return findReferencedKeyframe(val, sheet.keyframes);

	      default:
	        return val;
	    }
	  }
	};

	var KeyframeRule =
	/*#__PURE__*/
	function (_BaseStyleRule) {
	  _inheritsLoose(KeyframeRule, _BaseStyleRule);

	  function KeyframeRule() {
	    var _this;

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _BaseStyleRule.call.apply(_BaseStyleRule, [this].concat(args)) || this;
	    _this.renderable = void 0;
	    return _this;
	  }

	  var _proto = KeyframeRule.prototype;

	  /**
	   * Generates a CSS string.
	   */
	  _proto.toString = function toString(options) {
	    var sheet = this.options.sheet;
	    var link = sheet ? sheet.options.link : false;
	    var opts = link ? _extends({}, options, {
	      allowEmpty: true
	    }) : options;
	    return toCss(this.key, this.style, opts);
	  };

	  return KeyframeRule;
	}(BaseStyleRule);
	var pluginKeyframeRule = {
	  onCreateRule: function onCreateRule(key, style, options) {
	    if (options.parent && options.parent.type === 'keyframes') {
	      return new KeyframeRule(key, style, options);
	    }

	    return null;
	  }
	};

	var FontFaceRule =
	/*#__PURE__*/
	function () {
	  function FontFaceRule(key, style, options) {
	    this.type = 'font-face';
	    this.at = '@font-face';
	    this.key = void 0;
	    this.style = void 0;
	    this.options = void 0;
	    this.isProcessed = false;
	    this.renderable = void 0;
	    this.key = key;
	    this.style = style;
	    this.options = options;
	  }
	  /**
	   * Generates a CSS string.
	   */


	  var _proto = FontFaceRule.prototype;

	  _proto.toString = function toString(options) {
	    if (Array.isArray(this.style)) {
	      var str = '';

	      for (var index = 0; index < this.style.length; index++) {
	        str += toCss(this.at, this.style[index]);
	        if (this.style[index + 1]) str += '\n';
	      }

	      return str;
	    }

	    return toCss(this.at, this.style, options);
	  };

	  return FontFaceRule;
	}();
	var keyRegExp$2 = /@font-face/;
	var pluginFontFaceRule = {
	  onCreateRule: function onCreateRule(key, style, options) {
	    return keyRegExp$2.test(key) ? new FontFaceRule(key, style, options) : null;
	  }
	};

	var ViewportRule =
	/*#__PURE__*/
	function () {
	  function ViewportRule(key, style, options) {
	    this.type = 'viewport';
	    this.at = '@viewport';
	    this.key = void 0;
	    this.style = void 0;
	    this.options = void 0;
	    this.isProcessed = false;
	    this.renderable = void 0;
	    this.key = key;
	    this.style = style;
	    this.options = options;
	  }
	  /**
	   * Generates a CSS string.
	   */


	  var _proto = ViewportRule.prototype;

	  _proto.toString = function toString(options) {
	    return toCss(this.key, this.style, options);
	  };

	  return ViewportRule;
	}();
	var pluginViewportRule = {
	  onCreateRule: function onCreateRule(key, style, options) {
	    return key === '@viewport' || key === '@-ms-viewport' ? new ViewportRule(key, style, options) : null;
	  }
	};

	var SimpleRule =
	/*#__PURE__*/
	function () {
	  function SimpleRule(key, value, options) {
	    this.type = 'simple';
	    this.key = void 0;
	    this.value = void 0;
	    this.options = void 0;
	    this.isProcessed = false;
	    this.renderable = void 0;
	    this.key = key;
	    this.value = value;
	    this.options = options;
	  }
	  /**
	   * Generates a CSS string.
	   */
	  // eslint-disable-next-line no-unused-vars


	  var _proto = SimpleRule.prototype;

	  _proto.toString = function toString(options) {
	    if (Array.isArray(this.value)) {
	      var str = '';

	      for (var index = 0; index < this.value.length; index++) {
	        str += this.key + " " + this.value[index] + ";";
	        if (this.value[index + 1]) str += '\n';
	      }

	      return str;
	    }

	    return this.key + " " + this.value + ";";
	  };

	  return SimpleRule;
	}();
	var keysMap = {
	  '@charset': true,
	  '@import': true,
	  '@namespace': true
	};
	var pluginSimpleRule = {
	  onCreateRule: function onCreateRule(key, value, options) {
	    return key in keysMap ? new SimpleRule(key, value, options) : null;
	  }
	};

	var plugins = [pluginStyleRule, pluginConditionalRule, plugin, pluginKeyframeRule, pluginFontFaceRule, pluginViewportRule, pluginSimpleRule];

	var defaultUpdateOptions = {
	  process: true
	};
	var forceUpdateOptions = {
	  force: true,
	  process: true
	  /**
	   * Contains rules objects and allows adding/removing etc.
	   * Is used for e.g. by `StyleSheet` or `ConditionalRule`.
	   */

	};

	var RuleList =
	/*#__PURE__*/
	function () {
	  // Rules registry for access by .get() method.
	  // It contains the same rule registered by name and by selector.
	  // Original styles object.
	  // Used to ensure correct rules order.
	  function RuleList(options) {
	    this.map = {};
	    this.raw = {};
	    this.index = [];
	    this.counter = 0;
	    this.options = void 0;
	    this.classes = void 0;
	    this.keyframes = void 0;
	    this.options = options;
	    this.classes = options.classes;
	    this.keyframes = options.keyframes;
	  }
	  /**
	   * Create and register rule.
	   *
	   * Will not render after Style Sheet was rendered the first time.
	   */


	  var _proto = RuleList.prototype;

	  _proto.add = function add(name, decl, ruleOptions) {
	    var _this$options = this.options,
	        parent = _this$options.parent,
	        sheet = _this$options.sheet,
	        jss = _this$options.jss,
	        Renderer = _this$options.Renderer,
	        generateId = _this$options.generateId,
	        scoped = _this$options.scoped;

	    var options = _extends({
	      classes: this.classes,
	      parent: parent,
	      sheet: sheet,
	      jss: jss,
	      Renderer: Renderer,
	      generateId: generateId,
	      scoped: scoped,
	      name: name
	    }, ruleOptions); // When user uses .createStyleSheet(), duplicate names are not possible, but
	    // `sheet.addRule()` opens the door for any duplicate rule name. When this happens
	    // we need to make the key unique within this RuleList instance scope.


	    var key = name;

	    if (name in this.raw) {
	      key = name + "-d" + this.counter++;
	    } // We need to save the original decl before creating the rule
	    // because cache plugin needs to use it as a key to return a cached rule.


	    this.raw[key] = decl;

	    if (key in this.classes) {
	      // E.g. rules inside of @media container
	      options.selector = "." + escape$1(this.classes[key]);
	    }

	    var rule = createRule(key, decl, options);
	    if (!rule) return null;
	    this.register(rule);
	    var index = options.index === undefined ? this.index.length : options.index;
	    this.index.splice(index, 0, rule);
	    return rule;
	  }
	  /**
	   * Get a rule.
	   */
	  ;

	  _proto.get = function get(name) {
	    return this.map[name];
	  }
	  /**
	   * Delete a rule.
	   */
	  ;

	  _proto.remove = function remove(rule) {
	    this.unregister(rule);
	    delete this.raw[rule.key];
	    this.index.splice(this.index.indexOf(rule), 1);
	  }
	  /**
	   * Get index of a rule.
	   */
	  ;

	  _proto.indexOf = function indexOf(rule) {
	    return this.index.indexOf(rule);
	  }
	  /**
	   * Run `onProcessRule()` plugins on every rule.
	   */
	  ;

	  _proto.process = function process() {
	    var plugins = this.options.jss.plugins; // We need to clone array because if we modify the index somewhere else during a loop
	    // we end up with very hard-to-track-down side effects.

	    this.index.slice(0).forEach(plugins.onProcessRule, plugins);
	  }
	  /**
	   * Register a rule in `.map`, `.classes` and `.keyframes` maps.
	   */
	  ;

	  _proto.register = function register(rule) {
	    this.map[rule.key] = rule;

	    if (rule instanceof StyleRule) {
	      this.map[rule.selector] = rule;
	      if (rule.id) this.classes[rule.key] = rule.id;
	    } else if (rule instanceof KeyframesRule && this.keyframes) {
	      this.keyframes[rule.name] = rule.id;
	    }
	  }
	  /**
	   * Unregister a rule.
	   */
	  ;

	  _proto.unregister = function unregister(rule) {
	    delete this.map[rule.key];

	    if (rule instanceof StyleRule) {
	      delete this.map[rule.selector];
	      delete this.classes[rule.key];
	    } else if (rule instanceof KeyframesRule) {
	      delete this.keyframes[rule.name];
	    }
	  }
	  /**
	   * Update the function values with a new data.
	   */
	  ;

	  _proto.update = function update() {
	    var name;
	    var data;
	    var options;

	    if (typeof (arguments.length <= 0 ? undefined : arguments[0]) === 'string') {
	      name = arguments.length <= 0 ? undefined : arguments[0]; // $FlowFixMe

	      data = arguments.length <= 1 ? undefined : arguments[1]; // $FlowFixMe

	      options = arguments.length <= 2 ? undefined : arguments[2];
	    } else {
	      data = arguments.length <= 0 ? undefined : arguments[0]; // $FlowFixMe

	      options = arguments.length <= 1 ? undefined : arguments[1];
	      name = null;
	    }

	    if (name) {
	      this.updateOne(this.map[name], data, options);
	    } else {
	      for (var index = 0; index < this.index.length; index++) {
	        this.updateOne(this.index[index], data, options);
	      }
	    }
	  }
	  /**
	   * Execute plugins, update rule props.
	   */
	  ;

	  _proto.updateOne = function updateOne(rule, data, options) {
	    if (options === void 0) {
	      options = defaultUpdateOptions;
	    }

	    var _this$options2 = this.options,
	        plugins = _this$options2.jss.plugins,
	        sheet = _this$options2.sheet; // It is a rules container like for e.g. ConditionalRule.

	    if (rule.rules instanceof RuleList) {
	      rule.rules.update(data, options);
	      return;
	    }

	    var styleRule = rule;
	    var style = styleRule.style;
	    plugins.onUpdate(data, rule, sheet, options); // We rely on a new `style` ref in case it was mutated during onUpdate hook.

	    if (options.process && style && style !== styleRule.style) {
	      // We need to run the plugins in case new `style` relies on syntax plugins.
	      plugins.onProcessStyle(styleRule.style, styleRule, sheet); // Update and add props.

	      for (var prop in styleRule.style) {
	        var nextValue = styleRule.style[prop];
	        var prevValue = style[prop]; // We need to use `force: true` because `rule.style` has been updated during onUpdate hook, so `rule.prop()` will not update the CSSOM rule.
	        // We do this comparison to avoid unneeded `rule.prop()` calls, since we have the old `style` object here.

	        if (nextValue !== prevValue) {
	          styleRule.prop(prop, nextValue, forceUpdateOptions);
	        }
	      } // Remove props.


	      for (var _prop in style) {
	        var _nextValue = styleRule.style[_prop];
	        var _prevValue = style[_prop]; // We need to use `force: true` because `rule.style` has been updated during onUpdate hook, so `rule.prop()` will not update the CSSOM rule.
	        // We do this comparison to avoid unneeded `rule.prop()` calls, since we have the old `style` object here.

	        if (_nextValue == null && _nextValue !== _prevValue) {
	          styleRule.prop(_prop, null, forceUpdateOptions);
	        }
	      }
	    }
	  }
	  /**
	   * Convert rules to a CSS string.
	   */
	  ;

	  _proto.toString = function toString(options) {
	    var str = '';
	    var sheet = this.options.sheet;
	    var link = sheet ? sheet.options.link : false;

	    for (var index = 0; index < this.index.length; index++) {
	      var rule = this.index[index];
	      var css = rule.toString(options); // No need to render an empty rule.

	      if (!css && !link) continue;
	      if (str) str += '\n';
	      str += css;
	    }

	    return str;
	  };

	  return RuleList;
	}();

	var StyleSheet =
	/*#__PURE__*/
	function () {
	  function StyleSheet(styles, options) {
	    this.options = void 0;
	    this.deployed = void 0;
	    this.attached = void 0;
	    this.rules = void 0;
	    this.renderer = void 0;
	    this.classes = void 0;
	    this.keyframes = void 0;
	    this.queue = void 0;
	    this.attached = false;
	    this.deployed = false;
	    this.classes = {};
	    this.keyframes = {};
	    this.options = _extends({}, options, {
	      sheet: this,
	      parent: this,
	      classes: this.classes,
	      keyframes: this.keyframes
	    });

	    if (options.Renderer) {
	      this.renderer = new options.Renderer(this);
	    }

	    this.rules = new RuleList(this.options);

	    for (var name in styles) {
	      this.rules.add(name, styles[name]);
	    }

	    this.rules.process();
	  }
	  /**
	   * Attach renderable to the render tree.
	   */


	  var _proto = StyleSheet.prototype;

	  _proto.attach = function attach() {
	    if (this.attached) return this;
	    if (this.renderer) this.renderer.attach();
	    this.attached = true; // Order is important, because we can't use insertRule API if style element is not attached.

	    if (!this.deployed) this.deploy();
	    return this;
	  }
	  /**
	   * Remove renderable from render tree.
	   */
	  ;

	  _proto.detach = function detach() {
	    if (!this.attached) return this;
	    if (this.renderer) this.renderer.detach();
	    this.attached = false;
	    return this;
	  }
	  /**
	   * Add a rule to the current stylesheet.
	   * Will insert a rule also after the stylesheet has been rendered first time.
	   */
	  ;

	  _proto.addRule = function addRule(name, decl, options) {
	    var queue = this.queue; // Plugins can create rules.
	    // In order to preserve the right order, we need to queue all `.addRule` calls,
	    // which happen after the first `rules.add()` call.

	    if (this.attached && !queue) this.queue = [];
	    var rule = this.rules.add(name, decl, options);
	    if (!rule) return null;
	    this.options.jss.plugins.onProcessRule(rule);

	    if (this.attached) {
	      if (!this.deployed) return rule; // Don't insert rule directly if there is no stringified version yet.
	      // It will be inserted all together when .attach is called.

	      if (queue) queue.push(rule);else {
	        this.insertRule(rule);

	        if (this.queue) {
	          this.queue.forEach(this.insertRule, this);
	          this.queue = undefined;
	        }
	      }
	      return rule;
	    } // We can't add rules to a detached style node.
	    // We will redeploy the sheet once user will attach it.


	    this.deployed = false;
	    return rule;
	  }
	  /**
	   * Insert rule into the StyleSheet
	   */
	  ;

	  _proto.insertRule = function insertRule(rule) {
	    if (this.renderer) {
	      this.renderer.insertRule(rule);
	    }
	  }
	  /**
	   * Create and add rules.
	   * Will render also after Style Sheet was rendered the first time.
	   */
	  ;

	  _proto.addRules = function addRules(styles, options) {
	    var added = [];

	    for (var name in styles) {
	      var rule = this.addRule(name, styles[name], options);
	      if (rule) added.push(rule);
	    }

	    return added;
	  }
	  /**
	   * Get a rule by name.
	   */
	  ;

	  _proto.getRule = function getRule(name) {
	    return this.rules.get(name);
	  }
	  /**
	   * Delete a rule by name.
	   * Returns `true`: if rule has been deleted from the DOM.
	   */
	  ;

	  _proto.deleteRule = function deleteRule(name) {
	    var rule = typeof name === 'object' ? name : this.rules.get(name);
	    if (!rule) return false;
	    this.rules.remove(rule);

	    if (this.attached && rule.renderable && this.renderer) {
	      return this.renderer.deleteRule(rule.renderable);
	    }

	    return true;
	  }
	  /**
	   * Get index of a rule.
	   */
	  ;

	  _proto.indexOf = function indexOf(rule) {
	    return this.rules.indexOf(rule);
	  }
	  /**
	   * Deploy pure CSS string to a renderable.
	   */
	  ;

	  _proto.deploy = function deploy() {
	    if (this.renderer) this.renderer.deploy();
	    this.deployed = true;
	    return this;
	  }
	  /**
	   * Update the function values with a new data.
	   */
	  ;

	  _proto.update = function update() {
	    var _this$rules;

	    (_this$rules = this.rules).update.apply(_this$rules, arguments);

	    return this;
	  }
	  /**
	   * Updates a single rule.
	   */
	  ;

	  _proto.updateOne = function updateOne(rule, data, options) {
	    this.rules.updateOne(rule, data, options);
	    return this;
	  }
	  /**
	   * Convert rules to a CSS string.
	   */
	  ;

	  _proto.toString = function toString(options) {
	    return this.rules.toString(options);
	  };

	  return StyleSheet;
	}();

	var PluginsRegistry =
	/*#__PURE__*/
	function () {
	  function PluginsRegistry() {
	    this.plugins = {
	      internal: [],
	      external: []
	    };
	    this.registry = void 0;
	  }

	  var _proto = PluginsRegistry.prototype;

	  /**
	   * Call `onCreateRule` hooks and return an object if returned by a hook.
	   */
	  _proto.onCreateRule = function onCreateRule(name, decl, options) {
	    for (var i = 0; i < this.registry.onCreateRule.length; i++) {
	      var rule = this.registry.onCreateRule[i](name, decl, options);
	      if (rule) return rule;
	    }

	    return null;
	  }
	  /**
	   * Call `onProcessRule` hooks.
	   */
	  ;

	  _proto.onProcessRule = function onProcessRule(rule) {
	    if (rule.isProcessed) return;
	    var sheet = rule.options.sheet;

	    for (var i = 0; i < this.registry.onProcessRule.length; i++) {
	      this.registry.onProcessRule[i](rule, sheet);
	    }

	    if (rule.style) this.onProcessStyle(rule.style, rule, sheet);
	    rule.isProcessed = true;
	  }
	  /**
	   * Call `onProcessStyle` hooks.
	   */
	  ;

	  _proto.onProcessStyle = function onProcessStyle(style, rule, sheet) {
	    for (var i = 0; i < this.registry.onProcessStyle.length; i++) {
	      // $FlowFixMe
	      rule.style = this.registry.onProcessStyle[i](rule.style, rule, sheet);
	    }
	  }
	  /**
	   * Call `onProcessSheet` hooks.
	   */
	  ;

	  _proto.onProcessSheet = function onProcessSheet(sheet) {
	    for (var i = 0; i < this.registry.onProcessSheet.length; i++) {
	      this.registry.onProcessSheet[i](sheet);
	    }
	  }
	  /**
	   * Call `onUpdate` hooks.
	   */
	  ;

	  _proto.onUpdate = function onUpdate(data, rule, sheet, options) {
	    for (var i = 0; i < this.registry.onUpdate.length; i++) {
	      this.registry.onUpdate[i](data, rule, sheet, options);
	    }
	  }
	  /**
	   * Call `onChangeValue` hooks.
	   */
	  ;

	  _proto.onChangeValue = function onChangeValue(value, prop, rule) {
	    var processedValue = value;

	    for (var i = 0; i < this.registry.onChangeValue.length; i++) {
	      processedValue = this.registry.onChangeValue[i](processedValue, prop, rule);
	    }

	    return processedValue;
	  }
	  /**
	   * Register a plugin.
	   */
	  ;

	  _proto.use = function use(newPlugin, options) {
	    if (options === void 0) {
	      options = {
	        queue: 'external'
	      };
	    }

	    var plugins = this.plugins[options.queue]; // Avoids applying same plugin twice, at least based on ref.

	    if (plugins.indexOf(newPlugin) !== -1) {
	      return;
	    }

	    plugins.push(newPlugin);
	    this.registry = [].concat(this.plugins.external, this.plugins.internal).reduce(function (registry, plugin) {
	      for (var name in plugin) {
	        if (name in registry) {
	          registry[name].push(plugin[name]);
	        } else {
	          process.env.NODE_ENV !== "production" ? warning(false, "[JSS] Unknown hook \"" + name + "\".") : void 0;
	        }
	      }

	      return registry;
	    }, {
	      onCreateRule: [],
	      onProcessRule: [],
	      onProcessStyle: [],
	      onProcessSheet: [],
	      onChangeValue: [],
	      onUpdate: []
	    });
	  };

	  return PluginsRegistry;
	}();

	/**
	 * Sheets registry to access them all at one place.
	 */
	var SheetsRegistry =
	/*#__PURE__*/
	function () {
	  function SheetsRegistry() {
	    this.registry = [];
	  }

	  var _proto = SheetsRegistry.prototype;

	  /**
	   * Register a Style Sheet.
	   */
	  _proto.add = function add(sheet) {
	    var registry = this.registry;
	    var index = sheet.options.index;
	    if (registry.indexOf(sheet) !== -1) return;

	    if (registry.length === 0 || index >= this.index) {
	      registry.push(sheet);
	      return;
	    } // Find a position.


	    for (var i = 0; i < registry.length; i++) {
	      if (registry[i].options.index > index) {
	        registry.splice(i, 0, sheet);
	        return;
	      }
	    }
	  }
	  /**
	   * Reset the registry.
	   */
	  ;

	  _proto.reset = function reset() {
	    this.registry = [];
	  }
	  /**
	   * Remove a Style Sheet.
	   */
	  ;

	  _proto.remove = function remove(sheet) {
	    var index = this.registry.indexOf(sheet);
	    this.registry.splice(index, 1);
	  }
	  /**
	   * Convert all attached sheets to a CSS string.
	   */
	  ;

	  _proto.toString = function toString(_temp) {
	    var _ref = _temp === void 0 ? {} : _temp,
	        attached = _ref.attached,
	        options = _objectWithoutPropertiesLoose(_ref, ["attached"]);

	    var css = '';

	    for (var i = 0; i < this.registry.length; i++) {
	      var sheet = this.registry[i];

	      if (attached != null && sheet.attached !== attached) {
	        continue;
	      }

	      if (css) css += '\n';
	      css += sheet.toString(options);
	    }

	    return css;
	  };

	  _createClass(SheetsRegistry, [{
	    key: "index",

	    /**
	     * Current highest index number.
	     */
	    get: function get() {
	      return this.registry.length === 0 ? 0 : this.registry[this.registry.length - 1].options.index;
	    }
	  }]);

	  return SheetsRegistry;
	}();

	/**
	 * This is a global sheets registry. Only DomRenderer will add sheets to it.
	 * On the server one should use an own SheetsRegistry instance and add the
	 * sheets to it, because you need to make sure to create a new registry for
	 * each request in order to not leak sheets across requests.
	 */

	var sheets = new SheetsRegistry();

	/* eslint-disable */
	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var globalThis$1 = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();

	var ns = '2f1acc6c3a606b082e5eef5e54414ffb';
	if (globalThis$1[ns] == null) globalThis$1[ns] = 0; // Bundle may contain multiple JSS versions at the same time. In order to identify
	// the current version with just one short number and use it for classes generation
	// we use a counter. Also it is more accurate, because user can manually reevaluate
	// the module.

	var moduleId = globalThis$1[ns]++;

	var maxRules = 1e10;

	/**
	 * Returns a function which generates unique class names based on counters.
	 * When new generator function is created, rule counter is reseted.
	 * We need to reset the rule counter for SSR for each request.
	 */
	var createGenerateId = function createGenerateId(options) {
	  if (options === void 0) {
	    options = {};
	  }

	  var ruleCounter = 0;
	  return function (rule, sheet) {
	    ruleCounter += 1;

	    if (ruleCounter > maxRules) {
	      process.env.NODE_ENV !== "production" ? warning(false, "[JSS] You might have a memory leak. Rule counter is at " + ruleCounter + ".") : void 0;
	    }

	    var jssId = '';
	    var prefix = '';

	    if (sheet) {
	      if (sheet.options.classNamePrefix) {
	        prefix = sheet.options.classNamePrefix;
	      }

	      if (sheet.options.jss.id != null) {
	        jssId = String(sheet.options.jss.id);
	      }
	    }

	    if (options.minify) {
	      // Using "c" because a number can't be the first char in a class name.
	      return "" + (prefix || 'c') + moduleId + jssId + ruleCounter;
	    }

	    return prefix + rule.key + "-" + moduleId + (jssId ? "-" + jssId : '') + "-" + ruleCounter;
	  };
	};

	/**
	 * Cache the value from the first time a function is called.
	 */
	var memoize$1 = function memoize(fn) {
	  var value;
	  return function () {
	    if (!value) value = fn();
	    return value;
	  };
	};
	/**
	 * Get a style property value.
	 */


	function getPropertyValue(cssRule, prop) {
	  try {
	    // Support CSSTOM.
	    if (cssRule.attributeStyleMap) {
	      return cssRule.attributeStyleMap.get(prop);
	    }

	    return cssRule.style.getPropertyValue(prop);
	  } catch (err) {
	    // IE may throw if property is unknown.
	    return '';
	  }
	}
	/**
	 * Set a style property.
	 */


	function setProperty(cssRule, prop, value) {
	  try {
	    var cssValue = value;

	    if (Array.isArray(value)) {
	      cssValue = toCssValue(value, true);

	      if (value[value.length - 1] === '!important') {
	        cssRule.style.setProperty(prop, cssValue, 'important');
	        return true;
	      }
	    } // Support CSSTOM.


	    if (cssRule.attributeStyleMap) {
	      cssRule.attributeStyleMap.set(prop, cssValue);
	    } else {
	      cssRule.style.setProperty(prop, cssValue);
	    }
	  } catch (err) {
	    // IE may throw if property is unknown.
	    return false;
	  }

	  return true;
	}
	/**
	 * Remove a style property.
	 */


	function removeProperty(cssRule, prop) {
	  try {
	    // Support CSSTOM.
	    if (cssRule.attributeStyleMap) {
	      cssRule.attributeStyleMap.delete(prop);
	    } else {
	      cssRule.style.removeProperty(prop);
	    }
	  } catch (err) {
	    process.env.NODE_ENV !== "production" ? warning(false, "[JSS] DOMException \"" + err.message + "\" was thrown. Tried to remove property \"" + prop + "\".") : void 0;
	  }
	}
	/**
	 * Set the selector.
	 */


	function setSelector(cssRule, selectorText) {
	  cssRule.selectorText = selectorText; // Return false if setter was not successful.
	  // Currently works in chrome only.

	  return cssRule.selectorText === selectorText;
	}
	/**
	 * Gets the `head` element upon the first call and caches it.
	 * We assume it can't be null.
	 */


	var getHead = memoize$1(function () {
	  return document.querySelector('head');
	});
	/**
	 * Find attached sheet with an index higher than the passed one.
	 */

	function findHigherSheet(registry, options) {
	  for (var i = 0; i < registry.length; i++) {
	    var sheet = registry[i];

	    if (sheet.attached && sheet.options.index > options.index && sheet.options.insertionPoint === options.insertionPoint) {
	      return sheet;
	    }
	  }

	  return null;
	}
	/**
	 * Find attached sheet with the highest index.
	 */


	function findHighestSheet(registry, options) {
	  for (var i = registry.length - 1; i >= 0; i--) {
	    var sheet = registry[i];

	    if (sheet.attached && sheet.options.insertionPoint === options.insertionPoint) {
	      return sheet;
	    }
	  }

	  return null;
	}
	/**
	 * Find a comment with "jss" inside.
	 */


	function findCommentNode(text) {
	  var head = getHead();

	  for (var i = 0; i < head.childNodes.length; i++) {
	    var node = head.childNodes[i];

	    if (node.nodeType === 8 && node.nodeValue.trim() === text) {
	      return node;
	    }
	  }

	  return null;
	}

	/**
	 * Find a node before which we can insert the sheet.
	 */
	function findPrevNode(options) {
	  var registry = sheets.registry;

	  if (registry.length > 0) {
	    // Try to insert before the next higher sheet.
	    var sheet = findHigherSheet(registry, options);

	    if (sheet && sheet.renderer) {
	      return {
	        parent: sheet.renderer.element.parentNode,
	        node: sheet.renderer.element
	      };
	    } // Otherwise insert after the last attached.


	    sheet = findHighestSheet(registry, options);

	    if (sheet && sheet.renderer) {
	      return {
	        parent: sheet.renderer.element.parentNode,
	        node: sheet.renderer.element.nextSibling
	      };
	    }
	  } // Try to find a comment placeholder if registry is empty.


	  var insertionPoint = options.insertionPoint;

	  if (insertionPoint && typeof insertionPoint === 'string') {
	    var comment = findCommentNode(insertionPoint);

	    if (comment) {
	      return {
	        parent: comment.parentNode,
	        node: comment.nextSibling
	      };
	    } // If user specifies an insertion point and it can't be found in the document -
	    // bad specificity issues may appear.


	    process.env.NODE_ENV !== "production" ? warning(false, "[JSS] Insertion point \"" + insertionPoint + "\" not found.") : void 0;
	  }

	  return false;
	}
	/**
	 * Insert style element into the DOM.
	 */


	function insertStyle(style, options) {
	  var insertionPoint = options.insertionPoint;
	  var nextNode = findPrevNode(options);

	  if (nextNode !== false && nextNode.parent) {
	    nextNode.parent.insertBefore(style, nextNode.node);
	    return;
	  } // Works with iframes and any node types.


	  if (insertionPoint && typeof insertionPoint.nodeType === 'number') {
	    // https://stackoverflow.com/questions/41328728/force-casting-in-flow
	    var insertionPointElement = insertionPoint;
	    var parentNode = insertionPointElement.parentNode;
	    if (parentNode) parentNode.insertBefore(style, insertionPointElement.nextSibling);else process.env.NODE_ENV !== "production" ? warning(false, '[JSS] Insertion point is not in the DOM.') : void 0;
	    return;
	  }

	  getHead().appendChild(style);
	}
	/**
	 * Read jss nonce setting from the page if the user has set it.
	 */


	var getNonce = memoize$1(function () {
	  var node = document.querySelector('meta[property="csp-nonce"]');
	  return node ? node.getAttribute('content') : null;
	});

	var _insertRule = function insertRule(container, rule, index) {
	  var maxIndex = container.cssRules.length; // In case previous insertion fails, passed index might be wrong

	  if (index === undefined || index > maxIndex) {
	    // eslint-disable-next-line no-param-reassign
	    index = maxIndex;
	  }

	  try {
	    if ('insertRule' in container) {
	      var c = container;
	      c.insertRule(rule, index);
	    } // Keyframes rule.
	    else if ('appendRule' in container) {
	        var _c = container;

	        _c.appendRule(rule);
	      }
	  } catch (err) {
	    process.env.NODE_ENV !== "production" ? warning(false, "[JSS] " + err.message) : void 0;
	    return false;
	  }

	  return container.cssRules[index];
	};

	var createStyle = function createStyle() {
	  var el = document.createElement('style'); // Without it, IE will have a broken source order specificity if we
	  // insert rules after we insert the style tag.
	  // It seems to kick-off the source order specificity algorithm.

	  el.textContent = '\n';
	  return el;
	};

	var DomRenderer =
	/*#__PURE__*/
	function () {
	  // HTMLStyleElement needs fixing https://github.com/facebook/flow/issues/2696
	  function DomRenderer(sheet) {
	    this.getPropertyValue = getPropertyValue;
	    this.setProperty = setProperty;
	    this.removeProperty = removeProperty;
	    this.setSelector = setSelector;
	    this.element = void 0;
	    this.sheet = void 0;
	    this.hasInsertedRules = false;
	    // There is no sheet when the renderer is used from a standalone StyleRule.
	    if (sheet) sheets.add(sheet);
	    this.sheet = sheet;

	    var _ref = this.sheet ? this.sheet.options : {},
	        media = _ref.media,
	        meta = _ref.meta,
	        element = _ref.element;

	    this.element = element || createStyle();
	    this.element.setAttribute('data-jss', '');
	    if (media) this.element.setAttribute('media', media);
	    if (meta) this.element.setAttribute('data-meta', meta);
	    var nonce = getNonce();
	    if (nonce) this.element.setAttribute('nonce', nonce);
	  }
	  /**
	   * Insert style element into render tree.
	   */


	  var _proto = DomRenderer.prototype;

	  _proto.attach = function attach() {
	    // In the case the element node is external and it is already in the DOM.
	    if (this.element.parentNode || !this.sheet) return;
	    insertStyle(this.element, this.sheet.options); // When rules are inserted using `insertRule` API, after `sheet.detach().attach()`
	    // most browsers create a new CSSStyleSheet, except of all IEs.

	    var deployed = Boolean(this.sheet && this.sheet.deployed);

	    if (this.hasInsertedRules && deployed) {
	      this.hasInsertedRules = false;
	      this.deploy();
	    }
	  }
	  /**
	   * Remove style element from render tree.
	   */
	  ;

	  _proto.detach = function detach() {
	    var parentNode = this.element.parentNode;
	    if (parentNode) parentNode.removeChild(this.element);
	  }
	  /**
	   * Inject CSS string into element.
	   */
	  ;

	  _proto.deploy = function deploy() {
	    var sheet = this.sheet;
	    if (!sheet) return;

	    if (sheet.options.link) {
	      this.insertRules(sheet.rules);
	      return;
	    }

	    this.element.textContent = "\n" + sheet.toString() + "\n";
	  }
	  /**
	   * Insert RuleList into an element.
	   */
	  ;

	  _proto.insertRules = function insertRules(rules, nativeParent) {
	    for (var i = 0; i < rules.index.length; i++) {
	      this.insertRule(rules.index[i], i, nativeParent);
	    }
	  }
	  /**
	   * Insert a rule into element.
	   */
	  ;

	  _proto.insertRule = function insertRule(rule, index, nativeParent) {
	    if (nativeParent === void 0) {
	      nativeParent = this.element.sheet;
	    }

	    if (rule.rules) {
	      var parent = rule;
	      var latestNativeParent = nativeParent;

	      if (rule.type === 'conditional' || rule.type === 'keyframes') {
	        // We need to render the container without children first.
	        latestNativeParent = _insertRule(nativeParent, parent.toString({
	          children: false
	        }), index);

	        if (latestNativeParent === false) {
	          return false;
	        }
	      }

	      this.insertRules(parent.rules, latestNativeParent);
	      return latestNativeParent;
	    } // IE keeps the CSSStyleSheet after style node has been reattached,
	    // so we need to check if the `renderable` reference the right style sheet and not
	    // rerender those rules.


	    if (rule.renderable && rule.renderable.parentStyleSheet === this.element.sheet) {
	      return rule.renderable;
	    }

	    var ruleStr = rule.toString();
	    if (!ruleStr) return false;

	    var nativeRule = _insertRule(nativeParent, ruleStr, index);

	    if (nativeRule === false) {
	      return false;
	    }

	    this.hasInsertedRules = true;
	    rule.renderable = nativeRule;
	    return nativeRule;
	  }
	  /**
	   * Delete a rule.
	   */
	  ;

	  _proto.deleteRule = function deleteRule(cssRule) {
	    var sheet = this.element.sheet;
	    var index = this.indexOf(cssRule);
	    if (index === -1) return false;
	    sheet.deleteRule(index);
	    return true;
	  }
	  /**
	   * Get index of a CSS Rule.
	   */
	  ;

	  _proto.indexOf = function indexOf(cssRule) {
	    var cssRules = this.element.sheet.cssRules;

	    for (var index = 0; index < cssRules.length; index++) {
	      if (cssRule === cssRules[index]) return index;
	    }

	    return -1;
	  }
	  /**
	   * Generate a new CSS rule and replace the existing one.
	   *
	   * Only used for some old browsers because they can't set a selector.
	   */
	  ;

	  _proto.replaceRule = function replaceRule(cssRule, rule) {
	    var index = this.indexOf(cssRule);
	    if (index === -1) return false;
	    this.element.sheet.deleteRule(index);
	    return this.insertRule(rule, index);
	  }
	  /**
	   * Get all rules elements.
	   */
	  ;

	  _proto.getRules = function getRules() {
	    return this.element.sheet.cssRules;
	  };

	  return DomRenderer;
	}();

	var instanceCounter = 0;

	var Jss =
	/*#__PURE__*/
	function () {
	  function Jss(options) {
	    this.id = instanceCounter++;
	    this.version = "10.3.0";
	    this.plugins = new PluginsRegistry();
	    this.options = {
	      id: {
	        minify: false
	      },
	      createGenerateId: createGenerateId,
	      Renderer: isBrowser ? DomRenderer : null,
	      plugins: []
	    };
	    this.generateId = createGenerateId({
	      minify: false
	    });

	    for (var i = 0; i < plugins.length; i++) {
	      this.plugins.use(plugins[i], {
	        queue: 'internal'
	      });
	    }

	    this.setup(options);
	  }
	  /**
	   * Prepares various options, applies plugins.
	   * Should not be used twice on the same instance, because there is no plugins
	   * deduplication logic.
	   */


	  var _proto = Jss.prototype;

	  _proto.setup = function setup(options) {
	    if (options === void 0) {
	      options = {};
	    }

	    if (options.createGenerateId) {
	      this.options.createGenerateId = options.createGenerateId;
	    }

	    if (options.id) {
	      this.options.id = _extends({}, this.options.id, options.id);
	    }

	    if (options.createGenerateId || options.id) {
	      this.generateId = this.options.createGenerateId(this.options.id);
	    }

	    if (options.insertionPoint != null) this.options.insertionPoint = options.insertionPoint;

	    if ('Renderer' in options) {
	      this.options.Renderer = options.Renderer;
	    } // eslint-disable-next-line prefer-spread


	    if (options.plugins) this.use.apply(this, options.plugins);
	    return this;
	  }
	  /**
	   * Create a Style Sheet.
	   */
	  ;

	  _proto.createStyleSheet = function createStyleSheet(styles, options) {
	    if (options === void 0) {
	      options = {};
	    }

	    var _options = options,
	        index = _options.index;

	    if (typeof index !== 'number') {
	      index = sheets.index === 0 ? 0 : sheets.index + 1;
	    }

	    var sheet = new StyleSheet(styles, _extends({}, options, {
	      jss: this,
	      generateId: options.generateId || this.generateId,
	      insertionPoint: this.options.insertionPoint,
	      Renderer: this.options.Renderer,
	      index: index
	    }));
	    this.plugins.onProcessSheet(sheet);
	    return sheet;
	  }
	  /**
	   * Detach the Style Sheet and remove it from the registry.
	   */
	  ;

	  _proto.removeStyleSheet = function removeStyleSheet(sheet) {
	    sheet.detach();
	    sheets.remove(sheet);
	    return this;
	  }
	  /**
	   * Create a rule without a Style Sheet.
	   * [Deprecated] will be removed in the next major version.
	   */
	  ;

	  _proto.createRule = function createRule$1(name, style, options) {
	    if (style === void 0) {
	      style = {};
	    }

	    if (options === void 0) {
	      options = {};
	    }

	    // Enable rule without name for inline styles.
	    if (typeof name === 'object') {
	      return this.createRule(undefined, name, style);
	    }

	    var ruleOptions = _extends({}, options, {
	      name: name,
	      jss: this,
	      Renderer: this.options.Renderer
	    });

	    if (!ruleOptions.generateId) ruleOptions.generateId = this.generateId;
	    if (!ruleOptions.classes) ruleOptions.classes = {};
	    if (!ruleOptions.keyframes) ruleOptions.keyframes = {};

	    var rule = createRule(name, style, ruleOptions);

	    if (rule) this.plugins.onProcessRule(rule);
	    return rule;
	  }
	  /**
	   * Register plugin. Passed function will be invoked with a rule instance.
	   */
	  ;

	  _proto.use = function use() {
	    var _this = this;

	    for (var _len = arguments.length, plugins = new Array(_len), _key = 0; _key < _len; _key++) {
	      plugins[_key] = arguments[_key];
	    }

	    plugins.forEach(function (plugin) {
	      _this.plugins.use(plugin);
	    });
	    return this;
	  };

	  return Jss;
	}();

	/**
	 * Extracts a styles object with only props that contain function values.
	 */
	function getDynamicStyles(styles) {
	  var to = null;

	  for (var key in styles) {
	    var value = styles[key];
	    var type = typeof value;

	    if (type === 'function') {
	      if (!to) to = {};
	      to[key] = value;
	    } else if (type === 'object' && value !== null && !Array.isArray(value)) {
	      var extracted = getDynamicStyles(value);

	      if (extracted) {
	        if (!to) to = {};
	        to[key] = extracted;
	      }
	    }
	  }

	  return to;
	}

	/**
	 * A better abstraction over CSS.
	 *
	 * @copyright Oleg Isonen (Slobodskoi) / Isonen 2014-present
	 * @website https://github.com/cssinjs/jss
	 * @license MIT
	 */

	/**
	 * Export a constant indicating if this browser has CSSTOM support.
	 * https://developers.google.com/web/updates/2018/03/cssom
	 */
	var hasCSSTOMSupport = typeof CSS !== 'undefined' && CSS && 'number' in CSS;
	/**
	 * Creates a new instance of Jss.
	 */

	var create = function create(options) {
	  return new Jss(options);
	};
	/**
	 * A global Jss instance.
	 */

	var index = create();

	var now = Date.now();
	var fnValuesNs = "fnValues" + now;
	var fnRuleNs = "fnStyle" + ++now;
	function functionPlugin() {
	  return {
	    onCreateRule: function onCreateRule(name, decl, options) {
	      if (typeof decl !== 'function') return null;
	      var rule = createRule(name, {}, options);
	      rule[fnRuleNs] = decl;
	      return rule;
	    },
	    onProcessStyle: function onProcessStyle(style, rule) {
	      // We need to extract function values from the declaration, so that we can keep core unaware of them.
	      // We need to do that only once.
	      // We don't need to extract functions on each style update, since this can happen only once.
	      // We don't support function values inside of function rules.
	      if (fnValuesNs in rule || fnRuleNs in rule) return style;
	      var fnValues = {};

	      for (var prop in style) {
	        var value = style[prop];
	        if (typeof value !== 'function') continue;
	        delete style[prop];
	        fnValues[prop] = value;
	      } // $FlowFixMe


	      rule[fnValuesNs] = fnValues;
	      return style;
	    },
	    onUpdate: function onUpdate(data, rule, sheet, options) {
	      var styleRule = rule;
	      var fnRule = styleRule[fnRuleNs]; // If we have a style function, the entire rule is dynamic and style object
	      // will be returned from that function.

	      if (fnRule) {
	        // Empty object will remove all currently defined props
	        // in case function rule returns a falsy value.
	        styleRule.style = fnRule(data) || {};

	        if (process.env.NODE_ENV === 'development') {
	          for (var prop in styleRule.style) {
	            if (typeof styleRule.style[prop] === 'function') {
	              process.env.NODE_ENV !== "production" ? warning(false, '[JSS] Function values inside function rules are not supported.') : void 0;
	              break;
	            }
	          }
	        }
	      }

	      var fnValues = styleRule[fnValuesNs]; // If we have a fn values map, it is a rule with function values.

	      if (fnValues) {
	        for (var _prop in fnValues) {
	          styleRule.prop(_prop, fnValues[_prop](data), options);
	        }
	      }
	    }
	  };
	}

	var at = '@global';
	var atPrefix = '@global ';

	var GlobalContainerRule =
	/*#__PURE__*/
	function () {
	  function GlobalContainerRule(key, styles, options) {
	    this.type = 'global';
	    this.at = at;
	    this.rules = void 0;
	    this.options = void 0;
	    this.key = void 0;
	    this.isProcessed = false;
	    this.key = key;
	    this.options = options;
	    this.rules = new RuleList(_extends({}, options, {
	      parent: this
	    }));

	    for (var selector in styles) {
	      this.rules.add(selector, styles[selector]);
	    }

	    this.rules.process();
	  }
	  /**
	   * Get a rule.
	   */


	  var _proto = GlobalContainerRule.prototype;

	  _proto.getRule = function getRule(name) {
	    return this.rules.get(name);
	  }
	  /**
	   * Create and register rule, run plugins.
	   */
	  ;

	  _proto.addRule = function addRule(name, style, options) {
	    var rule = this.rules.add(name, style, options);
	    this.options.jss.plugins.onProcessRule(rule);
	    return rule;
	  }
	  /**
	   * Get index of a rule.
	   */
	  ;

	  _proto.indexOf = function indexOf(rule) {
	    return this.rules.indexOf(rule);
	  }
	  /**
	   * Generates a CSS string.
	   */
	  ;

	  _proto.toString = function toString() {
	    return this.rules.toString();
	  };

	  return GlobalContainerRule;
	}();

	var GlobalPrefixedRule =
	/*#__PURE__*/
	function () {
	  function GlobalPrefixedRule(key, style, options) {
	    this.type = 'global';
	    this.at = at;
	    this.options = void 0;
	    this.rule = void 0;
	    this.isProcessed = false;
	    this.key = void 0;
	    this.key = key;
	    this.options = options;
	    var selector = key.substr(atPrefix.length);
	    this.rule = options.jss.createRule(selector, style, _extends({}, options, {
	      parent: this
	    }));
	  }

	  var _proto2 = GlobalPrefixedRule.prototype;

	  _proto2.toString = function toString(options) {
	    return this.rule ? this.rule.toString(options) : '';
	  };

	  return GlobalPrefixedRule;
	}();

	var separatorRegExp = /\s*,\s*/g;

	function addScope(selector, scope) {
	  var parts = selector.split(separatorRegExp);
	  var scoped = '';

	  for (var i = 0; i < parts.length; i++) {
	    scoped += scope + " " + parts[i].trim();
	    if (parts[i + 1]) scoped += ', ';
	  }

	  return scoped;
	}

	function handleNestedGlobalContainerRule(rule) {
	  var options = rule.options,
	      style = rule.style;
	  var rules = style ? style[at] : null;
	  if (!rules) return;

	  for (var name in rules) {
	    options.sheet.addRule(name, rules[name], _extends({}, options, {
	      selector: addScope(name, rule.selector)
	    }));
	  }

	  delete style[at];
	}

	function handlePrefixedGlobalRule(rule) {
	  var options = rule.options,
	      style = rule.style;

	  for (var prop in style) {
	    if (prop[0] !== '@' || prop.substr(0, at.length) !== at) continue;
	    var selector = addScope(prop.substr(at.length), rule.selector);
	    options.sheet.addRule(selector, style[prop], _extends({}, options, {
	      selector: selector
	    }));
	    delete style[prop];
	  }
	}
	/**
	 * Convert nested rules to separate, remove them from original styles.
	 *
	 * @param {Rule} rule
	 * @api public
	 */


	function jssGlobal() {
	  function onCreateRule(name, styles, options) {
	    if (!name) return null;

	    if (name === at) {
	      return new GlobalContainerRule(name, styles, options);
	    }

	    if (name[0] === '@' && name.substr(0, atPrefix.length) === atPrefix) {
	      return new GlobalPrefixedRule(name, styles, options);
	    }

	    var parent = options.parent;

	    if (parent) {
	      if (parent.type === 'global' || parent.options.parent && parent.options.parent.type === 'global') {
	        options.scoped = false;
	      }
	    }

	    if (options.scoped === false) {
	      options.selector = name;
	    }

	    return null;
	  }

	  function onProcessRule(rule) {
	    if (rule.type !== 'style') return;
	    handleNestedGlobalContainerRule(rule);
	    handlePrefixedGlobalRule(rule);
	  }

	  return {
	    onCreateRule: onCreateRule,
	    onProcessRule: onProcessRule
	  };
	}

	var separatorRegExp$1 = /\s*,\s*/g;
	var parentRegExp = /&/g;
	var refRegExp$1 = /\$([\w-]+)/g;
	/**
	 * Convert nested rules to separate, remove them from original styles.
	 *
	 * @param {Rule} rule
	 * @api public
	 */

	function jssNested() {
	  // Get a function to be used for $ref replacement.
	  function getReplaceRef(container, sheet) {
	    return function (match, key) {
	      var rule = container.getRule(key) || sheet && sheet.getRule(key);

	      if (rule) {
	        rule = rule;
	        return rule.selector;
	      }

	      process.env.NODE_ENV !== "production" ? warning(false, "[JSS] Could not find the referenced rule \"" + key + "\" in \"" + (container.options.meta || container.toString()) + "\".") : void 0;
	      return key;
	    };
	  }

	  function replaceParentRefs(nestedProp, parentProp) {
	    var parentSelectors = parentProp.split(separatorRegExp$1);
	    var nestedSelectors = nestedProp.split(separatorRegExp$1);
	    var result = '';

	    for (var i = 0; i < parentSelectors.length; i++) {
	      var parent = parentSelectors[i];

	      for (var j = 0; j < nestedSelectors.length; j++) {
	        var nested = nestedSelectors[j];
	        if (result) result += ', '; // Replace all & by the parent or prefix & with the parent.

	        result += nested.indexOf('&') !== -1 ? nested.replace(parentRegExp, parent) : parent + " " + nested;
	      }
	    }

	    return result;
	  }

	  function getOptions(rule, container, prevOptions) {
	    // Options has been already created, now we only increase index.
	    if (prevOptions) return _extends({}, prevOptions, {
	      index: prevOptions.index + 1
	    });
	    var nestingLevel = rule.options.nestingLevel;
	    nestingLevel = nestingLevel === undefined ? 1 : nestingLevel + 1;

	    var options = _extends({}, rule.options, {
	      nestingLevel: nestingLevel,
	      index: container.indexOf(rule) + 1 // We don't need the parent name to be set options for chlid.

	    });

	    delete options.name;
	    return options;
	  }

	  function onProcessStyle(style, rule, sheet) {
	    if (rule.type !== 'style') return style;
	    var styleRule = rule;
	    var container = styleRule.options.parent;
	    var options;
	    var replaceRef;

	    for (var prop in style) {
	      var isNested = prop.indexOf('&') !== -1;
	      var isNestedConditional = prop[0] === '@';
	      if (!isNested && !isNestedConditional) continue;
	      options = getOptions(styleRule, container, options);

	      if (isNested) {
	        var selector = replaceParentRefs(prop, styleRule.selector); // Lazily create the ref replacer function just once for
	        // all nested rules within the sheet.

	        if (!replaceRef) replaceRef = getReplaceRef(container, sheet); // Replace all $refs.

	        selector = selector.replace(refRegExp$1, replaceRef);
	        container.addRule(selector, style[prop], _extends({}, options, {
	          selector: selector
	        }));
	      } else if (isNestedConditional) {
	        // Place conditional right after the parent rule to ensure right ordering.
	        container.addRule(prop, {}, options) // Flow expects more options but they aren't required
	        // And flow doesn't know this will always be a StyleRule which has the addRule method
	        // $FlowFixMe
	        .addRule(styleRule.key, style[prop], {
	          selector: styleRule.selector
	        });
	      }

	      delete style[prop];
	    }

	    return style;
	  }

	  return {
	    onProcessStyle: onProcessStyle
	  };
	}

	/* eslint-disable no-var, prefer-template */
	var uppercasePattern = /[A-Z]/g;
	var msPattern = /^ms-/;
	var cache = {};

	function toHyphenLower(match) {
	  return '-' + match.toLowerCase()
	}

	function hyphenateStyleName(name) {
	  if (cache.hasOwnProperty(name)) {
	    return cache[name]
	  }

	  var hName = name.replace(uppercasePattern, toHyphenLower);
	  return (cache[name] = msPattern.test(hName) ? '-' + hName : hName)
	}

	/**
	 * Convert camel cased property names to dash separated.
	 *
	 * @param {Object} style
	 * @return {Object}
	 */

	function convertCase(style) {
	  var converted = {};

	  for (var prop in style) {
	    var key = prop.indexOf('--') === 0 ? prop : hyphenateStyleName(prop);
	    converted[key] = style[prop];
	  }

	  if (style.fallbacks) {
	    if (Array.isArray(style.fallbacks)) converted.fallbacks = style.fallbacks.map(convertCase);else converted.fallbacks = convertCase(style.fallbacks);
	  }

	  return converted;
	}
	/**
	 * Allow camel cased property names by converting them back to dasherized.
	 *
	 * @param {Rule} rule
	 */


	function camelCase() {
	  function onProcessStyle(style) {
	    if (Array.isArray(style)) {
	      // Handle rules like @font-face, which can have multiple styles in an array
	      for (var index = 0; index < style.length; index++) {
	        style[index] = convertCase(style[index]);
	      }

	      return style;
	    }

	    return convertCase(style);
	  }

	  function onChangeValue(value, prop, rule) {
	    if (prop.indexOf('--') === 0) {
	      return value;
	    }

	    var hyphenatedProp = hyphenateStyleName(prop); // There was no camel case in place

	    if (prop === hyphenatedProp) return value;
	    rule.prop(hyphenatedProp, value); // Core will ignore that property value we set the proper one above.

	    return null;
	  }

	  return {
	    onProcessStyle: onProcessStyle,
	    onChangeValue: onChangeValue
	  };
	}

	var px = hasCSSTOMSupport && CSS ? CSS.px : 'px';
	var ms = hasCSSTOMSupport && CSS ? CSS.ms : 'ms';
	var percent = hasCSSTOMSupport && CSS ? CSS.percent : '%';
	/**
	 * Generated jss-plugin-default-unit CSS property units
	 *
	 * @type object
	 */

	var defaultUnits = {
	  // Animation properties
	  'animation-delay': ms,
	  'animation-duration': ms,
	  // Background properties
	  'background-position': px,
	  'background-position-x': px,
	  'background-position-y': px,
	  'background-size': px,
	  // Border Properties
	  border: px,
	  'border-bottom': px,
	  'border-bottom-left-radius': px,
	  'border-bottom-right-radius': px,
	  'border-bottom-width': px,
	  'border-left': px,
	  'border-left-width': px,
	  'border-radius': px,
	  'border-right': px,
	  'border-right-width': px,
	  'border-top': px,
	  'border-top-left-radius': px,
	  'border-top-right-radius': px,
	  'border-top-width': px,
	  'border-width': px,
	  // Margin properties
	  margin: px,
	  'margin-bottom': px,
	  'margin-left': px,
	  'margin-right': px,
	  'margin-top': px,
	  // Padding properties
	  padding: px,
	  'padding-bottom': px,
	  'padding-left': px,
	  'padding-right': px,
	  'padding-top': px,
	  // Mask properties
	  'mask-position-x': px,
	  'mask-position-y': px,
	  'mask-size': px,
	  // Width and height properties
	  height: px,
	  width: px,
	  'min-height': px,
	  'max-height': px,
	  'min-width': px,
	  'max-width': px,
	  // Position properties
	  bottom: px,
	  left: px,
	  top: px,
	  right: px,
	  // Shadow properties
	  'box-shadow': px,
	  'text-shadow': px,
	  // Column properties
	  'column-gap': px,
	  'column-rule': px,
	  'column-rule-width': px,
	  'column-width': px,
	  // Font and text properties
	  'font-size': px,
	  'font-size-delta': px,
	  'letter-spacing': px,
	  'text-indent': px,
	  'text-stroke': px,
	  'text-stroke-width': px,
	  'word-spacing': px,
	  // Motion properties
	  motion: px,
	  'motion-offset': px,
	  // Outline properties
	  outline: px,
	  'outline-offset': px,
	  'outline-width': px,
	  // Perspective properties
	  perspective: px,
	  'perspective-origin-x': percent,
	  'perspective-origin-y': percent,
	  // Transform properties
	  'transform-origin': percent,
	  'transform-origin-x': percent,
	  'transform-origin-y': percent,
	  'transform-origin-z': percent,
	  // Transition properties
	  'transition-delay': ms,
	  'transition-duration': ms,
	  // Alignment properties
	  'vertical-align': px,
	  'flex-basis': px,
	  // Some random properties
	  'shape-margin': px,
	  size: px,
	  // Grid properties
	  grid: px,
	  'grid-gap': px,
	  'grid-row-gap': px,
	  'grid-column-gap': px,
	  'grid-template-rows': px,
	  'grid-template-columns': px,
	  'grid-auto-rows': px,
	  'grid-auto-columns': px,
	  // Not existing properties.
	  // Used to avoid issues with jss-plugin-expand integration.
	  'box-shadow-x': px,
	  'box-shadow-y': px,
	  'box-shadow-blur': px,
	  'box-shadow-spread': px,
	  'font-line-height': px,
	  'text-shadow-x': px,
	  'text-shadow-y': px,
	  'text-shadow-blur': px
	};

	/**
	 * Clones the object and adds a camel cased property version.
	 */
	function addCamelCasedVersion(obj) {
	  var regExp = /(-[a-z])/g;

	  var replace = function replace(str) {
	    return str[1].toUpperCase();
	  };

	  var newObj = {};

	  for (var _key in obj) {
	    newObj[_key] = obj[_key];
	    newObj[_key.replace(regExp, replace)] = obj[_key];
	  }

	  return newObj;
	}

	var units = addCamelCasedVersion(defaultUnits);
	/**
	 * Recursive deep style passing function
	 */

	function iterate(prop, value, options) {
	  if (!value) return value;

	  if (Array.isArray(value)) {
	    for (var i = 0; i < value.length; i++) {
	      value[i] = iterate(prop, value[i], options);
	    }
	  } else if (typeof value === 'object') {
	    if (prop === 'fallbacks') {
	      for (var innerProp in value) {
	        value[innerProp] = iterate(innerProp, value[innerProp], options);
	      }
	    } else {
	      for (var _innerProp in value) {
	        value[_innerProp] = iterate(prop + "-" + _innerProp, value[_innerProp], options);
	      }
	    }
	  } else if (typeof value === 'number') {
	    var unit = options[prop] || units[prop];

	    if (unit) {
	      return typeof unit === 'function' ? unit(value).toString() : "" + value + unit;
	    }

	    return value.toString();
	  }

	  return value;
	}
	/**
	 * Add unit to numeric values.
	 */


	function defaultUnit(options) {
	  if (options === void 0) {
	    options = {};
	  }

	  var camelCasedOptions = addCamelCasedVersion(options);

	  function onProcessStyle(style, rule) {
	    if (rule.type !== 'style') return style;

	    for (var prop in style) {
	      style[prop] = iterate(prop, style[prop], camelCasedOptions);
	    }

	    return style;
	  }

	  function onChangeValue(value, prop) {
	    return iterate(prop, value, camelCasedOptions);
	  }

	  return {
	    onProcessStyle: onProcessStyle,
	    onChangeValue: onChangeValue
	  };
	}

	// Export javascript style and css style vendor prefixes.
	var js = '';
	var css$1 = '';
	var vendor = '';
	var browser = '';
	var isTouch = isBrowser && 'ontouchstart' in document.documentElement; // We should not do anything if required serverside.

	if (isBrowser) {
	  // Order matters. We need to check Webkit the last one because
	  // other vendors use to add Webkit prefixes to some properties
	  var jsCssMap = {
	    Moz: '-moz-',
	    ms: '-ms-',
	    O: '-o-',
	    Webkit: '-webkit-'
	  };

	  var _document$createEleme = document.createElement('p'),
	      style$1 = _document$createEleme.style;

	  var testProp = 'Transform';

	  for (var key in jsCssMap) {
	    if (key + testProp in style$1) {
	      js = key;
	      css$1 = jsCssMap[key];
	      break;
	    }
	  } // Correctly detect the Edge browser.


	  if (js === 'Webkit' && 'msHyphens' in style$1) {
	    js = 'ms';
	    css$1 = jsCssMap.ms;
	    browser = 'edge';
	  } // Correctly detect the Safari browser.


	  if (js === 'Webkit' && '-apple-trailing-word' in style$1) {
	    vendor = 'apple';
	  }
	}
	/**
	 * Vendor prefix string for the current browser.
	 *
	 * @type {{js: String, css: String, vendor: String, browser: String}}
	 * @api public
	 */


	var prefix = {
	  js: js,
	  css: css$1,
	  vendor: vendor,
	  browser: browser,
	  isTouch: isTouch
	};

	/**
	 * Test if a keyframe at-rule should be prefixed or not
	 *
	 * @param {String} vendor prefix string for the current browser.
	 * @return {String}
	 * @api public
	 */

	function supportedKeyframes(key) {
	  // Keyframes is already prefixed. e.g. key = '@-webkit-keyframes a'
	  if (key[1] === '-') return key; // No need to prefix IE/Edge. Older browsers will ignore unsupported rules.
	  // https://caniuse.com/#search=keyframes

	  if (prefix.js === 'ms') return key;
	  return "@" + prefix.css + "keyframes" + key.substr(10);
	}

	// https://caniuse.com/#search=appearance

	var appearence = {
	  noPrefill: ['appearance'],
	  supportedProperty: function supportedProperty(prop) {
	    if (prop !== 'appearance') return false;
	    if (prefix.js === 'ms') return "-webkit-" + prop;
	    return prefix.css + prop;
	  }
	};

	// https://caniuse.com/#search=color-adjust

	var colorAdjust = {
	  noPrefill: ['color-adjust'],
	  supportedProperty: function supportedProperty(prop) {
	    if (prop !== 'color-adjust') return false;
	    if (prefix.js === 'Webkit') return prefix.css + "print-" + prop;
	    return prop;
	  }
	};

	var regExp = /[-\s]+(.)?/g;
	/**
	 * Replaces the letter with the capital letter
	 *
	 * @param {String} match
	 * @param {String} c
	 * @return {String}
	 * @api private
	 */

	function toUpper(match, c) {
	  return c ? c.toUpperCase() : '';
	}
	/**
	 * Convert dash separated strings to camel-cased.
	 *
	 * @param {String} str
	 * @return {String}
	 * @api private
	 */


	function camelize(str) {
	  return str.replace(regExp, toUpper);
	}

	/**
	 * Convert dash separated strings to pascal cased.
	 *
	 * @param {String} str
	 * @return {String}
	 * @api private
	 */

	function pascalize(str) {
	  return camelize("-" + str);
	}

	// but we can use a longhand property instead.
	// https://caniuse.com/#search=mask

	var mask = {
	  noPrefill: ['mask'],
	  supportedProperty: function supportedProperty(prop, style) {
	    if (!/^mask/.test(prop)) return false;

	    if (prefix.js === 'Webkit') {
	      var longhand = 'mask-image';

	      if (camelize(longhand) in style) {
	        return prop;
	      }

	      if (prefix.js + pascalize(longhand) in style) {
	        return prefix.css + prop;
	      }
	    }

	    return prop;
	  }
	};

	// https://caniuse.com/#search=text-orientation

	var textOrientation = {
	  noPrefill: ['text-orientation'],
	  supportedProperty: function supportedProperty(prop) {
	    if (prop !== 'text-orientation') return false;

	    if (prefix.vendor === 'apple' && !prefix.isTouch) {
	      return prefix.css + prop;
	    }

	    return prop;
	  }
	};

	// https://caniuse.com/#search=transform

	var transform$1 = {
	  noPrefill: ['transform'],
	  supportedProperty: function supportedProperty(prop, style, options) {
	    if (prop !== 'transform') return false;

	    if (options.transform) {
	      return prop;
	    }

	    return prefix.css + prop;
	  }
	};

	// https://caniuse.com/#search=transition

	var transition = {
	  noPrefill: ['transition'],
	  supportedProperty: function supportedProperty(prop, style, options) {
	    if (prop !== 'transition') return false;

	    if (options.transition) {
	      return prop;
	    }

	    return prefix.css + prop;
	  }
	};

	// https://caniuse.com/#search=writing-mode

	var writingMode = {
	  noPrefill: ['writing-mode'],
	  supportedProperty: function supportedProperty(prop) {
	    if (prop !== 'writing-mode') return false;

	    if (prefix.js === 'Webkit' || prefix.js === 'ms' && prefix.browser !== 'edge') {
	      return prefix.css + prop;
	    }

	    return prop;
	  }
	};

	// https://caniuse.com/#search=user-select

	var userSelect = {
	  noPrefill: ['user-select'],
	  supportedProperty: function supportedProperty(prop) {
	    if (prop !== 'user-select') return false;

	    if (prefix.js === 'Moz' || prefix.js === 'ms' || prefix.vendor === 'apple') {
	      return prefix.css + prop;
	    }

	    return prop;
	  }
	};

	// https://caniuse.com/#search=multicolumn
	// https://github.com/postcss/autoprefixer/issues/491
	// https://github.com/postcss/autoprefixer/issues/177

	var breakPropsOld = {
	  supportedProperty: function supportedProperty(prop, style) {
	    if (!/^break-/.test(prop)) return false;

	    if (prefix.js === 'Webkit') {
	      var jsProp = "WebkitColumn" + pascalize(prop);
	      return jsProp in style ? prefix.css + "column-" + prop : false;
	    }

	    if (prefix.js === 'Moz') {
	      var _jsProp = "page" + pascalize(prop);

	      return _jsProp in style ? "page-" + prop : false;
	    }

	    return false;
	  }
	};

	// See https://github.com/postcss/autoprefixer/issues/324.

	var inlineLogicalOld = {
	  supportedProperty: function supportedProperty(prop, style) {
	    if (!/^(border|margin|padding)-inline/.test(prop)) return false;
	    if (prefix.js === 'Moz') return prop;
	    var newProp = prop.replace('-inline', '');
	    return prefix.js + pascalize(newProp) in style ? prefix.css + newProp : false;
	  }
	};

	// Camelization is required because we can't test using.
	// CSS syntax for e.g. in FF.

	var unprefixed = {
	  supportedProperty: function supportedProperty(prop, style) {
	    return camelize(prop) in style ? prop : false;
	  }
	};

	var prefixed = {
	  supportedProperty: function supportedProperty(prop, style) {
	    var pascalized = pascalize(prop); // Return custom CSS variable without prefixing.

	    if (prop[0] === '-') return prop; // Return already prefixed value without prefixing.

	    if (prop[0] === '-' && prop[1] === '-') return prop;
	    if (prefix.js + pascalized in style) return prefix.css + prop; // Try webkit fallback.

	    if (prefix.js !== 'Webkit' && "Webkit" + pascalized in style) return "-webkit-" + prop;
	    return false;
	  }
	};

	// https://caniuse.com/#search=scroll-snap

	var scrollSnap = {
	  supportedProperty: function supportedProperty(prop) {
	    if (prop.substring(0, 11) !== 'scroll-snap') return false;

	    if (prefix.js === 'ms') {
	      return "" + prefix.css + prop;
	    }

	    return prop;
	  }
	};

	// https://caniuse.com/#search=overscroll-behavior

	var overscrollBehavior = {
	  supportedProperty: function supportedProperty(prop) {
	    if (prop !== 'overscroll-behavior') return false;

	    if (prefix.js === 'ms') {
	      return prefix.css + "scroll-chaining";
	    }

	    return prop;
	  }
	};

	var propMap = {
	  'flex-grow': 'flex-positive',
	  'flex-shrink': 'flex-negative',
	  'flex-basis': 'flex-preferred-size',
	  'justify-content': 'flex-pack',
	  order: 'flex-order',
	  'align-items': 'flex-align',
	  'align-content': 'flex-line-pack' // 'align-self' is handled by 'align-self' plugin.

	}; // Support old flex spec from 2012.

	var flex2012 = {
	  supportedProperty: function supportedProperty(prop, style) {
	    var newProp = propMap[prop];
	    if (!newProp) return false;
	    return prefix.js + pascalize(newProp) in style ? prefix.css + newProp : false;
	  }
	};

	var propMap$1 = {
	  flex: 'box-flex',
	  'flex-grow': 'box-flex',
	  'flex-direction': ['box-orient', 'box-direction'],
	  order: 'box-ordinal-group',
	  'align-items': 'box-align',
	  'flex-flow': ['box-orient', 'box-direction'],
	  'justify-content': 'box-pack'
	};
	var propKeys = Object.keys(propMap$1);

	var prefixCss = function prefixCss(p) {
	  return prefix.css + p;
	}; // Support old flex spec from 2009.


	var flex2009 = {
	  supportedProperty: function supportedProperty(prop, style, _ref) {
	    var multiple = _ref.multiple;

	    if (propKeys.indexOf(prop) > -1) {
	      var newProp = propMap$1[prop];

	      if (!Array.isArray(newProp)) {
	        return prefix.js + pascalize(newProp) in style ? prefix.css + newProp : false;
	      }

	      if (!multiple) return false;

	      for (var i = 0; i < newProp.length; i++) {
	        if (!(prefix.js + pascalize(newProp[0]) in style)) {
	          return false;
	        }
	      }

	      return newProp.map(prefixCss);
	    }

	    return false;
	  }
	};

	// plugins = [
	//   ...plugins,
	//    breakPropsOld,
	//    inlineLogicalOld,
	//    unprefixed,
	//    prefixed,
	//    scrollSnap,
	//    flex2012,
	//    flex2009
	// ]
	// Plugins without 'noPrefill' value, going last.
	// 'flex-*' plugins should be at the bottom.
	// 'flex2009' going after 'flex2012'.
	// 'prefixed' going after 'unprefixed'

	var plugins$1 = [appearence, colorAdjust, mask, textOrientation, transform$1, transition, writingMode, userSelect, breakPropsOld, inlineLogicalOld, unprefixed, prefixed, scrollSnap, overscrollBehavior, flex2012, flex2009];
	var propertyDetectors = plugins$1.filter(function (p) {
	  return p.supportedProperty;
	}).map(function (p) {
	  return p.supportedProperty;
	});
	var noPrefill = plugins$1.filter(function (p) {
	  return p.noPrefill;
	}).reduce(function (a, p) {
	  a.push.apply(a, _toConsumableArray(p.noPrefill));
	  return a;
	}, []);

	var el;
	var cache$1 = {};

	if (isBrowser) {
	  el = document.createElement('p'); // We test every property on vendor prefix requirement.
	  // Once tested, result is cached. It gives us up to 70% perf boost.
	  // http://jsperf.com/element-style-object-access-vs-plain-object
	  //
	  // Prefill cache with known css properties to reduce amount of
	  // properties we need to feature test at runtime.
	  // http://davidwalsh.name/vendor-prefix

	  var computed = window.getComputedStyle(document.documentElement, '');

	  for (var key$1 in computed) {
	    // eslint-disable-next-line no-restricted-globals
	    if (!isNaN(key$1)) cache$1[computed[key$1]] = computed[key$1];
	  } // Properties that cannot be correctly detected using the
	  // cache prefill method.


	  noPrefill.forEach(function (x) {
	    return delete cache$1[x];
	  });
	}
	/**
	 * Test if a property is supported, returns supported property with vendor
	 * prefix if required. Returns `false` if not supported.
	 *
	 * @param {String} prop dash separated
	 * @param {Object} [options]
	 * @return {String|Boolean}
	 * @api public
	 */


	function supportedProperty(prop, options) {
	  if (options === void 0) {
	    options = {};
	  }

	  // For server-side rendering.
	  if (!el) return prop; // Remove cache for benchmark tests or return property from the cache.

	  if (process.env.NODE_ENV !== 'benchmark' && cache$1[prop] != null) {
	    return cache$1[prop];
	  } // Check if 'transition' or 'transform' natively supported in browser.


	  if (prop === 'transition' || prop === 'transform') {
	    options[prop] = prop in el.style;
	  } // Find a plugin for current prefix property.


	  for (var i = 0; i < propertyDetectors.length; i++) {
	    cache$1[prop] = propertyDetectors[i](prop, el.style, options); // Break loop, if value found.

	    if (cache$1[prop]) break;
	  } // Reset styles for current property.
	  // Firefox can even throw an error for invalid properties, e.g., "0".


	  try {
	    el.style[prop] = '';
	  } catch (err) {
	    return false;
	  }

	  return cache$1[prop];
	}

	var cache$1$1 = {};
	var transitionProperties = {
	  transition: 1,
	  'transition-property': 1,
	  '-webkit-transition': 1,
	  '-webkit-transition-property': 1
	};
	var transPropsRegExp = /(^\s*[\w-]+)|, (\s*[\w-]+)(?![^()]*\))/g;
	var el$1;
	/**
	 * Returns prefixed value transition/transform if needed.
	 *
	 * @param {String} match
	 * @param {String} p1
	 * @param {String} p2
	 * @return {String}
	 * @api private
	 */

	function prefixTransitionCallback(match, p1, p2) {
	  if (p1 === 'var') return 'var';
	  if (p1 === 'all') return 'all';
	  if (p2 === 'all') return ', all';
	  var prefixedValue = p1 ? supportedProperty(p1) : ", " + supportedProperty(p2);
	  if (!prefixedValue) return p1 || p2;
	  return prefixedValue;
	}

	if (isBrowser) el$1 = document.createElement('p');
	/**
	 * Returns prefixed value if needed. Returns `false` if value is not supported.
	 *
	 * @param {String} property
	 * @param {String} value
	 * @return {String|Boolean}
	 * @api public
	 */

	function supportedValue(property, value) {
	  // For server-side rendering.
	  var prefixedValue = value;
	  if (!el$1 || property === 'content') return value; // It is a string or a number as a string like '1'.
	  // We want only prefixable values here.
	  // eslint-disable-next-line no-restricted-globals

	  if (typeof prefixedValue !== 'string' || !isNaN(parseInt(prefixedValue, 10))) {
	    return prefixedValue;
	  } // Create cache key for current value.


	  var cacheKey = property + prefixedValue; // Remove cache for benchmark tests or return value from cache.

	  if (process.env.NODE_ENV !== 'benchmark' && cache$1$1[cacheKey] != null) {
	    return cache$1$1[cacheKey];
	  } // IE can even throw an error in some cases, for e.g. style.content = 'bar'.


	  try {
	    // Test value as it is.
	    el$1.style[property] = prefixedValue;
	  } catch (err) {
	    // Return false if value not supported.
	    cache$1$1[cacheKey] = false;
	    return false;
	  } // If 'transition' or 'transition-property' property.


	  if (transitionProperties[property]) {
	    prefixedValue = prefixedValue.replace(transPropsRegExp, prefixTransitionCallback);
	  } else if (el$1.style[property] === '') {
	    // Value with a vendor prefix.
	    prefixedValue = prefix.css + prefixedValue; // Hardcode test to convert "flex" to "-ms-flexbox" for IE10.

	    if (prefixedValue === '-ms-flex') el$1.style[property] = '-ms-flexbox'; // Test prefixed value.

	    el$1.style[property] = prefixedValue; // Return false if value not supported.

	    if (el$1.style[property] === '') {
	      cache$1$1[cacheKey] = false;
	      return false;
	    }
	  } // Reset styles for current property.


	  el$1.style[property] = ''; // Write current value to cache.

	  cache$1$1[cacheKey] = prefixedValue;
	  return cache$1$1[cacheKey];
	}

	/**
	 * Add vendor prefix to a property name when needed.
	 *
	 * @api public
	 */

	function jssVendorPrefixer() {
	  function onProcessRule(rule) {
	    if (rule.type === 'keyframes') {
	      var atRule = rule;
	      atRule.at = supportedKeyframes(atRule.at);
	    }
	  }

	  function prefixStyle(style) {
	    for (var prop in style) {
	      var value = style[prop];

	      if (prop === 'fallbacks' && Array.isArray(value)) {
	        style[prop] = value.map(prefixStyle);
	        continue;
	      }

	      var changeProp = false;
	      var supportedProp = supportedProperty(prop);
	      if (supportedProp && supportedProp !== prop) changeProp = true;
	      var changeValue = false;
	      var supportedValue$1 = supportedValue(supportedProp, toCssValue(value));
	      if (supportedValue$1 && supportedValue$1 !== value) changeValue = true;

	      if (changeProp || changeValue) {
	        if (changeProp) delete style[prop];
	        style[supportedProp || prop] = supportedValue$1 || value;
	      }
	    }

	    return style;
	  }

	  function onProcessStyle(style, rule) {
	    if (rule.type !== 'style') return style;
	    return prefixStyle(style);
	  }

	  function onChangeValue(value, prop) {
	    return supportedValue(prop, toCssValue(value)) || value;
	  }

	  return {
	    onProcessRule: onProcessRule,
	    onProcessStyle: onProcessStyle,
	    onChangeValue: onChangeValue
	  };
	}

	/**
	 * Sort props by length.
	 */
	function jssPropsSort() {
	  var sort = function sort(prop0, prop1) {
	    if (prop0.length === prop1.length) {
	      return prop0 > prop1 ? 1 : -1;
	    }

	    return prop0.length - prop1.length;
	  };

	  return {
	    onProcessStyle: function onProcessStyle(style, rule) {
	      if (rule.type !== 'style') return style;
	      var newStyle = {};
	      var props = Object.keys(style).sort(sort);

	      for (var i = 0; i < props.length; i++) {
	        newStyle[props[i]] = style[props[i]];
	      }

	      return newStyle;
	    }
	  };
	}

	function jssPreset() {
	  return {
	    plugins: [functionPlugin(), jssGlobal(), jssNested(), camelCase(), defaultUnit(), // Disable the vendor prefixer server-side, it does nothing.
	    // This way, we can get a performance boost.
	    // In the documentation, we are using `autoprefixer` to solve this problem.
	    typeof window === 'undefined' ? null : jssVendorPrefixer(), jssPropsSort()]
	  };
	}

	function mergeClasses() {
	  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  var baseClasses = options.baseClasses,
	      newClasses = options.newClasses,
	      Component = options.Component;

	  if (!newClasses) {
	    return baseClasses;
	  }

	  var nextClasses = _extends({}, baseClasses);

	  if (process.env.NODE_ENV !== 'production') {
	    if (typeof newClasses === 'string') {
	      console.error(["Material-UI: The value `".concat(newClasses, "` ") + "provided to the classes prop of ".concat(getDisplayName$1(Component), " is incorrect."), 'You might want to use the className prop instead.'].join('\n'));
	      return baseClasses;
	    }
	  }

	  Object.keys(newClasses).forEach(function (key) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (!baseClasses[key] && newClasses[key]) {
	        console.error(["Material-UI: The key `".concat(key, "` ") + "provided to the classes prop is not implemented in ".concat(getDisplayName$1(Component), "."), "You can only override one of the following: ".concat(Object.keys(baseClasses).join(','), ".")].join('\n'));
	      }

	      if (newClasses[key] && typeof newClasses[key] !== 'string') {
	        console.error(["Material-UI: The key `".concat(key, "` ") + "provided to the classes prop is not valid for ".concat(getDisplayName$1(Component), "."), "You need to provide a non empty string instead of: ".concat(newClasses[key], ".")].join('\n'));
	      }
	    }

	    if (newClasses[key]) {
	      nextClasses[key] = "".concat(baseClasses[key], " ").concat(newClasses[key]);
	    }
	  });
	  return nextClasses;
	}

	// Used https://github.com/thinkloop/multi-key-cache as inspiration
	var multiKeyStore = {
	  set: function set(cache, key1, key2, value) {
	    var subCache = cache.get(key1);

	    if (!subCache) {
	      subCache = new Map();
	      cache.set(key1, subCache);
	    }

	    subCache.set(key2, value);
	  },
	  get: function get(cache, key1, key2) {
	    var subCache = cache.get(key1);
	    return subCache ? subCache.get(key2) : undefined;
	  },
	  delete: function _delete(cache, key1, key2) {
	    var subCache = cache.get(key1);
	    subCache.delete(key2);
	  }
	};

	var ThemeContext = React__default.createContext(null);

	if (process.env.NODE_ENV !== 'production') {
	  ThemeContext.displayName = 'ThemeContext';
	}

	function useTheme() {
	  var theme = React__default.useContext(ThemeContext);

	  if (process.env.NODE_ENV !== 'production') {
	    // eslint-disable-next-line react-hooks/rules-of-hooks
	    React__default.useDebugValue(theme);
	  }

	  return theme;
	}

	var jss = create(jssPreset()); // Use a singleton or the provided one by the context.
	//
	// The counter-based approach doesn't tolerate any mistake.
	// It's much safer to use the same counter everywhere.

	var generateClassName = createGenerateClassName(); // Exported for test purposes

	var sheetsManager = new Map();
	var defaultOptions = {
	  disableGeneration: false,
	  generateClassName: generateClassName,
	  jss: jss,
	  sheetsCache: null,
	  sheetsManager: sheetsManager,
	  sheetsRegistry: null
	};
	var StylesContext = React__default.createContext(defaultOptions);

	if (process.env.NODE_ENV !== 'production') {
	  StylesContext.displayName = 'StylesContext';
	}

	var injectFirstNode;
	function StylesProvider(props) {
	  var children = props.children,
	      _props$injectFirst = props.injectFirst,
	      injectFirst = _props$injectFirst === void 0 ? false : _props$injectFirst,
	      _props$disableGenerat = props.disableGeneration,
	      disableGeneration = _props$disableGenerat === void 0 ? false : _props$disableGenerat,
	      localOptions = _objectWithoutProperties(props, ["children", "injectFirst", "disableGeneration"]);

	  var outerOptions = React__default.useContext(StylesContext);

	  var context = _extends(_extends({}, outerOptions), {}, {
	    disableGeneration: disableGeneration
	  }, localOptions);

	  if (process.env.NODE_ENV !== 'production') {
	    if (typeof window === 'undefined' && !context.sheetsManager) {
	      console.error('Material-UI: You need to use the ServerStyleSheets API when rendering on the server.');
	    }
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    if (context.jss.options.insertionPoint && injectFirst) {
	      console.error('Material-UI: You cannot use a custom insertionPoint and <StylesContext injectFirst> at the same time.');
	    }
	  }

	  if (process.env.NODE_ENV !== 'production') {
	    if (injectFirst && localOptions.jss) {
	      console.error('Material-UI: You cannot use the jss and injectFirst props at the same time.');
	    }
	  }

	  if (!context.jss.options.insertionPoint && injectFirst && typeof window !== 'undefined') {
	    if (!injectFirstNode) {
	      var head = document.head;
	      injectFirstNode = document.createComment('mui-inject-first');
	      head.insertBefore(injectFirstNode, head.firstChild);
	    }

	    context.jss = create({
	      plugins: jssPreset().plugins,
	      insertionPoint: injectFirstNode
	    });
	  }

	  return /*#__PURE__*/React__default.createElement(StylesContext.Provider, {
	    value: context
	  }, children);
	}
	process.env.NODE_ENV !== "production" ? StylesProvider.propTypes = {
	  /**
	   * Your component tree.
	   */
	  children: propTypes.node.isRequired,

	  /**
	   * You can disable the generation of the styles with this option.
	   * It can be useful when traversing the React tree outside of the HTML
	   * rendering step on the server.
	   * Let's say you are using react-apollo to extract all
	   * the queries made by the interface server-side - you can significantly speed up the traversal with this prop.
	   */
	  disableGeneration: propTypes.bool,

	  /**
	   * JSS's class name generator.
	   */
	  generateClassName: propTypes.func,

	  /**
	   * By default, the styles are injected last in the <head> element of the page.
	   * As a result, they gain more specificity than any other style sheet.
	   * If you want to override Material-UI's styles, set this prop.
	   */
	  injectFirst: propTypes.bool,

	  /**
	   * JSS's instance.
	   */
	  jss: propTypes.object,

	  /**
	   * @ignore
	   */
	  serverGenerateClassName: propTypes.func,

	  /**
	   * @ignore
	   *
	   * Beta feature.
	   *
	   * Cache for the sheets.
	   */
	  sheetsCache: propTypes.object,

	  /**
	   * @ignore
	   *
	   * The sheetsManager is used to deduplicate style sheet injection in the page.
	   * It's deduplicating using the (theme, styles) couple.
	   * On the server, you should provide a new instance for each request.
	   */
	  sheetsManager: propTypes.object,

	  /**
	   * @ignore
	   *
	   * Collect the sheets.
	   */
	  sheetsRegistry: propTypes.object
	} : void 0;

	if (process.env.NODE_ENV !== 'production') {
	  process.env.NODE_ENV !== "production" ? StylesProvider.propTypes = exactProp$1(StylesProvider.propTypes) : void 0;
	}

	/* eslint-disable import/prefer-default-export */
	// Global index counter to preserve source order.
	// We create the style sheet during the creation of the component,
	// children are handled after the parents, so the order of style elements would be parent->child.
	// It is a problem though when a parent passes a className
	// which needs to override any child's styles.
	// StyleSheet of the child has a higher specificity, because of the source order.
	// So our solution is to render sheets them in the reverse order child->sheet, so
	// that parent has a higher specificity.
	var indexCounter = -1e9;
	function increment() {
	  indexCounter += 1;

	  if (process.env.NODE_ENV !== 'production') {
	    if (indexCounter >= 0) {
	      console.warn(['Material-UI: You might have a memory leak.', 'The indexCounter is not supposed to grow that much.'].join('\n'));
	    }
	  }

	  return indexCounter;
	}

	// We use the same empty object to ref count the styles that don't need a theme object.
	var noopTheme = {};

	function getStylesCreator(stylesOrCreator) {
	  var themingEnabled = typeof stylesOrCreator === 'function';

	  if (process.env.NODE_ENV !== 'production') {
	    if (_typeof(stylesOrCreator) !== 'object' && !themingEnabled) {
	      console.error(['Material-UI: The `styles` argument provided is invalid.', 'You need to provide a function generating the styles or a styles object.'].join('\n'));
	    }
	  }

	  return {
	    create: function create(theme, name) {
	      var styles;

	      try {
	        styles = themingEnabled ? stylesOrCreator(theme) : stylesOrCreator;
	      } catch (err) {
	        if (process.env.NODE_ENV !== 'production') {
	          if (themingEnabled === true && theme === noopTheme) {
	            // TODO: prepend error message/name instead
	            console.error(['Material-UI: The `styles` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\n'));
	          }
	        }

	        throw err;
	      }

	      if (!name || !theme.overrides || !theme.overrides[name]) {
	        return styles;
	      }

	      var overrides = theme.overrides[name];

	      var stylesWithOverrides = _extends({}, styles);

	      Object.keys(overrides).forEach(function (key) {
	        if (process.env.NODE_ENV !== 'production') {
	          if (!stylesWithOverrides[key]) {
	            console.warn(['Material-UI: You are trying to override a style that does not exist.', "Fix the `".concat(key, "` key of `theme.overrides.").concat(name, "`.")].join('\n'));
	          }
	        }

	        stylesWithOverrides[key] = deepmerge$1(stylesWithOverrides[key], overrides[key]);
	      });
	      return stylesWithOverrides;
	    },
	    options: {}
	  };
	}

	function getClasses(_ref, classes, Component) {
	  var state = _ref.state,
	      stylesOptions = _ref.stylesOptions;

	  if (stylesOptions.disableGeneration) {
	    return classes || {};
	  }

	  if (!state.cacheClasses) {
	    state.cacheClasses = {
	      // Cache for the finalized classes value.
	      value: null,
	      // Cache for the last used classes prop pointer.
	      lastProp: null,
	      // Cache for the last used rendered classes pointer.
	      lastJSS: {}
	    };
	  } // Tracks if either the rendered classes or classes prop has changed,
	  // requiring the generation of a new finalized classes object.


	  var generate = false;

	  if (state.classes !== state.cacheClasses.lastJSS) {
	    state.cacheClasses.lastJSS = state.classes;
	    generate = true;
	  }

	  if (classes !== state.cacheClasses.lastProp) {
	    state.cacheClasses.lastProp = classes;
	    generate = true;
	  }

	  if (generate) {
	    state.cacheClasses.value = mergeClasses({
	      baseClasses: state.cacheClasses.lastJSS,
	      newClasses: classes,
	      Component: Component
	    });
	  }

	  return state.cacheClasses.value;
	}

	function attach(_ref2, props) {
	  var state = _ref2.state,
	      theme = _ref2.theme,
	      stylesOptions = _ref2.stylesOptions,
	      stylesCreator = _ref2.stylesCreator,
	      name = _ref2.name;

	  if (stylesOptions.disableGeneration) {
	    return;
	  }

	  var sheetManager = multiKeyStore.get(stylesOptions.sheetsManager, stylesCreator, theme);

	  if (!sheetManager) {
	    sheetManager = {
	      refs: 0,
	      staticSheet: null,
	      dynamicStyles: null
	    };
	    multiKeyStore.set(stylesOptions.sheetsManager, stylesCreator, theme, sheetManager);
	  }

	  var options = _extends(_extends(_extends({}, stylesCreator.options), stylesOptions), {}, {
	    theme: theme,
	    flip: typeof stylesOptions.flip === 'boolean' ? stylesOptions.flip : theme.direction === 'rtl'
	  });

	  options.generateId = options.serverGenerateClassName || options.generateClassName;
	  var sheetsRegistry = stylesOptions.sheetsRegistry;

	  if (sheetManager.refs === 0) {
	    var staticSheet;

	    if (stylesOptions.sheetsCache) {
	      staticSheet = multiKeyStore.get(stylesOptions.sheetsCache, stylesCreator, theme);
	    }

	    var styles = stylesCreator.create(theme, name);

	    if (!staticSheet) {
	      staticSheet = stylesOptions.jss.createStyleSheet(styles, _extends({
	        link: false
	      }, options));
	      staticSheet.attach();

	      if (stylesOptions.sheetsCache) {
	        multiKeyStore.set(stylesOptions.sheetsCache, stylesCreator, theme, staticSheet);
	      }
	    }

	    if (sheetsRegistry) {
	      sheetsRegistry.add(staticSheet);
	    }

	    sheetManager.staticSheet = staticSheet;
	    sheetManager.dynamicStyles = getDynamicStyles(styles);
	  }

	  if (sheetManager.dynamicStyles) {
	    var dynamicSheet = stylesOptions.jss.createStyleSheet(sheetManager.dynamicStyles, _extends({
	      link: true
	    }, options));
	    dynamicSheet.update(props);
	    dynamicSheet.attach();
	    state.dynamicSheet = dynamicSheet;
	    state.classes = mergeClasses({
	      baseClasses: sheetManager.staticSheet.classes,
	      newClasses: dynamicSheet.classes
	    });

	    if (sheetsRegistry) {
	      sheetsRegistry.add(dynamicSheet);
	    }
	  } else {
	    state.classes = sheetManager.staticSheet.classes;
	  }

	  sheetManager.refs += 1;
	}

	function update(_ref3, props) {
	  var state = _ref3.state;

	  if (state.dynamicSheet) {
	    state.dynamicSheet.update(props);
	  }
	}

	function detach(_ref4) {
	  var state = _ref4.state,
	      theme = _ref4.theme,
	      stylesOptions = _ref4.stylesOptions,
	      stylesCreator = _ref4.stylesCreator;

	  if (stylesOptions.disableGeneration) {
	    return;
	  }

	  var sheetManager = multiKeyStore.get(stylesOptions.sheetsManager, stylesCreator, theme);
	  sheetManager.refs -= 1;
	  var sheetsRegistry = stylesOptions.sheetsRegistry;

	  if (sheetManager.refs === 0) {
	    multiKeyStore.delete(stylesOptions.sheetsManager, stylesCreator, theme);
	    stylesOptions.jss.removeStyleSheet(sheetManager.staticSheet);

	    if (sheetsRegistry) {
	      sheetsRegistry.remove(sheetManager.staticSheet);
	    }
	  }

	  if (state.dynamicSheet) {
	    stylesOptions.jss.removeStyleSheet(state.dynamicSheet);

	    if (sheetsRegistry) {
	      sheetsRegistry.remove(state.dynamicSheet);
	    }
	  }
	}

	function useSynchronousEffect(func, values) {
	  var key = React__default.useRef([]);
	  var output; // Store "generation" key. Just returns a new object every time

	  var currentKey = React__default.useMemo(function () {
	    return {};
	  }, values); // eslint-disable-line react-hooks/exhaustive-deps
	  // "the first render", or "memo dropped the value"

	  if (key.current !== currentKey) {
	    key.current = currentKey;
	    output = func();
	  }

	  React__default.useEffect(function () {
	    return function () {
	      if (output) {
	        output();
	      }
	    };
	  }, [currentKey] // eslint-disable-line react-hooks/exhaustive-deps
	  );
	}

	function makeStyles(stylesOrCreator) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	  var name = options.name,
	      classNamePrefixOption = options.classNamePrefix,
	      Component = options.Component,
	      _options$defaultTheme = options.defaultTheme,
	      defaultTheme = _options$defaultTheme === void 0 ? noopTheme : _options$defaultTheme,
	      stylesOptions2 = _objectWithoutProperties(options, ["name", "classNamePrefix", "Component", "defaultTheme"]);

	  var stylesCreator = getStylesCreator(stylesOrCreator);
	  var classNamePrefix = name || classNamePrefixOption || 'makeStyles';
	  stylesCreator.options = {
	    index: increment(),
	    name: name,
	    meta: classNamePrefix,
	    classNamePrefix: classNamePrefix
	  };

	  var useStyles = function useStyles() {
	    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    var theme = useTheme() || defaultTheme;

	    var stylesOptions = _extends(_extends({}, React__default.useContext(StylesContext)), stylesOptions2);

	    var instance = React__default.useRef();
	    var shouldUpdate = React__default.useRef();
	    useSynchronousEffect(function () {
	      var current = {
	        name: name,
	        state: {},
	        stylesCreator: stylesCreator,
	        stylesOptions: stylesOptions,
	        theme: theme
	      };
	      attach(current, props);
	      shouldUpdate.current = false;
	      instance.current = current;
	      return function () {
	        detach(current);
	      };
	    }, [theme, stylesCreator]);
	    React__default.useEffect(function () {
	      if (shouldUpdate.current) {
	        update(instance.current, props);
	      }

	      shouldUpdate.current = true;
	    });
	    var classes = getClasses(instance.current, props.classes, Component);

	    if (process.env.NODE_ENV !== 'production') {
	      // eslint-disable-next-line react-hooks/rules-of-hooks
	      React__default.useDebugValue(classes);
	    }

	    return classes;
	  };

	  return useStyles;
	}

	function _classCallCheck(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	var ServerStyleSheets = /*#__PURE__*/function () {
	  function ServerStyleSheets() {
	    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    _classCallCheck(this, ServerStyleSheets);

	    this.options = options;
	  }

	  _createClass(ServerStyleSheets, [{
	    key: "collect",
	    value: function collect(children) {
	      // This is needed in order to deduplicate the injection of CSS in the page.
	      var sheetsManager = new Map(); // This is needed in order to inject the critical CSS.

	      this.sheetsRegistry = new SheetsRegistry(); // A new class name generator

	      var generateClassName = createGenerateClassName();
	      return /*#__PURE__*/React__default.createElement(StylesProvider, _extends({
	        sheetsManager: sheetsManager,
	        serverGenerateClassName: generateClassName,
	        sheetsRegistry: this.sheetsRegistry
	      }, this.options), children);
	    }
	  }, {
	    key: "toString",
	    value: function toString() {
	      return this.sheetsRegistry ? this.sheetsRegistry.toString() : '';
	    }
	  }, {
	    key: "getStyleElement",
	    value: function getStyleElement(props) {
	      return React__default.createElement('style', _extends({
	        id: 'jss-server-side',
	        key: 'jss-server-side',
	        dangerouslySetInnerHTML: {
	          __html: this.toString()
	        }
	      }, props));
	    }
	  }]);

	  return ServerStyleSheets;
	}();

	function toVal(mix) {
		var k, y, str='';

		if (typeof mix === 'string' || typeof mix === 'number') {
			str += mix;
		} else if (typeof mix === 'object') {
			if (Array.isArray(mix)) {
				for (k=0; k < mix.length; k++) {
					if (mix[k]) {
						if (y = toVal(mix[k])) {
							str && (str += ' ');
							str += y;
						}
					}
				}
			} else {
				for (k in mix) {
					if (mix[k]) {
						str && (str += ' ');
						str += k;
					}
				}
			}
		}

		return str;
	}

	function clsx () {
		var i=0, tmp, x, str='';
		while (i < arguments.length) {
			if (tmp = arguments[i++]) {
				if (x = toVal(tmp)) {
					str && (str += ' ');
					str += x;
				}
			}
		}
		return str;
	}

	/**
	 * Copyright 2015, Yahoo! Inc.
	 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
	 */
	var REACT_STATICS = {
	  childContextTypes: true,
	  contextType: true,
	  contextTypes: true,
	  defaultProps: true,
	  displayName: true,
	  getDefaultProps: true,
	  getDerivedStateFromError: true,
	  getDerivedStateFromProps: true,
	  mixins: true,
	  propTypes: true,
	  type: true
	};
	var KNOWN_STATICS = {
	  name: true,
	  length: true,
	  prototype: true,
	  caller: true,
	  callee: true,
	  arguments: true,
	  arity: true
	};
	var FORWARD_REF_STATICS = {
	  '$$typeof': true,
	  render: true,
	  defaultProps: true,
	  displayName: true,
	  propTypes: true
	};
	var MEMO_STATICS = {
	  '$$typeof': true,
	  compare: true,
	  defaultProps: true,
	  displayName: true,
	  propTypes: true,
	  type: true
	};
	var TYPE_STATICS = {};
	TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
	TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;

	function getStatics(component) {
	  // React v16.11 and below
	  if (reactIs.isMemo(component)) {
	    return MEMO_STATICS;
	  } // React v16.12 and above


	  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
	}

	var defineProperty = Object.defineProperty;
	var getOwnPropertyNames = Object.getOwnPropertyNames;
	var getOwnPropertySymbols$1 = Object.getOwnPropertySymbols;
	var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
	var getPrototypeOf = Object.getPrototypeOf;
	var objectPrototype = Object.prototype;
	function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
	  if (typeof sourceComponent !== 'string') {
	    // don't hoist over string (html) components
	    if (objectPrototype) {
	      var inheritedComponent = getPrototypeOf(sourceComponent);

	      if (inheritedComponent && inheritedComponent !== objectPrototype) {
	        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
	      }
	    }

	    var keys = getOwnPropertyNames(sourceComponent);

	    if (getOwnPropertySymbols$1) {
	      keys = keys.concat(getOwnPropertySymbols$1(sourceComponent));
	    }

	    var targetStatics = getStatics(targetComponent);
	    var sourceStatics = getStatics(sourceComponent);

	    for (var i = 0; i < keys.length; ++i) {
	      var key = keys[i];

	      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
	        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

	        try {
	          // Avoid failures from read-only properties
	          defineProperty(targetComponent, key, descriptor);
	        } catch (e) {}
	      }
	    }
	  }

	  return targetComponent;
	}

	var hoistNonReactStatics_cjs = hoistNonReactStatics;

	function omit$1(input, fields) {
	  var output = {};
	  Object.keys(input).forEach(function (prop) {
	    if (fields.indexOf(prop) === -1) {
	      output[prop] = input[prop];
	    }
	  });
	  return output;
	} // styled-components's API removes the mapping between components and styles.
	// Using components as a low-level styling construct can be simpler.


	function styled(Component) {
	  var componentCreator = function componentCreator(style) {
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	    var name = options.name,
	        stylesOptions = _objectWithoutProperties(options, ["name"]);

	    if (process.env.NODE_ENV !== 'production' && Component === undefined) {
	      throw new Error(['You are calling styled(Component)(style) with an undefined component.', 'You may have forgotten to import it.'].join('\n'));
	    }

	    var classNamePrefix = name;

	    if (process.env.NODE_ENV !== 'production') {
	      if (!name) {
	        // Provide a better DX outside production.
	        var displayName = getDisplayName$1(Component);

	        if (displayName !== undefined) {
	          classNamePrefix = displayName;
	        }
	      }
	    }

	    var stylesOrCreator = typeof style === 'function' ? function (theme) {
	      return {
	        root: function root(props) {
	          return style(_extends({
	            theme: theme
	          }, props));
	        }
	      };
	    } : {
	      root: style
	    };
	    var useStyles = makeStyles(stylesOrCreator, _extends({
	      Component: Component,
	      name: name || Component.displayName,
	      classNamePrefix: classNamePrefix
	    }, stylesOptions));
	    var filterProps;
	    var propTypes$1 = {};

	    if (style.filterProps) {
	      filterProps = style.filterProps;
	      delete style.filterProps;
	    }
	    /* eslint-disable react/forbid-foreign-prop-types */


	    if (style.propTypes) {
	      propTypes$1 = style.propTypes;
	      delete style.propTypes;
	    }
	    /* eslint-enable react/forbid-foreign-prop-types */


	    var StyledComponent = React__default.forwardRef(function StyledComponent(props, ref) {
	      var children = props.children,
	          classNameProp = props.className,
	          clone = props.clone,
	          ComponentProp = props.component,
	          other = _objectWithoutProperties(props, ["children", "className", "clone", "component"]);

	      var classes = useStyles(props);
	      var className = clsx(classes.root, classNameProp);
	      var spread = other;

	      if (filterProps) {
	        spread = omit$1(spread, filterProps);
	      }

	      if (clone) {
	        return React__default.cloneElement(children, _extends({
	          className: clsx(children.props.className, className)
	        }, spread));
	      }

	      if (typeof children === 'function') {
	        return children(_extends({
	          className: className
	        }, spread));
	      }

	      var FinalComponent = ComponentProp || Component;
	      return /*#__PURE__*/React__default.createElement(FinalComponent, _extends({
	        ref: ref,
	        className: className
	      }, spread), children);
	    });
	    process.env.NODE_ENV !== "production" ? StyledComponent.propTypes = _extends({
	      /**
	       * A render function or node.
	       */
	      children: propTypes.oneOfType([propTypes.node, propTypes.func]),

	      /**
	       * @ignore
	       */
	      className: propTypes.string,

	      /**
	       * If `true`, the component will recycle it's children HTML element.
	       * It's using `React.cloneElement` internally.
	       *
	       * This prop will be deprecated and removed in v5
	       */
	      clone: chainPropTypes$1(propTypes.bool, function (props) {
	        if (props.clone && props.component) {
	          return new Error('You can not use the clone and component prop at the same time.');
	        }

	        return null;
	      }),

	      /**
	       * The component used for the root node.
	       * Either a string to use a HTML element or a component.
	       */
	      component: propTypes.elementType
	    }, propTypes$1) : void 0;

	    if (process.env.NODE_ENV !== 'production') {
	      StyledComponent.displayName = "Styled(".concat(classNamePrefix, ")");
	    }

	    hoistNonReactStatics_cjs(StyledComponent, Component);
	    return StyledComponent;
	  };

	  return componentCreator;
	}

	function mergeOuterLocalTheme(outerTheme, localTheme) {
	  if (typeof localTheme === 'function') {
	    var mergedTheme = localTheme(outerTheme);

	    if (process.env.NODE_ENV !== 'production') {
	      if (!mergedTheme) {
	        console.error(['Material-UI: You should return an object from your theme function, i.e.', '<ThemeProvider theme={() => ({})} />'].join('\n'));
	      }
	    }

	    return mergedTheme;
	  }

	  return _extends(_extends({}, outerTheme), localTheme);
	}
	/**
	 * This component takes a `theme` prop.
	 * It makes the `theme` available down the React tree thanks to React context.
	 * This component should preferably be used at **the root of your component tree**.
	 */


	function ThemeProvider(props) {
	  var children = props.children,
	      localTheme = props.theme;
	  var outerTheme = useTheme();

	  if (process.env.NODE_ENV !== 'production') {
	    if (outerTheme === null && typeof localTheme === 'function') {
	      console.error(['Material-UI: You are providing a theme function prop to the ThemeProvider component:', '<ThemeProvider theme={outerTheme => outerTheme} />', '', 'However, no outer theme is present.', 'Make sure a theme is already injected higher in the React tree ' + 'or provide a theme object.'].join('\n'));
	    }
	  }

	  var theme = React__default.useMemo(function () {
	    var output = outerTheme === null ? localTheme : mergeOuterLocalTheme(outerTheme, localTheme);

	    if (output != null) {
	      output[nested] = outerTheme !== null;
	    }

	    return output;
	  }, [localTheme, outerTheme]);
	  return /*#__PURE__*/React__default.createElement(ThemeContext.Provider, {
	    value: theme
	  }, children);
	}

	process.env.NODE_ENV !== "production" ? ThemeProvider.propTypes = {
	  /**
	   * Your component tree.
	   */
	  children: propTypes.node.isRequired,

	  /**
	   * A theme object. You can provide a function to extend the outer theme.
	   */
	  theme: propTypes.oneOfType([propTypes.object, propTypes.func]).isRequired
	} : void 0;

	if (process.env.NODE_ENV !== 'production') {
	  process.env.NODE_ENV !== "production" ? ThemeProvider.propTypes = exactProp$1(ThemeProvider.propTypes) : void 0;
	}

	// It does not modify the component passed to it;
	// instead, it returns a new component, with a `classes` property.

	var withStyles = function withStyles(stylesOrCreator) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  return function (Component) {
	    var defaultTheme = options.defaultTheme,
	        _options$withTheme = options.withTheme,
	        withTheme = _options$withTheme === void 0 ? false : _options$withTheme,
	        name = options.name,
	        stylesOptions = _objectWithoutProperties(options, ["defaultTheme", "withTheme", "name"]);

	    if (process.env.NODE_ENV !== 'production') {
	      if (Component === undefined) {
	        throw new Error(['You are calling withStyles(styles)(Component) with an undefined component.', 'You may have forgotten to import it.'].join('\n'));
	      }
	    }

	    var classNamePrefix = name;

	    if (process.env.NODE_ENV !== 'production') {
	      if (!name) {
	        // Provide a better DX outside production.
	        var displayName = getDisplayName$1(Component);

	        if (displayName !== undefined) {
	          classNamePrefix = displayName;
	        }
	      }
	    }

	    var useStyles = makeStyles(stylesOrCreator, _extends({
	      defaultTheme: defaultTheme,
	      Component: Component,
	      name: name || Component.displayName,
	      classNamePrefix: classNamePrefix
	    }, stylesOptions));
	    var WithStyles = React__default.forwardRef(function WithStyles(props, ref) {
	      var classesProp = props.classes,
	          innerRef = props.innerRef,
	          other = _objectWithoutProperties(props, ["classes", "innerRef"]); // The wrapper receives only user supplied props, which could be a subset of
	      // the actual props Component might receive due to merging with defaultProps.
	      // So copying it here would give us the same result in the wrapper as well.


	      var classes = useStyles(_extends(_extends({}, Component.defaultProps), props));
	      var theme;
	      var more = other;

	      if (typeof name === 'string' || withTheme) {
	        // name and withTheme are invariant in the outer scope
	        // eslint-disable-next-line react-hooks/rules-of-hooks
	        theme = useTheme() || defaultTheme;

	        if (name) {
	          more = getThemeProps({
	            theme: theme,
	            name: name,
	            props: other
	          });
	        } // Provide the theme to the wrapped component.
	        // So we don't have to use the `withTheme()` Higher-order Component.


	        if (withTheme && !more.theme) {
	          more.theme = theme;
	        }
	      }

	      return /*#__PURE__*/React__default.createElement(Component, _extends({
	        ref: innerRef || ref,
	        classes: classes
	      }, more));
	    });
	    process.env.NODE_ENV !== "production" ? WithStyles.propTypes = {
	      /**
	       * Override or extend the styles applied to the component.
	       */
	      classes: propTypes.object,

	      /**
	       * Use that prop to pass a ref to the decorated component.
	       * @deprecated
	       */
	      innerRef: chainPropTypes$1(propTypes.oneOfType([propTypes.func, propTypes.object]), function (props) {
	        if (props.innerRef == null) {
	          return null;
	        }

	        return null; // return new Error(
	        //   'Material-UI: The `innerRef` prop is deprecated and will be removed in v5. ' +
	        //     'Refs are now automatically forwarded to the inner component.',
	        // );
	      })
	    } : void 0;

	    if (process.env.NODE_ENV !== 'production') {
	      WithStyles.displayName = "WithStyles(".concat(getDisplayName$1(Component), ")");
	    }

	    hoistNonReactStatics_cjs(WithStyles, Component);

	    if (process.env.NODE_ENV !== 'production') {
	      // Exposed for test purposes.
	      WithStyles.Naked = Component;
	      WithStyles.options = options;
	      WithStyles.useStyles = useStyles;
	    }

	    return WithStyles;
	  };
	};

	function withThemeCreator() {
	  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  var defaultTheme = options.defaultTheme;

	  var withTheme = function withTheme(Component) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (Component === undefined) {
	        throw new Error(['You are calling withTheme(Component) with an undefined component.', 'You may have forgotten to import it.'].join('\n'));
	      }
	    }

	    var WithTheme = React__default.forwardRef(function WithTheme(props, ref) {
	      var innerRef = props.innerRef,
	          other = _objectWithoutProperties(props, ["innerRef"]);

	      var theme = useTheme() || defaultTheme;
	      return /*#__PURE__*/React__default.createElement(Component, _extends({
	        theme: theme,
	        ref: innerRef || ref
	      }, other));
	    });
	    process.env.NODE_ENV !== "production" ? WithTheme.propTypes = {
	      /**
	       * Use that prop to pass a ref to the decorated component.
	       * @deprecated
	       */
	      innerRef: chainPropTypes$1(propTypes.oneOfType([propTypes.func, propTypes.object]), function (props) {
	        if (props.innerRef == null) {
	          return null;
	        }

	        return new Error('Material-UI: The `innerRef` prop is deprecated and will be removed in v5. ' + 'Refs are now automatically forwarded to the inner component.');
	      })
	    } : void 0;

	    if (process.env.NODE_ENV !== 'production') {
	      WithTheme.displayName = "WithTheme(".concat(getDisplayName$1(Component), ")");
	    }

	    hoistNonReactStatics_cjs(WithTheme, Component);

	    if (process.env.NODE_ENV !== 'production') {
	      // Exposed for test purposes.
	      WithTheme.Naked = Component;
	    }

	    return WithTheme;
	  };

	  return withTheme;
	} // Provide the theme object as a prop to the input component.
	// It's an alternative API to useTheme().
	// We encourage the usage of useTheme() where possible.

	var withTheme = withThemeCreator();

	/** @license Material-UI v4.10.0
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var esm$2 = /*#__PURE__*/Object.freeze({
		__proto__: null,
		createGenerateClassName: createGenerateClassName,
		createStyles: createStyles,
		getThemeProps: getThemeProps,
		jssPreset: jssPreset,
		makeStyles: makeStyles,
		mergeClasses: mergeClasses,
		ServerStyleSheets: ServerStyleSheets,
		styled: styled,
		StylesProvider: StylesProvider,
		ThemeProvider: ThemeProvider,
		useTheme: useTheme,
		withStyles: withStyles,
		withTheme: withTheme,
		sheetsManager: sheetsManager,
		StylesContext: StylesContext,
		withThemeCreator: withThemeCreator
	});

	// To remove in v5

	function createStyles$1(styles) {
	  // warning(
	  //   warnOnce,
	  //   [
	  //     'Material-UI: createStyles from @material-ui/core/styles is deprecated.',
	  //     'Please use @material-ui/styles/createStyles',
	  //   ].join('\n'),
	  // );
	  // warnOnce = true;
	  return createStyles(styles);
	}

	var defaultTheme = createMuiTheme();

	function makeStyles$1(stylesOrCreator) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  return makeStyles(stylesOrCreator, _extends({
	    defaultTheme: defaultTheme
	  }, options));
	}

	var styled$1 = function styled$1(Component) {
	  var componentCreator = styled(Component);
	  return function (style, options) {
	    return componentCreator(style, _extends({
	      defaultTheme: defaultTheme
	    }, options));
	  };
	};

	function useTheme$1() {
	  var theme = useTheme() || defaultTheme;

	  if (process.env.NODE_ENV !== 'production') {
	    // eslint-disable-next-line react-hooks/rules-of-hooks
	    React__default.useDebugValue(theme);
	  }

	  return theme;
	}

	function withStyles$1(stylesOrCreator, options) {
	  return withStyles(stylesOrCreator, _extends({
	    defaultTheme: defaultTheme
	  }, options));
	}

	// It should to be noted that this function isn't equivalent to `text-transform: capitalize`.
	//
	// A strict capitalization should uppercase the first letter of each word a the sentence.
	// We only handle the first word.
	function capitalize(string) {
	  if (typeof string !== 'string') {
	    throw new Error(process.env.NODE_ENV !== "production" ? "Material-UI: capitalize(string) expects a string argument." : formatMuiErrorMessage(7));
	  }

	  return string.charAt(0).toUpperCase() + string.slice(1);
	}

	/**
	 * Safe chained function
	 *
	 * Will only create a new function if needed,
	 * otherwise will pass back existing functions or null.
	 *
	 * @param {function} functions to chain
	 * @returns {function|null}
	 */
	function createChainedFunction() {
	  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
	    funcs[_key] = arguments[_key];
	  }

	  return funcs.reduce(function (acc, func) {
	    if (func == null) {
	      return acc;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      if (typeof func !== 'function') {
	        console.error('Material-UI: Invalid Argument Type, must only provide functions, undefined, or null.');
	      }
	    }

	    return function chainedFunction() {
	      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	        args[_key2] = arguments[_key2];
	      }

	      acc.apply(this, args);
	      func.apply(this, args);
	    };
	  }, function () {});
	}

	var styles = function styles(theme) {
	  return {
	    /* Styles applied to the root element. */
	    root: {
	      userSelect: 'none',
	      width: '1em',
	      height: '1em',
	      display: 'inline-block',
	      fill: 'currentColor',
	      flexShrink: 0,
	      fontSize: theme.typography.pxToRem(24),
	      transition: theme.transitions.create('fill', {
	        duration: theme.transitions.duration.shorter
	      })
	    },

	    /* Styles applied to the root element if `color="primary"`. */
	    colorPrimary: {
	      color: theme.palette.primary.main
	    },

	    /* Styles applied to the root element if `color="secondary"`. */
	    colorSecondary: {
	      color: theme.palette.secondary.main
	    },

	    /* Styles applied to the root element if `color="action"`. */
	    colorAction: {
	      color: theme.palette.action.active
	    },

	    /* Styles applied to the root element if `color="error"`. */
	    colorError: {
	      color: theme.palette.error.main
	    },

	    /* Styles applied to the root element if `color="disabled"`. */
	    colorDisabled: {
	      color: theme.palette.action.disabled
	    },

	    /* Styles applied to the root element if `fontSize="inherit"`. */
	    fontSizeInherit: {
	      fontSize: 'inherit'
	    },

	    /* Styles applied to the root element if `fontSize="small"`. */
	    fontSizeSmall: {
	      fontSize: theme.typography.pxToRem(20)
	    },

	    /* Styles applied to the root element if `fontSize="large"`. */
	    fontSizeLarge: {
	      fontSize: theme.typography.pxToRem(35)
	    }
	  };
	};
	var SvgIcon = /*#__PURE__*/React.forwardRef(function SvgIcon(props, ref) {
	  var children = props.children,
	      classes = props.classes,
	      className = props.className,
	      _props$color = props.color,
	      color = _props$color === void 0 ? 'inherit' : _props$color,
	      _props$component = props.component,
	      Component = _props$component === void 0 ? 'svg' : _props$component,
	      _props$fontSize = props.fontSize,
	      fontSize = _props$fontSize === void 0 ? 'default' : _props$fontSize,
	      htmlColor = props.htmlColor,
	      titleAccess = props.titleAccess,
	      _props$viewBox = props.viewBox,
	      viewBox = _props$viewBox === void 0 ? '0 0 24 24' : _props$viewBox,
	      other = _objectWithoutProperties(props, ["children", "classes", "className", "color", "component", "fontSize", "htmlColor", "titleAccess", "viewBox"]);

	  return /*#__PURE__*/React.createElement(Component, _extends({
	    className: clsx(classes.root, className, color !== 'inherit' && classes["color".concat(capitalize(color))], fontSize !== 'default' && classes["fontSize".concat(capitalize(fontSize))]),
	    focusable: "false",
	    viewBox: viewBox,
	    color: htmlColor,
	    "aria-hidden": titleAccess ? undefined : true,
	    role: titleAccess ? 'img' : undefined,
	    ref: ref
	  }, other), children, titleAccess ? /*#__PURE__*/React.createElement("title", null, titleAccess) : null);
	});
	process.env.NODE_ENV !== "production" ? SvgIcon.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Node passed into the SVG element.
	   */
	  children: propTypes.node,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.string,

	  /**
	   * The color of the component. It supports those theme colors that make sense for this component.
	   * You can use the `htmlColor` prop to apply a color attribute to the SVG element.
	   */
	  color: propTypes.oneOf(['action', 'disabled', 'error', 'inherit', 'primary', 'secondary']),

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes
	  /* @typescript-to-proptypes-ignore */
	  .elementType,

	  /**
	   * The fontSize applied to the icon. Defaults to 24px, but can be configure to inherit font size.
	   */
	  fontSize: propTypes.oneOf(['default', 'inherit', 'large', 'small']),

	  /**
	   * Applies a color attribute to the SVG element.
	   */
	  htmlColor: propTypes.string,

	  /**
	   * The shape-rendering attribute. The behavior of the different options is described on the
	   * [MDN Web Docs](https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/shape-rendering).
	   * If you are having issues with blurry icons you should investigate this property.
	   */
	  shapeRendering: propTypes.string,

	  /**
	   * Provides a human-readable title for the element that contains it.
	   * https://www.w3.org/TR/SVG-access/#Equivalent
	   */
	  titleAccess: propTypes.string,

	  /**
	   * Allows you to redefine what the coordinates without units mean inside an SVG element.
	   * For example, if the SVG element is 500 (width) by 200 (height),
	   * and you pass viewBox="0 0 50 20",
	   * this means that the coordinates inside the SVG will go from the top left corner (0,0)
	   * to bottom right (50,20) and each unit will be worth 10px.
	   */
	  viewBox: propTypes.string
	} : void 0;
	SvgIcon.muiName = 'SvgIcon';
	var require$$2 = withStyles$1(styles, {
	  name: 'MuiSvgIcon'
	})(SvgIcon);

	/**
	 * Private module reserved for @material-ui/x packages.
	 */

	function createSvgIcon(path, displayName) {
	  var Component = function Component(props, ref) {
	    return /*#__PURE__*/React__default.createElement(require$$2, _extends({
	      ref: ref
	    }, props), path);
	  };

	  if (process.env.NODE_ENV !== 'production') {
	    // Need to set `displayName` on the inner component for React.memo.
	    // React prior to 16.14 ignores `displayName` on the wrapper.
	    Component.displayName = "".concat(displayName, "Icon");
	  }

	  Component.muiName = require$$2.muiName;
	  return /*#__PURE__*/React__default.memo( /*#__PURE__*/React__default.forwardRef(Component));
	}

	// Corresponds to 10 frames at 60 Hz.
	// A few bytes payload overhead when lodash/debounce is ~3 kB and debounce ~300 B.
	function debounce$1(func) {
	  var wait = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 166;
	  var timeout;

	  function debounced() {
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    // eslint-disable-next-line consistent-this
	    var that = this;

	    var later = function later() {
	      func.apply(that, args);
	    };

	    clearTimeout(timeout);
	    timeout = setTimeout(later, wait);
	  }

	  debounced.clear = function () {
	    clearTimeout(timeout);
	  };

	  return debounced;
	}

	function isMuiElement(element, muiNames) {
	  return /*#__PURE__*/React.isValidElement(element) && muiNames.indexOf(element.type.muiName) !== -1;
	}

	function ownerDocument(node) {
	  return node && node.ownerDocument || document;
	}

	function ownerWindow(node) {
	  var doc = ownerDocument(node);
	  return doc.defaultView || window;
	}

	function requirePropFactory(componentNameInError) {
	  if (process.env.NODE_ENV === 'production') {
	    return function () {
	      return null;
	    };
	  }

	  var requireProp = function requireProp(requiredProp) {
	    return function (props, propName, componentName, location, propFullName) {
	      var propFullNameSafe = propFullName || propName;

	      if (typeof props[propName] !== 'undefined' && !props[requiredProp]) {
	        return new Error("The prop `".concat(propFullNameSafe, "` of ") + "`".concat(componentNameInError, "` must be used on `").concat(requiredProp, "`."));
	      }

	      return null;
	    };
	  };

	  return requireProp;
	}

	// TODO v5: consider to make it private
	function setRef(ref, value) {
	  if (typeof ref === 'function') {
	    ref(value);
	  } else if (ref) {
	    ref.current = value;
	  }
	}

	/* eslint-disable react-hooks/rules-of-hooks, react-hooks/exhaustive-deps */
	function useControlled(_ref) {
	  var controlled = _ref.controlled,
	      defaultProp = _ref.default,
	      name = _ref.name,
	      _ref$state = _ref.state,
	      state = _ref$state === void 0 ? 'value' : _ref$state;

	  var _React$useRef = React.useRef(controlled !== undefined),
	      isControlled = _React$useRef.current;

	  var _React$useState = React.useState(defaultProp),
	      valueState = _React$useState[0],
	      setValue = _React$useState[1];

	  var value = isControlled ? controlled : valueState;

	  if (process.env.NODE_ENV !== 'production') {
	    React.useEffect(function () {
	      if (isControlled !== (controlled !== undefined)) {
	        console.error(["Material-UI: A component is changing the ".concat(isControlled ? '' : 'un', "controlled ").concat(state, " state of ").concat(name, " to be ").concat(isControlled ? 'un' : '', "controlled."), 'Elements should not switch from uncontrolled to controlled (or vice versa).', "Decide between using a controlled or uncontrolled ".concat(name, " ") + 'element for the lifetime of the component.', "The nature of the state is determined during the first render, it's considered controlled if the value is not `undefined`.", 'More info: https://fb.me/react-controlled-components'].join('\n'));
	      }
	    }, [controlled]);

	    var _React$useRef2 = React.useRef(defaultProp),
	        defaultValue = _React$useRef2.current;

	    React.useEffect(function () {
	      if (!isControlled && defaultValue !== defaultProp) {
	        console.error(["Material-UI: A component is changing the default ".concat(state, " state of an uncontrolled ").concat(name, " after being initialized. ") + "To suppress this warning opt to use a controlled ".concat(name, ".")].join('\n'));
	      }
	    }, [JSON.stringify(defaultProp)]);
	  }

	  var setValueIfUncontrolled = React.useCallback(function (newValue) {
	    if (!isControlled) {
	      setValue(newValue);
	    }
	  }, []);
	  return [value, setValueIfUncontrolled];
	}

	var useEnhancedEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;
	/**
	 * https://github.com/facebook/react/issues/14099#issuecomment-440013892
	 *
	 * @param {function} fn
	 */

	function useEventCallback(fn) {
	  var ref = React.useRef(fn);
	  useEnhancedEffect(function () {
	    ref.current = fn;
	  });
	  return React.useCallback(function () {
	    return (ref.current).apply(void 0, arguments);
	  }, []);
	}

	function useForkRef(refA, refB) {
	  /**
	   * This will create a new function if the ref props change and are defined.
	   * This means react will call the old forkRef with `null` and the new forkRef
	   * with the ref. Cleanup naturally emerges from this behavior
	   */
	  return React.useMemo(function () {
	    if (refA == null && refB == null) {
	      return null;
	    }

	    return function (refValue) {
	      setRef(refA, refValue);
	      setRef(refB, refValue);
	    };
	  }, [refA, refB]);
	}

	// based on https://github.com/WICG/focus-visible/blob/v4.1.5/src/focus-visible.js
	var hadKeyboardEvent = true;
	var hadFocusVisibleRecently = false;
	var hadFocusVisibleRecentlyTimeout = null;
	var inputTypesWhitelist = {
	  text: true,
	  search: true,
	  url: true,
	  tel: true,
	  email: true,
	  password: true,
	  number: true,
	  date: true,
	  month: true,
	  week: true,
	  time: true,
	  datetime: true,
	  'datetime-local': true
	};
	/**
	 * Computes whether the given element should automatically trigger the
	 * `focus-visible` class being added, i.e. whether it should always match
	 * `:focus-visible` when focused.
	 * @param {Element} node
	 * @return {boolean}
	 */

	function focusTriggersKeyboardModality(node) {
	  var type = node.type,
	      tagName = node.tagName;

	  if (tagName === 'INPUT' && inputTypesWhitelist[type] && !node.readOnly) {
	    return true;
	  }

	  if (tagName === 'TEXTAREA' && !node.readOnly) {
	    return true;
	  }

	  if (node.isContentEditable) {
	    return true;
	  }

	  return false;
	}
	/**
	 * Keep track of our keyboard modality state with `hadKeyboardEvent`.
	 * If the most recent user interaction was via the keyboard;
	 * and the key press did not include a meta, alt/option, or control key;
	 * then the modality is keyboard. Otherwise, the modality is not keyboard.
	 * @param {KeyboardEvent} event
	 */


	function handleKeyDown(event) {
	  if (event.metaKey || event.altKey || event.ctrlKey) {
	    return;
	  }

	  hadKeyboardEvent = true;
	}
	/**
	 * If at any point a user clicks with a pointing device, ensure that we change
	 * the modality away from keyboard.
	 * This avoids the situation where a user presses a key on an already focused
	 * element, and then clicks on a different element, focusing it with a
	 * pointing device, while we still think we're in keyboard modality.
	 */


	function handlePointerDown() {
	  hadKeyboardEvent = false;
	}

	function handleVisibilityChange() {
	  if (this.visibilityState === 'hidden') {
	    // If the tab becomes active again, the browser will handle calling focus
	    // on the element (Safari actually calls it twice).
	    // If this tab change caused a blur on an element with focus-visible,
	    // re-apply the class when the user switches back to the tab.
	    if (hadFocusVisibleRecently) {
	      hadKeyboardEvent = true;
	    }
	  }
	}

	function prepare(doc) {
	  doc.addEventListener('keydown', handleKeyDown, true);
	  doc.addEventListener('mousedown', handlePointerDown, true);
	  doc.addEventListener('pointerdown', handlePointerDown, true);
	  doc.addEventListener('touchstart', handlePointerDown, true);
	  doc.addEventListener('visibilitychange', handleVisibilityChange, true);
	}

	function isFocusVisible(event) {
	  var target = event.target;

	  try {
	    return target.matches(':focus-visible');
	  } catch (error) {} // browsers not implementing :focus-visible will throw a SyntaxError
	  // we use our own heuristic for those browsers
	  // rethrow might be better if it's not the expected error but do we really
	  // want to crash if focus-visible malfunctioned?
	  // no need for validFocusTarget check. the user does that by attaching it to
	  // focusable events only


	  return hadKeyboardEvent || focusTriggersKeyboardModality(target);
	}
	/**
	 * Should be called if a blur event is fired on a focus-visible element
	 */


	function handleBlurVisible() {
	  // To detect a tab/window switch, we look for a blur event followed
	  // rapidly by a visibility change.
	  // If we don't see a visibility change within 100ms, it's probably a
	  // regular focus change.
	  hadFocusVisibleRecently = true;
	  window.clearTimeout(hadFocusVisibleRecentlyTimeout);
	  hadFocusVisibleRecentlyTimeout = window.setTimeout(function () {
	    hadFocusVisibleRecently = false;
	  }, 100);
	}

	function useIsFocusVisible() {
	  var ref = React.useCallback(function (instance) {
	    var node = ReactDOM.findDOMNode(instance);

	    if (node != null) {
	      prepare(node.ownerDocument);
	    }
	  }, []);

	  if (process.env.NODE_ENV !== 'production') {
	    // eslint-disable-next-line react-hooks/rules-of-hooks
	    React.useDebugValue(isFocusVisible);
	  }

	  return {
	    isFocusVisible: isFocusVisible,
	    onBlurVisible: handleBlurVisible,
	    ref: ref
	  };
	}

	var styles$1 = function styles(theme) {
	  var elevations = {};
	  theme.shadows.forEach(function (shadow, index) {
	    elevations["elevation".concat(index)] = {
	      boxShadow: shadow
	    };
	  });
	  return _extends({
	    /* Styles applied to the root element. */
	    root: {
	      backgroundColor: theme.palette.background.paper,
	      color: theme.palette.text.primary,
	      transition: theme.transitions.create('box-shadow')
	    },

	    /* Styles applied to the root element if `square={false}`. */
	    rounded: {
	      borderRadius: theme.shape.borderRadius
	    },

	    /* Styles applied to the root element if `variant="outlined"`. */
	    outlined: {
	      border: "1px solid ".concat(theme.palette.divider)
	    }
	  }, elevations);
	};
	var Paper = /*#__PURE__*/React.forwardRef(function Paper(props, ref) {
	  var classes = props.classes,
	      className = props.className,
	      _props$component = props.component,
	      Component = _props$component === void 0 ? 'div' : _props$component,
	      _props$square = props.square,
	      square = _props$square === void 0 ? false : _props$square,
	      _props$elevation = props.elevation,
	      elevation = _props$elevation === void 0 ? 1 : _props$elevation,
	      _props$variant = props.variant,
	      variant = _props$variant === void 0 ? 'elevation' : _props$variant,
	      other = _objectWithoutProperties(props, ["classes", "className", "component", "square", "elevation", "variant"]);

	  return /*#__PURE__*/React.createElement(Component, _extends({
	    className: clsx(classes.root, className, variant === 'outlined' ? classes.outlined : classes["elevation".concat(elevation)], !square && classes.rounded),
	    ref: ref
	  }, other));
	});
	process.env.NODE_ENV !== "production" ? Paper.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.node,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes
	  /* @typescript-to-proptypes-ignore */
	  .elementType,

	  /**
	   * Shadow depth, corresponds to `dp` in the spec.
	   * It accepts values between 0 and 24 inclusive.
	   */
	  elevation: chainPropTypes(propTypes.number, function (props) {
	    var classes = props.classes,
	        elevation = props.elevation; // in case `withStyles` fails to inject we don't need this warning

	    if (classes === undefined) {
	      return null;
	    }

	    if (elevation != null && classes["elevation".concat(elevation)] === undefined) {
	      return new Error("Material-UI: This elevation `".concat(elevation, "` is not implemented."));
	    }

	    return null;
	  }),

	  /**
	   * If `true`, rounded corners are disabled.
	   */
	  square: propTypes.bool,

	  /**
	   * The variant to use.
	   */
	  variant: propTypes.oneOf(['elevation', 'outlined'])
	} : void 0;
	var Paper$1 = withStyles$1(styles$1, {
	  name: 'MuiPaper'
	})(Paper);

	var config = {
	  disabled: false
	};

	var timeoutsShape = process.env.NODE_ENV !== 'production' ? propTypes.oneOfType([propTypes.number, propTypes.shape({
	  enter: propTypes.number,
	  exit: propTypes.number,
	  appear: propTypes.number
	}).isRequired]) : null;
	var classNamesShape = process.env.NODE_ENV !== 'production' ? propTypes.oneOfType([propTypes.string, propTypes.shape({
	  enter: propTypes.string,
	  exit: propTypes.string,
	  active: propTypes.string
	}), propTypes.shape({
	  enter: propTypes.string,
	  enterDone: propTypes.string,
	  enterActive: propTypes.string,
	  exit: propTypes.string,
	  exitDone: propTypes.string,
	  exitActive: propTypes.string
	})]) : null;

	var TransitionGroupContext = React__default.createContext(null);

	var UNMOUNTED = 'unmounted';
	var EXITED = 'exited';
	var ENTERING = 'entering';
	var ENTERED = 'entered';
	var EXITING = 'exiting';
	/**
	 * The Transition component lets you describe a transition from one component
	 * state to another _over time_ with a simple declarative API. Most commonly
	 * it's used to animate the mounting and unmounting of a component, but can also
	 * be used to describe in-place transition states as well.
	 *
	 * ---
	 *
	 * **Note**: `Transition` is a platform-agnostic base component. If you're using
	 * transitions in CSS, you'll probably want to use
	 * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
	 * instead. It inherits all the features of `Transition`, but contains
	 * additional features necessary to play nice with CSS transitions (hence the
	 * name of the component).
	 *
	 * ---
	 *
	 * By default the `Transition` component does not alter the behavior of the
	 * component it renders, it only tracks "enter" and "exit" states for the
	 * components. It's up to you to give meaning and effect to those states. For
	 * example we can add styles to a component when it enters or exits:
	 *
	 * ```jsx
	 * import { Transition } from 'react-transition-group';
	 *
	 * const duration = 300;
	 *
	 * const defaultStyle = {
	 *   transition: `opacity ${duration}ms ease-in-out`,
	 *   opacity: 0,
	 * }
	 *
	 * const transitionStyles = {
	 *   entering: { opacity: 1 },
	 *   entered:  { opacity: 1 },
	 *   exiting:  { opacity: 0 },
	 *   exited:  { opacity: 0 },
	 * };
	 *
	 * const Fade = ({ in: inProp }) => (
	 *   <Transition in={inProp} timeout={duration}>
	 *     {state => (
	 *       <div style={{
	 *         ...defaultStyle,
	 *         ...transitionStyles[state]
	 *       }}>
	 *         I'm a fade Transition!
	 *       </div>
	 *     )}
	 *   </Transition>
	 * );
	 * ```
	 *
	 * There are 4 main states a Transition can be in:
	 *  - `'entering'`
	 *  - `'entered'`
	 *  - `'exiting'`
	 *  - `'exited'`
	 *
	 * Transition state is toggled via the `in` prop. When `true` the component
	 * begins the "Enter" stage. During this stage, the component will shift from
	 * its current transition state, to `'entering'` for the duration of the
	 * transition and then to the `'entered'` stage once it's complete. Let's take
	 * the following example (we'll use the
	 * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
	 *
	 * ```jsx
	 * function App() {
	 *   const [inProp, setInProp] = useState(false);
	 *   return (
	 *     <div>
	 *       <Transition in={inProp} timeout={500}>
	 *         {state => (
	 *           // ...
	 *         )}
	 *       </Transition>
	 *       <button onClick={() => setInProp(true)}>
	 *         Click to Enter
	 *       </button>
	 *     </div>
	 *   );
	 * }
	 * ```
	 *
	 * When the button is clicked the component will shift to the `'entering'` state
	 * and stay there for 500ms (the value of `timeout`) before it finally switches
	 * to `'entered'`.
	 *
	 * When `in` is `false` the same thing happens except the state moves from
	 * `'exiting'` to `'exited'`.
	 */

	var Transition = /*#__PURE__*/function (_React$Component) {
	  _inheritsLoose(Transition, _React$Component);

	  function Transition(props, context) {
	    var _this;

	    _this = _React$Component.call(this, props, context) || this;
	    var parentGroup = context; // In the context of a TransitionGroup all enters are really appears

	    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
	    var initialStatus;
	    _this.appearStatus = null;

	    if (props.in) {
	      if (appear) {
	        initialStatus = EXITED;
	        _this.appearStatus = ENTERING;
	      } else {
	        initialStatus = ENTERED;
	      }
	    } else {
	      if (props.unmountOnExit || props.mountOnEnter) {
	        initialStatus = UNMOUNTED;
	      } else {
	        initialStatus = EXITED;
	      }
	    }

	    _this.state = {
	      status: initialStatus
	    };
	    _this.nextCallback = null;
	    return _this;
	  }

	  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
	    var nextIn = _ref.in;

	    if (nextIn && prevState.status === UNMOUNTED) {
	      return {
	        status: EXITED
	      };
	    }

	    return null;
	  } // getSnapshotBeforeUpdate(prevProps) {
	  //   let nextStatus = null
	  //   if (prevProps !== this.props) {
	  //     const { status } = this.state
	  //     if (this.props.in) {
	  //       if (status !== ENTERING && status !== ENTERED) {
	  //         nextStatus = ENTERING
	  //       }
	  //     } else {
	  //       if (status === ENTERING || status === ENTERED) {
	  //         nextStatus = EXITING
	  //       }
	  //     }
	  //   }
	  //   return { nextStatus }
	  // }
	  ;

	  var _proto = Transition.prototype;

	  _proto.componentDidMount = function componentDidMount() {
	    this.updateStatus(true, this.appearStatus);
	  };

	  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
	    var nextStatus = null;

	    if (prevProps !== this.props) {
	      var status = this.state.status;

	      if (this.props.in) {
	        if (status !== ENTERING && status !== ENTERED) {
	          nextStatus = ENTERING;
	        }
	      } else {
	        if (status === ENTERING || status === ENTERED) {
	          nextStatus = EXITING;
	        }
	      }
	    }

	    this.updateStatus(false, nextStatus);
	  };

	  _proto.componentWillUnmount = function componentWillUnmount() {
	    this.cancelNextCallback();
	  };

	  _proto.getTimeouts = function getTimeouts() {
	    var timeout = this.props.timeout;
	    var exit, enter, appear;
	    exit = enter = appear = timeout;

	    if (timeout != null && typeof timeout !== 'number') {
	      exit = timeout.exit;
	      enter = timeout.enter; // TODO: remove fallback for next major

	      appear = timeout.appear !== undefined ? timeout.appear : enter;
	    }

	    return {
	      exit: exit,
	      enter: enter,
	      appear: appear
	    };
	  };

	  _proto.updateStatus = function updateStatus(mounting, nextStatus) {
	    if (mounting === void 0) {
	      mounting = false;
	    }

	    if (nextStatus !== null) {
	      // nextStatus will always be ENTERING or EXITING.
	      this.cancelNextCallback();

	      if (nextStatus === ENTERING) {
	        this.performEnter(mounting);
	      } else {
	        this.performExit();
	      }
	    } else if (this.props.unmountOnExit && this.state.status === EXITED) {
	      this.setState({
	        status: UNMOUNTED
	      });
	    }
	  };

	  _proto.performEnter = function performEnter(mounting) {
	    var _this2 = this;

	    var enter = this.props.enter;
	    var appearing = this.context ? this.context.isMounting : mounting;

	    var _ref2 = this.props.nodeRef ? [appearing] : [ReactDOM__default.findDOMNode(this), appearing],
	        maybeNode = _ref2[0],
	        maybeAppearing = _ref2[1];

	    var timeouts = this.getTimeouts();
	    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
	    // if we are mounting and running this it means appear _must_ be set

	    if (!mounting && !enter || config.disabled) {
	      this.safeSetState({
	        status: ENTERED
	      }, function () {
	        _this2.props.onEntered(maybeNode);
	      });
	      return;
	    }

	    this.props.onEnter(maybeNode, maybeAppearing);
	    this.safeSetState({
	      status: ENTERING
	    }, function () {
	      _this2.props.onEntering(maybeNode, maybeAppearing);

	      _this2.onTransitionEnd(enterTimeout, function () {
	        _this2.safeSetState({
	          status: ENTERED
	        }, function () {
	          _this2.props.onEntered(maybeNode, maybeAppearing);
	        });
	      });
	    });
	  };

	  _proto.performExit = function performExit() {
	    var _this3 = this;

	    var exit = this.props.exit;
	    var timeouts = this.getTimeouts();
	    var maybeNode = this.props.nodeRef ? undefined : ReactDOM__default.findDOMNode(this); // no exit animation skip right to EXITED

	    if (!exit || config.disabled) {
	      this.safeSetState({
	        status: EXITED
	      }, function () {
	        _this3.props.onExited(maybeNode);
	      });
	      return;
	    }

	    this.props.onExit(maybeNode);
	    this.safeSetState({
	      status: EXITING
	    }, function () {
	      _this3.props.onExiting(maybeNode);

	      _this3.onTransitionEnd(timeouts.exit, function () {
	        _this3.safeSetState({
	          status: EXITED
	        }, function () {
	          _this3.props.onExited(maybeNode);
	        });
	      });
	    });
	  };

	  _proto.cancelNextCallback = function cancelNextCallback() {
	    if (this.nextCallback !== null) {
	      this.nextCallback.cancel();
	      this.nextCallback = null;
	    }
	  };

	  _proto.safeSetState = function safeSetState(nextState, callback) {
	    // This shouldn't be necessary, but there are weird race conditions with
	    // setState callbacks and unmounting in testing, so always make sure that
	    // we can cancel any pending setState callbacks after we unmount.
	    callback = this.setNextCallback(callback);
	    this.setState(nextState, callback);
	  };

	  _proto.setNextCallback = function setNextCallback(callback) {
	    var _this4 = this;

	    var active = true;

	    this.nextCallback = function (event) {
	      if (active) {
	        active = false;
	        _this4.nextCallback = null;
	        callback(event);
	      }
	    };

	    this.nextCallback.cancel = function () {
	      active = false;
	    };

	    return this.nextCallback;
	  };

	  _proto.onTransitionEnd = function onTransitionEnd(timeout, handler) {
	    this.setNextCallback(handler);
	    var node = this.props.nodeRef ? this.props.nodeRef.current : ReactDOM__default.findDOMNode(this);
	    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;

	    if (!node || doesNotHaveTimeoutOrListener) {
	      setTimeout(this.nextCallback, 0);
	      return;
	    }

	    if (this.props.addEndListener) {
	      var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback],
	          maybeNode = _ref3[0],
	          maybeNextCallback = _ref3[1];

	      this.props.addEndListener(maybeNode, maybeNextCallback);
	    }

	    if (timeout != null) {
	      setTimeout(this.nextCallback, timeout);
	    }
	  };

	  _proto.render = function render() {
	    var status = this.state.status;

	    if (status === UNMOUNTED) {
	      return null;
	    }

	    var _this$props = this.props,
	        children = _this$props.children,
	        _in = _this$props.in,
	        _mountOnEnter = _this$props.mountOnEnter,
	        _unmountOnExit = _this$props.unmountOnExit,
	        _appear = _this$props.appear,
	        _enter = _this$props.enter,
	        _exit = _this$props.exit,
	        _timeout = _this$props.timeout,
	        _addEndListener = _this$props.addEndListener,
	        _onEnter = _this$props.onEnter,
	        _onEntering = _this$props.onEntering,
	        _onEntered = _this$props.onEntered,
	        _onExit = _this$props.onExit,
	        _onExiting = _this$props.onExiting,
	        _onExited = _this$props.onExited,
	        _nodeRef = _this$props.nodeRef,
	        childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);

	    return (
	      /*#__PURE__*/
	      // allows for nested Transitions
	      React__default.createElement(TransitionGroupContext.Provider, {
	        value: null
	      }, typeof children === 'function' ? children(status, childProps) : React__default.cloneElement(React__default.Children.only(children), childProps))
	    );
	  };

	  return Transition;
	}(React__default.Component);

	Transition.contextType = TransitionGroupContext;
	Transition.propTypes = process.env.NODE_ENV !== "production" ? {
	  /**
	   * A React reference to DOM element that need to transition:
	   * https://stackoverflow.com/a/51127130/4671932
	   *
	   *   - When `nodeRef` prop is used, `node` is not passed to callback functions
	   *      (e.g. `onEnter`) because user already has direct access to the node.
	   *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
	   *     `nodeRef` need to be provided to `Transition` with changed `key` prop
	   *     (see
	   *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
	   */
	  nodeRef: propTypes.shape({
	    current: typeof Element === 'undefined' ? propTypes.any : propTypes.instanceOf(Element)
	  }),

	  /**
	   * A `function` child can be used instead of a React element. This function is
	   * called with the current transition status (`'entering'`, `'entered'`,
	   * `'exiting'`, `'exited'`), which can be used to apply context
	   * specific props to a component.
	   *
	   * ```jsx
	   * <Transition in={this.state.in} timeout={150}>
	   *   {state => (
	   *     <MyComponent className={`fade fade-${state}`} />
	   *   )}
	   * </Transition>
	   * ```
	   */
	  children: propTypes.oneOfType([propTypes.func.isRequired, propTypes.element.isRequired]).isRequired,

	  /**
	   * Show the component; triggers the enter or exit states
	   */
	  in: propTypes.bool,

	  /**
	   * By default the child component is mounted immediately along with
	   * the parent `Transition` component. If you want to "lazy mount" the component on the
	   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
	   * mounted, even on "exited", unless you also specify `unmountOnExit`.
	   */
	  mountOnEnter: propTypes.bool,

	  /**
	   * By default the child component stays mounted after it reaches the `'exited'` state.
	   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
	   */
	  unmountOnExit: propTypes.bool,

	  /**
	   * By default the child component does not perform the enter transition when
	   * it first mounts, regardless of the value of `in`. If you want this
	   * behavior, set both `appear` and `in` to `true`.
	   *
	   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
	   * > only adds an additional enter transition. However, in the
	   * > `<CSSTransition>` component that first enter transition does result in
	   * > additional `.appear-*` classes, that way you can choose to style it
	   * > differently.
	   */
	  appear: propTypes.bool,

	  /**
	   * Enable or disable enter transitions.
	   */
	  enter: propTypes.bool,

	  /**
	   * Enable or disable exit transitions.
	   */
	  exit: propTypes.bool,

	  /**
	   * The duration of the transition, in milliseconds.
	   * Required unless `addEndListener` is provided.
	   *
	   * You may specify a single timeout for all transitions:
	   *
	   * ```jsx
	   * timeout={500}
	   * ```
	   *
	   * or individually:
	   *
	   * ```jsx
	   * timeout={{
	   *  appear: 500,
	   *  enter: 300,
	   *  exit: 500,
	   * }}
	   * ```
	   *
	   * - `appear` defaults to the value of `enter`
	   * - `enter` defaults to `0`
	   * - `exit` defaults to `0`
	   *
	   * @type {number | { enter?: number, exit?: number, appear?: number }}
	   */
	  timeout: function timeout(props) {
	    var pt = timeoutsShape;
	    if (!props.addEndListener) pt = pt.isRequired;

	    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    return pt.apply(void 0, [props].concat(args));
	  },

	  /**
	   * Add a custom transition end trigger. Called with the transitioning
	   * DOM node and a `done` callback. Allows for more fine grained transition end
	   * logic. Timeouts are still used as a fallback if provided.
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
	   *
	   * ```jsx
	   * addEndListener={(node, done) => {
	   *   // use the css transitionend event to mark the finish of a transition
	   *   node.addEventListener('transitionend', done, false);
	   * }}
	   * ```
	   */
	  addEndListener: propTypes.func,

	  /**
	   * Callback fired before the "entering" status is applied. An extra parameter
	   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool) -> void
	   */
	  onEnter: propTypes.func,

	  /**
	   * Callback fired after the "entering" status is applied. An extra parameter
	   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool)
	   */
	  onEntering: propTypes.func,

	  /**
	   * Callback fired after the "entered" status is applied. An extra parameter
	   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool) -> void
	   */
	  onEntered: propTypes.func,

	  /**
	   * Callback fired before the "exiting" status is applied.
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
	   *
	   * @type Function(node: HtmlElement) -> void
	   */
	  onExit: propTypes.func,

	  /**
	   * Callback fired after the "exiting" status is applied.
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
	   *
	   * @type Function(node: HtmlElement) -> void
	   */
	  onExiting: propTypes.func,

	  /**
	   * Callback fired after the "exited" status is applied.
	   *
	   * **Note**: when `nodeRef` prop is passed, `node` is not passed
	   *
	   * @type Function(node: HtmlElement) -> void
	   */
	  onExited: propTypes.func
	} : {}; // Name the function so it is clearer in the documentation

	function noop() {}

	Transition.defaultProps = {
	  in: false,
	  mountOnEnter: false,
	  unmountOnExit: false,
	  appear: false,
	  enter: true,
	  exit: true,
	  onEnter: noop,
	  onEntering: noop,
	  onEntered: noop,
	  onExit: noop,
	  onExiting: noop,
	  onExited: noop
	};
	Transition.UNMOUNTED = UNMOUNTED;
	Transition.EXITED = EXITED;
	Transition.ENTERING = ENTERING;
	Transition.ENTERED = ENTERED;
	Transition.EXITING = EXITING;

	/**
	 * Given `this.props.children`, return an object mapping key to child.
	 *
	 * @param {*} children `this.props.children`
	 * @return {object} Mapping of key to child
	 */

	function getChildMapping(children, mapFn) {
	  var mapper = function mapper(child) {
	    return mapFn && React.isValidElement(child) ? mapFn(child) : child;
	  };

	  var result = Object.create(null);
	  if (children) React.Children.map(children, function (c) {
	    return c;
	  }).forEach(function (child) {
	    // run the map function here instead so that the key is the computed one
	    result[child.key] = mapper(child);
	  });
	  return result;
	}
	/**
	 * When you're adding or removing children some may be added or removed in the
	 * same render pass. We want to show *both* since we want to simultaneously
	 * animate elements in and out. This function takes a previous set of keys
	 * and a new set of keys and merges them with its best guess of the correct
	 * ordering. In the future we may expose some of the utilities in
	 * ReactMultiChild to make this easy, but for now React itself does not
	 * directly have this concept of the union of prevChildren and nextChildren
	 * so we implement it here.
	 *
	 * @param {object} prev prev children as returned from
	 * `ReactTransitionChildMapping.getChildMapping()`.
	 * @param {object} next next children as returned from
	 * `ReactTransitionChildMapping.getChildMapping()`.
	 * @return {object} a key set that contains all keys in `prev` and all keys
	 * in `next` in a reasonable order.
	 */

	function mergeChildMappings(prev, next) {
	  prev = prev || {};
	  next = next || {};

	  function getValueForKey(key) {
	    return key in next ? next[key] : prev[key];
	  } // For each key of `next`, the list of keys to insert before that key in
	  // the combined list


	  var nextKeysPending = Object.create(null);
	  var pendingKeys = [];

	  for (var prevKey in prev) {
	    if (prevKey in next) {
	      if (pendingKeys.length) {
	        nextKeysPending[prevKey] = pendingKeys;
	        pendingKeys = [];
	      }
	    } else {
	      pendingKeys.push(prevKey);
	    }
	  }

	  var i;
	  var childMapping = {};

	  for (var nextKey in next) {
	    if (nextKeysPending[nextKey]) {
	      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
	        var pendingNextKey = nextKeysPending[nextKey][i];
	        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
	      }
	    }

	    childMapping[nextKey] = getValueForKey(nextKey);
	  } // Finally, add the keys which didn't appear before any key in `next`


	  for (i = 0; i < pendingKeys.length; i++) {
	    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
	  }

	  return childMapping;
	}

	function getProp(child, prop, props) {
	  return props[prop] != null ? props[prop] : child.props[prop];
	}

	function getInitialChildMapping(props, onExited) {
	  return getChildMapping(props.children, function (child) {
	    return React.cloneElement(child, {
	      onExited: onExited.bind(null, child),
	      in: true,
	      appear: getProp(child, 'appear', props),
	      enter: getProp(child, 'enter', props),
	      exit: getProp(child, 'exit', props)
	    });
	  });
	}
	function getNextChildMapping(nextProps, prevChildMapping, onExited) {
	  var nextChildMapping = getChildMapping(nextProps.children);
	  var children = mergeChildMappings(prevChildMapping, nextChildMapping);
	  Object.keys(children).forEach(function (key) {
	    var child = children[key];
	    if (!React.isValidElement(child)) return;
	    var hasPrev = (key in prevChildMapping);
	    var hasNext = (key in nextChildMapping);
	    var prevChild = prevChildMapping[key];
	    var isLeaving = React.isValidElement(prevChild) && !prevChild.props.in; // item is new (entering)

	    if (hasNext && (!hasPrev || isLeaving)) {
	      // console.log('entering', key)
	      children[key] = React.cloneElement(child, {
	        onExited: onExited.bind(null, child),
	        in: true,
	        exit: getProp(child, 'exit', nextProps),
	        enter: getProp(child, 'enter', nextProps)
	      });
	    } else if (!hasNext && hasPrev && !isLeaving) {
	      // item is old (exiting)
	      // console.log('leaving', key)
	      children[key] = React.cloneElement(child, {
	        in: false
	      });
	    } else if (hasNext && hasPrev && React.isValidElement(prevChild)) {
	      // item hasn't changed transition states
	      // copy over the last transition props;
	      // console.log('unchanged', key)
	      children[key] = React.cloneElement(child, {
	        onExited: onExited.bind(null, child),
	        in: prevChild.props.in,
	        exit: getProp(child, 'exit', nextProps),
	        enter: getProp(child, 'enter', nextProps)
	      });
	    }
	  });
	  return children;
	}

	var values$1 = Object.values || function (obj) {
	  return Object.keys(obj).map(function (k) {
	    return obj[k];
	  });
	};

	var defaultProps = {
	  component: 'div',
	  childFactory: function childFactory(child) {
	    return child;
	  }
	};
	/**
	 * The `<TransitionGroup>` component manages a set of transition components
	 * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
	 * components, `<TransitionGroup>` is a state machine for managing the mounting
	 * and unmounting of components over time.
	 *
	 * Consider the example below. As items are removed or added to the TodoList the
	 * `in` prop is toggled automatically by the `<TransitionGroup>`.
	 *
	 * Note that `<TransitionGroup>`  does not define any animation behavior!
	 * Exactly _how_ a list item animates is up to the individual transition
	 * component. This means you can mix and match animations across different list
	 * items.
	 */

	var TransitionGroup = /*#__PURE__*/function (_React$Component) {
	  _inheritsLoose(TransitionGroup, _React$Component);

	  function TransitionGroup(props, context) {
	    var _this;

	    _this = _React$Component.call(this, props, context) || this;

	    var handleExited = _this.handleExited.bind(_assertThisInitialized(_this)); // Initial children should all be entering, dependent on appear


	    _this.state = {
	      contextValue: {
	        isMounting: true
	      },
	      handleExited: handleExited,
	      firstRender: true
	    };
	    return _this;
	  }

	  var _proto = TransitionGroup.prototype;

	  _proto.componentDidMount = function componentDidMount() {
	    this.mounted = true;
	    this.setState({
	      contextValue: {
	        isMounting: false
	      }
	    });
	  };

	  _proto.componentWillUnmount = function componentWillUnmount() {
	    this.mounted = false;
	  };

	  TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
	    var prevChildMapping = _ref.children,
	        handleExited = _ref.handleExited,
	        firstRender = _ref.firstRender;
	    return {
	      children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
	      firstRender: false
	    };
	  } // node is `undefined` when user provided `nodeRef` prop
	  ;

	  _proto.handleExited = function handleExited(child, node) {
	    var currentChildMapping = getChildMapping(this.props.children);
	    if (child.key in currentChildMapping) return;

	    if (child.props.onExited) {
	      child.props.onExited(node);
	    }

	    if (this.mounted) {
	      this.setState(function (state) {
	        var children = _extends({}, state.children);

	        delete children[child.key];
	        return {
	          children: children
	        };
	      });
	    }
	  };

	  _proto.render = function render() {
	    var _this$props = this.props,
	        Component = _this$props.component,
	        childFactory = _this$props.childFactory,
	        props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);

	    var contextValue = this.state.contextValue;
	    var children = values$1(this.state.children).map(childFactory);
	    delete props.appear;
	    delete props.enter;
	    delete props.exit;

	    if (Component === null) {
	      return /*#__PURE__*/React__default.createElement(TransitionGroupContext.Provider, {
	        value: contextValue
	      }, children);
	    }

	    return /*#__PURE__*/React__default.createElement(TransitionGroupContext.Provider, {
	      value: contextValue
	    }, /*#__PURE__*/React__default.createElement(Component, props, children));
	  };

	  return TransitionGroup;
	}(React__default.Component);

	TransitionGroup.propTypes = process.env.NODE_ENV !== "production" ? {
	  /**
	   * `<TransitionGroup>` renders a `<div>` by default. You can change this
	   * behavior by providing a `component` prop.
	   * If you use React v16+ and would like to avoid a wrapping `<div>` element
	   * you can pass in `component={null}`. This is useful if the wrapping div
	   * borks your css styles.
	   */
	  component: propTypes.any,

	  /**
	   * A set of `<Transition>` components, that are toggled `in` and out as they
	   * leave. the `<TransitionGroup>` will inject specific transition props, so
	   * remember to spread them through if you are wrapping the `<Transition>` as
	   * with our `<Fade>` example.
	   *
	   * While this component is meant for multiple `Transition` or `CSSTransition`
	   * children, sometimes you may want to have a single transition child with
	   * content that you want to be transitioned out and in when you change it
	   * (e.g. routes, images etc.) In that case you can change the `key` prop of
	   * the transition child as you change its content, this will cause
	   * `TransitionGroup` to transition the child out and back in.
	   */
	  children: propTypes.node,

	  /**
	   * A convenience prop that enables or disables appear animations
	   * for all children. Note that specifying this will override any defaults set
	   * on individual children Transitions.
	   */
	  appear: propTypes.bool,

	  /**
	   * A convenience prop that enables or disables enter animations
	   * for all children. Note that specifying this will override any defaults set
	   * on individual children Transitions.
	   */
	  enter: propTypes.bool,

	  /**
	   * A convenience prop that enables or disables exit animations
	   * for all children. Note that specifying this will override any defaults set
	   * on individual children Transitions.
	   */
	  exit: propTypes.bool,

	  /**
	   * You may need to apply reactive updates to a child as it is exiting.
	   * This is generally done by using `cloneElement` however in the case of an exiting
	   * child the element has already been removed and not accessible to the consumer.
	   *
	   * If you do need to update a child as it leaves you can provide a `childFactory`
	   * to wrap every child, even the ones that are leaving.
	   *
	   * @type Function(child: ReactElement) -> ReactElement
	   */
	  childFactory: propTypes.func
	} : {};
	TransitionGroup.defaultProps = defaultProps;

	var reflow = function reflow(node) {
	  return node.scrollTop;
	};
	function getTransitionProps(props, options) {
	  var timeout = props.timeout,
	      _props$style = props.style,
	      style = _props$style === void 0 ? {} : _props$style;
	  return {
	    duration: style.transitionDuration || typeof timeout === 'number' ? timeout : timeout[options.mode] || 0,
	    delay: style.transitionDelay
	  };
	}

	var styles$2 = {
	  entering: {
	    opacity: 1
	  },
	  entered: {
	    opacity: 1
	  }
	};
	var defaultTimeout = {
	  enter: duration.enteringScreen,
	  exit: duration.leavingScreen
	};
	/**
	 * The Fade transition is used by the [Modal](/components/modal/) component.
	 * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
	 */

	var Fade = /*#__PURE__*/React.forwardRef(function Fade(props, ref) {
	  var children = props.children,
	      _props$disableStrictM = props.disableStrictModeCompat,
	      disableStrictModeCompat = _props$disableStrictM === void 0 ? false : _props$disableStrictM,
	      inProp = props.in,
	      onEnter = props.onEnter,
	      onEntered = props.onEntered,
	      onEntering = props.onEntering,
	      onExit = props.onExit,
	      onExited = props.onExited,
	      onExiting = props.onExiting,
	      style = props.style,
	      _props$TransitionComp = props.TransitionComponent,
	      TransitionComponent = _props$TransitionComp === void 0 ? Transition : _props$TransitionComp,
	      _props$timeout = props.timeout,
	      timeout = _props$timeout === void 0 ? defaultTimeout : _props$timeout,
	      other = _objectWithoutProperties(props, ["children", "disableStrictModeCompat", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "TransitionComponent", "timeout"]);

	  var theme = useTheme$1();
	  var enableStrictModeCompat = theme.unstable_strictMode && !disableStrictModeCompat;
	  var nodeRef = React.useRef(null);
	  var foreignRef = useForkRef(children.ref, ref);
	  var handleRef = useForkRef(enableStrictModeCompat ? nodeRef : undefined, foreignRef);

	  var normalizedTransitionCallback = function normalizedTransitionCallback(callback) {
	    return function (nodeOrAppearing, maybeAppearing) {
	      if (callback) {
	        var _ref = enableStrictModeCompat ? [nodeRef.current, nodeOrAppearing] : [nodeOrAppearing, maybeAppearing],
	            _ref2 = _slicedToArray(_ref, 2),
	            node = _ref2[0],
	            isAppearing = _ref2[1]; // onEnterXxx and onExitXxx callbacks have a different arguments.length value.


	        if (isAppearing === undefined) {
	          callback(node);
	        } else {
	          callback(node, isAppearing);
	        }
	      }
	    };
	  };

	  var handleEntering = normalizedTransitionCallback(onEntering);
	  var handleEnter = normalizedTransitionCallback(function (node, isAppearing) {
	    reflow(node); // So the animation always start from the start.

	    var transitionProps = getTransitionProps({
	      style: style,
	      timeout: timeout
	    }, {
	      mode: 'enter'
	    });
	    node.style.webkitTransition = theme.transitions.create('opacity', transitionProps);
	    node.style.transition = theme.transitions.create('opacity', transitionProps);

	    if (onEnter) {
	      onEnter(node, isAppearing);
	    }
	  });
	  var handleEntered = normalizedTransitionCallback(onEntered);
	  var handleExiting = normalizedTransitionCallback(onExiting);
	  var handleExit = normalizedTransitionCallback(function (node) {
	    var transitionProps = getTransitionProps({
	      style: style,
	      timeout: timeout
	    }, {
	      mode: 'exit'
	    });
	    node.style.webkitTransition = theme.transitions.create('opacity', transitionProps);
	    node.style.transition = theme.transitions.create('opacity', transitionProps);

	    if (onExit) {
	      onExit(node);
	    }
	  });
	  var handleExited = normalizedTransitionCallback(onExited);
	  return /*#__PURE__*/React.createElement(TransitionComponent, _extends({
	    appear: true,
	    in: inProp,
	    nodeRef: enableStrictModeCompat ? nodeRef : undefined,
	    onEnter: handleEnter,
	    onEntered: handleEntered,
	    onEntering: handleEntering,
	    onExit: handleExit,
	    onExited: handleExited,
	    onExiting: handleExiting,
	    timeout: timeout
	  }, other), function (state, childProps) {
	    return /*#__PURE__*/React.cloneElement(children, _extends({
	      style: _extends({
	        opacity: 0,
	        visibility: state === 'exited' && !inProp ? 'hidden' : undefined
	      }, styles$2[state], style, children.props.style),
	      ref: handleRef
	    }, childProps));
	  });
	});
	process.env.NODE_ENV !== "production" ? Fade.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * A single child content element.
	   */
	  children: propTypes.element,

	  /**
	   * Enable this prop if you encounter 'Function components cannot be given refs',
	   * use `unstable_createStrictModeTheme`,
	   * and can't forward the ref in the child component.
	   */
	  disableStrictModeCompat: propTypes.bool,

	  /**
	   * If `true`, the component will transition in.
	   */
	  in: propTypes.bool,

	  /**
	   * @ignore
	   */
	  onEnter: propTypes.func,

	  /**
	   * @ignore
	   */
	  onEntered: propTypes.func,

	  /**
	   * @ignore
	   */
	  onEntering: propTypes.func,

	  /**
	   * @ignore
	   */
	  onExit: propTypes.func,

	  /**
	   * @ignore
	   */
	  onExited: propTypes.func,

	  /**
	   * @ignore
	   */
	  onExiting: propTypes.func,

	  /**
	   * @ignore
	   */
	  style: propTypes.object,

	  /**
	   * The duration for the transition, in milliseconds.
	   * You may specify a single timeout for all transitions, or individually with an object.
	   */
	  timeout: propTypes.oneOfType([propTypes.number, propTypes.shape({
	    appear: propTypes.number,
	    enter: propTypes.number,
	    exit: propTypes.number
	  })])
	} : void 0;

	var styles$3 = {
	  /* Styles applied to the root element. */
	  root: {
	    // Improve scrollable dialog support.
	    zIndex: -1,
	    position: 'fixed',
	    display: 'flex',
	    alignItems: 'center',
	    justifyContent: 'center',
	    right: 0,
	    bottom: 0,
	    top: 0,
	    left: 0,
	    backgroundColor: 'rgba(0, 0, 0, 0.5)',
	    WebkitTapHighlightColor: 'transparent'
	  },

	  /* Styles applied to the root element if `invisible={true}`. */
	  invisible: {
	    backgroundColor: 'transparent'
	  }
	};
	var Backdrop = /*#__PURE__*/React.forwardRef(function Backdrop(props, ref) {
	  var children = props.children,
	      classes = props.classes,
	      className = props.className,
	      _props$invisible = props.invisible,
	      invisible = _props$invisible === void 0 ? false : _props$invisible,
	      open = props.open,
	      transitionDuration = props.transitionDuration,
	      _props$TransitionComp = props.TransitionComponent,
	      TransitionComponent = _props$TransitionComp === void 0 ? Fade : _props$TransitionComp,
	      other = _objectWithoutProperties(props, ["children", "classes", "className", "invisible", "open", "transitionDuration", "TransitionComponent"]);

	  return /*#__PURE__*/React.createElement(TransitionComponent, _extends({
	    in: open,
	    timeout: transitionDuration
	  }, other), /*#__PURE__*/React.createElement("div", {
	    className: clsx(classes.root, className, invisible && classes.invisible),
	    "aria-hidden": true,
	    ref: ref
	  }, children));
	});
	process.env.NODE_ENV !== "production" ? Backdrop.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.node,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.string,

	  /**
	   * If `true`, the backdrop is invisible.
	   * It can be used when rendering a popover or a custom select component.
	   */
	  invisible: propTypes.bool,

	  /**
	   * If `true`, the backdrop is open.
	   */
	  open: propTypes.bool.isRequired,

	  /**
	   * The duration for the transition, in milliseconds.
	   * You may specify a single timeout for all transitions, or individually with an object.
	   */
	  transitionDuration: propTypes.oneOfType([propTypes.number, propTypes.shape({
	    appear: propTypes.number,
	    enter: propTypes.number,
	    exit: propTypes.number
	  })])
	} : void 0;
	var Backdrop$1 = withStyles$1(styles$3, {
	  name: 'MuiBackdrop'
	})(Backdrop);

	var useEnhancedEffect$1 = typeof window === 'undefined' ? React.useEffect : React.useLayoutEffect;
	/**
	 * @ignore - internal component.
	 */

	function Ripple(props) {
	  var classes = props.classes,
	      _props$pulsate = props.pulsate,
	      pulsate = _props$pulsate === void 0 ? false : _props$pulsate,
	      rippleX = props.rippleX,
	      rippleY = props.rippleY,
	      rippleSize = props.rippleSize,
	      inProp = props.in,
	      _props$onExited = props.onExited,
	      onExited = _props$onExited === void 0 ? function () {} : _props$onExited,
	      timeout = props.timeout;

	  var _React$useState = React.useState(false),
	      leaving = _React$useState[0],
	      setLeaving = _React$useState[1];

	  var rippleClassName = clsx(classes.ripple, classes.rippleVisible, pulsate && classes.ripplePulsate);
	  var rippleStyles = {
	    width: rippleSize,
	    height: rippleSize,
	    top: -(rippleSize / 2) + rippleY,
	    left: -(rippleSize / 2) + rippleX
	  };
	  var childClassName = clsx(classes.child, leaving && classes.childLeaving, pulsate && classes.childPulsate);
	  var handleExited = useEventCallback(onExited); // Ripple is used for user feedback (e.g. click or press) so we want to apply styles with the highest priority

	  useEnhancedEffect$1(function () {
	    if (!inProp) {
	      // react-transition-group#onExit
	      setLeaving(true); // react-transition-group#onExited

	      var timeoutId = setTimeout(handleExited, timeout);
	      return function () {
	        clearTimeout(timeoutId);
	      };
	    }

	    return undefined;
	  }, [handleExited, inProp, timeout]);
	  return /*#__PURE__*/React.createElement("span", {
	    className: rippleClassName,
	    style: rippleStyles
	  }, /*#__PURE__*/React.createElement("span", {
	    className: childClassName
	  }));
	}

	process.env.NODE_ENV !== "production" ? Ripple.propTypes = {
	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object.isRequired,

	  /**
	   * @ignore - injected from TransitionGroup
	   */
	  in: propTypes.bool,

	  /**
	   * @ignore - injected from TransitionGroup
	   */
	  onExited: propTypes.func,

	  /**
	   * If `true`, the ripple pulsates, typically indicating the keyboard focus state of an element.
	   */
	  pulsate: propTypes.bool,

	  /**
	   * Diameter of the ripple.
	   */
	  rippleSize: propTypes.number,

	  /**
	   * Horizontal position of the ripple center.
	   */
	  rippleX: propTypes.number,

	  /**
	   * Vertical position of the ripple center.
	   */
	  rippleY: propTypes.number,

	  /**
	   * exit delay
	   */
	  timeout: propTypes.number.isRequired
	} : void 0;

	var DURATION = 550;
	var DELAY_RIPPLE = 80;
	var styles$4 = function styles(theme) {
	  return {
	    /* Styles applied to the root element. */
	    root: {
	      overflow: 'hidden',
	      pointerEvents: 'none',
	      position: 'absolute',
	      zIndex: 0,
	      top: 0,
	      right: 0,
	      bottom: 0,
	      left: 0,
	      borderRadius: 'inherit'
	    },

	    /* Styles applied to the internal `Ripple` components `ripple` class. */
	    ripple: {
	      opacity: 0,
	      position: 'absolute'
	    },

	    /* Styles applied to the internal `Ripple` components `rippleVisible` class. */
	    rippleVisible: {
	      opacity: 0.3,
	      transform: 'scale(1)',
	      animation: "$enter ".concat(DURATION, "ms ").concat(theme.transitions.easing.easeInOut)
	    },

	    /* Styles applied to the internal `Ripple` components `ripplePulsate` class. */
	    ripplePulsate: {
	      animationDuration: "".concat(theme.transitions.duration.shorter, "ms")
	    },

	    /* Styles applied to the internal `Ripple` components `child` class. */
	    child: {
	      opacity: 1,
	      display: 'block',
	      width: '100%',
	      height: '100%',
	      borderRadius: '50%',
	      backgroundColor: 'currentColor'
	    },

	    /* Styles applied to the internal `Ripple` components `childLeaving` class. */
	    childLeaving: {
	      opacity: 0,
	      animation: "$exit ".concat(DURATION, "ms ").concat(theme.transitions.easing.easeInOut)
	    },

	    /* Styles applied to the internal `Ripple` components `childPulsate` class. */
	    childPulsate: {
	      position: 'absolute',
	      left: 0,
	      top: 0,
	      animation: "$pulsate 2500ms ".concat(theme.transitions.easing.easeInOut, " 200ms infinite")
	    },
	    '@keyframes enter': {
	      '0%': {
	        transform: 'scale(0)',
	        opacity: 0.1
	      },
	      '100%': {
	        transform: 'scale(1)',
	        opacity: 0.3
	      }
	    },
	    '@keyframes exit': {
	      '0%': {
	        opacity: 1
	      },
	      '100%': {
	        opacity: 0
	      }
	    },
	    '@keyframes pulsate': {
	      '0%': {
	        transform: 'scale(1)'
	      },
	      '50%': {
	        transform: 'scale(0.92)'
	      },
	      '100%': {
	        transform: 'scale(1)'
	      }
	    }
	  };
	};
	/**
	 * @ignore - internal component.
	 *
	 * TODO v5: Make private
	 */

	var TouchRipple = /*#__PURE__*/React.forwardRef(function TouchRipple(props, ref) {
	  var _props$center = props.center,
	      centerProp = _props$center === void 0 ? false : _props$center,
	      classes = props.classes,
	      className = props.className,
	      other = _objectWithoutProperties(props, ["center", "classes", "className"]);

	  var _React$useState = React.useState([]),
	      ripples = _React$useState[0],
	      setRipples = _React$useState[1];

	  var nextKey = React.useRef(0);
	  var rippleCallback = React.useRef(null);
	  React.useEffect(function () {
	    if (rippleCallback.current) {
	      rippleCallback.current();
	      rippleCallback.current = null;
	    }
	  }, [ripples]); // Used to filter out mouse emulated events on mobile.

	  var ignoringMouseDown = React.useRef(false); // We use a timer in order to only show the ripples for touch "click" like events.
	  // We don't want to display the ripple for touch scroll events.

	  var startTimer = React.useRef(null); // This is the hook called once the previous timeout is ready.

	  var startTimerCommit = React.useRef(null);
	  var container = React.useRef(null);
	  React.useEffect(function () {
	    return function () {
	      clearTimeout(startTimer.current);
	    };
	  }, []);
	  var startCommit = React.useCallback(function (params) {
	    var pulsate = params.pulsate,
	        rippleX = params.rippleX,
	        rippleY = params.rippleY,
	        rippleSize = params.rippleSize,
	        cb = params.cb;
	    setRipples(function (oldRipples) {
	      return [].concat(_toConsumableArray(oldRipples), [/*#__PURE__*/React.createElement(Ripple, {
	        key: nextKey.current,
	        classes: classes,
	        timeout: DURATION,
	        pulsate: pulsate,
	        rippleX: rippleX,
	        rippleY: rippleY,
	        rippleSize: rippleSize
	      })]);
	    });
	    nextKey.current += 1;
	    rippleCallback.current = cb;
	  }, [classes]);
	  var start = React.useCallback(function () {
	    var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    var cb = arguments.length > 2 ? arguments[2] : undefined;
	    var _options$pulsate = options.pulsate,
	        pulsate = _options$pulsate === void 0 ? false : _options$pulsate,
	        _options$center = options.center,
	        center = _options$center === void 0 ? centerProp || options.pulsate : _options$center,
	        _options$fakeElement = options.fakeElement,
	        fakeElement = _options$fakeElement === void 0 ? false : _options$fakeElement;

	    if (event.type === 'mousedown' && ignoringMouseDown.current) {
	      ignoringMouseDown.current = false;
	      return;
	    }

	    if (event.type === 'touchstart') {
	      ignoringMouseDown.current = true;
	    }

	    var element = fakeElement ? null : container.current;
	    var rect = element ? element.getBoundingClientRect() : {
	      width: 0,
	      height: 0,
	      left: 0,
	      top: 0
	    }; // Get the size of the ripple

	    var rippleX;
	    var rippleY;
	    var rippleSize;

	    if (center || event.clientX === 0 && event.clientY === 0 || !event.clientX && !event.touches) {
	      rippleX = Math.round(rect.width / 2);
	      rippleY = Math.round(rect.height / 2);
	    } else {
	      var _ref = event.touches ? event.touches[0] : event,
	          clientX = _ref.clientX,
	          clientY = _ref.clientY;

	      rippleX = Math.round(clientX - rect.left);
	      rippleY = Math.round(clientY - rect.top);
	    }

	    if (center) {
	      rippleSize = Math.sqrt((2 * Math.pow(rect.width, 2) + Math.pow(rect.height, 2)) / 3); // For some reason the animation is broken on Mobile Chrome if the size if even.

	      if (rippleSize % 2 === 0) {
	        rippleSize += 1;
	      }
	    } else {
	      var sizeX = Math.max(Math.abs((element ? element.clientWidth : 0) - rippleX), rippleX) * 2 + 2;
	      var sizeY = Math.max(Math.abs((element ? element.clientHeight : 0) - rippleY), rippleY) * 2 + 2;
	      rippleSize = Math.sqrt(Math.pow(sizeX, 2) + Math.pow(sizeY, 2));
	    } // Touche devices


	    if (event.touches) {
	      // check that this isn't another touchstart due to multitouch
	      // otherwise we will only clear a single timer when unmounting while two
	      // are running
	      if (startTimerCommit.current === null) {
	        // Prepare the ripple effect.
	        startTimerCommit.current = function () {
	          startCommit({
	            pulsate: pulsate,
	            rippleX: rippleX,
	            rippleY: rippleY,
	            rippleSize: rippleSize,
	            cb: cb
	          });
	        }; // Delay the execution of the ripple effect.


	        startTimer.current = setTimeout(function () {
	          if (startTimerCommit.current) {
	            startTimerCommit.current();
	            startTimerCommit.current = null;
	          }
	        }, DELAY_RIPPLE); // We have to make a tradeoff with this value.
	      }
	    } else {
	      startCommit({
	        pulsate: pulsate,
	        rippleX: rippleX,
	        rippleY: rippleY,
	        rippleSize: rippleSize,
	        cb: cb
	      });
	    }
	  }, [centerProp, startCommit]);
	  var pulsate = React.useCallback(function () {
	    start({}, {
	      pulsate: true
	    });
	  }, [start]);
	  var stop = React.useCallback(function (event, cb) {
	    clearTimeout(startTimer.current); // The touch interaction occurs too quickly.
	    // We still want to show ripple effect.

	    if (event.type === 'touchend' && startTimerCommit.current) {
	      event.persist();
	      startTimerCommit.current();
	      startTimerCommit.current = null;
	      startTimer.current = setTimeout(function () {
	        stop(event, cb);
	      });
	      return;
	    }

	    startTimerCommit.current = null;
	    setRipples(function (oldRipples) {
	      if (oldRipples.length > 0) {
	        return oldRipples.slice(1);
	      }

	      return oldRipples;
	    });
	    rippleCallback.current = cb;
	  }, []);
	  React.useImperativeHandle(ref, function () {
	    return {
	      pulsate: pulsate,
	      start: start,
	      stop: stop
	    };
	  }, [pulsate, start, stop]);
	  return /*#__PURE__*/React.createElement("span", _extends({
	    className: clsx(classes.root, className),
	    ref: container
	  }, other), /*#__PURE__*/React.createElement(TransitionGroup, {
	    component: null,
	    exit: true
	  }, ripples));
	});
	process.env.NODE_ENV !== "production" ? TouchRipple.propTypes = {
	  /**
	   * If `true`, the ripple starts at the center of the component
	   * rather than at the point of interaction.
	   */
	  center: propTypes.bool,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object.isRequired,

	  /**
	   * @ignore
	   */
	  className: propTypes.string
	} : void 0;
	var TouchRipple$1 = withStyles$1(styles$4, {
	  flip: false,
	  name: 'MuiTouchRipple'
	})( /*#__PURE__*/React.memo(TouchRipple));

	var styles$5 = {
	  /* Styles applied to the root element. */
	  root: {
	    display: 'inline-flex',
	    alignItems: 'center',
	    justifyContent: 'center',
	    position: 'relative',
	    WebkitTapHighlightColor: 'transparent',
	    backgroundColor: 'transparent',
	    // Reset default value
	    // We disable the focus ring for mouse, touch and keyboard users.
	    outline: 0,
	    border: 0,
	    margin: 0,
	    // Remove the margin in Safari
	    borderRadius: 0,
	    padding: 0,
	    // Remove the padding in Firefox
	    cursor: 'pointer',
	    userSelect: 'none',
	    verticalAlign: 'middle',
	    '-moz-appearance': 'none',
	    // Reset
	    '-webkit-appearance': 'none',
	    // Reset
	    textDecoration: 'none',
	    // So we take precedent over the style of a native <a /> element.
	    color: 'inherit',
	    '&::-moz-focus-inner': {
	      borderStyle: 'none' // Remove Firefox dotted outline.

	    },
	    '&$disabled': {
	      pointerEvents: 'none',
	      // Disable link interactions
	      cursor: 'default'
	    },
	    '@media print': {
	      colorAdjust: 'exact'
	    }
	  },

	  /* Pseudo-class applied to the root element if `disabled={true}`. */
	  disabled: {},

	  /* Pseudo-class applied to the root element if keyboard focused. */
	  focusVisible: {}
	};
	/**
	 * `ButtonBase` contains as few styles as possible.
	 * It aims to be a simple building block for creating a button.
	 * It contains a load of style reset and some focus/ripple logic.
	 */

	var ButtonBase = /*#__PURE__*/React.forwardRef(function ButtonBase(props, ref) {
	  var action = props.action,
	      buttonRefProp = props.buttonRef,
	      _props$centerRipple = props.centerRipple,
	      centerRipple = _props$centerRipple === void 0 ? false : _props$centerRipple,
	      children = props.children,
	      classes = props.classes,
	      className = props.className,
	      _props$component = props.component,
	      component = _props$component === void 0 ? 'button' : _props$component,
	      _props$disabled = props.disabled,
	      disabled = _props$disabled === void 0 ? false : _props$disabled,
	      _props$disableRipple = props.disableRipple,
	      disableRipple = _props$disableRipple === void 0 ? false : _props$disableRipple,
	      _props$disableTouchRi = props.disableTouchRipple,
	      disableTouchRipple = _props$disableTouchRi === void 0 ? false : _props$disableTouchRi,
	      _props$focusRipple = props.focusRipple,
	      focusRipple = _props$focusRipple === void 0 ? false : _props$focusRipple,
	      focusVisibleClassName = props.focusVisibleClassName,
	      onBlur = props.onBlur,
	      onClick = props.onClick,
	      onFocus = props.onFocus,
	      onFocusVisible = props.onFocusVisible,
	      onKeyDown = props.onKeyDown,
	      onKeyUp = props.onKeyUp,
	      onMouseDown = props.onMouseDown,
	      onMouseLeave = props.onMouseLeave,
	      onMouseUp = props.onMouseUp,
	      onTouchEnd = props.onTouchEnd,
	      onTouchMove = props.onTouchMove,
	      onTouchStart = props.onTouchStart,
	      onDragLeave = props.onDragLeave,
	      _props$tabIndex = props.tabIndex,
	      tabIndex = _props$tabIndex === void 0 ? 0 : _props$tabIndex,
	      TouchRippleProps = props.TouchRippleProps,
	      _props$type = props.type,
	      type = _props$type === void 0 ? 'button' : _props$type,
	      other = _objectWithoutProperties(props, ["action", "buttonRef", "centerRipple", "children", "classes", "className", "component", "disabled", "disableRipple", "disableTouchRipple", "focusRipple", "focusVisibleClassName", "onBlur", "onClick", "onFocus", "onFocusVisible", "onKeyDown", "onKeyUp", "onMouseDown", "onMouseLeave", "onMouseUp", "onTouchEnd", "onTouchMove", "onTouchStart", "onDragLeave", "tabIndex", "TouchRippleProps", "type"]);

	  var buttonRef = React.useRef(null);

	  function getButtonNode() {
	    // #StrictMode ready
	    return ReactDOM.findDOMNode(buttonRef.current);
	  }

	  var rippleRef = React.useRef(null);

	  var _React$useState = React.useState(false),
	      focusVisible = _React$useState[0],
	      setFocusVisible = _React$useState[1];

	  if (disabled && focusVisible) {
	    setFocusVisible(false);
	  }

	  var _useIsFocusVisible = useIsFocusVisible(),
	      isFocusVisible = _useIsFocusVisible.isFocusVisible,
	      onBlurVisible = _useIsFocusVisible.onBlurVisible,
	      focusVisibleRef = _useIsFocusVisible.ref;

	  React.useImperativeHandle(action, function () {
	    return {
	      focusVisible: function focusVisible() {
	        setFocusVisible(true);
	        buttonRef.current.focus();
	      }
	    };
	  }, []);
	  React.useEffect(function () {
	    if (focusVisible && focusRipple && !disableRipple) {
	      rippleRef.current.pulsate();
	    }
	  }, [disableRipple, focusRipple, focusVisible]);

	  function useRippleHandler(rippleAction, eventCallback) {
	    var skipRippleAction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : disableTouchRipple;
	    return useEventCallback(function (event) {
	      if (eventCallback) {
	        eventCallback(event);
	      }

	      var ignore = skipRippleAction;

	      if (!ignore && rippleRef.current) {
	        rippleRef.current[rippleAction](event);
	      }

	      return true;
	    });
	  }

	  var handleMouseDown = useRippleHandler('start', onMouseDown);
	  var handleDragLeave = useRippleHandler('stop', onDragLeave);
	  var handleMouseUp = useRippleHandler('stop', onMouseUp);
	  var handleMouseLeave = useRippleHandler('stop', function (event) {
	    if (focusVisible) {
	      event.preventDefault();
	    }

	    if (onMouseLeave) {
	      onMouseLeave(event);
	    }
	  });
	  var handleTouchStart = useRippleHandler('start', onTouchStart);
	  var handleTouchEnd = useRippleHandler('stop', onTouchEnd);
	  var handleTouchMove = useRippleHandler('stop', onTouchMove);
	  var handleBlur = useRippleHandler('stop', function (event) {
	    if (focusVisible) {
	      onBlurVisible(event);
	      setFocusVisible(false);
	    }

	    if (onBlur) {
	      onBlur(event);
	    }
	  }, false);
	  var handleFocus = useEventCallback(function (event) {
	    // Fix for https://github.com/facebook/react/issues/7769
	    if (!buttonRef.current) {
	      buttonRef.current = event.currentTarget;
	    }

	    if (isFocusVisible(event)) {
	      setFocusVisible(true);

	      if (onFocusVisible) {
	        onFocusVisible(event);
	      }
	    }

	    if (onFocus) {
	      onFocus(event);
	    }
	  });

	  var isNonNativeButton = function isNonNativeButton() {
	    var button = getButtonNode();
	    return component && component !== 'button' && !(button.tagName === 'A' && button.href);
	  };
	  /**
	   * IE 11 shim for https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent/repeat
	   */


	  var keydownRef = React.useRef(false);
	  var handleKeyDown = useEventCallback(function (event) {
	    // Check if key is already down to avoid repeats being counted as multiple activations
	    if (focusRipple && !keydownRef.current && focusVisible && rippleRef.current && event.key === ' ') {
	      keydownRef.current = true;
	      event.persist();
	      rippleRef.current.stop(event, function () {
	        rippleRef.current.start(event);
	      });
	    }

	    if (event.target === event.currentTarget && isNonNativeButton() && event.key === ' ') {
	      event.preventDefault();
	    }

	    if (onKeyDown) {
	      onKeyDown(event);
	    } // Keyboard accessibility for non interactive elements


	    if (event.target === event.currentTarget && isNonNativeButton() && event.key === 'Enter' && !disabled) {
	      event.preventDefault();

	      if (onClick) {
	        onClick(event);
	      }
	    }
	  });
	  var handleKeyUp = useEventCallback(function (event) {
	    // calling preventDefault in keyUp on a <button> will not dispatch a click event if Space is pressed
	    // https://codesandbox.io/s/button-keyup-preventdefault-dn7f0
	    if (focusRipple && event.key === ' ' && rippleRef.current && focusVisible && !event.defaultPrevented) {
	      keydownRef.current = false;
	      event.persist();
	      rippleRef.current.stop(event, function () {
	        rippleRef.current.pulsate(event);
	      });
	    }

	    if (onKeyUp) {
	      onKeyUp(event);
	    } // Keyboard accessibility for non interactive elements


	    if (onClick && event.target === event.currentTarget && isNonNativeButton() && event.key === ' ' && !event.defaultPrevented) {
	      onClick(event);
	    }
	  });
	  var ComponentProp = component;

	  if (ComponentProp === 'button' && other.href) {
	    ComponentProp = 'a';
	  }

	  var buttonProps = {};

	  if (ComponentProp === 'button') {
	    buttonProps.type = type;
	    buttonProps.disabled = disabled;
	  } else {
	    if (ComponentProp !== 'a' || !other.href) {
	      buttonProps.role = 'button';
	    }

	    buttonProps['aria-disabled'] = disabled;
	  }

	  var handleUserRef = useForkRef(buttonRefProp, ref);
	  var handleOwnRef = useForkRef(focusVisibleRef, buttonRef);
	  var handleRef = useForkRef(handleUserRef, handleOwnRef);

	  var _React$useState2 = React.useState(false),
	      mountedState = _React$useState2[0],
	      setMountedState = _React$useState2[1];

	  React.useEffect(function () {
	    setMountedState(true);
	  }, []);
	  var enableTouchRipple = mountedState && !disableRipple && !disabled;

	  if (process.env.NODE_ENV !== 'production') {
	    // eslint-disable-next-line react-hooks/rules-of-hooks
	    React.useEffect(function () {
	      if (enableTouchRipple && !rippleRef.current) {
	        console.error(['Material-UI: The `component` prop provided to ButtonBase is invalid.', 'Please make sure the children prop is rendered in this custom component.'].join('\n'));
	      }
	    }, [enableTouchRipple]);
	  }

	  return /*#__PURE__*/React.createElement(ComponentProp, _extends({
	    className: clsx(classes.root, className, focusVisible && [classes.focusVisible, focusVisibleClassName], disabled && classes.disabled),
	    onBlur: handleBlur,
	    onClick: onClick,
	    onFocus: handleFocus,
	    onKeyDown: handleKeyDown,
	    onKeyUp: handleKeyUp,
	    onMouseDown: handleMouseDown,
	    onMouseLeave: handleMouseLeave,
	    onMouseUp: handleMouseUp,
	    onDragLeave: handleDragLeave,
	    onTouchEnd: handleTouchEnd,
	    onTouchMove: handleTouchMove,
	    onTouchStart: handleTouchStart,
	    ref: handleRef,
	    tabIndex: disabled ? -1 : tabIndex
	  }, buttonProps, other), children, enableTouchRipple ?
	  /*#__PURE__*/

	  /* TouchRipple is only needed client-side, x2 boost on the server. */
	  React.createElement(TouchRipple$1, _extends({
	    ref: rippleRef,
	    center: centerRipple
	  }, TouchRippleProps)) : null);
	});
	process.env.NODE_ENV !== "production" ? ButtonBase.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * A ref for imperative actions.
	   * It currently only supports `focusVisible()` action.
	   */
	  action: refType,

	  /**
	   * @ignore
	   *
	   * Use that prop to pass a ref to the native button component.
	   * @deprecated Use `ref` instead.
	   */
	  buttonRef: refType,

	  /**
	   * If `true`, the ripples will be centered.
	   * They won't start at the cursor interaction position.
	   */
	  centerRipple: propTypes.bool,

	  /**
	   * The content of the component.
	   */
	  children: propTypes.node,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: elementTypeAcceptingRef$1,

	  /**
	   * If `true`, the base button will be disabled.
	   */
	  disabled: propTypes.bool,

	  /**
	   * If `true`, the ripple effect will be disabled.
	   *
	   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
	   * to highlight the element by applying separate styles with the `focusVisibleClassName`.
	   */
	  disableRipple: propTypes.bool,

	  /**
	   * If `true`, the touch ripple effect will be disabled.
	   */
	  disableTouchRipple: propTypes.bool,

	  /**
	   * If `true`, the base button will have a keyboard focus ripple.
	   */
	  focusRipple: propTypes.bool,

	  /**
	   * This prop can help a person know which element has the keyboard focus.
	   * The class name will be applied when the element gain the focus through a keyboard interaction.
	   * It's a polyfill for the [CSS :focus-visible selector](https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo).
	   * The rationale for using this feature [is explained here](https://github.com/WICG/focus-visible/blob/master/explainer.md).
	   * A [polyfill can be used](https://github.com/WICG/focus-visible) to apply a `focus-visible` class to other components
	   * if needed.
	   */
	  focusVisibleClassName: propTypes.string,

	  /**
	   * @ignore
	   */
	  href: propTypes.string,

	  /**
	   * @ignore
	   */
	  onBlur: propTypes.func,

	  /**
	   * @ignore
	   */
	  onClick: propTypes.func,

	  /**
	   * @ignore
	   */
	  onDragLeave: propTypes.func,

	  /**
	   * @ignore
	   */
	  onFocus: propTypes.func,

	  /**
	   * Callback fired when the component is focused with a keyboard.
	   * We trigger a `onFocus` callback too.
	   */
	  onFocusVisible: propTypes.func,

	  /**
	   * @ignore
	   */
	  onKeyDown: propTypes.func,

	  /**
	   * @ignore
	   */
	  onKeyUp: propTypes.func,

	  /**
	   * @ignore
	   */
	  onMouseDown: propTypes.func,

	  /**
	   * @ignore
	   */
	  onMouseLeave: propTypes.func,

	  /**
	   * @ignore
	   */
	  onMouseUp: propTypes.func,

	  /**
	   * @ignore
	   */
	  onTouchEnd: propTypes.func,

	  /**
	   * @ignore
	   */
	  onTouchMove: propTypes.func,

	  /**
	   * @ignore
	   */
	  onTouchStart: propTypes.func,

	  /**
	   * @ignore
	   */
	  tabIndex: propTypes.oneOfType([propTypes.number, propTypes.string]),

	  /**
	   * Props applied to the `TouchRipple` element.
	   */
	  TouchRippleProps: propTypes.object,

	  /**
	   * @ignore
	   */
	  type: propTypes.oneOfType([propTypes.oneOf(['button', 'reset', 'submit']), propTypes.string])
	} : void 0;
	var ButtonBase$1 = withStyles$1(styles$5, {
	  name: 'MuiButtonBase'
	})(ButtonBase);

	var styleFunction = css(compose(borders, display, flexbox, grid, positions, palette, boxShadow, sizing, spacing, typography));
	/**
	 * @ignore - do not document.
	 */

	var Box = styled$1('div')(styleFunction, {
	  name: 'MuiBox'
	});

	var styles$6 = function styles(theme) {
	  return {
	    /* Styles applied to the root element. */
	    root: {
	      margin: 0
	    },

	    /* Styles applied to the root element if `variant="body2"`. */
	    body2: theme.typography.body2,

	    /* Styles applied to the root element if `variant="body1"`. */
	    body1: theme.typography.body1,

	    /* Styles applied to the root element if `variant="caption"`. */
	    caption: theme.typography.caption,

	    /* Styles applied to the root element if `variant="button"`. */
	    button: theme.typography.button,

	    /* Styles applied to the root element if `variant="h1"`. */
	    h1: theme.typography.h1,

	    /* Styles applied to the root element if `variant="h2"`. */
	    h2: theme.typography.h2,

	    /* Styles applied to the root element if `variant="h3"`. */
	    h3: theme.typography.h3,

	    /* Styles applied to the root element if `variant="h4"`. */
	    h4: theme.typography.h4,

	    /* Styles applied to the root element if `variant="h5"`. */
	    h5: theme.typography.h5,

	    /* Styles applied to the root element if `variant="h6"`. */
	    h6: theme.typography.h6,

	    /* Styles applied to the root element if `variant="subtitle1"`. */
	    subtitle1: theme.typography.subtitle1,

	    /* Styles applied to the root element if `variant="subtitle2"`. */
	    subtitle2: theme.typography.subtitle2,

	    /* Styles applied to the root element if `variant="overline"`. */
	    overline: theme.typography.overline,

	    /* Styles applied to the root element if `variant="srOnly"`. Only accessible to screen readers. */
	    srOnly: {
	      position: 'absolute',
	      height: 1,
	      width: 1,
	      overflow: 'hidden'
	    },

	    /* Styles applied to the root element if `align="left"`. */
	    alignLeft: {
	      textAlign: 'left'
	    },

	    /* Styles applied to the root element if `align="center"`. */
	    alignCenter: {
	      textAlign: 'center'
	    },

	    /* Styles applied to the root element if `align="right"`. */
	    alignRight: {
	      textAlign: 'right'
	    },

	    /* Styles applied to the root element if `align="justify"`. */
	    alignJustify: {
	      textAlign: 'justify'
	    },

	    /* Styles applied to the root element if `nowrap={true}`. */
	    noWrap: {
	      overflow: 'hidden',
	      textOverflow: 'ellipsis',
	      whiteSpace: 'nowrap'
	    },

	    /* Styles applied to the root element if `gutterBottom={true}`. */
	    gutterBottom: {
	      marginBottom: '0.35em'
	    },

	    /* Styles applied to the root element if `paragraph={true}`. */
	    paragraph: {
	      marginBottom: 16
	    },

	    /* Styles applied to the root element if `color="inherit"`. */
	    colorInherit: {
	      color: 'inherit'
	    },

	    /* Styles applied to the root element if `color="primary"`. */
	    colorPrimary: {
	      color: theme.palette.primary.main
	    },

	    /* Styles applied to the root element if `color="secondary"`. */
	    colorSecondary: {
	      color: theme.palette.secondary.main
	    },

	    /* Styles applied to the root element if `color="textPrimary"`. */
	    colorTextPrimary: {
	      color: theme.palette.text.primary
	    },

	    /* Styles applied to the root element if `color="textSecondary"`. */
	    colorTextSecondary: {
	      color: theme.palette.text.secondary
	    },

	    /* Styles applied to the root element if `color="error"`. */
	    colorError: {
	      color: theme.palette.error.main
	    },

	    /* Styles applied to the root element if `display="inline"`. */
	    displayInline: {
	      display: 'inline'
	    },

	    /* Styles applied to the root element if `display="block"`. */
	    displayBlock: {
	      display: 'block'
	    }
	  };
	};
	var defaultVariantMapping = {
	  h1: 'h1',
	  h2: 'h2',
	  h3: 'h3',
	  h4: 'h4',
	  h5: 'h5',
	  h6: 'h6',
	  subtitle1: 'h6',
	  subtitle2: 'h6',
	  body1: 'p',
	  body2: 'p'
	};
	var Typography = /*#__PURE__*/React.forwardRef(function Typography(props, ref) {
	  var _props$align = props.align,
	      align = _props$align === void 0 ? 'inherit' : _props$align,
	      classes = props.classes,
	      className = props.className,
	      _props$color = props.color,
	      color = _props$color === void 0 ? 'initial' : _props$color,
	      component = props.component,
	      _props$display = props.display,
	      display = _props$display === void 0 ? 'initial' : _props$display,
	      _props$gutterBottom = props.gutterBottom,
	      gutterBottom = _props$gutterBottom === void 0 ? false : _props$gutterBottom,
	      _props$noWrap = props.noWrap,
	      noWrap = _props$noWrap === void 0 ? false : _props$noWrap,
	      _props$paragraph = props.paragraph,
	      paragraph = _props$paragraph === void 0 ? false : _props$paragraph,
	      _props$variant = props.variant,
	      variant = _props$variant === void 0 ? 'body1' : _props$variant,
	      _props$variantMapping = props.variantMapping,
	      variantMapping = _props$variantMapping === void 0 ? defaultVariantMapping : _props$variantMapping,
	      other = _objectWithoutProperties(props, ["align", "classes", "className", "color", "component", "display", "gutterBottom", "noWrap", "paragraph", "variant", "variantMapping"]);

	  var Component = component || (paragraph ? 'p' : variantMapping[variant] || defaultVariantMapping[variant]) || 'span';
	  return /*#__PURE__*/React.createElement(Component, _extends({
	    className: clsx(classes.root, className, variant !== 'inherit' && classes[variant], color !== 'initial' && classes["color".concat(capitalize(color))], noWrap && classes.noWrap, gutterBottom && classes.gutterBottom, paragraph && classes.paragraph, align !== 'inherit' && classes["align".concat(capitalize(align))], display !== 'initial' && classes["display".concat(capitalize(display))]),
	    ref: ref
	  }, other));
	});
	process.env.NODE_ENV !== "production" ? Typography.propTypes = {
	  /**
	   * Set the text-align on the component.
	   */
	  align: propTypes.oneOf(['inherit', 'left', 'center', 'right', 'justify']),

	  /**
	   * The content of the component.
	   */
	  children: propTypes.node,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object.isRequired,

	  /**
	   * @ignore
	   */
	  className: propTypes.string,

	  /**
	   * The color of the component. It supports those theme colors that make sense for this component.
	   */
	  color: propTypes.oneOf(['initial', 'inherit', 'primary', 'secondary', 'textPrimary', 'textSecondary', 'error']),

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   * Overrides the behavior of the `variantMapping` prop.
	   */
	  component: propTypes
	  /* @typescript-to-proptypes-ignore */
	  .elementType,

	  /**
	   * Controls the display type
	   */
	  display: propTypes.oneOf(['initial', 'block', 'inline']),

	  /**
	   * If `true`, the text will have a bottom margin.
	   */
	  gutterBottom: propTypes.bool,

	  /**
	   * If `true`, the text will not wrap, but instead will truncate with a text overflow ellipsis.
	   *
	   * Note that text overflow can only happen with block or inline-block level elements
	   * (the element needs to have a width in order to overflow).
	   */
	  noWrap: propTypes.bool,

	  /**
	   * If `true`, the text will have a bottom margin.
	   */
	  paragraph: propTypes.bool,

	  /**
	   * Applies the theme typography styles.
	   */
	  variant: propTypes.oneOf(['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'subtitle1', 'subtitle2', 'body1', 'body2', 'caption', 'button', 'overline', 'srOnly', 'inherit']),

	  /**
	   * The component maps the variant prop to a range of different HTML element types.
	   * For instance, subtitle1 to `<h6>`.
	   * If you wish to change that mapping, you can provide your own.
	   * Alternatively, you can use the `component` prop.
	   */
	  variantMapping: propTypes.object
	} : void 0;
	var Typography$1 = withStyles$1(styles$6, {
	  name: 'MuiTypography'
	})(Typography);

	var styles$7 = function styles(theme) {
	  return {
	    /* Styles applied to the root element. */
	    root: _extends({}, theme.typography.button, {
	      boxSizing: 'border-box',
	      minWidth: 64,
	      padding: '6px 16px',
	      borderRadius: theme.shape.borderRadius,
	      color: theme.palette.text.primary,
	      transition: theme.transitions.create(['background-color', 'box-shadow', 'border'], {
	        duration: theme.transitions.duration.short
	      }),
	      '&:hover': {
	        textDecoration: 'none',
	        backgroundColor: fade(theme.palette.text.primary, theme.palette.action.hoverOpacity),
	        // Reset on touch devices, it doesn't add specificity
	        '@media (hover: none)': {
	          backgroundColor: 'transparent'
	        },
	        '&$disabled': {
	          backgroundColor: 'transparent'
	        }
	      },
	      '&$disabled': {
	        color: theme.palette.action.disabled
	      }
	    }),

	    /* Styles applied to the span element that wraps the children. */
	    label: {
	      width: '100%',
	      // Ensure the correct width for iOS Safari
	      display: 'inherit',
	      alignItems: 'inherit',
	      justifyContent: 'inherit'
	    },

	    /* Styles applied to the root element if `variant="text"`. */
	    text: {
	      padding: '6px 8px'
	    },

	    /* Styles applied to the root element if `variant="text"` and `color="primary"`. */
	    textPrimary: {
	      color: theme.palette.primary.main,
	      '&:hover': {
	        backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),
	        // Reset on touch devices, it doesn't add specificity
	        '@media (hover: none)': {
	          backgroundColor: 'transparent'
	        }
	      }
	    },

	    /* Styles applied to the root element if `variant="text"` and `color="secondary"`. */
	    textSecondary: {
	      color: theme.palette.secondary.main,
	      '&:hover': {
	        backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),
	        // Reset on touch devices, it doesn't add specificity
	        '@media (hover: none)': {
	          backgroundColor: 'transparent'
	        }
	      }
	    },

	    /* Styles applied to the root element if `variant="outlined"`. */
	    outlined: {
	      padding: '5px 15px',
	      border: "1px solid ".concat(theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)'),
	      '&$disabled': {
	        border: "1px solid ".concat(theme.palette.action.disabledBackground)
	      }
	    },

	    /* Styles applied to the root element if `variant="outlined"` and `color="primary"`. */
	    outlinedPrimary: {
	      color: theme.palette.primary.main,
	      border: "1px solid ".concat(fade(theme.palette.primary.main, 0.5)),
	      '&:hover': {
	        border: "1px solid ".concat(theme.palette.primary.main),
	        backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),
	        // Reset on touch devices, it doesn't add specificity
	        '@media (hover: none)': {
	          backgroundColor: 'transparent'
	        }
	      }
	    },

	    /* Styles applied to the root element if `variant="outlined"` and `color="secondary"`. */
	    outlinedSecondary: {
	      color: theme.palette.secondary.main,
	      border: "1px solid ".concat(fade(theme.palette.secondary.main, 0.5)),
	      '&:hover': {
	        border: "1px solid ".concat(theme.palette.secondary.main),
	        backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),
	        // Reset on touch devices, it doesn't add specificity
	        '@media (hover: none)': {
	          backgroundColor: 'transparent'
	        }
	      },
	      '&$disabled': {
	        border: "1px solid ".concat(theme.palette.action.disabled)
	      }
	    },

	    /* Styles applied to the root element if `variant="contained"`. */
	    contained: {
	      color: theme.palette.getContrastText(theme.palette.grey[300]),
	      backgroundColor: theme.palette.grey[300],
	      boxShadow: theme.shadows[2],
	      '&:hover': {
	        backgroundColor: theme.palette.grey.A100,
	        boxShadow: theme.shadows[4],
	        // Reset on touch devices, it doesn't add specificity
	        '@media (hover: none)': {
	          boxShadow: theme.shadows[2],
	          backgroundColor: theme.palette.grey[300]
	        },
	        '&$disabled': {
	          backgroundColor: theme.palette.action.disabledBackground
	        }
	      },
	      '&$focusVisible': {
	        boxShadow: theme.shadows[6]
	      },
	      '&:active': {
	        boxShadow: theme.shadows[8]
	      },
	      '&$disabled': {
	        color: theme.palette.action.disabled,
	        boxShadow: theme.shadows[0],
	        backgroundColor: theme.palette.action.disabledBackground
	      }
	    },

	    /* Styles applied to the root element if `variant="contained"` and `color="primary"`. */
	    containedPrimary: {
	      color: theme.palette.primary.contrastText,
	      backgroundColor: theme.palette.primary.main,
	      '&:hover': {
	        backgroundColor: theme.palette.primary.dark,
	        // Reset on touch devices, it doesn't add specificity
	        '@media (hover: none)': {
	          backgroundColor: theme.palette.primary.main
	        }
	      }
	    },

	    /* Styles applied to the root element if `variant="contained"` and `color="secondary"`. */
	    containedSecondary: {
	      color: theme.palette.secondary.contrastText,
	      backgroundColor: theme.palette.secondary.main,
	      '&:hover': {
	        backgroundColor: theme.palette.secondary.dark,
	        // Reset on touch devices, it doesn't add specificity
	        '@media (hover: none)': {
	          backgroundColor: theme.palette.secondary.main
	        }
	      }
	    },

	    /* Styles applied to the root element if `disableElevation={true}`. */
	    disableElevation: {
	      boxShadow: 'none',
	      '&:hover': {
	        boxShadow: 'none'
	      },
	      '&$focusVisible': {
	        boxShadow: 'none'
	      },
	      '&:active': {
	        boxShadow: 'none'
	      },
	      '&$disabled': {
	        boxShadow: 'none'
	      }
	    },

	    /* Pseudo-class applied to the ButtonBase root element if the button is keyboard focused. */
	    focusVisible: {},

	    /* Pseudo-class applied to the root element if `disabled={true}`. */
	    disabled: {},

	    /* Styles applied to the root element if `color="inherit"`. */
	    colorInherit: {
	      color: 'inherit',
	      borderColor: 'currentColor'
	    },

	    /* Styles applied to the root element if `size="small"` and `variant="text"`. */
	    textSizeSmall: {
	      padding: '4px 5px',
	      fontSize: theme.typography.pxToRem(13)
	    },

	    /* Styles applied to the root element if `size="large"` and `variant="text"`. */
	    textSizeLarge: {
	      padding: '8px 11px',
	      fontSize: theme.typography.pxToRem(15)
	    },

	    /* Styles applied to the root element if `size="small"` and `variant="outlined"`. */
	    outlinedSizeSmall: {
	      padding: '3px 9px',
	      fontSize: theme.typography.pxToRem(13)
	    },

	    /* Styles applied to the root element if `size="large"` and `variant="outlined"`. */
	    outlinedSizeLarge: {
	      padding: '7px 21px',
	      fontSize: theme.typography.pxToRem(15)
	    },

	    /* Styles applied to the root element if `size="small"` and `variant="contained"`. */
	    containedSizeSmall: {
	      padding: '4px 10px',
	      fontSize: theme.typography.pxToRem(13)
	    },

	    /* Styles applied to the root element if `size="large"` and `variant="contained"`. */
	    containedSizeLarge: {
	      padding: '8px 22px',
	      fontSize: theme.typography.pxToRem(15)
	    },

	    /* Styles applied to the root element if `size="small"`. */
	    sizeSmall: {},

	    /* Styles applied to the root element if `size="large"`. */
	    sizeLarge: {},

	    /* Styles applied to the root element if `fullWidth={true}`. */
	    fullWidth: {
	      width: '100%'
	    },

	    /* Styles applied to the startIcon element if supplied. */
	    startIcon: {
	      display: 'inherit',
	      marginRight: 8,
	      marginLeft: -4,
	      '&$iconSizeSmall': {
	        marginLeft: -2
	      }
	    },

	    /* Styles applied to the endIcon element if supplied. */
	    endIcon: {
	      display: 'inherit',
	      marginRight: -4,
	      marginLeft: 8,
	      '&$iconSizeSmall': {
	        marginRight: -2
	      }
	    },

	    /* Styles applied to the icon element if supplied and `size="small"`. */
	    iconSizeSmall: {
	      '& > *:first-child': {
	        fontSize: 18
	      }
	    },

	    /* Styles applied to the icon element if supplied and `size="medium"`. */
	    iconSizeMedium: {
	      '& > *:first-child': {
	        fontSize: 20
	      }
	    },

	    /* Styles applied to the icon element if supplied and `size="large"`. */
	    iconSizeLarge: {
	      '& > *:first-child': {
	        fontSize: 22
	      }
	    }
	  };
	};
	var Button = /*#__PURE__*/React.forwardRef(function Button(props, ref) {
	  var children = props.children,
	      classes = props.classes,
	      className = props.className,
	      _props$color = props.color,
	      color = _props$color === void 0 ? 'default' : _props$color,
	      _props$component = props.component,
	      component = _props$component === void 0 ? 'button' : _props$component,
	      _props$disabled = props.disabled,
	      disabled = _props$disabled === void 0 ? false : _props$disabled,
	      _props$disableElevati = props.disableElevation,
	      disableElevation = _props$disableElevati === void 0 ? false : _props$disableElevati,
	      _props$disableFocusRi = props.disableFocusRipple,
	      disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi,
	      endIconProp = props.endIcon,
	      focusVisibleClassName = props.focusVisibleClassName,
	      _props$fullWidth = props.fullWidth,
	      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
	      _props$size = props.size,
	      size = _props$size === void 0 ? 'medium' : _props$size,
	      startIconProp = props.startIcon,
	      _props$type = props.type,
	      type = _props$type === void 0 ? 'button' : _props$type,
	      _props$variant = props.variant,
	      variant = _props$variant === void 0 ? 'text' : _props$variant,
	      other = _objectWithoutProperties(props, ["children", "classes", "className", "color", "component", "disabled", "disableElevation", "disableFocusRipple", "endIcon", "focusVisibleClassName", "fullWidth", "size", "startIcon", "type", "variant"]);

	  var startIcon = startIconProp && /*#__PURE__*/React.createElement("span", {
	    className: clsx(classes.startIcon, classes["iconSize".concat(capitalize(size))])
	  }, startIconProp);
	  var endIcon = endIconProp && /*#__PURE__*/React.createElement("span", {
	    className: clsx(classes.endIcon, classes["iconSize".concat(capitalize(size))])
	  }, endIconProp);
	  return /*#__PURE__*/React.createElement(ButtonBase$1, _extends({
	    className: clsx(classes.root, classes[variant], className, color === 'inherit' ? classes.colorInherit : color !== 'default' && classes["".concat(variant).concat(capitalize(color))], size !== 'medium' && [classes["".concat(variant, "Size").concat(capitalize(size))], classes["size".concat(capitalize(size))]], disableElevation && classes.disableElevation, disabled && classes.disabled, fullWidth && classes.fullWidth),
	    component: component,
	    disabled: disabled,
	    focusRipple: !disableFocusRipple,
	    focusVisibleClassName: clsx(classes.focusVisible, focusVisibleClassName),
	    ref: ref,
	    type: type
	  }, other), /*#__PURE__*/React.createElement("span", {
	    className: classes.label
	  }, startIcon, children, endIcon));
	});
	process.env.NODE_ENV !== "production" ? Button.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the button.
	   */
	  children: propTypes.node,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.string,

	  /**
	   * The color of the component. It supports those theme colors that make sense for this component.
	   */
	  color: propTypes.oneOf(['default', 'inherit', 'primary', 'secondary']),

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes
	  /* @typescript-to-proptypes-ignore */
	  .elementType,

	  /**
	   * If `true`, the button will be disabled.
	   */
	  disabled: propTypes.bool,

	  /**
	   * If `true`, no elevation is used.
	   */
	  disableElevation: propTypes.bool,

	  /**
	   * If `true`, the  keyboard focus ripple will be disabled.
	   */
	  disableFocusRipple: propTypes.bool,

	  /**
	   * If `true`, the ripple effect will be disabled.
	   *
	   * ⚠️ Without a ripple there is no styling for :focus-visible by default. Be sure
	   * to highlight the element by applying separate styles with the `focusVisibleClassName`.
	   */
	  disableRipple: propTypes.bool,

	  /**
	   * Element placed after the children.
	   */
	  endIcon: propTypes.node,

	  /**
	   * @ignore
	   */
	  focusVisibleClassName: propTypes.string,

	  /**
	   * If `true`, the button will take up the full width of its container.
	   */
	  fullWidth: propTypes.bool,

	  /**
	   * The URL to link to when the button is clicked.
	   * If defined, an `a` element will be used as the root node.
	   */
	  href: propTypes.string,

	  /**
	   * The size of the button.
	   * `small` is equivalent to the dense button styling.
	   */
	  size: propTypes.oneOf(['large', 'medium', 'small']),

	  /**
	   * Element placed before the children.
	   */
	  startIcon: propTypes.node,

	  /**
	   * @ignore
	   */
	  type: propTypes.oneOfType([propTypes.oneOf(['button', 'reset', 'submit']), propTypes.string]),

	  /**
	   * The variant to use.
	   */
	  variant: propTypes.oneOf(['contained', 'outlined', 'text'])
	} : void 0;
	var Button$1 = withStyles$1(styles$7, {
	  name: 'MuiButton'
	})(Button);

	/**
	 * @ignore - internal component.
	 */

	var FormControlContext = React.createContext();

	if (process.env.NODE_ENV !== 'production') {
	  FormControlContext.displayName = 'FormControlContext';
	}

	function useFormControl() {
	  return React.useContext(FormControlContext);
	}

	function useFormControl$1() {
	  return React.useContext(FormControlContext);
	}

	var styles$8 = function styles(theme) {
	  return {
	    /* Styles applied to the root element. */
	    root: {
	      textAlign: 'center',
	      flex: '0 0 auto',
	      fontSize: theme.typography.pxToRem(24),
	      padding: 12,
	      borderRadius: '50%',
	      overflow: 'visible',
	      // Explicitly set the default value to solve a bug on IE 11.
	      color: theme.palette.action.active,
	      transition: theme.transitions.create('background-color', {
	        duration: theme.transitions.duration.shortest
	      }),
	      '&:hover': {
	        backgroundColor: fade(theme.palette.action.active, theme.palette.action.hoverOpacity),
	        // Reset on touch devices, it doesn't add specificity
	        '@media (hover: none)': {
	          backgroundColor: 'transparent'
	        }
	      },
	      '&$disabled': {
	        backgroundColor: 'transparent',
	        color: theme.palette.action.disabled
	      }
	    },

	    /* Styles applied to the root element if `edge="start"`. */
	    edgeStart: {
	      marginLeft: -12,
	      '$sizeSmall&': {
	        marginLeft: -3
	      }
	    },

	    /* Styles applied to the root element if `edge="end"`. */
	    edgeEnd: {
	      marginRight: -12,
	      '$sizeSmall&': {
	        marginRight: -3
	      }
	    },

	    /* Styles applied to the root element if `color="inherit"`. */
	    colorInherit: {
	      color: 'inherit'
	    },

	    /* Styles applied to the root element if `color="primary"`. */
	    colorPrimary: {
	      color: theme.palette.primary.main,
	      '&:hover': {
	        backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),
	        // Reset on touch devices, it doesn't add specificity
	        '@media (hover: none)': {
	          backgroundColor: 'transparent'
	        }
	      }
	    },

	    /* Styles applied to the root element if `color="secondary"`. */
	    colorSecondary: {
	      color: theme.palette.secondary.main,
	      '&:hover': {
	        backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),
	        // Reset on touch devices, it doesn't add specificity
	        '@media (hover: none)': {
	          backgroundColor: 'transparent'
	        }
	      }
	    },

	    /* Pseudo-class applied to the root element if `disabled={true}`. */
	    disabled: {},

	    /* Styles applied to the root element if `size="small"`. */
	    sizeSmall: {
	      padding: 3,
	      fontSize: theme.typography.pxToRem(18)
	    },

	    /* Styles applied to the children container element. */
	    label: {
	      width: '100%',
	      display: 'flex',
	      alignItems: 'inherit',
	      justifyContent: 'inherit'
	    }
	  };
	};
	/**
	 * Refer to the [Icons](/components/icons/) section of the documentation
	 * regarding the available icon options.
	 */

	var IconButton = /*#__PURE__*/React.forwardRef(function IconButton(props, ref) {
	  var _props$edge = props.edge,
	      edge = _props$edge === void 0 ? false : _props$edge,
	      children = props.children,
	      classes = props.classes,
	      className = props.className,
	      _props$color = props.color,
	      color = _props$color === void 0 ? 'default' : _props$color,
	      _props$disabled = props.disabled,
	      disabled = _props$disabled === void 0 ? false : _props$disabled,
	      _props$disableFocusRi = props.disableFocusRipple,
	      disableFocusRipple = _props$disableFocusRi === void 0 ? false : _props$disableFocusRi,
	      _props$size = props.size,
	      size = _props$size === void 0 ? 'medium' : _props$size,
	      other = _objectWithoutProperties(props, ["edge", "children", "classes", "className", "color", "disabled", "disableFocusRipple", "size"]);

	  return /*#__PURE__*/React.createElement(ButtonBase$1, _extends({
	    className: clsx(classes.root, className, color !== 'default' && classes["color".concat(capitalize(color))], disabled && classes.disabled, size === "small" && classes["size".concat(capitalize(size))], {
	      'start': classes.edgeStart,
	      'end': classes.edgeEnd
	    }[edge]),
	    centerRipple: true,
	    focusRipple: !disableFocusRipple,
	    disabled: disabled,
	    ref: ref
	  }, other), /*#__PURE__*/React.createElement("span", {
	    className: classes.label
	  }, children));
	});
	process.env.NODE_ENV !== "production" ? IconButton.propTypes = {
	  /**
	   * The icon element.
	   */
	  children: chainPropTypes(propTypes.node, function (props) {
	    var found = React.Children.toArray(props.children).some(function (child) {
	      return /*#__PURE__*/React.isValidElement(child) && child.props.onClick;
	    });

	    if (found) {
	      return new Error(['Material-UI: You are providing an onClick event listener ' + 'to a child of a button element.', 'Firefox will never trigger the event.', 'You should move the onClick listener to the parent button element.', 'https://github.com/mui-org/material-ui/issues/13957'].join('\n'));
	    }

	    return null;
	  }),

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object.isRequired,

	  /**
	   * @ignore
	   */
	  className: propTypes.string,

	  /**
	   * The color of the component. It supports those theme colors that make sense for this component.
	   */
	  color: propTypes.oneOf(['default', 'inherit', 'primary', 'secondary']),

	  /**
	   * If `true`, the button will be disabled.
	   */
	  disabled: propTypes.bool,

	  /**
	   * If `true`, the  keyboard focus ripple will be disabled.
	   */
	  disableFocusRipple: propTypes.bool,

	  /**
	   * If `true`, the ripple effect will be disabled.
	   */
	  disableRipple: propTypes.bool,

	  /**
	   * If given, uses a negative margin to counteract the padding on one
	   * side (this is often helpful for aligning the left or right
	   * side of the icon with content above or below, without ruining the border
	   * size and shape).
	   */
	  edge: propTypes.oneOf(['start', 'end', false]),

	  /**
	   * The size of the button.
	   * `small` is equivalent to the dense button styling.
	   */
	  size: propTypes.oneOf(['small', 'medium'])
	} : void 0;
	var IconButton$1 = withStyles$1(styles$8, {
	  name: 'MuiIconButton'
	})(IconButton);

	var styles$9 = {
	  root: {
	    padding: 9
	  },
	  checked: {},
	  disabled: {},
	  input: {
	    cursor: 'inherit',
	    position: 'absolute',
	    opacity: 0,
	    width: '100%',
	    height: '100%',
	    top: 0,
	    left: 0,
	    margin: 0,
	    padding: 0,
	    zIndex: 1
	  }
	};
	/**
	 * @ignore - internal component.
	 */

	var SwitchBase = /*#__PURE__*/React.forwardRef(function SwitchBase(props, ref) {
	  var autoFocus = props.autoFocus,
	      checkedProp = props.checked,
	      checkedIcon = props.checkedIcon,
	      classes = props.classes,
	      className = props.className,
	      defaultChecked = props.defaultChecked,
	      disabledProp = props.disabled,
	      icon = props.icon,
	      id = props.id,
	      inputProps = props.inputProps,
	      inputRef = props.inputRef,
	      name = props.name,
	      onBlur = props.onBlur,
	      onChange = props.onChange,
	      onFocus = props.onFocus,
	      readOnly = props.readOnly,
	      required = props.required,
	      tabIndex = props.tabIndex,
	      type = props.type,
	      value = props.value,
	      other = _objectWithoutProperties(props, ["autoFocus", "checked", "checkedIcon", "classes", "className", "defaultChecked", "disabled", "icon", "id", "inputProps", "inputRef", "name", "onBlur", "onChange", "onFocus", "readOnly", "required", "tabIndex", "type", "value"]);

	  var _useControlled = useControlled({
	    controlled: checkedProp,
	    default: Boolean(defaultChecked),
	    name: 'SwitchBase',
	    state: 'checked'
	  }),
	      _useControlled2 = _slicedToArray(_useControlled, 2),
	      checked = _useControlled2[0],
	      setCheckedState = _useControlled2[1];

	  var muiFormControl = useFormControl$1();

	  var handleFocus = function handleFocus(event) {
	    if (onFocus) {
	      onFocus(event);
	    }

	    if (muiFormControl && muiFormControl.onFocus) {
	      muiFormControl.onFocus(event);
	    }
	  };

	  var handleBlur = function handleBlur(event) {
	    if (onBlur) {
	      onBlur(event);
	    }

	    if (muiFormControl && muiFormControl.onBlur) {
	      muiFormControl.onBlur(event);
	    }
	  };

	  var handleInputChange = function handleInputChange(event) {
	    var newChecked = event.target.checked;
	    setCheckedState(newChecked);

	    if (onChange) {
	      // TODO v5: remove the second argument.
	      onChange(event, newChecked);
	    }
	  };

	  var disabled = disabledProp;

	  if (muiFormControl) {
	    if (typeof disabled === 'undefined') {
	      disabled = muiFormControl.disabled;
	    }
	  }

	  var hasLabelFor = type === 'checkbox' || type === 'radio';
	  return /*#__PURE__*/React.createElement(IconButton$1, _extends({
	    component: "span",
	    className: clsx(classes.root, className, checked && classes.checked, disabled && classes.disabled),
	    disabled: disabled,
	    tabIndex: null,
	    role: undefined,
	    onFocus: handleFocus,
	    onBlur: handleBlur,
	    ref: ref
	  }, other), /*#__PURE__*/React.createElement("input", _extends({
	    autoFocus: autoFocus,
	    checked: checkedProp,
	    defaultChecked: defaultChecked,
	    className: classes.input,
	    disabled: disabled,
	    id: hasLabelFor && id,
	    name: name,
	    onChange: handleInputChange,
	    readOnly: readOnly,
	    ref: inputRef,
	    required: required,
	    tabIndex: tabIndex,
	    type: type,
	    value: value
	  }, inputProps)), checked ? checkedIcon : icon);
	}); // NB: If changed, please update Checkbox, Switch and Radio
	// so that the API documentation is updated.

	process.env.NODE_ENV !== "production" ? SwitchBase.propTypes = {
	  /**
	   * If `true`, the `input` element will be focused during the first mount.
	   */
	  autoFocus: propTypes.bool,

	  /**
	   * If `true`, the component is checked.
	   */
	  checked: propTypes.bool,

	  /**
	   * The icon to display when the component is checked.
	   */
	  checkedIcon: propTypes.node.isRequired,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object.isRequired,

	  /**
	   * @ignore
	   */
	  className: propTypes.string,

	  /**
	   * @ignore
	   */
	  defaultChecked: propTypes.bool,

	  /**
	   * If `true`, the switch will be disabled.
	   */
	  disabled: propTypes.bool,

	  /**
	   * The icon to display when the component is unchecked.
	   */
	  icon: propTypes.node.isRequired,

	  /**
	   * The id of the `input` element.
	   */
	  id: propTypes.string,

	  /**
	   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
	   */
	  inputProps: propTypes.object,

	  /**
	   * Pass a ref to the `input` element.
	   */
	  inputRef: refType,

	  /*
	   * @ignore
	   */
	  name: propTypes.string,

	  /**
	   * @ignore
	   */
	  onBlur: propTypes.func,

	  /**
	   * Callback fired when the state is changed.
	   *
	   * @param {object} event The event source of the callback.
	   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
	   */
	  onChange: propTypes.func,

	  /**
	   * @ignore
	   */
	  onFocus: propTypes.func,

	  /**
	   * It prevents the user from changing the value of the field
	   * (not from interacting with the field).
	   */
	  readOnly: propTypes.bool,

	  /**
	   * If `true`, the `input` element will be required.
	   */
	  required: propTypes.bool,

	  /**
	   * @ignore
	   */
	  tabIndex: propTypes.oneOfType([propTypes.number, propTypes.string]),

	  /**
	   * The input component prop `type`.
	   */
	  type: propTypes.string.isRequired,

	  /**
	   * The value of the component.
	   */
	  value: propTypes.any
	} : void 0;
	var SwitchBase$1 = withStyles$1(styles$9, {
	  name: 'PrivateSwitchBase'
	})(SwitchBase);

	/**
	 * @ignore - internal component.
	 */

	var CheckBoxOutlineBlankIcon = createSvgIcon( /*#__PURE__*/React.createElement("path", {
	  d: "M19 5v14H5V5h14m0-2H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2z"
	}), 'CheckBoxOutlineBlank');

	/**
	 * @ignore - internal component.
	 */

	var CheckBoxIcon = createSvgIcon( /*#__PURE__*/React.createElement("path", {
	  d: "M19 3H5c-1.11 0-2 .9-2 2v14c0 1.1.89 2 2 2h14c1.11 0 2-.9 2-2V5c0-1.1-.89-2-2-2zm-9 14l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"
	}), 'CheckBox');

	/**
	 * @ignore - internal component.
	 */

	var IndeterminateCheckBoxIcon = createSvgIcon( /*#__PURE__*/React.createElement("path", {
	  d: "M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-2 10H7v-2h10v2z"
	}), 'IndeterminateCheckBox');

	var styles$a = function styles(theme) {
	  return {
	    /* Styles applied to the root element. */
	    root: {
	      color: theme.palette.text.secondary
	    },

	    /* Pseudo-class applied to the root element if `checked={true}`. */
	    checked: {},

	    /* Pseudo-class applied to the root element if `disabled={true}`. */
	    disabled: {},

	    /* Pseudo-class applied to the root element if `indeterminate={true}`. */
	    indeterminate: {},

	    /* Styles applied to the root element if `color="primary"`. */
	    colorPrimary: {
	      '&$checked': {
	        color: theme.palette.primary.main,
	        '&:hover': {
	          backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),
	          // Reset on touch devices, it doesn't add specificity
	          '@media (hover: none)': {
	            backgroundColor: 'transparent'
	          }
	        }
	      },
	      '&$disabled': {
	        color: theme.palette.action.disabled
	      }
	    },

	    /* Styles applied to the root element if `color="secondary"`. */
	    colorSecondary: {
	      '&$checked': {
	        color: theme.palette.secondary.main,
	        '&:hover': {
	          backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),
	          // Reset on touch devices, it doesn't add specificity
	          '@media (hover: none)': {
	            backgroundColor: 'transparent'
	          }
	        }
	      },
	      '&$disabled': {
	        color: theme.palette.action.disabled
	      }
	    }
	  };
	};
	var defaultCheckedIcon = /*#__PURE__*/React.createElement(CheckBoxIcon, null);
	var defaultIcon = /*#__PURE__*/React.createElement(CheckBoxOutlineBlankIcon, null);
	var defaultIndeterminateIcon = /*#__PURE__*/React.createElement(IndeterminateCheckBoxIcon, null);
	var Checkbox = /*#__PURE__*/React.forwardRef(function Checkbox(props, ref) {
	  var _props$checkedIcon = props.checkedIcon,
	      checkedIcon = _props$checkedIcon === void 0 ? defaultCheckedIcon : _props$checkedIcon,
	      classes = props.classes,
	      _props$color = props.color,
	      color = _props$color === void 0 ? 'secondary' : _props$color,
	      _props$icon = props.icon,
	      iconProp = _props$icon === void 0 ? defaultIcon : _props$icon,
	      _props$indeterminate = props.indeterminate,
	      indeterminate = _props$indeterminate === void 0 ? false : _props$indeterminate,
	      _props$indeterminateI = props.indeterminateIcon,
	      indeterminateIconProp = _props$indeterminateI === void 0 ? defaultIndeterminateIcon : _props$indeterminateI,
	      inputProps = props.inputProps,
	      _props$size = props.size,
	      size = _props$size === void 0 ? 'medium' : _props$size,
	      other = _objectWithoutProperties(props, ["checkedIcon", "classes", "color", "icon", "indeterminate", "indeterminateIcon", "inputProps", "size"]);

	  var icon = indeterminate ? indeterminateIconProp : iconProp;
	  var indeterminateIcon = indeterminate ? indeterminateIconProp : checkedIcon;
	  return /*#__PURE__*/React.createElement(SwitchBase$1, _extends({
	    type: "checkbox",
	    classes: {
	      root: clsx(classes.root, classes["color".concat(capitalize(color))], indeterminate && classes.indeterminate),
	      checked: classes.checked,
	      disabled: classes.disabled
	    },
	    color: color,
	    inputProps: _extends({
	      'data-indeterminate': indeterminate
	    }, inputProps),
	    icon: /*#__PURE__*/React.cloneElement(icon, {
	      fontSize: icon.props.fontSize === undefined && size === "small" ? size : icon.props.fontSize
	    }),
	    checkedIcon: /*#__PURE__*/React.cloneElement(indeterminateIcon, {
	      fontSize: indeterminateIcon.props.fontSize === undefined && size === "small" ? size : indeterminateIcon.props.fontSize
	    }),
	    ref: ref
	  }, other));
	});
	process.env.NODE_ENV !== "production" ? Checkbox.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * If `true`, the component is checked.
	   */
	  checked: propTypes.bool,

	  /**
	   * The icon to display when the component is checked.
	   */
	  checkedIcon: propTypes.node,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object,

	  /**
	   * The color of the component. It supports those theme colors that make sense for this component.
	   */
	  color: propTypes.oneOf(['default', 'primary', 'secondary']),

	  /**
	   * If `true`, the checkbox will be disabled.
	   */
	  disabled: propTypes.bool,

	  /**
	   * If `true`, the ripple effect will be disabled.
	   */
	  disableRipple: propTypes.bool,

	  /**
	   * The icon to display when the component is unchecked.
	   */
	  icon: propTypes.node,

	  /**
	   * The id of the `input` element.
	   */
	  id: propTypes.string,

	  /**
	   * If `true`, the component appears indeterminate.
	   * This does not set the native input element to indeterminate due
	   * to inconsistent behavior across browsers.
	   * However, we set a `data-indeterminate` attribute on the input.
	   */
	  indeterminate: propTypes.bool,

	  /**
	   * The icon to display when the component is indeterminate.
	   */
	  indeterminateIcon: propTypes.node,

	  /**
	   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
	   */
	  inputProps: propTypes.object,

	  /**
	   * Pass a ref to the `input` element.
	   */
	  inputRef: refType,

	  /**
	   * Callback fired when the state is changed.
	   *
	   * @param {object} event The event source of the callback.
	   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
	   */
	  onChange: propTypes.func,

	  /**
	   * If `true`, the `input` element will be required.
	   */
	  required: propTypes.bool,

	  /**
	   * The size of the checkbox.
	   * `small` is equivalent to the dense checkbox styling.
	   */
	  size: propTypes.oneOf(['medium', 'small']),

	  /**
	   * The value of the component. The DOM API casts this to a string.
	   * The browser uses "on" as the default value.
	   */
	  value: propTypes.any
	} : void 0;
	var Checkbox$1 = withStyles$1(styles$a, {
	  name: 'MuiCheckbox'
	})(Checkbox);

	var SIZE = 44;

	function getRelativeValue(value, min, max) {
	  return (Math.min(Math.max(min, value), max) - min) / (max - min);
	}

	function easeOut(t) {
	  t = getRelativeValue(t, 0, 1); // https://gist.github.com/gre/1650294

	  t = (t -= 1) * t * t + 1;
	  return t;
	}

	function easeIn(t) {
	  return t * t;
	}

	var styles$b = function styles(theme) {
	  return {
	    /* Styles applied to the root element. */
	    root: {
	      display: 'inline-block'
	    },

	    /* Styles applied to the root element if `variant="static"`. */
	    static: {
	      transition: theme.transitions.create('transform')
	    },

	    /* Styles applied to the root element if `variant="indeterminate"`. */
	    indeterminate: {
	      animation: '$circular-rotate 1.4s linear infinite'
	    },

	    /* Styles applied to the root element if `color="primary"`. */
	    colorPrimary: {
	      color: theme.palette.primary.main
	    },

	    /* Styles applied to the root element if `color="secondary"`. */
	    colorSecondary: {
	      color: theme.palette.secondary.main
	    },

	    /* Styles applied to the `svg` element. */
	    svg: {
	      display: 'block' // Keeps the progress centered

	    },

	    /* Styles applied to the `circle` svg path. */
	    circle: {
	      stroke: 'currentColor' // Use butt to follow the specification, by chance, it's already the default CSS value.
	      // strokeLinecap: 'butt',

	    },

	    /* Styles applied to the `circle` svg path if `variant="static"`. */
	    circleStatic: {
	      transition: theme.transitions.create('stroke-dashoffset')
	    },

	    /* Styles applied to the `circle` svg path if `variant="indeterminate"`. */
	    circleIndeterminate: {
	      animation: '$circular-dash 1.4s ease-in-out infinite',
	      // Some default value that looks fine waiting for the animation to kicks in.
	      strokeDasharray: '80px, 200px',
	      strokeDashoffset: '0px' // Add the unit to fix a Edge 16 and below bug.

	    },
	    '@keyframes circular-rotate': {
	      '0%': {
	        // Fix IE 11 wobbly
	        transformOrigin: '50% 50%'
	      },
	      '100%': {
	        transform: 'rotate(360deg)'
	      }
	    },
	    '@keyframes circular-dash': {
	      '0%': {
	        strokeDasharray: '1px, 200px',
	        strokeDashoffset: '0px'
	      },
	      '50%': {
	        strokeDasharray: '100px, 200px',
	        strokeDashoffset: '-15px'
	      },
	      '100%': {
	        strokeDasharray: '100px, 200px',
	        strokeDashoffset: '-125px'
	      }
	    },

	    /* Styles applied to the `circle` svg path if `disableShrink={true}`. */
	    circleDisableShrink: {
	      animation: 'none'
	    }
	  };
	};
	/**
	 * ## ARIA
	 *
	 * If the progress bar is describing the loading progress of a particular region of a page,
	 * you should use `aria-describedby` to point to the progress bar, and set the `aria-busy`
	 * attribute to `true` on that region until it has finished loading.
	 */

	var CircularProgress = /*#__PURE__*/React.forwardRef(function CircularProgress(props, ref) {
	  var classes = props.classes,
	      className = props.className,
	      _props$color = props.color,
	      color = _props$color === void 0 ? 'primary' : _props$color,
	      _props$disableShrink = props.disableShrink,
	      disableShrink = _props$disableShrink === void 0 ? false : _props$disableShrink,
	      _props$size = props.size,
	      size = _props$size === void 0 ? 40 : _props$size,
	      style = props.style,
	      _props$thickness = props.thickness,
	      thickness = _props$thickness === void 0 ? 3.6 : _props$thickness,
	      _props$value = props.value,
	      value = _props$value === void 0 ? 0 : _props$value,
	      _props$variant = props.variant,
	      variant = _props$variant === void 0 ? 'indeterminate' : _props$variant,
	      other = _objectWithoutProperties(props, ["classes", "className", "color", "disableShrink", "size", "style", "thickness", "value", "variant"]);

	  var circleStyle = {};
	  var rootStyle = {};
	  var rootProps = {};

	  if (variant === 'determinate' || variant === 'static') {
	    var circumference = 2 * Math.PI * ((SIZE - thickness) / 2);
	    circleStyle.strokeDasharray = circumference.toFixed(3);
	    rootProps['aria-valuenow'] = Math.round(value);

	    if (variant === 'static') {
	      circleStyle.strokeDashoffset = "".concat(((100 - value) / 100 * circumference).toFixed(3), "px");
	      rootStyle.transform = 'rotate(-90deg)';
	    } else {
	      circleStyle.strokeDashoffset = "".concat((easeIn((100 - value) / 100) * circumference).toFixed(3), "px");
	      rootStyle.transform = "rotate(".concat((easeOut(value / 70) * 270).toFixed(3), "deg)");
	    }
	  }

	  return /*#__PURE__*/React.createElement("div", _extends({
	    className: clsx(classes.root, className, color !== 'inherit' && classes["color".concat(capitalize(color))], {
	      'indeterminate': classes.indeterminate,
	      'static': classes.static
	    }[variant]),
	    style: _extends({
	      width: size,
	      height: size
	    }, rootStyle, style),
	    ref: ref,
	    role: "progressbar"
	  }, rootProps, other), /*#__PURE__*/React.createElement("svg", {
	    className: classes.svg,
	    viewBox: "".concat(SIZE / 2, " ").concat(SIZE / 2, " ").concat(SIZE, " ").concat(SIZE)
	  }, /*#__PURE__*/React.createElement("circle", {
	    className: clsx(classes.circle, disableShrink && classes.circleDisableShrink, {
	      'indeterminate': classes.circleIndeterminate,
	      'static': classes.circleStatic
	    }[variant]),
	    style: circleStyle,
	    cx: SIZE,
	    cy: SIZE,
	    r: (SIZE - thickness) / 2,
	    fill: "none",
	    strokeWidth: thickness
	  })));
	});
	process.env.NODE_ENV !== "production" ? CircularProgress.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.string,

	  /**
	   * The color of the component. It supports those theme colors that make sense for this component.
	   */
	  color: propTypes.oneOf(['inherit', 'primary', 'secondary']),

	  /**
	   * If `true`, the shrink animation is disabled.
	   * This only works if variant is `indeterminate`.
	   */
	  disableShrink: chainPropTypes(propTypes.bool, function (props) {
	    if (props.disableShrink && props.variant && props.variant !== 'indeterminate') {
	      return new Error('Material-UI: You have provided the `disableShrink` prop ' + 'with a variant other than `indeterminate`. This will have no effect.');
	    }

	    return null;
	  }),

	  /**
	   * The size of the circle.
	   * If using a number, the pixel unit is assumed.
	   * If using a string, you need to provide the CSS unit, e.g '3rem'.
	   */
	  size: propTypes.oneOfType([propTypes.number, propTypes.string]),

	  /**
	   * @ignore
	   */
	  style: propTypes.object,

	  /**
	   * The thickness of the circle.
	   */
	  thickness: propTypes.number,

	  /**
	   * The value of the progress indicator for the determinate and static variants.
	   * Value between 0 and 100.
	   */
	  value: propTypes.number,

	  /**
	   * The variant to use.
	   * Use indeterminate when there is no progress value.
	   */
	  variant: propTypes.oneOf(['determinate', 'indeterminate', 'static'])
	} : void 0;
	var CircularProgress$1 = withStyles$1(styles$b, {
	  name: 'MuiCircularProgress',
	  flip: false
	})(CircularProgress);

	var styles$c = function styles(theme) {
	  return {
	    /* Styles applied to the container element. */
	    container: {
	      height: 0,
	      overflow: 'hidden',
	      transition: theme.transitions.create('height')
	    },

	    /* Styles applied to the container element when the transition has entered. */
	    entered: {
	      height: 'auto',
	      overflow: 'visible'
	    },

	    /* Styles applied to the container element when the transition has exited and `collapsedHeight` != 0px. */
	    hidden: {
	      visibility: 'hidden'
	    },

	    /* Styles applied to the outer wrapper element. */
	    wrapper: {
	      // Hack to get children with a negative margin to not falsify the height computation.
	      display: 'flex'
	    },

	    /* Styles applied to the inner wrapper element. */
	    wrapperInner: {
	      width: '100%'
	    }
	  };
	};
	/**
	 * The Collapse transition is used by the
	 * [Vertical Stepper](/components/steppers/#vertical-stepper) StepContent component.
	 * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
	 */

	var Collapse = /*#__PURE__*/React.forwardRef(function Collapse(props, ref) {
	  var children = props.children,
	      classes = props.classes,
	      className = props.className,
	      _props$collapsedHeigh = props.collapsedHeight,
	      collapsedHeightProp = _props$collapsedHeigh === void 0 ? '0px' : _props$collapsedHeigh,
	      _props$component = props.component,
	      Component = _props$component === void 0 ? 'div' : _props$component,
	      _props$disableStrictM = props.disableStrictModeCompat,
	      disableStrictModeCompat = _props$disableStrictM === void 0 ? false : _props$disableStrictM,
	      inProp = props.in,
	      onEnter = props.onEnter,
	      onEntered = props.onEntered,
	      onEntering = props.onEntering,
	      onExit = props.onExit,
	      onExited = props.onExited,
	      onExiting = props.onExiting,
	      style = props.style,
	      _props$timeout = props.timeout,
	      timeout = _props$timeout === void 0 ? duration.standard : _props$timeout,
	      _props$TransitionComp = props.TransitionComponent,
	      TransitionComponent = _props$TransitionComp === void 0 ? Transition : _props$TransitionComp,
	      other = _objectWithoutProperties(props, ["children", "classes", "className", "collapsedHeight", "component", "disableStrictModeCompat", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"]);

	  var theme = useTheme$1();
	  var timer = React.useRef();
	  var wrapperRef = React.useRef(null);
	  var autoTransitionDuration = React.useRef();
	  var collapsedHeight = typeof collapsedHeightProp === 'number' ? "".concat(collapsedHeightProp, "px") : collapsedHeightProp;
	  React.useEffect(function () {
	    return function () {
	      clearTimeout(timer.current);
	    };
	  }, []);
	  var enableStrictModeCompat = theme.unstable_strictMode && !disableStrictModeCompat;
	  var nodeRef = React.useRef(null);
	  var handleRef = useForkRef(ref, enableStrictModeCompat ? nodeRef : undefined);

	  var normalizedTransitionCallback = function normalizedTransitionCallback(callback) {
	    return function (nodeOrAppearing, maybeAppearing) {
	      if (callback) {
	        var _ref = enableStrictModeCompat ? [nodeRef.current, nodeOrAppearing] : [nodeOrAppearing, maybeAppearing],
	            _ref2 = _slicedToArray(_ref, 2),
	            node = _ref2[0],
	            isAppearing = _ref2[1]; // onEnterXxx and onExitXxx callbacks have a different arguments.length value.


	        if (isAppearing === undefined) {
	          callback(node);
	        } else {
	          callback(node, isAppearing);
	        }
	      }
	    };
	  };

	  var handleEnter = normalizedTransitionCallback(function (node, isAppearing) {
	    node.style.height = collapsedHeight;

	    if (onEnter) {
	      onEnter(node, isAppearing);
	    }
	  });
	  var handleEntering = normalizedTransitionCallback(function (node, isAppearing) {
	    var wrapperHeight = wrapperRef.current ? wrapperRef.current.clientHeight : 0;

	    var _getTransitionProps = getTransitionProps({
	      style: style,
	      timeout: timeout
	    }, {
	      mode: 'enter'
	    }),
	        transitionDuration = _getTransitionProps.duration;

	    if (timeout === 'auto') {
	      var duration2 = theme.transitions.getAutoHeightDuration(wrapperHeight);
	      node.style.transitionDuration = "".concat(duration2, "ms");
	      autoTransitionDuration.current = duration2;
	    } else {
	      node.style.transitionDuration = typeof transitionDuration === 'string' ? transitionDuration : "".concat(transitionDuration, "ms");
	    }

	    node.style.height = "".concat(wrapperHeight, "px");

	    if (onEntering) {
	      onEntering(node, isAppearing);
	    }
	  });
	  var handleEntered = normalizedTransitionCallback(function (node, isAppearing) {
	    node.style.height = 'auto';

	    if (onEntered) {
	      onEntered(node, isAppearing);
	    }
	  });
	  var handleExit = normalizedTransitionCallback(function (node) {
	    var wrapperHeight = wrapperRef.current ? wrapperRef.current.clientHeight : 0;
	    node.style.height = "".concat(wrapperHeight, "px");

	    if (onExit) {
	      onExit(node);
	    }
	  });
	  var handleExited = normalizedTransitionCallback(onExited);
	  var handleExiting = normalizedTransitionCallback(function (node) {
	    var wrapperHeight = wrapperRef.current ? wrapperRef.current.clientHeight : 0;

	    var _getTransitionProps2 = getTransitionProps({
	      style: style,
	      timeout: timeout
	    }, {
	      mode: 'exit'
	    }),
	        transitionDuration = _getTransitionProps2.duration;

	    if (timeout === 'auto') {
	      var duration2 = theme.transitions.getAutoHeightDuration(wrapperHeight);
	      node.style.transitionDuration = "".concat(duration2, "ms");
	      autoTransitionDuration.current = duration2;
	    } else {
	      node.style.transitionDuration = typeof transitionDuration === 'string' ? transitionDuration : "".concat(transitionDuration, "ms");
	    }

	    node.style.height = collapsedHeight;

	    if (onExiting) {
	      onExiting(node);
	    }
	  });

	  var addEndListener = function addEndListener(nodeOrNext, maybeNext) {
	    var next = enableStrictModeCompat ? nodeOrNext : maybeNext;

	    if (timeout === 'auto') {
	      timer.current = setTimeout(next, autoTransitionDuration.current || 0);
	    }
	  };

	  return /*#__PURE__*/React.createElement(TransitionComponent, _extends({
	    in: inProp,
	    onEnter: handleEnter,
	    onEntered: handleEntered,
	    onEntering: handleEntering,
	    onExit: handleExit,
	    onExited: handleExited,
	    onExiting: handleExiting,
	    addEndListener: addEndListener,
	    nodeRef: enableStrictModeCompat ? nodeRef : undefined,
	    timeout: timeout === 'auto' ? null : timeout
	  }, other), function (state, childProps) {
	    return /*#__PURE__*/React.createElement(Component, _extends({
	      className: clsx(classes.container, className, {
	        'entered': classes.entered,
	        'exited': !inProp && collapsedHeight === '0px' && classes.hidden
	      }[state]),
	      style: _extends({
	        minHeight: collapsedHeight
	      }, style),
	      ref: handleRef
	    }, childProps), /*#__PURE__*/React.createElement("div", {
	      className: classes.wrapper,
	      ref: wrapperRef
	    }, /*#__PURE__*/React.createElement("div", {
	      className: classes.wrapperInner
	    }, children)));
	  });
	});
	process.env.NODE_ENV !== "production" ? Collapse.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content node to be collapsed.
	   */
	  children: propTypes.node,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.string,

	  /**
	   * The height of the container when collapsed.
	   */
	  collapsedHeight: propTypes.oneOfType([propTypes.number, propTypes.string]),

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes
	  /* @typescript-to-proptypes-ignore */
	  .elementType,

	  /**
	   * Enable this prop if you encounter 'Function components cannot be given refs',
	   * use `unstable_createStrictModeTheme`,
	   * and can't forward the ref in the passed `Component`.
	   */
	  disableStrictModeCompat: propTypes.bool,

	  /**
	   * If `true`, the component will transition in.
	   */
	  in: propTypes.bool,

	  /**
	   * @ignore
	   */
	  onEnter: propTypes.func,

	  /**
	   * @ignore
	   */
	  onEntered: propTypes.func,

	  /**
	   * @ignore
	   */
	  onEntering: propTypes.func,

	  /**
	   * @ignore
	   */
	  onExit: propTypes.func,

	  /**
	   * @ignore
	   */
	  onExited: propTypes.func,

	  /**
	   * @ignore
	   */
	  onExiting: propTypes.func,

	  /**
	   * @ignore
	   */
	  style: propTypes.object,

	  /**
	   * The duration for the transition, in milliseconds.
	   * You may specify a single timeout for all transitions, or individually with an object.
	   *
	   * Set to 'auto' to automatically calculate transition time based on height.
	   */
	  timeout: propTypes.oneOfType([propTypes.oneOf(['auto']), propTypes.number, propTypes.shape({
	    appear: propTypes.number,
	    enter: propTypes.number,
	    exit: propTypes.number
	  })])
	} : void 0;
	Collapse.muiSupportAuto = true;
	var Collapse$1 = withStyles$1(styles$c, {
	  name: 'MuiCollapse'
	})(Collapse);

	var styles$d = function styles(theme) {
	  return {
	    /* Styles applied to the root element. */
	    root: _defineProperty({
	      width: '100%',
	      marginLeft: 'auto',
	      boxSizing: 'border-box',
	      marginRight: 'auto',
	      paddingLeft: theme.spacing(2),
	      paddingRight: theme.spacing(2),
	      display: 'block'
	    }, theme.breakpoints.up('sm'), {
	      paddingLeft: theme.spacing(3),
	      paddingRight: theme.spacing(3)
	    }),

	    /* Styles applied to the root element if `disableGutters={true}`. */
	    disableGutters: {
	      paddingLeft: 0,
	      paddingRight: 0
	    },

	    /* Styles applied to the root element if `fixed={true}`. */
	    fixed: Object.keys(theme.breakpoints.values).reduce(function (acc, breakpoint) {
	      var value = theme.breakpoints.values[breakpoint];

	      if (value !== 0) {
	        acc[theme.breakpoints.up(breakpoint)] = {
	          maxWidth: value
	        };
	      }

	      return acc;
	    }, {}),

	    /* Styles applied to the root element if `maxWidth="xs"`. */
	    maxWidthXs: _defineProperty({}, theme.breakpoints.up('xs'), {
	      maxWidth: Math.max(theme.breakpoints.values.xs, 444)
	    }),

	    /* Styles applied to the root element if `maxWidth="sm"`. */
	    maxWidthSm: _defineProperty({}, theme.breakpoints.up('sm'), {
	      maxWidth: theme.breakpoints.values.sm
	    }),

	    /* Styles applied to the root element if `maxWidth="md"`. */
	    maxWidthMd: _defineProperty({}, theme.breakpoints.up('md'), {
	      maxWidth: theme.breakpoints.values.md
	    }),

	    /* Styles applied to the root element if `maxWidth="lg"`. */
	    maxWidthLg: _defineProperty({}, theme.breakpoints.up('lg'), {
	      maxWidth: theme.breakpoints.values.lg
	    }),

	    /* Styles applied to the root element if `maxWidth="xl"`. */
	    maxWidthXl: _defineProperty({}, theme.breakpoints.up('xl'), {
	      maxWidth: theme.breakpoints.values.xl
	    })
	  };
	};
	var Container = /*#__PURE__*/React.forwardRef(function Container(props, ref) {
	  var classes = props.classes,
	      className = props.className,
	      _props$component = props.component,
	      Component = _props$component === void 0 ? 'div' : _props$component,
	      _props$disableGutters = props.disableGutters,
	      disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters,
	      _props$fixed = props.fixed,
	      fixed = _props$fixed === void 0 ? false : _props$fixed,
	      _props$maxWidth = props.maxWidth,
	      maxWidth = _props$maxWidth === void 0 ? 'lg' : _props$maxWidth,
	      other = _objectWithoutProperties(props, ["classes", "className", "component", "disableGutters", "fixed", "maxWidth"]);

	  return /*#__PURE__*/React.createElement(Component, _extends({
	    className: clsx(classes.root, className, fixed && classes.fixed, disableGutters && classes.disableGutters, maxWidth !== false && classes["maxWidth".concat(capitalize(String(maxWidth)))]),
	    ref: ref
	  }, other));
	});
	process.env.NODE_ENV !== "production" ? Container.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * @ignore
	   */
	  children: propTypes
	  /* @typescript-to-proptypes-ignore */
	  .node.isRequired,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes
	  /* @typescript-to-proptypes-ignore */
	  .elementType,

	  /**
	   * If `true`, the left and right padding is removed.
	   */
	  disableGutters: propTypes.bool,

	  /**
	   * Set the max-width to match the min-width of the current breakpoint.
	   * This is useful if you'd prefer to design for a fixed set of sizes
	   * instead of trying to accommodate a fully fluid viewport.
	   * It's fluid by default.
	   */
	  fixed: propTypes.bool,

	  /**
	   * Determine the max-width of the container.
	   * The container width grows with the size of the screen.
	   * Set to `false` to disable `maxWidth`.
	   */
	  maxWidth: propTypes.oneOf(['lg', 'md', 'sm', 'xl', 'xs', false])
	} : void 0;
	var Container$1 = withStyles$1(styles$d, {
	  name: 'MuiContainer'
	})(Container);

	function getContainer(container) {
	  container = typeof container === 'function' ? container() : container; // #StrictMode ready

	  return ReactDOM.findDOMNode(container);
	}

	var useEnhancedEffect$2 = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;
	/**
	 * Portals provide a first-class way to render children into a DOM node
	 * that exists outside the DOM hierarchy of the parent component.
	 */

	var Portal$1 = /*#__PURE__*/React.forwardRef(function Portal(props, ref) {
	  var children = props.children,
	      container = props.container,
	      _props$disablePortal = props.disablePortal,
	      disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal,
	      onRendered = props.onRendered;

	  var _React$useState = React.useState(null),
	      mountNode = _React$useState[0],
	      setMountNode = _React$useState[1];

	  var handleRef = useForkRef( /*#__PURE__*/React.isValidElement(children) ? children.ref : null, ref);
	  useEnhancedEffect$2(function () {
	    if (!disablePortal) {
	      setMountNode(getContainer(container) || document.body);
	    }
	  }, [container, disablePortal]);
	  useEnhancedEffect$2(function () {
	    if (mountNode && !disablePortal) {
	      setRef(ref, mountNode);
	      return function () {
	        setRef(ref, null);
	      };
	    }

	    return undefined;
	  }, [ref, mountNode, disablePortal]);
	  useEnhancedEffect$2(function () {
	    if (onRendered && (mountNode || disablePortal)) {
	      onRendered();
	    }
	  }, [onRendered, mountNode, disablePortal]);

	  if (disablePortal) {
	    if ( /*#__PURE__*/React.isValidElement(children)) {
	      return /*#__PURE__*/React.cloneElement(children, {
	        ref: handleRef
	      });
	    }

	    return children;
	  }

	  return mountNode ? /*#__PURE__*/ReactDOM.createPortal(children, mountNode) : mountNode;
	});
	process.env.NODE_ENV !== "production" ? Portal$1.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The children to render into the `container`.
	   */
	  children: propTypes.node,

	  /**
	   * A HTML element, component instance, or function that returns either.
	   * The `container` will have the portal children appended to it.
	   *
	   * By default, it uses the body of the top-level document object,
	   * so it's simply `document.body` most of the time.
	   */
	  container: propTypes
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([HTMLElementType, propTypes.instanceOf(React.Component), propTypes.func]),

	  /**
	   * Disable the portal behavior.
	   * The children stay within it's parent DOM hierarchy.
	   */
	  disablePortal: propTypes.bool,

	  /**
	   * Callback fired once the children has been mounted into the `container`.
	   *
	   * This prop will be deprecated and removed in v5, the ref can be used instead.
	   */
	  onRendered: propTypes.func
	} : void 0;

	if (process.env.NODE_ENV !== 'production') {
	  // eslint-disable-next-line
	  Portal$1['propTypes' + ''] = exactProp(Portal$1.propTypes);
	}

	// A change of the browser zoom change the scrollbar size.
	// Credit https://github.com/twbs/bootstrap/blob/3ffe3a5d82f6f561b82ff78d82b32a7d14aed558/js/src/modal.js#L512-L519
	function getScrollbarSize() {
	  var scrollDiv = document.createElement('div');
	  scrollDiv.style.width = '99px';
	  scrollDiv.style.height = '99px';
	  scrollDiv.style.position = 'absolute';
	  scrollDiv.style.top = '-9999px';
	  scrollDiv.style.overflow = 'scroll';
	  document.body.appendChild(scrollDiv);
	  var scrollbarSize = scrollDiv.offsetWidth - scrollDiv.clientWidth;
	  document.body.removeChild(scrollDiv);
	  return scrollbarSize;
	}

	function isOverflowing(container) {
	  var doc = ownerDocument(container);

	  if (doc.body === container) {
	    return ownerWindow(doc).innerWidth > doc.documentElement.clientWidth;
	  }

	  return container.scrollHeight > container.clientHeight;
	}

	function ariaHidden(node, show) {
	  if (show) {
	    node.setAttribute('aria-hidden', 'true');
	  } else {
	    node.removeAttribute('aria-hidden');
	  }
	}

	function getPaddingRight(node) {
	  return parseInt(window.getComputedStyle(node)['padding-right'], 10) || 0;
	}

	function ariaHiddenSiblings(container, mountNode, currentNode) {
	  var nodesToExclude = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];
	  var show = arguments.length > 4 ? arguments[4] : undefined;
	  var blacklist = [mountNode, currentNode].concat(_toConsumableArray(nodesToExclude));
	  var blacklistTagNames = ['TEMPLATE', 'SCRIPT', 'STYLE'];
	  [].forEach.call(container.children, function (node) {
	    if (node.nodeType === 1 && blacklist.indexOf(node) === -1 && blacklistTagNames.indexOf(node.tagName) === -1) {
	      ariaHidden(node, show);
	    }
	  });
	}

	function findIndexOf(containerInfo, callback) {
	  var idx = -1;
	  containerInfo.some(function (item, index) {
	    if (callback(item)) {
	      idx = index;
	      return true;
	    }

	    return false;
	  });
	  return idx;
	}

	function handleContainer(containerInfo, props) {
	  var restoreStyle = [];
	  var restorePaddings = [];
	  var container = containerInfo.container;
	  var fixedNodes;

	  if (!props.disableScrollLock) {
	    if (isOverflowing(container)) {
	      // Compute the size before applying overflow hidden to avoid any scroll jumps.
	      var scrollbarSize = getScrollbarSize();
	      restoreStyle.push({
	        value: container.style.paddingRight,
	        key: 'padding-right',
	        el: container
	      }); // Use computed style, here to get the real padding to add our scrollbar width.

	      container.style['padding-right'] = "".concat(getPaddingRight(container) + scrollbarSize, "px"); // .mui-fixed is a global helper.

	      fixedNodes = ownerDocument(container).querySelectorAll('.mui-fixed');
	      [].forEach.call(fixedNodes, function (node) {
	        restorePaddings.push(node.style.paddingRight);
	        node.style.paddingRight = "".concat(getPaddingRight(node) + scrollbarSize, "px");
	      });
	    } // Improve Gatsby support
	    // https://css-tricks.com/snippets/css/force-vertical-scrollbar/


	    var parent = container.parentElement;
	    var scrollContainer = parent.nodeName === 'HTML' && window.getComputedStyle(parent)['overflow-y'] === 'scroll' ? parent : container; // Block the scroll even if no scrollbar is visible to account for mobile keyboard
	    // screensize shrink.

	    restoreStyle.push({
	      value: scrollContainer.style.overflow,
	      key: 'overflow',
	      el: scrollContainer
	    });
	    scrollContainer.style.overflow = 'hidden';
	  }

	  var restore = function restore() {
	    if (fixedNodes) {
	      [].forEach.call(fixedNodes, function (node, i) {
	        if (restorePaddings[i]) {
	          node.style.paddingRight = restorePaddings[i];
	        } else {
	          node.style.removeProperty('padding-right');
	        }
	      });
	    }

	    restoreStyle.forEach(function (_ref) {
	      var value = _ref.value,
	          el = _ref.el,
	          key = _ref.key;

	      if (value) {
	        el.style.setProperty(key, value);
	      } else {
	        el.style.removeProperty(key);
	      }
	    });
	  };

	  return restore;
	}

	function getHiddenSiblings(container) {
	  var hiddenSiblings = [];
	  [].forEach.call(container.children, function (node) {
	    if (node.getAttribute && node.getAttribute('aria-hidden') === 'true') {
	      hiddenSiblings.push(node);
	    }
	  });
	  return hiddenSiblings;
	}
	/**
	 * @ignore - do not document.
	 *
	 * Proper state management for containers and the modals in those containers.
	 * Simplified, but inspired by react-overlay's ModalManager class.
	 * Used by the Modal to ensure proper styling of containers.
	 */


	var ModalManager = /*#__PURE__*/function () {
	  function ModalManager() {
	    _classCallCheck(this, ModalManager);

	    // this.modals[modalIndex] = modal
	    this.modals = []; // this.containers[containerIndex] = {
	    //   modals: [],
	    //   container,
	    //   restore: null,
	    // }

	    this.containers = [];
	  }

	  _createClass(ModalManager, [{
	    key: "add",
	    value: function add(modal, container) {
	      var modalIndex = this.modals.indexOf(modal);

	      if (modalIndex !== -1) {
	        return modalIndex;
	      }

	      modalIndex = this.modals.length;
	      this.modals.push(modal); // If the modal we are adding is already in the DOM.

	      if (modal.modalRef) {
	        ariaHidden(modal.modalRef, false);
	      }

	      var hiddenSiblingNodes = getHiddenSiblings(container);
	      ariaHiddenSiblings(container, modal.mountNode, modal.modalRef, hiddenSiblingNodes, true);
	      var containerIndex = findIndexOf(this.containers, function (item) {
	        return item.container === container;
	      });

	      if (containerIndex !== -1) {
	        this.containers[containerIndex].modals.push(modal);
	        return modalIndex;
	      }

	      this.containers.push({
	        modals: [modal],
	        container: container,
	        restore: null,
	        hiddenSiblingNodes: hiddenSiblingNodes
	      });
	      return modalIndex;
	    }
	  }, {
	    key: "mount",
	    value: function mount(modal, props) {
	      var containerIndex = findIndexOf(this.containers, function (item) {
	        return item.modals.indexOf(modal) !== -1;
	      });
	      var containerInfo = this.containers[containerIndex];

	      if (!containerInfo.restore) {
	        containerInfo.restore = handleContainer(containerInfo, props);
	      }
	    }
	  }, {
	    key: "remove",
	    value: function remove(modal) {
	      var modalIndex = this.modals.indexOf(modal);

	      if (modalIndex === -1) {
	        return modalIndex;
	      }

	      var containerIndex = findIndexOf(this.containers, function (item) {
	        return item.modals.indexOf(modal) !== -1;
	      });
	      var containerInfo = this.containers[containerIndex];
	      containerInfo.modals.splice(containerInfo.modals.indexOf(modal), 1);
	      this.modals.splice(modalIndex, 1); // If that was the last modal in a container, clean up the container.

	      if (containerInfo.modals.length === 0) {
	        // The modal might be closed before it had the chance to be mounted in the DOM.
	        if (containerInfo.restore) {
	          containerInfo.restore();
	        }

	        if (modal.modalRef) {
	          // In case the modal wasn't in the DOM yet.
	          ariaHidden(modal.modalRef, true);
	        }

	        ariaHiddenSiblings(containerInfo.container, modal.mountNode, modal.modalRef, containerInfo.hiddenSiblingNodes, false);
	        this.containers.splice(containerIndex, 1);
	      } else {
	        // Otherwise make sure the next top modal is visible to a screen reader.
	        var nextTop = containerInfo.modals[containerInfo.modals.length - 1]; // as soon as a modal is adding its modalRef is undefined. it can't set
	        // aria-hidden because the dom element doesn't exist either
	        // when modal was unmounted before modalRef gets null

	        if (nextTop.modalRef) {
	          ariaHidden(nextTop.modalRef, false);
	        }
	      }

	      return modalIndex;
	    }
	  }, {
	    key: "isTopModal",
	    value: function isTopModal(modal) {
	      return this.modals.length > 0 && this.modals[this.modals.length - 1] === modal;
	    }
	  }]);

	  return ModalManager;
	}();

	/* eslint-disable consistent-return, jsx-a11y/no-noninteractive-tabindex, camelcase */
	/**
	 * Utility component that locks focus inside the component.
	 */

	function Unstable_TrapFocus(props) {
	  var children = props.children,
	      _props$disableAutoFoc = props.disableAutoFocus,
	      disableAutoFocus = _props$disableAutoFoc === void 0 ? false : _props$disableAutoFoc,
	      _props$disableEnforce = props.disableEnforceFocus,
	      disableEnforceFocus = _props$disableEnforce === void 0 ? false : _props$disableEnforce,
	      _props$disableRestore = props.disableRestoreFocus,
	      disableRestoreFocus = _props$disableRestore === void 0 ? false : _props$disableRestore,
	      getDoc = props.getDoc,
	      isEnabled = props.isEnabled,
	      open = props.open;
	  var ignoreNextEnforceFocus = React.useRef();
	  var sentinelStart = React.useRef(null);
	  var sentinelEnd = React.useRef(null);
	  var nodeToRestore = React.useRef();
	  var rootRef = React.useRef(null); // can be removed once we drop support for non ref forwarding class components

	  var handleOwnRef = React.useCallback(function (instance) {
	    // #StrictMode ready
	    rootRef.current = ReactDOM.findDOMNode(instance);
	  }, []);
	  var handleRef = useForkRef(children.ref, handleOwnRef);
	  var prevOpenRef = React.useRef();
	  React.useEffect(function () {
	    prevOpenRef.current = open;
	  }, [open]);

	  if (!prevOpenRef.current && open && typeof window !== 'undefined') {
	    // WARNING: Potentially unsafe in concurrent mode.
	    // The way the read on `nodeToRestore` is setup could make this actually safe.
	    // Say we render `open={false}` -> `open={true}` but never commit.
	    // We have now written a state that wasn't committed. But no committed effect
	    // will read this wrong value. We only read from `nodeToRestore` in effects
	    // that were committed on `open={true}`
	    // WARNING: Prevents the instance from being garbage collected. Should only
	    // hold a weak ref.
	    nodeToRestore.current = getDoc().activeElement;
	  }

	  React.useEffect(function () {
	    if (!open) {
	      return;
	    }

	    var doc = ownerDocument(rootRef.current); // We might render an empty child.

	    if (!disableAutoFocus && rootRef.current && !rootRef.current.contains(doc.activeElement)) {
	      if (!rootRef.current.hasAttribute('tabIndex')) {
	        if (process.env.NODE_ENV !== 'production') {
	          console.error(['Material-UI: The modal content node does not accept focus.', 'For the benefit of assistive technologies, ' + 'the tabIndex of the node is being set to "-1".'].join('\n'));
	        }

	        rootRef.current.setAttribute('tabIndex', -1);
	      }

	      rootRef.current.focus();
	    }

	    var contain = function contain() {
	      if (!doc.hasFocus() || disableEnforceFocus || !isEnabled() || ignoreNextEnforceFocus.current) {
	        ignoreNextEnforceFocus.current = false;
	        return;
	      }

	      if (rootRef.current && !rootRef.current.contains(doc.activeElement)) {
	        rootRef.current.focus();
	      }
	    };

	    var loopFocus = function loopFocus(event) {
	      // 9 = Tab
	      if (disableEnforceFocus || !isEnabled() || event.keyCode !== 9) {
	        return;
	      } // Make sure the next tab starts from the right place.


	      if (doc.activeElement === rootRef.current) {
	        // We need to ignore the next contain as
	        // it will try to move the focus back to the rootRef element.
	        ignoreNextEnforceFocus.current = true;

	        if (event.shiftKey) {
	          sentinelEnd.current.focus();
	        } else {
	          sentinelStart.current.focus();
	        }
	      }
	    };

	    doc.addEventListener('focus', contain, true);
	    doc.addEventListener('keydown', loopFocus, true); // With Edge, Safari and Firefox, no focus related events are fired when the focused area stops being a focused area
	    // e.g. https://bugzilla.mozilla.org/show_bug.cgi?id=559561.
	    //
	    // The whatwg spec defines how the browser should behave but does not explicitly mention any events:
	    // https://html.spec.whatwg.org/multipage/interaction.html#focus-fixup-rule.

	    var interval = setInterval(function () {
	      contain();
	    }, 50);
	    return function () {
	      clearInterval(interval);
	      doc.removeEventListener('focus', contain, true);
	      doc.removeEventListener('keydown', loopFocus, true); // restoreLastFocus()

	      if (!disableRestoreFocus) {
	        // In IE 11 it is possible for document.activeElement to be null resulting
	        // in nodeToRestore.current being null.
	        // Not all elements in IE 11 have a focus method.
	        // Once IE 11 support is dropped the focus() call can be unconditional.
	        if (nodeToRestore.current && nodeToRestore.current.focus) {
	          nodeToRestore.current.focus();
	        }

	        nodeToRestore.current = null;
	      }
	    };
	  }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open]);
	  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
	    tabIndex: 0,
	    ref: sentinelStart,
	    "data-test": "sentinelStart"
	  }), /*#__PURE__*/React.cloneElement(children, {
	    ref: handleRef
	  }), /*#__PURE__*/React.createElement("div", {
	    tabIndex: 0,
	    ref: sentinelEnd,
	    "data-test": "sentinelEnd"
	  }));
	}

	process.env.NODE_ENV !== "production" ? Unstable_TrapFocus.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * A single child content element.
	   */
	  children: propTypes.node,

	  /**
	   * If `true`, the trap focus will not automatically shift focus to itself when it opens, and
	   * replace it to the last focused element when it closes.
	   * This also works correctly with any trap focus children that have the `disableAutoFocus` prop.
	   *
	   * Generally this should never be set to `true` as it makes the trap focus less
	   * accessible to assistive technologies, like screen readers.
	   */
	  disableAutoFocus: propTypes.bool,

	  /**
	   * If `true`, the trap focus will not prevent focus from leaving the trap focus while open.
	   *
	   * Generally this should never be set to `true` as it makes the trap focus less
	   * accessible to assistive technologies, like screen readers.
	   */
	  disableEnforceFocus: propTypes.bool,

	  /**
	   * If `true`, the trap focus will not restore focus to previously focused element once
	   * trap focus is hidden.
	   */
	  disableRestoreFocus: propTypes.bool,

	  /**
	   * Return the document to consider.
	   * We use it to implement the restore focus between different browser documents.
	   */
	  getDoc: propTypes.func.isRequired,

	  /**
	   * Do we still want to enforce the focus?
	   * This prop helps nesting TrapFocus elements.
	   */
	  isEnabled: propTypes.func.isRequired,

	  /**
	   * If `true`, focus will be locked.
	   */
	  open: propTypes.bool.isRequired
	} : void 0;

	if (process.env.NODE_ENV !== 'production') {
	  // eslint-disable-next-line
	  Unstable_TrapFocus['propTypes' + ''] = exactProp(Unstable_TrapFocus.propTypes);
	}

	var styles$e = {
	  /* Styles applied to the root element. */
	  root: {
	    zIndex: -1,
	    position: 'fixed',
	    right: 0,
	    bottom: 0,
	    top: 0,
	    left: 0,
	    backgroundColor: 'rgba(0, 0, 0, 0.5)',
	    WebkitTapHighlightColor: 'transparent'
	  },

	  /* Styles applied to the root element if `invisible={true}`. */
	  invisible: {
	    backgroundColor: 'transparent'
	  }
	};
	/**
	 * @ignore - internal component.
	 */

	var SimpleBackdrop = /*#__PURE__*/React.forwardRef(function SimpleBackdrop(props, ref) {
	  var _props$invisible = props.invisible,
	      invisible = _props$invisible === void 0 ? false : _props$invisible,
	      open = props.open,
	      other = _objectWithoutProperties(props, ["invisible", "open"]);

	  return open ? /*#__PURE__*/React.createElement("div", _extends({
	    "aria-hidden": true,
	    ref: ref
	  }, other, {
	    style: _extends({}, styles$e.root, invisible ? styles$e.invisible : {}, other.style)
	  })) : null;
	});
	process.env.NODE_ENV !== "production" ? SimpleBackdrop.propTypes = {
	  /**
	   * If `true`, the backdrop is invisible.
	   * It can be used when rendering a popover or a custom select component.
	   */
	  invisible: propTypes.bool,

	  /**
	   * If `true`, the backdrop is open.
	   */
	  open: propTypes.bool.isRequired
	} : void 0;

	function getContainer$1(container) {
	  container = typeof container === 'function' ? container() : container;
	  return ReactDOM.findDOMNode(container);
	}

	function getHasTransition(props) {
	  return props.children ? props.children.props.hasOwnProperty('in') : false;
	} // A modal manager used to track and manage the state of open Modals.
	// Modals don't open on the server so this won't conflict with concurrent requests.


	var defaultManager = new ModalManager();
	var styles$f = function styles(theme) {
	  return {
	    /* Styles applied to the root element. */
	    root: {
	      position: 'fixed',
	      zIndex: theme.zIndex.modal,
	      right: 0,
	      bottom: 0,
	      top: 0,
	      left: 0
	    },

	    /* Styles applied to the root element if the `Modal` has exited. */
	    hidden: {
	      visibility: 'hidden'
	    }
	  };
	};
	/**
	 * Modal is a lower-level construct that is leveraged by the following components:
	 *
	 * - [Dialog](/api/dialog/)
	 * - [Drawer](/api/drawer/)
	 * - [Menu](/api/menu/)
	 * - [Popover](/api/popover/)
	 *
	 * If you are creating a modal dialog, you probably want to use the [Dialog](/api/dialog/) component
	 * rather than directly using Modal.
	 *
	 * This component shares many concepts with [react-overlays](https://react-bootstrap.github.io/react-overlays/#modals).
	 */

	var Modal = /*#__PURE__*/React.forwardRef(function Modal(inProps, ref) {
	  var theme = useTheme();
	  var props = getThemeProps({
	    name: 'MuiModal',
	    props: _extends({}, inProps),
	    theme: theme
	  });

	  var _props$BackdropCompon = props.BackdropComponent,
	      BackdropComponent = _props$BackdropCompon === void 0 ? SimpleBackdrop : _props$BackdropCompon,
	      BackdropProps = props.BackdropProps,
	      children = props.children,
	      _props$closeAfterTran = props.closeAfterTransition,
	      closeAfterTransition = _props$closeAfterTran === void 0 ? false : _props$closeAfterTran,
	      container = props.container,
	      _props$disableAutoFoc = props.disableAutoFocus,
	      disableAutoFocus = _props$disableAutoFoc === void 0 ? false : _props$disableAutoFoc,
	      _props$disableBackdro = props.disableBackdropClick,
	      disableBackdropClick = _props$disableBackdro === void 0 ? false : _props$disableBackdro,
	      _props$disableEnforce = props.disableEnforceFocus,
	      disableEnforceFocus = _props$disableEnforce === void 0 ? false : _props$disableEnforce,
	      _props$disableEscapeK = props.disableEscapeKeyDown,
	      disableEscapeKeyDown = _props$disableEscapeK === void 0 ? false : _props$disableEscapeK,
	      _props$disablePortal = props.disablePortal,
	      disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal,
	      _props$disableRestore = props.disableRestoreFocus,
	      disableRestoreFocus = _props$disableRestore === void 0 ? false : _props$disableRestore,
	      _props$disableScrollL = props.disableScrollLock,
	      disableScrollLock = _props$disableScrollL === void 0 ? false : _props$disableScrollL,
	      _props$hideBackdrop = props.hideBackdrop,
	      hideBackdrop = _props$hideBackdrop === void 0 ? false : _props$hideBackdrop,
	      _props$keepMounted = props.keepMounted,
	      keepMounted = _props$keepMounted === void 0 ? false : _props$keepMounted,
	      _props$manager = props.manager,
	      manager = _props$manager === void 0 ? defaultManager : _props$manager,
	      onBackdropClick = props.onBackdropClick,
	      onClose = props.onClose,
	      onEscapeKeyDown = props.onEscapeKeyDown,
	      onRendered = props.onRendered,
	      open = props.open,
	      other = _objectWithoutProperties(props, ["BackdropComponent", "BackdropProps", "children", "closeAfterTransition", "container", "disableAutoFocus", "disableBackdropClick", "disableEnforceFocus", "disableEscapeKeyDown", "disablePortal", "disableRestoreFocus", "disableScrollLock", "hideBackdrop", "keepMounted", "manager", "onBackdropClick", "onClose", "onEscapeKeyDown", "onRendered", "open"]);

	  var _React$useState = React.useState(true),
	      exited = _React$useState[0],
	      setExited = _React$useState[1];

	  var modal = React.useRef({});
	  var mountNodeRef = React.useRef(null);
	  var modalRef = React.useRef(null);
	  var handleRef = useForkRef(modalRef, ref);
	  var hasTransition = getHasTransition(props);

	  var getDoc = function getDoc() {
	    return ownerDocument(mountNodeRef.current);
	  };

	  var getModal = function getModal() {
	    modal.current.modalRef = modalRef.current;
	    modal.current.mountNode = mountNodeRef.current;
	    return modal.current;
	  };

	  var handleMounted = function handleMounted() {
	    manager.mount(getModal(), {
	      disableScrollLock: disableScrollLock
	    }); // Fix a bug on Chrome where the scroll isn't initially 0.

	    modalRef.current.scrollTop = 0;
	  };

	  var handleOpen = useEventCallback(function () {
	    var resolvedContainer = getContainer$1(container) || getDoc().body;
	    manager.add(getModal(), resolvedContainer); // The element was already mounted.

	    if (modalRef.current) {
	      handleMounted();
	    }
	  });
	  var isTopModal = React.useCallback(function () {
	    return manager.isTopModal(getModal());
	  }, [manager]);
	  var handlePortalRef = useEventCallback(function (node) {
	    mountNodeRef.current = node;

	    if (!node) {
	      return;
	    }

	    if (onRendered) {
	      onRendered();
	    }

	    if (open && isTopModal()) {
	      handleMounted();
	    } else {
	      ariaHidden(modalRef.current, true);
	    }
	  });
	  var handleClose = React.useCallback(function () {
	    manager.remove(getModal());
	  }, [manager]);
	  React.useEffect(function () {
	    return function () {
	      handleClose();
	    };
	  }, [handleClose]);
	  React.useEffect(function () {
	    if (open) {
	      handleOpen();
	    } else if (!hasTransition || !closeAfterTransition) {
	      handleClose();
	    }
	  }, [open, handleClose, hasTransition, closeAfterTransition, handleOpen]);

	  if (!keepMounted && !open && (!hasTransition || exited)) {
	    return null;
	  }

	  var handleEnter = function handleEnter() {
	    setExited(false);
	  };

	  var handleExited = function handleExited() {
	    setExited(true);

	    if (closeAfterTransition) {
	      handleClose();
	    }
	  };

	  var handleBackdropClick = function handleBackdropClick(event) {
	    if (event.target !== event.currentTarget) {
	      return;
	    }

	    if (onBackdropClick) {
	      onBackdropClick(event);
	    }

	    if (!disableBackdropClick && onClose) {
	      onClose(event, 'backdropClick');
	    }
	  };

	  var handleKeyDown = function handleKeyDown(event) {
	    // The handler doesn't take event.defaultPrevented into account:
	    //
	    // event.preventDefault() is meant to stop default behaviours like
	    // clicking a checkbox to check it, hitting a button to submit a form,
	    // and hitting left arrow to move the cursor in a text input etc.
	    // Only special HTML elements have these default behaviors.
	    if (event.key !== 'Escape' || !isTopModal()) {
	      return;
	    }

	    if (onEscapeKeyDown) {
	      onEscapeKeyDown(event);
	    }

	    if (!disableEscapeKeyDown) {
	      // Swallow the event, in case someone is listening for the escape key on the body.
	      event.stopPropagation();

	      if (onClose) {
	        onClose(event, 'escapeKeyDown');
	      }
	    }
	  };

	  var inlineStyle = styles$f(theme || {
	    zIndex: zIndex$1
	  });
	  var childProps = {};

	  if (children.props.tabIndex === undefined) {
	    childProps.tabIndex = children.props.tabIndex || '-1';
	  } // It's a Transition like component


	  if (hasTransition) {
	    childProps.onEnter = createChainedFunction(handleEnter, children.props.onEnter);
	    childProps.onExited = createChainedFunction(handleExited, children.props.onExited);
	  }

	  return /*#__PURE__*/React.createElement(Portal$1, {
	    ref: handlePortalRef,
	    container: container,
	    disablePortal: disablePortal
	  }, /*#__PURE__*/React.createElement("div", _extends({
	    ref: handleRef,
	    onKeyDown: handleKeyDown,
	    role: "presentation"
	  }, other, {
	    style: _extends({}, inlineStyle.root, !open && exited ? inlineStyle.hidden : {}, other.style)
	  }), hideBackdrop ? null : /*#__PURE__*/React.createElement(BackdropComponent, _extends({
	    open: open,
	    onClick: handleBackdropClick
	  }, BackdropProps)), /*#__PURE__*/React.createElement(Unstable_TrapFocus, {
	    disableEnforceFocus: disableEnforceFocus,
	    disableAutoFocus: disableAutoFocus,
	    disableRestoreFocus: disableRestoreFocus,
	    getDoc: getDoc,
	    isEnabled: isTopModal,
	    open: open
	  }, /*#__PURE__*/React.cloneElement(children, childProps))));
	});
	process.env.NODE_ENV !== "production" ? Modal.propTypes = {
	  /**
	   * A backdrop component. This prop enables custom backdrop rendering.
	   */
	  BackdropComponent: propTypes.elementType,

	  /**
	   * Props applied to the [`Backdrop`](/api/backdrop/) element.
	   */
	  BackdropProps: propTypes.object,

	  /**
	   * A single child content element.
	   */
	  children: elementAcceptingRef.isRequired,

	  /**
	   * When set to true the Modal waits until a nested Transition is completed before closing.
	   */
	  closeAfterTransition: propTypes.bool,

	  /**
	   * A HTML element, component instance, or function that returns either.
	   * The `container` will have the portal children appended to it.
	   *
	   * By default, it uses the body of the top-level document object,
	   * so it's simply `document.body` most of the time.
	   */
	  container: propTypes
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([HTMLElementType, propTypes.instanceOf(React.Component), propTypes.func]),

	  /**
	   * If `true`, the modal will not automatically shift focus to itself when it opens, and
	   * replace it to the last focused element when it closes.
	   * This also works correctly with any modal children that have the `disableAutoFocus` prop.
	   *
	   * Generally this should never be set to `true` as it makes the modal less
	   * accessible to assistive technologies, like screen readers.
	   */
	  disableAutoFocus: propTypes.bool,

	  /**
	   * If `true`, clicking the backdrop will not fire `onClose`.
	   */
	  disableBackdropClick: propTypes.bool,

	  /**
	   * If `true`, the modal will not prevent focus from leaving the modal while open.
	   *
	   * Generally this should never be set to `true` as it makes the modal less
	   * accessible to assistive technologies, like screen readers.
	   */
	  disableEnforceFocus: propTypes.bool,

	  /**
	   * If `true`, hitting escape will not fire `onClose`.
	   */
	  disableEscapeKeyDown: propTypes.bool,

	  /**
	   * Disable the portal behavior.
	   * The children stay within it's parent DOM hierarchy.
	   */
	  disablePortal: propTypes.bool,

	  /**
	   * If `true`, the modal will not restore focus to previously focused element once
	   * modal is hidden.
	   */
	  disableRestoreFocus: propTypes.bool,

	  /**
	   * Disable the scroll lock behavior.
	   */
	  disableScrollLock: propTypes.bool,

	  /**
	   * If `true`, the backdrop is not rendered.
	   */
	  hideBackdrop: propTypes.bool,

	  /**
	   * Always keep the children in the DOM.
	   * This prop can be useful in SEO situation or
	   * when you want to maximize the responsiveness of the Modal.
	   */
	  keepMounted: propTypes.bool,

	  /**
	   * @ignore
	   */
	  manager: propTypes.object,

	  /**
	   * Callback fired when the backdrop is clicked.
	   */
	  onBackdropClick: propTypes.func,

	  /**
	   * Callback fired when the component requests to be closed.
	   * The `reason` parameter can optionally be used to control the response to `onClose`.
	   *
	   * @param {object} event The event source of the callback.
	   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
	   */
	  onClose: propTypes.func,

	  /**
	   * Callback fired when the escape key is pressed,
	   * `disableEscapeKeyDown` is false and the modal is in focus.
	   */
	  onEscapeKeyDown: propTypes.func,

	  /**
	   * Callback fired once the children has been mounted into the `container`.
	   * It signals that the `open={true}` prop took effect.
	   *
	   * This prop will be deprecated and removed in v5, the ref can be used instead.
	   */
	  onRendered: propTypes.func,

	  /**
	   * If `true`, the modal is open.
	   */
	  open: propTypes.bool.isRequired
	} : void 0;

	var styles$g = function styles(theme) {
	  return {
	    /* Styles applied to the root element. */
	    root: {
	      '@media print': {
	        // Use !important to override the Modal inline-style.
	        position: 'absolute !important'
	      }
	    },

	    /* Styles applied to the container element if `scroll="paper"`. */
	    scrollPaper: {
	      display: 'flex',
	      justifyContent: 'center',
	      alignItems: 'center'
	    },

	    /* Styles applied to the container element if `scroll="body"`. */
	    scrollBody: {
	      overflowY: 'auto',
	      overflowX: 'hidden',
	      textAlign: 'center',
	      '&:after': {
	        content: '""',
	        display: 'inline-block',
	        verticalAlign: 'middle',
	        height: '100%',
	        width: '0'
	      }
	    },

	    /* Styles applied to the container element. */
	    container: {
	      height: '100%',
	      '@media print': {
	        height: 'auto'
	      },
	      // We disable the focus ring for mouse, touch and keyboard users.
	      outline: 0
	    },

	    /* Styles applied to the `Paper` component. */
	    paper: {
	      margin: 32,
	      position: 'relative',
	      overflowY: 'auto',
	      // Fix IE 11 issue, to remove at some point.
	      '@media print': {
	        overflowY: 'visible',
	        boxShadow: 'none'
	      }
	    },

	    /* Styles applied to the `Paper` component if `scroll="paper"`. */
	    paperScrollPaper: {
	      display: 'flex',
	      flexDirection: 'column',
	      maxHeight: 'calc(100% - 64px)'
	    },

	    /* Styles applied to the `Paper` component if `scroll="body"`. */
	    paperScrollBody: {
	      display: 'inline-block',
	      verticalAlign: 'middle',
	      textAlign: 'left' // 'initial' doesn't work on IE 11

	    },

	    /* Styles applied to the `Paper` component if `maxWidth=false`. */
	    paperWidthFalse: {
	      maxWidth: 'calc(100% - 64px)'
	    },

	    /* Styles applied to the `Paper` component if `maxWidth="xs"`. */
	    paperWidthXs: {
	      maxWidth: Math.max(theme.breakpoints.values.xs, 444),
	      '&$paperScrollBody': _defineProperty({}, theme.breakpoints.down(Math.max(theme.breakpoints.values.xs, 444) + 32 * 2), {
	        maxWidth: 'calc(100% - 64px)'
	      })
	    },

	    /* Styles applied to the `Paper` component if `maxWidth="sm"`. */
	    paperWidthSm: {
	      maxWidth: theme.breakpoints.values.sm,
	      '&$paperScrollBody': _defineProperty({}, theme.breakpoints.down(theme.breakpoints.values.sm + 32 * 2), {
	        maxWidth: 'calc(100% - 64px)'
	      })
	    },

	    /* Styles applied to the `Paper` component if `maxWidth="md"`. */
	    paperWidthMd: {
	      maxWidth: theme.breakpoints.values.md,
	      '&$paperScrollBody': _defineProperty({}, theme.breakpoints.down(theme.breakpoints.values.md + 32 * 2), {
	        maxWidth: 'calc(100% - 64px)'
	      })
	    },

	    /* Styles applied to the `Paper` component if `maxWidth="lg"`. */
	    paperWidthLg: {
	      maxWidth: theme.breakpoints.values.lg,
	      '&$paperScrollBody': _defineProperty({}, theme.breakpoints.down(theme.breakpoints.values.lg + 32 * 2), {
	        maxWidth: 'calc(100% - 64px)'
	      })
	    },

	    /* Styles applied to the `Paper` component if `maxWidth="xl"`. */
	    paperWidthXl: {
	      maxWidth: theme.breakpoints.values.xl,
	      '&$paperScrollBody': _defineProperty({}, theme.breakpoints.down(theme.breakpoints.values.xl + 32 * 2), {
	        maxWidth: 'calc(100% - 64px)'
	      })
	    },

	    /* Styles applied to the `Paper` component if `fullWidth={true}`. */
	    paperFullWidth: {
	      width: 'calc(100% - 64px)'
	    },

	    /* Styles applied to the `Paper` component if `fullScreen={true}`. */
	    paperFullScreen: {
	      margin: 0,
	      width: '100%',
	      maxWidth: '100%',
	      height: '100%',
	      maxHeight: 'none',
	      borderRadius: 0,
	      '&$paperScrollBody': {
	        margin: 0,
	        maxWidth: '100%'
	      }
	    }
	  };
	};
	var defaultTransitionDuration = {
	  enter: duration.enteringScreen,
	  exit: duration.leavingScreen
	};
	/**
	 * Dialogs are overlaid modal paper based components with a backdrop.
	 */

	var Dialog = /*#__PURE__*/React.forwardRef(function Dialog(props, ref) {
	  var BackdropProps = props.BackdropProps,
	      children = props.children,
	      classes = props.classes,
	      className = props.className,
	      _props$disableBackdro = props.disableBackdropClick,
	      disableBackdropClick = _props$disableBackdro === void 0 ? false : _props$disableBackdro,
	      _props$disableEscapeK = props.disableEscapeKeyDown,
	      disableEscapeKeyDown = _props$disableEscapeK === void 0 ? false : _props$disableEscapeK,
	      _props$fullScreen = props.fullScreen,
	      fullScreen = _props$fullScreen === void 0 ? false : _props$fullScreen,
	      _props$fullWidth = props.fullWidth,
	      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
	      _props$maxWidth = props.maxWidth,
	      maxWidth = _props$maxWidth === void 0 ? 'sm' : _props$maxWidth,
	      onBackdropClick = props.onBackdropClick,
	      onClose = props.onClose,
	      onEnter = props.onEnter,
	      onEntered = props.onEntered,
	      onEntering = props.onEntering,
	      onEscapeKeyDown = props.onEscapeKeyDown,
	      onExit = props.onExit,
	      onExited = props.onExited,
	      onExiting = props.onExiting,
	      open = props.open,
	      _props$PaperComponent = props.PaperComponent,
	      PaperComponent = _props$PaperComponent === void 0 ? Paper$1 : _props$PaperComponent,
	      _props$PaperProps = props.PaperProps,
	      PaperProps = _props$PaperProps === void 0 ? {} : _props$PaperProps,
	      _props$scroll = props.scroll,
	      scroll = _props$scroll === void 0 ? 'paper' : _props$scroll,
	      _props$TransitionComp = props.TransitionComponent,
	      TransitionComponent = _props$TransitionComp === void 0 ? Fade : _props$TransitionComp,
	      _props$transitionDura = props.transitionDuration,
	      transitionDuration = _props$transitionDura === void 0 ? defaultTransitionDuration : _props$transitionDura,
	      TransitionProps = props.TransitionProps,
	      ariaDescribedby = props['aria-describedby'],
	      ariaLabelledby = props['aria-labelledby'],
	      other = _objectWithoutProperties(props, ["BackdropProps", "children", "classes", "className", "disableBackdropClick", "disableEscapeKeyDown", "fullScreen", "fullWidth", "maxWidth", "onBackdropClick", "onClose", "onEnter", "onEntered", "onEntering", "onEscapeKeyDown", "onExit", "onExited", "onExiting", "open", "PaperComponent", "PaperProps", "scroll", "TransitionComponent", "transitionDuration", "TransitionProps", "aria-describedby", "aria-labelledby"]);

	  var mouseDownTarget = React.useRef();

	  var handleMouseDown = function handleMouseDown(event) {
	    mouseDownTarget.current = event.target;
	  };

	  var handleBackdropClick = function handleBackdropClick(event) {
	    // Ignore the events not coming from the "backdrop"
	    // We don't want to close the dialog when clicking the dialog content.
	    if (event.target !== event.currentTarget) {
	      return;
	    } // Make sure the event starts and ends on the same DOM element.


	    if (event.target !== mouseDownTarget.current) {
	      return;
	    }

	    mouseDownTarget.current = null;

	    if (onBackdropClick) {
	      onBackdropClick(event);
	    }

	    if (!disableBackdropClick && onClose) {
	      onClose(event, 'backdropClick');
	    }
	  };

	  return /*#__PURE__*/React.createElement(Modal, _extends({
	    className: clsx(classes.root, className),
	    BackdropComponent: Backdrop$1,
	    BackdropProps: _extends({
	      transitionDuration: transitionDuration
	    }, BackdropProps),
	    closeAfterTransition: true,
	    disableBackdropClick: disableBackdropClick,
	    disableEscapeKeyDown: disableEscapeKeyDown,
	    onEscapeKeyDown: onEscapeKeyDown,
	    onClose: onClose,
	    open: open,
	    ref: ref
	  }, other), /*#__PURE__*/React.createElement(TransitionComponent, _extends({
	    appear: true,
	    in: open,
	    timeout: transitionDuration,
	    onEnter: onEnter,
	    onEntering: onEntering,
	    onEntered: onEntered,
	    onExit: onExit,
	    onExiting: onExiting,
	    onExited: onExited,
	    role: "none presentation"
	  }, TransitionProps), /*#__PURE__*/React.createElement("div", {
	    className: clsx(classes.container, classes["scroll".concat(capitalize(scroll))]),
	    onMouseUp: handleBackdropClick,
	    onMouseDown: handleMouseDown
	  }, /*#__PURE__*/React.createElement(PaperComponent, _extends({
	    elevation: 24,
	    role: "dialog",
	    "aria-describedby": ariaDescribedby,
	    "aria-labelledby": ariaLabelledby
	  }, PaperProps, {
	    className: clsx(classes.paper, classes["paperScroll".concat(capitalize(scroll))], classes["paperWidth".concat(capitalize(String(maxWidth)))], PaperProps.className, fullScreen && classes.paperFullScreen, fullWidth && classes.paperFullWidth)
	  }), children))));
	});
	process.env.NODE_ENV !== "production" ? Dialog.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The id(s) of the element(s) that describe the dialog.
	   */
	  'aria-describedby': propTypes.string,

	  /**
	   * The id(s) of the element(s) that label the dialog.
	   */
	  'aria-labelledby': propTypes.string,

	  /**
	   * @ignore
	   */
	  BackdropProps: propTypes.object,

	  /**
	   * Dialog children, usually the included sub-components.
	   */
	  children: propTypes.node,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.string,

	  /**
	   * If `true`, clicking the backdrop will not fire the `onClose` callback.
	   */
	  disableBackdropClick: propTypes.bool,

	  /**
	   * If `true`, hitting escape will not fire the `onClose` callback.
	   */
	  disableEscapeKeyDown: propTypes.bool,

	  /**
	   * If `true`, the dialog will be full-screen
	   */
	  fullScreen: propTypes.bool,

	  /**
	   * If `true`, the dialog stretches to `maxWidth`.
	   *
	   * Notice that the dialog width grow is limited by the default margin.
	   */
	  fullWidth: propTypes.bool,

	  /**
	   * Determine the max-width of the dialog.
	   * The dialog width grows with the size of the screen.
	   * Set to `false` to disable `maxWidth`.
	   */
	  maxWidth: propTypes.oneOf(['lg', 'md', 'sm', 'xl', 'xs', false]),

	  /**
	   * Callback fired when the backdrop is clicked.
	   */
	  onBackdropClick: propTypes.func,

	  /**
	   * Callback fired when the component requests to be closed.
	   *
	   * @param {object} event The event source of the callback.
	   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`.
	   */
	  onClose: propTypes.func,

	  /**
	   * Callback fired before the dialog enters.
	   */
	  onEnter: propTypes.func,

	  /**
	   * Callback fired when the dialog has entered.
	   */
	  onEntered: propTypes.func,

	  /**
	   * Callback fired when the dialog is entering.
	   */
	  onEntering: propTypes.func,

	  /**
	   * Callback fired when the escape key is pressed,
	   * `disableKeyboard` is false and the modal is in focus.
	   */
	  onEscapeKeyDown: propTypes.func,

	  /**
	   * Callback fired before the dialog exits.
	   */
	  onExit: propTypes.func,

	  /**
	   * Callback fired when the dialog has exited.
	   */
	  onExited: propTypes.func,

	  /**
	   * Callback fired when the dialog is exiting.
	   */
	  onExiting: propTypes.func,

	  /**
	   * If `true`, the Dialog is open.
	   */
	  open: propTypes.bool.isRequired,

	  /**
	   * The component used to render the body of the dialog.
	   */
	  PaperComponent: propTypes.elementType,

	  /**
	   * Props applied to the [`Paper`](/api/paper/) element.
	   */
	  PaperProps: propTypes.object,

	  /**
	   * Determine the container for scrolling the dialog.
	   */
	  scroll: propTypes.oneOf(['body', 'paper']),

	  /**
	   * The component used for the transition.
	   * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
	   */
	  TransitionComponent: propTypes.elementType,

	  /**
	   * The duration for the transition, in milliseconds.
	   * You may specify a single timeout for all transitions, or individually with an object.
	   */
	  transitionDuration: propTypes.oneOfType([propTypes.number, propTypes.shape({
	    appear: propTypes.number,
	    enter: propTypes.number,
	    exit: propTypes.number
	  })]),

	  /**
	   * Props applied to the [`Transition`](http://reactcommunity.org/react-transition-group/transition#Transition-props) element.
	   */
	  TransitionProps: propTypes.object
	} : void 0;
	var Dialog$1 = withStyles$1(styles$g, {
	  name: 'MuiDialog'
	})(Dialog);

	var styles$h = {
	  /* Styles applied to the root element. */
	  root: {
	    display: 'flex',
	    alignItems: 'center',
	    padding: 8,
	    justifyContent: 'flex-end',
	    flex: '0 0 auto'
	  },

	  /* Styles applied to the root element if `disableSpacing={false}`. */
	  spacing: {
	    '& > :not(:first-child)': {
	      marginLeft: 8
	    }
	  }
	};
	var DialogActions = /*#__PURE__*/React.forwardRef(function DialogActions(props, ref) {
	  var _props$disableSpacing = props.disableSpacing,
	      disableSpacing = _props$disableSpacing === void 0 ? false : _props$disableSpacing,
	      classes = props.classes,
	      className = props.className,
	      other = _objectWithoutProperties(props, ["disableSpacing", "classes", "className"]);

	  return /*#__PURE__*/React.createElement("div", _extends({
	    className: clsx(classes.root, className, !disableSpacing && classes.spacing),
	    ref: ref
	  }, other));
	});
	process.env.NODE_ENV !== "production" ? DialogActions.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.node,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.string,

	  /**
	   * If `true`, the actions do not have additional margin.
	   */
	  disableSpacing: propTypes.bool
	} : void 0;
	var DialogActions$1 = withStyles$1(styles$h, {
	  name: 'MuiDialogActions'
	})(DialogActions);

	var styles$i = function styles(theme) {
	  return {
	    /* Styles applied to the root element. */
	    root: {
	      flex: '1 1 auto',
	      WebkitOverflowScrolling: 'touch',
	      // Add iOS momentum scrolling.
	      overflowY: 'auto',
	      padding: '8px 24px',
	      '&:first-child': {
	        // dialog without title
	        paddingTop: 20
	      }
	    },

	    /* Styles applied to the root element if `dividers={true}`. */
	    dividers: {
	      padding: '16px 24px',
	      borderTop: "1px solid ".concat(theme.palette.divider),
	      borderBottom: "1px solid ".concat(theme.palette.divider)
	    }
	  };
	};
	var DialogContent = /*#__PURE__*/React.forwardRef(function DialogContent(props, ref) {
	  var classes = props.classes,
	      className = props.className,
	      _props$dividers = props.dividers,
	      dividers = _props$dividers === void 0 ? false : _props$dividers,
	      other = _objectWithoutProperties(props, ["classes", "className", "dividers"]);

	  return /*#__PURE__*/React.createElement("div", _extends({
	    className: clsx(classes.root, className, dividers && classes.dividers),
	    ref: ref
	  }, other));
	});
	process.env.NODE_ENV !== "production" ? DialogContent.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.node,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.string,

	  /**
	   * Display the top and bottom dividers.
	   */
	  dividers: propTypes.bool
	} : void 0;
	var DialogContent$1 = withStyles$1(styles$i, {
	  name: 'MuiDialogContent'
	})(DialogContent);

	var styles$j = function styles(theme) {
	  return {
	    /* Styles applied to the root element. */
	    root: {
	      height: 1,
	      margin: 0,
	      // Reset browser default style.
	      border: 'none',
	      flexShrink: 0,
	      backgroundColor: theme.palette.divider
	    },

	    /* Styles applied to the root element if `absolute={true}`. */
	    absolute: {
	      position: 'absolute',
	      bottom: 0,
	      left: 0,
	      width: '100%'
	    },

	    /* Styles applied to the root element if `variant="inset"`. */
	    inset: {
	      marginLeft: 72
	    },

	    /* Styles applied to the root element if `light={true}`. */
	    light: {
	      backgroundColor: fade(theme.palette.divider, 0.08)
	    },

	    /* Styles applied to the root element if `variant="middle"`. */
	    middle: {
	      marginLeft: theme.spacing(2),
	      marginRight: theme.spacing(2)
	    },

	    /* Styles applied to the root element if `orientation="vertical"`. */
	    vertical: {
	      height: '100%',
	      width: 1
	    },

	    /* Styles applied to the root element if `flexItem={true}`. */
	    flexItem: {
	      alignSelf: 'stretch',
	      height: 'auto'
	    }
	  };
	};
	var Divider = /*#__PURE__*/React.forwardRef(function Divider(props, ref) {
	  var _props$absolute = props.absolute,
	      absolute = _props$absolute === void 0 ? false : _props$absolute,
	      classes = props.classes,
	      className = props.className,
	      _props$component = props.component,
	      Component = _props$component === void 0 ? 'hr' : _props$component,
	      _props$flexItem = props.flexItem,
	      flexItem = _props$flexItem === void 0 ? false : _props$flexItem,
	      _props$light = props.light,
	      light = _props$light === void 0 ? false : _props$light,
	      _props$orientation = props.orientation,
	      orientation = _props$orientation === void 0 ? 'horizontal' : _props$orientation,
	      _props$role = props.role,
	      role = _props$role === void 0 ? Component !== 'hr' ? 'separator' : undefined : _props$role,
	      _props$variant = props.variant,
	      variant = _props$variant === void 0 ? 'fullWidth' : _props$variant,
	      other = _objectWithoutProperties(props, ["absolute", "classes", "className", "component", "flexItem", "light", "orientation", "role", "variant"]);

	  return /*#__PURE__*/React.createElement(Component, _extends({
	    className: clsx(classes.root, className, variant !== 'fullWidth' && classes[variant], absolute && classes.absolute, flexItem && classes.flexItem, light && classes.light, orientation === 'vertical' && classes.vertical),
	    role: role,
	    ref: ref
	  }, other));
	});
	process.env.NODE_ENV !== "production" ? Divider.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Absolutely position the element.
	   */
	  absolute: propTypes.bool,

	  /**
	   * @ignore
	   */
	  children: propTypes.node,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes
	  /* @typescript-to-proptypes-ignore */
	  .elementType,

	  /**
	   * If `true`, a vertical divider will have the correct height when used in flex container.
	   * (By default, a vertical divider will have a calculated height of `0px` if it is the child of a flex container.)
	   */
	  flexItem: propTypes.bool,

	  /**
	   * If `true`, the divider will have a lighter color.
	   */
	  light: propTypes.bool,

	  /**
	   * The divider orientation.
	   */
	  orientation: propTypes.oneOf(['horizontal', 'vertical']),

	  /**
	   * @ignore
	   */
	  role: propTypes.string,

	  /**
	   * The variant to use.
	   */
	  variant: propTypes.oneOf(['fullWidth', 'inset', 'middle'])
	} : void 0;
	var Divider$1 = withStyles$1(styles$j, {
	  name: 'MuiDivider'
	})(Divider);

	function _toArray(arr) {
	  return _arrayWithHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableRest();
	}

	/**
	 * @ignore - internal component.
	 * @type {React.Context<{} | {expanded: boolean, disabled: boolean, toggle: () => void}>}
	 */

	var ExpansionPanelContext = React.createContext({});

	if (process.env.NODE_ENV !== 'production') {
	  ExpansionPanelContext.displayName = 'ExpansionPanelContext';
	}

	var styles$k = function styles(theme) {
	  var transition = {
	    duration: theme.transitions.duration.shortest
	  };
	  return {
	    /* Styles applied to the root element. */
	    root: {
	      position: 'relative',
	      transition: theme.transitions.create(['margin'], transition),
	      '&:before': {
	        position: 'absolute',
	        left: 0,
	        top: -1,
	        right: 0,
	        height: 1,
	        content: '""',
	        opacity: 1,
	        backgroundColor: theme.palette.divider,
	        transition: theme.transitions.create(['opacity', 'background-color'], transition)
	      },
	      '&:first-child': {
	        '&:before': {
	          display: 'none'
	        }
	      },
	      '&$expanded': {
	        margin: '16px 0',
	        '&:first-child': {
	          marginTop: 0
	        },
	        '&:last-child': {
	          marginBottom: 0
	        },
	        '&:before': {
	          opacity: 0
	        }
	      },
	      '&$expanded + &': {
	        '&:before': {
	          display: 'none'
	        }
	      },
	      '&$disabled': {
	        backgroundColor: theme.palette.action.disabledBackground
	      }
	    },

	    /* Styles applied to the root element if `square={false}`. */
	    rounded: {
	      borderRadius: 0,
	      '&:first-child': {
	        borderTopLeftRadius: theme.shape.borderRadius,
	        borderTopRightRadius: theme.shape.borderRadius
	      },
	      '&:last-child': {
	        borderBottomLeftRadius: theme.shape.borderRadius,
	        borderBottomRightRadius: theme.shape.borderRadius,
	        // Fix a rendering issue on Edge
	        '@supports (-ms-ime-align: auto)': {
	          borderBottomLeftRadius: 0,
	          borderBottomRightRadius: 0
	        }
	      }
	    },

	    /* Styles applied to the root element if `expanded={true}`. */
	    expanded: {},

	    /* Styles applied to the root element if `disabled={true}`. */
	    disabled: {}
	  };
	};
	var ExpansionPanel = /*#__PURE__*/React.forwardRef(function ExpansionPanel(props, ref) {
	  var childrenProp = props.children,
	      classes = props.classes,
	      className = props.className,
	      _props$defaultExpande = props.defaultExpanded,
	      defaultExpanded = _props$defaultExpande === void 0 ? false : _props$defaultExpande,
	      _props$disabled = props.disabled,
	      disabled = _props$disabled === void 0 ? false : _props$disabled,
	      expandedProp = props.expanded,
	      onChange = props.onChange,
	      _props$square = props.square,
	      square = _props$square === void 0 ? false : _props$square,
	      _props$TransitionComp = props.TransitionComponent,
	      TransitionComponent = _props$TransitionComp === void 0 ? Collapse$1 : _props$TransitionComp,
	      TransitionProps = props.TransitionProps,
	      other = _objectWithoutProperties(props, ["children", "classes", "className", "defaultExpanded", "disabled", "expanded", "onChange", "square", "TransitionComponent", "TransitionProps"]);

	  var _useControlled = useControlled({
	    controlled: expandedProp,
	    default: defaultExpanded,
	    name: 'ExpansionPanel',
	    state: 'expanded'
	  }),
	      _useControlled2 = _slicedToArray(_useControlled, 2),
	      expanded = _useControlled2[0],
	      setExpandedState = _useControlled2[1];

	  var handleChange = React.useCallback(function (event) {
	    setExpandedState(!expanded);

	    if (onChange) {
	      onChange(event, !expanded);
	    }
	  }, [expanded, onChange, setExpandedState]);

	  var _React$Children$toArr = React.Children.toArray(childrenProp),
	      _React$Children$toArr2 = _toArray(_React$Children$toArr),
	      summary = _React$Children$toArr2[0],
	      children = _React$Children$toArr2.slice(1);

	  var contextValue = React.useMemo(function () {
	    return {
	      expanded: expanded,
	      disabled: disabled,
	      toggle: handleChange
	    };
	  }, [expanded, disabled, handleChange]);
	  return /*#__PURE__*/React.createElement(Paper$1, _extends({
	    className: clsx(classes.root, className, expanded && classes.expanded, disabled && classes.disabled, !square && classes.rounded),
	    ref: ref,
	    square: square
	  }, other), /*#__PURE__*/React.createElement(ExpansionPanelContext.Provider, {
	    value: contextValue
	  }, summary), /*#__PURE__*/React.createElement(TransitionComponent, _extends({
	    in: expanded,
	    timeout: "auto"
	  }, TransitionProps), /*#__PURE__*/React.createElement("div", {
	    "aria-labelledby": summary.props.id,
	    id: summary.props['aria-controls'],
	    role: "region"
	  }, children)));
	});
	process.env.NODE_ENV !== "production" ? ExpansionPanel.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the expansion panel.
	   */
	  children: chainPropTypes(propTypes.node.isRequired, function (props) {
	    var summary = React.Children.toArray(props.children)[0];

	    if (reactIs_1(summary)) {
	      return new Error("Material-UI: The ExpansionPanel doesn't accept a Fragment as a child. " + 'Consider providing an array instead.');
	    }

	    if (! /*#__PURE__*/React.isValidElement(summary)) {
	      return new Error('Material-UI: Expected the first child of ExpansionPanel to be a valid element.');
	    }

	    return null;
	  }),

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.string,

	  /**
	   * If `true`, expands the panel by default.
	   */
	  defaultExpanded: propTypes.bool,

	  /**
	   * If `true`, the panel will be displayed in a disabled state.
	   */
	  disabled: propTypes.bool,

	  /**
	   * If `true`, expands the panel, otherwise collapse it.
	   * Setting this prop enables control over the panel.
	   */
	  expanded: propTypes.bool,

	  /**
	   * Callback fired when the expand/collapse state is changed.
	   *
	   * @param {object} event The event source of the callback.
	   * @param {boolean} expanded The `expanded` state of the panel.
	   */
	  onChange: propTypes.func,

	  /**
	   * If `true`, rounded corners are disabled.
	   */
	  square: propTypes.bool,

	  /**
	   * The component used for the collapse effect.
	   * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
	   */
	  TransitionComponent: propTypes.elementType,

	  /**
	   * Props applied to the [`Transition`](http://reactcommunity.org/react-transition-group/transition#Transition-props) element.
	   */
	  TransitionProps: propTypes.object
	} : void 0;
	var ExpansionPanel$1 = withStyles$1(styles$k, {
	  name: 'MuiExpansionPanel'
	})(ExpansionPanel);

	var styles$l = function styles(theme) {
	  return {
	    /* Styles applied to the root element. */
	    root: {
	      display: 'flex',
	      padding: theme.spacing(1, 2, 2)
	    }
	  };
	};
	var ExpansionPanelDetails = /*#__PURE__*/React.forwardRef(function ExpansionPanelDetails(props, ref) {
	  var classes = props.classes,
	      className = props.className,
	      other = _objectWithoutProperties(props, ["classes", "className"]);

	  return /*#__PURE__*/React.createElement("div", _extends({
	    className: clsx(classes.root, className),
	    ref: ref
	  }, other));
	});
	process.env.NODE_ENV !== "production" ? ExpansionPanelDetails.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the expansion panel details.
	   */
	  children: propTypes.node,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.string
	} : void 0;
	var ExpansionPanelDetails$1 = withStyles$1(styles$l, {
	  name: 'MuiExpansionPanelDetails'
	})(ExpansionPanelDetails);

	var styles$m = function styles(theme) {
	  var transition = {
	    duration: theme.transitions.duration.shortest
	  };
	  return {
	    /* Styles applied to the root element. */
	    root: {
	      display: 'flex',
	      minHeight: 8 * 6,
	      transition: theme.transitions.create(['min-height', 'background-color'], transition),
	      padding: theme.spacing(0, 2),
	      '&:hover:not($disabled)': {
	        cursor: 'pointer'
	      },
	      '&$expanded': {
	        minHeight: 64
	      },
	      '&$focused': {
	        backgroundColor: theme.palette.action.focus
	      },
	      '&$disabled': {
	        opacity: theme.palette.action.disabledOpacity
	      }
	    },

	    /* Pseudo-class applied to the root element, children wrapper element and `IconButton` component if `expanded={true}`. */
	    expanded: {},

	    /* Pseudo-class applied to the root element if `focused={true}`. */
	    focused: {},

	    /* Pseudo-class applied to the root element if `disabled={true}`. */
	    disabled: {},

	    /* Styles applied to the children wrapper element. */
	    content: {
	      display: 'flex',
	      flexGrow: 1,
	      transition: theme.transitions.create(['margin'], transition),
	      margin: '12px 0',
	      '&$expanded': {
	        margin: '20px 0'
	      }
	    },

	    /* Styles applied to the `IconButton` component when `expandIcon` is supplied. */
	    expandIcon: {
	      transform: 'rotate(0deg)',
	      transition: theme.transitions.create('transform', transition),
	      '&:hover': {
	        // Disable the hover effect for the IconButton,
	        // because a hover effect should apply to the entire Expand button and
	        // not only to the IconButton.
	        backgroundColor: 'transparent'
	      },
	      '&$expanded': {
	        transform: 'rotate(180deg)'
	      }
	    }
	  };
	};
	var ExpansionPanelSummary = /*#__PURE__*/React.forwardRef(function ExpansionPanelSummary(props, ref) {
	  var children = props.children,
	      classes = props.classes,
	      className = props.className,
	      expandIcon = props.expandIcon,
	      IconButtonProps = props.IconButtonProps,
	      onBlur = props.onBlur,
	      onClick = props.onClick,
	      onFocusVisible = props.onFocusVisible,
	      other = _objectWithoutProperties(props, ["children", "classes", "className", "expandIcon", "IconButtonProps", "onBlur", "onClick", "onFocusVisible"]);

	  var _React$useState = React.useState(false),
	      focusedState = _React$useState[0],
	      setFocusedState = _React$useState[1];

	  var handleFocusVisible = function handleFocusVisible(event) {
	    setFocusedState(true);

	    if (onFocusVisible) {
	      onFocusVisible(event);
	    }
	  };

	  var handleBlur = function handleBlur(event) {
	    setFocusedState(false);

	    if (onBlur) {
	      onBlur(event);
	    }
	  };

	  var _React$useContext = React.useContext(ExpansionPanelContext),
	      _React$useContext$dis = _React$useContext.disabled,
	      disabled = _React$useContext$dis === void 0 ? false : _React$useContext$dis,
	      expanded = _React$useContext.expanded,
	      toggle = _React$useContext.toggle;

	  var handleChange = function handleChange(event) {
	    if (toggle) {
	      toggle(event);
	    }

	    if (onClick) {
	      onClick(event);
	    }
	  };

	  return /*#__PURE__*/React.createElement(ButtonBase$1, _extends({
	    focusRipple: false,
	    disableRipple: true,
	    disabled: disabled,
	    component: "div",
	    "aria-expanded": expanded,
	    className: clsx(classes.root, className, disabled && classes.disabled, expanded && classes.expanded, focusedState && classes.focused),
	    onFocusVisible: handleFocusVisible,
	    onBlur: handleBlur,
	    onClick: handleChange,
	    ref: ref
	  }, other), /*#__PURE__*/React.createElement("div", {
	    className: clsx(classes.content, expanded && classes.expanded)
	  }, children), expandIcon && /*#__PURE__*/React.createElement(IconButton$1, _extends({
	    className: clsx(classes.expandIcon, expanded && classes.expanded),
	    edge: "end",
	    component: "div",
	    tabIndex: null,
	    role: null,
	    "aria-hidden": true
	  }, IconButtonProps), expandIcon));
	});
	process.env.NODE_ENV !== "production" ? ExpansionPanelSummary.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the expansion panel summary.
	   */
	  children: propTypes.node,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.string,

	  /**
	   * The icon to display as the expand indicator.
	   */
	  expandIcon: propTypes.node,

	  /**
	   * Props applied to the `IconButton` element wrapping the expand icon.
	   */
	  IconButtonProps: propTypes.object,

	  /**
	   * @ignore
	   */
	  onBlur: propTypes.func,

	  /**
	   * @ignore
	   */
	  onClick: propTypes.func,

	  /**
	   * @ignore
	   */
	  onFocusVisible: propTypes.func
	} : void 0;
	var ExpansionPanelSummary$1 = withStyles$1(styles$m, {
	  name: 'MuiExpansionPanelSummary'
	})(ExpansionPanelSummary);

	function formControlState(_ref) {
	  var props = _ref.props,
	      states = _ref.states,
	      muiFormControl = _ref.muiFormControl;
	  return states.reduce(function (acc, state) {
	    acc[state] = props[state];

	    if (muiFormControl) {
	      if (typeof props[state] === 'undefined') {
	        acc[state] = muiFormControl[state];
	      }
	    }

	    return acc;
	  }, {});
	}

	function getStyleValue(computedStyle, property) {
	  return parseInt(computedStyle[property], 10) || 0;
	}

	var useEnhancedEffect$3 = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;
	var styles$n = {
	  /* Styles applied to the shadow textarea element. */
	  shadow: {
	    // Visibility needed to hide the extra text area on iPads
	    visibility: 'hidden',
	    // Remove from the content flow
	    position: 'absolute',
	    // Ignore the scrollbar width
	    overflow: 'hidden',
	    height: 0,
	    top: 0,
	    left: 0,
	    // Create a new layer, increase the isolation of the computed values
	    transform: 'translateZ(0)'
	  }
	};
	var TextareaAutosize = /*#__PURE__*/React.forwardRef(function TextareaAutosize(props, ref) {
	  var onChange = props.onChange,
	      rows = props.rows,
	      rowsMax = props.rowsMax,
	      _props$rowsMin = props.rowsMin,
	      rowsMinProp = _props$rowsMin === void 0 ? 1 : _props$rowsMin,
	      style = props.style,
	      value = props.value,
	      other = _objectWithoutProperties(props, ["onChange", "rows", "rowsMax", "rowsMin", "style", "value"]);

	  var rowsMin = rows || rowsMinProp;

	  var _React$useRef = React.useRef(value != null),
	      isControlled = _React$useRef.current;

	  var inputRef = React.useRef(null);
	  var handleRef = useForkRef(ref, inputRef);
	  var shadowRef = React.useRef(null);
	  var renders = React.useRef(0);

	  var _React$useState = React.useState({}),
	      state = _React$useState[0],
	      setState = _React$useState[1];

	  var syncHeight = React.useCallback(function () {
	    var input = inputRef.current;
	    var computedStyle = window.getComputedStyle(input);
	    var inputShallow = shadowRef.current;
	    inputShallow.style.width = computedStyle.width;
	    inputShallow.value = input.value || props.placeholder || 'x';

	    if (inputShallow.value.slice(-1) === '\n') {
	      // Certain fonts which overflow the line height will cause the textarea
	      // to report a different scrollHeight depending on whether the last line
	      // is empty. Make it non-empty to avoid this issue.
	      inputShallow.value += ' ';
	    }

	    var boxSizing = computedStyle['box-sizing'];
	    var padding = getStyleValue(computedStyle, 'padding-bottom') + getStyleValue(computedStyle, 'padding-top');
	    var border = getStyleValue(computedStyle, 'border-bottom-width') + getStyleValue(computedStyle, 'border-top-width'); // The height of the inner content

	    var innerHeight = inputShallow.scrollHeight - padding; // Measure height of a textarea with a single row

	    inputShallow.value = 'x';
	    var singleRowHeight = inputShallow.scrollHeight - padding; // The height of the outer content

	    var outerHeight = innerHeight;

	    if (rowsMin) {
	      outerHeight = Math.max(Number(rowsMin) * singleRowHeight, outerHeight);
	    }

	    if (rowsMax) {
	      outerHeight = Math.min(Number(rowsMax) * singleRowHeight, outerHeight);
	    }

	    outerHeight = Math.max(outerHeight, singleRowHeight); // Take the box sizing into account for applying this value as a style.

	    var outerHeightStyle = outerHeight + (boxSizing === 'border-box' ? padding + border : 0);
	    var overflow = Math.abs(outerHeight - innerHeight) <= 1;
	    setState(function (prevState) {
	      // Need a large enough difference to update the height.
	      // This prevents infinite rendering loop.
	      if (renders.current < 20 && (outerHeightStyle > 0 && Math.abs((prevState.outerHeightStyle || 0) - outerHeightStyle) > 1 || prevState.overflow !== overflow)) {
	        renders.current += 1;
	        return {
	          overflow: overflow,
	          outerHeightStyle: outerHeightStyle
	        };
	      }

	      if (process.env.NODE_ENV !== 'production') {
	        if (renders.current === 20) {
	          console.error(['Material-UI: Too many re-renders. The layout is unstable.', 'TextareaAutosize limits the number of renders to prevent an infinite loop.'].join('\n'));
	        }
	      }

	      return prevState;
	    });
	  }, [rowsMax, rowsMin, props.placeholder]);
	  React.useEffect(function () {
	    var handleResize = debounce$1(function () {
	      renders.current = 0;
	      syncHeight();
	    });
	    window.addEventListener('resize', handleResize);
	    return function () {
	      handleResize.clear();
	      window.removeEventListener('resize', handleResize);
	    };
	  }, [syncHeight]);
	  useEnhancedEffect$3(function () {
	    syncHeight();
	  });
	  React.useEffect(function () {
	    renders.current = 0;
	  }, [value]);

	  var handleChange = function handleChange(event) {
	    renders.current = 0;

	    if (!isControlled) {
	      syncHeight();
	    }

	    if (onChange) {
	      onChange(event);
	    }
	  };

	  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("textarea", _extends({
	    value: value,
	    onChange: handleChange,
	    ref: handleRef // Apply the rows prop to get a "correct" first SSR paint
	    ,
	    rows: rowsMin,
	    style: _extends({
	      height: state.outerHeightStyle,
	      // Need a large enough difference to allow scrolling.
	      // This prevents infinite rendering loop.
	      overflow: state.overflow ? 'hidden' : null
	    }, style)
	  }, other)), /*#__PURE__*/React.createElement("textarea", {
	    "aria-hidden": true,
	    className: props.className,
	    readOnly: true,
	    ref: shadowRef,
	    tabIndex: -1,
	    style: _extends({}, styles$n.shadow, style)
	  }));
	});
	process.env.NODE_ENV !== "production" ? TextareaAutosize.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * @ignore
	   */
	  className: propTypes.string,

	  /**
	   * @ignore
	   */
	  onChange: propTypes.func,

	  /**
	   * @ignore
	   */
	  placeholder: propTypes.string,

	  /**
	   * Use `rowsMin` instead. The prop will be removed in v5.
	   *
	   * @deprecated
	   */
	  rows: propTypes.oneOfType([propTypes.number, propTypes.string]),

	  /**
	   * Maximum number of rows to display.
	   */
	  rowsMax: propTypes.oneOfType([propTypes.number, propTypes.string]),

	  /**
	   * Minimum number of rows to display.
	   */
	  rowsMin: propTypes.oneOfType([propTypes.number, propTypes.string]),

	  /**
	   * @ignore
	   */
	  style: propTypes.object,

	  /**
	   * @ignore
	   */
	  value: propTypes.oneOfType([propTypes.arrayOf(propTypes.string), propTypes.number, propTypes.string])
	} : void 0;

	// Supports determination of isControlled().
	// Controlled input accepts its current value as a prop.
	//
	// @see https://facebook.github.io/react/docs/forms.html#controlled-components
	// @param value
	// @returns {boolean} true if string (including '') or number (including zero)
	function hasValue(value) {
	  return value != null && !(Array.isArray(value) && value.length === 0);
	} // Determine if field is empty or filled.
	// Response determines if label is presented above field or as placeholder.
	//
	// @param obj
	// @param SSR
	// @returns {boolean} False when not present or empty string.
	//                    True when any number or string with length.

	function isFilled(obj) {
	  var SSR = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	  return obj && (hasValue(obj.value) && obj.value !== '' || SSR && hasValue(obj.defaultValue) && obj.defaultValue !== '');
	} // Determine if an Input is adorned on start.
	// It's corresponding to the left with LTR.
	//
	// @param obj
	// @returns {boolean} False when no adornments.
	//                    True when adorned at the start.

	function isAdornedStart(obj) {
	  return obj.startAdornment;
	}

	var styles$o = function styles(theme) {
	  var light = theme.palette.type === 'light';
	  var placeholder = {
	    color: 'currentColor',
	    opacity: light ? 0.42 : 0.5,
	    transition: theme.transitions.create('opacity', {
	      duration: theme.transitions.duration.shorter
	    })
	  };
	  var placeholderHidden = {
	    opacity: '0 !important'
	  };
	  var placeholderVisible = {
	    opacity: light ? 0.42 : 0.5
	  };
	  return {
	    '@global': {
	      '@keyframes mui-auto-fill': {},
	      '@keyframes mui-auto-fill-cancel': {}
	    },

	    /* Styles applied to the root element. */
	    root: _extends({}, theme.typography.body1, {
	      color: theme.palette.text.primary,
	      lineHeight: '1.1876em',
	      // Reset (19px), match the native input line-height
	      boxSizing: 'border-box',
	      // Prevent padding issue with fullWidth.
	      position: 'relative',
	      cursor: 'text',
	      display: 'inline-flex',
	      alignItems: 'center',
	      '&$disabled': {
	        color: theme.palette.text.disabled,
	        cursor: 'default'
	      }
	    }),

	    /* Styles applied to the root element if the component is a descendant of `FormControl`. */
	    formControl: {},

	    /* Styles applied to the root element if the component is focused. */
	    focused: {},

	    /* Styles applied to the root element if `disabled={true}`. */
	    disabled: {},

	    /* Styles applied to the root element if `startAdornment` is provided. */
	    adornedStart: {},

	    /* Styles applied to the root element if `endAdornment` is provided. */
	    adornedEnd: {},

	    /* Pseudo-class applied to the root element if `error={true}`. */
	    error: {},

	    /* Styles applied to the `input` element if `margin="dense"`. */
	    marginDense: {},

	    /* Styles applied to the root element if `multiline={true}`. */
	    multiline: {
	      padding: "".concat(8 - 2, "px 0 ").concat(8 - 1, "px"),
	      '&$marginDense': {
	        paddingTop: 4 - 1
	      }
	    },

	    /* Styles applied to the root element if the color is secondary. */
	    colorSecondary: {},

	    /* Styles applied to the root element if `fullWidth={true}`. */
	    fullWidth: {
	      width: '100%'
	    },

	    /* Styles applied to the `input` element. */
	    input: {
	      font: 'inherit',
	      letterSpacing: 'inherit',
	      color: 'currentColor',
	      padding: "".concat(8 - 2, "px 0 ").concat(8 - 1, "px"),
	      border: 0,
	      boxSizing: 'content-box',
	      background: 'none',
	      height: '1.1876em',
	      // Reset (19px), match the native input line-height
	      margin: 0,
	      // Reset for Safari
	      WebkitTapHighlightColor: 'transparent',
	      display: 'block',
	      // Make the flex item shrink with Firefox
	      minWidth: 0,
	      width: '100%',
	      // Fix IE 11 width issue
	      animationName: 'mui-auto-fill-cancel',
	      animationDuration: '10ms',
	      '&::-webkit-input-placeholder': placeholder,
	      '&::-moz-placeholder': placeholder,
	      // Firefox 19+
	      '&:-ms-input-placeholder': placeholder,
	      // IE 11
	      '&::-ms-input-placeholder': placeholder,
	      // Edge
	      '&:focus': {
	        outline: 0
	      },
	      // Reset Firefox invalid required input style
	      '&:invalid': {
	        boxShadow: 'none'
	      },
	      '&::-webkit-search-decoration': {
	        // Remove the padding when type=search.
	        '-webkit-appearance': 'none'
	      },
	      // Show and hide the placeholder logic
	      'label[data-shrink=false] + $formControl &': {
	        '&::-webkit-input-placeholder': placeholderHidden,
	        '&::-moz-placeholder': placeholderHidden,
	        // Firefox 19+
	        '&:-ms-input-placeholder': placeholderHidden,
	        // IE 11
	        '&::-ms-input-placeholder': placeholderHidden,
	        // Edge
	        '&:focus::-webkit-input-placeholder': placeholderVisible,
	        '&:focus::-moz-placeholder': placeholderVisible,
	        // Firefox 19+
	        '&:focus:-ms-input-placeholder': placeholderVisible,
	        // IE 11
	        '&:focus::-ms-input-placeholder': placeholderVisible // Edge

	      },
	      '&$disabled': {
	        opacity: 1 // Reset iOS opacity

	      },
	      '&:-webkit-autofill': {
	        animationDuration: '5000s',
	        animationName: 'mui-auto-fill'
	      }
	    },

	    /* Styles applied to the `input` element if `margin="dense"`. */
	    inputMarginDense: {
	      paddingTop: 4 - 1
	    },

	    /* Styles applied to the `input` element if `multiline={true}`. */
	    inputMultiline: {
	      height: 'auto',
	      resize: 'none',
	      padding: 0
	    },

	    /* Styles applied to the `input` element if `type="search"`. */
	    inputTypeSearch: {
	      // Improve type search style.
	      '-moz-appearance': 'textfield',
	      '-webkit-appearance': 'textfield'
	    },

	    /* Styles applied to the `input` element if `startAdornment` is provided. */
	    inputAdornedStart: {},

	    /* Styles applied to the `input` element if `endAdornment` is provided. */
	    inputAdornedEnd: {},

	    /* Styles applied to the `input` element if `hiddenLabel={true}`. */
	    inputHiddenLabel: {}
	  };
	};
	var useEnhancedEffect$4 = typeof window === 'undefined' ? React.useEffect : React.useLayoutEffect;
	/**
	 * `InputBase` contains as few styles as possible.
	 * It aims to be a simple building block for creating an input.
	 * It contains a load of style reset and some state logic.
	 */

	var InputBase = /*#__PURE__*/React.forwardRef(function InputBase(props, ref) {
	  var ariaDescribedby = props['aria-describedby'],
	      autoComplete = props.autoComplete,
	      autoFocus = props.autoFocus,
	      classes = props.classes,
	      className = props.className,
	      color = props.color,
	      defaultValue = props.defaultValue,
	      disabled = props.disabled,
	      endAdornment = props.endAdornment,
	      error = props.error,
	      _props$fullWidth = props.fullWidth,
	      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
	      id = props.id,
	      _props$inputComponent = props.inputComponent,
	      inputComponent = _props$inputComponent === void 0 ? 'input' : _props$inputComponent,
	      _props$inputProps = props.inputProps,
	      inputPropsProp = _props$inputProps === void 0 ? {} : _props$inputProps,
	      inputRefProp = props.inputRef,
	      margin = props.margin,
	      _props$multiline = props.multiline,
	      multiline = _props$multiline === void 0 ? false : _props$multiline,
	      name = props.name,
	      onBlur = props.onBlur,
	      onChange = props.onChange,
	      onClick = props.onClick,
	      onFocus = props.onFocus,
	      onKeyDown = props.onKeyDown,
	      onKeyUp = props.onKeyUp,
	      placeholder = props.placeholder,
	      readOnly = props.readOnly,
	      renderSuffix = props.renderSuffix,
	      rows = props.rows,
	      rowsMax = props.rowsMax,
	      rowsMin = props.rowsMin,
	      startAdornment = props.startAdornment,
	      _props$type = props.type,
	      type = _props$type === void 0 ? 'text' : _props$type,
	      valueProp = props.value,
	      other = _objectWithoutProperties(props, ["aria-describedby", "autoComplete", "autoFocus", "classes", "className", "color", "defaultValue", "disabled", "endAdornment", "error", "fullWidth", "id", "inputComponent", "inputProps", "inputRef", "margin", "multiline", "name", "onBlur", "onChange", "onClick", "onFocus", "onKeyDown", "onKeyUp", "placeholder", "readOnly", "renderSuffix", "rows", "rowsMax", "rowsMin", "startAdornment", "type", "value"]);

	  var value = inputPropsProp.value != null ? inputPropsProp.value : valueProp;

	  var _React$useRef = React.useRef(value != null),
	      isControlled = _React$useRef.current;

	  var inputRef = React.useRef();
	  var handleInputRefWarning = React.useCallback(function (instance) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (instance && instance.nodeName !== 'INPUT' && !instance.focus) {
	        console.error(['Material-UI: You have provided a `inputComponent` to the input component', 'that does not correctly handle the `inputRef` prop.', 'Make sure the `inputRef` prop is called with a HTMLInputElement.'].join('\n'));
	      }
	    }
	  }, []);
	  var handleInputPropsRefProp = useForkRef(inputPropsProp.ref, handleInputRefWarning);
	  var handleInputRefProp = useForkRef(inputRefProp, handleInputPropsRefProp);
	  var handleInputRef = useForkRef(inputRef, handleInputRefProp);

	  var _React$useState = React.useState(false),
	      focused = _React$useState[0],
	      setFocused = _React$useState[1];

	  var muiFormControl = useFormControl();

	  if (process.env.NODE_ENV !== 'production') {
	    // eslint-disable-next-line react-hooks/rules-of-hooks
	    React.useEffect(function () {
	      if (muiFormControl) {
	        return muiFormControl.registerEffect();
	      }

	      return undefined;
	    }, [muiFormControl]);
	  }

	  var fcs = formControlState({
	    props: props,
	    muiFormControl: muiFormControl,
	    states: ['color', 'disabled', 'error', 'hiddenLabel', 'margin', 'required', 'filled']
	  });
	  fcs.focused = muiFormControl ? muiFormControl.focused : focused; // The blur won't fire when the disabled state is set on a focused input.
	  // We need to book keep the focused state manually.

	  React.useEffect(function () {
	    if (!muiFormControl && disabled && focused) {
	      setFocused(false);

	      if (onBlur) {
	        onBlur();
	      }
	    }
	  }, [muiFormControl, disabled, focused, onBlur]);
	  var onFilled = muiFormControl && muiFormControl.onFilled;
	  var onEmpty = muiFormControl && muiFormControl.onEmpty;
	  var checkDirty = React.useCallback(function (obj) {
	    if (isFilled(obj)) {
	      if (onFilled) {
	        onFilled();
	      }
	    } else if (onEmpty) {
	      onEmpty();
	    }
	  }, [onFilled, onEmpty]);
	  useEnhancedEffect$4(function () {
	    if (isControlled) {
	      checkDirty({
	        value: value
	      });
	    }
	  }, [value, checkDirty, isControlled]);

	  var handleFocus = function handleFocus(event) {
	    // Fix a bug with IE 11 where the focus/blur events are triggered
	    // while the input is disabled.
	    if (fcs.disabled) {
	      event.stopPropagation();
	      return;
	    }

	    if (onFocus) {
	      onFocus(event);
	    }

	    if (inputPropsProp.onFocus) {
	      inputPropsProp.onFocus(event);
	    }

	    if (muiFormControl && muiFormControl.onFocus) {
	      muiFormControl.onFocus(event);
	    } else {
	      setFocused(true);
	    }
	  };

	  var handleBlur = function handleBlur(event) {
	    if (onBlur) {
	      onBlur(event);
	    }

	    if (inputPropsProp.onBlur) {
	      inputPropsProp.onBlur(event);
	    }

	    if (muiFormControl && muiFormControl.onBlur) {
	      muiFormControl.onBlur(event);
	    } else {
	      setFocused(false);
	    }
	  };

	  var handleChange = function handleChange(event) {
	    if (!isControlled) {
	      var element = event.target || inputRef.current;

	      if (element == null) {
	        throw new Error(process.env.NODE_ENV !== "production" ? "Material-UI: Expected valid input target. Did you use a custom `inputComponent` and forget to forward refs? See https://material-ui.com/r/input-component-ref-interface for more info." : formatMuiErrorMessage(1));
	      }

	      checkDirty({
	        value: element.value
	      });
	    }

	    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    if (inputPropsProp.onChange) {
	      inputPropsProp.onChange.apply(inputPropsProp, [event].concat(args));
	    } // Perform in the willUpdate


	    if (onChange) {
	      onChange.apply(void 0, [event].concat(args));
	    }
	  }; // Check the input state on mount, in case it was filled by the user
	  // or auto filled by the browser before the hydration (for SSR).


	  React.useEffect(function () {
	    checkDirty(inputRef.current);
	  }, []); // eslint-disable-line react-hooks/exhaustive-deps

	  var handleClick = function handleClick(event) {
	    if (inputRef.current && event.currentTarget === event.target) {
	      inputRef.current.focus();
	    }

	    if (onClick) {
	      onClick(event);
	    }
	  };

	  var InputComponent = inputComponent;

	  var inputProps = _extends({}, inputPropsProp, {
	    ref: handleInputRef
	  });

	  if (typeof InputComponent !== 'string') {
	    inputProps = _extends({
	      // Rename ref to inputRef as we don't know the
	      // provided `inputComponent` structure.
	      inputRef: handleInputRef,
	      type: type
	    }, inputProps, {
	      ref: null
	    });
	  } else if (multiline) {
	    if (rows && !rowsMax && !rowsMin) {
	      InputComponent = 'textarea';
	    } else {
	      inputProps = _extends({
	        rows: rows,
	        rowsMax: rowsMax
	      }, inputProps);
	      InputComponent = TextareaAutosize;
	    }
	  } else {
	    inputProps = _extends({
	      type: type
	    }, inputProps);
	  }

	  var handleAutoFill = function handleAutoFill(event) {
	    // Provide a fake value as Chrome might not let you access it for security reasons.
	    checkDirty(event.animationName === 'mui-auto-fill-cancel' ? inputRef.current : {
	      value: 'x'
	    });
	  };

	  React.useEffect(function () {
	    if (muiFormControl) {
	      muiFormControl.setAdornedStart(Boolean(startAdornment));
	    }
	  }, [muiFormControl, startAdornment]);
	  return /*#__PURE__*/React.createElement("div", _extends({
	    className: clsx(classes.root, classes["color".concat(capitalize(fcs.color || 'primary'))], className, fcs.disabled && classes.disabled, fcs.error && classes.error, fullWidth && classes.fullWidth, fcs.focused && classes.focused, muiFormControl && classes.formControl, multiline && classes.multiline, startAdornment && classes.adornedStart, endAdornment && classes.adornedEnd, fcs.margin === 'dense' && classes.marginDense),
	    onClick: handleClick,
	    ref: ref
	  }, other), startAdornment, /*#__PURE__*/React.createElement(FormControlContext.Provider, {
	    value: null
	  }, /*#__PURE__*/React.createElement(InputComponent, _extends({
	    "aria-invalid": fcs.error,
	    "aria-describedby": ariaDescribedby,
	    autoComplete: autoComplete,
	    autoFocus: autoFocus,
	    defaultValue: defaultValue,
	    disabled: fcs.disabled,
	    id: id,
	    onAnimationStart: handleAutoFill,
	    name: name,
	    placeholder: placeholder,
	    readOnly: readOnly,
	    required: fcs.required,
	    rows: rows,
	    value: value,
	    onKeyDown: onKeyDown,
	    onKeyUp: onKeyUp
	  }, inputProps, {
	    className: clsx(classes.input, inputPropsProp.className, fcs.disabled && classes.disabled, multiline && classes.inputMultiline, fcs.hiddenLabel && classes.inputHiddenLabel, startAdornment && classes.inputAdornedStart, endAdornment && classes.inputAdornedEnd, type === 'search' && classes.inputTypeSearch, fcs.margin === 'dense' && classes.inputMarginDense),
	    onBlur: handleBlur,
	    onChange: handleChange,
	    onFocus: handleFocus
	  }))), endAdornment, renderSuffix ? renderSuffix(_extends({}, fcs, {
	    startAdornment: startAdornment
	  })) : null);
	});
	process.env.NODE_ENV !== "production" ? InputBase.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * @ignore
	   */
	  'aria-describedby': propTypes.string,

	  /**
	   * This prop helps users to fill forms faster, especially on mobile devices.
	   * The name can be confusing, as it's more like an autofill.
	   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
	   */
	  autoComplete: propTypes.string,

	  /**
	   * If `true`, the `input` element will be focused during the first mount.
	   */
	  autoFocus: propTypes.bool,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.string,

	  /**
	   * The color of the component. It supports those theme colors that make sense for this component.
	   */
	  color: propTypes.oneOf(['primary', 'secondary']),

	  /**
	   * The default `input` element value. Use when the component is not controlled.
	   */
	  defaultValue: propTypes.any,

	  /**
	   * If `true`, the `input` element will be disabled.
	   */
	  disabled: propTypes.bool,

	  /**
	   * End `InputAdornment` for this component.
	   */
	  endAdornment: propTypes.node,

	  /**
	   * If `true`, the input will indicate an error. This is normally obtained via context from
	   * FormControl.
	   */
	  error: propTypes.bool,

	  /**
	   * If `true`, the input will take up the full width of its container.
	   */
	  fullWidth: propTypes.bool,

	  /**
	   * The id of the `input` element.
	   */
	  id: propTypes.string,

	  /**
	   * The component used for the `input` element.
	   * Either a string to use a HTML element or a component.
	   */
	  inputComponent: propTypes.elementType,

	  /**
	   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
	   */
	  inputProps: propTypes.object,

	  /**
	   * Pass a ref to the `input` element.
	   */
	  inputRef: refType,

	  /**
	   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
	   * FormControl.
	   */
	  margin: propTypes.oneOf(['dense', 'none']),

	  /**
	   * If `true`, a textarea element will be rendered.
	   */
	  multiline: propTypes.bool,

	  /**
	   * Name attribute of the `input` element.
	   */
	  name: propTypes.string,

	  /**
	   * Callback fired when the input is blurred.
	   *
	   * Notice that the first argument (event) might be undefined.
	   */
	  onBlur: propTypes.func,

	  /**
	   * Callback fired when the value is changed.
	   *
	   * @param {object} event The event source of the callback.
	   * You can pull out the new value by accessing `event.target.value` (string).
	   */
	  onChange: propTypes.func,

	  /**
	   * @ignore
	   */
	  onClick: propTypes.func,

	  /**
	   * @ignore
	   */
	  onFocus: propTypes.func,

	  /**
	   * @ignore
	   */
	  onKeyDown: propTypes.func,

	  /**
	   * @ignore
	   */
	  onKeyUp: propTypes.func,

	  /**
	   * The short hint displayed in the input before the user enters a value.
	   */
	  placeholder: propTypes.string,

	  /**
	   * It prevents the user from changing the value of the field
	   * (not from interacting with the field).
	   */
	  readOnly: propTypes.bool,

	  /**
	   * @ignore
	   */
	  renderSuffix: propTypes.func,

	  /**
	   * If `true`, the `input` element will be required.
	   */
	  required: propTypes.bool,

	  /**
	   * Number of rows to display when multiline option is set to true.
	   */
	  rows: propTypes.oneOfType([propTypes.number, propTypes.string]),

	  /**
	   * Maximum number of rows to display when multiline option is set to true.
	   */
	  rowsMax: propTypes.oneOfType([propTypes.number, propTypes.string]),

	  /**
	   * Minimum number of rows to display when multiline option is set to true.
	   */
	  rowsMin: propTypes.oneOfType([propTypes.number, propTypes.string]),

	  /**
	   * Start `InputAdornment` for this component.
	   */
	  startAdornment: propTypes.node,

	  /**
	   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
	   */
	  type: propTypes.string,

	  /**
	   * The value of the `input` element, required for a controlled component.
	   */
	  value: propTypes.any
	} : void 0;
	var InputBase$1 = withStyles$1(styles$o, {
	  name: 'MuiInputBase'
	})(InputBase);

	var styles$p = function styles(theme) {
	  var light = theme.palette.type === 'light';
	  var bottomLineColor = light ? 'rgba(0, 0, 0, 0.42)' : 'rgba(255, 255, 255, 0.7)';
	  var backgroundColor = light ? 'rgba(0, 0, 0, 0.09)' : 'rgba(255, 255, 255, 0.09)';
	  return {
	    /* Styles applied to the root element. */
	    root: {
	      position: 'relative',
	      backgroundColor: backgroundColor,
	      borderTopLeftRadius: theme.shape.borderRadius,
	      borderTopRightRadius: theme.shape.borderRadius,
	      transition: theme.transitions.create('background-color', {
	        duration: theme.transitions.duration.shorter,
	        easing: theme.transitions.easing.easeOut
	      }),
	      '&:hover': {
	        backgroundColor: light ? 'rgba(0, 0, 0, 0.13)' : 'rgba(255, 255, 255, 0.13)',
	        // Reset on touch devices, it doesn't add specificity
	        '@media (hover: none)': {
	          backgroundColor: backgroundColor
	        }
	      },
	      '&$focused': {
	        backgroundColor: light ? 'rgba(0, 0, 0, 0.09)' : 'rgba(255, 255, 255, 0.09)'
	      },
	      '&$disabled': {
	        backgroundColor: light ? 'rgba(0, 0, 0, 0.12)' : 'rgba(255, 255, 255, 0.12)'
	      }
	    },

	    /* Styles applied to the root element if color secondary. */
	    colorSecondary: {
	      '&$underline:after': {
	        borderBottomColor: theme.palette.secondary.main
	      }
	    },

	    /* Styles applied to the root element if `disableUnderline={false}`. */
	    underline: {
	      '&:after': {
	        borderBottom: "2px solid ".concat(theme.palette.primary.main),
	        left: 0,
	        bottom: 0,
	        // Doing the other way around crash on IE 11 "''" https://github.com/cssinjs/jss/issues/242
	        content: '""',
	        position: 'absolute',
	        right: 0,
	        transform: 'scaleX(0)',
	        transition: theme.transitions.create('transform', {
	          duration: theme.transitions.duration.shorter,
	          easing: theme.transitions.easing.easeOut
	        }),
	        pointerEvents: 'none' // Transparent to the hover style.

	      },
	      '&$focused:after': {
	        transform: 'scaleX(1)'
	      },
	      '&$error:after': {
	        borderBottomColor: theme.palette.error.main,
	        transform: 'scaleX(1)' // error is always underlined in red

	      },
	      '&:before': {
	        borderBottom: "1px solid ".concat(bottomLineColor),
	        left: 0,
	        bottom: 0,
	        // Doing the other way around crash on IE 11 "''" https://github.com/cssinjs/jss/issues/242
	        content: '"\\00a0"',
	        position: 'absolute',
	        right: 0,
	        transition: theme.transitions.create('border-bottom-color', {
	          duration: theme.transitions.duration.shorter
	        }),
	        pointerEvents: 'none' // Transparent to the hover style.

	      },
	      '&:hover:before': {
	        borderBottom: "1px solid ".concat(theme.palette.text.primary)
	      },
	      '&$disabled:before': {
	        borderBottomStyle: 'dotted'
	      }
	    },

	    /* Pseudo-class applied to the root element if the component is focused. */
	    focused: {},

	    /* Pseudo-class applied to the root element if `disabled={true}`. */
	    disabled: {},

	    /* Styles applied to the root element if `startAdornment` is provided. */
	    adornedStart: {
	      paddingLeft: 12
	    },

	    /* Styles applied to the root element if `endAdornment` is provided. */
	    adornedEnd: {
	      paddingRight: 12
	    },

	    /* Pseudo-class applied to the root element if `error={true}`. */
	    error: {},

	    /* Styles applied to the `input` element if `margin="dense"`. */
	    marginDense: {},

	    /* Styles applied to the root element if `multiline={true}`. */
	    multiline: {
	      padding: '27px 12px 10px',
	      '&$marginDense': {
	        paddingTop: 23,
	        paddingBottom: 6
	      }
	    },

	    /* Styles applied to the `input` element. */
	    input: {
	      padding: '27px 12px 10px',
	      '&:-webkit-autofill': {
	        WebkitBoxShadow: theme.palette.type === 'light' ? null : '0 0 0 100px #266798 inset',
	        WebkitTextFillColor: theme.palette.type === 'light' ? null : '#fff',
	        caretColor: theme.palette.type === 'light' ? null : '#fff',
	        borderTopLeftRadius: 'inherit',
	        borderTopRightRadius: 'inherit'
	      }
	    },

	    /* Styles applied to the `input` element if `margin="dense"`. */
	    inputMarginDense: {
	      paddingTop: 23,
	      paddingBottom: 6
	    },

	    /* Styles applied to the `input` if in `<FormControl hiddenLabel />`. */
	    inputHiddenLabel: {
	      paddingTop: 18,
	      paddingBottom: 19,
	      '&$inputMarginDense': {
	        paddingTop: 10,
	        paddingBottom: 11
	      }
	    },

	    /* Styles applied to the `input` element if `multiline={true}`. */
	    inputMultiline: {
	      padding: 0
	    },

	    /* Styles applied to the `input` element if `startAdornment` is provided. */
	    inputAdornedStart: {
	      paddingLeft: 0
	    },

	    /* Styles applied to the `input` element if `endAdornment` is provided. */
	    inputAdornedEnd: {
	      paddingRight: 0
	    }
	  };
	};
	var FilledInput = /*#__PURE__*/React.forwardRef(function FilledInput(props, ref) {
	  var disableUnderline = props.disableUnderline,
	      classes = props.classes,
	      _props$fullWidth = props.fullWidth,
	      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
	      _props$inputComponent = props.inputComponent,
	      inputComponent = _props$inputComponent === void 0 ? 'input' : _props$inputComponent,
	      _props$multiline = props.multiline,
	      multiline = _props$multiline === void 0 ? false : _props$multiline,
	      _props$type = props.type,
	      type = _props$type === void 0 ? 'text' : _props$type,
	      other = _objectWithoutProperties(props, ["disableUnderline", "classes", "fullWidth", "inputComponent", "multiline", "type"]);

	  return /*#__PURE__*/React.createElement(InputBase$1, _extends({
	    classes: _extends({}, classes, {
	      root: clsx(classes.root, !disableUnderline && classes.underline),
	      underline: null
	    }),
	    fullWidth: fullWidth,
	    inputComponent: inputComponent,
	    multiline: multiline,
	    ref: ref,
	    type: type
	  }, other));
	});
	process.env.NODE_ENV !== "production" ? FilledInput.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * This prop helps users to fill forms faster, especially on mobile devices.
	   * The name can be confusing, as it's more like an autofill.
	   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
	   */
	  autoComplete: propTypes.string,

	  /**
	   * If `true`, the `input` element will be focused during the first mount.
	   */
	  autoFocus: propTypes.bool,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object,

	  /**
	   * The color of the component. It supports those theme colors that make sense for this component.
	   */
	  color: propTypes.oneOf(['primary', 'secondary']),

	  /**
	   * The default `input` element value. Use when the component is not controlled.
	   */
	  defaultValue: propTypes.any,

	  /**
	   * If `true`, the `input` element will be disabled.
	   */
	  disabled: propTypes.bool,

	  /**
	   * If `true`, the input will not have an underline.
	   */
	  disableUnderline: propTypes.bool,

	  /**
	   * End `InputAdornment` for this component.
	   */
	  endAdornment: propTypes.node,

	  /**
	   * If `true`, the input will indicate an error. This is normally obtained via context from
	   * FormControl.
	   */
	  error: propTypes.bool,

	  /**
	   * If `true`, the input will take up the full width of its container.
	   */
	  fullWidth: propTypes.bool,

	  /**
	   * The id of the `input` element.
	   */
	  id: propTypes.string,

	  /**
	   * The component used for the `input` element.
	   * Either a string to use a HTML element or a component.
	   */
	  inputComponent: propTypes.elementType,

	  /**
	   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
	   */
	  inputProps: propTypes.object,

	  /**
	   * Pass a ref to the `input` element.
	   */
	  inputRef: refType,

	  /**
	   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
	   * FormControl.
	   */
	  margin: propTypes.oneOf(['dense', 'none']),

	  /**
	   * If `true`, a textarea element will be rendered.
	   */
	  multiline: propTypes.bool,

	  /**
	   * Name attribute of the `input` element.
	   */
	  name: propTypes.string,

	  /**
	   * Callback fired when the value is changed.
	   *
	   * @param {object} event The event source of the callback.
	   * You can pull out the new value by accessing `event.target.value` (string).
	   */
	  onChange: propTypes.func,

	  /**
	   * The short hint displayed in the input before the user enters a value.
	   */
	  placeholder: propTypes.string,

	  /**
	   * It prevents the user from changing the value of the field
	   * (not from interacting with the field).
	   */
	  readOnly: propTypes.bool,

	  /**
	   * If `true`, the `input` element will be required.
	   */
	  required: propTypes.bool,

	  /**
	   * Number of rows to display when multiline option is set to true.
	   */
	  rows: propTypes.oneOfType([propTypes.number, propTypes.string]),

	  /**
	   * Maximum number of rows to display when multiline option is set to true.
	   */
	  rowsMax: propTypes.oneOfType([propTypes.number, propTypes.string]),

	  /**
	   * Start `InputAdornment` for this component.
	   */
	  startAdornment: propTypes.node,

	  /**
	   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
	   */
	  type: propTypes.string,

	  /**
	   * The value of the `input` element, required for a controlled component.
	   */
	  value: propTypes.any
	} : void 0;
	FilledInput.muiName = 'Input';
	var FilledInput$1 = withStyles$1(styles$p, {
	  name: 'MuiFilledInput'
	})(FilledInput);

	var styles$q = {
	  /* Styles applied to the root element. */
	  root: {
	    display: 'inline-flex',
	    flexDirection: 'column',
	    position: 'relative',
	    // Reset fieldset default style.
	    minWidth: 0,
	    padding: 0,
	    margin: 0,
	    border: 0,
	    verticalAlign: 'top' // Fix alignment issue on Safari.

	  },

	  /* Styles applied to the root element if `margin="normal"`. */
	  marginNormal: {
	    marginTop: 16,
	    marginBottom: 8
	  },

	  /* Styles applied to the root element if `margin="dense"`. */
	  marginDense: {
	    marginTop: 8,
	    marginBottom: 4
	  },

	  /* Styles applied to the root element if `fullWidth={true}`. */
	  fullWidth: {
	    width: '100%'
	  }
	};
	/**
	 * Provides context such as filled/focused/error/required for form inputs.
	 * Relying on the context provides high flexibility and ensures that the state always stays
	 * consistent across the children of the `FormControl`.
	 * This context is used by the following components:
	 *
	 *  - FormLabel
	 *  - FormHelperText
	 *  - Input
	 *  - InputLabel
	 *
	 * You can find one composition example below and more going to [the demos](/components/text-fields/#components).
	 *
	 * ```jsx
	 * <FormControl>
	 *   <InputLabel htmlFor="my-input">Email address</InputLabel>
	 *   <Input id="my-input" aria-describedby="my-helper-text" />
	 *   <FormHelperText id="my-helper-text">We'll never share your email.</FormHelperText>
	 * </FormControl>
	 * ```
	 *
	 * ⚠️Only one input can be used within a FormControl.
	 */

	var FormControl = /*#__PURE__*/React.forwardRef(function FormControl(props, ref) {
	  var children = props.children,
	      classes = props.classes,
	      className = props.className,
	      _props$color = props.color,
	      color = _props$color === void 0 ? 'primary' : _props$color,
	      _props$component = props.component,
	      Component = _props$component === void 0 ? 'div' : _props$component,
	      _props$disabled = props.disabled,
	      disabled = _props$disabled === void 0 ? false : _props$disabled,
	      _props$error = props.error,
	      error = _props$error === void 0 ? false : _props$error,
	      _props$fullWidth = props.fullWidth,
	      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
	      visuallyFocused = props.focused,
	      _props$hiddenLabel = props.hiddenLabel,
	      hiddenLabel = _props$hiddenLabel === void 0 ? false : _props$hiddenLabel,
	      _props$margin = props.margin,
	      margin = _props$margin === void 0 ? 'none' : _props$margin,
	      _props$required = props.required,
	      required = _props$required === void 0 ? false : _props$required,
	      size = props.size,
	      _props$variant = props.variant,
	      variant = _props$variant === void 0 ? 'standard' : _props$variant,
	      other = _objectWithoutProperties(props, ["children", "classes", "className", "color", "component", "disabled", "error", "fullWidth", "focused", "hiddenLabel", "margin", "required", "size", "variant"]);

	  var _React$useState = React.useState(function () {
	    // We need to iterate through the children and find the Input in order
	    // to fully support server-side rendering.
	    var initialAdornedStart = false;

	    if (children) {
	      React.Children.forEach(children, function (child) {
	        if (!isMuiElement(child, ['Input', 'Select'])) {
	          return;
	        }

	        var input = isMuiElement(child, ['Select']) ? child.props.input : child;

	        if (input && isAdornedStart(input.props)) {
	          initialAdornedStart = true;
	        }
	      });
	    }

	    return initialAdornedStart;
	  }),
	      adornedStart = _React$useState[0],
	      setAdornedStart = _React$useState[1];

	  var _React$useState2 = React.useState(function () {
	    // We need to iterate through the children and find the Input in order
	    // to fully support server-side rendering.
	    var initialFilled = false;

	    if (children) {
	      React.Children.forEach(children, function (child) {
	        if (!isMuiElement(child, ['Input', 'Select'])) {
	          return;
	        }

	        if (isFilled(child.props, true)) {
	          initialFilled = true;
	        }
	      });
	    }

	    return initialFilled;
	  }),
	      filled = _React$useState2[0],
	      setFilled = _React$useState2[1];

	  var _React$useState3 = React.useState(false),
	      _focused = _React$useState3[0],
	      setFocused = _React$useState3[1];

	  var focused = visuallyFocused !== undefined ? visuallyFocused : _focused;

	  if (disabled && focused) {
	    setFocused(false);
	  }

	  var registerEffect;

	  if (process.env.NODE_ENV !== 'production') {
	    // eslint-disable-next-line react-hooks/rules-of-hooks
	    var registeredInput = React.useRef(false);

	    registerEffect = function registerEffect() {
	      if (registeredInput.current) {
	        console.error(['Material-UI: There are multiple InputBase components inside a FormControl.', 'This is not supported. It might cause infinite rendering loops.', 'Only use one InputBase.'].join('\n'));
	      }

	      registeredInput.current = true;
	      return function () {
	        registeredInput.current = false;
	      };
	    };
	  }

	  var onFilled = React.useCallback(function () {
	    setFilled(true);
	  }, []);
	  var onEmpty = React.useCallback(function () {
	    setFilled(false);
	  }, []);
	  var childContext = {
	    adornedStart: adornedStart,
	    setAdornedStart: setAdornedStart,
	    color: color,
	    disabled: disabled,
	    error: error,
	    filled: filled,
	    focused: focused,
	    fullWidth: fullWidth,
	    hiddenLabel: hiddenLabel,
	    margin: (size === 'small' ? 'dense' : undefined) || margin,
	    onBlur: function onBlur() {
	      setFocused(false);
	    },
	    onEmpty: onEmpty,
	    onFilled: onFilled,
	    onFocus: function onFocus() {
	      setFocused(true);
	    },
	    registerEffect: registerEffect,
	    required: required,
	    variant: variant
	  };
	  return /*#__PURE__*/React.createElement(FormControlContext.Provider, {
	    value: childContext
	  }, /*#__PURE__*/React.createElement(Component, _extends({
	    className: clsx(classes.root, className, margin !== 'none' && classes["margin".concat(capitalize(margin))], fullWidth && classes.fullWidth),
	    ref: ref
	  }, other), children));
	});
	process.env.NODE_ENV !== "production" ? FormControl.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The contents of the form control.
	   */
	  children: propTypes.node,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.string,

	  /**
	   * The color of the component. It supports those theme colors that make sense for this component.
	   */
	  color: propTypes.oneOf(['primary', 'secondary']),

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes
	  /* @typescript-to-proptypes-ignore */
	  .elementType,

	  /**
	   * If `true`, the label, input and helper text should be displayed in a disabled state.
	   */
	  disabled: propTypes.bool,

	  /**
	   * If `true`, the label should be displayed in an error state.
	   */
	  error: propTypes.bool,

	  /**
	   * If `true`, the component will be displayed in focused state.
	   */
	  focused: propTypes.bool,

	  /**
	   * If `true`, the component will take up the full width of its container.
	   */
	  fullWidth: propTypes.bool,

	  /**
	   * If `true`, the label will be hidden.
	   * This is used to increase density for a `FilledInput`.
	   * Be sure to add `aria-label` to the `input` element.
	   */
	  hiddenLabel: propTypes.bool,

	  /**
	   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
	   */
	  margin: propTypes.oneOf(['dense', 'none', 'normal']),

	  /**
	   * If `true`, the label will indicate that the input is required.
	   */
	  required: propTypes.bool,

	  /**
	   * The size of the text field.
	   */
	  size: propTypes.oneOf(['medium', 'small']),

	  /**
	   * The variant to use.
	   */
	  variant: propTypes.oneOf(['filled', 'outlined', 'standard'])
	} : void 0;
	var FormControl$1 = withStyles$1(styles$q, {
	  name: 'MuiFormControl'
	})(FormControl);

	var styles$r = function styles(theme) {
	  return {
	    /* Styles applied to the root element. */
	    root: {
	      display: 'inline-flex',
	      alignItems: 'center',
	      cursor: 'pointer',
	      // For correct alignment with the text.
	      verticalAlign: 'middle',
	      WebkitTapHighlightColor: 'transparent',
	      marginLeft: -11,
	      marginRight: 16,
	      // used for row presentation of radio/checkbox
	      '&$disabled': {
	        cursor: 'default'
	      }
	    },

	    /* Styles applied to the root element if `labelPlacement="start"`. */
	    labelPlacementStart: {
	      flexDirection: 'row-reverse',
	      marginLeft: 16,
	      // used for row presentation of radio/checkbox
	      marginRight: -11
	    },

	    /* Styles applied to the root element if `labelPlacement="top"`. */
	    labelPlacementTop: {
	      flexDirection: 'column-reverse',
	      marginLeft: 16
	    },

	    /* Styles applied to the root element if `labelPlacement="bottom"`. */
	    labelPlacementBottom: {
	      flexDirection: 'column',
	      marginLeft: 16
	    },

	    /* Pseudo-class applied to the root element if `disabled={true}`. */
	    disabled: {},

	    /* Styles applied to the label's Typography component. */
	    label: {
	      '&$disabled': {
	        color: theme.palette.text.disabled
	      }
	    }
	  };
	};
	/**
	 * Drop in replacement of the `Radio`, `Switch` and `Checkbox` component.
	 * Use this component if you want to display an extra label.
	 */

	var FormControlLabel = /*#__PURE__*/React.forwardRef(function FormControlLabel(props, ref) {
	  var checked = props.checked,
	      classes = props.classes,
	      className = props.className,
	      control = props.control,
	      disabledProp = props.disabled,
	      inputRef = props.inputRef,
	      label = props.label,
	      _props$labelPlacement = props.labelPlacement,
	      labelPlacement = _props$labelPlacement === void 0 ? 'end' : _props$labelPlacement,
	      name = props.name,
	      onChange = props.onChange,
	      value = props.value,
	      other = _objectWithoutProperties(props, ["checked", "classes", "className", "control", "disabled", "inputRef", "label", "labelPlacement", "name", "onChange", "value"]);

	  var muiFormControl = useFormControl$1();
	  var disabled = disabledProp;

	  if (typeof disabled === 'undefined' && typeof control.props.disabled !== 'undefined') {
	    disabled = control.props.disabled;
	  }

	  if (typeof disabled === 'undefined' && muiFormControl) {
	    disabled = muiFormControl.disabled;
	  }

	  var controlProps = {
	    disabled: disabled
	  };
	  ['checked', 'name', 'onChange', 'value', 'inputRef'].forEach(function (key) {
	    if (typeof control.props[key] === 'undefined' && typeof props[key] !== 'undefined') {
	      controlProps[key] = props[key];
	    }
	  });
	  return /*#__PURE__*/React.createElement("label", _extends({
	    className: clsx(classes.root, className, labelPlacement !== 'end' && classes["labelPlacement".concat(capitalize(labelPlacement))], disabled && classes.disabled),
	    ref: ref
	  }, other), /*#__PURE__*/React.cloneElement(control, controlProps), /*#__PURE__*/React.createElement(Typography$1, {
	    component: "span",
	    className: clsx(classes.label, disabled && classes.disabled)
	  }, label));
	});
	process.env.NODE_ENV !== "production" ? FormControlLabel.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * If `true`, the component appears selected.
	   */
	  checked: propTypes.bool,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.string,

	  /**
	   * A control element. For instance, it can be be a `Radio`, a `Switch` or a `Checkbox`.
	   */
	  control: propTypes.element.isRequired,

	  /**
	   * If `true`, the control will be disabled.
	   */
	  disabled: propTypes.bool,

	  /**
	   * Pass a ref to the `input` element.
	   */
	  inputRef: refType,

	  /**
	   * The text to be used in an enclosing label element.
	   */
	  label: propTypes.node,

	  /**
	   * The position of the label.
	   */
	  labelPlacement: propTypes.oneOf(['bottom', 'end', 'start', 'top']),

	  /**
	   * @ignore
	   */
	  name: propTypes.string,

	  /**
	   * Callback fired when the state is changed.
	   *
	   * @param {object} event The event source of the callback.
	   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
	   */
	  onChange: propTypes.func,

	  /**
	   * The value of the component.
	   */
	  value: propTypes.any
	} : void 0;
	var FormControlLabel$1 = withStyles$1(styles$r, {
	  name: 'MuiFormControlLabel'
	})(FormControlLabel);

	var styles$s = function styles(theme) {
	  return {
	    /* Styles applied to the root element. */
	    root: _extends({
	      color: theme.palette.text.secondary
	    }, theme.typography.caption, {
	      textAlign: 'left',
	      marginTop: 3,
	      margin: 0,
	      '&$disabled': {
	        color: theme.palette.text.disabled
	      },
	      '&$error': {
	        color: theme.palette.error.main
	      }
	    }),

	    /* Pseudo-class applied to the root element if `error={true}`. */
	    error: {},

	    /* Pseudo-class applied to the root element if `disabled={true}`. */
	    disabled: {},

	    /* Styles applied to the root element if `margin="dense"`. */
	    marginDense: {
	      marginTop: 4
	    },

	    /* Styles applied to the root element if `variant="filled"` or `variant="outlined"`. */
	    contained: {
	      marginLeft: 14,
	      marginRight: 14
	    },

	    /* Pseudo-class applied to the root element if `focused={true}`. */
	    focused: {},

	    /* Pseudo-class applied to the root element if `filled={true}`. */
	    filled: {},

	    /* Pseudo-class applied to the root element if `required={true}`. */
	    required: {}
	  };
	};
	var FormHelperText = /*#__PURE__*/React.forwardRef(function FormHelperText(props, ref) {
	  var children = props.children,
	      classes = props.classes,
	      className = props.className,
	      _props$component = props.component,
	      Component = _props$component === void 0 ? 'p' : _props$component,
	      disabled = props.disabled,
	      error = props.error,
	      filled = props.filled,
	      focused = props.focused,
	      margin = props.margin,
	      required = props.required,
	      variant = props.variant,
	      other = _objectWithoutProperties(props, ["children", "classes", "className", "component", "disabled", "error", "filled", "focused", "margin", "required", "variant"]);

	  var muiFormControl = useFormControl$1();
	  var fcs = formControlState({
	    props: props,
	    muiFormControl: muiFormControl,
	    states: ['variant', 'margin', 'disabled', 'error', 'filled', 'focused', 'required']
	  });
	  return /*#__PURE__*/React.createElement(Component, _extends({
	    className: clsx(classes.root, (fcs.variant === 'filled' || fcs.variant === 'outlined') && classes.contained, className, fcs.disabled && classes.disabled, fcs.error && classes.error, fcs.filled && classes.filled, fcs.focused && classes.focused, fcs.required && classes.required, fcs.margin === 'dense' && classes.marginDense),
	    ref: ref
	  }, other), children === ' ' ?
	  /*#__PURE__*/
	  // eslint-disable-next-line react/no-danger
	  React.createElement("span", {
	    dangerouslySetInnerHTML: {
	      __html: '&#8203;'
	    }
	  }) : children);
	});
	process.env.NODE_ENV !== "production" ? FormHelperText.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   *
	   * If `' '` is provided, the component reserves one line height for displaying a future message.
	   */
	  children: propTypes.node,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes
	  /* @typescript-to-proptypes-ignore */
	  .elementType,

	  /**
	   * If `true`, the helper text should be displayed in a disabled state.
	   */
	  disabled: propTypes.bool,

	  /**
	   * If `true`, helper text should be displayed in an error state.
	   */
	  error: propTypes.bool,

	  /**
	   * If `true`, the helper text should use filled classes key.
	   */
	  filled: propTypes.bool,

	  /**
	   * If `true`, the helper text should use focused classes key.
	   */
	  focused: propTypes.bool,

	  /**
	   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
	   * FormControl.
	   */
	  margin: propTypes.oneOf(['dense']),

	  /**
	   * If `true`, the helper text should use required classes key.
	   */
	  required: propTypes.bool,

	  /**
	   * The variant to use.
	   */
	  variant: propTypes.oneOf(['filled', 'outlined', 'standard'])
	} : void 0;
	var FormHelperText$1 = withStyles$1(styles$s, {
	  name: 'MuiFormHelperText'
	})(FormHelperText);

	var styles$t = function styles(theme) {
	  return {
	    /* Styles applied to the root element. */
	    root: _extends({
	      color: theme.palette.text.secondary
	    }, theme.typography.body1, {
	      lineHeight: 1,
	      padding: 0,
	      '&$focused': {
	        color: theme.palette.primary.main
	      },
	      '&$disabled': {
	        color: theme.palette.text.disabled
	      },
	      '&$error': {
	        color: theme.palette.error.main
	      }
	    }),

	    /* Styles applied to the root element if the color is secondary. */
	    colorSecondary: {
	      '&$focused': {
	        color: theme.palette.secondary.main
	      }
	    },

	    /* Pseudo-class applied to the root element if `focused={true}`. */
	    focused: {},

	    /* Pseudo-class applied to the root element if `disabled={true}`. */
	    disabled: {},

	    /* Pseudo-class applied to the root element if `error={true}`. */
	    error: {},

	    /* Pseudo-class applied to the root element if `filled={true}`. */
	    filled: {},

	    /* Pseudo-class applied to the root element if `required={true}`. */
	    required: {},

	    /* Styles applied to the asterisk element. */
	    asterisk: {
	      '&$error': {
	        color: theme.palette.error.main
	      }
	    }
	  };
	};
	var FormLabel = /*#__PURE__*/React.forwardRef(function FormLabel(props, ref) {
	  var children = props.children,
	      classes = props.classes,
	      className = props.className,
	      color = props.color,
	      _props$component = props.component,
	      Component = _props$component === void 0 ? 'label' : _props$component,
	      disabled = props.disabled,
	      error = props.error,
	      filled = props.filled,
	      focused = props.focused,
	      required = props.required,
	      other = _objectWithoutProperties(props, ["children", "classes", "className", "color", "component", "disabled", "error", "filled", "focused", "required"]);

	  var muiFormControl = useFormControl$1();
	  var fcs = formControlState({
	    props: props,
	    muiFormControl: muiFormControl,
	    states: ['color', 'required', 'focused', 'disabled', 'error', 'filled']
	  });
	  return /*#__PURE__*/React.createElement(Component, _extends({
	    className: clsx(classes.root, classes["color".concat(capitalize(fcs.color || 'primary'))], className, fcs.disabled && classes.disabled, fcs.error && classes.error, fcs.filled && classes.filled, fcs.focused && classes.focused, fcs.required && classes.required),
	    ref: ref
	  }, other), children, fcs.required && /*#__PURE__*/React.createElement("span", {
	    "aria-hidden": true,
	    className: clsx(classes.asterisk, fcs.error && classes.error)
	  }, "\u2009", '*'));
	});
	process.env.NODE_ENV !== "production" ? FormLabel.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The content of the component.
	   */
	  children: propTypes.node,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.string,

	  /**
	   * The color of the component. It supports those theme colors that make sense for this component.
	   */
	  color: propTypes.oneOf(['primary', 'secondary']),

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes
	  /* @typescript-to-proptypes-ignore */
	  .elementType,

	  /**
	   * If `true`, the label should be displayed in a disabled state.
	   */
	  disabled: propTypes.bool,

	  /**
	   * If `true`, the label should be displayed in an error state.
	   */
	  error: propTypes.bool,

	  /**
	   * If `true`, the label should use filled classes key.
	   */
	  filled: propTypes.bool,

	  /**
	   * If `true`, the input of this label is focused (used by `FormGroup` components).
	   */
	  focused: propTypes.bool,

	  /**
	   * If `true`, the label will indicate that the input is required.
	   */
	  required: propTypes.bool
	} : void 0;
	var FormLabel$1 = withStyles$1(styles$t, {
	  name: 'MuiFormLabel'
	})(FormLabel);

	var SPACINGS = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
	var GRID_SIZES = ['auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];

	function generateGrid(globalStyles, theme, breakpoint) {
	  var styles = {};
	  GRID_SIZES.forEach(function (size) {
	    var key = "grid-".concat(breakpoint, "-").concat(size);

	    if (size === true) {
	      // For the auto layouting
	      styles[key] = {
	        flexBasis: 0,
	        flexGrow: 1,
	        maxWidth: '100%'
	      };
	      return;
	    }

	    if (size === 'auto') {
	      styles[key] = {
	        flexBasis: 'auto',
	        flexGrow: 0,
	        maxWidth: 'none'
	      };
	      return;
	    } // Keep 7 significant numbers.


	    var width = "".concat(Math.round(size / 12 * 10e7) / 10e5, "%"); // Close to the bootstrap implementation:
	    // https://github.com/twbs/bootstrap/blob/8fccaa2439e97ec72a4b7dc42ccc1f649790adb0/scss/mixins/_grid.scss#L41

	    styles[key] = {
	      flexBasis: width,
	      flexGrow: 0,
	      maxWidth: width
	    };
	  }); // No need for a media query for the first size.

	  if (breakpoint === 'xs') {
	    _extends(globalStyles, styles);
	  } else {
	    globalStyles[theme.breakpoints.up(breakpoint)] = styles;
	  }
	}

	function getOffset(val) {
	  var div = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
	  var parse = parseFloat(val);
	  return "".concat(parse / div).concat(String(val).replace(String(parse), '') || 'px');
	}

	function generateGutter(theme, breakpoint) {
	  var styles = {};
	  SPACINGS.forEach(function (spacing) {
	    var themeSpacing = theme.spacing(spacing);

	    if (themeSpacing === 0) {
	      return;
	    }

	    styles["spacing-".concat(breakpoint, "-").concat(spacing)] = {
	      margin: "-".concat(getOffset(themeSpacing, 2)),
	      width: "calc(100% + ".concat(getOffset(themeSpacing), ")"),
	      '& > $item': {
	        padding: getOffset(themeSpacing, 2)
	      }
	    };
	  });
	  return styles;
	} // Default CSS values
	// flex: '0 1 auto',
	// flexDirection: 'row',
	// alignItems: 'flex-start',
	// flexWrap: 'nowrap',
	// justifyContent: 'flex-start',


	var styles$u = function styles(theme) {
	  return _extends({
	    /* Styles applied to the root element. */
	    root: {},

	    /* Styles applied to the root element if `container={true}`. */
	    container: {
	      boxSizing: 'border-box',
	      display: 'flex',
	      flexWrap: 'wrap',
	      width: '100%'
	    },

	    /* Styles applied to the root element if `item={true}`. */
	    item: {
	      boxSizing: 'border-box',
	      margin: '0' // For instance, it's useful when used with a `figure` element.

	    },

	    /* Styles applied to the root element if `zeroMinWidth={true}`. */
	    zeroMinWidth: {
	      minWidth: 0
	    },

	    /* Styles applied to the root element if `direction="column"`. */
	    'direction-xs-column': {
	      flexDirection: 'column'
	    },

	    /* Styles applied to the root element if `direction="column-reverse"`. */
	    'direction-xs-column-reverse': {
	      flexDirection: 'column-reverse'
	    },

	    /* Styles applied to the root element if `direction="row-reverse"`. */
	    'direction-xs-row-reverse': {
	      flexDirection: 'row-reverse'
	    },

	    /* Styles applied to the root element if `wrap="nowrap"`. */
	    'wrap-xs-nowrap': {
	      flexWrap: 'nowrap'
	    },

	    /* Styles applied to the root element if `wrap="reverse"`. */
	    'wrap-xs-wrap-reverse': {
	      flexWrap: 'wrap-reverse'
	    },

	    /* Styles applied to the root element if `alignItems="center"`. */
	    'align-items-xs-center': {
	      alignItems: 'center'
	    },

	    /* Styles applied to the root element if `alignItems="flex-start"`. */
	    'align-items-xs-flex-start': {
	      alignItems: 'flex-start'
	    },

	    /* Styles applied to the root element if `alignItems="flex-end"`. */
	    'align-items-xs-flex-end': {
	      alignItems: 'flex-end'
	    },

	    /* Styles applied to the root element if `alignItems="baseline"`. */
	    'align-items-xs-baseline': {
	      alignItems: 'baseline'
	    },

	    /* Styles applied to the root element if `alignContent="center"`. */
	    'align-content-xs-center': {
	      alignContent: 'center'
	    },

	    /* Styles applied to the root element if `alignContent="flex-start"`. */
	    'align-content-xs-flex-start': {
	      alignContent: 'flex-start'
	    },

	    /* Styles applied to the root element if `alignContent="flex-end"`. */
	    'align-content-xs-flex-end': {
	      alignContent: 'flex-end'
	    },

	    /* Styles applied to the root element if `alignContent="space-between"`. */
	    'align-content-xs-space-between': {
	      alignContent: 'space-between'
	    },

	    /* Styles applied to the root element if `alignContent="space-around"`. */
	    'align-content-xs-space-around': {
	      alignContent: 'space-around'
	    },

	    /* Styles applied to the root element if `justify="center"`. */
	    'justify-xs-center': {
	      justifyContent: 'center'
	    },

	    /* Styles applied to the root element if `justify="flex-end"`. */
	    'justify-xs-flex-end': {
	      justifyContent: 'flex-end'
	    },

	    /* Styles applied to the root element if `justify="space-between"`. */
	    'justify-xs-space-between': {
	      justifyContent: 'space-between'
	    },

	    /* Styles applied to the root element if `justify="space-around"`. */
	    'justify-xs-space-around': {
	      justifyContent: 'space-around'
	    },

	    /* Styles applied to the root element if `justify="space-evenly"`. */
	    'justify-xs-space-evenly': {
	      justifyContent: 'space-evenly'
	    }
	  }, generateGutter(theme, 'xs'), theme.breakpoints.keys.reduce(function (accumulator, key) {
	    // Use side effect over immutability for better performance.
	    generateGrid(accumulator, theme, key);
	    return accumulator;
	  }, {}));
	};
	var Grid = /*#__PURE__*/React.forwardRef(function Grid(props, ref) {
	  var _props$alignContent = props.alignContent,
	      alignContent = _props$alignContent === void 0 ? 'stretch' : _props$alignContent,
	      _props$alignItems = props.alignItems,
	      alignItems = _props$alignItems === void 0 ? 'stretch' : _props$alignItems,
	      classes = props.classes,
	      classNameProp = props.className,
	      _props$component = props.component,
	      Component = _props$component === void 0 ? 'div' : _props$component,
	      _props$container = props.container,
	      container = _props$container === void 0 ? false : _props$container,
	      _props$direction = props.direction,
	      direction = _props$direction === void 0 ? 'row' : _props$direction,
	      _props$item = props.item,
	      item = _props$item === void 0 ? false : _props$item,
	      _props$justify = props.justify,
	      justify = _props$justify === void 0 ? 'flex-start' : _props$justify,
	      _props$lg = props.lg,
	      lg = _props$lg === void 0 ? false : _props$lg,
	      _props$md = props.md,
	      md = _props$md === void 0 ? false : _props$md,
	      _props$sm = props.sm,
	      sm = _props$sm === void 0 ? false : _props$sm,
	      _props$spacing = props.spacing,
	      spacing = _props$spacing === void 0 ? 0 : _props$spacing,
	      _props$wrap = props.wrap,
	      wrap = _props$wrap === void 0 ? 'wrap' : _props$wrap,
	      _props$xl = props.xl,
	      xl = _props$xl === void 0 ? false : _props$xl,
	      _props$xs = props.xs,
	      xs = _props$xs === void 0 ? false : _props$xs,
	      _props$zeroMinWidth = props.zeroMinWidth,
	      zeroMinWidth = _props$zeroMinWidth === void 0 ? false : _props$zeroMinWidth,
	      other = _objectWithoutProperties(props, ["alignContent", "alignItems", "classes", "className", "component", "container", "direction", "item", "justify", "lg", "md", "sm", "spacing", "wrap", "xl", "xs", "zeroMinWidth"]);

	  var className = clsx(classes.root, classNameProp, container && [classes.container, spacing !== 0 && classes["spacing-xs-".concat(String(spacing))]], item && classes.item, zeroMinWidth && classes.zeroMinWidth, direction !== 'row' && classes["direction-xs-".concat(String(direction))], wrap !== 'wrap' && classes["wrap-xs-".concat(String(wrap))], alignItems !== 'stretch' && classes["align-items-xs-".concat(String(alignItems))], alignContent !== 'stretch' && classes["align-content-xs-".concat(String(alignContent))], justify !== 'flex-start' && classes["justify-xs-".concat(String(justify))], xs !== false && classes["grid-xs-".concat(String(xs))], sm !== false && classes["grid-sm-".concat(String(sm))], md !== false && classes["grid-md-".concat(String(md))], lg !== false && classes["grid-lg-".concat(String(lg))], xl !== false && classes["grid-xl-".concat(String(xl))]);
	  return /*#__PURE__*/React.createElement(Component, _extends({
	    className: className,
	    ref: ref
	  }, other));
	});
	process.env.NODE_ENV !== "production" ? Grid.propTypes = {
	  /**
	   * Defines the `align-content` style property.
	   * It's applied for all screen sizes.
	   */
	  alignContent: propTypes.oneOf(['stretch', 'center', 'flex-start', 'flex-end', 'space-between', 'space-around']),

	  /**
	   * Defines the `align-items` style property.
	   * It's applied for all screen sizes.
	   */
	  alignItems: propTypes.oneOf(['flex-start', 'center', 'flex-end', 'stretch', 'baseline']),

	  /**
	   * The content of the component.
	   */
	  children: propTypes.node,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object.isRequired,

	  /**
	   * @ignore
	   */
	  className: propTypes.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes
	  /* @typescript-to-proptypes-ignore */
	  .elementType,

	  /**
	   * If `true`, the component will have the flex *container* behavior.
	   * You should be wrapping *items* with a *container*.
	   */
	  container: propTypes.bool,

	  /**
	   * Defines the `flex-direction` style property.
	   * It is applied for all screen sizes.
	   */
	  direction: propTypes.oneOf(['row', 'row-reverse', 'column', 'column-reverse']),

	  /**
	   * If `true`, the component will have the flex *item* behavior.
	   * You should be wrapping *items* with a *container*.
	   */
	  item: propTypes.bool,

	  /**
	   * Defines the `justify-content` style property.
	   * It is applied for all screen sizes.
	   */
	  justify: propTypes.oneOf(['flex-start', 'center', 'flex-end', 'space-between', 'space-around', 'space-evenly']),

	  /**
	   * Defines the number of grids the component is going to use.
	   * It's applied for the `lg` breakpoint and wider screens if not overridden.
	   */
	  lg: propTypes.oneOf([false, 'auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),

	  /**
	   * Defines the number of grids the component is going to use.
	   * It's applied for the `md` breakpoint and wider screens if not overridden.
	   */
	  md: propTypes.oneOf([false, 'auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),

	  /**
	   * Defines the number of grids the component is going to use.
	   * It's applied for the `sm` breakpoint and wider screens if not overridden.
	   */
	  sm: propTypes.oneOf([false, 'auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),

	  /**
	   * Defines the space between the type `item` component.
	   * It can only be used on a type `container` component.
	   */
	  spacing: propTypes.oneOf(SPACINGS),

	  /**
	   * Defines the `flex-wrap` style property.
	   * It's applied for all screen sizes.
	   */
	  wrap: propTypes.oneOf(['nowrap', 'wrap', 'wrap-reverse']),

	  /**
	   * Defines the number of grids the component is going to use.
	   * It's applied for the `xl` breakpoint and wider screens.
	   */
	  xl: propTypes.oneOf([false, 'auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),

	  /**
	   * Defines the number of grids the component is going to use.
	   * It's applied for all the screen sizes with the lowest priority.
	   */
	  xs: propTypes.oneOf([false, 'auto', true, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]),

	  /**
	   * If `true`, it sets `min-width: 0` on the item.
	   * Refer to the limitations section of the documentation to better understand the use case.
	   */
	  zeroMinWidth: propTypes.bool
	} : void 0;
	var StyledGrid = withStyles$1(styles$u, {
	  name: 'MuiGrid'
	})(Grid);

	if (process.env.NODE_ENV !== 'production') {
	  var requireProp = requirePropFactory('Grid');
	  StyledGrid.propTypes = _extends({}, StyledGrid.propTypes, {
	    alignContent: requireProp('container'),
	    alignItems: requireProp('container'),
	    direction: requireProp('container'),
	    justify: requireProp('container'),
	    lg: requireProp('item'),
	    md: requireProp('item'),
	    sm: requireProp('item'),
	    spacing: requireProp('container'),
	    wrap: requireProp('container'),
	    xs: requireProp('item'),
	    zeroMinWidth: requireProp('item')
	  });
	}

	function getScale(value) {
	  return "scale(".concat(value, ", ").concat(Math.pow(value, 2), ")");
	}

	var styles$v = {
	  entering: {
	    opacity: 1,
	    transform: getScale(1)
	  },
	  entered: {
	    opacity: 1,
	    transform: 'none'
	  }
	};
	/**
	 * The Grow transition is used by the [Tooltip](/components/tooltips/) and
	 * [Popover](/components/popover/) components.
	 * It uses [react-transition-group](https://github.com/reactjs/react-transition-group) internally.
	 */

	var Grow = /*#__PURE__*/React.forwardRef(function Grow(props, ref) {
	  var children = props.children,
	      _props$disableStrictM = props.disableStrictModeCompat,
	      disableStrictModeCompat = _props$disableStrictM === void 0 ? false : _props$disableStrictM,
	      inProp = props.in,
	      onEnter = props.onEnter,
	      onEntered = props.onEntered,
	      onEntering = props.onEntering,
	      onExit = props.onExit,
	      onExited = props.onExited,
	      onExiting = props.onExiting,
	      style = props.style,
	      _props$timeout = props.timeout,
	      timeout = _props$timeout === void 0 ? 'auto' : _props$timeout,
	      _props$TransitionComp = props.TransitionComponent,
	      TransitionComponent = _props$TransitionComp === void 0 ? Transition : _props$TransitionComp,
	      other = _objectWithoutProperties(props, ["children", "disableStrictModeCompat", "in", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "style", "timeout", "TransitionComponent"]);

	  var timer = React.useRef();
	  var autoTimeout = React.useRef();
	  var theme = useTheme$1();
	  var enableStrictModeCompat = theme.unstable_strictMode && !disableStrictModeCompat;
	  var nodeRef = React.useRef(null);
	  var foreignRef = useForkRef(children.ref, ref);
	  var handleRef = useForkRef(enableStrictModeCompat ? nodeRef : undefined, foreignRef);

	  var normalizedTransitionCallback = function normalizedTransitionCallback(callback) {
	    return function (nodeOrAppearing, maybeAppearing) {
	      if (callback) {
	        var _ref = enableStrictModeCompat ? [nodeRef.current, nodeOrAppearing] : [nodeOrAppearing, maybeAppearing],
	            _ref2 = _slicedToArray(_ref, 2),
	            node = _ref2[0],
	            isAppearing = _ref2[1]; // onEnterXxx and onExitXxx callbacks have a different arguments.length value.


	        if (isAppearing === undefined) {
	          callback(node);
	        } else {
	          callback(node, isAppearing);
	        }
	      }
	    };
	  };

	  var handleEntering = normalizedTransitionCallback(onEntering);
	  var handleEnter = normalizedTransitionCallback(function (node, isAppearing) {
	    reflow(node); // So the animation always start from the start.

	    var _getTransitionProps = getTransitionProps({
	      style: style,
	      timeout: timeout
	    }, {
	      mode: 'enter'
	    }),
	        transitionDuration = _getTransitionProps.duration,
	        delay = _getTransitionProps.delay;

	    var duration;

	    if (timeout === 'auto') {
	      duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
	      autoTimeout.current = duration;
	    } else {
	      duration = transitionDuration;
	    }

	    node.style.transition = [theme.transitions.create('opacity', {
	      duration: duration,
	      delay: delay
	    }), theme.transitions.create('transform', {
	      duration: duration * 0.666,
	      delay: delay
	    })].join(',');

	    if (onEnter) {
	      onEnter(node, isAppearing);
	    }
	  });
	  var handleEntered = normalizedTransitionCallback(onEntered);
	  var handleExiting = normalizedTransitionCallback(onExiting);
	  var handleExit = normalizedTransitionCallback(function (node) {
	    var _getTransitionProps2 = getTransitionProps({
	      style: style,
	      timeout: timeout
	    }, {
	      mode: 'exit'
	    }),
	        transitionDuration = _getTransitionProps2.duration,
	        delay = _getTransitionProps2.delay;

	    var duration;

	    if (timeout === 'auto') {
	      duration = theme.transitions.getAutoHeightDuration(node.clientHeight);
	      autoTimeout.current = duration;
	    } else {
	      duration = transitionDuration;
	    }

	    node.style.transition = [theme.transitions.create('opacity', {
	      duration: duration,
	      delay: delay
	    }), theme.transitions.create('transform', {
	      duration: duration * 0.666,
	      delay: delay || duration * 0.333
	    })].join(',');
	    node.style.opacity = '0';
	    node.style.transform = getScale(0.75);

	    if (onExit) {
	      onExit(node);
	    }
	  });
	  var handleExited = normalizedTransitionCallback(onExited);

	  var addEndListener = function addEndListener(nodeOrNext, maybeNext) {
	    var next = enableStrictModeCompat ? nodeOrNext : maybeNext;

	    if (timeout === 'auto') {
	      timer.current = setTimeout(next, autoTimeout.current || 0);
	    }
	  };

	  React.useEffect(function () {
	    return function () {
	      clearTimeout(timer.current);
	    };
	  }, []);
	  return /*#__PURE__*/React.createElement(TransitionComponent, _extends({
	    appear: true,
	    in: inProp,
	    nodeRef: enableStrictModeCompat ? nodeRef : undefined,
	    onEnter: handleEnter,
	    onEntered: handleEntered,
	    onEntering: handleEntering,
	    onExit: handleExit,
	    onExited: handleExited,
	    onExiting: handleExiting,
	    addEndListener: addEndListener,
	    timeout: timeout === 'auto' ? null : timeout
	  }, other), function (state, childProps) {
	    return /*#__PURE__*/React.cloneElement(children, _extends({
	      style: _extends({
	        opacity: 0,
	        transform: getScale(0.75),
	        visibility: state === 'exited' && !inProp ? 'hidden' : undefined
	      }, styles$v[state], style, children.props.style),
	      ref: handleRef
	    }, childProps));
	  });
	});
	process.env.NODE_ENV !== "production" ? Grow.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * A single child content element.
	   */
	  children: propTypes.element,

	  /**
	   * Enable this prop if you encounter 'Function components cannot be given refs',
	   * use `unstable_createStrictModeTheme`,
	   * and can't forward the ref in the child component.
	   */
	  disableStrictModeCompat: propTypes.bool,

	  /**
	   * If `true`, show the component; triggers the enter or exit animation.
	   */
	  in: propTypes.bool,

	  /**
	   * @ignore
	   */
	  onEnter: propTypes.func,

	  /**
	   * @ignore
	   */
	  onEntered: propTypes.func,

	  /**
	   * @ignore
	   */
	  onEntering: propTypes.func,

	  /**
	   * @ignore
	   */
	  onExit: propTypes.func,

	  /**
	   * @ignore
	   */
	  onExited: propTypes.func,

	  /**
	   * @ignore
	   */
	  onExiting: propTypes.func,

	  /**
	   * @ignore
	   */
	  style: propTypes.object,

	  /**
	   * The duration for the transition, in milliseconds.
	   * You may specify a single timeout for all transitions, or individually with an object.
	   *
	   * Set to 'auto' to automatically calculate transition time based on height.
	   */
	  timeout: propTypes.oneOfType([propTypes.oneOf(['auto']), propTypes.number, propTypes.shape({
	    appear: propTypes.number,
	    enter: propTypes.number,
	    exit: propTypes.number
	  })])
	} : void 0;
	Grow.muiSupportAuto = true;

	function useMediaQuery(queryInput) {
	  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	  var theme = useTheme();
	  var props = getThemeProps({
	    theme: theme,
	    name: 'MuiUseMediaQuery',
	    props: {}
	  });

	  if (process.env.NODE_ENV !== 'production') {
	    if (typeof queryInput === 'function' && theme === null) {
	      console.error(['Material-UI: The `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\n'));
	    }
	  }

	  var query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;
	  query = query.replace(/^@media( ?)/m, ''); // Wait for jsdom to support the match media feature.
	  // All the browsers Material-UI support have this built-in.
	  // This defensive check is here for simplicity.
	  // Most of the time, the match media logic isn't central to people tests.

	  var supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';

	  var _props$options = _extends({}, props, options),
	      _props$options$defaul = _props$options.defaultMatches,
	      defaultMatches = _props$options$defaul === void 0 ? false : _props$options$defaul,
	      _props$options$matchM = _props$options.matchMedia,
	      matchMedia = _props$options$matchM === void 0 ? supportMatchMedia ? window.matchMedia : null : _props$options$matchM,
	      _props$options$noSsr = _props$options.noSsr,
	      noSsr = _props$options$noSsr === void 0 ? false : _props$options$noSsr,
	      _props$options$ssrMat = _props$options.ssrMatchMedia,
	      ssrMatchMedia = _props$options$ssrMat === void 0 ? null : _props$options$ssrMat;

	  var _React$useState = React.useState(function () {
	    if (noSsr && supportMatchMedia) {
	      return matchMedia(query).matches;
	    }

	    if (ssrMatchMedia) {
	      return ssrMatchMedia(query).matches;
	    } // Once the component is mounted, we rely on the
	    // event listeners to return the correct matches value.


	    return defaultMatches;
	  }),
	      match = _React$useState[0],
	      setMatch = _React$useState[1];

	  React.useEffect(function () {
	    var active = true;

	    if (!supportMatchMedia) {
	      return undefined;
	    }

	    var queryList = matchMedia(query);

	    var updateMatch = function updateMatch() {
	      // Workaround Safari wrong implementation of matchMedia
	      // TODO can we remove it?
	      // https://github.com/mui-org/material-ui/pull/17315#issuecomment-528286677
	      if (active) {
	        setMatch(queryList.matches);
	      }
	    };

	    updateMatch();
	    queryList.addListener(updateMatch);
	    return function () {
	      active = false;
	      queryList.removeListener(updateMatch);
	    };
	  }, [query, matchMedia, supportMatchMedia]);

	  if (process.env.NODE_ENV !== 'production') {
	    // eslint-disable-next-line react-hooks/rules-of-hooks
	    React.useDebugValue({
	      query: query,
	      match: match
	    });
	  }

	  return match;
	}

	var styles$w = function styles(theme) {
	  var light = theme.palette.type === 'light';
	  var bottomLineColor = light ? 'rgba(0, 0, 0, 0.42)' : 'rgba(255, 255, 255, 0.7)';
	  return {
	    /* Styles applied to the root element. */
	    root: {
	      position: 'relative'
	    },

	    /* Styles applied to the root element if the component is a descendant of `FormControl`. */
	    formControl: {
	      'label + &': {
	        marginTop: 16
	      }
	    },

	    /* Styles applied to the root element if the component is focused. */
	    focused: {},

	    /* Styles applied to the root element if `disabled={true}`. */
	    disabled: {},

	    /* Styles applied to the root element if color secondary. */
	    colorSecondary: {
	      '&$underline:after': {
	        borderBottomColor: theme.palette.secondary.main
	      }
	    },

	    /* Styles applied to the root element if `disableUnderline={false}`. */
	    underline: {
	      '&:after': {
	        borderBottom: "2px solid ".concat(theme.palette.primary.main),
	        left: 0,
	        bottom: 0,
	        // Doing the other way around crash on IE 11 "''" https://github.com/cssinjs/jss/issues/242
	        content: '""',
	        position: 'absolute',
	        right: 0,
	        transform: 'scaleX(0)',
	        transition: theme.transitions.create('transform', {
	          duration: theme.transitions.duration.shorter,
	          easing: theme.transitions.easing.easeOut
	        }),
	        pointerEvents: 'none' // Transparent to the hover style.

	      },
	      '&$focused:after': {
	        transform: 'scaleX(1)'
	      },
	      '&$error:after': {
	        borderBottomColor: theme.palette.error.main,
	        transform: 'scaleX(1)' // error is always underlined in red

	      },
	      '&:before': {
	        borderBottom: "1px solid ".concat(bottomLineColor),
	        left: 0,
	        bottom: 0,
	        // Doing the other way around crash on IE 11 "''" https://github.com/cssinjs/jss/issues/242
	        content: '"\\00a0"',
	        position: 'absolute',
	        right: 0,
	        transition: theme.transitions.create('border-bottom-color', {
	          duration: theme.transitions.duration.shorter
	        }),
	        pointerEvents: 'none' // Transparent to the hover style.

	      },
	      '&:hover:not($disabled):before': {
	        borderBottom: "2px solid ".concat(theme.palette.text.primary),
	        // Reset on touch devices, it doesn't add specificity
	        '@media (hover: none)': {
	          borderBottom: "1px solid ".concat(bottomLineColor)
	        }
	      },
	      '&$disabled:before': {
	        borderBottomStyle: 'dotted'
	      }
	    },

	    /* Pseudo-class applied to the root element if `error={true}`. */
	    error: {},

	    /* Styles applied to the `input` element if `margin="dense"`. */
	    marginDense: {},

	    /* Styles applied to the root element if `multiline={true}`. */
	    multiline: {},

	    /* Styles applied to the root element if `fullWidth={true}`. */
	    fullWidth: {},

	    /* Styles applied to the `input` element. */
	    input: {},

	    /* Styles applied to the `input` element if `margin="dense"`. */
	    inputMarginDense: {},

	    /* Styles applied to the `input` element if `multiline={true}`. */
	    inputMultiline: {},

	    /* Styles applied to the `input` element if `type="search"`. */
	    inputTypeSearch: {}
	  };
	};
	var Input = /*#__PURE__*/React.forwardRef(function Input(props, ref) {
	  var disableUnderline = props.disableUnderline,
	      classes = props.classes,
	      _props$fullWidth = props.fullWidth,
	      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
	      _props$inputComponent = props.inputComponent,
	      inputComponent = _props$inputComponent === void 0 ? 'input' : _props$inputComponent,
	      _props$multiline = props.multiline,
	      multiline = _props$multiline === void 0 ? false : _props$multiline,
	      _props$type = props.type,
	      type = _props$type === void 0 ? 'text' : _props$type,
	      other = _objectWithoutProperties(props, ["disableUnderline", "classes", "fullWidth", "inputComponent", "multiline", "type"]);

	  return /*#__PURE__*/React.createElement(InputBase$1, _extends({
	    classes: _extends({}, classes, {
	      root: clsx(classes.root, !disableUnderline && classes.underline),
	      underline: null
	    }),
	    fullWidth: fullWidth,
	    inputComponent: inputComponent,
	    multiline: multiline,
	    ref: ref,
	    type: type
	  }, other));
	});
	process.env.NODE_ENV !== "production" ? Input.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * This prop helps users to fill forms faster, especially on mobile devices.
	   * The name can be confusing, as it's more like an autofill.
	   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
	   */
	  autoComplete: propTypes.string,

	  /**
	   * If `true`, the `input` element will be focused during the first mount.
	   */
	  autoFocus: propTypes.bool,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object,

	  /**
	   * The color of the component. It supports those theme colors that make sense for this component.
	   */
	  color: propTypes.oneOf(['primary', 'secondary']),

	  /**
	   * The default `input` element value. Use when the component is not controlled.
	   */
	  defaultValue: propTypes.any,

	  /**
	   * If `true`, the `input` element will be disabled.
	   */
	  disabled: propTypes.bool,

	  /**
	   * If `true`, the input will not have an underline.
	   */
	  disableUnderline: propTypes.bool,

	  /**
	   * End `InputAdornment` for this component.
	   */
	  endAdornment: propTypes.node,

	  /**
	   * If `true`, the input will indicate an error. This is normally obtained via context from
	   * FormControl.
	   */
	  error: propTypes.bool,

	  /**
	   * If `true`, the input will take up the full width of its container.
	   */
	  fullWidth: propTypes.bool,

	  /**
	   * The id of the `input` element.
	   */
	  id: propTypes.string,

	  /**
	   * The component used for the `input` element.
	   * Either a string to use a HTML element or a component.
	   */
	  inputComponent: propTypes.elementType,

	  /**
	   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
	   */
	  inputProps: propTypes.object,

	  /**
	   * Pass a ref to the `input` element.
	   */
	  inputRef: refType,

	  /**
	   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
	   * FormControl.
	   */
	  margin: propTypes.oneOf(['dense', 'none']),

	  /**
	   * If `true`, a textarea element will be rendered.
	   */
	  multiline: propTypes.bool,

	  /**
	   * Name attribute of the `input` element.
	   */
	  name: propTypes.string,

	  /**
	   * Callback fired when the value is changed.
	   *
	   * @param {object} event The event source of the callback.
	   * You can pull out the new value by accessing `event.target.value` (string).
	   */
	  onChange: propTypes.func,

	  /**
	   * The short hint displayed in the input before the user enters a value.
	   */
	  placeholder: propTypes.string,

	  /**
	   * It prevents the user from changing the value of the field
	   * (not from interacting with the field).
	   */
	  readOnly: propTypes.bool,

	  /**
	   * If `true`, the `input` element will be required.
	   */
	  required: propTypes.bool,

	  /**
	   * Number of rows to display when multiline option is set to true.
	   */
	  rows: propTypes.oneOfType([propTypes.number, propTypes.string]),

	  /**
	   * Maximum number of rows to display when multiline option is set to true.
	   */
	  rowsMax: propTypes.oneOfType([propTypes.number, propTypes.string]),

	  /**
	   * Start `InputAdornment` for this component.
	   */
	  startAdornment: propTypes.node,

	  /**
	   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
	   */
	  type: propTypes.string,

	  /**
	   * The value of the `input` element, required for a controlled component.
	   */
	  value: propTypes.any
	} : void 0;
	Input.muiName = 'Input';
	var Input$1 = withStyles$1(styles$w, {
	  name: 'MuiInput'
	})(Input);

	var styles$x = {
	  /* Styles applied to the root element. */
	  root: {
	    display: 'flex',
	    height: '0.01em',
	    // Fix IE 11 flexbox alignment. To remove at some point.
	    maxHeight: '2em',
	    alignItems: 'center',
	    whiteSpace: 'nowrap'
	  },

	  /* Styles applied to the root element if `variant="filled"`. */
	  filled: {
	    '&$positionStart:not($hiddenLabel)': {
	      marginTop: 16
	    }
	  },

	  /* Styles applied to the root element if `position="start"`. */
	  positionStart: {
	    marginRight: 8
	  },

	  /* Styles applied to the root element if `position="end"`. */
	  positionEnd: {
	    marginLeft: 8
	  },

	  /* Styles applied to the root element if `disablePointerEvents=true`. */
	  disablePointerEvents: {
	    pointerEvents: 'none'
	  },

	  /* Styles applied if the adornment is used inside <FormControl hiddenLabel />. */
	  hiddenLabel: {},

	  /* Styles applied if the adornment is used inside <FormControl margin="dense" />. */
	  marginDense: {}
	};
	var InputAdornment = /*#__PURE__*/React.forwardRef(function InputAdornment(props, ref) {
	  var children = props.children,
	      classes = props.classes,
	      className = props.className,
	      _props$component = props.component,
	      Component = _props$component === void 0 ? 'div' : _props$component,
	      _props$disablePointer = props.disablePointerEvents,
	      disablePointerEvents = _props$disablePointer === void 0 ? false : _props$disablePointer,
	      _props$disableTypogra = props.disableTypography,
	      disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,
	      position = props.position,
	      variantProp = props.variant,
	      other = _objectWithoutProperties(props, ["children", "classes", "className", "component", "disablePointerEvents", "disableTypography", "position", "variant"]);

	  var muiFormControl = useFormControl() || {};
	  var variant = variantProp;

	  if (variantProp && muiFormControl.variant) {
	    if (process.env.NODE_ENV !== 'production') {
	      if (variantProp === muiFormControl.variant) {
	        console.error('Material-UI: The `InputAdornment` variant infers the variant prop ' + 'you do not have to provide one.');
	      }
	    }
	  }

	  if (muiFormControl && !variant) {
	    variant = muiFormControl.variant;
	  }

	  return /*#__PURE__*/React.createElement(FormControlContext.Provider, {
	    value: null
	  }, /*#__PURE__*/React.createElement(Component, _extends({
	    className: clsx(classes.root, className, disablePointerEvents && classes.disablePointerEvents, muiFormControl.hiddenLabel && classes.hiddenLabel, variant === 'filled' && classes.filled, {
	      'start': classes.positionStart,
	      'end': classes.positionEnd
	    }[position], muiFormControl.margin === 'dense' && classes.marginDense),
	    ref: ref
	  }, other), typeof children === 'string' && !disableTypography ? /*#__PURE__*/React.createElement(Typography$1, {
	    color: "textSecondary"
	  }, children) : children));
	});
	process.env.NODE_ENV !== "production" ? InputAdornment.propTypes = {
	  /**
	   * The content of the component, normally an `IconButton` or string.
	   */
	  children: propTypes.node.isRequired,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object.isRequired,

	  /**
	   * @ignore
	   */
	  className: propTypes.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes
	  /* @typescript-to-proptypes-ignore */
	  .elementType,

	  /**
	   * Disable pointer events on the root.
	   * This allows for the content of the adornment to focus the input on click.
	   */
	  disablePointerEvents: propTypes.bool,

	  /**
	   * If children is a string then disable wrapping in a Typography component.
	   */
	  disableTypography: propTypes.bool,

	  /**
	   * @ignore
	   */
	  muiFormControl: propTypes.object,

	  /**
	   * The position this adornment should appear relative to the `Input`.
	   */
	  position: propTypes.oneOf(['start', 'end']),

	  /**
	   * The variant to use.
	   * Note: If you are using the `TextField` component or the `FormControl` component
	   * you do not have to set this manually.
	   */
	  variant: propTypes.oneOf(['standard', 'outlined', 'filled'])
	} : void 0;
	var InputAdornment$1 = withStyles$1(styles$x, {
	  name: 'MuiInputAdornment'
	})(InputAdornment);

	var styles$y = function styles(theme) {
	  return {
	    /* Styles applied to the root element. */
	    root: {
	      display: 'block',
	      transformOrigin: 'top left'
	    },

	    /* Pseudo-class applied to the root element if `focused={true}`. */
	    focused: {},

	    /* Pseudo-class applied to the root element if `disabled={true}`. */
	    disabled: {},

	    /* Pseudo-class applied to the root element if `error={true}`. */
	    error: {},

	    /* Pseudo-class applied to the root element if `required={true}`. */
	    required: {},

	    /* Pseudo-class applied to the asterisk element. */
	    asterisk: {},

	    /* Styles applied to the root element if the component is a descendant of `FormControl`. */
	    formControl: {
	      position: 'absolute',
	      left: 0,
	      top: 0,
	      // slight alteration to spec spacing to match visual spec result
	      transform: 'translate(0, 24px) scale(1)'
	    },

	    /* Styles applied to the root element if `margin="dense"`. */
	    marginDense: {
	      // Compensation for the `Input.inputDense` style.
	      transform: 'translate(0, 21px) scale(1)'
	    },

	    /* Styles applied to the `input` element if `shrink={true}`. */
	    shrink: {
	      transform: 'translate(0, 1.5px) scale(0.75)',
	      transformOrigin: 'top left'
	    },

	    /* Styles applied to the `input` element if `disableAnimation={false}`. */
	    animated: {
	      transition: theme.transitions.create(['color', 'transform'], {
	        duration: theme.transitions.duration.shorter,
	        easing: theme.transitions.easing.easeOut
	      })
	    },

	    /* Styles applied to the root element if `variant="filled"`. */
	    filled: {
	      // Chrome's autofill feature gives the input field a yellow background.
	      // Since the input field is behind the label in the HTML tree,
	      // the input field is drawn last and hides the label with an opaque background color.
	      // zIndex: 1 will raise the label above opaque background-colors of input.
	      zIndex: 1,
	      pointerEvents: 'none',
	      transform: 'translate(12px, 20px) scale(1)',
	      '&$marginDense': {
	        transform: 'translate(12px, 17px) scale(1)'
	      },
	      '&$shrink': {
	        transform: 'translate(12px, 10px) scale(0.75)',
	        '&$marginDense': {
	          transform: 'translate(12px, 7px) scale(0.75)'
	        }
	      }
	    },

	    /* Styles applied to the root element if `variant="outlined"`. */
	    outlined: {
	      // see comment above on filled.zIndex
	      zIndex: 1,
	      pointerEvents: 'none',
	      transform: 'translate(14px, 20px) scale(1)',
	      '&$marginDense': {
	        transform: 'translate(14px, 12px) scale(1)'
	      },
	      '&$shrink': {
	        transform: 'translate(14px, -6px) scale(0.75)'
	      }
	    }
	  };
	};
	var InputLabel = /*#__PURE__*/React.forwardRef(function InputLabel(props, ref) {
	  var classes = props.classes,
	      className = props.className,
	      _props$disableAnimati = props.disableAnimation,
	      disableAnimation = _props$disableAnimati === void 0 ? false : _props$disableAnimati,
	      margin = props.margin,
	      shrinkProp = props.shrink,
	      variant = props.variant,
	      other = _objectWithoutProperties(props, ["classes", "className", "disableAnimation", "margin", "shrink", "variant"]);

	  var muiFormControl = useFormControl$1();
	  var shrink = shrinkProp;

	  if (typeof shrink === 'undefined' && muiFormControl) {
	    shrink = muiFormControl.filled || muiFormControl.focused || muiFormControl.adornedStart;
	  }

	  var fcs = formControlState({
	    props: props,
	    muiFormControl: muiFormControl,
	    states: ['margin', 'variant']
	  });
	  return /*#__PURE__*/React.createElement(FormLabel$1, _extends({
	    "data-shrink": shrink,
	    className: clsx(classes.root, className, muiFormControl && classes.formControl, !disableAnimation && classes.animated, shrink && classes.shrink, fcs.margin === 'dense' && classes.marginDense, {
	      'filled': classes.filled,
	      'outlined': classes.outlined
	    }[fcs.variant]),
	    classes: {
	      focused: classes.focused,
	      disabled: classes.disabled,
	      error: classes.error,
	      required: classes.required,
	      asterisk: classes.asterisk
	    },
	    ref: ref
	  }, other));
	});
	process.env.NODE_ENV !== "production" ? InputLabel.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The contents of the `InputLabel`.
	   */
	  children: propTypes.node,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.string,

	  /**
	   * The color of the component. It supports those theme colors that make sense for this component.
	   */
	  color: propTypes.oneOf(['primary', 'secondary']),

	  /**
	   * If `true`, the transition animation is disabled.
	   */
	  disableAnimation: propTypes.bool,

	  /**
	   * If `true`, apply disabled class.
	   */
	  disabled: propTypes.bool,

	  /**
	   * If `true`, the label will be displayed in an error state.
	   */
	  error: propTypes.bool,

	  /**
	   * If `true`, the input of this label is focused.
	   */
	  focused: propTypes.bool,

	  /**
	   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
	   * FormControl.
	   */
	  margin: propTypes.oneOf(['dense']),

	  /**
	   * if `true`, the label will indicate that the input is required.
	   */
	  required: propTypes.bool,

	  /**
	   * If `true`, the label is shrunk.
	   */
	  shrink: propTypes.bool,

	  /**
	   * The variant to use.
	   */
	  variant: propTypes.oneOf(['filled', 'outlined', 'standard'])
	} : void 0;
	var InputLabel$1 = withStyles$1(styles$y, {
	  name: 'MuiInputLabel'
	})(InputLabel);

	var styles$z = {
	  /* Styles applied to the root element. */
	  root: {},

	  /* Styles applied to the root element if `underline="none"`. */
	  underlineNone: {
	    textDecoration: 'none'
	  },

	  /* Styles applied to the root element if `underline="hover"`. */
	  underlineHover: {
	    textDecoration: 'none',
	    '&:hover': {
	      textDecoration: 'underline'
	    }
	  },

	  /* Styles applied to the root element if `underline="always"`. */
	  underlineAlways: {
	    textDecoration: 'underline'
	  },
	  // Same reset as ButtonBase.root

	  /* Styles applied to the root element if `component="button"`. */
	  button: {
	    position: 'relative',
	    WebkitTapHighlightColor: 'transparent',
	    backgroundColor: 'transparent',
	    // Reset default value
	    // We disable the focus ring for mouse, touch and keyboard users.
	    outline: 0,
	    border: 0,
	    margin: 0,
	    // Remove the margin in Safari
	    borderRadius: 0,
	    padding: 0,
	    // Remove the padding in Firefox
	    cursor: 'pointer',
	    userSelect: 'none',
	    verticalAlign: 'middle',
	    '-moz-appearance': 'none',
	    // Reset
	    '-webkit-appearance': 'none',
	    // Reset
	    '&::-moz-focus-inner': {
	      borderStyle: 'none' // Remove Firefox dotted outline.

	    },
	    '&$focusVisible': {
	      outline: 'auto'
	    }
	  },

	  /* Pseudo-class applied to the root element if the link is keyboard focused. */
	  focusVisible: {}
	};
	var Link = /*#__PURE__*/React.forwardRef(function Link(props, ref) {
	  var classes = props.classes,
	      className = props.className,
	      _props$color = props.color,
	      color = _props$color === void 0 ? 'primary' : _props$color,
	      _props$component = props.component,
	      component = _props$component === void 0 ? 'a' : _props$component,
	      onBlur = props.onBlur,
	      onFocus = props.onFocus,
	      TypographyClasses = props.TypographyClasses,
	      _props$underline = props.underline,
	      underline = _props$underline === void 0 ? 'hover' : _props$underline,
	      _props$variant = props.variant,
	      variant = _props$variant === void 0 ? 'inherit' : _props$variant,
	      other = _objectWithoutProperties(props, ["classes", "className", "color", "component", "onBlur", "onFocus", "TypographyClasses", "underline", "variant"]);

	  var _useIsFocusVisible = useIsFocusVisible(),
	      isFocusVisible = _useIsFocusVisible.isFocusVisible,
	      onBlurVisible = _useIsFocusVisible.onBlurVisible,
	      focusVisibleRef = _useIsFocusVisible.ref;

	  var _React$useState = React.useState(false),
	      focusVisible = _React$useState[0],
	      setFocusVisible = _React$useState[1];

	  var handlerRef = useForkRef(ref, focusVisibleRef);

	  var handleBlur = function handleBlur(event) {
	    if (focusVisible) {
	      onBlurVisible();
	      setFocusVisible(false);
	    }

	    if (onBlur) {
	      onBlur(event);
	    }
	  };

	  var handleFocus = function handleFocus(event) {
	    if (isFocusVisible(event)) {
	      setFocusVisible(true);
	    }

	    if (onFocus) {
	      onFocus(event);
	    }
	  };

	  return /*#__PURE__*/React.createElement(Typography$1, _extends({
	    className: clsx(classes.root, classes["underline".concat(capitalize(underline))], className, focusVisible && classes.focusVisible, component === 'button' && classes.button),
	    classes: TypographyClasses,
	    color: color,
	    component: component,
	    onBlur: handleBlur,
	    onFocus: handleFocus,
	    ref: handlerRef,
	    variant: variant
	  }, other));
	});
	process.env.NODE_ENV !== "production" ? Link.propTypes = {
	  /**
	   * The content of the link.
	   */
	  children: propTypes.node.isRequired,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object.isRequired,

	  /**
	   * @ignore
	   */
	  className: propTypes.string,

	  /**
	   * The color of the link.
	   */
	  color: propTypes.oneOf(['initial', 'inherit', 'primary', 'secondary', 'textPrimary', 'textSecondary', 'error']),

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: elementTypeAcceptingRef$1,

	  /**
	   * @ignore
	   */
	  onBlur: propTypes.func,

	  /**
	   * @ignore
	   */
	  onFocus: propTypes.func,

	  /**
	   * `classes` prop applied to the [`Typography`](/api/typography/) element.
	   */
	  TypographyClasses: propTypes.object,

	  /**
	   * Controls when the link should have an underline.
	   */
	  underline: propTypes.oneOf(['none', 'hover', 'always']),

	  /**
	   * Applies the theme typography styles.
	   */
	  variant: propTypes.string
	} : void 0;
	var Link$1 = withStyles$1(styles$z, {
	  name: 'MuiLink'
	})(Link);

	/**
	 * @ignore - internal component.
	 */

	var ListContext = React.createContext({});

	if (process.env.NODE_ENV !== 'production') {
	  ListContext.displayName = 'ListContext';
	}

	var styles$A = {
	  /* Styles applied to the root element. */
	  root: {
	    listStyle: 'none',
	    margin: 0,
	    padding: 0,
	    position: 'relative'
	  },

	  /* Styles applied to the root element if `disablePadding={false}`. */
	  padding: {
	    paddingTop: 8,
	    paddingBottom: 8
	  },

	  /* Styles applied to the root element if dense. */
	  dense: {},

	  /* Styles applied to the root element if a `subheader` is provided. */
	  subheader: {
	    paddingTop: 0
	  }
	};
	var List = /*#__PURE__*/React.forwardRef(function List(props, ref) {
	  var children = props.children,
	      classes = props.classes,
	      className = props.className,
	      _props$component = props.component,
	      Component = _props$component === void 0 ? 'ul' : _props$component,
	      _props$dense = props.dense,
	      dense = _props$dense === void 0 ? false : _props$dense,
	      _props$disablePadding = props.disablePadding,
	      disablePadding = _props$disablePadding === void 0 ? false : _props$disablePadding,
	      subheader = props.subheader,
	      other = _objectWithoutProperties(props, ["children", "classes", "className", "component", "dense", "disablePadding", "subheader"]);

	  var context = React.useMemo(function () {
	    return {
	      dense: dense
	    };
	  }, [dense]);
	  return /*#__PURE__*/React.createElement(ListContext.Provider, {
	    value: context
	  }, /*#__PURE__*/React.createElement(Component, _extends({
	    className: clsx(classes.root, className, dense && classes.dense, !disablePadding && classes.padding, subheader && classes.subheader),
	    ref: ref
	  }, other), subheader, children));
	});
	process.env.NODE_ENV !== "production" ? List.propTypes = {
	  /**
	   * The content of the component.
	   */
	  children: propTypes.node,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object.isRequired,

	  /**
	   * @ignore
	   */
	  className: propTypes.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes
	  /* @typescript-to-proptypes-ignore */
	  .elementType,

	  /**
	   * If `true`, compact vertical padding designed for keyboard and mouse input will be used for
	   * the list and list items.
	   * The prop is available to descendant components as the `dense` context.
	   */
	  dense: propTypes.bool,

	  /**
	   * If `true`, vertical padding will be removed from the list.
	   */
	  disablePadding: propTypes.bool,

	  /**
	   * The content of the subheader, normally `ListSubheader`.
	   */
	  subheader: propTypes.node
	} : void 0;
	var List$1 = withStyles$1(styles$A, {
	  name: 'MuiList'
	})(List);

	var styles$B = function styles(theme) {
	  return {
	    /* Styles applied to the (normally root) `component` element. May be wrapped by a `container`. */
	    root: {
	      display: 'flex',
	      justifyContent: 'flex-start',
	      alignItems: 'center',
	      position: 'relative',
	      textDecoration: 'none',
	      width: '100%',
	      boxSizing: 'border-box',
	      textAlign: 'left',
	      paddingTop: 8,
	      paddingBottom: 8,
	      '&$focusVisible': {
	        backgroundColor: theme.palette.action.selected
	      },
	      '&$selected, &$selected:hover': {
	        backgroundColor: theme.palette.action.selected
	      },
	      '&$disabled': {
	        opacity: 0.5
	      }
	    },

	    /* Styles applied to the `container` element if `children` includes `ListItemSecondaryAction`. */
	    container: {
	      position: 'relative'
	    },

	    /* Pseudo-class applied to the `component`'s `focusVisibleClassName` prop if `button={true}`. */
	    focusVisible: {},

	    /* Styles applied to the `component` element if dense. */
	    dense: {
	      paddingTop: 4,
	      paddingBottom: 4
	    },

	    /* Styles applied to the `component` element if `alignItems="flex-start"`. */
	    alignItemsFlexStart: {
	      alignItems: 'flex-start'
	    },

	    /* Pseudo-class applied to the inner `component` element if `disabled={true}`. */
	    disabled: {},

	    /* Styles applied to the inner `component` element if `divider={true}`. */
	    divider: {
	      borderBottom: "1px solid ".concat(theme.palette.divider),
	      backgroundClip: 'padding-box'
	    },

	    /* Styles applied to the inner `component` element if `disableGutters={false}`. */
	    gutters: {
	      paddingLeft: 16,
	      paddingRight: 16
	    },

	    /* Styles applied to the inner `component` element if `button={true}`. */
	    button: {
	      transition: theme.transitions.create('background-color', {
	        duration: theme.transitions.duration.shortest
	      }),
	      '&:hover': {
	        textDecoration: 'none',
	        backgroundColor: theme.palette.action.hover,
	        // Reset on touch devices, it doesn't add specificity
	        '@media (hover: none)': {
	          backgroundColor: 'transparent'
	        }
	      }
	    },

	    /* Styles applied to the `component` element if `children` includes `ListItemSecondaryAction`. */
	    secondaryAction: {
	      // Add some space to avoid collision as `ListItemSecondaryAction`
	      // is absolutely positioned.
	      paddingRight: 48
	    },

	    /* Pseudo-class applied to the root element if `selected={true}`. */
	    selected: {}
	  };
	};
	var useEnhancedEffect$5 = typeof window === 'undefined' ? React.useEffect : React.useLayoutEffect;
	/**
	 * Uses an additional container component if `ListItemSecondaryAction` is the last child.
	 */

	var ListItem = /*#__PURE__*/React.forwardRef(function ListItem(props, ref) {
	  var _props$alignItems = props.alignItems,
	      alignItems = _props$alignItems === void 0 ? 'center' : _props$alignItems,
	      _props$autoFocus = props.autoFocus,
	      autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus,
	      _props$button = props.button,
	      button = _props$button === void 0 ? false : _props$button,
	      childrenProp = props.children,
	      classes = props.classes,
	      className = props.className,
	      componentProp = props.component,
	      _props$ContainerCompo = props.ContainerComponent,
	      ContainerComponent = _props$ContainerCompo === void 0 ? 'li' : _props$ContainerCompo,
	      _props$ContainerProps = props.ContainerProps;
	  _props$ContainerProps = _props$ContainerProps === void 0 ? {} : _props$ContainerProps;

	  var ContainerClassName = _props$ContainerProps.className,
	      ContainerProps = _objectWithoutProperties(_props$ContainerProps, ["className"]),
	      _props$dense = props.dense,
	      dense = _props$dense === void 0 ? false : _props$dense,
	      _props$disabled = props.disabled,
	      disabled = _props$disabled === void 0 ? false : _props$disabled,
	      _props$disableGutters = props.disableGutters,
	      disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters,
	      _props$divider = props.divider,
	      divider = _props$divider === void 0 ? false : _props$divider,
	      focusVisibleClassName = props.focusVisibleClassName,
	      _props$selected = props.selected,
	      selected = _props$selected === void 0 ? false : _props$selected,
	      other = _objectWithoutProperties(props, ["alignItems", "autoFocus", "button", "children", "classes", "className", "component", "ContainerComponent", "ContainerProps", "dense", "disabled", "disableGutters", "divider", "focusVisibleClassName", "selected"]);

	  var context = React.useContext(ListContext);
	  var childContext = {
	    dense: dense || context.dense || false,
	    alignItems: alignItems
	  };
	  var listItemRef = React.useRef(null);
	  useEnhancedEffect$5(function () {
	    if (autoFocus) {
	      if (listItemRef.current) {
	        listItemRef.current.focus();
	      } else if (process.env.NODE_ENV !== 'production') {
	        console.error('Material-UI: Unable to set focus to a ListItem whose component has not been rendered.');
	      }
	    }
	  }, [autoFocus]);
	  var children = React.Children.toArray(childrenProp);
	  var hasSecondaryAction = children.length && isMuiElement(children[children.length - 1], ['ListItemSecondaryAction']);
	  var handleOwnRef = React.useCallback(function (instance) {
	    // #StrictMode ready
	    listItemRef.current = ReactDOM.findDOMNode(instance);
	  }, []);
	  var handleRef = useForkRef(handleOwnRef, ref);

	  var componentProps = _extends({
	    className: clsx(classes.root, className, childContext.dense && classes.dense, !disableGutters && classes.gutters, divider && classes.divider, disabled && classes.disabled, button && classes.button, alignItems !== "center" && classes.alignItemsFlexStart, hasSecondaryAction && classes.secondaryAction, selected && classes.selected),
	    disabled: disabled
	  }, other);

	  var Component = componentProp || 'li';

	  if (button) {
	    componentProps.component = componentProp || 'div';
	    componentProps.focusVisibleClassName = clsx(classes.focusVisible, focusVisibleClassName);
	    Component = ButtonBase$1;
	  }

	  if (hasSecondaryAction) {
	    // Use div by default.
	    Component = !componentProps.component && !componentProp ? 'div' : Component; // Avoid nesting of li > li.

	    if (ContainerComponent === 'li') {
	      if (Component === 'li') {
	        Component = 'div';
	      } else if (componentProps.component === 'li') {
	        componentProps.component = 'div';
	      }
	    }

	    return /*#__PURE__*/React.createElement(ListContext.Provider, {
	      value: childContext
	    }, /*#__PURE__*/React.createElement(ContainerComponent, _extends({
	      className: clsx(classes.container, ContainerClassName),
	      ref: handleRef
	    }, ContainerProps), /*#__PURE__*/React.createElement(Component, componentProps, children), children.pop()));
	  }

	  return /*#__PURE__*/React.createElement(ListContext.Provider, {
	    value: childContext
	  }, /*#__PURE__*/React.createElement(Component, _extends({
	    ref: handleRef
	  }, componentProps), children));
	});
	process.env.NODE_ENV !== "production" ? ListItem.propTypes = {
	  /**
	   * Defines the `align-items` style property.
	   */
	  alignItems: propTypes.oneOf(['flex-start', 'center']),

	  /**
	   * If `true`, the list item will be focused during the first mount.
	   * Focus will also be triggered if the value changes from false to true.
	   */
	  autoFocus: propTypes.bool,

	  /**
	   * If `true`, the list item will be a button (using `ButtonBase`). Props intended
	   * for `ButtonBase` can then be applied to `ListItem`.
	   */
	  button: propTypes.bool,

	  /**
	   * The content of the component. If a `ListItemSecondaryAction` is used it must
	   * be the last child.
	   */
	  children: chainPropTypes(propTypes.node, function (props) {
	    var children = React.Children.toArray(props.children); // React.Children.toArray(props.children).findLastIndex(isListItemSecondaryAction)

	    var secondaryActionIndex = -1;

	    for (var i = children.length - 1; i >= 0; i -= 1) {
	      var child = children[i];

	      if (isMuiElement(child, ['ListItemSecondaryAction'])) {
	        secondaryActionIndex = i;
	        break;
	      }
	    } //  is ListItemSecondaryAction the last child of ListItem


	    if (secondaryActionIndex !== -1 && secondaryActionIndex !== children.length - 1) {
	      return new Error('Material-UI: You used an element after ListItemSecondaryAction. ' + 'For ListItem to detect that it has a secondary action ' + 'you must pass it as the last child to ListItem.');
	    }

	    return null;
	  }),

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object.isRequired,

	  /**
	   * @ignore
	   */
	  className: propTypes.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   * By default, it's a `li` when `button` is `false` and a `div` when `button` is `true`.
	   */
	  component: propTypes
	  /* @typescript-to-proptypes-ignore */
	  .elementType,

	  /**
	   * The container component used when a `ListItemSecondaryAction` is the last child.
	   */
	  ContainerComponent: propTypes.elementType,

	  /**
	   * Props applied to the container component if used.
	   */
	  ContainerProps: propTypes.object,

	  /**
	   * If `true`, compact vertical padding designed for keyboard and mouse input will be used.
	   */
	  dense: propTypes.bool,

	  /**
	   * If `true`, the list item will be disabled.
	   */
	  disabled: propTypes.bool,

	  /**
	   * If `true`, the left and right padding is removed.
	   */
	  disableGutters: propTypes.bool,

	  /**
	   * If `true`, a 1px light border is added to the bottom of the list item.
	   */
	  divider: propTypes.bool,

	  /**
	   * @ignore
	   */
	  focusVisibleClassName: propTypes.string,

	  /**
	   * Use to apply selected styling.
	   */
	  selected: propTypes.bool
	} : void 0;
	var ListItem$1 = withStyles$1(styles$B, {
	  name: 'MuiListItem'
	})(ListItem);

	function getOffsetTop(rect, vertical) {
	  var offset = 0;

	  if (typeof vertical === 'number') {
	    offset = vertical;
	  } else if (vertical === 'center') {
	    offset = rect.height / 2;
	  } else if (vertical === 'bottom') {
	    offset = rect.height;
	  }

	  return offset;
	}
	function getOffsetLeft(rect, horizontal) {
	  var offset = 0;

	  if (typeof horizontal === 'number') {
	    offset = horizontal;
	  } else if (horizontal === 'center') {
	    offset = rect.width / 2;
	  } else if (horizontal === 'right') {
	    offset = rect.width;
	  }

	  return offset;
	}

	function getTransformOriginValue(transformOrigin) {
	  return [transformOrigin.horizontal, transformOrigin.vertical].map(function (n) {
	    return typeof n === 'number' ? "".concat(n, "px") : n;
	  }).join(' ');
	} // Sum the scrollTop between two elements.


	function getScrollParent(parent, child) {
	  var element = child;
	  var scrollTop = 0;

	  while (element && element !== parent) {
	    element = element.parentElement;
	    scrollTop += element.scrollTop;
	  }

	  return scrollTop;
	}

	function getAnchorEl(anchorEl) {
	  return typeof anchorEl === 'function' ? anchorEl() : anchorEl;
	}

	var styles$C = {
	  /* Styles applied to the root element. */
	  root: {},

	  /* Styles applied to the `Paper` component. */
	  paper: {
	    position: 'absolute',
	    overflowY: 'auto',
	    overflowX: 'hidden',
	    // So we see the popover when it's empty.
	    // It's most likely on issue on userland.
	    minWidth: 16,
	    minHeight: 16,
	    maxWidth: 'calc(100% - 32px)',
	    maxHeight: 'calc(100% - 32px)',
	    // We disable the focus ring for mouse, touch and keyboard users.
	    outline: 0
	  }
	};
	var Popover = /*#__PURE__*/React.forwardRef(function Popover(props, ref) {
	  var action = props.action,
	      anchorEl = props.anchorEl,
	      _props$anchorOrigin = props.anchorOrigin,
	      anchorOrigin = _props$anchorOrigin === void 0 ? {
	    vertical: 'top',
	    horizontal: 'left'
	  } : _props$anchorOrigin,
	      anchorPosition = props.anchorPosition,
	      _props$anchorReferenc = props.anchorReference,
	      anchorReference = _props$anchorReferenc === void 0 ? 'anchorEl' : _props$anchorReferenc,
	      children = props.children,
	      classes = props.classes,
	      className = props.className,
	      containerProp = props.container,
	      _props$elevation = props.elevation,
	      elevation = _props$elevation === void 0 ? 8 : _props$elevation,
	      getContentAnchorEl = props.getContentAnchorEl,
	      _props$marginThreshol = props.marginThreshold,
	      marginThreshold = _props$marginThreshol === void 0 ? 16 : _props$marginThreshol,
	      onEnter = props.onEnter,
	      onEntered = props.onEntered,
	      onEntering = props.onEntering,
	      onExit = props.onExit,
	      onExited = props.onExited,
	      onExiting = props.onExiting,
	      open = props.open,
	      _props$PaperProps = props.PaperProps,
	      PaperProps = _props$PaperProps === void 0 ? {} : _props$PaperProps,
	      _props$transformOrigi = props.transformOrigin,
	      transformOrigin = _props$transformOrigi === void 0 ? {
	    vertical: 'top',
	    horizontal: 'left'
	  } : _props$transformOrigi,
	      _props$TransitionComp = props.TransitionComponent,
	      TransitionComponent = _props$TransitionComp === void 0 ? Grow : _props$TransitionComp,
	      _props$transitionDura = props.transitionDuration,
	      transitionDurationProp = _props$transitionDura === void 0 ? 'auto' : _props$transitionDura,
	      _props$TransitionProp = props.TransitionProps,
	      TransitionProps = _props$TransitionProp === void 0 ? {} : _props$TransitionProp,
	      other = _objectWithoutProperties(props, ["action", "anchorEl", "anchorOrigin", "anchorPosition", "anchorReference", "children", "classes", "className", "container", "elevation", "getContentAnchorEl", "marginThreshold", "onEnter", "onEntered", "onEntering", "onExit", "onExited", "onExiting", "open", "PaperProps", "transformOrigin", "TransitionComponent", "transitionDuration", "TransitionProps"]);

	  var paperRef = React.useRef(); // Returns the top/left offset of the position
	  // to attach to on the anchor element (or body if none is provided)

	  var getAnchorOffset = React.useCallback(function (contentAnchorOffset) {
	    if (anchorReference === 'anchorPosition') {
	      if (process.env.NODE_ENV !== 'production') {
	        if (!anchorPosition) {
	          console.error('Material-UI: You need to provide a `anchorPosition` prop when using ' + '<Popover anchorReference="anchorPosition" />.');
	        }
	      }

	      return anchorPosition;
	    }

	    var resolvedAnchorEl = getAnchorEl(anchorEl); // If an anchor element wasn't provided, just use the parent body element of this Popover

	    var anchorElement = resolvedAnchorEl && resolvedAnchorEl.nodeType === 1 ? resolvedAnchorEl : ownerDocument(paperRef.current).body;
	    var anchorRect = anchorElement.getBoundingClientRect();

	    if (process.env.NODE_ENV !== 'production') {
	      var box = anchorElement.getBoundingClientRect();

	      if (process.env.NODE_ENV !== 'test' && box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
	        console.warn(['Material-UI: The `anchorEl` prop provided to the component is invalid.', 'The anchor element should be part of the document layout.', "Make sure the element is present in the document or that it's not display none."].join('\n'));
	      }
	    }

	    var anchorVertical = contentAnchorOffset === 0 ? anchorOrigin.vertical : 'center';
	    return {
	      top: anchorRect.top + getOffsetTop(anchorRect, anchorVertical),
	      left: anchorRect.left + getOffsetLeft(anchorRect, anchorOrigin.horizontal)
	    };
	  }, [anchorEl, anchorOrigin.horizontal, anchorOrigin.vertical, anchorPosition, anchorReference]); // Returns the vertical offset of inner content to anchor the transform on if provided

	  var getContentAnchorOffset = React.useCallback(function (element) {
	    var contentAnchorOffset = 0;

	    if (getContentAnchorEl && anchorReference === 'anchorEl') {
	      var contentAnchorEl = getContentAnchorEl(element);

	      if (contentAnchorEl && element.contains(contentAnchorEl)) {
	        var scrollTop = getScrollParent(element, contentAnchorEl);
	        contentAnchorOffset = contentAnchorEl.offsetTop + contentAnchorEl.clientHeight / 2 - scrollTop || 0;
	      } // != the default value


	      if (process.env.NODE_ENV !== 'production') {
	        if (anchorOrigin.vertical !== 'top') {
	          console.error(['Material-UI: You can not change the default `anchorOrigin.vertical` value ', 'when also providing the `getContentAnchorEl` prop to the popover component.', 'Only use one of the two props.', 'Set `getContentAnchorEl` to `null | undefined`' + ' or leave `anchorOrigin.vertical` unchanged.'].join('\n'));
	        }
	      }
	    }

	    return contentAnchorOffset;
	  }, [anchorOrigin.vertical, anchorReference, getContentAnchorEl]); // Return the base transform origin using the element
	  // and taking the content anchor offset into account if in use

	  var getTransformOrigin = React.useCallback(function (elemRect) {
	    var contentAnchorOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	    return {
	      vertical: getOffsetTop(elemRect, transformOrigin.vertical) + contentAnchorOffset,
	      horizontal: getOffsetLeft(elemRect, transformOrigin.horizontal)
	    };
	  }, [transformOrigin.horizontal, transformOrigin.vertical]);
	  var getPositioningStyle = React.useCallback(function (element) {
	    // Check if the parent has requested anchoring on an inner content node
	    var contentAnchorOffset = getContentAnchorOffset(element);
	    var elemRect = {
	      width: element.offsetWidth,
	      height: element.offsetHeight
	    }; // Get the transform origin point on the element itself

	    var elemTransformOrigin = getTransformOrigin(elemRect, contentAnchorOffset);

	    if (anchorReference === 'none') {
	      return {
	        top: null,
	        left: null,
	        transformOrigin: getTransformOriginValue(elemTransformOrigin)
	      };
	    } // Get the offset of of the anchoring element


	    var anchorOffset = getAnchorOffset(contentAnchorOffset); // Calculate element positioning

	    var top = anchorOffset.top - elemTransformOrigin.vertical;
	    var left = anchorOffset.left - elemTransformOrigin.horizontal;
	    var bottom = top + elemRect.height;
	    var right = left + elemRect.width; // Use the parent window of the anchorEl if provided

	    var containerWindow = ownerWindow(getAnchorEl(anchorEl)); // Window thresholds taking required margin into account

	    var heightThreshold = containerWindow.innerHeight - marginThreshold;
	    var widthThreshold = containerWindow.innerWidth - marginThreshold; // Check if the vertical axis needs shifting

	    if (top < marginThreshold) {
	      var diff = top - marginThreshold;
	      top -= diff;
	      elemTransformOrigin.vertical += diff;
	    } else if (bottom > heightThreshold) {
	      var _diff = bottom - heightThreshold;

	      top -= _diff;
	      elemTransformOrigin.vertical += _diff;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      if (elemRect.height > heightThreshold && elemRect.height && heightThreshold) {
	        console.error(['Material-UI: The popover component is too tall.', "Some part of it can not be seen on the screen (".concat(elemRect.height - heightThreshold, "px)."), 'Please consider adding a `max-height` to improve the user-experience.'].join('\n'));
	      }
	    } // Check if the horizontal axis needs shifting


	    if (left < marginThreshold) {
	      var _diff2 = left - marginThreshold;

	      left -= _diff2;
	      elemTransformOrigin.horizontal += _diff2;
	    } else if (right > widthThreshold) {
	      var _diff3 = right - widthThreshold;

	      left -= _diff3;
	      elemTransformOrigin.horizontal += _diff3;
	    }

	    return {
	      top: "".concat(Math.round(top), "px"),
	      left: "".concat(Math.round(left), "px"),
	      transformOrigin: getTransformOriginValue(elemTransformOrigin)
	    };
	  }, [anchorEl, anchorReference, getAnchorOffset, getContentAnchorOffset, getTransformOrigin, marginThreshold]);
	  var setPositioningStyles = React.useCallback(function () {
	    var element = paperRef.current;

	    if (!element) {
	      return;
	    }

	    var positioning = getPositioningStyle(element);

	    if (positioning.top !== null) {
	      element.style.top = positioning.top;
	    }

	    if (positioning.left !== null) {
	      element.style.left = positioning.left;
	    }

	    element.style.transformOrigin = positioning.transformOrigin;
	  }, [getPositioningStyle]);

	  var handleEntering = function handleEntering(element, isAppearing) {
	    if (onEntering) {
	      onEntering(element, isAppearing);
	    }

	    setPositioningStyles();
	  };

	  var handlePaperRef = React.useCallback(function (instance) {
	    // #StrictMode ready
	    paperRef.current = ReactDOM.findDOMNode(instance);
	  }, []);
	  React.useEffect(function () {
	    if (open) {
	      setPositioningStyles();
	    }
	  });
	  React.useImperativeHandle(action, function () {
	    return open ? {
	      updatePosition: function updatePosition() {
	        setPositioningStyles();
	      }
	    } : null;
	  }, [open, setPositioningStyles]);
	  React.useEffect(function () {
	    if (!open) {
	      return undefined;
	    }

	    var handleResize = debounce$1(function () {
	      setPositioningStyles();
	    });
	    window.addEventListener('resize', handleResize);
	    return function () {
	      handleResize.clear();
	      window.removeEventListener('resize', handleResize);
	    };
	  }, [open, setPositioningStyles]);
	  var transitionDuration = transitionDurationProp;

	  if (transitionDurationProp === 'auto' && !TransitionComponent.muiSupportAuto) {
	    transitionDuration = undefined;
	  } // If the container prop is provided, use that
	  // If the anchorEl prop is provided, use its parent body element as the container
	  // If neither are provided let the Modal take care of choosing the container


	  var container = containerProp || (anchorEl ? ownerDocument(getAnchorEl(anchorEl)).body : undefined);
	  return /*#__PURE__*/React.createElement(Modal, _extends({
	    container: container,
	    open: open,
	    ref: ref,
	    BackdropProps: {
	      invisible: true
	    },
	    className: clsx(classes.root, className)
	  }, other), /*#__PURE__*/React.createElement(TransitionComponent, _extends({
	    appear: true,
	    in: open,
	    onEnter: onEnter,
	    onEntered: onEntered,
	    onExit: onExit,
	    onExited: onExited,
	    onExiting: onExiting,
	    timeout: transitionDuration
	  }, TransitionProps, {
	    onEntering: createChainedFunction(handleEntering, TransitionProps.onEntering)
	  }), /*#__PURE__*/React.createElement(Paper$1, _extends({
	    elevation: elevation,
	    ref: handlePaperRef
	  }, PaperProps, {
	    className: clsx(classes.paper, PaperProps.className)
	  }), children)));
	});
	process.env.NODE_ENV !== "production" ? Popover.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * A ref for imperative actions.
	   * It currently only supports updatePosition() action.
	   */
	  action: refType,

	  /**
	   * A HTML element, or a function that returns it.
	   * It's used to set the position of the popover.
	   */
	  anchorEl: chainPropTypes(propTypes.oneOfType([HTMLElementType, propTypes.func]), function (props) {
	    if (props.open && (!props.anchorReference || props.anchorReference === 'anchorEl')) {
	      var resolvedAnchorEl = getAnchorEl(props.anchorEl);

	      if (resolvedAnchorEl && resolvedAnchorEl.nodeType === 1) {
	        var box = resolvedAnchorEl.getBoundingClientRect();

	        if (process.env.NODE_ENV !== 'test' && box.top === 0 && box.left === 0 && box.right === 0 && box.bottom === 0) {
	          return new Error(['Material-UI: The `anchorEl` prop provided to the component is invalid.', 'The anchor element should be part of the document layout.', "Make sure the element is present in the document or that it's not display none."].join('\n'));
	        }
	      } else {
	        return new Error(['Material-UI: The `anchorEl` prop provided to the component is invalid.', "It should be an Element instance but it's `".concat(resolvedAnchorEl, "` instead.")].join('\n'));
	      }
	    }

	    return null;
	  }),

	  /**
	   * This is the point on the anchor where the popover's
	   * `anchorEl` will attach to. This is not used when the
	   * anchorReference is 'anchorPosition'.
	   *
	   * Options:
	   * vertical: [top, center, bottom];
	   * horizontal: [left, center, right].
	   */
	  anchorOrigin: propTypes.shape({
	    horizontal: propTypes.oneOfType([propTypes.oneOf(['center', 'left', 'right']), propTypes.number]).isRequired,
	    vertical: propTypes.oneOfType([propTypes.oneOf(['bottom', 'center', 'top']), propTypes.number]).isRequired
	  }),

	  /**
	   * This is the position that may be used
	   * to set the position of the popover.
	   * The coordinates are relative to
	   * the application's client area.
	   */
	  anchorPosition: propTypes.shape({
	    left: propTypes.number.isRequired,
	    top: propTypes.number.isRequired
	  }),

	  /**
	   * This determines which anchor prop to refer to to set
	   * the position of the popover.
	   */
	  anchorReference: propTypes.oneOf(['anchorEl', 'anchorPosition', 'none']),

	  /**
	   * The content of the component.
	   */
	  children: propTypes.node,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.string,

	  /**
	   * A HTML element, component instance, or function that returns either.
	   * The `container` will passed to the Modal component.
	   *
	   * By default, it uses the body of the anchorEl's top-level document object,
	   * so it's simply `document.body` most of the time.
	   */
	  container: propTypes
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([HTMLElementType, propTypes.instanceOf(React.Component), propTypes.func]),

	  /**
	   * The elevation of the popover.
	   */
	  elevation: propTypes.number,

	  /**
	   * This function is called in order to retrieve the content anchor element.
	   * It's the opposite of the `anchorEl` prop.
	   * The content anchor element should be an element inside the popover.
	   * It's used to correctly scroll and set the position of the popover.
	   * The positioning strategy tries to make the content anchor element just above the
	   * anchor element.
	   */
	  getContentAnchorEl: propTypes.func,

	  /**
	   * Specifies how close to the edge of the window the popover can appear.
	   */
	  marginThreshold: propTypes.number,

	  /**
	   * Callback fired when the component requests to be closed.
	   */
	  onClose: propTypes.func,

	  /**
	   * Callback fired before the component is entering.
	   */
	  onEnter: propTypes.func,

	  /**
	   * Callback fired when the component has entered.
	   */
	  onEntered: propTypes.func,

	  /**
	   * Callback fired when the component is entering.
	   */
	  onEntering: propTypes.func,

	  /**
	   * Callback fired before the component is exiting.
	   */
	  onExit: propTypes.func,

	  /**
	   * Callback fired when the component has exited.
	   */
	  onExited: propTypes.func,

	  /**
	   * Callback fired when the component is exiting.
	   */
	  onExiting: propTypes.func,

	  /**
	   * If `true`, the popover is visible.
	   */
	  open: propTypes.bool.isRequired,

	  /**
	   * Props applied to the [`Paper`](/api/paper/) element.
	   */
	  PaperProps: propTypes
	  /* @typescript-to-proptypes-ignore */
	  .shape({
	    component: elementTypeAcceptingRef$1
	  }),

	  /**
	   * This is the point on the popover which
	   * will attach to the anchor's origin.
	   *
	   * Options:
	   * vertical: [top, center, bottom, x(px)];
	   * horizontal: [left, center, right, x(px)].
	   */
	  transformOrigin: propTypes.shape({
	    horizontal: propTypes.oneOfType([propTypes.oneOf(['center', 'left', 'right']), propTypes.number]).isRequired,
	    vertical: propTypes.oneOfType([propTypes.oneOf(['bottom', 'center', 'top']), propTypes.number]).isRequired
	  }),

	  /**
	   * The component used for the transition.
	   * [Follow this guide](/components/transitions/#transitioncomponent-prop) to learn more about the requirements for this component.
	   */
	  TransitionComponent: propTypes.elementType,

	  /**
	   * Set to 'auto' to automatically calculate transition time based on height.
	   */
	  transitionDuration: propTypes.oneOfType([propTypes.oneOf(['auto']), propTypes.number, propTypes.shape({
	    appear: propTypes.number,
	    enter: propTypes.number,
	    exit: propTypes.number
	  })]),

	  /**
	   * Props applied to the [`Transition`](http://reactcommunity.org/react-transition-group/transition#Transition-props) element.
	   */
	  TransitionProps: propTypes.object
	} : void 0;
	var Popover$1 = withStyles$1(styles$C, {
	  name: 'MuiPopover'
	})(Popover);

	function nextItem(list, item, disableListWrap) {
	  if (list === item) {
	    return list.firstChild;
	  }

	  if (item && item.nextElementSibling) {
	    return item.nextElementSibling;
	  }

	  return disableListWrap ? null : list.firstChild;
	}

	function previousItem(list, item, disableListWrap) {
	  if (list === item) {
	    return disableListWrap ? list.firstChild : list.lastChild;
	  }

	  if (item && item.previousElementSibling) {
	    return item.previousElementSibling;
	  }

	  return disableListWrap ? null : list.lastChild;
	}

	function textCriteriaMatches(nextFocus, textCriteria) {
	  if (textCriteria === undefined) {
	    return true;
	  }

	  var text = nextFocus.innerText;

	  if (text === undefined) {
	    // jsdom doesn't support innerText
	    text = nextFocus.textContent;
	  }

	  text = text.trim().toLowerCase();

	  if (text.length === 0) {
	    return false;
	  }

	  if (textCriteria.repeating) {
	    return text[0] === textCriteria.keys[0];
	  }

	  return text.indexOf(textCriteria.keys.join('')) === 0;
	}

	function moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, traversalFunction, textCriteria) {
	  var wrappedOnce = false;
	  var nextFocus = traversalFunction(list, currentFocus, currentFocus ? disableListWrap : false);

	  while (nextFocus) {
	    // Prevent infinite loop.
	    if (nextFocus === list.firstChild) {
	      if (wrappedOnce) {
	        return;
	      }

	      wrappedOnce = true;
	    } // Same logic as useAutocomplete.js


	    var nextFocusDisabled = disabledItemsFocusable ? false : nextFocus.disabled || nextFocus.getAttribute('aria-disabled') === 'true';

	    if (!nextFocus.hasAttribute('tabindex') || !textCriteriaMatches(nextFocus, textCriteria) || nextFocusDisabled) {
	      // Move to the next element.
	      nextFocus = traversalFunction(list, nextFocus, disableListWrap);
	    } else {
	      nextFocus.focus();
	      return;
	    }
	  }
	}

	var useEnhancedEffect$6 = typeof window === 'undefined' ? React.useEffect : React.useLayoutEffect;
	/**
	 * A permanently displayed menu following https://www.w3.org/TR/wai-aria-practices/#menubutton.
	 * It's exposed to help customization of the [`Menu`](/api/menu/) component. If you
	 * use it separately you need to move focus into the component manually. Once
	 * the focus is placed inside the component it is fully keyboard accessible.
	 */

	var MenuList = /*#__PURE__*/React.forwardRef(function MenuList(props, ref) {
	  var actions = props.actions,
	      _props$autoFocus = props.autoFocus,
	      autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus,
	      _props$autoFocusItem = props.autoFocusItem,
	      autoFocusItem = _props$autoFocusItem === void 0 ? false : _props$autoFocusItem,
	      children = props.children,
	      className = props.className,
	      _props$disabledItemsF = props.disabledItemsFocusable,
	      disabledItemsFocusable = _props$disabledItemsF === void 0 ? false : _props$disabledItemsF,
	      _props$disableListWra = props.disableListWrap,
	      disableListWrap = _props$disableListWra === void 0 ? false : _props$disableListWra,
	      onKeyDown = props.onKeyDown,
	      _props$variant = props.variant,
	      variant = _props$variant === void 0 ? 'selectedMenu' : _props$variant,
	      other = _objectWithoutProperties(props, ["actions", "autoFocus", "autoFocusItem", "children", "className", "disabledItemsFocusable", "disableListWrap", "onKeyDown", "variant"]);

	  var listRef = React.useRef(null);
	  var textCriteriaRef = React.useRef({
	    keys: [],
	    repeating: true,
	    previousKeyMatched: true,
	    lastTime: null
	  });
	  useEnhancedEffect$6(function () {
	    if (autoFocus) {
	      listRef.current.focus();
	    }
	  }, [autoFocus]);
	  React.useImperativeHandle(actions, function () {
	    return {
	      adjustStyleForScrollbar: function adjustStyleForScrollbar(containerElement, theme) {
	        // Let's ignore that piece of logic if users are already overriding the width
	        // of the menu.
	        var noExplicitWidth = !listRef.current.style.width;

	        if (containerElement.clientHeight < listRef.current.clientHeight && noExplicitWidth) {
	          var scrollbarSize = "".concat(getScrollbarSize(), "px");
	          listRef.current.style[theme.direction === 'rtl' ? 'paddingLeft' : 'paddingRight'] = scrollbarSize;
	          listRef.current.style.width = "calc(100% + ".concat(scrollbarSize, ")");
	        }

	        return listRef.current;
	      }
	    };
	  }, []);

	  var handleKeyDown = function handleKeyDown(event) {
	    var list = listRef.current;
	    var key = event.key;
	    /**
	     * @type {Element} - will always be defined since we are in a keydown handler
	     * attached to an element. A keydown event is either dispatched to the activeElement
	     * or document.body or document.documentElement. Only the first case will
	     * trigger this specific handler.
	     */

	    var currentFocus = ownerDocument(list).activeElement;

	    if (key === 'ArrowDown') {
	      // Prevent scroll of the page
	      event.preventDefault();
	      moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, nextItem);
	    } else if (key === 'ArrowUp') {
	      event.preventDefault();
	      moveFocus(list, currentFocus, disableListWrap, disabledItemsFocusable, previousItem);
	    } else if (key === 'Home') {
	      event.preventDefault();
	      moveFocus(list, null, disableListWrap, disabledItemsFocusable, nextItem);
	    } else if (key === 'End') {
	      event.preventDefault();
	      moveFocus(list, null, disableListWrap, disabledItemsFocusable, previousItem);
	    } else if (key.length === 1) {
	      var criteria = textCriteriaRef.current;
	      var lowerKey = key.toLowerCase();
	      var currTime = performance.now();

	      if (criteria.keys.length > 0) {
	        // Reset
	        if (currTime - criteria.lastTime > 500) {
	          criteria.keys = [];
	          criteria.repeating = true;
	          criteria.previousKeyMatched = true;
	        } else if (criteria.repeating && lowerKey !== criteria.keys[0]) {
	          criteria.repeating = false;
	        }
	      }

	      criteria.lastTime = currTime;
	      criteria.keys.push(lowerKey);
	      var keepFocusOnCurrent = currentFocus && !criteria.repeating && textCriteriaMatches(currentFocus, criteria);

	      if (criteria.previousKeyMatched && (keepFocusOnCurrent || moveFocus(list, currentFocus, false, disabledItemsFocusable, nextItem, criteria))) {
	        event.preventDefault();
	      } else {
	        criteria.previousKeyMatched = false;
	      }
	    }

	    if (onKeyDown) {
	      onKeyDown(event);
	    }
	  };

	  var handleOwnRef = React.useCallback(function (instance) {
	    // #StrictMode ready
	    listRef.current = ReactDOM.findDOMNode(instance);
	  }, []);
	  var handleRef = useForkRef(handleOwnRef, ref);
	  /**
	   * the index of the item should receive focus
	   * in a `variant="selectedMenu"` it's the first `selected` item
	   * otherwise it's the very first item.
	   */

	  var activeItemIndex = -1; // since we inject focus related props into children we have to do a lookahead
	  // to check if there is a `selected` item. We're looking for the last `selected`
	  // item and use the first valid item as a fallback

	  React.Children.forEach(children, function (child, index) {
	    if (! /*#__PURE__*/React.isValidElement(child)) {
	      return;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      if (reactIs_1(child)) {
	        console.error(["Material-UI: The Menu component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
	      }
	    }

	    if (!child.props.disabled) {
	      if (variant === 'selectedMenu' && child.props.selected) {
	        activeItemIndex = index;
	      } else if (activeItemIndex === -1) {
	        activeItemIndex = index;
	      }
	    }
	  });
	  var items = React.Children.map(children, function (child, index) {
	    if (index === activeItemIndex) {
	      var newChildProps = {};

	      if (autoFocusItem) {
	        newChildProps.autoFocus = true;
	      }

	      if (child.props.tabIndex === undefined && variant === 'selectedMenu') {
	        newChildProps.tabIndex = 0;
	      }

	      return /*#__PURE__*/React.cloneElement(child, newChildProps);
	    }

	    return child;
	  });
	  return /*#__PURE__*/React.createElement(List$1, _extends({
	    role: "menu",
	    ref: handleRef,
	    className: className,
	    onKeyDown: handleKeyDown,
	    tabIndex: autoFocus ? 0 : -1
	  }, other), items);
	});
	process.env.NODE_ENV !== "production" ? MenuList.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * If `true`, will focus the `[role="menu"]` container and move into tab order.
	   */
	  autoFocus: propTypes.bool,

	  /**
	   * If `true`, will focus the first menuitem if `variant="menu"` or selected item
	   * if `variant="selectedMenu"`.
	   */
	  autoFocusItem: propTypes.bool,

	  /**
	   * MenuList contents, normally `MenuItem`s.
	   */
	  children: propTypes.node,

	  /**
	   * @ignore
	   */
	  className: propTypes.string,

	  /**
	   * If `true`, will allow focus on disabled items.
	   */
	  disabledItemsFocusable: propTypes.bool,

	  /**
	   * If `true`, the menu items will not wrap focus.
	   */
	  disableListWrap: propTypes.bool,

	  /**
	   * @ignore
	   */
	  onKeyDown: propTypes.func,

	  /**
	   * The variant to use. Use `menu` to prevent selected items from impacting the initial focus
	   * and the vertical alignment relative to the anchor element.
	   */
	  variant: propTypes.oneOf(['menu', 'selectedMenu'])
	} : void 0;

	var RTL_ORIGIN = {
	  vertical: 'top',
	  horizontal: 'right'
	};
	var LTR_ORIGIN = {
	  vertical: 'top',
	  horizontal: 'left'
	};
	var styles$D = {
	  /* Styles applied to the `Paper` component. */
	  paper: {
	    // specZ: The maximum height of a simple menu should be one or more rows less than the view
	    // height. This ensures a tapable area outside of the simple menu with which to dismiss
	    // the menu.
	    maxHeight: 'calc(100% - 96px)',
	    // Add iOS momentum scrolling.
	    WebkitOverflowScrolling: 'touch'
	  },

	  /* Styles applied to the `List` component via `MenuList`. */
	  list: {
	    // We disable the focus ring for mouse, touch and keyboard users.
	    outline: 0
	  }
	};
	var Menu = /*#__PURE__*/React.forwardRef(function Menu(props, ref) {
	  var _props$autoFocus = props.autoFocus,
	      autoFocus = _props$autoFocus === void 0 ? true : _props$autoFocus,
	      children = props.children,
	      classes = props.classes,
	      _props$disableAutoFoc = props.disableAutoFocusItem,
	      disableAutoFocusItem = _props$disableAutoFoc === void 0 ? false : _props$disableAutoFoc,
	      _props$MenuListProps = props.MenuListProps,
	      MenuListProps = _props$MenuListProps === void 0 ? {} : _props$MenuListProps,
	      onClose = props.onClose,
	      onEntering = props.onEntering,
	      open = props.open,
	      _props$PaperProps = props.PaperProps,
	      PaperProps = _props$PaperProps === void 0 ? {} : _props$PaperProps,
	      PopoverClasses = props.PopoverClasses,
	      _props$transitionDura = props.transitionDuration,
	      transitionDuration = _props$transitionDura === void 0 ? 'auto' : _props$transitionDura,
	      _props$variant = props.variant,
	      variant = _props$variant === void 0 ? 'selectedMenu' : _props$variant,
	      other = _objectWithoutProperties(props, ["autoFocus", "children", "classes", "disableAutoFocusItem", "MenuListProps", "onClose", "onEntering", "open", "PaperProps", "PopoverClasses", "transitionDuration", "variant"]);

	  var theme = useTheme$1();
	  var autoFocusItem = autoFocus && !disableAutoFocusItem && open;
	  var menuListActionsRef = React.useRef(null);
	  var contentAnchorRef = React.useRef(null);

	  var getContentAnchorEl = function getContentAnchorEl() {
	    return contentAnchorRef.current;
	  };

	  var handleEntering = function handleEntering(element, isAppearing) {
	    if (menuListActionsRef.current) {
	      menuListActionsRef.current.adjustStyleForScrollbar(element, theme);
	    }

	    if (onEntering) {
	      onEntering(element, isAppearing);
	    }
	  };

	  var handleListKeyDown = function handleListKeyDown(event) {
	    if (event.key === 'Tab') {
	      event.preventDefault();

	      if (onClose) {
	        onClose(event, 'tabKeyDown');
	      }
	    }
	  };
	  /**
	   * the index of the item should receive focus
	   * in a `variant="selectedMenu"` it's the first `selected` item
	   * otherwise it's the very first item.
	   */


	  var activeItemIndex = -1; // since we inject focus related props into children we have to do a lookahead
	  // to check if there is a `selected` item. We're looking for the last `selected`
	  // item and use the first valid item as a fallback

	  React.Children.map(children, function (child, index) {
	    if (! /*#__PURE__*/React.isValidElement(child)) {
	      return;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      if (reactIs_1(child)) {
	        console.error(["Material-UI: The Menu component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
	      }
	    }

	    if (!child.props.disabled) {
	      if (variant !== "menu" && child.props.selected) {
	        activeItemIndex = index;
	      } else if (activeItemIndex === -1) {
	        activeItemIndex = index;
	      }
	    }
	  });
	  var items = React.Children.map(children, function (child, index) {
	    if (index === activeItemIndex) {
	      return /*#__PURE__*/React.cloneElement(child, {
	        ref: function ref(instance) {
	          // #StrictMode ready
	          contentAnchorRef.current = ReactDOM.findDOMNode(instance);
	          setRef(child.ref, instance);
	        }
	      });
	    }

	    return child;
	  });
	  return /*#__PURE__*/React.createElement(Popover$1, _extends({
	    getContentAnchorEl: getContentAnchorEl,
	    classes: PopoverClasses,
	    onClose: onClose,
	    onEntering: handleEntering,
	    anchorOrigin: theme.direction === 'rtl' ? RTL_ORIGIN : LTR_ORIGIN,
	    transformOrigin: theme.direction === 'rtl' ? RTL_ORIGIN : LTR_ORIGIN,
	    PaperProps: _extends({}, PaperProps, {
	      classes: _extends({}, PaperProps.classes, {
	        root: classes.paper
	      })
	    }),
	    open: open,
	    ref: ref,
	    transitionDuration: transitionDuration
	  }, other), /*#__PURE__*/React.createElement(MenuList, _extends({
	    onKeyDown: handleListKeyDown,
	    actions: menuListActionsRef,
	    autoFocus: autoFocus && (activeItemIndex === -1 || disableAutoFocusItem),
	    autoFocusItem: autoFocusItem,
	    variant: variant
	  }, MenuListProps, {
	    className: clsx(classes.list, MenuListProps.className)
	  }), items));
	});
	process.env.NODE_ENV !== "production" ? Menu.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * A HTML element, or a function that returns it.
	   * It's used to set the position of the menu.
	   */
	  anchorEl: propTypes
	  /* @typescript-to-proptypes-ignore */
	  .oneOfType([HTMLElementType, propTypes.func]),

	  /**
	   * If `true` (Default) will focus the `[role="menu"]` if no focusable child is found. Disabled
	   * children are not focusable. If you set this prop to `false` focus will be placed
	   * on the parent modal container. This has severe accessibility implications
	   * and should only be considered if you manage focus otherwise.
	   */
	  autoFocus: propTypes.bool,

	  /**
	   * Menu contents, normally `MenuItem`s.
	   */
	  children: propTypes.node,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object,

	  /**
	   * When opening the menu will not focus the active item but the `[role="menu"]`
	   * unless `autoFocus` is also set to `false`. Not using the default means not
	   * following WAI-ARIA authoring practices. Please be considerate about possible
	   * accessibility implications.
	   */
	  disableAutoFocusItem: propTypes.bool,

	  /**
	   * Props applied to the [`MenuList`](/api/menu-list/) element.
	   */
	  MenuListProps: propTypes.object,

	  /**
	   * Callback fired when the component requests to be closed.
	   *
	   * @param {object} event The event source of the callback.
	   * @param {string} reason Can be: `"escapeKeyDown"`, `"backdropClick"`, `"tabKeyDown"`.
	   */
	  onClose: propTypes.func,

	  /**
	   * Callback fired before the Menu enters.
	   */
	  onEnter: propTypes.func,

	  /**
	   * Callback fired when the Menu has entered.
	   */
	  onEntered: propTypes.func,

	  /**
	   * Callback fired when the Menu is entering.
	   */
	  onEntering: propTypes.func,

	  /**
	   * Callback fired before the Menu exits.
	   */
	  onExit: propTypes.func,

	  /**
	   * Callback fired when the Menu has exited.
	   */
	  onExited: propTypes.func,

	  /**
	   * Callback fired when the Menu is exiting.
	   */
	  onExiting: propTypes.func,

	  /**
	   * If `true`, the menu is visible.
	   */
	  open: propTypes.bool.isRequired,

	  /**
	   * @ignore
	   */
	  PaperProps: propTypes.object,

	  /**
	   * `classes` prop applied to the [`Popover`](/api/popover/) element.
	   */
	  PopoverClasses: propTypes.object,

	  /**
	   * The length of the transition in `ms`, or 'auto'
	   */
	  transitionDuration: propTypes.oneOfType([propTypes.oneOf(['auto']), propTypes.number, propTypes.shape({
	    appear: propTypes.number,
	    enter: propTypes.number,
	    exit: propTypes.number
	  })]),

	  /**
	   * The variant to use. Use `menu` to prevent selected items from impacting the initial focus
	   * and the vertical alignment relative to the anchor element.
	   */
	  variant: propTypes.oneOf(['menu', 'selectedMenu'])
	} : void 0;
	var Menu$1 = withStyles$1(styles$D, {
	  name: 'MuiMenu'
	})(Menu);

	var styles$E = function styles(theme) {
	  return {
	    /* Styles applied to the root element. */
	    root: _extends({}, theme.typography.body1, _defineProperty({
	      minHeight: 48,
	      paddingTop: 6,
	      paddingBottom: 6,
	      boxSizing: 'border-box',
	      width: 'auto',
	      overflow: 'hidden',
	      whiteSpace: 'nowrap'
	    }, theme.breakpoints.up('sm'), {
	      minHeight: 'auto'
	    })),
	    // TODO v5: remove

	    /* Styles applied to the root element if `disableGutters={false}`. */
	    gutters: {},

	    /* Styles applied to the root element if `selected={true}`. */
	    selected: {},

	    /* Styles applied to the root element if dense. */
	    dense: _extends({}, theme.typography.body2, {
	      minHeight: 'auto'
	    })
	  };
	};
	var MenuItem = /*#__PURE__*/React.forwardRef(function MenuItem(props, ref) {
	  var classes = props.classes,
	      className = props.className,
	      _props$component = props.component,
	      component = _props$component === void 0 ? 'li' : _props$component,
	      _props$disableGutters = props.disableGutters,
	      disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters,
	      ListItemClasses = props.ListItemClasses,
	      _props$role = props.role,
	      role = _props$role === void 0 ? 'menuitem' : _props$role,
	      selected = props.selected,
	      tabIndexProp = props.tabIndex,
	      other = _objectWithoutProperties(props, ["classes", "className", "component", "disableGutters", "ListItemClasses", "role", "selected", "tabIndex"]);

	  var tabIndex;

	  if (!props.disabled) {
	    tabIndex = tabIndexProp !== undefined ? tabIndexProp : -1;
	  }

	  return /*#__PURE__*/React.createElement(ListItem$1, _extends({
	    button: true,
	    role: role,
	    tabIndex: tabIndex,
	    component: component,
	    selected: selected,
	    disableGutters: disableGutters,
	    classes: _extends({
	      dense: classes.dense
	    }, ListItemClasses),
	    className: clsx(classes.root, className, selected && classes.selected, !disableGutters && classes.gutters),
	    ref: ref
	  }, other));
	});
	process.env.NODE_ENV !== "production" ? MenuItem.propTypes = {
	  /**
	   * Menu item contents.
	   */
	  children: propTypes.node,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object.isRequired,

	  /**
	   * @ignore
	   */
	  className: propTypes.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes
	  /* @typescript-to-proptypes-ignore */
	  .elementType,

	  /**
	   * If `true`, compact vertical padding designed for keyboard and mouse input will be used.
	   */
	  dense: propTypes.bool,

	  /**
	   * @ignore
	   */
	  disabled: propTypes.bool,

	  /**
	   * If `true`, the left and right padding is removed.
	   */
	  disableGutters: propTypes.bool,

	  /**
	   * `classes` prop applied to the [`ListItem`](/api/list-item/) element.
	   */
	  ListItemClasses: propTypes.object,

	  /**
	   * @ignore
	   */
	  role: propTypes.string,

	  /**
	   * @ignore
	   */
	  selected: propTypes.bool,

	  /**
	   * @ignore
	   */
	  tabIndex: propTypes.number
	} : void 0;
	var MenuItem$1 = withStyles$1(styles$E, {
	  name: 'MuiMenuItem'
	})(MenuItem);

	/**
	 * @ignore - internal component.
	 */

	var NativeSelectInput = /*#__PURE__*/React.forwardRef(function NativeSelectInput(props, ref) {
	  var classes = props.classes,
	      className = props.className,
	      disabled = props.disabled,
	      IconComponent = props.IconComponent,
	      inputRef = props.inputRef,
	      _props$variant = props.variant,
	      variant = _props$variant === void 0 ? 'standard' : _props$variant,
	      other = _objectWithoutProperties(props, ["classes", "className", "disabled", "IconComponent", "inputRef", "variant"]);

	  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("select", _extends({
	    className: clsx(classes.root, // TODO v5: merge root and select
	    classes.select, classes[variant], className, disabled && classes.disabled),
	    disabled: disabled,
	    ref: inputRef || ref
	  }, other)), props.multiple ? null : /*#__PURE__*/React.createElement(IconComponent, {
	    className: clsx(classes.icon, classes["icon".concat(capitalize(variant))], disabled && classes.disabled)
	  }));
	});
	process.env.NODE_ENV !== "production" ? NativeSelectInput.propTypes = {
	  /**
	   * The option elements to populate the select with.
	   * Can be some `<option>` elements.
	   */
	  children: propTypes.node,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object.isRequired,

	  /**
	   * The CSS class name of the select element.
	   */
	  className: propTypes.string,

	  /**
	   * If `true`, the select will be disabled.
	   */
	  disabled: propTypes.bool,

	  /**
	   * The icon that displays the arrow.
	   */
	  IconComponent: propTypes.elementType.isRequired,

	  /**
	   * Use that prop to pass a ref to the native select element.
	   * @deprecated
	   */
	  inputRef: refType,

	  /**
	   * @ignore
	   */
	  multiple: propTypes.bool,

	  /**
	   * Name attribute of the `select` or hidden `input` element.
	   */
	  name: propTypes.string,

	  /**
	   * Callback function fired when a menu item is selected.
	   *
	   * @param {object} event The event source of the callback.
	   * You can pull out the new value by accessing `event.target.value` (string).
	   */
	  onChange: propTypes.func,

	  /**
	   * The input value.
	   */
	  value: propTypes.any,

	  /**
	   * The variant to use.
	   */
	  variant: propTypes.oneOf(['standard', 'outlined', 'filled'])
	} : void 0;

	/**
	 * @ignore - internal component.
	 */

	var ArrowDropDownIcon = createSvgIcon( /*#__PURE__*/React.createElement("path", {
	  d: "M7 10l5 5 5-5z"
	}), 'ArrowDropDown');

	var styles$F = function styles(theme) {
	  return {
	    /* Styles applied to the select component `root` class. */
	    root: {},

	    /* Styles applied to the select component `select` class. */
	    select: {
	      '-moz-appearance': 'none',
	      // Reset
	      '-webkit-appearance': 'none',
	      // Reset
	      // When interacting quickly, the text can end up selected.
	      // Native select can't be selected either.
	      userSelect: 'none',
	      borderRadius: 0,
	      // Reset
	      minWidth: 16,
	      // So it doesn't collapse.
	      cursor: 'pointer',
	      '&:focus': {
	        // Show that it's not an text input
	        backgroundColor: theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.05)' : 'rgba(255, 255, 255, 0.05)',
	        borderRadius: 0 // Reset Chrome style

	      },
	      // Remove IE 11 arrow
	      '&::-ms-expand': {
	        display: 'none'
	      },
	      '&$disabled': {
	        cursor: 'default'
	      },
	      '&[multiple]': {
	        height: 'auto'
	      },
	      '&:not([multiple]) option, &:not([multiple]) optgroup': {
	        backgroundColor: theme.palette.background.paper
	      },
	      '&&': {
	        paddingRight: 24
	      }
	    },

	    /* Styles applied to the select component if `variant="filled"`. */
	    filled: {
	      '&&': {
	        paddingRight: 32
	      }
	    },

	    /* Styles applied to the select component if `variant="outlined"`. */
	    outlined: {
	      borderRadius: theme.shape.borderRadius,
	      '&&': {
	        paddingRight: 32
	      }
	    },

	    /* Styles applied to the select component `selectMenu` class. */
	    selectMenu: {
	      height: 'auto',
	      // Resets for multpile select with chips
	      minHeight: '1.1876em',
	      // Required for select\text-field height consistency
	      textOverflow: 'ellipsis',
	      whiteSpace: 'nowrap',
	      overflow: 'hidden'
	    },

	    /* Pseudo-class applied to the select component `disabled` class. */
	    disabled: {},

	    /* Styles applied to the icon component. */
	    icon: {
	      // We use a position absolute over a flexbox in order to forward the pointer events
	      // to the input and to support wrapping tags..
	      position: 'absolute',
	      right: 0,
	      top: 'calc(50% - 12px)',
	      // Center vertically
	      pointerEvents: 'none',
	      // Don't block pointer events on the select under the icon.
	      color: theme.palette.action.active,
	      '&$disabled': {
	        color: theme.palette.action.disabled
	      }
	    },

	    /* Styles applied to the icon component if the popup is open. */
	    iconOpen: {
	      transform: 'rotate(180deg)'
	    },

	    /* Styles applied to the icon component if `variant="filled"`. */
	    iconFilled: {
	      right: 7
	    },

	    /* Styles applied to the icon component if `variant="outlined"`. */
	    iconOutlined: {
	      right: 7
	    },

	    /* Styles applied to the underlying native input component. */
	    nativeInput: {
	      bottom: 0,
	      left: 0,
	      position: 'absolute',
	      opacity: 0,
	      pointerEvents: 'none',
	      width: '100%'
	    }
	  };
	};
	var defaultInput = /*#__PURE__*/React.createElement(Input$1, null);
	/**
	 * An alternative to `<Select native />` with a much smaller bundle size footprint.
	 */

	var NativeSelect = /*#__PURE__*/React.forwardRef(function NativeSelect(props, ref) {
	  var children = props.children,
	      classes = props.classes,
	      _props$IconComponent = props.IconComponent,
	      IconComponent = _props$IconComponent === void 0 ? ArrowDropDownIcon : _props$IconComponent,
	      _props$input = props.input,
	      input = _props$input === void 0 ? defaultInput : _props$input,
	      inputProps = props.inputProps,
	      variant = props.variant,
	      other = _objectWithoutProperties(props, ["children", "classes", "IconComponent", "input", "inputProps", "variant"]);

	  var muiFormControl = useFormControl$1();
	  var fcs = formControlState({
	    props: props,
	    muiFormControl: muiFormControl,
	    states: ['variant']
	  });
	  return /*#__PURE__*/React.cloneElement(input, _extends({
	    // Most of the logic is implemented in `NativeSelectInput`.
	    // The `Select` component is a simple API wrapper to expose something better to play with.
	    inputComponent: NativeSelectInput,
	    inputProps: _extends({
	      children: children,
	      classes: classes,
	      IconComponent: IconComponent,
	      variant: fcs.variant,
	      type: undefined
	    }, inputProps, input ? input.props.inputProps : {}),
	    ref: ref
	  }, other));
	});
	process.env.NODE_ENV !== "production" ? NativeSelect.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * The option elements to populate the select with.
	   * Can be some `<option>` elements.
	   */
	  children: propTypes.node,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object,

	  /**
	   * The icon that displays the arrow.
	   */
	  IconComponent: propTypes.elementType,

	  /**
	   * An `Input` element; does not have to be a material-ui specific `Input`.
	   */
	  input: propTypes.element,

	  /**
	   * Attributes applied to the `select` element.
	   */
	  inputProps: propTypes.object,

	  /**
	   * Callback function fired when a menu item is selected.
	   *
	   * @param {object} event The event source of the callback.
	   * You can pull out the new value by accessing `event.target.value` (string).
	   */
	  onChange: propTypes.func,

	  /**
	   * The input value. The DOM API casts this to a string.
	   */
	  value: propTypes.any,

	  /**
	   * The variant to use.
	   */
	  variant: propTypes.oneOf(['filled', 'outlined', 'standard'])
	} : void 0;
	NativeSelect.muiName = 'Select';
	var NativeSelect$1 = withStyles$1(styles$F, {
	  name: 'MuiNativeSelect'
	})(NativeSelect);

	var styles$G = function styles(theme) {
	  return {
	    /* Styles applied to the root element. */
	    root: {
	      position: 'absolute',
	      bottom: 0,
	      right: 0,
	      top: -5,
	      left: 0,
	      margin: 0,
	      padding: '0 8px',
	      pointerEvents: 'none',
	      borderRadius: 'inherit',
	      borderStyle: 'solid',
	      borderWidth: 1,
	      overflow: 'hidden'
	    },

	    /* Styles applied to the legend element when `labelWidth` is provided. */
	    legend: {
	      textAlign: 'left',
	      padding: 0,
	      lineHeight: '11px',
	      // sync with `height` in `legend` styles
	      transition: theme.transitions.create('width', {
	        duration: 150,
	        easing: theme.transitions.easing.easeOut
	      })
	    },

	    /* Styles applied to the legend element. */
	    legendLabelled: {
	      display: 'block',
	      width: 'auto',
	      textAlign: 'left',
	      padding: 0,
	      height: 11,
	      // sync with `lineHeight` in `legend` styles
	      fontSize: '0.75em',
	      visibility: 'hidden',
	      maxWidth: 0.01,
	      transition: theme.transitions.create('max-width', {
	        duration: 50,
	        easing: theme.transitions.easing.easeOut
	      }),
	      '& > span': {
	        paddingLeft: 5,
	        paddingRight: 5,
	        display: 'inline-block'
	      }
	    },

	    /* Styles applied to the legend element is notched. */
	    legendNotched: {
	      maxWidth: 1000,
	      transition: theme.transitions.create('max-width', {
	        duration: 100,
	        easing: theme.transitions.easing.easeOut,
	        delay: 50
	      })
	    }
	  };
	};
	/**
	 * @ignore - internal component.
	 */

	var NotchedOutline = /*#__PURE__*/React.forwardRef(function NotchedOutline(props, ref) {
	  var children = props.children,
	      classes = props.classes,
	      className = props.className,
	      label = props.label,
	      labelWidthProp = props.labelWidth,
	      notched = props.notched,
	      style = props.style,
	      other = _objectWithoutProperties(props, ["children", "classes", "className", "label", "labelWidth", "notched", "style"]);

	  var theme = useTheme$1();
	  var align = theme.direction === 'rtl' ? 'right' : 'left';

	  if (label !== undefined) {
	    return /*#__PURE__*/React.createElement("fieldset", _extends({
	      "aria-hidden": true,
	      className: clsx(classes.root, className),
	      ref: ref,
	      style: style
	    }, other), /*#__PURE__*/React.createElement("legend", {
	      className: clsx(classes.legendLabelled, notched && classes.legendNotched)
	    }, label ? /*#__PURE__*/React.createElement("span", null, label) : /*#__PURE__*/React.createElement("span", {
	      dangerouslySetInnerHTML: {
	        __html: '&#8203;'
	      }
	    })));
	  }

	  var labelWidth = labelWidthProp > 0 ? labelWidthProp * 0.75 + 8 : 0.01;
	  return /*#__PURE__*/React.createElement("fieldset", _extends({
	    "aria-hidden": true,
	    style: _extends(_defineProperty({}, "padding".concat(capitalize(align)), 8), style),
	    className: clsx(classes.root, className),
	    ref: ref
	  }, other), /*#__PURE__*/React.createElement("legend", {
	    className: classes.legend,
	    style: {
	      // IE 11: fieldset with legend does not render
	      // a border radius. This maintains consistency
	      // by always having a legend rendered
	      width: notched ? labelWidth : 0.01
	    }
	  }, /*#__PURE__*/React.createElement("span", {
	    dangerouslySetInnerHTML: {
	      __html: '&#8203;'
	    }
	  })));
	});
	process.env.NODE_ENV !== "production" ? NotchedOutline.propTypes = {
	  /**
	   * The content of the component.
	   */
	  children: propTypes.node,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.string,

	  /**
	   * The label.
	   */
	  label: propTypes.node,

	  /**
	   * The width of the label.
	   */
	  labelWidth: propTypes.number.isRequired,

	  /**
	   * If `true`, the outline is notched to accommodate the label.
	   */
	  notched: propTypes.bool.isRequired,

	  /**
	   * @ignore
	   */
	  style: propTypes.object
	} : void 0;
	var NotchedOutline$1 = withStyles$1(styles$G, {
	  name: 'PrivateNotchedOutline'
	})(NotchedOutline);

	var styles$H = function styles(theme) {
	  var borderColor = theme.palette.type === 'light' ? 'rgba(0, 0, 0, 0.23)' : 'rgba(255, 255, 255, 0.23)';
	  return {
	    /* Styles applied to the root element. */
	    root: {
	      position: 'relative',
	      borderRadius: theme.shape.borderRadius,
	      '&:hover $notchedOutline': {
	        borderColor: theme.palette.text.primary
	      },
	      // Reset on touch devices, it doesn't add specificity
	      '@media (hover: none)': {
	        '&:hover $notchedOutline': {
	          borderColor: borderColor
	        }
	      },
	      '&$focused $notchedOutline': {
	        borderColor: theme.palette.primary.main,
	        borderWidth: 2
	      },
	      '&$error $notchedOutline': {
	        borderColor: theme.palette.error.main
	      },
	      '&$disabled $notchedOutline': {
	        borderColor: theme.palette.action.disabled
	      }
	    },

	    /* Styles applied to the root element if the color is secondary. */
	    colorSecondary: {
	      '&$focused $notchedOutline': {
	        borderColor: theme.palette.secondary.main
	      }
	    },

	    /* Styles applied to the root element if the component is focused. */
	    focused: {},

	    /* Styles applied to the root element if `disabled={true}`. */
	    disabled: {},

	    /* Styles applied to the root element if `startAdornment` is provided. */
	    adornedStart: {
	      paddingLeft: 14
	    },

	    /* Styles applied to the root element if `endAdornment` is provided. */
	    adornedEnd: {
	      paddingRight: 14
	    },

	    /* Pseudo-class applied to the root element if `error={true}`. */
	    error: {},

	    /* Styles applied to the `input` element if `margin="dense"`. */
	    marginDense: {},

	    /* Styles applied to the root element if `multiline={true}`. */
	    multiline: {
	      padding: '18.5px 14px',
	      '&$marginDense': {
	        paddingTop: 10.5,
	        paddingBottom: 10.5
	      }
	    },

	    /* Styles applied to the `NotchedOutline` element. */
	    notchedOutline: {
	      borderColor: borderColor
	    },

	    /* Styles applied to the `input` element. */
	    input: {
	      padding: '18.5px 14px',
	      '&:-webkit-autofill': {
	        WebkitBoxShadow: theme.palette.type === 'light' ? null : '0 0 0 100px #266798 inset',
	        WebkitTextFillColor: theme.palette.type === 'light' ? null : '#fff',
	        caretColor: theme.palette.type === 'light' ? null : '#fff',
	        borderRadius: 'inherit'
	      }
	    },

	    /* Styles applied to the `input` element if `margin="dense"`. */
	    inputMarginDense: {
	      paddingTop: 10.5,
	      paddingBottom: 10.5
	    },

	    /* Styles applied to the `input` element if `multiline={true}`. */
	    inputMultiline: {
	      padding: 0
	    },

	    /* Styles applied to the `input` element if `startAdornment` is provided. */
	    inputAdornedStart: {
	      paddingLeft: 0
	    },

	    /* Styles applied to the `input` element if `endAdornment` is provided. */
	    inputAdornedEnd: {
	      paddingRight: 0
	    }
	  };
	};
	var OutlinedInput = /*#__PURE__*/React.forwardRef(function OutlinedInput(props, ref) {
	  var classes = props.classes,
	      _props$fullWidth = props.fullWidth,
	      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
	      _props$inputComponent = props.inputComponent,
	      inputComponent = _props$inputComponent === void 0 ? 'input' : _props$inputComponent,
	      label = props.label,
	      _props$labelWidth = props.labelWidth,
	      labelWidth = _props$labelWidth === void 0 ? 0 : _props$labelWidth,
	      _props$multiline = props.multiline,
	      multiline = _props$multiline === void 0 ? false : _props$multiline,
	      notched = props.notched,
	      _props$type = props.type,
	      type = _props$type === void 0 ? 'text' : _props$type,
	      other = _objectWithoutProperties(props, ["classes", "fullWidth", "inputComponent", "label", "labelWidth", "multiline", "notched", "type"]);

	  return /*#__PURE__*/React.createElement(InputBase$1, _extends({
	    renderSuffix: function renderSuffix(state) {
	      return /*#__PURE__*/React.createElement(NotchedOutline$1, {
	        className: classes.notchedOutline,
	        label: label,
	        labelWidth: labelWidth,
	        notched: typeof notched !== 'undefined' ? notched : Boolean(state.startAdornment || state.filled || state.focused)
	      });
	    },
	    classes: _extends({}, classes, {
	      root: clsx(classes.root, classes.underline),
	      notchedOutline: null
	    }),
	    fullWidth: fullWidth,
	    inputComponent: inputComponent,
	    multiline: multiline,
	    ref: ref,
	    type: type
	  }, other));
	});
	process.env.NODE_ENV !== "production" ? OutlinedInput.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * This prop helps users to fill forms faster, especially on mobile devices.
	   * The name can be confusing, as it's more like an autofill.
	   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
	   */
	  autoComplete: propTypes.string,

	  /**
	   * If `true`, the `input` element will be focused during the first mount.
	   */
	  autoFocus: propTypes.bool,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object,

	  /**
	   * The color of the component. It supports those theme colors that make sense for this component.
	   */
	  color: propTypes.oneOf(['primary', 'secondary']),

	  /**
	   * The default `input` element value. Use when the component is not controlled.
	   */
	  defaultValue: propTypes.any,

	  /**
	   * If `true`, the `input` element will be disabled.
	   */
	  disabled: propTypes.bool,

	  /**
	   * End `InputAdornment` for this component.
	   */
	  endAdornment: propTypes.node,

	  /**
	   * If `true`, the input will indicate an error. This is normally obtained via context from
	   * FormControl.
	   */
	  error: propTypes.bool,

	  /**
	   * If `true`, the input will take up the full width of its container.
	   */
	  fullWidth: propTypes.bool,

	  /**
	   * The id of the `input` element.
	   */
	  id: propTypes.string,

	  /**
	   * The component used for the `input` element.
	   * Either a string to use a HTML element or a component.
	   */
	  inputComponent: propTypes.elementType,

	  /**
	   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
	   */
	  inputProps: propTypes.object,

	  /**
	   * Pass a ref to the `input` element.
	   */
	  inputRef: refType,

	  /**
	   * The label of the input. It is only used for layout. The actual labelling
	   * is handled by `InputLabel`. If specified `labelWidth` is ignored.
	   */
	  label: propTypes.node,

	  /**
	   * The width of the label. Is ignored if `label` is provided. Prefer `label`
	   * if the input label appears with a strike through.
	   */
	  labelWidth: propTypes.number,

	  /**
	   * If `dense`, will adjust vertical spacing. This is normally obtained via context from
	   * FormControl.
	   */
	  margin: propTypes.oneOf(['dense', 'none']),

	  /**
	   * If `true`, a textarea element will be rendered.
	   */
	  multiline: propTypes.bool,

	  /**
	   * Name attribute of the `input` element.
	   */
	  name: propTypes.string,

	  /**
	   * If `true`, the outline is notched to accommodate the label.
	   */
	  notched: propTypes.bool,

	  /**
	   * Callback fired when the value is changed.
	   *
	   * @param {object} event The event source of the callback.
	   * You can pull out the new value by accessing `event.target.value` (string).
	   */
	  onChange: propTypes.func,

	  /**
	   * The short hint displayed in the input before the user enters a value.
	   */
	  placeholder: propTypes.string,

	  /**
	   * It prevents the user from changing the value of the field
	   * (not from interacting with the field).
	   */
	  readOnly: propTypes.bool,

	  /**
	   * If `true`, the `input` element will be required.
	   */
	  required: propTypes.bool,

	  /**
	   * Number of rows to display when multiline option is set to true.
	   */
	  rows: propTypes.oneOfType([propTypes.number, propTypes.string]),

	  /**
	   * Maximum number of rows to display when multiline option is set to true.
	   */
	  rowsMax: propTypes.oneOfType([propTypes.number, propTypes.string]),

	  /**
	   * Start `InputAdornment` for this component.
	   */
	  startAdornment: propTypes.node,

	  /**
	   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
	   */
	  type: propTypes.string,

	  /**
	   * The value of the `input` element, required for a controlled component.
	   */
	  value: propTypes.any
	} : void 0;
	OutlinedInput.muiName = 'Input';
	var OutlinedInput$1 = withStyles$1(styles$H, {
	  name: 'MuiOutlinedInput'
	})(OutlinedInput);

	function _setPrototypeOf(o, p) {
	  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf(o, p);
	}

	function _inherits(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function");
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf(subClass, superClass);
	}

	function _possibleConstructorReturn(self, call) {
	  if (call && (_typeof(call) === "object" || typeof call === "function")) {
	    return call;
	  }

	  return _assertThisInitialized(self);
	}

	function _getPrototypeOf(o) {
	  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
	    return o.__proto__ || Object.getPrototypeOf(o);
	  };
	  return _getPrototypeOf(o);
	}

	function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

	function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }
	/**
	 * ⚠️⚠️⚠️
	 * If you want the DOM element of a Material-UI component check out
	 * [FAQ: How can I access the DOM element?](/getting-started/faq/#how-can-i-access-the-dom-element)
	 * first.
	 *
	 * This component uses `findDOMNode` which is deprecated in React.StrictMode.
	 *
	 * Helper component to allow attaching a ref to a
	 * wrapped element to access the underlying DOM element.
	 *
	 * It's highly inspired by https://github.com/facebook/react/issues/11401#issuecomment-340543801.
	 * For example:
	 * ```jsx
	 * import React from 'react';
	 * import RootRef from '@material-ui/core/RootRef';
	 *
	 * function MyComponent() {
	 *   const domRef = React.useRef();
	 *
	 *   React.useEffect(() => {
	 *     console.log(domRef.current); // DOM node
	 *   }, []);
	 *
	 *   return (
	 *     <RootRef rootRef={domRef}>
	 *       <SomeChildComponent />
	 *     </RootRef>
	 *   );
	 * }
	 * ```
	 */

	var RootRef = /*#__PURE__*/function (_React$Component) {
	  _inherits(RootRef, _React$Component);

	  var _super = _createSuper(RootRef);

	  function RootRef() {
	    _classCallCheck(this, RootRef);

	    return _super.apply(this, arguments);
	  }

	  _createClass(RootRef, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      this.ref = ReactDOM.findDOMNode(this);
	      setRef(this.props.rootRef, this.ref);
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate(prevProps) {
	      var ref = ReactDOM.findDOMNode(this);

	      if (prevProps.rootRef !== this.props.rootRef || this.ref !== ref) {
	        if (prevProps.rootRef !== this.props.rootRef) {
	          setRef(prevProps.rootRef, null);
	        }

	        this.ref = ref;
	        setRef(this.props.rootRef, this.ref);
	      }
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      this.ref = null;
	      setRef(this.props.rootRef, null);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      return this.props.children;
	    }
	  }]);

	  return RootRef;
	}(React.Component);

	process.env.NODE_ENV !== "production" ? RootRef.propTypes = {
	  /**
	   * The wrapped element.
	   */
	  children: propTypes.element.isRequired,

	  /**
	   * A ref that points to the first DOM node of the wrapped element.
	   */
	  rootRef: refType.isRequired
	} : void 0;

	if (process.env.NODE_ENV !== 'production') {
	  process.env.NODE_ENV !== "production" ? RootRef.propTypes = exactProp(RootRef.propTypes) : void 0;
	}

	function areEqualValues(a, b) {
	  if (_typeof(b) === 'object' && b !== null) {
	    return a === b;
	  }

	  return String(a) === String(b);
	}

	function isEmpty(display) {
	  return display == null || typeof display === 'string' && !display.trim();
	}
	/**
	 * @ignore - internal component.
	 */


	var SelectInput = /*#__PURE__*/React.forwardRef(function SelectInput(props, ref) {
	  var ariaLabel = props['aria-label'],
	      autoFocus = props.autoFocus,
	      autoWidth = props.autoWidth,
	      children = props.children,
	      classes = props.classes,
	      className = props.className,
	      defaultValue = props.defaultValue,
	      disabled = props.disabled,
	      displayEmpty = props.displayEmpty,
	      IconComponent = props.IconComponent,
	      inputRefProp = props.inputRef,
	      labelId = props.labelId,
	      _props$MenuProps = props.MenuProps,
	      MenuProps = _props$MenuProps === void 0 ? {} : _props$MenuProps,
	      multiple = props.multiple,
	      name = props.name,
	      onBlur = props.onBlur,
	      onChange = props.onChange,
	      onClose = props.onClose,
	      onFocus = props.onFocus,
	      onOpen = props.onOpen,
	      openProp = props.open,
	      readOnly = props.readOnly,
	      renderValue = props.renderValue,
	      _props$SelectDisplayP = props.SelectDisplayProps,
	      SelectDisplayProps = _props$SelectDisplayP === void 0 ? {} : _props$SelectDisplayP,
	      tabIndexProp = props.tabIndex,
	      type = props.type,
	      valueProp = props.value,
	      _props$variant = props.variant,
	      variant = _props$variant === void 0 ? 'standard' : _props$variant,
	      other = _objectWithoutProperties(props, ["aria-label", "autoFocus", "autoWidth", "children", "classes", "className", "defaultValue", "disabled", "displayEmpty", "IconComponent", "inputRef", "labelId", "MenuProps", "multiple", "name", "onBlur", "onChange", "onClose", "onFocus", "onOpen", "open", "readOnly", "renderValue", "SelectDisplayProps", "tabIndex", "type", "value", "variant"]);

	  var _useControlled = useControlled({
	    controlled: valueProp,
	    default: defaultValue,
	    name: 'Select'
	  }),
	      _useControlled2 = _slicedToArray(_useControlled, 2),
	      value = _useControlled2[0],
	      setValue = _useControlled2[1];

	  var inputRef = React.useRef(null);

	  var _React$useState = React.useState(null),
	      displayNode = _React$useState[0],
	      setDisplayNode = _React$useState[1];

	  var _React$useRef = React.useRef(openProp != null),
	      isOpenControlled = _React$useRef.current;

	  var _React$useState2 = React.useState(),
	      menuMinWidthState = _React$useState2[0],
	      setMenuMinWidthState = _React$useState2[1];

	  var _React$useState3 = React.useState(false),
	      openState = _React$useState3[0],
	      setOpenState = _React$useState3[1];

	  var handleRef = useForkRef(ref, inputRefProp);
	  React.useImperativeHandle(handleRef, function () {
	    return {
	      focus: function focus() {
	        displayNode.focus();
	      },
	      node: inputRef.current,
	      value: value
	    };
	  }, [displayNode, value]);
	  React.useEffect(function () {
	    if (autoFocus && displayNode) {
	      displayNode.focus();
	    }
	  }, [autoFocus, displayNode]);
	  React.useEffect(function () {
	    if (displayNode) {
	      var label = ownerDocument(displayNode).getElementById(labelId);

	      if (label) {
	        var handler = function handler() {
	          if (getSelection().isCollapsed) {
	            displayNode.focus();
	          }
	        };

	        label.addEventListener('click', handler);
	        return function () {
	          label.removeEventListener('click', handler);
	        };
	      }
	    }

	    return undefined;
	  }, [labelId, displayNode]);

	  var update = function update(open, event) {
	    if (open) {
	      if (onOpen) {
	        onOpen(event);
	      }
	    } else if (onClose) {
	      onClose(event);
	    }

	    if (!isOpenControlled) {
	      setMenuMinWidthState(autoWidth ? null : displayNode.clientWidth);
	      setOpenState(open);
	    }
	  };

	  var handleMouseDown = function handleMouseDown(event) {
	    // Ignore everything but left-click
	    if (event.button !== 0) {
	      return;
	    } // Hijack the default focus behavior.


	    event.preventDefault();
	    displayNode.focus();
	    update(true, event);
	  };

	  var handleClose = function handleClose(event) {
	    update(false, event);
	  };

	  var childrenArray = React.Children.toArray(children); // Support autofill.

	  var handleChange = function handleChange(event) {
	    var index = childrenArray.map(function (child) {
	      return child.props.value;
	    }).indexOf(event.target.value);

	    if (index === -1) {
	      return;
	    }

	    var child = childrenArray[index];
	    setValue(child.props.value);

	    if (onChange) {
	      onChange(event, child);
	    }
	  };

	  var handleItemClick = function handleItemClick(child) {
	    return function (event) {
	      if (!multiple) {
	        update(false, event);
	      }

	      var newValue;

	      if (multiple) {
	        newValue = Array.isArray(value) ? value.slice() : [];
	        var itemIndex = value.indexOf(child.props.value);

	        if (itemIndex === -1) {
	          newValue.push(child.props.value);
	        } else {
	          newValue.splice(itemIndex, 1);
	        }
	      } else {
	        newValue = child.props.value;
	      }

	      if (child.props.onClick) {
	        child.props.onClick(event);
	      }

	      if (value === newValue) {
	        return;
	      }

	      setValue(newValue);

	      if (onChange) {
	        event.persist(); // Preact support, target is read only property on a native event.

	        Object.defineProperty(event, 'target', {
	          writable: true,
	          value: {
	            value: newValue,
	            name: name
	          }
	        });
	        onChange(event, child);
	      }
	    };
	  };

	  var handleKeyDown = function handleKeyDown(event) {
	    if (!readOnly) {
	      var validKeys = [' ', 'ArrowUp', 'ArrowDown', // The native select doesn't respond to enter on MacOS, but it's recommended by
	      // https://www.w3.org/TR/wai-aria-practices/examples/listbox/listbox-collapsible.html
	      'Enter'];

	      if (validKeys.indexOf(event.key) !== -1) {
	        event.preventDefault();
	        update(true, event);
	      }
	    }
	  };

	  var open = displayNode !== null && (isOpenControlled ? openProp : openState);

	  var handleBlur = function handleBlur(event) {
	    // if open event.stopImmediatePropagation
	    if (!open && onBlur) {
	      event.persist(); // Preact support, target is read only property on a native event.

	      Object.defineProperty(event, 'target', {
	        writable: true,
	        value: {
	          value: value,
	          name: name
	        }
	      });
	      onBlur(event);
	    }
	  };

	  delete other['aria-invalid'];
	  var display;
	  var displaySingle;
	  var displayMultiple = [];
	  var computeDisplay = false;
	  var foundMatch = false; // No need to display any value if the field is empty.

	  if (isFilled({
	    value: value
	  }) || displayEmpty) {
	    if (renderValue) {
	      display = renderValue(value);
	    } else {
	      computeDisplay = true;
	    }
	  }

	  var items = childrenArray.map(function (child) {
	    if (! /*#__PURE__*/React.isValidElement(child)) {
	      return null;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      if (reactIs_1(child)) {
	        console.error(["Material-UI: The Select component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
	      }
	    }

	    var selected;

	    if (multiple) {
	      if (!Array.isArray(value)) {
	        throw new Error(process.env.NODE_ENV !== "production" ? "Material-UI: The `value` prop must be an array when using the `Select` component with `multiple`." : formatMuiErrorMessage(2));
	      }

	      selected = value.some(function (v) {
	        return areEqualValues(v, child.props.value);
	      });

	      if (selected && computeDisplay) {
	        displayMultiple.push(child.props.children);
	      }
	    } else {
	      selected = areEqualValues(value, child.props.value);

	      if (selected && computeDisplay) {
	        displaySingle = child.props.children;
	      }
	    }

	    if (selected) {
	      foundMatch = true;
	    }

	    return /*#__PURE__*/React.cloneElement(child, {
	      'aria-selected': selected ? 'true' : undefined,
	      onClick: handleItemClick(child),
	      onKeyUp: function onKeyUp(event) {
	        if (event.key === ' ') {
	          // otherwise our MenuItems dispatches a click event
	          // it's not behavior of the native <option> and causes
	          // the select to close immediately since we open on space keydown
	          event.preventDefault();
	        }

	        if (child.props.onKeyUp) {
	          child.props.onKeyUp(event);
	        }
	      },
	      role: 'option',
	      selected: selected,
	      value: undefined,
	      // The value is most likely not a valid HTML attribute.
	      'data-value': child.props.value // Instead, we provide it as a data attribute.

	    });
	  });

	  if (process.env.NODE_ENV !== 'production') {
	    // eslint-disable-next-line react-hooks/rules-of-hooks
	    React.useEffect(function () {
	      if (!foundMatch && !multiple && value !== '') {
	        var values = childrenArray.map(function (child) {
	          return child.props.value;
	        });
	        console.warn(["Material-UI: You have provided an out-of-range value `".concat(value, "` for the select ").concat(name ? "(name=\"".concat(name, "\") ") : '', "component."), "Consider providing a value that matches one of the available options or ''.", "The available values are ".concat(values.filter(function (x) {
	          return x != null;
	        }).map(function (x) {
	          return "`".concat(x, "`");
	        }).join(', ') || '""', ".")].join('\n'));
	      }
	    }, [foundMatch, childrenArray, multiple, name, value]);
	  }

	  if (computeDisplay) {
	    display = multiple ? displayMultiple.join(', ') : displaySingle;
	  } // Avoid performing a layout computation in the render method.


	  var menuMinWidth = menuMinWidthState;

	  if (!autoWidth && isOpenControlled && displayNode) {
	    menuMinWidth = displayNode.clientWidth;
	  }

	  var tabIndex;

	  if (typeof tabIndexProp !== 'undefined') {
	    tabIndex = tabIndexProp;
	  } else {
	    tabIndex = disabled ? null : 0;
	  }

	  var buttonId = SelectDisplayProps.id || (name ? "mui-component-select-".concat(name) : undefined);
	  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", _extends({
	    className: clsx(classes.root, // TODO v5: merge root and select
	    classes.select, classes.selectMenu, classes[variant], className, disabled && classes.disabled),
	    ref: setDisplayNode,
	    tabIndex: tabIndex,
	    role: "button",
	    "aria-disabled": disabled ? 'true' : undefined,
	    "aria-expanded": open ? 'true' : undefined,
	    "aria-haspopup": "listbox",
	    "aria-label": ariaLabel,
	    "aria-labelledby": [labelId, buttonId].filter(Boolean).join(' ') || undefined,
	    onKeyDown: handleKeyDown,
	    onMouseDown: disabled || readOnly ? null : handleMouseDown,
	    onBlur: handleBlur,
	    onFocus: onFocus
	  }, SelectDisplayProps, {
	    // The id is required for proper a11y
	    id: buttonId
	  }), isEmpty(display) ?
	  /*#__PURE__*/
	  // eslint-disable-next-line react/no-danger
	  React.createElement("span", {
	    dangerouslySetInnerHTML: {
	      __html: '&#8203;'
	    }
	  }) : display), /*#__PURE__*/React.createElement("input", _extends({
	    value: Array.isArray(value) ? value.join(',') : value,
	    name: name,
	    ref: inputRef,
	    "aria-hidden": true,
	    onChange: handleChange,
	    tabIndex: -1,
	    className: classes.nativeInput,
	    autoFocus: autoFocus
	  }, other)), /*#__PURE__*/React.createElement(IconComponent, {
	    className: clsx(classes.icon, classes["icon".concat(capitalize(variant))], open && classes.iconOpen, disabled && classes.disabled)
	  }), /*#__PURE__*/React.createElement(Menu$1, _extends({
	    id: "menu-".concat(name || ''),
	    anchorEl: displayNode,
	    open: open,
	    onClose: handleClose
	  }, MenuProps, {
	    MenuListProps: _extends({
	      'aria-labelledby': labelId,
	      role: 'listbox',
	      disableListWrap: true
	    }, MenuProps.MenuListProps),
	    PaperProps: _extends({}, MenuProps.PaperProps, {
	      style: _extends({
	        minWidth: menuMinWidth
	      }, MenuProps.PaperProps != null ? MenuProps.PaperProps.style : null)
	    })
	  }), items));
	});
	process.env.NODE_ENV !== "production" ? SelectInput.propTypes = {
	  /**
	   * @ignore
	   */
	  'aria-label': propTypes.string,

	  /**
	   * @ignore
	   */
	  autoFocus: propTypes.bool,

	  /**
	   * If `true`, the width of the popover will automatically be set according to the items inside the
	   * menu, otherwise it will be at least the width of the select input.
	   */
	  autoWidth: propTypes.bool,

	  /**
	   * The option elements to populate the select with.
	   * Can be some `<MenuItem>` elements.
	   */
	  children: propTypes.node,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object.isRequired,

	  /**
	   * The CSS class name of the select element.
	   */
	  className: propTypes.string,

	  /**
	   * The default element value. Use when the component is not controlled.
	   */
	  defaultValue: propTypes.any,

	  /**
	   * If `true`, the select will be disabled.
	   */
	  disabled: propTypes.bool,

	  /**
	   * If `true`, the selected item is displayed even if its value is empty.
	   */
	  displayEmpty: propTypes.bool,

	  /**
	   * The icon that displays the arrow.
	   */
	  IconComponent: propTypes.elementType.isRequired,

	  /**
	   * Imperative handle implementing `{ value: T, node: HTMLElement, focus(): void }`
	   * Equivalent to `ref`
	   */
	  inputRef: refType,

	  /**
	   * The ID of an element that acts as an additional label. The Select will
	   * be labelled by the additional label and the selected value.
	   */
	  labelId: propTypes.string,

	  /**
	   * Props applied to the [`Menu`](/api/menu/) element.
	   */
	  MenuProps: propTypes.object,

	  /**
	   * If `true`, `value` must be an array and the menu will support multiple selections.
	   */
	  multiple: propTypes.bool,

	  /**
	   * Name attribute of the `select` or hidden `input` element.
	   */
	  name: propTypes.string,

	  /**
	   * @ignore
	   */
	  onBlur: propTypes.func,

	  /**
	   * Callback function fired when a menu item is selected.
	   *
	   * @param {object} event The event source of the callback.
	   * You can pull out the new value by accessing `event.target.value` (any).
	   * @param {object} [child] The react element that was selected.
	   */
	  onChange: propTypes.func,

	  /**
	   * Callback fired when the component requests to be closed.
	   * Use in controlled mode (see open).
	   *
	   * @param {object} event The event source of the callback.
	   */
	  onClose: propTypes.func,

	  /**
	   * @ignore
	   */
	  onFocus: propTypes.func,

	  /**
	   * Callback fired when the component requests to be opened.
	   * Use in controlled mode (see open).
	   *
	   * @param {object} event The event source of the callback.
	   */
	  onOpen: propTypes.func,

	  /**
	   * Control `select` open state.
	   */
	  open: propTypes.bool,

	  /**
	   * @ignore
	   */
	  readOnly: propTypes.bool,

	  /**
	   * Render the selected value.
	   *
	   * @param {any} value The `value` provided to the component.
	   * @returns {ReactNode}
	   */
	  renderValue: propTypes.func,

	  /**
	   * Props applied to the clickable div element.
	   */
	  SelectDisplayProps: propTypes.object,

	  /**
	   * @ignore
	   */
	  tabIndex: propTypes.oneOfType([propTypes.number, propTypes.string]),

	  /**
	   * @ignore
	   */
	  type: propTypes.any,

	  /**
	   * The input value.
	   */
	  value: propTypes.any,

	  /**
	   * The variant to use.
	   */
	  variant: propTypes.oneOf(['standard', 'outlined', 'filled'])
	} : void 0;

	var styles$I = styles$F;

	var _ref = /*#__PURE__*/React.createElement(Input$1, null);

	var _ref2 = /*#__PURE__*/React.createElement(FilledInput$1, null);

	var Select = /*#__PURE__*/React.forwardRef(function Select(props, ref) {
	  var _props$autoWidth = props.autoWidth,
	      autoWidth = _props$autoWidth === void 0 ? false : _props$autoWidth,
	      children = props.children,
	      classes = props.classes,
	      _props$displayEmpty = props.displayEmpty,
	      displayEmpty = _props$displayEmpty === void 0 ? false : _props$displayEmpty,
	      _props$IconComponent = props.IconComponent,
	      IconComponent = _props$IconComponent === void 0 ? ArrowDropDownIcon : _props$IconComponent,
	      id = props.id,
	      input = props.input,
	      inputProps = props.inputProps,
	      label = props.label,
	      labelId = props.labelId,
	      _props$labelWidth = props.labelWidth,
	      labelWidth = _props$labelWidth === void 0 ? 0 : _props$labelWidth,
	      MenuProps = props.MenuProps,
	      _props$multiple = props.multiple,
	      multiple = _props$multiple === void 0 ? false : _props$multiple,
	      _props$native = props.native,
	      native = _props$native === void 0 ? false : _props$native,
	      onClose = props.onClose,
	      onOpen = props.onOpen,
	      open = props.open,
	      renderValue = props.renderValue,
	      SelectDisplayProps = props.SelectDisplayProps,
	      _props$variant = props.variant,
	      variantProps = _props$variant === void 0 ? 'standard' : _props$variant,
	      other = _objectWithoutProperties(props, ["autoWidth", "children", "classes", "displayEmpty", "IconComponent", "id", "input", "inputProps", "label", "labelId", "labelWidth", "MenuProps", "multiple", "native", "onClose", "onOpen", "open", "renderValue", "SelectDisplayProps", "variant"]);

	  var inputComponent = native ? NativeSelectInput : SelectInput;
	  var muiFormControl = useFormControl$1();
	  var fcs = formControlState({
	    props: props,
	    muiFormControl: muiFormControl,
	    states: ['variant']
	  });
	  var variant = fcs.variant || variantProps;
	  var InputComponent = input || {
	    standard: _ref,
	    outlined: /*#__PURE__*/React.createElement(OutlinedInput$1, {
	      label: label,
	      labelWidth: labelWidth
	    }),
	    filled: _ref2
	  }[variant];
	  return /*#__PURE__*/React.cloneElement(InputComponent, _extends({
	    // Most of the logic is implemented in `SelectInput`.
	    // The `Select` component is a simple API wrapper to expose something better to play with.
	    inputComponent: inputComponent,
	    inputProps: _extends({
	      children: children,
	      IconComponent: IconComponent,
	      variant: variant,
	      type: undefined,
	      // We render a select. We can ignore the type provided by the `Input`.
	      multiple: multiple
	    }, native ? {
	      id: id
	    } : {
	      autoWidth: autoWidth,
	      displayEmpty: displayEmpty,
	      labelId: labelId,
	      MenuProps: MenuProps,
	      onClose: onClose,
	      onOpen: onOpen,
	      open: open,
	      renderValue: renderValue,
	      SelectDisplayProps: _extends({
	        id: id
	      }, SelectDisplayProps)
	    }, inputProps, {
	      classes: inputProps ? mergeClasses({
	        baseClasses: classes,
	        newClasses: inputProps.classes,
	        Component: Select
	      }) : classes
	    }, input ? input.props.inputProps : {}),
	    ref: ref
	  }, other));
	});
	process.env.NODE_ENV !== "production" ? Select.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * If `true`, the width of the popover will automatically be set according to the items inside the
	   * menu, otherwise it will be at least the width of the select input.
	   */
	  autoWidth: propTypes.bool,

	  /**
	   * The option elements to populate the select with.
	   * Can be some `MenuItem` when `native` is false and `option` when `native` is true.
	   *
	   * ⚠️The `MenuItem` elements **must** be direct descendants when `native` is false.
	   */
	  children: propTypes.node,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object,

	  /**
	   * The default element value. Use when the component is not controlled.
	   */
	  defaultValue: propTypes.any,

	  /**
	   * If `true`, a value is displayed even if no items are selected.
	   *
	   * In order to display a meaningful value, a function should be passed to the `renderValue` prop which returns the value to be displayed when no items are selected.
	   * You can only use it when the `native` prop is `false` (default).
	   */
	  displayEmpty: propTypes.bool,

	  /**
	   * The icon that displays the arrow.
	   */
	  IconComponent: propTypes.elementType,

	  /**
	   * The `id` of the wrapper element or the `select` element when `native`.
	   */
	  id: propTypes.string,

	  /**
	   * An `Input` element; does not have to be a material-ui specific `Input`.
	   */
	  input: propTypes.element,

	  /**
	   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
	   * When `native` is `true`, the attributes are applied on the `select` element.
	   */
	  inputProps: propTypes.object,

	  /**
	   * See [OutlinedInput#label](/api/outlined-input/#props)
	   */
	  label: propTypes.node,

	  /**
	   * The ID of an element that acts as an additional label. The Select will
	   * be labelled by the additional label and the selected value.
	   */
	  labelId: propTypes.string,

	  /**
	   * See [OutlinedInput#label](/api/outlined-input/#props)
	   */
	  labelWidth: propTypes.number,

	  /**
	   * Props applied to the [`Menu`](/api/menu/) element.
	   */
	  MenuProps: propTypes.object,

	  /**
	   * If `true`, `value` must be an array and the menu will support multiple selections.
	   */
	  multiple: propTypes.bool,

	  /**
	   * If `true`, the component will be using a native `select` element.
	   */
	  native: propTypes.bool,

	  /**
	   * Callback function fired when a menu item is selected.
	   *
	   * @param {object} event The event source of the callback.
	   * You can pull out the new value by accessing `event.target.value` (any).
	   * @param {object} [child] The react element that was selected when `native` is `false` (default).
	   */
	  onChange: propTypes.func,

	  /**
	   * Callback fired when the component requests to be closed.
	   * Use in controlled mode (see open).
	   *
	   * @param {object} event The event source of the callback.
	   */
	  onClose: propTypes.func,

	  /**
	   * Callback fired when the component requests to be opened.
	   * Use in controlled mode (see open).
	   *
	   * @param {object} event The event source of the callback.
	   */
	  onOpen: propTypes.func,

	  /**
	   * Control `select` open state.
	   * You can only use it when the `native` prop is `false` (default).
	   */
	  open: propTypes.bool,

	  /**
	   * Render the selected value.
	   * You can only use it when the `native` prop is `false` (default).
	   *
	   * @param {any} value The `value` provided to the component.
	   * @returns {ReactNode}
	   */
	  renderValue: propTypes.func,

	  /**
	   * Props applied to the clickable div element.
	   */
	  SelectDisplayProps: propTypes.object,

	  /**
	   * The input value. Providing an empty string will select no options.
	   * This prop is required when the `native` prop is `false` (default).
	   * Set to an empty string `''` if you don't want any of the available options to be selected.
	   *
	   * If the value is an object it must have reference equality with the option in order to be selected.
	   * If the value is not an object, the string representation must match with the string representation of the option in order to be selected.
	   */
	  value: propTypes.any,

	  /**
	   * The variant to use.
	   */
	  variant: propTypes.oneOf(['filled', 'outlined', 'standard'])
	} : void 0;
	Select.muiName = 'Select';
	var Select$1 = withStyles$1(styles$I, {
	  name: 'MuiSelect'
	})(Select);

	var styles$J = {
	  /* Styles applied to the root element. */
	  root: {},

	  /* Styles applied to the root element if `orientation="horizontal"`. */
	  horizontal: {
	    paddingLeft: 8,
	    paddingRight: 8
	  },

	  /* Styles applied to the root element if `orientation="vertical"`. */
	  vertical: {},

	  /* Styles applied to the root element if `alternativeLabel={true}`. */
	  alternativeLabel: {
	    flex: 1,
	    position: 'relative'
	  },

	  /* Pseudo-class applied to the root element if `completed={true}`. */
	  completed: {}
	};
	var Step = /*#__PURE__*/React.forwardRef(function Step(props, ref) {
	  var _props$active = props.active,
	      active = _props$active === void 0 ? false : _props$active,
	      alternativeLabel = props.alternativeLabel,
	      children = props.children,
	      classes = props.classes,
	      className = props.className,
	      _props$completed = props.completed,
	      completed = _props$completed === void 0 ? false : _props$completed,
	      connectorProp = props.connector,
	      _props$disabled = props.disabled,
	      disabled = _props$disabled === void 0 ? false : _props$disabled,
	      _props$expanded = props.expanded,
	      expanded = _props$expanded === void 0 ? false : _props$expanded,
	      index = props.index,
	      last = props.last,
	      orientation = props.orientation,
	      other = _objectWithoutProperties(props, ["active", "alternativeLabel", "children", "classes", "className", "completed", "connector", "disabled", "expanded", "index", "last", "orientation"]);

	  var connector = connectorProp ? /*#__PURE__*/React.cloneElement(connectorProp, {
	    orientation: orientation,
	    alternativeLabel: alternativeLabel,
	    index: index,
	    active: active,
	    completed: completed,
	    disabled: disabled
	  }) : null;
	  var newChildren = /*#__PURE__*/React.createElement("div", _extends({
	    className: clsx(classes.root, classes[orientation], className, alternativeLabel && classes.alternativeLabel, completed && classes.completed),
	    ref: ref
	  }, other), connector && alternativeLabel && index !== 0 ? connector : null, React.Children.map(children, function (child) {
	    if (! /*#__PURE__*/React.isValidElement(child)) {
	      return null;
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      if (reactIs_1(child)) {
	        console.error(["Material-UI: The Step component doesn't accept a Fragment as a child.", 'Consider providing an array instead.'].join('\n'));
	      }
	    }

	    return /*#__PURE__*/React.cloneElement(child, _extends({
	      active: active,
	      alternativeLabel: alternativeLabel,
	      completed: completed,
	      disabled: disabled,
	      expanded: expanded,
	      last: last,
	      icon: index + 1,
	      orientation: orientation
	    }, child.props));
	  }));

	  if (connector && !alternativeLabel && index !== 0) {
	    return /*#__PURE__*/React.createElement(React.Fragment, null, connector, newChildren);
	  }

	  return newChildren;
	});
	process.env.NODE_ENV !== "production" ? Step.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Sets the step as active. Is passed to child components.
	   */
	  active: propTypes.bool,

	  /**
	   * Should be `Step` sub-components such as `StepLabel`, `StepContent`.
	   */
	  children: propTypes.node,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.string,

	  /**
	   * Mark the step as completed. Is passed to child components.
	   */
	  completed: propTypes.bool,

	  /**
	   * Mark the step as disabled, will also disable the button if
	   * `StepButton` is a child of `Step`. Is passed to child components.
	   */
	  disabled: propTypes.bool,

	  /**
	   * Expand the step.
	   */
	  expanded: propTypes.bool
	} : void 0;
	var Step$1 = withStyles$1(styles$J, {
	  name: 'MuiStep'
	})(Step);

	/**
	 * @ignore - internal component.
	 */

	var CheckCircle = createSvgIcon( /*#__PURE__*/React.createElement("path", {
	  d: "M12 0a12 12 0 1 0 0 24 12 12 0 0 0 0-24zm-2 17l-5-5 1.4-1.4 3.6 3.6 7.6-7.6L19 8l-9 9z"
	}), 'CheckCircle');

	/**
	 * @ignore - internal component.
	 */

	var Warning = createSvgIcon( /*#__PURE__*/React.createElement("path", {
	  d: "M1 21h22L12 2 1 21zm12-3h-2v-2h2v2zm0-4h-2v-4h2v4z"
	}), 'Warning');

	var styles$K = function styles(theme) {
	  return {
	    /* Styles applied to the root element. */
	    root: {
	      display: 'block',
	      color: theme.palette.text.disabled,
	      '&$completed': {
	        color: theme.palette.primary.main
	      },
	      '&$active': {
	        color: theme.palette.primary.main
	      },
	      '&$error': {
	        color: theme.palette.error.main
	      }
	    },

	    /* Styles applied to the SVG text element. */
	    text: {
	      fill: theme.palette.primary.contrastText,
	      fontSize: theme.typography.caption.fontSize,
	      fontFamily: theme.typography.fontFamily
	    },

	    /* Pseudo-class applied to the root element if `active={true}`. */
	    active: {},

	    /* Pseudo-class applied to the root element if `completed={true}`. */
	    completed: {},

	    /* Pseudo-class applied to the root element if `error={true}`. */
	    error: {}
	  };
	};

	var _ref$1 = /*#__PURE__*/React.createElement("circle", {
	  cx: "12",
	  cy: "12",
	  r: "12"
	});

	var StepIcon = /*#__PURE__*/React.forwardRef(function StepIcon(props, ref) {
	  var _props$completed = props.completed,
	      completed = _props$completed === void 0 ? false : _props$completed,
	      icon = props.icon,
	      _props$active = props.active,
	      active = _props$active === void 0 ? false : _props$active,
	      _props$error = props.error,
	      error = _props$error === void 0 ? false : _props$error,
	      classes = props.classes;

	  if (typeof icon === 'number' || typeof icon === 'string') {
	    var className = clsx(classes.root, active && classes.active, error && classes.error, completed && classes.completed);

	    if (error) {
	      return /*#__PURE__*/React.createElement(Warning, {
	        className: className,
	        ref: ref
	      });
	    }

	    if (completed) {
	      return /*#__PURE__*/React.createElement(CheckCircle, {
	        className: className,
	        ref: ref
	      });
	    }

	    return /*#__PURE__*/React.createElement(require$$2, {
	      className: className,
	      ref: ref
	    }, _ref$1, /*#__PURE__*/React.createElement("text", {
	      className: classes.text,
	      x: "12",
	      y: "16",
	      textAnchor: "middle"
	    }, icon));
	  }

	  return icon;
	});
	process.env.NODE_ENV !== "production" ? StepIcon.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Whether this step is active.
	   */
	  active: propTypes.bool,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object,

	  /**
	   * Mark the step as completed. Is passed to child components.
	   */
	  completed: propTypes.bool,

	  /**
	   * Mark the step as failed.
	   */
	  error: propTypes.bool,

	  /**
	   * The label displayed in the step icon.
	   */
	  icon: propTypes.node
	} : void 0;
	var StepIcon$1 = withStyles$1(styles$K, {
	  name: 'MuiStepIcon'
	})(StepIcon);

	var styles$L = function styles(theme) {
	  return {
	    /* Styles applied to the root element. */
	    root: {
	      display: 'flex',
	      alignItems: 'center',
	      '&$alternativeLabel': {
	        flexDirection: 'column'
	      },
	      '&$disabled': {
	        cursor: 'default'
	      }
	    },

	    /* Styles applied to the root element if `orientation="horizontal"`. */
	    horizontal: {},

	    /* Styles applied to the root element if `orientation="vertical"`. */
	    vertical: {},

	    /* Styles applied to the `Typography` component which wraps `children`. */
	    label: {
	      color: theme.palette.text.secondary,
	      '&$active': {
	        color: theme.palette.text.primary,
	        fontWeight: 500
	      },
	      '&$completed': {
	        color: theme.palette.text.primary,
	        fontWeight: 500
	      },
	      '&$alternativeLabel': {
	        textAlign: 'center',
	        marginTop: 16
	      },
	      '&$error': {
	        color: theme.palette.error.main
	      }
	    },

	    /* Pseudo-class applied to the `Typography` component if `active={true}`. */
	    active: {},

	    /* Pseudo-class applied to the `Typography` component if `completed={true}`. */
	    completed: {},

	    /* Pseudo-class applied to the root element and `Typography` component if `error={true}`. */
	    error: {},

	    /* Pseudo-class applied to the root element and `Typography` component if `disabled={true}`. */
	    disabled: {},

	    /* Styles applied to the `icon` container element. */
	    iconContainer: {
	      flexShrink: 0,
	      // Fix IE 11 issue
	      display: 'flex',
	      paddingRight: 8,
	      '&$alternativeLabel': {
	        paddingRight: 0
	      }
	    },

	    /* Pseudo-class applied to the root and icon container and `Typography` if `alternativeLabel={true}`. */
	    alternativeLabel: {},

	    /* Styles applied to the container element which wraps `Typography` and `optional`. */
	    labelContainer: {
	      width: '100%'
	    }
	  };
	};
	var StepLabel = /*#__PURE__*/React.forwardRef(function StepLabel(props, ref) {
	  var _props$active = props.active,
	      active = _props$active === void 0 ? false : _props$active,
	      _props$alternativeLab = props.alternativeLabel,
	      alternativeLabel = _props$alternativeLab === void 0 ? false : _props$alternativeLab,
	      children = props.children,
	      classes = props.classes,
	      className = props.className,
	      _props$completed = props.completed,
	      completed = _props$completed === void 0 ? false : _props$completed,
	      _props$disabled = props.disabled,
	      disabled = _props$disabled === void 0 ? false : _props$disabled,
	      _props$error = props.error,
	      error = _props$error === void 0 ? false : _props$error,
	      expanded = props.expanded,
	      icon = props.icon,
	      last = props.last,
	      optional = props.optional,
	      _props$orientation = props.orientation,
	      orientation = _props$orientation === void 0 ? 'horizontal' : _props$orientation,
	      StepIconComponentProp = props.StepIconComponent,
	      StepIconProps = props.StepIconProps,
	      other = _objectWithoutProperties(props, ["active", "alternativeLabel", "children", "classes", "className", "completed", "disabled", "error", "expanded", "icon", "last", "optional", "orientation", "StepIconComponent", "StepIconProps"]);

	  var StepIconComponent = StepIconComponentProp;

	  if (icon && !StepIconComponent) {
	    StepIconComponent = StepIcon$1;
	  }

	  return /*#__PURE__*/React.createElement("span", _extends({
	    className: clsx(classes.root, classes[orientation], className, disabled && classes.disabled, alternativeLabel && classes.alternativeLabel, error && classes.error),
	    ref: ref
	  }, other), icon || StepIconComponent ? /*#__PURE__*/React.createElement("span", {
	    className: clsx(classes.iconContainer, alternativeLabel && classes.alternativeLabel)
	  }, /*#__PURE__*/React.createElement(StepIconComponent, _extends({
	    completed: completed,
	    active: active,
	    error: error,
	    icon: icon
	  }, StepIconProps))) : null, /*#__PURE__*/React.createElement("span", {
	    className: classes.labelContainer
	  }, children ? /*#__PURE__*/React.createElement(Typography$1, {
	    variant: "body2",
	    component: "span",
	    display: "block",
	    className: clsx(classes.label, alternativeLabel && classes.alternativeLabel, completed && classes.completed, active && classes.active, error && classes.error)
	  }, children) : null, optional));
	});
	process.env.NODE_ENV !== "production" ? StepLabel.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * In most cases will simply be a string containing a title for the label.
	   */
	  children: propTypes.node,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.string,

	  /**
	   * Mark the step as disabled, will also disable the button if
	   * `StepLabelButton` is a child of `StepLabel`. Is passed to child components.
	   */
	  disabled: propTypes.bool,

	  /**
	   * Mark the step as failed.
	   */
	  error: propTypes.bool,

	  /**
	   * Override the default label of the step icon.
	   */
	  icon: propTypes.node,

	  /**
	   * The optional node to display.
	   */
	  optional: propTypes.node,

	  /**
	   * The component to render in place of the [`StepIcon`](/api/step-icon/).
	   */
	  StepIconComponent: propTypes.elementType,

	  /**
	   * Props applied to the [`StepIcon`](/api/step-icon/) element.
	   */
	  StepIconProps: propTypes.object
	} : void 0;
	StepLabel.muiName = 'StepLabel';
	var StepLabel$1 = withStyles$1(styles$L, {
	  name: 'MuiStepLabel'
	})(StepLabel);

	var styles$M = function styles(theme) {
	  return {
	    /* Styles applied to the root element. */
	    root: {
	      flex: '1 1 auto'
	    },

	    /* Styles applied to the root element if `orientation="horizontal"`. */
	    horizontal: {},

	    /* Styles applied to the root element if `orientation="vertical"`. */
	    vertical: {
	      marginLeft: 12,
	      // half icon
	      padding: '0 0 8px'
	    },

	    /* Styles applied to the root element if `alternativeLabel={true}`. */
	    alternativeLabel: {
	      position: 'absolute',
	      top: 8 + 4,
	      left: 'calc(-50% + 20px)',
	      right: 'calc(50% + 20px)'
	    },

	    /* Pseudo-class applied to the root element if `active={true}`. */
	    active: {},

	    /* Pseudo-class applied to the root element if `completed={true}`. */
	    completed: {},

	    /* Pseudo-class applied to the root element if `disabled={true}`. */
	    disabled: {},

	    /* Styles applied to the line element. */
	    line: {
	      display: 'block',
	      borderColor: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[600]
	    },

	    /* Styles applied to the root element if `orientation="horizontal"`. */
	    lineHorizontal: {
	      borderTopStyle: 'solid',
	      borderTopWidth: 1
	    },

	    /* Styles applied to the root element if `orientation="vertical"`. */
	    lineVertical: {
	      borderLeftStyle: 'solid',
	      borderLeftWidth: 1,
	      minHeight: 24
	    }
	  };
	};
	var StepConnector = /*#__PURE__*/React.forwardRef(function StepConnector(props, ref) {
	  var active = props.active,
	      _props$alternativeLab = props.alternativeLabel,
	      alternativeLabel = _props$alternativeLab === void 0 ? false : _props$alternativeLab,
	      classes = props.classes,
	      className = props.className,
	      completed = props.completed,
	      disabled = props.disabled,
	      index = props.index,
	      _props$orientation = props.orientation,
	      orientation = _props$orientation === void 0 ? 'horizontal' : _props$orientation,
	      other = _objectWithoutProperties(props, ["active", "alternativeLabel", "classes", "className", "completed", "disabled", "index", "orientation"]);

	  return /*#__PURE__*/React.createElement("div", _extends({
	    className: clsx(classes.root, classes[orientation], className, alternativeLabel && classes.alternativeLabel, active && classes.active, completed && classes.completed, disabled && classes.disabled),
	    ref: ref
	  }, other), /*#__PURE__*/React.createElement("span", {
	    className: clsx(classes.line, {
	      'horizontal': classes.lineHorizontal,
	      'vertical': classes.lineVertical
	    }[orientation])
	  }));
	});
	process.env.NODE_ENV !== "production" ? StepConnector.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.string
	} : void 0;
	var StepConnector$1 = withStyles$1(styles$M, {
	  name: 'MuiStepConnector'
	})(StepConnector);

	var styles$N = {
	  /* Styles applied to the root element. */
	  root: {
	    display: 'flex',
	    padding: 24
	  },

	  /* Styles applied to the root element if `orientation="horizontal"`. */
	  horizontal: {
	    flexDirection: 'row',
	    alignItems: 'center'
	  },

	  /* Styles applied to the root element if `orientation="vertical"`. */
	  vertical: {
	    flexDirection: 'column'
	  },

	  /* Styles applied to the root element if `alternativeLabel={true}`. */
	  alternativeLabel: {
	    alignItems: 'flex-start'
	  }
	};
	var defaultConnector = /*#__PURE__*/React.createElement(StepConnector$1, null);
	var Stepper = /*#__PURE__*/React.forwardRef(function Stepper(props, ref) {
	  var _props$activeStep = props.activeStep,
	      activeStep = _props$activeStep === void 0 ? 0 : _props$activeStep,
	      _props$alternativeLab = props.alternativeLabel,
	      alternativeLabel = _props$alternativeLab === void 0 ? false : _props$alternativeLab,
	      children = props.children,
	      classes = props.classes,
	      className = props.className,
	      _props$connector = props.connector,
	      connectorProp = _props$connector === void 0 ? defaultConnector : _props$connector,
	      _props$nonLinear = props.nonLinear,
	      nonLinear = _props$nonLinear === void 0 ? false : _props$nonLinear,
	      _props$orientation = props.orientation,
	      orientation = _props$orientation === void 0 ? 'horizontal' : _props$orientation,
	      other = _objectWithoutProperties(props, ["activeStep", "alternativeLabel", "children", "classes", "className", "connector", "nonLinear", "orientation"]);

	  var connector = /*#__PURE__*/React.isValidElement(connectorProp) ? /*#__PURE__*/React.cloneElement(connectorProp, {
	    orientation: orientation
	  }) : null;
	  var childrenArray = React.Children.toArray(children);
	  var steps = childrenArray.map(function (step, index) {
	    var state = {
	      index: index,
	      active: false,
	      completed: false,
	      disabled: false
	    };

	    if (activeStep === index) {
	      state.active = true;
	    } else if (!nonLinear && activeStep > index) {
	      state.completed = true;
	    } else if (!nonLinear && activeStep < index) {
	      state.disabled = true;
	    }

	    return /*#__PURE__*/React.cloneElement(step, _extends({
	      alternativeLabel: alternativeLabel,
	      connector: connector,
	      last: index + 1 === childrenArray.length,
	      orientation: orientation
	    }, state, step.props));
	  });
	  return /*#__PURE__*/React.createElement(Paper$1, _extends({
	    square: true,
	    elevation: 0,
	    className: clsx(classes.root, classes[orientation], className, alternativeLabel && classes.alternativeLabel),
	    ref: ref
	  }, other), steps);
	});
	process.env.NODE_ENV !== "production" ? Stepper.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * Set the active step (zero based index).
	   * Set to -1 to disable all the steps.
	   */
	  activeStep: propTypes.number,

	  /**
	   * If set to 'true' and orientation is horizontal,
	   * then the step label will be positioned under the icon.
	   */
	  alternativeLabel: propTypes.bool,

	  /**
	   * Two or more `<Step />` components.
	   */
	  children: propTypes.node,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.string,

	  /**
	   * An element to be placed between each step.
	   */
	  connector: propTypes.element,

	  /**
	   * If set the `Stepper` will not assist in controlling steps for linear flow.
	   */
	  nonLinear: propTypes.bool,

	  /**
	   * The stepper orientation (layout flow direction).
	   */
	  orientation: propTypes.oneOf(['horizontal', 'vertical'])
	} : void 0;
	var Stepper$1 = withStyles$1(styles$N, {
	  name: 'MuiStepper'
	})(Stepper);

	var styles$O = function styles(theme) {
	  return {
	    /* Styles applied to the root element. */
	    root: {
	      display: 'inline-flex',
	      width: 34 + 12 * 2,
	      height: 14 + 12 * 2,
	      overflow: 'hidden',
	      padding: 12,
	      boxSizing: 'border-box',
	      position: 'relative',
	      flexShrink: 0,
	      zIndex: 0,
	      // Reset the stacking context.
	      verticalAlign: 'middle',
	      // For correct alignment with the text.
	      '@media print': {
	        colorAdjust: 'exact'
	      }
	    },

	    /* Styles applied to the root element if `edge="start"`. */
	    edgeStart: {
	      marginLeft: -8
	    },

	    /* Styles applied to the root element if `edge="end"`. */
	    edgeEnd: {
	      marginRight: -8
	    },

	    /* Styles applied to the internal `SwitchBase` component's `root` class. */
	    switchBase: {
	      position: 'absolute',
	      top: 0,
	      left: 0,
	      zIndex: 1,
	      // Render above the focus ripple.
	      color: theme.palette.type === 'light' ? theme.palette.grey[50] : theme.palette.grey[400],
	      transition: theme.transitions.create(['left', 'transform'], {
	        duration: theme.transitions.duration.shortest
	      }),
	      '&$checked': {
	        transform: 'translateX(20px)'
	      },
	      '&$disabled': {
	        color: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[800]
	      },
	      '&$checked + $track': {
	        opacity: 0.5
	      },
	      '&$disabled + $track': {
	        opacity: theme.palette.type === 'light' ? 0.12 : 0.1
	      }
	    },

	    /* Styles applied to the internal SwitchBase component's root element if `color="primary"`. */
	    colorPrimary: {
	      '&$checked': {
	        color: theme.palette.primary.main,
	        '&:hover': {
	          backgroundColor: fade(theme.palette.primary.main, theme.palette.action.hoverOpacity),
	          '@media (hover: none)': {
	            backgroundColor: 'transparent'
	          }
	        }
	      },
	      '&$disabled': {
	        color: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[800]
	      },
	      '&$checked + $track': {
	        backgroundColor: theme.palette.primary.main
	      },
	      '&$disabled + $track': {
	        backgroundColor: theme.palette.type === 'light' ? theme.palette.common.black : theme.palette.common.white
	      }
	    },

	    /* Styles applied to the internal SwitchBase component's root element if `color="secondary"`. */
	    colorSecondary: {
	      '&$checked': {
	        color: theme.palette.secondary.main,
	        '&:hover': {
	          backgroundColor: fade(theme.palette.secondary.main, theme.palette.action.hoverOpacity),
	          '@media (hover: none)': {
	            backgroundColor: 'transparent'
	          }
	        }
	      },
	      '&$disabled': {
	        color: theme.palette.type === 'light' ? theme.palette.grey[400] : theme.palette.grey[800]
	      },
	      '&$checked + $track': {
	        backgroundColor: theme.palette.secondary.main
	      },
	      '&$disabled + $track': {
	        backgroundColor: theme.palette.type === 'light' ? theme.palette.common.black : theme.palette.common.white
	      }
	    },

	    /* Styles applied to the root element if `size="small"`. */
	    sizeSmall: {
	      width: 40,
	      height: 24,
	      padding: 7,
	      '& $thumb': {
	        width: 16,
	        height: 16
	      },
	      '& $switchBase': {
	        padding: 4,
	        '&$checked': {
	          transform: 'translateX(16px)'
	        }
	      }
	    },

	    /* Pseudo-class applied to the internal `SwitchBase` component's `checked` class. */
	    checked: {},

	    /* Pseudo-class applied to the internal SwitchBase component's disabled class. */
	    disabled: {},

	    /* Styles applied to the internal SwitchBase component's input element. */
	    input: {
	      left: '-100%',
	      width: '300%'
	    },

	    /* Styles used to create the thumb passed to the internal `SwitchBase` component `icon` prop. */
	    thumb: {
	      boxShadow: theme.shadows[1],
	      backgroundColor: 'currentColor',
	      width: 20,
	      height: 20,
	      borderRadius: '50%'
	    },

	    /* Styles applied to the track element. */
	    track: {
	      height: '100%',
	      width: '100%',
	      borderRadius: 14 / 2,
	      zIndex: -1,
	      transition: theme.transitions.create(['opacity', 'background-color'], {
	        duration: theme.transitions.duration.shortest
	      }),
	      backgroundColor: theme.palette.type === 'light' ? theme.palette.common.black : theme.palette.common.white,
	      opacity: theme.palette.type === 'light' ? 0.38 : 0.3
	    }
	  };
	};
	var Switch = /*#__PURE__*/React.forwardRef(function Switch(props, ref) {
	  var classes = props.classes,
	      className = props.className,
	      _props$color = props.color,
	      color = _props$color === void 0 ? 'secondary' : _props$color,
	      _props$edge = props.edge,
	      edge = _props$edge === void 0 ? false : _props$edge,
	      _props$size = props.size,
	      size = _props$size === void 0 ? 'medium' : _props$size,
	      other = _objectWithoutProperties(props, ["classes", "className", "color", "edge", "size"]);

	  var icon = /*#__PURE__*/React.createElement("span", {
	    className: classes.thumb
	  });
	  return /*#__PURE__*/React.createElement("span", {
	    className: clsx(classes.root, className, {
	      'start': classes.edgeStart,
	      'end': classes.edgeEnd
	    }[edge], size === "small" && classes["size".concat(capitalize(size))])
	  }, /*#__PURE__*/React.createElement(SwitchBase$1, _extends({
	    type: "checkbox",
	    icon: icon,
	    checkedIcon: icon,
	    classes: {
	      root: clsx(classes.switchBase, classes["color".concat(capitalize(color))]),
	      input: classes.input,
	      checked: classes.checked,
	      disabled: classes.disabled
	    },
	    ref: ref
	  }, other)), /*#__PURE__*/React.createElement("span", {
	    className: classes.track
	  }));
	});
	process.env.NODE_ENV !== "production" ? Switch.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * If `true`, the component is checked.
	   */
	  checked: propTypes.bool,

	  /**
	   * The icon to display when the component is checked.
	   */
	  checkedIcon: propTypes.node,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.string,

	  /**
	   * The color of the component. It supports those theme colors that make sense for this component.
	   */
	  color: propTypes.oneOf(['default', 'primary', 'secondary']),

	  /**
	   * @ignore
	   */
	  defaultChecked: propTypes.bool,

	  /**
	   * If `true`, the switch will be disabled.
	   */
	  disabled: propTypes.bool,

	  /**
	   * If `true`, the ripple effect will be disabled.
	   */
	  disableRipple: propTypes.bool,

	  /**
	   * If given, uses a negative margin to counteract the padding on one
	   * side (this is often helpful for aligning the left or right
	   * side of the icon with content above or below, without ruining the border
	   * size and shape).
	   */
	  edge: propTypes.oneOf(['end', 'start', false]),

	  /**
	   * The icon to display when the component is unchecked.
	   */
	  icon: propTypes.node,

	  /**
	   * The id of the `input` element.
	   */
	  id: propTypes.string,

	  /**
	   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
	   */
	  inputProps: propTypes.object,

	  /**
	   * Pass a ref to the `input` element.
	   */
	  inputRef: refType,

	  /**
	   * Callback fired when the state is changed.
	   *
	   * @param {object} event The event source of the callback.
	   * You can pull out the new value by accessing `event.target.value` (string).
	   * You can pull out the new checked state by accessing `event.target.checked` (boolean).
	   */
	  onChange: propTypes.func,

	  /**
	   * If `true`, the `input` element will be required.
	   */
	  required: propTypes.bool,

	  /**
	   * The size of the switch.
	   * `small` is equivalent to the dense switch styling.
	   */
	  size: propTypes.oneOf(['medium', 'small']),

	  /**
	   * The value of the component. The DOM API casts this to a string.
	   * The browser uses "on" as the default value.
	   */
	  value: propTypes.any
	} : void 0;
	var Switch$1 = withStyles$1(styles$O, {
	  name: 'MuiSwitch'
	})(Switch);

	var styles$P = function styles(theme) {
	  return {
	    /* Styles applied to the root element. */
	    root: {
	      position: 'relative',
	      display: 'flex',
	      alignItems: 'center'
	    },

	    /* Styles applied to the root element if `disableGutters={false}`. */
	    gutters: _defineProperty({
	      paddingLeft: theme.spacing(2),
	      paddingRight: theme.spacing(2)
	    }, theme.breakpoints.up('sm'), {
	      paddingLeft: theme.spacing(3),
	      paddingRight: theme.spacing(3)
	    }),

	    /* Styles applied to the root element if `variant="regular"`. */
	    regular: theme.mixins.toolbar,

	    /* Styles applied to the root element if `variant="dense"`. */
	    dense: {
	      minHeight: 48
	    }
	  };
	};
	var Toolbar = /*#__PURE__*/React.forwardRef(function Toolbar(props, ref) {
	  var classes = props.classes,
	      className = props.className,
	      _props$component = props.component,
	      Component = _props$component === void 0 ? 'div' : _props$component,
	      _props$disableGutters = props.disableGutters,
	      disableGutters = _props$disableGutters === void 0 ? false : _props$disableGutters,
	      _props$variant = props.variant,
	      variant = _props$variant === void 0 ? 'regular' : _props$variant,
	      other = _objectWithoutProperties(props, ["classes", "className", "component", "disableGutters", "variant"]);

	  return /*#__PURE__*/React.createElement(Component, _extends({
	    className: clsx(classes.root, classes[variant], className, !disableGutters && classes.gutters),
	    ref: ref
	  }, other));
	});
	process.env.NODE_ENV !== "production" ? Toolbar.propTypes = {
	  /**
	   * Toolbar children, usually a mixture of `IconButton`, `Button` and `Typography`.
	   */
	  children: propTypes.node,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object.isRequired,

	  /**
	   * @ignore
	   */
	  className: propTypes.string,

	  /**
	   * The component used for the root node.
	   * Either a string to use a HTML element or a component.
	   */
	  component: propTypes
	  /* @typescript-to-proptypes-ignore */
	  .elementType,

	  /**
	   * If `true`, disables gutter padding.
	   */
	  disableGutters: propTypes.bool,

	  /**
	   * The variant to use.
	   */
	  variant: propTypes.oneOf(['regular', 'dense'])
	} : void 0;
	var Toolbar$1 = withStyles$1(styles$P, {
	  name: 'MuiToolbar'
	})(Toolbar);

	var variantComponent = {
	  standard: Input$1,
	  filled: FilledInput$1,
	  outlined: OutlinedInput$1
	};
	var styles$Q = {
	  /* Styles applied to the root element. */
	  root: {}
	};
	/**
	 * The `TextField` is a convenience wrapper for the most common cases (80%).
	 * It cannot be all things to all people, otherwise the API would grow out of control.
	 *
	 * ## Advanced Configuration
	 *
	 * It's important to understand that the text field is a simple abstraction
	 * on top of the following components:
	 *
	 * - [FormControl](/api/form-control/)
	 * - [InputLabel](/api/input-label/)
	 * - [FilledInput](/api/filled-input/)
	 * - [OutlinedInput](/api/outlined-input/)
	 * - [Input](/api/input/)
	 * - [FormHelperText](/api/form-helper-text/)
	 *
	 * If you wish to alter the props applied to the `input` element, you can do so as follows:
	 *
	 * ```jsx
	 * const inputProps = {
	 *   step: 300,
	 * };
	 *
	 * return <TextField id="time" type="time" inputProps={inputProps} />;
	 * ```
	 *
	 * For advanced cases, please look at the source of TextField by clicking on the
	 * "Edit this page" button above. Consider either:
	 *
	 * - using the upper case props for passing values directly to the components
	 * - using the underlying components directly as shown in the demos
	 */

	var TextField = /*#__PURE__*/React.forwardRef(function TextField(props, ref) {
	  var autoComplete = props.autoComplete,
	      _props$autoFocus = props.autoFocus,
	      autoFocus = _props$autoFocus === void 0 ? false : _props$autoFocus,
	      children = props.children,
	      classes = props.classes,
	      className = props.className,
	      _props$color = props.color,
	      color = _props$color === void 0 ? 'primary' : _props$color,
	      defaultValue = props.defaultValue,
	      _props$disabled = props.disabled,
	      disabled = _props$disabled === void 0 ? false : _props$disabled,
	      _props$error = props.error,
	      error = _props$error === void 0 ? false : _props$error,
	      FormHelperTextProps = props.FormHelperTextProps,
	      _props$fullWidth = props.fullWidth,
	      fullWidth = _props$fullWidth === void 0 ? false : _props$fullWidth,
	      helperText = props.helperText,
	      hiddenLabel = props.hiddenLabel,
	      id = props.id,
	      InputLabelProps = props.InputLabelProps,
	      inputProps = props.inputProps,
	      InputProps = props.InputProps,
	      inputRef = props.inputRef,
	      label = props.label,
	      _props$multiline = props.multiline,
	      multiline = _props$multiline === void 0 ? false : _props$multiline,
	      name = props.name,
	      onBlur = props.onBlur,
	      onChange = props.onChange,
	      onFocus = props.onFocus,
	      placeholder = props.placeholder,
	      _props$required = props.required,
	      required = _props$required === void 0 ? false : _props$required,
	      rows = props.rows,
	      rowsMax = props.rowsMax,
	      _props$select = props.select,
	      select = _props$select === void 0 ? false : _props$select,
	      SelectProps = props.SelectProps,
	      type = props.type,
	      value = props.value,
	      _props$variant = props.variant,
	      variant = _props$variant === void 0 ? 'standard' : _props$variant,
	      other = _objectWithoutProperties(props, ["autoComplete", "autoFocus", "children", "classes", "className", "color", "defaultValue", "disabled", "error", "FormHelperTextProps", "fullWidth", "helperText", "hiddenLabel", "id", "InputLabelProps", "inputProps", "InputProps", "inputRef", "label", "multiline", "name", "onBlur", "onChange", "onFocus", "placeholder", "required", "rows", "rowsMax", "select", "SelectProps", "type", "value", "variant"]);

	  if (process.env.NODE_ENV !== 'production') {
	    if (select && !children) {
	      console.error('Material-UI: `children` must be passed when using the `TextField` component with `select`.');
	    }
	  }

	  var InputMore = {};

	  if (variant === 'outlined') {
	    if (InputLabelProps && typeof InputLabelProps.shrink !== 'undefined') {
	      InputMore.notched = InputLabelProps.shrink;
	    }

	    if (label) {
	      var _InputLabelProps$requ;

	      var displayRequired = (_InputLabelProps$requ = InputLabelProps === null || InputLabelProps === void 0 ? void 0 : InputLabelProps.required) !== null && _InputLabelProps$requ !== void 0 ? _InputLabelProps$requ : required;
	      InputMore.label = /*#__PURE__*/React.createElement(React.Fragment, null, label, displayRequired && "\xA0*");
	    }
	  }

	  if (select) {
	    // unset defaults from textbox inputs
	    if (!SelectProps || !SelectProps.native) {
	      InputMore.id = undefined;
	    }

	    InputMore['aria-describedby'] = undefined;
	  }

	  var helperTextId = helperText && id ? "".concat(id, "-helper-text") : undefined;
	  var inputLabelId = label && id ? "".concat(id, "-label") : undefined;
	  var InputComponent = variantComponent[variant];
	  var InputElement = /*#__PURE__*/React.createElement(InputComponent, _extends({
	    "aria-describedby": helperTextId,
	    autoComplete: autoComplete,
	    autoFocus: autoFocus,
	    defaultValue: defaultValue,
	    fullWidth: fullWidth,
	    multiline: multiline,
	    name: name,
	    rows: rows,
	    rowsMax: rowsMax,
	    type: type,
	    value: value,
	    id: id,
	    inputRef: inputRef,
	    onBlur: onBlur,
	    onChange: onChange,
	    onFocus: onFocus,
	    placeholder: placeholder,
	    inputProps: inputProps
	  }, InputMore, InputProps));
	  return /*#__PURE__*/React.createElement(FormControl$1, _extends({
	    className: clsx(classes.root, className),
	    disabled: disabled,
	    error: error,
	    fullWidth: fullWidth,
	    hiddenLabel: hiddenLabel,
	    ref: ref,
	    required: required,
	    color: color,
	    variant: variant
	  }, other), label && /*#__PURE__*/React.createElement(InputLabel$1, _extends({
	    htmlFor: id,
	    id: inputLabelId
	  }, InputLabelProps), label), select ? /*#__PURE__*/React.createElement(Select$1, _extends({
	    "aria-describedby": helperTextId,
	    id: id,
	    labelId: inputLabelId,
	    value: value,
	    input: InputElement
	  }, SelectProps), children) : InputElement, helperText && /*#__PURE__*/React.createElement(FormHelperText$1, _extends({
	    id: helperTextId
	  }, FormHelperTextProps), helperText));
	});
	process.env.NODE_ENV !== "production" ? TextField.propTypes = {
	  // ----------------------------- Warning --------------------------------
	  // | These PropTypes are generated from the TypeScript type definitions |
	  // |     To update them edit the d.ts file and run "yarn proptypes"     |
	  // ----------------------------------------------------------------------

	  /**
	   * This prop helps users to fill forms faster, especially on mobile devices.
	   * The name can be confusing, as it's more like an autofill.
	   * You can learn more about it [following the specification](https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill).
	   */
	  autoComplete: propTypes.string,

	  /**
	   * If `true`, the `input` element will be focused during the first mount.
	   */
	  autoFocus: propTypes.bool,

	  /**
	   * @ignore
	   */
	  children: propTypes.node,

	  /**
	   * Override or extend the styles applied to the component.
	   * See [CSS API](#css) below for more details.
	   */
	  classes: propTypes.object,

	  /**
	   * @ignore
	   */
	  className: propTypes.string,

	  /**
	   * The color of the component. It supports those theme colors that make sense for this component.
	   */
	  color: propTypes.oneOf(['primary', 'secondary']),

	  /**
	   * The default value of the `input` element.
	   */
	  defaultValue: propTypes.any,

	  /**
	   * If `true`, the `input` element will be disabled.
	   */
	  disabled: propTypes.bool,

	  /**
	   * If `true`, the label will be displayed in an error state.
	   */
	  error: propTypes.bool,

	  /**
	   * Props applied to the [`FormHelperText`](/api/form-helper-text/) element.
	   */
	  FormHelperTextProps: propTypes.object,

	  /**
	   * If `true`, the input will take up the full width of its container.
	   */
	  fullWidth: propTypes.bool,

	  /**
	   * The helper text content.
	   */
	  helperText: propTypes.node,

	  /**
	   * @ignore
	   */
	  hiddenLabel: propTypes.bool,

	  /**
	   * The id of the `input` element.
	   * Use this prop to make `label` and `helperText` accessible for screen readers.
	   */
	  id: propTypes.string,

	  /**
	   * Props applied to the [`InputLabel`](/api/input-label/) element.
	   */
	  InputLabelProps: propTypes.object,

	  /**
	   * [Attributes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Attributes) applied to the `input` element.
	   */
	  inputProps: propTypes.object,

	  /**
	   * Props applied to the Input element.
	   * It will be a [`FilledInput`](/api/filled-input/),
	   * [`OutlinedInput`](/api/outlined-input/) or [`Input`](/api/input/)
	   * component depending on the `variant` prop value.
	   */
	  InputProps: propTypes.object,

	  /**
	   * Pass a ref to the `input` element.
	   */
	  inputRef: refType,

	  /**
	   * The label content.
	   */
	  label: propTypes.node,

	  /**
	   * If `dense` or `normal`, will adjust vertical spacing of this and contained components.
	   */
	  margin: propTypes.oneOf(['dense', 'none', 'normal']),

	  /**
	   * If `true`, a textarea element will be rendered instead of an input.
	   */
	  multiline: propTypes.bool,

	  /**
	   * Name attribute of the `input` element.
	   */
	  name: propTypes.string,

	  /**
	   * @ignore
	   */
	  onBlur: propTypes.func,

	  /**
	   * Callback fired when the value is changed.
	   *
	   * @param {object} event The event source of the callback.
	   * You can pull out the new value by accessing `event.target.value` (string).
	   */
	  onChange: propTypes.func,

	  /**
	   * @ignore
	   */
	  onFocus: propTypes.func,

	  /**
	   * The short hint displayed in the input before the user enters a value.
	   */
	  placeholder: propTypes.string,

	  /**
	   * If `true`, the label is displayed as required and the `input` element` will be required.
	   */
	  required: propTypes.bool,

	  /**
	   * Number of rows to display when multiline option is set to true.
	   */
	  rows: propTypes.oneOfType([propTypes.number, propTypes.string]),

	  /**
	   * Maximum number of rows to display when multiline option is set to true.
	   */
	  rowsMax: propTypes.oneOfType([propTypes.number, propTypes.string]),

	  /**
	   * Render a [`Select`](/api/select/) element while passing the Input element to `Select` as `input` parameter.
	   * If this option is set you must pass the options of the select as children.
	   */
	  select: propTypes.bool,

	  /**
	   * Props applied to the [`Select`](/api/select/) element.
	   */
	  SelectProps: propTypes.object,

	  /**
	   * The size of the text field.
	   */
	  size: propTypes.oneOf(['medium', 'small']),

	  /**
	   * Type of the `input` element. It should be [a valid HTML5 input type](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_%3Cinput%3E_types).
	   */
	  type: propTypes.string,

	  /**
	   * The value of the `input` element, required for a controlled component.
	   */
	  value: propTypes.any,

	  /**
	   * The variant to use.
	   */
	  variant: propTypes.oneOf(['filled', 'outlined', 'standard'])
	} : void 0;
	var TextField$1 = withStyles$1(styles$Q, {
	  name: 'MuiTextField'
	})(TextField);

	var interopRequireDefault = createCommonjsModule(function (module) {
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : {
	    "default": obj
	  };
	}

	module.exports = _interopRequireDefault;
	});

	unwrapExports(interopRequireDefault);

	var _extends_1 = createCommonjsModule(function (module) {
	function _extends() {
	  module.exports = _extends = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends.apply(this, arguments);
	}

	module.exports = _extends;
	});

	function _defineProperty$1(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	var defineProperty$1 = _defineProperty$1;

	function _objectWithoutPropertiesLoose$1(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	var objectWithoutPropertiesLoose = _objectWithoutPropertiesLoose$1;

	function _objectWithoutProperties$1(source, excluded) {
	  if (source == null) return {};
	  var target = objectWithoutPropertiesLoose(source, excluded);
	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	var objectWithoutProperties = _objectWithoutProperties$1;

	var createBreakpoints_1 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = createBreakpoints;
	exports.keys = void 0;

	var _extends2 = interopRequireDefault(_extends_1);

	var _objectWithoutProperties2 = interopRequireDefault(objectWithoutProperties);

	// Sorted ASC by size. That's important.
	// It can't be configured as it's used statically for propTypes.
	var keys = ['xs', 'sm', 'md', 'lg', 'xl']; // Keep in mind that @media is inclusive by the CSS specification.

	exports.keys = keys;

	function createBreakpoints(breakpoints) {
	  var _breakpoints$values = breakpoints.values,
	      values = _breakpoints$values === void 0 ? {
	    xs: 0,
	    sm: 600,
	    md: 960,
	    lg: 1280,
	    xl: 1920
	  } : _breakpoints$values,
	      _breakpoints$unit = breakpoints.unit,
	      unit = _breakpoints$unit === void 0 ? 'px' : _breakpoints$unit,
	      _breakpoints$step = breakpoints.step,
	      step = _breakpoints$step === void 0 ? 5 : _breakpoints$step,
	      other = (0, _objectWithoutProperties2.default)(breakpoints, ["values", "unit", "step"]);

	  function up(key) {
	    var value = typeof values[key] === 'number' ? values[key] : key;
	    return "@media (min-width:".concat(value).concat(unit, ")");
	  }

	  function down(key) {
	    var endIndex = keys.indexOf(key) + 1;
	    var upperbound = values[keys[endIndex]];

	    if (endIndex === keys.length) {
	      // xl down applies to all sizes
	      return up('xs');
	    }

	    var value = typeof upperbound === 'number' && endIndex > 0 ? upperbound : key;
	    return "@media (max-width:".concat(value - step / 100).concat(unit, ")");
	  }

	  function between(start, end) {
	    var endIndex = keys.indexOf(end);

	    if (endIndex === keys.length - 1) {
	      return up(start);
	    }

	    return "@media (min-width:".concat(typeof values[start] === 'number' ? values[start] : start).concat(unit, ") and ") + "(max-width:".concat((endIndex !== -1 && typeof values[keys[endIndex + 1]] === 'number' ? values[keys[endIndex + 1]] : end) - step / 100).concat(unit, ")");
	  }

	  function only(key) {
	    return between(key, key);
	  }

	  function width(key) {
	    return values[key];
	  }

	  return (0, _extends2.default)({
	    keys: keys,
	    values: values,
	    up: up,
	    down: down,
	    between: between,
	    only: only,
	    width: width
	  }, other);
	}
	});

	unwrapExports(createBreakpoints_1);
	var createBreakpoints_2 = createBreakpoints_1.keys;

	var createMixins_1 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = createMixins;

	var _defineProperty2 = interopRequireDefault(defineProperty$1);

	var _extends3 = interopRequireDefault(_extends_1);

	function createMixins(breakpoints, spacing, mixins) {
	  var _toolbar;

	  return (0, _extends3.default)({
	    gutters: function gutters() {
	      var styles = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	      // To deprecate in v4.1
	      //       warning(
	      //         false,
	      //         [
	      //           'Material-UI: Theme.mixins.gutters() is deprecated.',
	      //           'You can use the source of the mixin directly:',
	      //           `
	      // paddingLeft: theme.spacing(2),
	      // paddingRight: theme.spacing(2),
	      // [theme.breakpoints.up('sm')]: {
	      //   paddingLeft: theme.spacing(3),
	      //   paddingRight: theme.spacing(3),
	      // },
	      // `,
	      //         ].join('\n'),
	      //       );
	      return (0, _extends3.default)({
	        paddingLeft: spacing(2),
	        paddingRight: spacing(2)
	      }, styles, (0, _defineProperty2.default)({}, breakpoints.up('sm'), (0, _extends3.default)({
	        paddingLeft: spacing(3),
	        paddingRight: spacing(3)
	      }, styles[breakpoints.up('sm')])));
	    },
	    toolbar: (_toolbar = {
	      minHeight: 56
	    }, (0, _defineProperty2.default)(_toolbar, "".concat(breakpoints.up('xs'), " and (orientation: landscape)"), {
	      minHeight: 48
	    }), (0, _defineProperty2.default)(_toolbar, breakpoints.up('sm'), {
	      minHeight: 64
	    }), _toolbar)
	  }, mixins);
	}
	});

	unwrapExports(createMixins_1);

	var common_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	var common = {
	  black: '#000',
	  white: '#fff'
	};
	var _default = common;
	exports.default = _default;
	});

	unwrapExports(common_1);

	var grey_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	var grey = {
	  50: '#fafafa',
	  100: '#f5f5f5',
	  200: '#eeeeee',
	  300: '#e0e0e0',
	  400: '#bdbdbd',
	  500: '#9e9e9e',
	  600: '#757575',
	  700: '#616161',
	  800: '#424242',
	  900: '#212121',
	  A100: '#d5d5d5',
	  A200: '#aaaaaa',
	  A400: '#303030',
	  A700: '#616161'
	};
	var _default = grey;
	exports.default = _default;
	});

	unwrapExports(grey_1);

	var indigo_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	var indigo = {
	  50: '#e8eaf6',
	  100: '#c5cae9',
	  200: '#9fa8da',
	  300: '#7986cb',
	  400: '#5c6bc0',
	  500: '#3f51b5',
	  600: '#3949ab',
	  700: '#303f9f',
	  800: '#283593',
	  900: '#1a237e',
	  A100: '#8c9eff',
	  A200: '#536dfe',
	  A400: '#3d5afe',
	  A700: '#304ffe'
	};
	var _default = indigo;
	exports.default = _default;
	});

	unwrapExports(indigo_1);

	var pink_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	var pink = {
	  50: '#fce4ec',
	  100: '#f8bbd0',
	  200: '#f48fb1',
	  300: '#f06292',
	  400: '#ec407a',
	  500: '#e91e63',
	  600: '#d81b60',
	  700: '#c2185b',
	  800: '#ad1457',
	  900: '#880e4f',
	  A100: '#ff80ab',
	  A200: '#ff4081',
	  A400: '#f50057',
	  A700: '#c51162'
	};
	var _default = pink;
	exports.default = _default;
	});

	unwrapExports(pink_1);

	var red_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	var red = {
	  50: '#ffebee',
	  100: '#ffcdd2',
	  200: '#ef9a9a',
	  300: '#e57373',
	  400: '#ef5350',
	  500: '#f44336',
	  600: '#e53935',
	  700: '#d32f2f',
	  800: '#c62828',
	  900: '#b71c1c',
	  A100: '#ff8a80',
	  A200: '#ff5252',
	  A400: '#ff1744',
	  A700: '#d50000'
	};
	var _default = red;
	exports.default = _default;
	});

	unwrapExports(red_1);

	var orange_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	var orange = {
	  50: '#fff3e0',
	  100: '#ffe0b2',
	  200: '#ffcc80',
	  300: '#ffb74d',
	  400: '#ffa726',
	  500: '#ff9800',
	  600: '#fb8c00',
	  700: '#f57c00',
	  800: '#ef6c00',
	  900: '#e65100',
	  A100: '#ffd180',
	  A200: '#ffab40',
	  A400: '#ff9100',
	  A700: '#ff6d00'
	};
	var _default = orange;
	exports.default = _default;
	});

	unwrapExports(orange_1);

	var blue_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	var blue = {
	  50: '#e3f2fd',
	  100: '#bbdefb',
	  200: '#90caf9',
	  300: '#64b5f6',
	  400: '#42a5f5',
	  500: '#2196f3',
	  600: '#1e88e5',
	  700: '#1976d2',
	  800: '#1565c0',
	  900: '#0d47a1',
	  A100: '#82b1ff',
	  A200: '#448aff',
	  A400: '#2979ff',
	  A700: '#2962ff'
	};
	var _default = blue;
	exports.default = _default;
	});

	unwrapExports(blue_1);

	var green_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	var green = {
	  50: '#e8f5e9',
	  100: '#c8e6c9',
	  200: '#a5d6a7',
	  300: '#81c784',
	  400: '#66bb6a',
	  500: '#4caf50',
	  600: '#43a047',
	  700: '#388e3c',
	  800: '#2e7d32',
	  900: '#1b5e20',
	  A100: '#b9f6ca',
	  A200: '#69f0ae',
	  A400: '#00e676',
	  A700: '#00c853'
	};
	var _default = green;
	exports.default = _default;
	});

	unwrapExports(green_1);

	var colorManipulator = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.hexToRgb = hexToRgb;
	exports.rgbToHex = rgbToHex;
	exports.hslToRgb = hslToRgb;
	exports.decomposeColor = decomposeColor;
	exports.recomposeColor = recomposeColor;
	exports.getContrastRatio = getContrastRatio;
	exports.getLuminance = getLuminance;
	exports.emphasize = emphasize;
	exports.fade = fade;
	exports.darken = darken;
	exports.lighten = lighten;



	/* eslint-disable no-use-before-define */

	/**
	 * Returns a number whose value is limited to the given range.
	 *
	 * @param {number} value The value to be clamped
	 * @param {number} min The lower boundary of the output range
	 * @param {number} max The upper boundary of the output range
	 * @returns {number} A number in the range [min, max]
	 */
	function clamp(value) {
	  var min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
	  var max = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;

	  if (process.env.NODE_ENV !== 'production') {
	    if (value < min || value > max) {
	      console.error("Material-UI: The value provided ".concat(value, " is out of range [").concat(min, ", ").concat(max, "]."));
	    }
	  }

	  return Math.min(Math.max(min, value), max);
	}
	/**
	 * Converts a color from CSS hex format to CSS rgb format.
	 *
	 * @param {string} color - Hex color, i.e. #nnn or #nnnnnn
	 * @returns {string} A CSS rgb color string
	 */


	function hexToRgb(color) {
	  color = color.substr(1);
	  var re = new RegExp(".{1,".concat(color.length >= 6 ? 2 : 1, "}"), 'g');
	  var colors = color.match(re);

	  if (colors && colors[0].length === 1) {
	    colors = colors.map(function (n) {
	      return n + n;
	    });
	  }

	  return colors ? "rgb".concat(colors.length === 4 ? 'a' : '', "(").concat(colors.map(function (n, index) {
	    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;
	  }).join(', '), ")") : '';
	}

	function intToHex(int) {
	  var hex = int.toString(16);
	  return hex.length === 1 ? "0".concat(hex) : hex;
	}
	/**
	 * Converts a color from CSS rgb format to CSS hex format.
	 *
	 * @param {string} color - RGB color, i.e. rgb(n, n, n)
	 * @returns {string} A CSS rgb color string, i.e. #nnnnnn
	 */


	function rgbToHex(color) {
	  // Idempotent
	  if (color.indexOf('#') === 0) {
	    return color;
	  }

	  var _decomposeColor = decomposeColor(color),
	      values = _decomposeColor.values;

	  return "#".concat(values.map(function (n) {
	    return intToHex(n);
	  }).join(''));
	}
	/**
	 * Converts a color from hsl format to rgb format.
	 *
	 * @param {string} color - HSL color values
	 * @returns {string} rgb color values
	 */


	function hslToRgb(color) {
	  color = decomposeColor(color);
	  var _color = color,
	      values = _color.values;
	  var h = values[0];
	  var s = values[1] / 100;
	  var l = values[2] / 100;
	  var a = s * Math.min(l, 1 - l);

	  var f = function f(n) {
	    var k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : (n + h / 30) % 12;
	    return l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
	  };

	  var type = 'rgb';
	  var rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];

	  if (color.type === 'hsla') {
	    type += 'a';
	    rgb.push(values[3]);
	  }

	  return recomposeColor({
	    type: type,
	    values: rgb
	  });
	}
	/**
	 * Returns an object with the type and values of a color.
	 *
	 * Note: Does not support rgb % values.
	 *
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @returns {object} - A MUI color object: {type: string, values: number[]}
	 */


	function decomposeColor(color) {
	  // Idempotent
	  if (color.type) {
	    return color;
	  }

	  if (color.charAt(0) === '#') {
	    return decomposeColor(hexToRgb(color));
	  }

	  var marker = color.indexOf('(');
	  var type = color.substring(0, marker);

	  if (['rgb', 'rgba', 'hsl', 'hsla'].indexOf(type) === -1) {
	    throw new Error(process.env.NODE_ENV !== "production" ? "Material-UI: Unsupported `".concat(color, "` color.\nWe support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla().") : (0, esm.formatMuiErrorMessage)(3, color));
	  }

	  var values = color.substring(marker + 1, color.length - 1).split(',');
	  values = values.map(function (value) {
	    return parseFloat(value);
	  });
	  return {
	    type: type,
	    values: values
	  };
	}
	/**
	 * Converts a color object with type and values to a string.
	 *
	 * @param {object} color - Decomposed color
	 * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'
	 * @param {array} color.values - [n,n,n] or [n,n,n,n]
	 * @returns {string} A CSS color string
	 */


	function recomposeColor(color) {
	  var type = color.type;
	  var values = color.values;

	  if (type.indexOf('rgb') !== -1) {
	    // Only convert the first 3 values to int (i.e. not alpha)
	    values = values.map(function (n, i) {
	      return i < 3 ? parseInt(n, 10) : n;
	    });
	  } else if (type.indexOf('hsl') !== -1) {
	    values[1] = "".concat(values[1], "%");
	    values[2] = "".concat(values[2], "%");
	  }

	  return "".concat(type, "(").concat(values.join(', '), ")");
	}
	/**
	 * Calculates the contrast ratio between two colors.
	 *
	 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
	 *
	 * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @returns {number} A contrast ratio value in the range 0 - 21.
	 */


	function getContrastRatio(foreground, background) {
	  var lumA = getLuminance(foreground);
	  var lumB = getLuminance(background);
	  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);
	}
	/**
	 * The relative brightness of any point in a color space,
	 * normalized to 0 for darkest black and 1 for lightest white.
	 *
	 * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
	 *
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @returns {number} The relative brightness of the color in the range 0 - 1
	 */


	function getLuminance(color) {
	  color = decomposeColor(color);
	  var rgb = color.type === 'hsl' ? decomposeColor(hslToRgb(color)).values : color.values;
	  rgb = rgb.map(function (val) {
	    val /= 255; // normalized

	    return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);
	  }); // Truncate at 3 digits

	  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));
	}
	/**
	 * Darken or lighten a color, depending on its luminance.
	 * Light colors are darkened, dark colors are lightened.
	 *
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @param {number} coefficient=0.15 - multiplier in the range 0 - 1
	 * @returns {string} A CSS color string. Hex input values are returned as rgb
	 */


	function emphasize(color) {
	  var coefficient = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.15;
	  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);
	}
	/**
	 * Set the absolute transparency of a color.
	 * Any existing alpha values are overwritten.
	 *
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @param {number} value - value to set the alpha channel to in the range 0 -1
	 * @returns {string} A CSS color string. Hex input values are returned as rgb
	 */


	function fade(color, value) {
	  color = decomposeColor(color);
	  value = clamp(value);

	  if (color.type === 'rgb' || color.type === 'hsl') {
	    color.type += 'a';
	  }

	  color.values[3] = value;
	  return recomposeColor(color);
	}
	/**
	 * Darkens a color.
	 *
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @param {number} coefficient - multiplier in the range 0 - 1
	 * @returns {string} A CSS color string. Hex input values are returned as rgb
	 */


	function darken(color, coefficient) {
	  color = decomposeColor(color);
	  coefficient = clamp(coefficient);

	  if (color.type.indexOf('hsl') !== -1) {
	    color.values[2] *= 1 - coefficient;
	  } else if (color.type.indexOf('rgb') !== -1) {
	    for (var i = 0; i < 3; i += 1) {
	      color.values[i] *= 1 - coefficient;
	    }
	  }

	  return recomposeColor(color);
	}
	/**
	 * Lightens a color.
	 *
	 * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()
	 * @param {number} coefficient - multiplier in the range 0 - 1
	 * @returns {string} A CSS color string. Hex input values are returned as rgb
	 */


	function lighten(color, coefficient) {
	  color = decomposeColor(color);
	  coefficient = clamp(coefficient);

	  if (color.type.indexOf('hsl') !== -1) {
	    color.values[2] += (100 - color.values[2]) * coefficient;
	  } else if (color.type.indexOf('rgb') !== -1) {
	    for (var i = 0; i < 3; i += 1) {
	      color.values[i] += (255 - color.values[i]) * coefficient;
	    }
	  }

	  return recomposeColor(color);
	}
	});

	unwrapExports(colorManipulator);
	var colorManipulator_1 = colorManipulator.hexToRgb;
	var colorManipulator_2 = colorManipulator.rgbToHex;
	var colorManipulator_3 = colorManipulator.hslToRgb;
	var colorManipulator_4 = colorManipulator.decomposeColor;
	var colorManipulator_5 = colorManipulator.recomposeColor;
	var colorManipulator_6 = colorManipulator.getContrastRatio;
	var colorManipulator_7 = colorManipulator.getLuminance;
	var colorManipulator_8 = colorManipulator.emphasize;
	var colorManipulator_9 = colorManipulator.fade;
	var colorManipulator_10 = colorManipulator.darken;
	var colorManipulator_11 = colorManipulator.lighten;

	var createPalette_1 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = createPalette;
	exports.dark = exports.light = void 0;

	var _extends2 = interopRequireDefault(_extends_1);

	var _objectWithoutProperties2 = interopRequireDefault(objectWithoutProperties);



	var _common = interopRequireDefault(common_1);

	var _grey = interopRequireDefault(grey_1);

	var _indigo = interopRequireDefault(indigo_1);

	var _pink = interopRequireDefault(pink_1);

	var _red = interopRequireDefault(red_1);

	var _orange = interopRequireDefault(orange_1);

	var _blue = interopRequireDefault(blue_1);

	var _green = interopRequireDefault(green_1);



	var light = {
	  // The colors used to style the text.
	  text: {
	    // The most important text.
	    primary: 'rgba(0, 0, 0, 0.87)',
	    // Secondary text.
	    secondary: 'rgba(0, 0, 0, 0.54)',
	    // Disabled text have even lower visual prominence.
	    disabled: 'rgba(0, 0, 0, 0.38)',
	    // Text hints.
	    hint: 'rgba(0, 0, 0, 0.38)'
	  },
	  // The color used to divide different elements.
	  divider: 'rgba(0, 0, 0, 0.12)',
	  // The background colors used to style the surfaces.
	  // Consistency between these values is important.
	  background: {
	    paper: _common.default.white,
	    default: _grey.default[50]
	  },
	  // The colors used to style the action elements.
	  action: {
	    // The color of an active action like an icon button.
	    active: 'rgba(0, 0, 0, 0.54)',
	    // The color of an hovered action.
	    hover: 'rgba(0, 0, 0, 0.04)',
	    hoverOpacity: 0.04,
	    // The color of a selected action.
	    selected: 'rgba(0, 0, 0, 0.08)',
	    selectedOpacity: 0.08,
	    // The color of a disabled action.
	    disabled: 'rgba(0, 0, 0, 0.26)',
	    // The background color of a disabled action.
	    disabledBackground: 'rgba(0, 0, 0, 0.12)',
	    disabledOpacity: 0.38,
	    focus: 'rgba(0, 0, 0, 0.12)',
	    focusOpacity: 0.12,
	    activatedOpacity: 0.12
	  }
	};
	exports.light = light;
	var dark = {
	  text: {
	    primary: _common.default.white,
	    secondary: 'rgba(255, 255, 255, 0.7)',
	    disabled: 'rgba(255, 255, 255, 0.5)',
	    hint: 'rgba(255, 255, 255, 0.5)',
	    icon: 'rgba(255, 255, 255, 0.5)'
	  },
	  divider: 'rgba(255, 255, 255, 0.12)',
	  background: {
	    paper: _grey.default[800],
	    default: '#303030'
	  },
	  action: {
	    active: _common.default.white,
	    hover: 'rgba(255, 255, 255, 0.08)',
	    hoverOpacity: 0.08,
	    selected: 'rgba(255, 255, 255, 0.16)',
	    selectedOpacity: 0.16,
	    disabled: 'rgba(255, 255, 255, 0.3)',
	    disabledBackground: 'rgba(255, 255, 255, 0.12)',
	    disabledOpacity: 0.38,
	    focus: 'rgba(255, 255, 255, 0.12)',
	    focusOpacity: 0.12,
	    activatedOpacity: 0.24
	  }
	};
	exports.dark = dark;

	function addLightOrDark(intent, direction, shade, tonalOffset) {
	  var tonalOffsetLight = tonalOffset.light || tonalOffset;
	  var tonalOffsetDark = tonalOffset.dark || tonalOffset * 1.5;

	  if (!intent[direction]) {
	    if (intent.hasOwnProperty(shade)) {
	      intent[direction] = intent[shade];
	    } else if (direction === 'light') {
	      intent.light = (0, colorManipulator.lighten)(intent.main, tonalOffsetLight);
	    } else if (direction === 'dark') {
	      intent.dark = (0, colorManipulator.darken)(intent.main, tonalOffsetDark);
	    }
	  }
	}

	function createPalette(palette) {
	  var _palette$primary = palette.primary,
	      primary = _palette$primary === void 0 ? {
	    light: _indigo.default[300],
	    main: _indigo.default[500],
	    dark: _indigo.default[700]
	  } : _palette$primary,
	      _palette$secondary = palette.secondary,
	      secondary = _palette$secondary === void 0 ? {
	    light: _pink.default.A200,
	    main: _pink.default.A400,
	    dark: _pink.default.A700
	  } : _palette$secondary,
	      _palette$error = palette.error,
	      error = _palette$error === void 0 ? {
	    light: _red.default[300],
	    main: _red.default[500],
	    dark: _red.default[700]
	  } : _palette$error,
	      _palette$warning = palette.warning,
	      warning = _palette$warning === void 0 ? {
	    light: _orange.default[300],
	    main: _orange.default[500],
	    dark: _orange.default[700]
	  } : _palette$warning,
	      _palette$info = palette.info,
	      info = _palette$info === void 0 ? {
	    light: _blue.default[300],
	    main: _blue.default[500],
	    dark: _blue.default[700]
	  } : _palette$info,
	      _palette$success = palette.success,
	      success = _palette$success === void 0 ? {
	    light: _green.default[300],
	    main: _green.default[500],
	    dark: _green.default[700]
	  } : _palette$success,
	      _palette$type = palette.type,
	      type = _palette$type === void 0 ? 'light' : _palette$type,
	      _palette$contrastThre = palette.contrastThreshold,
	      contrastThreshold = _palette$contrastThre === void 0 ? 3 : _palette$contrastThre,
	      _palette$tonalOffset = palette.tonalOffset,
	      tonalOffset = _palette$tonalOffset === void 0 ? 0.2 : _palette$tonalOffset,
	      other = (0, _objectWithoutProperties2.default)(palette, ["primary", "secondary", "error", "warning", "info", "success", "type", "contrastThreshold", "tonalOffset"]); // Use the same logic as
	  // Bootstrap: https://github.com/twbs/bootstrap/blob/1d6e3710dd447de1a200f29e8fa521f8a0908f70/scss/_functions.scss#L59
	  // and material-components-web https://github.com/material-components/material-components-web/blob/ac46b8863c4dab9fc22c4c662dc6bd1b65dd652f/packages/mdc-theme/_functions.scss#L54

	  function getContrastText(background) {
	    var contrastText = (0, colorManipulator.getContrastRatio)(background, dark.text.primary) >= contrastThreshold ? dark.text.primary : light.text.primary;

	    if (process.env.NODE_ENV !== 'production') {
	      var contrast = (0, colorManipulator.getContrastRatio)(background, contrastText);

	      if (contrast < 3) {
	        console.error(["Material-UI: The contrast ratio of ".concat(contrast, ":1 for ").concat(contrastText, " on ").concat(background), 'falls below the WCAG recommended absolute minimum contrast ratio of 3:1.', 'https://www.w3.org/TR/2008/REC-WCAG20-20081211/#visual-audio-contrast-contrast'].join('\n'));
	      }
	    }

	    return contrastText;
	  }

	  var augmentColor = function augmentColor(color) {
	    var mainShade = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 500;
	    var lightShade = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 300;
	    var darkShade = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 700;
	    color = (0, _extends2.default)({}, color);

	    if (!color.main && color[mainShade]) {
	      color.main = color[mainShade];
	    }

	    if (!color.main) {
	      throw new Error(process.env.NODE_ENV !== "production" ? "Material-UI: The color provided to augmentColor(color) is invalid.\nThe color object needs to have a `main` property or a `".concat(mainShade, "` property.") : (0, esm.formatMuiErrorMessage)(4, mainShade));
	    }

	    if (typeof color.main !== 'string') {
	      throw new Error(process.env.NODE_ENV !== "production" ? "Material-UI: The color provided to augmentColor(color) is invalid.\n`color.main` should be a string, but `".concat(JSON.stringify(color.main), "` was provided instead.\n\nDid you intend to use one of the following approaches?\n\nimport {\xA0green } from \"@material-ui/core/colors\";\n\nconst theme1 = createMuiTheme({ palette: {\n  primary: green,\n} });\n\nconst theme2 = createMuiTheme({ palette: {\n  primary: { main: green[500] },\n} });") : _formatMuiErrorMessage(5, JSON.stringify(color.main)));
	    }

	    addLightOrDark(color, 'light', lightShade, tonalOffset);
	    addLightOrDark(color, 'dark', darkShade, tonalOffset);

	    if (!color.contrastText) {
	      color.contrastText = getContrastText(color.main);
	    }

	    return color;
	  };

	  var types = {
	    dark: dark,
	    light: light
	  };

	  if (process.env.NODE_ENV !== 'production') {
	    if (!types[type]) {
	      console.error("Material-UI: The palette type `".concat(type, "` is not supported."));
	    }
	  }

	  var paletteOutput = (0, esm.deepmerge)((0, _extends2.default)({
	    // A collection of common colors.
	    common: _common.default,
	    // The palette type, can be light or dark.
	    type: type,
	    // The colors used to represent primary interface elements for a user.
	    primary: augmentColor(primary),
	    // The colors used to represent secondary interface elements for a user.
	    secondary: augmentColor(secondary, 'A400', 'A200', 'A700'),
	    // The colors used to represent interface elements that the user should be made aware of.
	    error: augmentColor(error),
	    // The colors used to represent potentially dangerous actions or important messages.
	    warning: augmentColor(warning),
	    // The colors used to present information to the user that is neutral and not necessarily important.
	    info: augmentColor(info),
	    // The colors used to indicate the successful completion of an action that user triggered.
	    success: augmentColor(success),
	    // The grey colors.
	    grey: _grey.default,
	    // Used by `getContrastText()` to maximize the contrast between
	    // the background and the text.
	    contrastThreshold: contrastThreshold,
	    // Takes a background color and returns the text color that maximizes the contrast.
	    getContrastText: getContrastText,
	    // Generate a rich color object.
	    augmentColor: augmentColor,
	    // Used by the functions below to shift a color's luminance by approximately
	    // two indexes within its tonal palette.
	    // E.g., shift from Red 500 to Red 300 or Red 700.
	    tonalOffset: tonalOffset
	  }, types[type]), other);
	  return paletteOutput;
	}
	});

	unwrapExports(createPalette_1);
	var createPalette_2 = createPalette_1.dark;
	var createPalette_3 = createPalette_1.light;

	var createTypography_1 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = createTypography;

	var _extends2 = interopRequireDefault(_extends_1);

	var _objectWithoutProperties2 = interopRequireDefault(objectWithoutProperties);



	function round(value) {
	  return Math.round(value * 1e5) / 1e5;
	}

	var caseAllCaps = {
	  textTransform: 'uppercase'
	};
	var defaultFontFamily = '"Roboto", "Helvetica", "Arial", sans-serif';
	/**
	 * @see @link{https://material.io/design/typography/the-type-system.html}
	 * @see @link{https://material.io/design/typography/understanding-typography.html}
	 */

	function createTypography(palette, typography) {
	  var _ref = typeof typography === 'function' ? typography(palette) : typography,
	      _ref$fontFamily = _ref.fontFamily,
	      fontFamily = _ref$fontFamily === void 0 ? defaultFontFamily : _ref$fontFamily,
	      _ref$fontSize = _ref.fontSize,
	      fontSize = _ref$fontSize === void 0 ? 14 : _ref$fontSize,
	      _ref$fontWeightLight = _ref.fontWeightLight,
	      fontWeightLight = _ref$fontWeightLight === void 0 ? 300 : _ref$fontWeightLight,
	      _ref$fontWeightRegula = _ref.fontWeightRegular,
	      fontWeightRegular = _ref$fontWeightRegula === void 0 ? 400 : _ref$fontWeightRegula,
	      _ref$fontWeightMedium = _ref.fontWeightMedium,
	      fontWeightMedium = _ref$fontWeightMedium === void 0 ? 500 : _ref$fontWeightMedium,
	      _ref$fontWeightBold = _ref.fontWeightBold,
	      fontWeightBold = _ref$fontWeightBold === void 0 ? 700 : _ref$fontWeightBold,
	      _ref$htmlFontSize = _ref.htmlFontSize,
	      htmlFontSize = _ref$htmlFontSize === void 0 ? 16 : _ref$htmlFontSize,
	      allVariants = _ref.allVariants,
	      pxToRem2 = _ref.pxToRem,
	      other = (0, _objectWithoutProperties2.default)(_ref, ["fontFamily", "fontSize", "fontWeightLight", "fontWeightRegular", "fontWeightMedium", "fontWeightBold", "htmlFontSize", "allVariants", "pxToRem"]);

	  if (process.env.NODE_ENV !== 'production') {
	    if (typeof fontSize !== 'number') {
	      console.error('Material-UI: `fontSize` is required to be a number.');
	    }

	    if (typeof htmlFontSize !== 'number') {
	      console.error('Material-UI: `htmlFontSize` is required to be a number.');
	    }
	  }

	  var coef = fontSize / 14;

	  var pxToRem = pxToRem2 || function (size) {
	    return "".concat(size / htmlFontSize * coef, "rem");
	  };

	  var buildVariant = function buildVariant(fontWeight, size, lineHeight, letterSpacing, casing) {
	    return (0, _extends2.default)({
	      fontFamily: fontFamily,
	      fontWeight: fontWeight,
	      fontSize: pxToRem(size),
	      // Unitless following https://meyerweb.com/eric/thoughts/2006/02/08/unitless-line-heights/
	      lineHeight: lineHeight
	    }, fontFamily === defaultFontFamily ? {
	      letterSpacing: "".concat(round(letterSpacing / size), "em")
	    } : {}, casing, allVariants);
	  };

	  var variants = {
	    h1: buildVariant(fontWeightLight, 96, 1.167, -1.5),
	    h2: buildVariant(fontWeightLight, 60, 1.2, -0.5),
	    h3: buildVariant(fontWeightRegular, 48, 1.167, 0),
	    h4: buildVariant(fontWeightRegular, 34, 1.235, 0.25),
	    h5: buildVariant(fontWeightRegular, 24, 1.334, 0),
	    h6: buildVariant(fontWeightMedium, 20, 1.6, 0.15),
	    subtitle1: buildVariant(fontWeightRegular, 16, 1.75, 0.15),
	    subtitle2: buildVariant(fontWeightMedium, 14, 1.57, 0.1),
	    body1: buildVariant(fontWeightRegular, 16, 1.5, 0.15),
	    body2: buildVariant(fontWeightRegular, 14, 1.43, 0.15),
	    button: buildVariant(fontWeightMedium, 14, 1.75, 0.4, caseAllCaps),
	    caption: buildVariant(fontWeightRegular, 12, 1.66, 0.4),
	    overline: buildVariant(fontWeightRegular, 12, 2.66, 1, caseAllCaps)
	  };
	  return (0, esm.deepmerge)((0, _extends2.default)({
	    htmlFontSize: htmlFontSize,
	    pxToRem: pxToRem,
	    round: round,
	    // TODO v5: remove
	    fontFamily: fontFamily,
	    fontSize: fontSize,
	    fontWeightLight: fontWeightLight,
	    fontWeightRegular: fontWeightRegular,
	    fontWeightMedium: fontWeightMedium,
	    fontWeightBold: fontWeightBold
	  }, variants), other, {
	    clone: false // No need to clone deep

	  });
	}
	});

	unwrapExports(createTypography_1);

	var shadows_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	var shadowKeyUmbraOpacity = 0.2;
	var shadowKeyPenumbraOpacity = 0.14;
	var shadowAmbientShadowOpacity = 0.12;

	function createShadow() {
	  return ["".concat(arguments.length <= 0 ? undefined : arguments[0], "px ").concat(arguments.length <= 1 ? undefined : arguments[1], "px ").concat(arguments.length <= 2 ? undefined : arguments[2], "px ").concat(arguments.length <= 3 ? undefined : arguments[3], "px rgba(0,0,0,").concat(shadowKeyUmbraOpacity, ")"), "".concat(arguments.length <= 4 ? undefined : arguments[4], "px ").concat(arguments.length <= 5 ? undefined : arguments[5], "px ").concat(arguments.length <= 6 ? undefined : arguments[6], "px ").concat(arguments.length <= 7 ? undefined : arguments[7], "px rgba(0,0,0,").concat(shadowKeyPenumbraOpacity, ")"), "".concat(arguments.length <= 8 ? undefined : arguments[8], "px ").concat(arguments.length <= 9 ? undefined : arguments[9], "px ").concat(arguments.length <= 10 ? undefined : arguments[10], "px ").concat(arguments.length <= 11 ? undefined : arguments[11], "px rgba(0,0,0,").concat(shadowAmbientShadowOpacity, ")")].join(',');
	} // Values from https://github.com/material-components/material-components-web/blob/be8747f94574669cb5e7add1a7c54fa41a89cec7/packages/mdc-elevation/_variables.scss


	var shadows = ['none', createShadow(0, 2, 1, -1, 0, 1, 1, 0, 0, 1, 3, 0), createShadow(0, 3, 1, -2, 0, 2, 2, 0, 0, 1, 5, 0), createShadow(0, 3, 3, -2, 0, 3, 4, 0, 0, 1, 8, 0), createShadow(0, 2, 4, -1, 0, 4, 5, 0, 0, 1, 10, 0), createShadow(0, 3, 5, -1, 0, 5, 8, 0, 0, 1, 14, 0), createShadow(0, 3, 5, -1, 0, 6, 10, 0, 0, 1, 18, 0), createShadow(0, 4, 5, -2, 0, 7, 10, 1, 0, 2, 16, 1), createShadow(0, 5, 5, -3, 0, 8, 10, 1, 0, 3, 14, 2), createShadow(0, 5, 6, -3, 0, 9, 12, 1, 0, 3, 16, 2), createShadow(0, 6, 6, -3, 0, 10, 14, 1, 0, 4, 18, 3), createShadow(0, 6, 7, -4, 0, 11, 15, 1, 0, 4, 20, 3), createShadow(0, 7, 8, -4, 0, 12, 17, 2, 0, 5, 22, 4), createShadow(0, 7, 8, -4, 0, 13, 19, 2, 0, 5, 24, 4), createShadow(0, 7, 9, -4, 0, 14, 21, 2, 0, 5, 26, 4), createShadow(0, 8, 9, -5, 0, 15, 22, 2, 0, 6, 28, 5), createShadow(0, 8, 10, -5, 0, 16, 24, 2, 0, 6, 30, 5), createShadow(0, 8, 11, -5, 0, 17, 26, 2, 0, 6, 32, 5), createShadow(0, 9, 11, -5, 0, 18, 28, 2, 0, 7, 34, 6), createShadow(0, 9, 12, -6, 0, 19, 29, 2, 0, 7, 36, 6), createShadow(0, 10, 13, -6, 0, 20, 31, 3, 0, 8, 38, 7), createShadow(0, 10, 13, -6, 0, 21, 33, 3, 0, 8, 40, 7), createShadow(0, 10, 14, -6, 0, 22, 35, 3, 0, 8, 42, 7), createShadow(0, 11, 14, -7, 0, 23, 36, 3, 0, 9, 44, 8), createShadow(0, 11, 15, -7, 0, 24, 38, 3, 0, 9, 46, 8)];
	var _default = shadows;
	exports.default = _default;
	});

	unwrapExports(shadows_1);

	var shape_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	var shape = {
	  borderRadius: 4
	};
	var _default = shape;
	exports.default = _default;
	});

	unwrapExports(shape_1);

	var createSpacing_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = createSpacing;



	var warnOnce;

	function createSpacing() {
	  var spacingInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;

	  // Already transformed.
	  if (spacingInput.mui) {
	    return spacingInput;
	  } // Material Design layouts are visually balanced. Most measurements align to an 8dp grid applied, which aligns both spacing and the overall layout.
	  // Smaller components, such as icons and type, can align to a 4dp grid.
	  // https://material.io/design/layout/understanding-layout.html#usage


	  var transform = (0, esm$1.createUnarySpacing)({
	    spacing: spacingInput
	  });

	  var spacing = function spacing() {
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    if (process.env.NODE_ENV !== 'production') {
	      if (!(args.length <= 4)) {
	        console.error("Material-UI: Too many arguments provided, expected between 0 and 4, got ".concat(args.length));
	      }
	    }

	    if (args.length === 0) {
	      return transform(1);
	    }

	    if (args.length === 1) {
	      return transform(args[0]);
	    }

	    return args.map(function (argument) {
	      if (typeof argument === 'string') {
	        return argument;
	      }

	      var output = transform(argument);
	      return typeof output === 'number' ? "".concat(output, "px") : output;
	    }).join(' ');
	  }; // Backward compatibility, to remove in v5.


	  Object.defineProperty(spacing, 'unit', {
	    get: function get() {
	      if (process.env.NODE_ENV !== 'production') {
	        if (!warnOnce || process.env.NODE_ENV === 'test') {
	          console.error(['Material-UI: theme.spacing.unit usage has been deprecated.', 'It will be removed in v5.', 'You can replace `theme.spacing.unit * y` with `theme.spacing(y)`.', '', 'You can use the `https://github.com/mui-org/material-ui/tree/master/packages/material-ui-codemod/README.md#theme-spacing-api` migration helper to make the process smoother.'].join('\n'));
	        }

	        warnOnce = true;
	      }

	      return spacingInput;
	    }
	  });
	  spacing.mui = true;
	  return spacing;
	}
	});

	unwrapExports(createSpacing_1);

	var transitions$1 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = exports.duration = exports.easing = void 0;

	var _objectWithoutProperties2 = interopRequireDefault(objectWithoutProperties);

	// Follow https://material.google.com/motion/duration-easing.html#duration-easing-natural-easing-curves
	// to learn the context in which each easing should be used.
	var easing = {
	  // This is the most common easing curve.
	  easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',
	  // Objects enter the screen at full velocity from off-screen and
	  // slowly decelerate to a resting point.
	  easeOut: 'cubic-bezier(0.0, 0, 0.2, 1)',
	  // Objects leave the screen at full velocity. They do not decelerate when off-screen.
	  easeIn: 'cubic-bezier(0.4, 0, 1, 1)',
	  // The sharp curve is used by objects that may return to the screen at any time.
	  sharp: 'cubic-bezier(0.4, 0, 0.6, 1)'
	}; // Follow https://material.io/guidelines/motion/duration-easing.html#duration-easing-common-durations
	// to learn when use what timing

	exports.easing = easing;
	var duration = {
	  shortest: 150,
	  shorter: 200,
	  short: 250,
	  // most basic recommended timing
	  standard: 300,
	  // this is to be used in complex animations
	  complex: 375,
	  // recommended when something is entering screen
	  enteringScreen: 225,
	  // recommended when something is leaving screen
	  leavingScreen: 195
	};
	exports.duration = duration;

	function formatMs(milliseconds) {
	  return "".concat(Math.round(milliseconds), "ms");
	}
	/**
	 * @param {string|Array} props
	 * @param {object} param
	 * @param {string} param.prop
	 * @param {number} param.duration
	 * @param {string} param.easing
	 * @param {number} param.delay
	 */


	var _default = {
	  easing: easing,
	  duration: duration,
	  create: function create() {
	    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ['all'];
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    var _options$duration = options.duration,
	        durationOption = _options$duration === void 0 ? duration.standard : _options$duration,
	        _options$easing = options.easing,
	        easingOption = _options$easing === void 0 ? easing.easeInOut : _options$easing,
	        _options$delay = options.delay,
	        delay = _options$delay === void 0 ? 0 : _options$delay,
	        other = (0, _objectWithoutProperties2.default)(options, ["duration", "easing", "delay"]);

	    if (process.env.NODE_ENV !== 'production') {
	      var isString = function isString(value) {
	        return typeof value === 'string';
	      };

	      var isNumber = function isNumber(value) {
	        return !isNaN(parseFloat(value));
	      };

	      if (!isString(props) && !Array.isArray(props)) {
	        console.error('Material-UI: Argument "props" must be a string or Array.');
	      }

	      if (!isNumber(durationOption) && !isString(durationOption)) {
	        console.error("Material-UI: Argument \"duration\" must be a number or a string but found ".concat(durationOption, "."));
	      }

	      if (!isString(easingOption)) {
	        console.error('Material-UI: Argument "easing" must be a string.');
	      }

	      if (!isNumber(delay) && !isString(delay)) {
	        console.error('Material-UI: Argument "delay" must be a number or a string.');
	      }

	      if (Object.keys(other).length !== 0) {
	        console.error("Material-UI: Unrecognized argument(s) [".concat(Object.keys(other).join(','), "]."));
	      }
	    }

	    return (Array.isArray(props) ? props : [props]).map(function (animatedProp) {
	      return "".concat(animatedProp, " ").concat(typeof durationOption === 'string' ? durationOption : formatMs(durationOption), " ").concat(easingOption, " ").concat(typeof delay === 'string' ? delay : formatMs(delay));
	    }).join(',');
	  },
	  getAutoHeightDuration: function getAutoHeightDuration(height) {
	    if (!height) {
	      return 0;
	    }

	    var constant = height / 36; // https://www.wolframalpha.com/input/?i=(4+%2B+15+*+(x+%2F+36+)+**+0.25+%2B+(x+%2F+36)+%2F+5)+*+10

	    return Math.round((4 + 15 * Math.pow(constant, 0.25) + constant / 5) * 10);
	  }
	};
	exports.default = _default;
	});

	unwrapExports(transitions$1);
	var transitions_1 = transitions$1.duration;
	var transitions_2 = transitions$1.easing;

	var zIndex_1 = createCommonjsModule(function (module, exports) {

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;
	// We need to centralize the zIndex definitions as they work
	// like global values in the browser.
	var zIndex = {
	  mobileStepper: 1000,
	  speedDial: 1050,
	  appBar: 1100,
	  drawer: 1200,
	  modal: 1300,
	  snackbar: 1400,
	  tooltip: 1500
	};
	var _default = zIndex;
	exports.default = _default;
	});

	unwrapExports(zIndex_1);

	var createMuiTheme_1 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _defineProperty2 = interopRequireDefault(defineProperty$1);

	var _objectWithoutProperties2 = interopRequireDefault(objectWithoutProperties);



	var _createBreakpoints = interopRequireDefault(createBreakpoints_1);

	var _createMixins = interopRequireDefault(createMixins_1);

	var _createPalette = interopRequireDefault(createPalette_1);

	var _createTypography = interopRequireDefault(createTypography_1);

	var _shadows = interopRequireDefault(shadows_1);

	var _shape = interopRequireDefault(shape_1);

	var _createSpacing = interopRequireDefault(createSpacing_1);

	var _transitions = interopRequireDefault(transitions$1);

	var _zIndex = interopRequireDefault(zIndex_1);

	function createMuiTheme() {
	  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	  var _options$breakpoints = options.breakpoints,
	      breakpointsInput = _options$breakpoints === void 0 ? {} : _options$breakpoints,
	      _options$mixins = options.mixins,
	      mixinsInput = _options$mixins === void 0 ? {} : _options$mixins,
	      _options$palette = options.palette,
	      paletteInput = _options$palette === void 0 ? {} : _options$palette,
	      spacingInput = options.spacing,
	      _options$typography = options.typography,
	      typographyInput = _options$typography === void 0 ? {} : _options$typography,
	      other = (0, _objectWithoutProperties2.default)(options, ["breakpoints", "mixins", "palette", "spacing", "typography"]);
	  var palette = (0, _createPalette.default)(paletteInput);
	  var breakpoints = (0, _createBreakpoints.default)(breakpointsInput);
	  var spacing = (0, _createSpacing.default)(spacingInput);
	  var muiTheme = (0, esm.deepmerge)({
	    breakpoints: breakpoints,
	    direction: 'ltr',
	    mixins: (0, _createMixins.default)(breakpoints, spacing, mixinsInput),
	    overrides: {},
	    // Inject custom styles
	    palette: palette,
	    props: {},
	    // Provide default props
	    shadows: _shadows.default,
	    typography: (0, _createTypography.default)(palette, typographyInput),
	    spacing: spacing,
	    shape: _shape.default,
	    transitions: _transitions.default,
	    zIndex: _zIndex.default
	  }, other);

	  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    args[_key - 1] = arguments[_key];
	  }

	  muiTheme = args.reduce(function (acc, argument) {
	    return (0, esm.deepmerge)(acc, argument);
	  }, muiTheme);

	  if (process.env.NODE_ENV !== 'production') {
	    var pseudoClasses = ['checked', 'disabled', 'error', 'focused', 'focusVisible', 'required', 'expanded', 'selected'];

	    var traverse = function traverse(node, parentKey) {
	      var depth = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
	      var key; // eslint-disable-next-line guard-for-in, no-restricted-syntax

	      for (key in node) {
	        var child = node[key];

	        if (depth === 1) {
	          if (key.indexOf('Mui') === 0 && child) {
	            traverse(child, key, depth + 1);
	          }
	        } else if (pseudoClasses.indexOf(key) !== -1 && Object.keys(child).length > 0) {
	          if (process.env.NODE_ENV !== 'production') {
	            console.error(["Material-UI: The `".concat(parentKey, "` component increases ") + "the CSS specificity of the `".concat(key, "` internal state."), 'You can not override it like this: ', JSON.stringify(node, null, 2), '', 'Instead, you need to use the $ruleName syntax:', JSON.stringify({
	              root: (0, _defineProperty2.default)({}, "&$".concat(key), child)
	            }, null, 2), '', 'https://material-ui.com/r/pseudo-classes-guide'].join('\n'));
	          } // Remove the style to prevent global conflicts.


	          node[key] = {};
	        }
	      }
	    };

	    traverse(muiTheme.overrides);
	  }

	  return muiTheme;
	}

	var _default = createMuiTheme;
	exports.default = _default;
	});

	unwrapExports(createMuiTheme_1);

	var defaultTheme_1 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _createMuiTheme = interopRequireDefault(createMuiTheme_1);

	var defaultTheme = (0, _createMuiTheme.default)();
	var _default = defaultTheme;
	exports.default = _default;
	});

	unwrapExports(defaultTheme_1);

	var withStyles_1 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _extends2 = interopRequireDefault(_extends_1);



	var _defaultTheme = interopRequireDefault(defaultTheme_1);

	function withStyles(stylesOrCreator, options) {
	  return (0, esm$2.withStyles)(stylesOrCreator, (0, _extends2.default)({
	    defaultTheme: _defaultTheme.default
	  }, options));
	}

	var _default = withStyles;
	exports.default = _default;
	});

	var withStyles$2 = unwrapExports(withStyles_1);

	var moment$1 = createCommonjsModule(function (module, exports) {
	(function (global, factory) {
	     module.exports = factory() ;
	}(commonjsGlobal, (function () {
	    var hookCallback;

	    function hooks() {
	        return hookCallback.apply(null, arguments);
	    }

	    // This is done to register the method called with moment()
	    // without creating circular dependencies.
	    function setHookCallback(callback) {
	        hookCallback = callback;
	    }

	    function isArray(input) {
	        return (
	            input instanceof Array ||
	            Object.prototype.toString.call(input) === '[object Array]'
	        );
	    }

	    function isObject(input) {
	        // IE8 will treat undefined and null as object if it wasn't for
	        // input != null
	        return (
	            input != null &&
	            Object.prototype.toString.call(input) === '[object Object]'
	        );
	    }

	    function hasOwnProp(a, b) {
	        return Object.prototype.hasOwnProperty.call(a, b);
	    }

	    function isObjectEmpty(obj) {
	        if (Object.getOwnPropertyNames) {
	            return Object.getOwnPropertyNames(obj).length === 0;
	        } else {
	            var k;
	            for (k in obj) {
	                if (hasOwnProp(obj, k)) {
	                    return false;
	                }
	            }
	            return true;
	        }
	    }

	    function isUndefined(input) {
	        return input === void 0;
	    }

	    function isNumber(input) {
	        return (
	            typeof input === 'number' ||
	            Object.prototype.toString.call(input) === '[object Number]'
	        );
	    }

	    function isDate(input) {
	        return (
	            input instanceof Date ||
	            Object.prototype.toString.call(input) === '[object Date]'
	        );
	    }

	    function map(arr, fn) {
	        var res = [],
	            i;
	        for (i = 0; i < arr.length; ++i) {
	            res.push(fn(arr[i], i));
	        }
	        return res;
	    }

	    function extend(a, b) {
	        for (var i in b) {
	            if (hasOwnProp(b, i)) {
	                a[i] = b[i];
	            }
	        }

	        if (hasOwnProp(b, 'toString')) {
	            a.toString = b.toString;
	        }

	        if (hasOwnProp(b, 'valueOf')) {
	            a.valueOf = b.valueOf;
	        }

	        return a;
	    }

	    function createUTC(input, format, locale, strict) {
	        return createLocalOrUTC(input, format, locale, strict, true).utc();
	    }

	    function defaultParsingFlags() {
	        // We need to deep clone this object.
	        return {
	            empty: false,
	            unusedTokens: [],
	            unusedInput: [],
	            overflow: -2,
	            charsLeftOver: 0,
	            nullInput: false,
	            invalidEra: null,
	            invalidMonth: null,
	            invalidFormat: false,
	            userInvalidated: false,
	            iso: false,
	            parsedDateParts: [],
	            era: null,
	            meridiem: null,
	            rfc2822: false,
	            weekdayMismatch: false,
	        };
	    }

	    function getParsingFlags(m) {
	        if (m._pf == null) {
	            m._pf = defaultParsingFlags();
	        }
	        return m._pf;
	    }

	    var some;
	    if (Array.prototype.some) {
	        some = Array.prototype.some;
	    } else {
	        some = function (fun) {
	            var t = Object(this),
	                len = t.length >>> 0,
	                i;

	            for (i = 0; i < len; i++) {
	                if (i in t && fun.call(this, t[i], i, t)) {
	                    return true;
	                }
	            }

	            return false;
	        };
	    }

	    function isValid(m) {
	        if (m._isValid == null) {
	            var flags = getParsingFlags(m),
	                parsedParts = some.call(flags.parsedDateParts, function (i) {
	                    return i != null;
	                }),
	                isNowValid =
	                    !isNaN(m._d.getTime()) &&
	                    flags.overflow < 0 &&
	                    !flags.empty &&
	                    !flags.invalidEra &&
	                    !flags.invalidMonth &&
	                    !flags.invalidWeekday &&
	                    !flags.weekdayMismatch &&
	                    !flags.nullInput &&
	                    !flags.invalidFormat &&
	                    !flags.userInvalidated &&
	                    (!flags.meridiem || (flags.meridiem && parsedParts));

	            if (m._strict) {
	                isNowValid =
	                    isNowValid &&
	                    flags.charsLeftOver === 0 &&
	                    flags.unusedTokens.length === 0 &&
	                    flags.bigHour === undefined;
	            }

	            if (Object.isFrozen == null || !Object.isFrozen(m)) {
	                m._isValid = isNowValid;
	            } else {
	                return isNowValid;
	            }
	        }
	        return m._isValid;
	    }

	    function createInvalid(flags) {
	        var m = createUTC(NaN);
	        if (flags != null) {
	            extend(getParsingFlags(m), flags);
	        } else {
	            getParsingFlags(m).userInvalidated = true;
	        }

	        return m;
	    }

	    // Plugins that add properties should also add the key here (null value),
	    // so we can properly clone ourselves.
	    var momentProperties = (hooks.momentProperties = []),
	        updateInProgress = false;

	    function copyConfig(to, from) {
	        var i, prop, val;

	        if (!isUndefined(from._isAMomentObject)) {
	            to._isAMomentObject = from._isAMomentObject;
	        }
	        if (!isUndefined(from._i)) {
	            to._i = from._i;
	        }
	        if (!isUndefined(from._f)) {
	            to._f = from._f;
	        }
	        if (!isUndefined(from._l)) {
	            to._l = from._l;
	        }
	        if (!isUndefined(from._strict)) {
	            to._strict = from._strict;
	        }
	        if (!isUndefined(from._tzm)) {
	            to._tzm = from._tzm;
	        }
	        if (!isUndefined(from._isUTC)) {
	            to._isUTC = from._isUTC;
	        }
	        if (!isUndefined(from._offset)) {
	            to._offset = from._offset;
	        }
	        if (!isUndefined(from._pf)) {
	            to._pf = getParsingFlags(from);
	        }
	        if (!isUndefined(from._locale)) {
	            to._locale = from._locale;
	        }

	        if (momentProperties.length > 0) {
	            for (i = 0; i < momentProperties.length; i++) {
	                prop = momentProperties[i];
	                val = from[prop];
	                if (!isUndefined(val)) {
	                    to[prop] = val;
	                }
	            }
	        }

	        return to;
	    }

	    // Moment prototype object
	    function Moment(config) {
	        copyConfig(this, config);
	        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
	        if (!this.isValid()) {
	            this._d = new Date(NaN);
	        }
	        // Prevent infinite loop in case updateOffset creates new moment
	        // objects.
	        if (updateInProgress === false) {
	            updateInProgress = true;
	            hooks.updateOffset(this);
	            updateInProgress = false;
	        }
	    }

	    function isMoment(obj) {
	        return (
	            obj instanceof Moment || (obj != null && obj._isAMomentObject != null)
	        );
	    }

	    function warn(msg) {
	        if (
	            hooks.suppressDeprecationWarnings === false &&
	            typeof console !== 'undefined' &&
	            console.warn
	        ) {
	            console.warn('Deprecation warning: ' + msg);
	        }
	    }

	    function deprecate(msg, fn) {
	        var firstTime = true;

	        return extend(function () {
	            if (hooks.deprecationHandler != null) {
	                hooks.deprecationHandler(null, msg);
	            }
	            if (firstTime) {
	                var args = [],
	                    arg,
	                    i,
	                    key;
	                for (i = 0; i < arguments.length; i++) {
	                    arg = '';
	                    if (typeof arguments[i] === 'object') {
	                        arg += '\n[' + i + '] ';
	                        for (key in arguments[0]) {
	                            if (hasOwnProp(arguments[0], key)) {
	                                arg += key + ': ' + arguments[0][key] + ', ';
	                            }
	                        }
	                        arg = arg.slice(0, -2); // Remove trailing comma and space
	                    } else {
	                        arg = arguments[i];
	                    }
	                    args.push(arg);
	                }
	                warn(
	                    msg +
	                        '\nArguments: ' +
	                        Array.prototype.slice.call(args).join('') +
	                        '\n' +
	                        new Error().stack
	                );
	                firstTime = false;
	            }
	            return fn.apply(this, arguments);
	        }, fn);
	    }

	    var deprecations = {};

	    function deprecateSimple(name, msg) {
	        if (hooks.deprecationHandler != null) {
	            hooks.deprecationHandler(name, msg);
	        }
	        if (!deprecations[name]) {
	            warn(msg);
	            deprecations[name] = true;
	        }
	    }

	    hooks.suppressDeprecationWarnings = false;
	    hooks.deprecationHandler = null;

	    function isFunction(input) {
	        return (
	            (typeof Function !== 'undefined' && input instanceof Function) ||
	            Object.prototype.toString.call(input) === '[object Function]'
	        );
	    }

	    function set(config) {
	        var prop, i;
	        for (i in config) {
	            if (hasOwnProp(config, i)) {
	                prop = config[i];
	                if (isFunction(prop)) {
	                    this[i] = prop;
	                } else {
	                    this['_' + i] = prop;
	                }
	            }
	        }
	        this._config = config;
	        // Lenient ordinal parsing accepts just a number in addition to
	        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
	        // TODO: Remove "ordinalParse" fallback in next major release.
	        this._dayOfMonthOrdinalParseLenient = new RegExp(
	            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
	                '|' +
	                /\d{1,2}/.source
	        );
	    }

	    function mergeConfigs(parentConfig, childConfig) {
	        var res = extend({}, parentConfig),
	            prop;
	        for (prop in childConfig) {
	            if (hasOwnProp(childConfig, prop)) {
	                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
	                    res[prop] = {};
	                    extend(res[prop], parentConfig[prop]);
	                    extend(res[prop], childConfig[prop]);
	                } else if (childConfig[prop] != null) {
	                    res[prop] = childConfig[prop];
	                } else {
	                    delete res[prop];
	                }
	            }
	        }
	        for (prop in parentConfig) {
	            if (
	                hasOwnProp(parentConfig, prop) &&
	                !hasOwnProp(childConfig, prop) &&
	                isObject(parentConfig[prop])
	            ) {
	                // make sure changes to properties don't modify parent config
	                res[prop] = extend({}, res[prop]);
	            }
	        }
	        return res;
	    }

	    function Locale(config) {
	        if (config != null) {
	            this.set(config);
	        }
	    }

	    var keys;

	    if (Object.keys) {
	        keys = Object.keys;
	    } else {
	        keys = function (obj) {
	            var i,
	                res = [];
	            for (i in obj) {
	                if (hasOwnProp(obj, i)) {
	                    res.push(i);
	                }
	            }
	            return res;
	        };
	    }

	    var defaultCalendar = {
	        sameDay: '[Today at] LT',
	        nextDay: '[Tomorrow at] LT',
	        nextWeek: 'dddd [at] LT',
	        lastDay: '[Yesterday at] LT',
	        lastWeek: '[Last] dddd [at] LT',
	        sameElse: 'L',
	    };

	    function calendar(key, mom, now) {
	        var output = this._calendar[key] || this._calendar['sameElse'];
	        return isFunction(output) ? output.call(mom, now) : output;
	    }

	    function zeroFill(number, targetLength, forceSign) {
	        var absNumber = '' + Math.abs(number),
	            zerosToFill = targetLength - absNumber.length,
	            sign = number >= 0;
	        return (
	            (sign ? (forceSign ? '+' : '') : '-') +
	            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) +
	            absNumber
	        );
	    }

	    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
	        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
	        formatFunctions = {},
	        formatTokenFunctions = {};

	    // token:    'M'
	    // padded:   ['MM', 2]
	    // ordinal:  'Mo'
	    // callback: function () { this.month() + 1 }
	    function addFormatToken(token, padded, ordinal, callback) {
	        var func = callback;
	        if (typeof callback === 'string') {
	            func = function () {
	                return this[callback]();
	            };
	        }
	        if (token) {
	            formatTokenFunctions[token] = func;
	        }
	        if (padded) {
	            formatTokenFunctions[padded[0]] = function () {
	                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
	            };
	        }
	        if (ordinal) {
	            formatTokenFunctions[ordinal] = function () {
	                return this.localeData().ordinal(
	                    func.apply(this, arguments),
	                    token
	                );
	            };
	        }
	    }

	    function removeFormattingTokens(input) {
	        if (input.match(/\[[\s\S]/)) {
	            return input.replace(/^\[|\]$/g, '');
	        }
	        return input.replace(/\\/g, '');
	    }

	    function makeFormatFunction(format) {
	        var array = format.match(formattingTokens),
	            i,
	            length;

	        for (i = 0, length = array.length; i < length; i++) {
	            if (formatTokenFunctions[array[i]]) {
	                array[i] = formatTokenFunctions[array[i]];
	            } else {
	                array[i] = removeFormattingTokens(array[i]);
	            }
	        }

	        return function (mom) {
	            var output = '',
	                i;
	            for (i = 0; i < length; i++) {
	                output += isFunction(array[i])
	                    ? array[i].call(mom, format)
	                    : array[i];
	            }
	            return output;
	        };
	    }

	    // format date using native date object
	    function formatMoment(m, format) {
	        if (!m.isValid()) {
	            return m.localeData().invalidDate();
	        }

	        format = expandFormat(format, m.localeData());
	        formatFunctions[format] =
	            formatFunctions[format] || makeFormatFunction(format);

	        return formatFunctions[format](m);
	    }

	    function expandFormat(format, locale) {
	        var i = 5;

	        function replaceLongDateFormatTokens(input) {
	            return locale.longDateFormat(input) || input;
	        }

	        localFormattingTokens.lastIndex = 0;
	        while (i >= 0 && localFormattingTokens.test(format)) {
	            format = format.replace(
	                localFormattingTokens,
	                replaceLongDateFormatTokens
	            );
	            localFormattingTokens.lastIndex = 0;
	            i -= 1;
	        }

	        return format;
	    }

	    var defaultLongDateFormat = {
	        LTS: 'h:mm:ss A',
	        LT: 'h:mm A',
	        L: 'MM/DD/YYYY',
	        LL: 'MMMM D, YYYY',
	        LLL: 'MMMM D, YYYY h:mm A',
	        LLLL: 'dddd, MMMM D, YYYY h:mm A',
	    };

	    function longDateFormat(key) {
	        var format = this._longDateFormat[key],
	            formatUpper = this._longDateFormat[key.toUpperCase()];

	        if (format || !formatUpper) {
	            return format;
	        }

	        this._longDateFormat[key] = formatUpper
	            .match(formattingTokens)
	            .map(function (tok) {
	                if (
	                    tok === 'MMMM' ||
	                    tok === 'MM' ||
	                    tok === 'DD' ||
	                    tok === 'dddd'
	                ) {
	                    return tok.slice(1);
	                }
	                return tok;
	            })
	            .join('');

	        return this._longDateFormat[key];
	    }

	    var defaultInvalidDate = 'Invalid date';

	    function invalidDate() {
	        return this._invalidDate;
	    }

	    var defaultOrdinal = '%d',
	        defaultDayOfMonthOrdinalParse = /\d{1,2}/;

	    function ordinal(number) {
	        return this._ordinal.replace('%d', number);
	    }

	    var defaultRelativeTime = {
	        future: 'in %s',
	        past: '%s ago',
	        s: 'a few seconds',
	        ss: '%d seconds',
	        m: 'a minute',
	        mm: '%d minutes',
	        h: 'an hour',
	        hh: '%d hours',
	        d: 'a day',
	        dd: '%d days',
	        w: 'a week',
	        ww: '%d weeks',
	        M: 'a month',
	        MM: '%d months',
	        y: 'a year',
	        yy: '%d years',
	    };

	    function relativeTime(number, withoutSuffix, string, isFuture) {
	        var output = this._relativeTime[string];
	        return isFunction(output)
	            ? output(number, withoutSuffix, string, isFuture)
	            : output.replace(/%d/i, number);
	    }

	    function pastFuture(diff, output) {
	        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
	        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
	    }

	    var aliases = {};

	    function addUnitAlias(unit, shorthand) {
	        var lowerCase = unit.toLowerCase();
	        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
	    }

	    function normalizeUnits(units) {
	        return typeof units === 'string'
	            ? aliases[units] || aliases[units.toLowerCase()]
	            : undefined;
	    }

	    function normalizeObjectUnits(inputObject) {
	        var normalizedInput = {},
	            normalizedProp,
	            prop;

	        for (prop in inputObject) {
	            if (hasOwnProp(inputObject, prop)) {
	                normalizedProp = normalizeUnits(prop);
	                if (normalizedProp) {
	                    normalizedInput[normalizedProp] = inputObject[prop];
	                }
	            }
	        }

	        return normalizedInput;
	    }

	    var priorities = {};

	    function addUnitPriority(unit, priority) {
	        priorities[unit] = priority;
	    }

	    function getPrioritizedUnits(unitsObj) {
	        var units = [],
	            u;
	        for (u in unitsObj) {
	            if (hasOwnProp(unitsObj, u)) {
	                units.push({ unit: u, priority: priorities[u] });
	            }
	        }
	        units.sort(function (a, b) {
	            return a.priority - b.priority;
	        });
	        return units;
	    }

	    function isLeapYear(year) {
	        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
	    }

	    function absFloor(number) {
	        if (number < 0) {
	            // -0 -> 0
	            return Math.ceil(number) || 0;
	        } else {
	            return Math.floor(number);
	        }
	    }

	    function toInt(argumentForCoercion) {
	        var coercedNumber = +argumentForCoercion,
	            value = 0;

	        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
	            value = absFloor(coercedNumber);
	        }

	        return value;
	    }

	    function makeGetSet(unit, keepTime) {
	        return function (value) {
	            if (value != null) {
	                set$1(this, unit, value);
	                hooks.updateOffset(this, keepTime);
	                return this;
	            } else {
	                return get(this, unit);
	            }
	        };
	    }

	    function get(mom, unit) {
	        return mom.isValid()
	            ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]()
	            : NaN;
	    }

	    function set$1(mom, unit, value) {
	        if (mom.isValid() && !isNaN(value)) {
	            if (
	                unit === 'FullYear' &&
	                isLeapYear(mom.year()) &&
	                mom.month() === 1 &&
	                mom.date() === 29
	            ) {
	                value = toInt(value);
	                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](
	                    value,
	                    mom.month(),
	                    daysInMonth(value, mom.month())
	                );
	            } else {
	                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
	            }
	        }
	    }

	    // MOMENTS

	    function stringGet(units) {
	        units = normalizeUnits(units);
	        if (isFunction(this[units])) {
	            return this[units]();
	        }
	        return this;
	    }

	    function stringSet(units, value) {
	        if (typeof units === 'object') {
	            units = normalizeObjectUnits(units);
	            var prioritized = getPrioritizedUnits(units),
	                i;
	            for (i = 0; i < prioritized.length; i++) {
	                this[prioritized[i].unit](units[prioritized[i].unit]);
	            }
	        } else {
	            units = normalizeUnits(units);
	            if (isFunction(this[units])) {
	                return this[units](value);
	            }
	        }
	        return this;
	    }

	    var match1 = /\d/, //       0 - 9
	        match2 = /\d\d/, //      00 - 99
	        match3 = /\d{3}/, //     000 - 999
	        match4 = /\d{4}/, //    0000 - 9999
	        match6 = /[+-]?\d{6}/, // -999999 - 999999
	        match1to2 = /\d\d?/, //       0 - 99
	        match3to4 = /\d\d\d\d?/, //     999 - 9999
	        match5to6 = /\d\d\d\d\d\d?/, //   99999 - 999999
	        match1to3 = /\d{1,3}/, //       0 - 999
	        match1to4 = /\d{1,4}/, //       0 - 9999
	        match1to6 = /[+-]?\d{1,6}/, // -999999 - 999999
	        matchUnsigned = /\d+/, //       0 - inf
	        matchSigned = /[+-]?\d+/, //    -inf - inf
	        matchOffset = /Z|[+-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
	        matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, // +00 -00 +00:00 -00:00 +0000 -0000 or Z
	        matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
	        // any word (or two) characters or numbers including two/three word month in arabic.
	        // includes scottish gaelic two word and hyphenated months
	        matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,
	        regexes;

	    regexes = {};

	    function addRegexToken(token, regex, strictRegex) {
	        regexes[token] = isFunction(regex)
	            ? regex
	            : function (isStrict, localeData) {
	                  return isStrict && strictRegex ? strictRegex : regex;
	              };
	    }

	    function getParseRegexForToken(token, config) {
	        if (!hasOwnProp(regexes, token)) {
	            return new RegExp(unescapeFormat(token));
	        }

	        return regexes[token](config._strict, config._locale);
	    }

	    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
	    function unescapeFormat(s) {
	        return regexEscape(
	            s
	                .replace('\\', '')
	                .replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (
	                    matched,
	                    p1,
	                    p2,
	                    p3,
	                    p4
	                ) {
	                    return p1 || p2 || p3 || p4;
	                })
	        );
	    }

	    function regexEscape(s) {
	        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
	    }

	    var tokens = {};

	    function addParseToken(token, callback) {
	        var i,
	            func = callback;
	        if (typeof token === 'string') {
	            token = [token];
	        }
	        if (isNumber(callback)) {
	            func = function (input, array) {
	                array[callback] = toInt(input);
	            };
	        }
	        for (i = 0; i < token.length; i++) {
	            tokens[token[i]] = func;
	        }
	    }

	    function addWeekParseToken(token, callback) {
	        addParseToken(token, function (input, array, config, token) {
	            config._w = config._w || {};
	            callback(input, config._w, config, token);
	        });
	    }

	    function addTimeToArrayFromToken(token, input, config) {
	        if (input != null && hasOwnProp(tokens, token)) {
	            tokens[token](input, config._a, config, token);
	        }
	    }

	    var YEAR = 0,
	        MONTH = 1,
	        DATE = 2,
	        HOUR = 3,
	        MINUTE = 4,
	        SECOND = 5,
	        MILLISECOND = 6,
	        WEEK = 7,
	        WEEKDAY = 8;

	    function mod(n, x) {
	        return ((n % x) + x) % x;
	    }

	    var indexOf;

	    if (Array.prototype.indexOf) {
	        indexOf = Array.prototype.indexOf;
	    } else {
	        indexOf = function (o) {
	            // I know
	            var i;
	            for (i = 0; i < this.length; ++i) {
	                if (this[i] === o) {
	                    return i;
	                }
	            }
	            return -1;
	        };
	    }

	    function daysInMonth(year, month) {
	        if (isNaN(year) || isNaN(month)) {
	            return NaN;
	        }
	        var modMonth = mod(month, 12);
	        year += (month - modMonth) / 12;
	        return modMonth === 1
	            ? isLeapYear(year)
	                ? 29
	                : 28
	            : 31 - ((modMonth % 7) % 2);
	    }

	    // FORMATTING

	    addFormatToken('M', ['MM', 2], 'Mo', function () {
	        return this.month() + 1;
	    });

	    addFormatToken('MMM', 0, 0, function (format) {
	        return this.localeData().monthsShort(this, format);
	    });

	    addFormatToken('MMMM', 0, 0, function (format) {
	        return this.localeData().months(this, format);
	    });

	    // ALIASES

	    addUnitAlias('month', 'M');

	    // PRIORITY

	    addUnitPriority('month', 8);

	    // PARSING

	    addRegexToken('M', match1to2);
	    addRegexToken('MM', match1to2, match2);
	    addRegexToken('MMM', function (isStrict, locale) {
	        return locale.monthsShortRegex(isStrict);
	    });
	    addRegexToken('MMMM', function (isStrict, locale) {
	        return locale.monthsRegex(isStrict);
	    });

	    addParseToken(['M', 'MM'], function (input, array) {
	        array[MONTH] = toInt(input) - 1;
	    });

	    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
	        var month = config._locale.monthsParse(input, token, config._strict);
	        // if we didn't find a month name, mark the date as invalid.
	        if (month != null) {
	            array[MONTH] = month;
	        } else {
	            getParsingFlags(config).invalidMonth = input;
	        }
	    });

	    // LOCALES

	    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split(
	            '_'
	        ),
	        defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split(
	            '_'
	        ),
	        MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
	        defaultMonthsShortRegex = matchWord,
	        defaultMonthsRegex = matchWord;

	    function localeMonths(m, format) {
	        if (!m) {
	            return isArray(this._months)
	                ? this._months
	                : this._months['standalone'];
	        }
	        return isArray(this._months)
	            ? this._months[m.month()]
	            : this._months[
	                  (this._months.isFormat || MONTHS_IN_FORMAT).test(format)
	                      ? 'format'
	                      : 'standalone'
	              ][m.month()];
	    }

	    function localeMonthsShort(m, format) {
	        if (!m) {
	            return isArray(this._monthsShort)
	                ? this._monthsShort
	                : this._monthsShort['standalone'];
	        }
	        return isArray(this._monthsShort)
	            ? this._monthsShort[m.month()]
	            : this._monthsShort[
	                  MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'
	              ][m.month()];
	    }

	    function handleStrictParse(monthName, format, strict) {
	        var i,
	            ii,
	            mom,
	            llc = monthName.toLocaleLowerCase();
	        if (!this._monthsParse) {
	            // this is not used
	            this._monthsParse = [];
	            this._longMonthsParse = [];
	            this._shortMonthsParse = [];
	            for (i = 0; i < 12; ++i) {
	                mom = createUTC([2000, i]);
	                this._shortMonthsParse[i] = this.monthsShort(
	                    mom,
	                    ''
	                ).toLocaleLowerCase();
	                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
	            }
	        }

	        if (strict) {
	            if (format === 'MMM') {
	                ii = indexOf.call(this._shortMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._longMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        } else {
	            if (format === 'MMM') {
	                ii = indexOf.call(this._shortMonthsParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._longMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._longMonthsParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._shortMonthsParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        }
	    }

	    function localeMonthsParse(monthName, format, strict) {
	        var i, mom, regex;

	        if (this._monthsParseExact) {
	            return handleStrictParse.call(this, monthName, format, strict);
	        }

	        if (!this._monthsParse) {
	            this._monthsParse = [];
	            this._longMonthsParse = [];
	            this._shortMonthsParse = [];
	        }

	        // TODO: add sorting
	        // Sorting makes sure if one month (or abbr) is a prefix of another
	        // see sorting in computeMonthsParse
	        for (i = 0; i < 12; i++) {
	            // make the regex if we don't have it already
	            mom = createUTC([2000, i]);
	            if (strict && !this._longMonthsParse[i]) {
	                this._longMonthsParse[i] = new RegExp(
	                    '^' + this.months(mom, '').replace('.', '') + '$',
	                    'i'
	                );
	                this._shortMonthsParse[i] = new RegExp(
	                    '^' + this.monthsShort(mom, '').replace('.', '') + '$',
	                    'i'
	                );
	            }
	            if (!strict && !this._monthsParse[i]) {
	                regex =
	                    '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
	                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
	            }
	            // test the regex
	            if (
	                strict &&
	                format === 'MMMM' &&
	                this._longMonthsParse[i].test(monthName)
	            ) {
	                return i;
	            } else if (
	                strict &&
	                format === 'MMM' &&
	                this._shortMonthsParse[i].test(monthName)
	            ) {
	                return i;
	            } else if (!strict && this._monthsParse[i].test(monthName)) {
	                return i;
	            }
	        }
	    }

	    // MOMENTS

	    function setMonth(mom, value) {
	        var dayOfMonth;

	        if (!mom.isValid()) {
	            // No op
	            return mom;
	        }

	        if (typeof value === 'string') {
	            if (/^\d+$/.test(value)) {
	                value = toInt(value);
	            } else {
	                value = mom.localeData().monthsParse(value);
	                // TODO: Another silent failure?
	                if (!isNumber(value)) {
	                    return mom;
	                }
	            }
	        }

	        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
	        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
	        return mom;
	    }

	    function getSetMonth(value) {
	        if (value != null) {
	            setMonth(this, value);
	            hooks.updateOffset(this, true);
	            return this;
	        } else {
	            return get(this, 'Month');
	        }
	    }

	    function getDaysInMonth() {
	        return daysInMonth(this.year(), this.month());
	    }

	    function monthsShortRegex(isStrict) {
	        if (this._monthsParseExact) {
	            if (!hasOwnProp(this, '_monthsRegex')) {
	                computeMonthsParse.call(this);
	            }
	            if (isStrict) {
	                return this._monthsShortStrictRegex;
	            } else {
	                return this._monthsShortRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_monthsShortRegex')) {
	                this._monthsShortRegex = defaultMonthsShortRegex;
	            }
	            return this._monthsShortStrictRegex && isStrict
	                ? this._monthsShortStrictRegex
	                : this._monthsShortRegex;
	        }
	    }

	    function monthsRegex(isStrict) {
	        if (this._monthsParseExact) {
	            if (!hasOwnProp(this, '_monthsRegex')) {
	                computeMonthsParse.call(this);
	            }
	            if (isStrict) {
	                return this._monthsStrictRegex;
	            } else {
	                return this._monthsRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_monthsRegex')) {
	                this._monthsRegex = defaultMonthsRegex;
	            }
	            return this._monthsStrictRegex && isStrict
	                ? this._monthsStrictRegex
	                : this._monthsRegex;
	        }
	    }

	    function computeMonthsParse() {
	        function cmpLenRev(a, b) {
	            return b.length - a.length;
	        }

	        var shortPieces = [],
	            longPieces = [],
	            mixedPieces = [],
	            i,
	            mom;
	        for (i = 0; i < 12; i++) {
	            // make the regex if we don't have it already
	            mom = createUTC([2000, i]);
	            shortPieces.push(this.monthsShort(mom, ''));
	            longPieces.push(this.months(mom, ''));
	            mixedPieces.push(this.months(mom, ''));
	            mixedPieces.push(this.monthsShort(mom, ''));
	        }
	        // Sorting makes sure if one month (or abbr) is a prefix of another it
	        // will match the longer piece.
	        shortPieces.sort(cmpLenRev);
	        longPieces.sort(cmpLenRev);
	        mixedPieces.sort(cmpLenRev);
	        for (i = 0; i < 12; i++) {
	            shortPieces[i] = regexEscape(shortPieces[i]);
	            longPieces[i] = regexEscape(longPieces[i]);
	        }
	        for (i = 0; i < 24; i++) {
	            mixedPieces[i] = regexEscape(mixedPieces[i]);
	        }

	        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	        this._monthsShortRegex = this._monthsRegex;
	        this._monthsStrictRegex = new RegExp(
	            '^(' + longPieces.join('|') + ')',
	            'i'
	        );
	        this._monthsShortStrictRegex = new RegExp(
	            '^(' + shortPieces.join('|') + ')',
	            'i'
	        );
	    }

	    // FORMATTING

	    addFormatToken('Y', 0, 0, function () {
	        var y = this.year();
	        return y <= 9999 ? zeroFill(y, 4) : '+' + y;
	    });

	    addFormatToken(0, ['YY', 2], 0, function () {
	        return this.year() % 100;
	    });

	    addFormatToken(0, ['YYYY', 4], 0, 'year');
	    addFormatToken(0, ['YYYYY', 5], 0, 'year');
	    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

	    // ALIASES

	    addUnitAlias('year', 'y');

	    // PRIORITIES

	    addUnitPriority('year', 1);

	    // PARSING

	    addRegexToken('Y', matchSigned);
	    addRegexToken('YY', match1to2, match2);
	    addRegexToken('YYYY', match1to4, match4);
	    addRegexToken('YYYYY', match1to6, match6);
	    addRegexToken('YYYYYY', match1to6, match6);

	    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
	    addParseToken('YYYY', function (input, array) {
	        array[YEAR] =
	            input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
	    });
	    addParseToken('YY', function (input, array) {
	        array[YEAR] = hooks.parseTwoDigitYear(input);
	    });
	    addParseToken('Y', function (input, array) {
	        array[YEAR] = parseInt(input, 10);
	    });

	    // HELPERS

	    function daysInYear(year) {
	        return isLeapYear(year) ? 366 : 365;
	    }

	    // HOOKS

	    hooks.parseTwoDigitYear = function (input) {
	        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
	    };

	    // MOMENTS

	    var getSetYear = makeGetSet('FullYear', true);

	    function getIsLeapYear() {
	        return isLeapYear(this.year());
	    }

	    function createDate(y, m, d, h, M, s, ms) {
	        // can't just apply() to create a date:
	        // https://stackoverflow.com/q/181348
	        var date;
	        // the date constructor remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0) {
	            // preserve leap years using a full 400 year cycle, then reset
	            date = new Date(y + 400, m, d, h, M, s, ms);
	            if (isFinite(date.getFullYear())) {
	                date.setFullYear(y);
	            }
	        } else {
	            date = new Date(y, m, d, h, M, s, ms);
	        }

	        return date;
	    }

	    function createUTCDate(y) {
	        var date, args;
	        // the Date.UTC function remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0) {
	            args = Array.prototype.slice.call(arguments);
	            // preserve leap years using a full 400 year cycle, then reset
	            args[0] = y + 400;
	            date = new Date(Date.UTC.apply(null, args));
	            if (isFinite(date.getUTCFullYear())) {
	                date.setUTCFullYear(y);
	            }
	        } else {
	            date = new Date(Date.UTC.apply(null, arguments));
	        }

	        return date;
	    }

	    // start-of-first-week - start-of-year
	    function firstWeekOffset(year, dow, doy) {
	        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
	            fwd = 7 + dow - doy,
	            // first-week day local weekday -- which local weekday is fwd
	            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

	        return -fwdlw + fwd - 1;
	    }

	    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
	    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
	        var localWeekday = (7 + weekday - dow) % 7,
	            weekOffset = firstWeekOffset(year, dow, doy),
	            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
	            resYear,
	            resDayOfYear;

	        if (dayOfYear <= 0) {
	            resYear = year - 1;
	            resDayOfYear = daysInYear(resYear) + dayOfYear;
	        } else if (dayOfYear > daysInYear(year)) {
	            resYear = year + 1;
	            resDayOfYear = dayOfYear - daysInYear(year);
	        } else {
	            resYear = year;
	            resDayOfYear = dayOfYear;
	        }

	        return {
	            year: resYear,
	            dayOfYear: resDayOfYear,
	        };
	    }

	    function weekOfYear(mom, dow, doy) {
	        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
	            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
	            resWeek,
	            resYear;

	        if (week < 1) {
	            resYear = mom.year() - 1;
	            resWeek = week + weeksInYear(resYear, dow, doy);
	        } else if (week > weeksInYear(mom.year(), dow, doy)) {
	            resWeek = week - weeksInYear(mom.year(), dow, doy);
	            resYear = mom.year() + 1;
	        } else {
	            resYear = mom.year();
	            resWeek = week;
	        }

	        return {
	            week: resWeek,
	            year: resYear,
	        };
	    }

	    function weeksInYear(year, dow, doy) {
	        var weekOffset = firstWeekOffset(year, dow, doy),
	            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
	        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
	    }

	    // FORMATTING

	    addFormatToken('w', ['ww', 2], 'wo', 'week');
	    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

	    // ALIASES

	    addUnitAlias('week', 'w');
	    addUnitAlias('isoWeek', 'W');

	    // PRIORITIES

	    addUnitPriority('week', 5);
	    addUnitPriority('isoWeek', 5);

	    // PARSING

	    addRegexToken('w', match1to2);
	    addRegexToken('ww', match1to2, match2);
	    addRegexToken('W', match1to2);
	    addRegexToken('WW', match1to2, match2);

	    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (
	        input,
	        week,
	        config,
	        token
	    ) {
	        week[token.substr(0, 1)] = toInt(input);
	    });

	    // HELPERS

	    // LOCALES

	    function localeWeek(mom) {
	        return weekOfYear(mom, this._week.dow, this._week.doy).week;
	    }

	    var defaultLocaleWeek = {
	        dow: 0, // Sunday is the first day of the week.
	        doy: 6, // The week that contains Jan 6th is the first week of the year.
	    };

	    function localeFirstDayOfWeek() {
	        return this._week.dow;
	    }

	    function localeFirstDayOfYear() {
	        return this._week.doy;
	    }

	    // MOMENTS

	    function getSetWeek(input) {
	        var week = this.localeData().week(this);
	        return input == null ? week : this.add((input - week) * 7, 'd');
	    }

	    function getSetISOWeek(input) {
	        var week = weekOfYear(this, 1, 4).week;
	        return input == null ? week : this.add((input - week) * 7, 'd');
	    }

	    // FORMATTING

	    addFormatToken('d', 0, 'do', 'day');

	    addFormatToken('dd', 0, 0, function (format) {
	        return this.localeData().weekdaysMin(this, format);
	    });

	    addFormatToken('ddd', 0, 0, function (format) {
	        return this.localeData().weekdaysShort(this, format);
	    });

	    addFormatToken('dddd', 0, 0, function (format) {
	        return this.localeData().weekdays(this, format);
	    });

	    addFormatToken('e', 0, 0, 'weekday');
	    addFormatToken('E', 0, 0, 'isoWeekday');

	    // ALIASES

	    addUnitAlias('day', 'd');
	    addUnitAlias('weekday', 'e');
	    addUnitAlias('isoWeekday', 'E');

	    // PRIORITY
	    addUnitPriority('day', 11);
	    addUnitPriority('weekday', 11);
	    addUnitPriority('isoWeekday', 11);

	    // PARSING

	    addRegexToken('d', match1to2);
	    addRegexToken('e', match1to2);
	    addRegexToken('E', match1to2);
	    addRegexToken('dd', function (isStrict, locale) {
	        return locale.weekdaysMinRegex(isStrict);
	    });
	    addRegexToken('ddd', function (isStrict, locale) {
	        return locale.weekdaysShortRegex(isStrict);
	    });
	    addRegexToken('dddd', function (isStrict, locale) {
	        return locale.weekdaysRegex(isStrict);
	    });

	    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
	        var weekday = config._locale.weekdaysParse(input, token, config._strict);
	        // if we didn't get a weekday name, mark the date as invalid
	        if (weekday != null) {
	            week.d = weekday;
	        } else {
	            getParsingFlags(config).invalidWeekday = input;
	        }
	    });

	    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
	        week[token] = toInt(input);
	    });

	    // HELPERS

	    function parseWeekday(input, locale) {
	        if (typeof input !== 'string') {
	            return input;
	        }

	        if (!isNaN(input)) {
	            return parseInt(input, 10);
	        }

	        input = locale.weekdaysParse(input);
	        if (typeof input === 'number') {
	            return input;
	        }

	        return null;
	    }

	    function parseIsoWeekday(input, locale) {
	        if (typeof input === 'string') {
	            return locale.weekdaysParse(input) % 7 || 7;
	        }
	        return isNaN(input) ? null : input;
	    }

	    // LOCALES
	    function shiftWeekdays(ws, n) {
	        return ws.slice(n, 7).concat(ws.slice(0, n));
	    }

	    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split(
	            '_'
	        ),
	        defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
	        defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
	        defaultWeekdaysRegex = matchWord,
	        defaultWeekdaysShortRegex = matchWord,
	        defaultWeekdaysMinRegex = matchWord;

	    function localeWeekdays(m, format) {
	        var weekdays = isArray(this._weekdays)
	            ? this._weekdays
	            : this._weekdays[
	                  m && m !== true && this._weekdays.isFormat.test(format)
	                      ? 'format'
	                      : 'standalone'
	              ];
	        return m === true
	            ? shiftWeekdays(weekdays, this._week.dow)
	            : m
	            ? weekdays[m.day()]
	            : weekdays;
	    }

	    function localeWeekdaysShort(m) {
	        return m === true
	            ? shiftWeekdays(this._weekdaysShort, this._week.dow)
	            : m
	            ? this._weekdaysShort[m.day()]
	            : this._weekdaysShort;
	    }

	    function localeWeekdaysMin(m) {
	        return m === true
	            ? shiftWeekdays(this._weekdaysMin, this._week.dow)
	            : m
	            ? this._weekdaysMin[m.day()]
	            : this._weekdaysMin;
	    }

	    function handleStrictParse$1(weekdayName, format, strict) {
	        var i,
	            ii,
	            mom,
	            llc = weekdayName.toLocaleLowerCase();
	        if (!this._weekdaysParse) {
	            this._weekdaysParse = [];
	            this._shortWeekdaysParse = [];
	            this._minWeekdaysParse = [];

	            for (i = 0; i < 7; ++i) {
	                mom = createUTC([2000, 1]).day(i);
	                this._minWeekdaysParse[i] = this.weekdaysMin(
	                    mom,
	                    ''
	                ).toLocaleLowerCase();
	                this._shortWeekdaysParse[i] = this.weekdaysShort(
	                    mom,
	                    ''
	                ).toLocaleLowerCase();
	                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
	            }
	        }

	        if (strict) {
	            if (format === 'dddd') {
	                ii = indexOf.call(this._weekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else if (format === 'ddd') {
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        } else {
	            if (format === 'dddd') {
	                ii = indexOf.call(this._weekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else if (format === 'ddd') {
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._weekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            } else {
	                ii = indexOf.call(this._minWeekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._weekdaysParse, llc);
	                if (ii !== -1) {
	                    return ii;
	                }
	                ii = indexOf.call(this._shortWeekdaysParse, llc);
	                return ii !== -1 ? ii : null;
	            }
	        }
	    }

	    function localeWeekdaysParse(weekdayName, format, strict) {
	        var i, mom, regex;

	        if (this._weekdaysParseExact) {
	            return handleStrictParse$1.call(this, weekdayName, format, strict);
	        }

	        if (!this._weekdaysParse) {
	            this._weekdaysParse = [];
	            this._minWeekdaysParse = [];
	            this._shortWeekdaysParse = [];
	            this._fullWeekdaysParse = [];
	        }

	        for (i = 0; i < 7; i++) {
	            // make the regex if we don't have it already

	            mom = createUTC([2000, 1]).day(i);
	            if (strict && !this._fullWeekdaysParse[i]) {
	                this._fullWeekdaysParse[i] = new RegExp(
	                    '^' + this.weekdays(mom, '').replace('.', '\\.?') + '$',
	                    'i'
	                );
	                this._shortWeekdaysParse[i] = new RegExp(
	                    '^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$',
	                    'i'
	                );
	                this._minWeekdaysParse[i] = new RegExp(
	                    '^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$',
	                    'i'
	                );
	            }
	            if (!this._weekdaysParse[i]) {
	                regex =
	                    '^' +
	                    this.weekdays(mom, '') +
	                    '|^' +
	                    this.weekdaysShort(mom, '') +
	                    '|^' +
	                    this.weekdaysMin(mom, '');
	                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
	            }
	            // test the regex
	            if (
	                strict &&
	                format === 'dddd' &&
	                this._fullWeekdaysParse[i].test(weekdayName)
	            ) {
	                return i;
	            } else if (
	                strict &&
	                format === 'ddd' &&
	                this._shortWeekdaysParse[i].test(weekdayName)
	            ) {
	                return i;
	            } else if (
	                strict &&
	                format === 'dd' &&
	                this._minWeekdaysParse[i].test(weekdayName)
	            ) {
	                return i;
	            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
	                return i;
	            }
	        }
	    }

	    // MOMENTS

	    function getSetDayOfWeek(input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
	        if (input != null) {
	            input = parseWeekday(input, this.localeData());
	            return this.add(input - day, 'd');
	        } else {
	            return day;
	        }
	    }

	    function getSetLocaleDayOfWeek(input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
	        return input == null ? weekday : this.add(input - weekday, 'd');
	    }

	    function getSetISODayOfWeek(input) {
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }

	        // behaves the same as moment#day except
	        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
	        // as a setter, sunday should belong to the previous week.

	        if (input != null) {
	            var weekday = parseIsoWeekday(input, this.localeData());
	            return this.day(this.day() % 7 ? weekday : weekday - 7);
	        } else {
	            return this.day() || 7;
	        }
	    }

	    function weekdaysRegex(isStrict) {
	        if (this._weekdaysParseExact) {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                computeWeekdaysParse.call(this);
	            }
	            if (isStrict) {
	                return this._weekdaysStrictRegex;
	            } else {
	                return this._weekdaysRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                this._weekdaysRegex = defaultWeekdaysRegex;
	            }
	            return this._weekdaysStrictRegex && isStrict
	                ? this._weekdaysStrictRegex
	                : this._weekdaysRegex;
	        }
	    }

	    function weekdaysShortRegex(isStrict) {
	        if (this._weekdaysParseExact) {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                computeWeekdaysParse.call(this);
	            }
	            if (isStrict) {
	                return this._weekdaysShortStrictRegex;
	            } else {
	                return this._weekdaysShortRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
	                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
	            }
	            return this._weekdaysShortStrictRegex && isStrict
	                ? this._weekdaysShortStrictRegex
	                : this._weekdaysShortRegex;
	        }
	    }

	    function weekdaysMinRegex(isStrict) {
	        if (this._weekdaysParseExact) {
	            if (!hasOwnProp(this, '_weekdaysRegex')) {
	                computeWeekdaysParse.call(this);
	            }
	            if (isStrict) {
	                return this._weekdaysMinStrictRegex;
	            } else {
	                return this._weekdaysMinRegex;
	            }
	        } else {
	            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
	                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
	            }
	            return this._weekdaysMinStrictRegex && isStrict
	                ? this._weekdaysMinStrictRegex
	                : this._weekdaysMinRegex;
	        }
	    }

	    function computeWeekdaysParse() {
	        function cmpLenRev(a, b) {
	            return b.length - a.length;
	        }

	        var minPieces = [],
	            shortPieces = [],
	            longPieces = [],
	            mixedPieces = [],
	            i,
	            mom,
	            minp,
	            shortp,
	            longp;
	        for (i = 0; i < 7; i++) {
	            // make the regex if we don't have it already
	            mom = createUTC([2000, 1]).day(i);
	            minp = regexEscape(this.weekdaysMin(mom, ''));
	            shortp = regexEscape(this.weekdaysShort(mom, ''));
	            longp = regexEscape(this.weekdays(mom, ''));
	            minPieces.push(minp);
	            shortPieces.push(shortp);
	            longPieces.push(longp);
	            mixedPieces.push(minp);
	            mixedPieces.push(shortp);
	            mixedPieces.push(longp);
	        }
	        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
	        // will match the longer piece.
	        minPieces.sort(cmpLenRev);
	        shortPieces.sort(cmpLenRev);
	        longPieces.sort(cmpLenRev);
	        mixedPieces.sort(cmpLenRev);

	        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	        this._weekdaysShortRegex = this._weekdaysRegex;
	        this._weekdaysMinRegex = this._weekdaysRegex;

	        this._weekdaysStrictRegex = new RegExp(
	            '^(' + longPieces.join('|') + ')',
	            'i'
	        );
	        this._weekdaysShortStrictRegex = new RegExp(
	            '^(' + shortPieces.join('|') + ')',
	            'i'
	        );
	        this._weekdaysMinStrictRegex = new RegExp(
	            '^(' + minPieces.join('|') + ')',
	            'i'
	        );
	    }

	    // FORMATTING

	    function hFormat() {
	        return this.hours() % 12 || 12;
	    }

	    function kFormat() {
	        return this.hours() || 24;
	    }

	    addFormatToken('H', ['HH', 2], 0, 'hour');
	    addFormatToken('h', ['hh', 2], 0, hFormat);
	    addFormatToken('k', ['kk', 2], 0, kFormat);

	    addFormatToken('hmm', 0, 0, function () {
	        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
	    });

	    addFormatToken('hmmss', 0, 0, function () {
	        return (
	            '' +
	            hFormat.apply(this) +
	            zeroFill(this.minutes(), 2) +
	            zeroFill(this.seconds(), 2)
	        );
	    });

	    addFormatToken('Hmm', 0, 0, function () {
	        return '' + this.hours() + zeroFill(this.minutes(), 2);
	    });

	    addFormatToken('Hmmss', 0, 0, function () {
	        return (
	            '' +
	            this.hours() +
	            zeroFill(this.minutes(), 2) +
	            zeroFill(this.seconds(), 2)
	        );
	    });

	    function meridiem(token, lowercase) {
	        addFormatToken(token, 0, 0, function () {
	            return this.localeData().meridiem(
	                this.hours(),
	                this.minutes(),
	                lowercase
	            );
	        });
	    }

	    meridiem('a', true);
	    meridiem('A', false);

	    // ALIASES

	    addUnitAlias('hour', 'h');

	    // PRIORITY
	    addUnitPriority('hour', 13);

	    // PARSING

	    function matchMeridiem(isStrict, locale) {
	        return locale._meridiemParse;
	    }

	    addRegexToken('a', matchMeridiem);
	    addRegexToken('A', matchMeridiem);
	    addRegexToken('H', match1to2);
	    addRegexToken('h', match1to2);
	    addRegexToken('k', match1to2);
	    addRegexToken('HH', match1to2, match2);
	    addRegexToken('hh', match1to2, match2);
	    addRegexToken('kk', match1to2, match2);

	    addRegexToken('hmm', match3to4);
	    addRegexToken('hmmss', match5to6);
	    addRegexToken('Hmm', match3to4);
	    addRegexToken('Hmmss', match5to6);

	    addParseToken(['H', 'HH'], HOUR);
	    addParseToken(['k', 'kk'], function (input, array, config) {
	        var kInput = toInt(input);
	        array[HOUR] = kInput === 24 ? 0 : kInput;
	    });
	    addParseToken(['a', 'A'], function (input, array, config) {
	        config._isPm = config._locale.isPM(input);
	        config._meridiem = input;
	    });
	    addParseToken(['h', 'hh'], function (input, array, config) {
	        array[HOUR] = toInt(input);
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('hmm', function (input, array, config) {
	        var pos = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos));
	        array[MINUTE] = toInt(input.substr(pos));
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('hmmss', function (input, array, config) {
	        var pos1 = input.length - 4,
	            pos2 = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos1));
	        array[MINUTE] = toInt(input.substr(pos1, 2));
	        array[SECOND] = toInt(input.substr(pos2));
	        getParsingFlags(config).bigHour = true;
	    });
	    addParseToken('Hmm', function (input, array, config) {
	        var pos = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos));
	        array[MINUTE] = toInt(input.substr(pos));
	    });
	    addParseToken('Hmmss', function (input, array, config) {
	        var pos1 = input.length - 4,
	            pos2 = input.length - 2;
	        array[HOUR] = toInt(input.substr(0, pos1));
	        array[MINUTE] = toInt(input.substr(pos1, 2));
	        array[SECOND] = toInt(input.substr(pos2));
	    });

	    // LOCALES

	    function localeIsPM(input) {
	        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
	        // Using charAt should be more compatible.
	        return (input + '').toLowerCase().charAt(0) === 'p';
	    }

	    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i,
	        // Setting the hour should keep the time, because the user explicitly
	        // specified which hour they want. So trying to maintain the same hour (in
	        // a new timezone) makes sense. Adding/subtracting hours does not follow
	        // this rule.
	        getSetHour = makeGetSet('Hours', true);

	    function localeMeridiem(hours, minutes, isLower) {
	        if (hours > 11) {
	            return isLower ? 'pm' : 'PM';
	        } else {
	            return isLower ? 'am' : 'AM';
	        }
	    }

	    var baseConfig = {
	        calendar: defaultCalendar,
	        longDateFormat: defaultLongDateFormat,
	        invalidDate: defaultInvalidDate,
	        ordinal: defaultOrdinal,
	        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
	        relativeTime: defaultRelativeTime,

	        months: defaultLocaleMonths,
	        monthsShort: defaultLocaleMonthsShort,

	        week: defaultLocaleWeek,

	        weekdays: defaultLocaleWeekdays,
	        weekdaysMin: defaultLocaleWeekdaysMin,
	        weekdaysShort: defaultLocaleWeekdaysShort,

	        meridiemParse: defaultLocaleMeridiemParse,
	    };

	    // internal storage for locale config files
	    var locales = {},
	        localeFamilies = {},
	        globalLocale;

	    function commonPrefix(arr1, arr2) {
	        var i,
	            minl = Math.min(arr1.length, arr2.length);
	        for (i = 0; i < minl; i += 1) {
	            if (arr1[i] !== arr2[i]) {
	                return i;
	            }
	        }
	        return minl;
	    }

	    function normalizeLocale(key) {
	        return key ? key.toLowerCase().replace('_', '-') : key;
	    }

	    // pick the locale from the array
	    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
	    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
	    function chooseLocale(names) {
	        var i = 0,
	            j,
	            next,
	            locale,
	            split;

	        while (i < names.length) {
	            split = normalizeLocale(names[i]).split('-');
	            j = split.length;
	            next = normalizeLocale(names[i + 1]);
	            next = next ? next.split('-') : null;
	            while (j > 0) {
	                locale = loadLocale(split.slice(0, j).join('-'));
	                if (locale) {
	                    return locale;
	                }
	                if (
	                    next &&
	                    next.length >= j &&
	                    commonPrefix(split, next) >= j - 1
	                ) {
	                    //the next array item is better than a shallower substring of this one
	                    break;
	                }
	                j--;
	            }
	            i++;
	        }
	        return globalLocale;
	    }

	    function loadLocale(name) {
	        var oldLocale = null,
	            aliasedRequire;
	        // TODO: Find a better way to register and load all the locales in Node
	        if (
	            locales[name] === undefined &&
	            'object' !== 'undefined' &&
	            module &&
	            module.exports
	        ) {
	            try {
	                oldLocale = globalLocale._abbr;
	                aliasedRequire = commonjsRequire;
	                aliasedRequire('./locale/' + name);
	                getSetGlobalLocale(oldLocale);
	            } catch (e) {
	                // mark as not found to avoid repeating expensive file require call causing high CPU
	                // when trying to find en-US, en_US, en-us for every format call
	                locales[name] = null; // null means not found
	            }
	        }
	        return locales[name];
	    }

	    // This function will load locale and then set the global locale.  If
	    // no arguments are passed in, it will simply return the current global
	    // locale key.
	    function getSetGlobalLocale(key, values) {
	        var data;
	        if (key) {
	            if (isUndefined(values)) {
	                data = getLocale(key);
	            } else {
	                data = defineLocale(key, values);
	            }

	            if (data) {
	                // moment.duration._locale = moment._locale = data;
	                globalLocale = data;
	            } else {
	                if (typeof console !== 'undefined' && console.warn) {
	                    //warn user if arguments are passed but the locale could not be set
	                    console.warn(
	                        'Locale ' + key + ' not found. Did you forget to load it?'
	                    );
	                }
	            }
	        }

	        return globalLocale._abbr;
	    }

	    function defineLocale(name, config) {
	        if (config !== null) {
	            var locale,
	                parentConfig = baseConfig;
	            config.abbr = name;
	            if (locales[name] != null) {
	                deprecateSimple(
	                    'defineLocaleOverride',
	                    'use moment.updateLocale(localeName, config) to change ' +
	                        'an existing locale. moment.defineLocale(localeName, ' +
	                        'config) should only be used for creating a new locale ' +
	                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.'
	                );
	                parentConfig = locales[name]._config;
	            } else if (config.parentLocale != null) {
	                if (locales[config.parentLocale] != null) {
	                    parentConfig = locales[config.parentLocale]._config;
	                } else {
	                    locale = loadLocale(config.parentLocale);
	                    if (locale != null) {
	                        parentConfig = locale._config;
	                    } else {
	                        if (!localeFamilies[config.parentLocale]) {
	                            localeFamilies[config.parentLocale] = [];
	                        }
	                        localeFamilies[config.parentLocale].push({
	                            name: name,
	                            config: config,
	                        });
	                        return null;
	                    }
	                }
	            }
	            locales[name] = new Locale(mergeConfigs(parentConfig, config));

	            if (localeFamilies[name]) {
	                localeFamilies[name].forEach(function (x) {
	                    defineLocale(x.name, x.config);
	                });
	            }

	            // backwards compat for now: also set the locale
	            // make sure we set the locale AFTER all child locales have been
	            // created, so we won't end up with the child locale set.
	            getSetGlobalLocale(name);

	            return locales[name];
	        } else {
	            // useful for testing
	            delete locales[name];
	            return null;
	        }
	    }

	    function updateLocale(name, config) {
	        if (config != null) {
	            var locale,
	                tmpLocale,
	                parentConfig = baseConfig;

	            if (locales[name] != null && locales[name].parentLocale != null) {
	                // Update existing child locale in-place to avoid memory-leaks
	                locales[name].set(mergeConfigs(locales[name]._config, config));
	            } else {
	                // MERGE
	                tmpLocale = loadLocale(name);
	                if (tmpLocale != null) {
	                    parentConfig = tmpLocale._config;
	                }
	                config = mergeConfigs(parentConfig, config);
	                if (tmpLocale == null) {
	                    // updateLocale is called for creating a new locale
	                    // Set abbr so it will have a name (getters return
	                    // undefined otherwise).
	                    config.abbr = name;
	                }
	                locale = new Locale(config);
	                locale.parentLocale = locales[name];
	                locales[name] = locale;
	            }

	            // backwards compat for now: also set the locale
	            getSetGlobalLocale(name);
	        } else {
	            // pass null for config to unupdate, useful for tests
	            if (locales[name] != null) {
	                if (locales[name].parentLocale != null) {
	                    locales[name] = locales[name].parentLocale;
	                    if (name === getSetGlobalLocale()) {
	                        getSetGlobalLocale(name);
	                    }
	                } else if (locales[name] != null) {
	                    delete locales[name];
	                }
	            }
	        }
	        return locales[name];
	    }

	    // returns locale data
	    function getLocale(key) {
	        var locale;

	        if (key && key._locale && key._locale._abbr) {
	            key = key._locale._abbr;
	        }

	        if (!key) {
	            return globalLocale;
	        }

	        if (!isArray(key)) {
	            //short-circuit everything else
	            locale = loadLocale(key);
	            if (locale) {
	                return locale;
	            }
	            key = [key];
	        }

	        return chooseLocale(key);
	    }

	    function listLocales() {
	        return keys(locales);
	    }

	    function checkOverflow(m) {
	        var overflow,
	            a = m._a;

	        if (a && getParsingFlags(m).overflow === -2) {
	            overflow =
	                a[MONTH] < 0 || a[MONTH] > 11
	                    ? MONTH
	                    : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH])
	                    ? DATE
	                    : a[HOUR] < 0 ||
	                      a[HOUR] > 24 ||
	                      (a[HOUR] === 24 &&
	                          (a[MINUTE] !== 0 ||
	                              a[SECOND] !== 0 ||
	                              a[MILLISECOND] !== 0))
	                    ? HOUR
	                    : a[MINUTE] < 0 || a[MINUTE] > 59
	                    ? MINUTE
	                    : a[SECOND] < 0 || a[SECOND] > 59
	                    ? SECOND
	                    : a[MILLISECOND] < 0 || a[MILLISECOND] > 999
	                    ? MILLISECOND
	                    : -1;

	            if (
	                getParsingFlags(m)._overflowDayOfYear &&
	                (overflow < YEAR || overflow > DATE)
	            ) {
	                overflow = DATE;
	            }
	            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
	                overflow = WEEK;
	            }
	            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
	                overflow = WEEKDAY;
	            }

	            getParsingFlags(m).overflow = overflow;
	        }

	        return m;
	    }

	    // iso 8601 regex
	    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
	    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
	        basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
	        tzRegex = /Z|[+-]\d\d(?::?\d\d)?/,
	        isoDates = [
	            ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
	            ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
	            ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
	            ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
	            ['YYYY-DDD', /\d{4}-\d{3}/],
	            ['YYYY-MM', /\d{4}-\d\d/, false],
	            ['YYYYYYMMDD', /[+-]\d{10}/],
	            ['YYYYMMDD', /\d{8}/],
	            ['GGGG[W]WWE', /\d{4}W\d{3}/],
	            ['GGGG[W]WW', /\d{4}W\d{2}/, false],
	            ['YYYYDDD', /\d{7}/],
	            ['YYYYMM', /\d{6}/, false],
	            ['YYYY', /\d{4}/, false],
	        ],
	        // iso time formats and regexes
	        isoTimes = [
	            ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
	            ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
	            ['HH:mm:ss', /\d\d:\d\d:\d\d/],
	            ['HH:mm', /\d\d:\d\d/],
	            ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
	            ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
	            ['HHmmss', /\d\d\d\d\d\d/],
	            ['HHmm', /\d\d\d\d/],
	            ['HH', /\d\d/],
	        ],
	        aspNetJsonRegex = /^\/?Date\((-?\d+)/i,
	        // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
	        rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
	        obsOffsets = {
	            UT: 0,
	            GMT: 0,
	            EDT: -4 * 60,
	            EST: -5 * 60,
	            CDT: -5 * 60,
	            CST: -6 * 60,
	            MDT: -6 * 60,
	            MST: -7 * 60,
	            PDT: -7 * 60,
	            PST: -8 * 60,
	        };

	    // date from iso format
	    function configFromISO(config) {
	        var i,
	            l,
	            string = config._i,
	            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
	            allowTime,
	            dateFormat,
	            timeFormat,
	            tzFormat;

	        if (match) {
	            getParsingFlags(config).iso = true;

	            for (i = 0, l = isoDates.length; i < l; i++) {
	                if (isoDates[i][1].exec(match[1])) {
	                    dateFormat = isoDates[i][0];
	                    allowTime = isoDates[i][2] !== false;
	                    break;
	                }
	            }
	            if (dateFormat == null) {
	                config._isValid = false;
	                return;
	            }
	            if (match[3]) {
	                for (i = 0, l = isoTimes.length; i < l; i++) {
	                    if (isoTimes[i][1].exec(match[3])) {
	                        // match[2] should be 'T' or space
	                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
	                        break;
	                    }
	                }
	                if (timeFormat == null) {
	                    config._isValid = false;
	                    return;
	                }
	            }
	            if (!allowTime && timeFormat != null) {
	                config._isValid = false;
	                return;
	            }
	            if (match[4]) {
	                if (tzRegex.exec(match[4])) {
	                    tzFormat = 'Z';
	                } else {
	                    config._isValid = false;
	                    return;
	                }
	            }
	            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
	            configFromStringAndFormat(config);
	        } else {
	            config._isValid = false;
	        }
	    }

	    function extractFromRFC2822Strings(
	        yearStr,
	        monthStr,
	        dayStr,
	        hourStr,
	        minuteStr,
	        secondStr
	    ) {
	        var result = [
	            untruncateYear(yearStr),
	            defaultLocaleMonthsShort.indexOf(monthStr),
	            parseInt(dayStr, 10),
	            parseInt(hourStr, 10),
	            parseInt(minuteStr, 10),
	        ];

	        if (secondStr) {
	            result.push(parseInt(secondStr, 10));
	        }

	        return result;
	    }

	    function untruncateYear(yearStr) {
	        var year = parseInt(yearStr, 10);
	        if (year <= 49) {
	            return 2000 + year;
	        } else if (year <= 999) {
	            return 1900 + year;
	        }
	        return year;
	    }

	    function preprocessRFC2822(s) {
	        // Remove comments and folding whitespace and replace multiple-spaces with a single space
	        return s
	            .replace(/\([^)]*\)|[\n\t]/g, ' ')
	            .replace(/(\s\s+)/g, ' ')
	            .replace(/^\s\s*/, '')
	            .replace(/\s\s*$/, '');
	    }

	    function checkWeekday(weekdayStr, parsedInput, config) {
	        if (weekdayStr) {
	            // TODO: Replace the vanilla JS Date object with an independent day-of-week check.
	            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
	                weekdayActual = new Date(
	                    parsedInput[0],
	                    parsedInput[1],
	                    parsedInput[2]
	                ).getDay();
	            if (weekdayProvided !== weekdayActual) {
	                getParsingFlags(config).weekdayMismatch = true;
	                config._isValid = false;
	                return false;
	            }
	        }
	        return true;
	    }

	    function calculateOffset(obsOffset, militaryOffset, numOffset) {
	        if (obsOffset) {
	            return obsOffsets[obsOffset];
	        } else if (militaryOffset) {
	            // the only allowed military tz is Z
	            return 0;
	        } else {
	            var hm = parseInt(numOffset, 10),
	                m = hm % 100,
	                h = (hm - m) / 100;
	            return h * 60 + m;
	        }
	    }

	    // date and time from ref 2822 format
	    function configFromRFC2822(config) {
	        var match = rfc2822.exec(preprocessRFC2822(config._i)),
	            parsedArray;
	        if (match) {
	            parsedArray = extractFromRFC2822Strings(
	                match[4],
	                match[3],
	                match[2],
	                match[5],
	                match[6],
	                match[7]
	            );
	            if (!checkWeekday(match[1], parsedArray, config)) {
	                return;
	            }

	            config._a = parsedArray;
	            config._tzm = calculateOffset(match[8], match[9], match[10]);

	            config._d = createUTCDate.apply(null, config._a);
	            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

	            getParsingFlags(config).rfc2822 = true;
	        } else {
	            config._isValid = false;
	        }
	    }

	    // date from 1) ASP.NET, 2) ISO, 3) RFC 2822 formats, or 4) optional fallback if parsing isn't strict
	    function configFromString(config) {
	        var matched = aspNetJsonRegex.exec(config._i);
	        if (matched !== null) {
	            config._d = new Date(+matched[1]);
	            return;
	        }

	        configFromISO(config);
	        if (config._isValid === false) {
	            delete config._isValid;
	        } else {
	            return;
	        }

	        configFromRFC2822(config);
	        if (config._isValid === false) {
	            delete config._isValid;
	        } else {
	            return;
	        }

	        if (config._strict) {
	            config._isValid = false;
	        } else {
	            // Final attempt, use Input Fallback
	            hooks.createFromInputFallback(config);
	        }
	    }

	    hooks.createFromInputFallback = deprecate(
	        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
	            'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
	            'discouraged and will be removed in an upcoming major release. Please refer to ' +
	            'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
	        function (config) {
	            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
	        }
	    );

	    // Pick the first defined of two or three arguments.
	    function defaults(a, b, c) {
	        if (a != null) {
	            return a;
	        }
	        if (b != null) {
	            return b;
	        }
	        return c;
	    }

	    function currentDateArray(config) {
	        // hooks is actually the exported moment object
	        var nowValue = new Date(hooks.now());
	        if (config._useUTC) {
	            return [
	                nowValue.getUTCFullYear(),
	                nowValue.getUTCMonth(),
	                nowValue.getUTCDate(),
	            ];
	        }
	        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
	    }

	    // convert an array to a date.
	    // the array should mirror the parameters below
	    // note: all values past the year are optional and will default to the lowest possible value.
	    // [year, month, day , hour, minute, second, millisecond]
	    function configFromArray(config) {
	        var i,
	            date,
	            input = [],
	            currentDate,
	            expectedWeekday,
	            yearToUse;

	        if (config._d) {
	            return;
	        }

	        currentDate = currentDateArray(config);

	        //compute day of the year from weeks and weekdays
	        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
	            dayOfYearFromWeekInfo(config);
	        }

	        //if the day of the year is set, figure out what it is
	        if (config._dayOfYear != null) {
	            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

	            if (
	                config._dayOfYear > daysInYear(yearToUse) ||
	                config._dayOfYear === 0
	            ) {
	                getParsingFlags(config)._overflowDayOfYear = true;
	            }

	            date = createUTCDate(yearToUse, 0, config._dayOfYear);
	            config._a[MONTH] = date.getUTCMonth();
	            config._a[DATE] = date.getUTCDate();
	        }

	        // Default to current date.
	        // * if no year, month, day of month are given, default to today
	        // * if day of month is given, default month and year
	        // * if month is given, default only year
	        // * if year is given, don't default anything
	        for (i = 0; i < 3 && config._a[i] == null; ++i) {
	            config._a[i] = input[i] = currentDate[i];
	        }

	        // Zero out whatever was not defaulted, including time
	        for (; i < 7; i++) {
	            config._a[i] = input[i] =
	                config._a[i] == null ? (i === 2 ? 1 : 0) : config._a[i];
	        }

	        // Check for 24:00:00.000
	        if (
	            config._a[HOUR] === 24 &&
	            config._a[MINUTE] === 0 &&
	            config._a[SECOND] === 0 &&
	            config._a[MILLISECOND] === 0
	        ) {
	            config._nextDay = true;
	            config._a[HOUR] = 0;
	        }

	        config._d = (config._useUTC ? createUTCDate : createDate).apply(
	            null,
	            input
	        );
	        expectedWeekday = config._useUTC
	            ? config._d.getUTCDay()
	            : config._d.getDay();

	        // Apply timezone offset from input. The actual utcOffset can be changed
	        // with parseZone.
	        if (config._tzm != null) {
	            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
	        }

	        if (config._nextDay) {
	            config._a[HOUR] = 24;
	        }

	        // check for mismatching day of week
	        if (
	            config._w &&
	            typeof config._w.d !== 'undefined' &&
	            config._w.d !== expectedWeekday
	        ) {
	            getParsingFlags(config).weekdayMismatch = true;
	        }
	    }

	    function dayOfYearFromWeekInfo(config) {
	        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;

	        w = config._w;
	        if (w.GG != null || w.W != null || w.E != null) {
	            dow = 1;
	            doy = 4;

	            // TODO: We need to take the current isoWeekYear, but that depends on
	            // how we interpret now (local, utc, fixed offset). So create
	            // a now version of current config (take local/utc/offset flags, and
	            // create now).
	            weekYear = defaults(
	                w.GG,
	                config._a[YEAR],
	                weekOfYear(createLocal(), 1, 4).year
	            );
	            week = defaults(w.W, 1);
	            weekday = defaults(w.E, 1);
	            if (weekday < 1 || weekday > 7) {
	                weekdayOverflow = true;
	            }
	        } else {
	            dow = config._locale._week.dow;
	            doy = config._locale._week.doy;

	            curWeek = weekOfYear(createLocal(), dow, doy);

	            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

	            // Default to current week.
	            week = defaults(w.w, curWeek.week);

	            if (w.d != null) {
	                // weekday -- low day numbers are considered next week
	                weekday = w.d;
	                if (weekday < 0 || weekday > 6) {
	                    weekdayOverflow = true;
	                }
	            } else if (w.e != null) {
	                // local weekday -- counting starts from beginning of week
	                weekday = w.e + dow;
	                if (w.e < 0 || w.e > 6) {
	                    weekdayOverflow = true;
	                }
	            } else {
	                // default to beginning of week
	                weekday = dow;
	            }
	        }
	        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
	            getParsingFlags(config)._overflowWeeks = true;
	        } else if (weekdayOverflow != null) {
	            getParsingFlags(config)._overflowWeekday = true;
	        } else {
	            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
	            config._a[YEAR] = temp.year;
	            config._dayOfYear = temp.dayOfYear;
	        }
	    }

	    // constant that refers to the ISO standard
	    hooks.ISO_8601 = function () {};

	    // constant that refers to the RFC 2822 form
	    hooks.RFC_2822 = function () {};

	    // date from string and format string
	    function configFromStringAndFormat(config) {
	        // TODO: Move this to another part of the creation flow to prevent circular deps
	        if (config._f === hooks.ISO_8601) {
	            configFromISO(config);
	            return;
	        }
	        if (config._f === hooks.RFC_2822) {
	            configFromRFC2822(config);
	            return;
	        }
	        config._a = [];
	        getParsingFlags(config).empty = true;

	        // This array is used to make a Date, either with `new Date` or `Date.UTC`
	        var string = '' + config._i,
	            i,
	            parsedInput,
	            tokens,
	            token,
	            skipped,
	            stringLength = string.length,
	            totalParsedInputLength = 0,
	            era;

	        tokens =
	            expandFormat(config._f, config._locale).match(formattingTokens) || [];

	        for (i = 0; i < tokens.length; i++) {
	            token = tokens[i];
	            parsedInput = (string.match(getParseRegexForToken(token, config)) ||
	                [])[0];
	            if (parsedInput) {
	                skipped = string.substr(0, string.indexOf(parsedInput));
	                if (skipped.length > 0) {
	                    getParsingFlags(config).unusedInput.push(skipped);
	                }
	                string = string.slice(
	                    string.indexOf(parsedInput) + parsedInput.length
	                );
	                totalParsedInputLength += parsedInput.length;
	            }
	            // don't parse if it's not a known token
	            if (formatTokenFunctions[token]) {
	                if (parsedInput) {
	                    getParsingFlags(config).empty = false;
	                } else {
	                    getParsingFlags(config).unusedTokens.push(token);
	                }
	                addTimeToArrayFromToken(token, parsedInput, config);
	            } else if (config._strict && !parsedInput) {
	                getParsingFlags(config).unusedTokens.push(token);
	            }
	        }

	        // add remaining unparsed input length to the string
	        getParsingFlags(config).charsLeftOver =
	            stringLength - totalParsedInputLength;
	        if (string.length > 0) {
	            getParsingFlags(config).unusedInput.push(string);
	        }

	        // clear _12h flag if hour is <= 12
	        if (
	            config._a[HOUR] <= 12 &&
	            getParsingFlags(config).bigHour === true &&
	            config._a[HOUR] > 0
	        ) {
	            getParsingFlags(config).bigHour = undefined;
	        }

	        getParsingFlags(config).parsedDateParts = config._a.slice(0);
	        getParsingFlags(config).meridiem = config._meridiem;
	        // handle meridiem
	        config._a[HOUR] = meridiemFixWrap(
	            config._locale,
	            config._a[HOUR],
	            config._meridiem
	        );

	        // handle era
	        era = getParsingFlags(config).era;
	        if (era !== null) {
	            config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
	        }

	        configFromArray(config);
	        checkOverflow(config);
	    }

	    function meridiemFixWrap(locale, hour, meridiem) {
	        var isPm;

	        if (meridiem == null) {
	            // nothing to do
	            return hour;
	        }
	        if (locale.meridiemHour != null) {
	            return locale.meridiemHour(hour, meridiem);
	        } else if (locale.isPM != null) {
	            // Fallback
	            isPm = locale.isPM(meridiem);
	            if (isPm && hour < 12) {
	                hour += 12;
	            }
	            if (!isPm && hour === 12) {
	                hour = 0;
	            }
	            return hour;
	        } else {
	            // this is not supposed to happen
	            return hour;
	        }
	    }

	    // date from string and array of format strings
	    function configFromStringAndArray(config) {
	        var tempConfig,
	            bestMoment,
	            scoreToBeat,
	            i,
	            currentScore,
	            validFormatFound,
	            bestFormatIsValid = false;

	        if (config._f.length === 0) {
	            getParsingFlags(config).invalidFormat = true;
	            config._d = new Date(NaN);
	            return;
	        }

	        for (i = 0; i < config._f.length; i++) {
	            currentScore = 0;
	            validFormatFound = false;
	            tempConfig = copyConfig({}, config);
	            if (config._useUTC != null) {
	                tempConfig._useUTC = config._useUTC;
	            }
	            tempConfig._f = config._f[i];
	            configFromStringAndFormat(tempConfig);

	            if (isValid(tempConfig)) {
	                validFormatFound = true;
	            }

	            // if there is any input that was not parsed add a penalty for that format
	            currentScore += getParsingFlags(tempConfig).charsLeftOver;

	            //or tokens
	            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

	            getParsingFlags(tempConfig).score = currentScore;

	            if (!bestFormatIsValid) {
	                if (
	                    scoreToBeat == null ||
	                    currentScore < scoreToBeat ||
	                    validFormatFound
	                ) {
	                    scoreToBeat = currentScore;
	                    bestMoment = tempConfig;
	                    if (validFormatFound) {
	                        bestFormatIsValid = true;
	                    }
	                }
	            } else {
	                if (currentScore < scoreToBeat) {
	                    scoreToBeat = currentScore;
	                    bestMoment = tempConfig;
	                }
	            }
	        }

	        extend(config, bestMoment || tempConfig);
	    }

	    function configFromObject(config) {
	        if (config._d) {
	            return;
	        }

	        var i = normalizeObjectUnits(config._i),
	            dayOrDate = i.day === undefined ? i.date : i.day;
	        config._a = map(
	            [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
	            function (obj) {
	                return obj && parseInt(obj, 10);
	            }
	        );

	        configFromArray(config);
	    }

	    function createFromConfig(config) {
	        var res = new Moment(checkOverflow(prepareConfig(config)));
	        if (res._nextDay) {
	            // Adding is smart enough around DST
	            res.add(1, 'd');
	            res._nextDay = undefined;
	        }

	        return res;
	    }

	    function prepareConfig(config) {
	        var input = config._i,
	            format = config._f;

	        config._locale = config._locale || getLocale(config._l);

	        if (input === null || (format === undefined && input === '')) {
	            return createInvalid({ nullInput: true });
	        }

	        if (typeof input === 'string') {
	            config._i = input = config._locale.preparse(input);
	        }

	        if (isMoment(input)) {
	            return new Moment(checkOverflow(input));
	        } else if (isDate(input)) {
	            config._d = input;
	        } else if (isArray(format)) {
	            configFromStringAndArray(config);
	        } else if (format) {
	            configFromStringAndFormat(config);
	        } else {
	            configFromInput(config);
	        }

	        if (!isValid(config)) {
	            config._d = null;
	        }

	        return config;
	    }

	    function configFromInput(config) {
	        var input = config._i;
	        if (isUndefined(input)) {
	            config._d = new Date(hooks.now());
	        } else if (isDate(input)) {
	            config._d = new Date(input.valueOf());
	        } else if (typeof input === 'string') {
	            configFromString(config);
	        } else if (isArray(input)) {
	            config._a = map(input.slice(0), function (obj) {
	                return parseInt(obj, 10);
	            });
	            configFromArray(config);
	        } else if (isObject(input)) {
	            configFromObject(config);
	        } else if (isNumber(input)) {
	            // from milliseconds
	            config._d = new Date(input);
	        } else {
	            hooks.createFromInputFallback(config);
	        }
	    }

	    function createLocalOrUTC(input, format, locale, strict, isUTC) {
	        var c = {};

	        if (format === true || format === false) {
	            strict = format;
	            format = undefined;
	        }

	        if (locale === true || locale === false) {
	            strict = locale;
	            locale = undefined;
	        }

	        if (
	            (isObject(input) && isObjectEmpty(input)) ||
	            (isArray(input) && input.length === 0)
	        ) {
	            input = undefined;
	        }
	        // object construction must be done this way.
	        // https://github.com/moment/moment/issues/1423
	        c._isAMomentObject = true;
	        c._useUTC = c._isUTC = isUTC;
	        c._l = locale;
	        c._i = input;
	        c._f = format;
	        c._strict = strict;

	        return createFromConfig(c);
	    }

	    function createLocal(input, format, locale, strict) {
	        return createLocalOrUTC(input, format, locale, strict, false);
	    }

	    var prototypeMin = deprecate(
	            'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
	            function () {
	                var other = createLocal.apply(null, arguments);
	                if (this.isValid() && other.isValid()) {
	                    return other < this ? this : other;
	                } else {
	                    return createInvalid();
	                }
	            }
	        ),
	        prototypeMax = deprecate(
	            'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
	            function () {
	                var other = createLocal.apply(null, arguments);
	                if (this.isValid() && other.isValid()) {
	                    return other > this ? this : other;
	                } else {
	                    return createInvalid();
	                }
	            }
	        );

	    // Pick a moment m from moments so that m[fn](other) is true for all
	    // other. This relies on the function fn to be transitive.
	    //
	    // moments should either be an array of moment objects or an array, whose
	    // first element is an array of moment objects.
	    function pickBy(fn, moments) {
	        var res, i;
	        if (moments.length === 1 && isArray(moments[0])) {
	            moments = moments[0];
	        }
	        if (!moments.length) {
	            return createLocal();
	        }
	        res = moments[0];
	        for (i = 1; i < moments.length; ++i) {
	            if (!moments[i].isValid() || moments[i][fn](res)) {
	                res = moments[i];
	            }
	        }
	        return res;
	    }

	    // TODO: Use [].sort instead?
	    function min() {
	        var args = [].slice.call(arguments, 0);

	        return pickBy('isBefore', args);
	    }

	    function max() {
	        var args = [].slice.call(arguments, 0);

	        return pickBy('isAfter', args);
	    }

	    var now = function () {
	        return Date.now ? Date.now() : +new Date();
	    };

	    var ordering = [
	        'year',
	        'quarter',
	        'month',
	        'week',
	        'day',
	        'hour',
	        'minute',
	        'second',
	        'millisecond',
	    ];

	    function isDurationValid(m) {
	        var key,
	            unitHasDecimal = false,
	            i;
	        for (key in m) {
	            if (
	                hasOwnProp(m, key) &&
	                !(
	                    indexOf.call(ordering, key) !== -1 &&
	                    (m[key] == null || !isNaN(m[key]))
	                )
	            ) {
	                return false;
	            }
	        }

	        for (i = 0; i < ordering.length; ++i) {
	            if (m[ordering[i]]) {
	                if (unitHasDecimal) {
	                    return false; // only allow non-integers for smallest unit
	                }
	                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
	                    unitHasDecimal = true;
	                }
	            }
	        }

	        return true;
	    }

	    function isValid$1() {
	        return this._isValid;
	    }

	    function createInvalid$1() {
	        return createDuration(NaN);
	    }

	    function Duration(duration) {
	        var normalizedInput = normalizeObjectUnits(duration),
	            years = normalizedInput.year || 0,
	            quarters = normalizedInput.quarter || 0,
	            months = normalizedInput.month || 0,
	            weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
	            days = normalizedInput.day || 0,
	            hours = normalizedInput.hour || 0,
	            minutes = normalizedInput.minute || 0,
	            seconds = normalizedInput.second || 0,
	            milliseconds = normalizedInput.millisecond || 0;

	        this._isValid = isDurationValid(normalizedInput);

	        // representation for dateAddRemove
	        this._milliseconds =
	            +milliseconds +
	            seconds * 1e3 + // 1000
	            minutes * 6e4 + // 1000 * 60
	            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
	        // Because of dateAddRemove treats 24 hours as different from a
	        // day when working around DST, we need to store them separately
	        this._days = +days + weeks * 7;
	        // It is impossible to translate months into days without knowing
	        // which months you are are talking about, so we have to store
	        // it separately.
	        this._months = +months + quarters * 3 + years * 12;

	        this._data = {};

	        this._locale = getLocale();

	        this._bubble();
	    }

	    function isDuration(obj) {
	        return obj instanceof Duration;
	    }

	    function absRound(number) {
	        if (number < 0) {
	            return Math.round(-1 * number) * -1;
	        } else {
	            return Math.round(number);
	        }
	    }

	    // compare two arrays, return the number of differences
	    function compareArrays(array1, array2, dontConvert) {
	        var len = Math.min(array1.length, array2.length),
	            lengthDiff = Math.abs(array1.length - array2.length),
	            diffs = 0,
	            i;
	        for (i = 0; i < len; i++) {
	            if (
	                (dontConvert && array1[i] !== array2[i]) ||
	                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))
	            ) {
	                diffs++;
	            }
	        }
	        return diffs + lengthDiff;
	    }

	    // FORMATTING

	    function offset(token, separator) {
	        addFormatToken(token, 0, 0, function () {
	            var offset = this.utcOffset(),
	                sign = '+';
	            if (offset < 0) {
	                offset = -offset;
	                sign = '-';
	            }
	            return (
	                sign +
	                zeroFill(~~(offset / 60), 2) +
	                separator +
	                zeroFill(~~offset % 60, 2)
	            );
	        });
	    }

	    offset('Z', ':');
	    offset('ZZ', '');

	    // PARSING

	    addRegexToken('Z', matchShortOffset);
	    addRegexToken('ZZ', matchShortOffset);
	    addParseToken(['Z', 'ZZ'], function (input, array, config) {
	        config._useUTC = true;
	        config._tzm = offsetFromString(matchShortOffset, input);
	    });

	    // HELPERS

	    // timezone chunker
	    // '+10:00' > ['10',  '00']
	    // '-1530'  > ['-15', '30']
	    var chunkOffset = /([\+\-]|\d\d)/gi;

	    function offsetFromString(matcher, string) {
	        var matches = (string || '').match(matcher),
	            chunk,
	            parts,
	            minutes;

	        if (matches === null) {
	            return null;
	        }

	        chunk = matches[matches.length - 1] || [];
	        parts = (chunk + '').match(chunkOffset) || ['-', 0, 0];
	        minutes = +(parts[1] * 60) + toInt(parts[2]);

	        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes;
	    }

	    // Return a moment from input, that is local/utc/zone equivalent to model.
	    function cloneWithOffset(input, model) {
	        var res, diff;
	        if (model._isUTC) {
	            res = model.clone();
	            diff =
	                (isMoment(input) || isDate(input)
	                    ? input.valueOf()
	                    : createLocal(input).valueOf()) - res.valueOf();
	            // Use low-level api, because this fn is low-level api.
	            res._d.setTime(res._d.valueOf() + diff);
	            hooks.updateOffset(res, false);
	            return res;
	        } else {
	            return createLocal(input).local();
	        }
	    }

	    function getDateOffset(m) {
	        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
	        // https://github.com/moment/moment/pull/1871
	        return -Math.round(m._d.getTimezoneOffset());
	    }

	    // HOOKS

	    // This function will be called whenever a moment is mutated.
	    // It is intended to keep the offset in sync with the timezone.
	    hooks.updateOffset = function () {};

	    // MOMENTS

	    // keepLocalTime = true means only change the timezone, without
	    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
	    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
	    // +0200, so we adjust the time as needed, to be valid.
	    //
	    // Keeping the time actually adds/subtracts (one hour)
	    // from the actual represented time. That is why we call updateOffset
	    // a second time. In case it wants us to change the offset again
	    // _changeInProgress == true case, then we have to adjust, because
	    // there is no such time in the given timezone.
	    function getSetOffset(input, keepLocalTime, keepMinutes) {
	        var offset = this._offset || 0,
	            localAdjust;
	        if (!this.isValid()) {
	            return input != null ? this : NaN;
	        }
	        if (input != null) {
	            if (typeof input === 'string') {
	                input = offsetFromString(matchShortOffset, input);
	                if (input === null) {
	                    return this;
	                }
	            } else if (Math.abs(input) < 16 && !keepMinutes) {
	                input = input * 60;
	            }
	            if (!this._isUTC && keepLocalTime) {
	                localAdjust = getDateOffset(this);
	            }
	            this._offset = input;
	            this._isUTC = true;
	            if (localAdjust != null) {
	                this.add(localAdjust, 'm');
	            }
	            if (offset !== input) {
	                if (!keepLocalTime || this._changeInProgress) {
	                    addSubtract(
	                        this,
	                        createDuration(input - offset, 'm'),
	                        1,
	                        false
	                    );
	                } else if (!this._changeInProgress) {
	                    this._changeInProgress = true;
	                    hooks.updateOffset(this, true);
	                    this._changeInProgress = null;
	                }
	            }
	            return this;
	        } else {
	            return this._isUTC ? offset : getDateOffset(this);
	        }
	    }

	    function getSetZone(input, keepLocalTime) {
	        if (input != null) {
	            if (typeof input !== 'string') {
	                input = -input;
	            }

	            this.utcOffset(input, keepLocalTime);

	            return this;
	        } else {
	            return -this.utcOffset();
	        }
	    }

	    function setOffsetToUTC(keepLocalTime) {
	        return this.utcOffset(0, keepLocalTime);
	    }

	    function setOffsetToLocal(keepLocalTime) {
	        if (this._isUTC) {
	            this.utcOffset(0, keepLocalTime);
	            this._isUTC = false;

	            if (keepLocalTime) {
	                this.subtract(getDateOffset(this), 'm');
	            }
	        }
	        return this;
	    }

	    function setOffsetToParsedOffset() {
	        if (this._tzm != null) {
	            this.utcOffset(this._tzm, false, true);
	        } else if (typeof this._i === 'string') {
	            var tZone = offsetFromString(matchOffset, this._i);
	            if (tZone != null) {
	                this.utcOffset(tZone);
	            } else {
	                this.utcOffset(0, true);
	            }
	        }
	        return this;
	    }

	    function hasAlignedHourOffset(input) {
	        if (!this.isValid()) {
	            return false;
	        }
	        input = input ? createLocal(input).utcOffset() : 0;

	        return (this.utcOffset() - input) % 60 === 0;
	    }

	    function isDaylightSavingTime() {
	        return (
	            this.utcOffset() > this.clone().month(0).utcOffset() ||
	            this.utcOffset() > this.clone().month(5).utcOffset()
	        );
	    }

	    function isDaylightSavingTimeShifted() {
	        if (!isUndefined(this._isDSTShifted)) {
	            return this._isDSTShifted;
	        }

	        var c = {},
	            other;

	        copyConfig(c, this);
	        c = prepareConfig(c);

	        if (c._a) {
	            other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
	            this._isDSTShifted =
	                this.isValid() && compareArrays(c._a, other.toArray()) > 0;
	        } else {
	            this._isDSTShifted = false;
	        }

	        return this._isDSTShifted;
	    }

	    function isLocal() {
	        return this.isValid() ? !this._isUTC : false;
	    }

	    function isUtcOffset() {
	        return this.isValid() ? this._isUTC : false;
	    }

	    function isUtc() {
	        return this.isValid() ? this._isUTC && this._offset === 0 : false;
	    }

	    // ASP.NET json date format regex
	    var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
	        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
	        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
	        // and further modified to allow for strings containing both week and day
	        isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

	    function createDuration(input, key) {
	        var duration = input,
	            // matching against regexp is expensive, do it on demand
	            match = null,
	            sign,
	            ret,
	            diffRes;

	        if (isDuration(input)) {
	            duration = {
	                ms: input._milliseconds,
	                d: input._days,
	                M: input._months,
	            };
	        } else if (isNumber(input) || !isNaN(+input)) {
	            duration = {};
	            if (key) {
	                duration[key] = +input;
	            } else {
	                duration.milliseconds = +input;
	            }
	        } else if ((match = aspNetRegex.exec(input))) {
	            sign = match[1] === '-' ? -1 : 1;
	            duration = {
	                y: 0,
	                d: toInt(match[DATE]) * sign,
	                h: toInt(match[HOUR]) * sign,
	                m: toInt(match[MINUTE]) * sign,
	                s: toInt(match[SECOND]) * sign,
	                ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign, // the millisecond decimal point is included in the match
	            };
	        } else if ((match = isoRegex.exec(input))) {
	            sign = match[1] === '-' ? -1 : 1;
	            duration = {
	                y: parseIso(match[2], sign),
	                M: parseIso(match[3], sign),
	                w: parseIso(match[4], sign),
	                d: parseIso(match[5], sign),
	                h: parseIso(match[6], sign),
	                m: parseIso(match[7], sign),
	                s: parseIso(match[8], sign),
	            };
	        } else if (duration == null) {
	            // checks for null or undefined
	            duration = {};
	        } else if (
	            typeof duration === 'object' &&
	            ('from' in duration || 'to' in duration)
	        ) {
	            diffRes = momentsDifference(
	                createLocal(duration.from),
	                createLocal(duration.to)
	            );

	            duration = {};
	            duration.ms = diffRes.milliseconds;
	            duration.M = diffRes.months;
	        }

	        ret = new Duration(duration);

	        if (isDuration(input) && hasOwnProp(input, '_locale')) {
	            ret._locale = input._locale;
	        }

	        if (isDuration(input) && hasOwnProp(input, '_isValid')) {
	            ret._isValid = input._isValid;
	        }

	        return ret;
	    }

	    createDuration.fn = Duration.prototype;
	    createDuration.invalid = createInvalid$1;

	    function parseIso(inp, sign) {
	        // We'd normally use ~~inp for this, but unfortunately it also
	        // converts floats to ints.
	        // inp may be undefined, so careful calling replace on it.
	        var res = inp && parseFloat(inp.replace(',', '.'));
	        // apply sign while we're at it
	        return (isNaN(res) ? 0 : res) * sign;
	    }

	    function positiveMomentsDifference(base, other) {
	        var res = {};

	        res.months =
	            other.month() - base.month() + (other.year() - base.year()) * 12;
	        if (base.clone().add(res.months, 'M').isAfter(other)) {
	            --res.months;
	        }

	        res.milliseconds = +other - +base.clone().add(res.months, 'M');

	        return res;
	    }

	    function momentsDifference(base, other) {
	        var res;
	        if (!(base.isValid() && other.isValid())) {
	            return { milliseconds: 0, months: 0 };
	        }

	        other = cloneWithOffset(other, base);
	        if (base.isBefore(other)) {
	            res = positiveMomentsDifference(base, other);
	        } else {
	            res = positiveMomentsDifference(other, base);
	            res.milliseconds = -res.milliseconds;
	            res.months = -res.months;
	        }

	        return res;
	    }

	    // TODO: remove 'name' arg after deprecation is removed
	    function createAdder(direction, name) {
	        return function (val, period) {
	            var dur, tmp;
	            //invert the arguments, but complain about it
	            if (period !== null && !isNaN(+period)) {
	                deprecateSimple(
	                    name,
	                    'moment().' +
	                        name +
	                        '(period, number) is deprecated. Please use moment().' +
	                        name +
	                        '(number, period). ' +
	                        'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.'
	                );
	                tmp = val;
	                val = period;
	                period = tmp;
	            }

	            dur = createDuration(val, period);
	            addSubtract(this, dur, direction);
	            return this;
	        };
	    }

	    function addSubtract(mom, duration, isAdding, updateOffset) {
	        var milliseconds = duration._milliseconds,
	            days = absRound(duration._days),
	            months = absRound(duration._months);

	        if (!mom.isValid()) {
	            // No op
	            return;
	        }

	        updateOffset = updateOffset == null ? true : updateOffset;

	        if (months) {
	            setMonth(mom, get(mom, 'Month') + months * isAdding);
	        }
	        if (days) {
	            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
	        }
	        if (milliseconds) {
	            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
	        }
	        if (updateOffset) {
	            hooks.updateOffset(mom, days || months);
	        }
	    }

	    var add = createAdder(1, 'add'),
	        subtract = createAdder(-1, 'subtract');

	    function isString(input) {
	        return typeof input === 'string' || input instanceof String;
	    }

	    // type MomentInput = Moment | Date | string | number | (number | string)[] | MomentInputObject | void; // null | undefined
	    function isMomentInput(input) {
	        return (
	            isMoment(input) ||
	            isDate(input) ||
	            isString(input) ||
	            isNumber(input) ||
	            isNumberOrStringArray(input) ||
	            isMomentInputObject(input) ||
	            input === null ||
	            input === undefined
	        );
	    }

	    function isMomentInputObject(input) {
	        var objectTest = isObject(input) && !isObjectEmpty(input),
	            propertyTest = false,
	            properties = [
	                'years',
	                'year',
	                'y',
	                'months',
	                'month',
	                'M',
	                'days',
	                'day',
	                'd',
	                'dates',
	                'date',
	                'D',
	                'hours',
	                'hour',
	                'h',
	                'minutes',
	                'minute',
	                'm',
	                'seconds',
	                'second',
	                's',
	                'milliseconds',
	                'millisecond',
	                'ms',
	            ],
	            i,
	            property;

	        for (i = 0; i < properties.length; i += 1) {
	            property = properties[i];
	            propertyTest = propertyTest || hasOwnProp(input, property);
	        }

	        return objectTest && propertyTest;
	    }

	    function isNumberOrStringArray(input) {
	        var arrayTest = isArray(input),
	            dataTypeTest = false;
	        if (arrayTest) {
	            dataTypeTest =
	                input.filter(function (item) {
	                    return !isNumber(item) && isString(input);
	                }).length === 0;
	        }
	        return arrayTest && dataTypeTest;
	    }

	    function isCalendarSpec(input) {
	        var objectTest = isObject(input) && !isObjectEmpty(input),
	            propertyTest = false,
	            properties = [
	                'sameDay',
	                'nextDay',
	                'lastDay',
	                'nextWeek',
	                'lastWeek',
	                'sameElse',
	            ],
	            i,
	            property;

	        for (i = 0; i < properties.length; i += 1) {
	            property = properties[i];
	            propertyTest = propertyTest || hasOwnProp(input, property);
	        }

	        return objectTest && propertyTest;
	    }

	    function getCalendarFormat(myMoment, now) {
	        var diff = myMoment.diff(now, 'days', true);
	        return diff < -6
	            ? 'sameElse'
	            : diff < -1
	            ? 'lastWeek'
	            : diff < 0
	            ? 'lastDay'
	            : diff < 1
	            ? 'sameDay'
	            : diff < 2
	            ? 'nextDay'
	            : diff < 7
	            ? 'nextWeek'
	            : 'sameElse';
	    }

	    function calendar$1(time, formats) {
	        // Support for single parameter, formats only overload to the calendar function
	        if (arguments.length === 1) {
	            if (isMomentInput(arguments[0])) {
	                time = arguments[0];
	                formats = undefined;
	            } else if (isCalendarSpec(arguments[0])) {
	                formats = arguments[0];
	                time = undefined;
	            }
	        }
	        // We want to compare the start of today, vs this.
	        // Getting start-of-today depends on whether we're local/utc/offset or not.
	        var now = time || createLocal(),
	            sod = cloneWithOffset(now, this).startOf('day'),
	            format = hooks.calendarFormat(this, sod) || 'sameElse',
	            output =
	                formats &&
	                (isFunction(formats[format])
	                    ? formats[format].call(this, now)
	                    : formats[format]);

	        return this.format(
	            output || this.localeData().calendar(format, this, createLocal(now))
	        );
	    }

	    function clone() {
	        return new Moment(this);
	    }

	    function isAfter(input, units) {
	        var localInput = isMoment(input) ? input : createLocal(input);
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(units) || 'millisecond';
	        if (units === 'millisecond') {
	            return this.valueOf() > localInput.valueOf();
	        } else {
	            return localInput.valueOf() < this.clone().startOf(units).valueOf();
	        }
	    }

	    function isBefore(input, units) {
	        var localInput = isMoment(input) ? input : createLocal(input);
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(units) || 'millisecond';
	        if (units === 'millisecond') {
	            return this.valueOf() < localInput.valueOf();
	        } else {
	            return this.clone().endOf(units).valueOf() < localInput.valueOf();
	        }
	    }

	    function isBetween(from, to, units, inclusivity) {
	        var localFrom = isMoment(from) ? from : createLocal(from),
	            localTo = isMoment(to) ? to : createLocal(to);
	        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
	            return false;
	        }
	        inclusivity = inclusivity || '()';
	        return (
	            (inclusivity[0] === '('
	                ? this.isAfter(localFrom, units)
	                : !this.isBefore(localFrom, units)) &&
	            (inclusivity[1] === ')'
	                ? this.isBefore(localTo, units)
	                : !this.isAfter(localTo, units))
	        );
	    }

	    function isSame(input, units) {
	        var localInput = isMoment(input) ? input : createLocal(input),
	            inputMs;
	        if (!(this.isValid() && localInput.isValid())) {
	            return false;
	        }
	        units = normalizeUnits(units) || 'millisecond';
	        if (units === 'millisecond') {
	            return this.valueOf() === localInput.valueOf();
	        } else {
	            inputMs = localInput.valueOf();
	            return (
	                this.clone().startOf(units).valueOf() <= inputMs &&
	                inputMs <= this.clone().endOf(units).valueOf()
	            );
	        }
	    }

	    function isSameOrAfter(input, units) {
	        return this.isSame(input, units) || this.isAfter(input, units);
	    }

	    function isSameOrBefore(input, units) {
	        return this.isSame(input, units) || this.isBefore(input, units);
	    }

	    function diff(input, units, asFloat) {
	        var that, zoneDelta, output;

	        if (!this.isValid()) {
	            return NaN;
	        }

	        that = cloneWithOffset(input, this);

	        if (!that.isValid()) {
	            return NaN;
	        }

	        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

	        units = normalizeUnits(units);

	        switch (units) {
	            case 'year':
	                output = monthDiff(this, that) / 12;
	                break;
	            case 'month':
	                output = monthDiff(this, that);
	                break;
	            case 'quarter':
	                output = monthDiff(this, that) / 3;
	                break;
	            case 'second':
	                output = (this - that) / 1e3;
	                break; // 1000
	            case 'minute':
	                output = (this - that) / 6e4;
	                break; // 1000 * 60
	            case 'hour':
	                output = (this - that) / 36e5;
	                break; // 1000 * 60 * 60
	            case 'day':
	                output = (this - that - zoneDelta) / 864e5;
	                break; // 1000 * 60 * 60 * 24, negate dst
	            case 'week':
	                output = (this - that - zoneDelta) / 6048e5;
	                break; // 1000 * 60 * 60 * 24 * 7, negate dst
	            default:
	                output = this - that;
	        }

	        return asFloat ? output : absFloor(output);
	    }

	    function monthDiff(a, b) {
	        if (a.date() < b.date()) {
	            // end-of-month calculations work correct when the start month has more
	            // days than the end month.
	            return -monthDiff(b, a);
	        }
	        // difference in months
	        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
	            // b is in (anchor - 1 month, anchor + 1 month)
	            anchor = a.clone().add(wholeMonthDiff, 'months'),
	            anchor2,
	            adjust;

	        if (b - anchor < 0) {
	            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
	            // linear across the month
	            adjust = (b - anchor) / (anchor - anchor2);
	        } else {
	            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
	            // linear across the month
	            adjust = (b - anchor) / (anchor2 - anchor);
	        }

	        //check for negative zero, return zero if negative zero
	        return -(wholeMonthDiff + adjust) || 0;
	    }

	    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
	    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

	    function toString() {
	        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
	    }

	    function toISOString(keepOffset) {
	        if (!this.isValid()) {
	            return null;
	        }
	        var utc = keepOffset !== true,
	            m = utc ? this.clone().utc() : this;
	        if (m.year() < 0 || m.year() > 9999) {
	            return formatMoment(
	                m,
	                utc
	                    ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]'
	                    : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ'
	            );
	        }
	        if (isFunction(Date.prototype.toISOString)) {
	            // native implementation is ~50x faster, use it when we can
	            if (utc) {
	                return this.toDate().toISOString();
	            } else {
	                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000)
	                    .toISOString()
	                    .replace('Z', formatMoment(m, 'Z'));
	            }
	        }
	        return formatMoment(
	            m,
	            utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ'
	        );
	    }

	    /**
	     * Return a human readable representation of a moment that can
	     * also be evaluated to get a new moment which is the same
	     *
	     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
	     */
	    function inspect() {
	        if (!this.isValid()) {
	            return 'moment.invalid(/* ' + this._i + ' */)';
	        }
	        var func = 'moment',
	            zone = '',
	            prefix,
	            year,
	            datetime,
	            suffix;
	        if (!this.isLocal()) {
	            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
	            zone = 'Z';
	        }
	        prefix = '[' + func + '("]';
	        year = 0 <= this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
	        datetime = '-MM-DD[T]HH:mm:ss.SSS';
	        suffix = zone + '[")]';

	        return this.format(prefix + year + datetime + suffix);
	    }

	    function format(inputString) {
	        if (!inputString) {
	            inputString = this.isUtc()
	                ? hooks.defaultFormatUtc
	                : hooks.defaultFormat;
	        }
	        var output = formatMoment(this, inputString);
	        return this.localeData().postformat(output);
	    }

	    function from(time, withoutSuffix) {
	        if (
	            this.isValid() &&
	            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
	        ) {
	            return createDuration({ to: this, from: time })
	                .locale(this.locale())
	                .humanize(!withoutSuffix);
	        } else {
	            return this.localeData().invalidDate();
	        }
	    }

	    function fromNow(withoutSuffix) {
	        return this.from(createLocal(), withoutSuffix);
	    }

	    function to(time, withoutSuffix) {
	        if (
	            this.isValid() &&
	            ((isMoment(time) && time.isValid()) || createLocal(time).isValid())
	        ) {
	            return createDuration({ from: this, to: time })
	                .locale(this.locale())
	                .humanize(!withoutSuffix);
	        } else {
	            return this.localeData().invalidDate();
	        }
	    }

	    function toNow(withoutSuffix) {
	        return this.to(createLocal(), withoutSuffix);
	    }

	    // If passed a locale key, it will set the locale for this
	    // instance.  Otherwise, it will return the locale configuration
	    // variables for this instance.
	    function locale(key) {
	        var newLocaleData;

	        if (key === undefined) {
	            return this._locale._abbr;
	        } else {
	            newLocaleData = getLocale(key);
	            if (newLocaleData != null) {
	                this._locale = newLocaleData;
	            }
	            return this;
	        }
	    }

	    var lang = deprecate(
	        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
	        function (key) {
	            if (key === undefined) {
	                return this.localeData();
	            } else {
	                return this.locale(key);
	            }
	        }
	    );

	    function localeData() {
	        return this._locale;
	    }

	    var MS_PER_SECOND = 1000,
	        MS_PER_MINUTE = 60 * MS_PER_SECOND,
	        MS_PER_HOUR = 60 * MS_PER_MINUTE,
	        MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

	    // actual modulo - handles negative numbers (for dates before 1970):
	    function mod$1(dividend, divisor) {
	        return ((dividend % divisor) + divisor) % divisor;
	    }

	    function localStartOfDate(y, m, d) {
	        // the date constructor remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0) {
	            // preserve leap years using a full 400 year cycle, then reset
	            return new Date(y + 400, m, d) - MS_PER_400_YEARS;
	        } else {
	            return new Date(y, m, d).valueOf();
	        }
	    }

	    function utcStartOfDate(y, m, d) {
	        // Date.UTC remaps years 0-99 to 1900-1999
	        if (y < 100 && y >= 0) {
	            // preserve leap years using a full 400 year cycle, then reset
	            return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
	        } else {
	            return Date.UTC(y, m, d);
	        }
	    }

	    function startOf(units) {
	        var time, startOfDate;
	        units = normalizeUnits(units);
	        if (units === undefined || units === 'millisecond' || !this.isValid()) {
	            return this;
	        }

	        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

	        switch (units) {
	            case 'year':
	                time = startOfDate(this.year(), 0, 1);
	                break;
	            case 'quarter':
	                time = startOfDate(
	                    this.year(),
	                    this.month() - (this.month() % 3),
	                    1
	                );
	                break;
	            case 'month':
	                time = startOfDate(this.year(), this.month(), 1);
	                break;
	            case 'week':
	                time = startOfDate(
	                    this.year(),
	                    this.month(),
	                    this.date() - this.weekday()
	                );
	                break;
	            case 'isoWeek':
	                time = startOfDate(
	                    this.year(),
	                    this.month(),
	                    this.date() - (this.isoWeekday() - 1)
	                );
	                break;
	            case 'day':
	            case 'date':
	                time = startOfDate(this.year(), this.month(), this.date());
	                break;
	            case 'hour':
	                time = this._d.valueOf();
	                time -= mod$1(
	                    time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
	                    MS_PER_HOUR
	                );
	                break;
	            case 'minute':
	                time = this._d.valueOf();
	                time -= mod$1(time, MS_PER_MINUTE);
	                break;
	            case 'second':
	                time = this._d.valueOf();
	                time -= mod$1(time, MS_PER_SECOND);
	                break;
	        }

	        this._d.setTime(time);
	        hooks.updateOffset(this, true);
	        return this;
	    }

	    function endOf(units) {
	        var time, startOfDate;
	        units = normalizeUnits(units);
	        if (units === undefined || units === 'millisecond' || !this.isValid()) {
	            return this;
	        }

	        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

	        switch (units) {
	            case 'year':
	                time = startOfDate(this.year() + 1, 0, 1) - 1;
	                break;
	            case 'quarter':
	                time =
	                    startOfDate(
	                        this.year(),
	                        this.month() - (this.month() % 3) + 3,
	                        1
	                    ) - 1;
	                break;
	            case 'month':
	                time = startOfDate(this.year(), this.month() + 1, 1) - 1;
	                break;
	            case 'week':
	                time =
	                    startOfDate(
	                        this.year(),
	                        this.month(),
	                        this.date() - this.weekday() + 7
	                    ) - 1;
	                break;
	            case 'isoWeek':
	                time =
	                    startOfDate(
	                        this.year(),
	                        this.month(),
	                        this.date() - (this.isoWeekday() - 1) + 7
	                    ) - 1;
	                break;
	            case 'day':
	            case 'date':
	                time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
	                break;
	            case 'hour':
	                time = this._d.valueOf();
	                time +=
	                    MS_PER_HOUR -
	                    mod$1(
	                        time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
	                        MS_PER_HOUR
	                    ) -
	                    1;
	                break;
	            case 'minute':
	                time = this._d.valueOf();
	                time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
	                break;
	            case 'second':
	                time = this._d.valueOf();
	                time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
	                break;
	        }

	        this._d.setTime(time);
	        hooks.updateOffset(this, true);
	        return this;
	    }

	    function valueOf() {
	        return this._d.valueOf() - (this._offset || 0) * 60000;
	    }

	    function unix() {
	        return Math.floor(this.valueOf() / 1000);
	    }

	    function toDate() {
	        return new Date(this.valueOf());
	    }

	    function toArray() {
	        var m = this;
	        return [
	            m.year(),
	            m.month(),
	            m.date(),
	            m.hour(),
	            m.minute(),
	            m.second(),
	            m.millisecond(),
	        ];
	    }

	    function toObject() {
	        var m = this;
	        return {
	            years: m.year(),
	            months: m.month(),
	            date: m.date(),
	            hours: m.hours(),
	            minutes: m.minutes(),
	            seconds: m.seconds(),
	            milliseconds: m.milliseconds(),
	        };
	    }

	    function toJSON() {
	        // new Date(NaN).toJSON() === null
	        return this.isValid() ? this.toISOString() : null;
	    }

	    function isValid$2() {
	        return isValid(this);
	    }

	    function parsingFlags() {
	        return extend({}, getParsingFlags(this));
	    }

	    function invalidAt() {
	        return getParsingFlags(this).overflow;
	    }

	    function creationData() {
	        return {
	            input: this._i,
	            format: this._f,
	            locale: this._locale,
	            isUTC: this._isUTC,
	            strict: this._strict,
	        };
	    }

	    addFormatToken('N', 0, 0, 'eraAbbr');
	    addFormatToken('NN', 0, 0, 'eraAbbr');
	    addFormatToken('NNN', 0, 0, 'eraAbbr');
	    addFormatToken('NNNN', 0, 0, 'eraName');
	    addFormatToken('NNNNN', 0, 0, 'eraNarrow');

	    addFormatToken('y', ['y', 1], 'yo', 'eraYear');
	    addFormatToken('y', ['yy', 2], 0, 'eraYear');
	    addFormatToken('y', ['yyy', 3], 0, 'eraYear');
	    addFormatToken('y', ['yyyy', 4], 0, 'eraYear');

	    addRegexToken('N', matchEraAbbr);
	    addRegexToken('NN', matchEraAbbr);
	    addRegexToken('NNN', matchEraAbbr);
	    addRegexToken('NNNN', matchEraName);
	    addRegexToken('NNNNN', matchEraNarrow);

	    addParseToken(['N', 'NN', 'NNN', 'NNNN', 'NNNNN'], function (
	        input,
	        array,
	        config,
	        token
	    ) {
	        var era = config._locale.erasParse(input, token, config._strict);
	        if (era) {
	            getParsingFlags(config).era = era;
	        } else {
	            getParsingFlags(config).invalidEra = input;
	        }
	    });

	    addRegexToken('y', matchUnsigned);
	    addRegexToken('yy', matchUnsigned);
	    addRegexToken('yyy', matchUnsigned);
	    addRegexToken('yyyy', matchUnsigned);
	    addRegexToken('yo', matchEraYearOrdinal);

	    addParseToken(['y', 'yy', 'yyy', 'yyyy'], YEAR);
	    addParseToken(['yo'], function (input, array, config, token) {
	        var match;
	        if (config._locale._eraYearOrdinalRegex) {
	            match = input.match(config._locale._eraYearOrdinalRegex);
	        }

	        if (config._locale.eraYearOrdinalParse) {
	            array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
	        } else {
	            array[YEAR] = parseInt(input, 10);
	        }
	    });

	    function localeEras(m, format) {
	        var i,
	            l,
	            date,
	            eras = this._eras || getLocale('en')._eras;
	        for (i = 0, l = eras.length; i < l; ++i) {
	            switch (typeof eras[i].since) {
	                case 'string':
	                    // truncate time
	                    date = hooks(eras[i].since).startOf('day');
	                    eras[i].since = date.valueOf();
	                    break;
	            }

	            switch (typeof eras[i].until) {
	                case 'undefined':
	                    eras[i].until = +Infinity;
	                    break;
	                case 'string':
	                    // truncate time
	                    date = hooks(eras[i].until).startOf('day').valueOf();
	                    eras[i].until = date.valueOf();
	                    break;
	            }
	        }
	        return eras;
	    }

	    function localeErasParse(eraName, format, strict) {
	        var i,
	            l,
	            eras = this.eras(),
	            name,
	            abbr,
	            narrow;
	        eraName = eraName.toUpperCase();

	        for (i = 0, l = eras.length; i < l; ++i) {
	            name = eras[i].name.toUpperCase();
	            abbr = eras[i].abbr.toUpperCase();
	            narrow = eras[i].narrow.toUpperCase();

	            if (strict) {
	                switch (format) {
	                    case 'N':
	                    case 'NN':
	                    case 'NNN':
	                        if (abbr === eraName) {
	                            return eras[i];
	                        }
	                        break;

	                    case 'NNNN':
	                        if (name === eraName) {
	                            return eras[i];
	                        }
	                        break;

	                    case 'NNNNN':
	                        if (narrow === eraName) {
	                            return eras[i];
	                        }
	                        break;
	                }
	            } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
	                return eras[i];
	            }
	        }
	    }

	    function localeErasConvertYear(era, year) {
	        var dir = era.since <= era.until ? +1 : -1;
	        if (year === undefined) {
	            return hooks(era.since).year();
	        } else {
	            return hooks(era.since).year() + (year - era.offset) * dir;
	        }
	    }

	    function getEraName() {
	        var i,
	            l,
	            val,
	            eras = this.localeData().eras();
	        for (i = 0, l = eras.length; i < l; ++i) {
	            // truncate time
	            val = this.startOf('day').valueOf();

	            if (eras[i].since <= val && val <= eras[i].until) {
	                return eras[i].name;
	            }
	            if (eras[i].until <= val && val <= eras[i].since) {
	                return eras[i].name;
	            }
	        }

	        return '';
	    }

	    function getEraNarrow() {
	        var i,
	            l,
	            val,
	            eras = this.localeData().eras();
	        for (i = 0, l = eras.length; i < l; ++i) {
	            // truncate time
	            val = this.startOf('day').valueOf();

	            if (eras[i].since <= val && val <= eras[i].until) {
	                return eras[i].narrow;
	            }
	            if (eras[i].until <= val && val <= eras[i].since) {
	                return eras[i].narrow;
	            }
	        }

	        return '';
	    }

	    function getEraAbbr() {
	        var i,
	            l,
	            val,
	            eras = this.localeData().eras();
	        for (i = 0, l = eras.length; i < l; ++i) {
	            // truncate time
	            val = this.startOf('day').valueOf();

	            if (eras[i].since <= val && val <= eras[i].until) {
	                return eras[i].abbr;
	            }
	            if (eras[i].until <= val && val <= eras[i].since) {
	                return eras[i].abbr;
	            }
	        }

	        return '';
	    }

	    function getEraYear() {
	        var i,
	            l,
	            dir,
	            val,
	            eras = this.localeData().eras();
	        for (i = 0, l = eras.length; i < l; ++i) {
	            dir = eras[i].since <= eras[i].until ? +1 : -1;

	            // truncate time
	            val = this.startOf('day').valueOf();

	            if (
	                (eras[i].since <= val && val <= eras[i].until) ||
	                (eras[i].until <= val && val <= eras[i].since)
	            ) {
	                return (
	                    (this.year() - hooks(eras[i].since).year()) * dir +
	                    eras[i].offset
	                );
	            }
	        }

	        return this.year();
	    }

	    function erasNameRegex(isStrict) {
	        if (!hasOwnProp(this, '_erasNameRegex')) {
	            computeErasParse.call(this);
	        }
	        return isStrict ? this._erasNameRegex : this._erasRegex;
	    }

	    function erasAbbrRegex(isStrict) {
	        if (!hasOwnProp(this, '_erasAbbrRegex')) {
	            computeErasParse.call(this);
	        }
	        return isStrict ? this._erasAbbrRegex : this._erasRegex;
	    }

	    function erasNarrowRegex(isStrict) {
	        if (!hasOwnProp(this, '_erasNarrowRegex')) {
	            computeErasParse.call(this);
	        }
	        return isStrict ? this._erasNarrowRegex : this._erasRegex;
	    }

	    function matchEraAbbr(isStrict, locale) {
	        return locale.erasAbbrRegex(isStrict);
	    }

	    function matchEraName(isStrict, locale) {
	        return locale.erasNameRegex(isStrict);
	    }

	    function matchEraNarrow(isStrict, locale) {
	        return locale.erasNarrowRegex(isStrict);
	    }

	    function matchEraYearOrdinal(isStrict, locale) {
	        return locale._eraYearOrdinalRegex || matchUnsigned;
	    }

	    function computeErasParse() {
	        var abbrPieces = [],
	            namePieces = [],
	            narrowPieces = [],
	            mixedPieces = [],
	            i,
	            l,
	            eras = this.eras();

	        for (i = 0, l = eras.length; i < l; ++i) {
	            namePieces.push(regexEscape(eras[i].name));
	            abbrPieces.push(regexEscape(eras[i].abbr));
	            narrowPieces.push(regexEscape(eras[i].narrow));

	            mixedPieces.push(regexEscape(eras[i].name));
	            mixedPieces.push(regexEscape(eras[i].abbr));
	            mixedPieces.push(regexEscape(eras[i].narrow));
	        }

	        this._erasRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
	        this._erasNameRegex = new RegExp('^(' + namePieces.join('|') + ')', 'i');
	        this._erasAbbrRegex = new RegExp('^(' + abbrPieces.join('|') + ')', 'i');
	        this._erasNarrowRegex = new RegExp(
	            '^(' + narrowPieces.join('|') + ')',
	            'i'
	        );
	    }

	    // FORMATTING

	    addFormatToken(0, ['gg', 2], 0, function () {
	        return this.weekYear() % 100;
	    });

	    addFormatToken(0, ['GG', 2], 0, function () {
	        return this.isoWeekYear() % 100;
	    });

	    function addWeekYearFormatToken(token, getter) {
	        addFormatToken(0, [token, token.length], 0, getter);
	    }

	    addWeekYearFormatToken('gggg', 'weekYear');
	    addWeekYearFormatToken('ggggg', 'weekYear');
	    addWeekYearFormatToken('GGGG', 'isoWeekYear');
	    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

	    // ALIASES

	    addUnitAlias('weekYear', 'gg');
	    addUnitAlias('isoWeekYear', 'GG');

	    // PRIORITY

	    addUnitPriority('weekYear', 1);
	    addUnitPriority('isoWeekYear', 1);

	    // PARSING

	    addRegexToken('G', matchSigned);
	    addRegexToken('g', matchSigned);
	    addRegexToken('GG', match1to2, match2);
	    addRegexToken('gg', match1to2, match2);
	    addRegexToken('GGGG', match1to4, match4);
	    addRegexToken('gggg', match1to4, match4);
	    addRegexToken('GGGGG', match1to6, match6);
	    addRegexToken('ggggg', match1to6, match6);

	    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (
	        input,
	        week,
	        config,
	        token
	    ) {
	        week[token.substr(0, 2)] = toInt(input);
	    });

	    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
	        week[token] = hooks.parseTwoDigitYear(input);
	    });

	    // MOMENTS

	    function getSetWeekYear(input) {
	        return getSetWeekYearHelper.call(
	            this,
	            input,
	            this.week(),
	            this.weekday(),
	            this.localeData()._week.dow,
	            this.localeData()._week.doy
	        );
	    }

	    function getSetISOWeekYear(input) {
	        return getSetWeekYearHelper.call(
	            this,
	            input,
	            this.isoWeek(),
	            this.isoWeekday(),
	            1,
	            4
	        );
	    }

	    function getISOWeeksInYear() {
	        return weeksInYear(this.year(), 1, 4);
	    }

	    function getISOWeeksInISOWeekYear() {
	        return weeksInYear(this.isoWeekYear(), 1, 4);
	    }

	    function getWeeksInYear() {
	        var weekInfo = this.localeData()._week;
	        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
	    }

	    function getWeeksInWeekYear() {
	        var weekInfo = this.localeData()._week;
	        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
	    }

	    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
	        var weeksTarget;
	        if (input == null) {
	            return weekOfYear(this, dow, doy).year;
	        } else {
	            weeksTarget = weeksInYear(input, dow, doy);
	            if (week > weeksTarget) {
	                week = weeksTarget;
	            }
	            return setWeekAll.call(this, input, week, weekday, dow, doy);
	        }
	    }

	    function setWeekAll(weekYear, week, weekday, dow, doy) {
	        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
	            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

	        this.year(date.getUTCFullYear());
	        this.month(date.getUTCMonth());
	        this.date(date.getUTCDate());
	        return this;
	    }

	    // FORMATTING

	    addFormatToken('Q', 0, 'Qo', 'quarter');

	    // ALIASES

	    addUnitAlias('quarter', 'Q');

	    // PRIORITY

	    addUnitPriority('quarter', 7);

	    // PARSING

	    addRegexToken('Q', match1);
	    addParseToken('Q', function (input, array) {
	        array[MONTH] = (toInt(input) - 1) * 3;
	    });

	    // MOMENTS

	    function getSetQuarter(input) {
	        return input == null
	            ? Math.ceil((this.month() + 1) / 3)
	            : this.month((input - 1) * 3 + (this.month() % 3));
	    }

	    // FORMATTING

	    addFormatToken('D', ['DD', 2], 'Do', 'date');

	    // ALIASES

	    addUnitAlias('date', 'D');

	    // PRIORITY
	    addUnitPriority('date', 9);

	    // PARSING

	    addRegexToken('D', match1to2);
	    addRegexToken('DD', match1to2, match2);
	    addRegexToken('Do', function (isStrict, locale) {
	        // TODO: Remove "ordinalParse" fallback in next major release.
	        return isStrict
	            ? locale._dayOfMonthOrdinalParse || locale._ordinalParse
	            : locale._dayOfMonthOrdinalParseLenient;
	    });

	    addParseToken(['D', 'DD'], DATE);
	    addParseToken('Do', function (input, array) {
	        array[DATE] = toInt(input.match(match1to2)[0]);
	    });

	    // MOMENTS

	    var getSetDayOfMonth = makeGetSet('Date', true);

	    // FORMATTING

	    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

	    // ALIASES

	    addUnitAlias('dayOfYear', 'DDD');

	    // PRIORITY
	    addUnitPriority('dayOfYear', 4);

	    // PARSING

	    addRegexToken('DDD', match1to3);
	    addRegexToken('DDDD', match3);
	    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
	        config._dayOfYear = toInt(input);
	    });

	    // HELPERS

	    // MOMENTS

	    function getSetDayOfYear(input) {
	        var dayOfYear =
	            Math.round(
	                (this.clone().startOf('day') - this.clone().startOf('year')) / 864e5
	            ) + 1;
	        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd');
	    }

	    // FORMATTING

	    addFormatToken('m', ['mm', 2], 0, 'minute');

	    // ALIASES

	    addUnitAlias('minute', 'm');

	    // PRIORITY

	    addUnitPriority('minute', 14);

	    // PARSING

	    addRegexToken('m', match1to2);
	    addRegexToken('mm', match1to2, match2);
	    addParseToken(['m', 'mm'], MINUTE);

	    // MOMENTS

	    var getSetMinute = makeGetSet('Minutes', false);

	    // FORMATTING

	    addFormatToken('s', ['ss', 2], 0, 'second');

	    // ALIASES

	    addUnitAlias('second', 's');

	    // PRIORITY

	    addUnitPriority('second', 15);

	    // PARSING

	    addRegexToken('s', match1to2);
	    addRegexToken('ss', match1to2, match2);
	    addParseToken(['s', 'ss'], SECOND);

	    // MOMENTS

	    var getSetSecond = makeGetSet('Seconds', false);

	    // FORMATTING

	    addFormatToken('S', 0, 0, function () {
	        return ~~(this.millisecond() / 100);
	    });

	    addFormatToken(0, ['SS', 2], 0, function () {
	        return ~~(this.millisecond() / 10);
	    });

	    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
	    addFormatToken(0, ['SSSS', 4], 0, function () {
	        return this.millisecond() * 10;
	    });
	    addFormatToken(0, ['SSSSS', 5], 0, function () {
	        return this.millisecond() * 100;
	    });
	    addFormatToken(0, ['SSSSSS', 6], 0, function () {
	        return this.millisecond() * 1000;
	    });
	    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
	        return this.millisecond() * 10000;
	    });
	    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
	        return this.millisecond() * 100000;
	    });
	    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
	        return this.millisecond() * 1000000;
	    });

	    // ALIASES

	    addUnitAlias('millisecond', 'ms');

	    // PRIORITY

	    addUnitPriority('millisecond', 16);

	    // PARSING

	    addRegexToken('S', match1to3, match1);
	    addRegexToken('SS', match1to3, match2);
	    addRegexToken('SSS', match1to3, match3);

	    var token, getSetMillisecond;
	    for (token = 'SSSS'; token.length <= 9; token += 'S') {
	        addRegexToken(token, matchUnsigned);
	    }

	    function parseMs(input, array) {
	        array[MILLISECOND] = toInt(('0.' + input) * 1000);
	    }

	    for (token = 'S'; token.length <= 9; token += 'S') {
	        addParseToken(token, parseMs);
	    }

	    getSetMillisecond = makeGetSet('Milliseconds', false);

	    // FORMATTING

	    addFormatToken('z', 0, 0, 'zoneAbbr');
	    addFormatToken('zz', 0, 0, 'zoneName');

	    // MOMENTS

	    function getZoneAbbr() {
	        return this._isUTC ? 'UTC' : '';
	    }

	    function getZoneName() {
	        return this._isUTC ? 'Coordinated Universal Time' : '';
	    }

	    var proto = Moment.prototype;

	    proto.add = add;
	    proto.calendar = calendar$1;
	    proto.clone = clone;
	    proto.diff = diff;
	    proto.endOf = endOf;
	    proto.format = format;
	    proto.from = from;
	    proto.fromNow = fromNow;
	    proto.to = to;
	    proto.toNow = toNow;
	    proto.get = stringGet;
	    proto.invalidAt = invalidAt;
	    proto.isAfter = isAfter;
	    proto.isBefore = isBefore;
	    proto.isBetween = isBetween;
	    proto.isSame = isSame;
	    proto.isSameOrAfter = isSameOrAfter;
	    proto.isSameOrBefore = isSameOrBefore;
	    proto.isValid = isValid$2;
	    proto.lang = lang;
	    proto.locale = locale;
	    proto.localeData = localeData;
	    proto.max = prototypeMax;
	    proto.min = prototypeMin;
	    proto.parsingFlags = parsingFlags;
	    proto.set = stringSet;
	    proto.startOf = startOf;
	    proto.subtract = subtract;
	    proto.toArray = toArray;
	    proto.toObject = toObject;
	    proto.toDate = toDate;
	    proto.toISOString = toISOString;
	    proto.inspect = inspect;
	    if (typeof Symbol !== 'undefined' && Symbol.for != null) {
	        proto[Symbol.for('nodejs.util.inspect.custom')] = function () {
	            return 'Moment<' + this.format() + '>';
	        };
	    }
	    proto.toJSON = toJSON;
	    proto.toString = toString;
	    proto.unix = unix;
	    proto.valueOf = valueOf;
	    proto.creationData = creationData;
	    proto.eraName = getEraName;
	    proto.eraNarrow = getEraNarrow;
	    proto.eraAbbr = getEraAbbr;
	    proto.eraYear = getEraYear;
	    proto.year = getSetYear;
	    proto.isLeapYear = getIsLeapYear;
	    proto.weekYear = getSetWeekYear;
	    proto.isoWeekYear = getSetISOWeekYear;
	    proto.quarter = proto.quarters = getSetQuarter;
	    proto.month = getSetMonth;
	    proto.daysInMonth = getDaysInMonth;
	    proto.week = proto.weeks = getSetWeek;
	    proto.isoWeek = proto.isoWeeks = getSetISOWeek;
	    proto.weeksInYear = getWeeksInYear;
	    proto.weeksInWeekYear = getWeeksInWeekYear;
	    proto.isoWeeksInYear = getISOWeeksInYear;
	    proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
	    proto.date = getSetDayOfMonth;
	    proto.day = proto.days = getSetDayOfWeek;
	    proto.weekday = getSetLocaleDayOfWeek;
	    proto.isoWeekday = getSetISODayOfWeek;
	    proto.dayOfYear = getSetDayOfYear;
	    proto.hour = proto.hours = getSetHour;
	    proto.minute = proto.minutes = getSetMinute;
	    proto.second = proto.seconds = getSetSecond;
	    proto.millisecond = proto.milliseconds = getSetMillisecond;
	    proto.utcOffset = getSetOffset;
	    proto.utc = setOffsetToUTC;
	    proto.local = setOffsetToLocal;
	    proto.parseZone = setOffsetToParsedOffset;
	    proto.hasAlignedHourOffset = hasAlignedHourOffset;
	    proto.isDST = isDaylightSavingTime;
	    proto.isLocal = isLocal;
	    proto.isUtcOffset = isUtcOffset;
	    proto.isUtc = isUtc;
	    proto.isUTC = isUtc;
	    proto.zoneAbbr = getZoneAbbr;
	    proto.zoneName = getZoneName;
	    proto.dates = deprecate(
	        'dates accessor is deprecated. Use date instead.',
	        getSetDayOfMonth
	    );
	    proto.months = deprecate(
	        'months accessor is deprecated. Use month instead',
	        getSetMonth
	    );
	    proto.years = deprecate(
	        'years accessor is deprecated. Use year instead',
	        getSetYear
	    );
	    proto.zone = deprecate(
	        'moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/',
	        getSetZone
	    );
	    proto.isDSTShifted = deprecate(
	        'isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information',
	        isDaylightSavingTimeShifted
	    );

	    function createUnix(input) {
	        return createLocal(input * 1000);
	    }

	    function createInZone() {
	        return createLocal.apply(null, arguments).parseZone();
	    }

	    function preParsePostFormat(string) {
	        return string;
	    }

	    var proto$1 = Locale.prototype;

	    proto$1.calendar = calendar;
	    proto$1.longDateFormat = longDateFormat;
	    proto$1.invalidDate = invalidDate;
	    proto$1.ordinal = ordinal;
	    proto$1.preparse = preParsePostFormat;
	    proto$1.postformat = preParsePostFormat;
	    proto$1.relativeTime = relativeTime;
	    proto$1.pastFuture = pastFuture;
	    proto$1.set = set;
	    proto$1.eras = localeEras;
	    proto$1.erasParse = localeErasParse;
	    proto$1.erasConvertYear = localeErasConvertYear;
	    proto$1.erasAbbrRegex = erasAbbrRegex;
	    proto$1.erasNameRegex = erasNameRegex;
	    proto$1.erasNarrowRegex = erasNarrowRegex;

	    proto$1.months = localeMonths;
	    proto$1.monthsShort = localeMonthsShort;
	    proto$1.monthsParse = localeMonthsParse;
	    proto$1.monthsRegex = monthsRegex;
	    proto$1.monthsShortRegex = monthsShortRegex;
	    proto$1.week = localeWeek;
	    proto$1.firstDayOfYear = localeFirstDayOfYear;
	    proto$1.firstDayOfWeek = localeFirstDayOfWeek;

	    proto$1.weekdays = localeWeekdays;
	    proto$1.weekdaysMin = localeWeekdaysMin;
	    proto$1.weekdaysShort = localeWeekdaysShort;
	    proto$1.weekdaysParse = localeWeekdaysParse;

	    proto$1.weekdaysRegex = weekdaysRegex;
	    proto$1.weekdaysShortRegex = weekdaysShortRegex;
	    proto$1.weekdaysMinRegex = weekdaysMinRegex;

	    proto$1.isPM = localeIsPM;
	    proto$1.meridiem = localeMeridiem;

	    function get$1(format, index, field, setter) {
	        var locale = getLocale(),
	            utc = createUTC().set(setter, index);
	        return locale[field](utc, format);
	    }

	    function listMonthsImpl(format, index, field) {
	        if (isNumber(format)) {
	            index = format;
	            format = undefined;
	        }

	        format = format || '';

	        if (index != null) {
	            return get$1(format, index, field, 'month');
	        }

	        var i,
	            out = [];
	        for (i = 0; i < 12; i++) {
	            out[i] = get$1(format, i, field, 'month');
	        }
	        return out;
	    }

	    // ()
	    // (5)
	    // (fmt, 5)
	    // (fmt)
	    // (true)
	    // (true, 5)
	    // (true, fmt, 5)
	    // (true, fmt)
	    function listWeekdaysImpl(localeSorted, format, index, field) {
	        if (typeof localeSorted === 'boolean') {
	            if (isNumber(format)) {
	                index = format;
	                format = undefined;
	            }

	            format = format || '';
	        } else {
	            format = localeSorted;
	            index = format;
	            localeSorted = false;

	            if (isNumber(format)) {
	                index = format;
	                format = undefined;
	            }

	            format = format || '';
	        }

	        var locale = getLocale(),
	            shift = localeSorted ? locale._week.dow : 0,
	            i,
	            out = [];

	        if (index != null) {
	            return get$1(format, (index + shift) % 7, field, 'day');
	        }

	        for (i = 0; i < 7; i++) {
	            out[i] = get$1(format, (i + shift) % 7, field, 'day');
	        }
	        return out;
	    }

	    function listMonths(format, index) {
	        return listMonthsImpl(format, index, 'months');
	    }

	    function listMonthsShort(format, index) {
	        return listMonthsImpl(format, index, 'monthsShort');
	    }

	    function listWeekdays(localeSorted, format, index) {
	        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
	    }

	    function listWeekdaysShort(localeSorted, format, index) {
	        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
	    }

	    function listWeekdaysMin(localeSorted, format, index) {
	        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
	    }

	    getSetGlobalLocale('en', {
	        eras: [
	            {
	                since: '0001-01-01',
	                until: +Infinity,
	                offset: 1,
	                name: 'Anno Domini',
	                narrow: 'AD',
	                abbr: 'AD',
	            },
	            {
	                since: '0000-12-31',
	                until: -Infinity,
	                offset: 1,
	                name: 'Before Christ',
	                narrow: 'BC',
	                abbr: 'BC',
	            },
	        ],
	        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
	        ordinal: function (number) {
	            var b = number % 10,
	                output =
	                    toInt((number % 100) / 10) === 1
	                        ? 'th'
	                        : b === 1
	                        ? 'st'
	                        : b === 2
	                        ? 'nd'
	                        : b === 3
	                        ? 'rd'
	                        : 'th';
	            return number + output;
	        },
	    });

	    // Side effect imports

	    hooks.lang = deprecate(
	        'moment.lang is deprecated. Use moment.locale instead.',
	        getSetGlobalLocale
	    );
	    hooks.langData = deprecate(
	        'moment.langData is deprecated. Use moment.localeData instead.',
	        getLocale
	    );

	    var mathAbs = Math.abs;

	    function abs() {
	        var data = this._data;

	        this._milliseconds = mathAbs(this._milliseconds);
	        this._days = mathAbs(this._days);
	        this._months = mathAbs(this._months);

	        data.milliseconds = mathAbs(data.milliseconds);
	        data.seconds = mathAbs(data.seconds);
	        data.minutes = mathAbs(data.minutes);
	        data.hours = mathAbs(data.hours);
	        data.months = mathAbs(data.months);
	        data.years = mathAbs(data.years);

	        return this;
	    }

	    function addSubtract$1(duration, input, value, direction) {
	        var other = createDuration(input, value);

	        duration._milliseconds += direction * other._milliseconds;
	        duration._days += direction * other._days;
	        duration._months += direction * other._months;

	        return duration._bubble();
	    }

	    // supports only 2.0-style add(1, 's') or add(duration)
	    function add$1(input, value) {
	        return addSubtract$1(this, input, value, 1);
	    }

	    // supports only 2.0-style subtract(1, 's') or subtract(duration)
	    function subtract$1(input, value) {
	        return addSubtract$1(this, input, value, -1);
	    }

	    function absCeil(number) {
	        if (number < 0) {
	            return Math.floor(number);
	        } else {
	            return Math.ceil(number);
	        }
	    }

	    function bubble() {
	        var milliseconds = this._milliseconds,
	            days = this._days,
	            months = this._months,
	            data = this._data,
	            seconds,
	            minutes,
	            hours,
	            years,
	            monthsFromDays;

	        // if we have a mix of positive and negative values, bubble down first
	        // check: https://github.com/moment/moment/issues/2166
	        if (
	            !(
	                (milliseconds >= 0 && days >= 0 && months >= 0) ||
	                (milliseconds <= 0 && days <= 0 && months <= 0)
	            )
	        ) {
	            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
	            days = 0;
	            months = 0;
	        }

	        // The following code bubbles up values, see the tests for
	        // examples of what that means.
	        data.milliseconds = milliseconds % 1000;

	        seconds = absFloor(milliseconds / 1000);
	        data.seconds = seconds % 60;

	        minutes = absFloor(seconds / 60);
	        data.minutes = minutes % 60;

	        hours = absFloor(minutes / 60);
	        data.hours = hours % 24;

	        days += absFloor(hours / 24);

	        // convert days to months
	        monthsFromDays = absFloor(daysToMonths(days));
	        months += monthsFromDays;
	        days -= absCeil(monthsToDays(monthsFromDays));

	        // 12 months -> 1 year
	        years = absFloor(months / 12);
	        months %= 12;

	        data.days = days;
	        data.months = months;
	        data.years = years;

	        return this;
	    }

	    function daysToMonths(days) {
	        // 400 years have 146097 days (taking into account leap year rules)
	        // 400 years have 12 months === 4800
	        return (days * 4800) / 146097;
	    }

	    function monthsToDays(months) {
	        // the reverse of daysToMonths
	        return (months * 146097) / 4800;
	    }

	    function as(units) {
	        if (!this.isValid()) {
	            return NaN;
	        }
	        var days,
	            months,
	            milliseconds = this._milliseconds;

	        units = normalizeUnits(units);

	        if (units === 'month' || units === 'quarter' || units === 'year') {
	            days = this._days + milliseconds / 864e5;
	            months = this._months + daysToMonths(days);
	            switch (units) {
	                case 'month':
	                    return months;
	                case 'quarter':
	                    return months / 3;
	                case 'year':
	                    return months / 12;
	            }
	        } else {
	            // handle milliseconds separately because of floating point math errors (issue #1867)
	            days = this._days + Math.round(monthsToDays(this._months));
	            switch (units) {
	                case 'week':
	                    return days / 7 + milliseconds / 6048e5;
	                case 'day':
	                    return days + milliseconds / 864e5;
	                case 'hour':
	                    return days * 24 + milliseconds / 36e5;
	                case 'minute':
	                    return days * 1440 + milliseconds / 6e4;
	                case 'second':
	                    return days * 86400 + milliseconds / 1000;
	                // Math.floor prevents floating point math errors here
	                case 'millisecond':
	                    return Math.floor(days * 864e5) + milliseconds;
	                default:
	                    throw new Error('Unknown unit ' + units);
	            }
	        }
	    }

	    // TODO: Use this.as('ms')?
	    function valueOf$1() {
	        if (!this.isValid()) {
	            return NaN;
	        }
	        return (
	            this._milliseconds +
	            this._days * 864e5 +
	            (this._months % 12) * 2592e6 +
	            toInt(this._months / 12) * 31536e6
	        );
	    }

	    function makeAs(alias) {
	        return function () {
	            return this.as(alias);
	        };
	    }

	    var asMilliseconds = makeAs('ms'),
	        asSeconds = makeAs('s'),
	        asMinutes = makeAs('m'),
	        asHours = makeAs('h'),
	        asDays = makeAs('d'),
	        asWeeks = makeAs('w'),
	        asMonths = makeAs('M'),
	        asQuarters = makeAs('Q'),
	        asYears = makeAs('y');

	    function clone$1() {
	        return createDuration(this);
	    }

	    function get$2(units) {
	        units = normalizeUnits(units);
	        return this.isValid() ? this[units + 's']() : NaN;
	    }

	    function makeGetter(name) {
	        return function () {
	            return this.isValid() ? this._data[name] : NaN;
	        };
	    }

	    var milliseconds = makeGetter('milliseconds'),
	        seconds = makeGetter('seconds'),
	        minutes = makeGetter('minutes'),
	        hours = makeGetter('hours'),
	        days = makeGetter('days'),
	        months = makeGetter('months'),
	        years = makeGetter('years');

	    function weeks() {
	        return absFloor(this.days() / 7);
	    }

	    var round = Math.round,
	        thresholds = {
	            ss: 44, // a few seconds to seconds
	            s: 45, // seconds to minute
	            m: 45, // minutes to hour
	            h: 22, // hours to day
	            d: 26, // days to month/week
	            w: null, // weeks to month
	            M: 11, // months to year
	        };

	    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
	    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
	        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
	    }

	    function relativeTime$1(posNegDuration, withoutSuffix, thresholds, locale) {
	        var duration = createDuration(posNegDuration).abs(),
	            seconds = round(duration.as('s')),
	            minutes = round(duration.as('m')),
	            hours = round(duration.as('h')),
	            days = round(duration.as('d')),
	            months = round(duration.as('M')),
	            weeks = round(duration.as('w')),
	            years = round(duration.as('y')),
	            a =
	                (seconds <= thresholds.ss && ['s', seconds]) ||
	                (seconds < thresholds.s && ['ss', seconds]) ||
	                (minutes <= 1 && ['m']) ||
	                (minutes < thresholds.m && ['mm', minutes]) ||
	                (hours <= 1 && ['h']) ||
	                (hours < thresholds.h && ['hh', hours]) ||
	                (days <= 1 && ['d']) ||
	                (days < thresholds.d && ['dd', days]);

	        if (thresholds.w != null) {
	            a =
	                a ||
	                (weeks <= 1 && ['w']) ||
	                (weeks < thresholds.w && ['ww', weeks]);
	        }
	        a = a ||
	            (months <= 1 && ['M']) ||
	            (months < thresholds.M && ['MM', months]) ||
	            (years <= 1 && ['y']) || ['yy', years];

	        a[2] = withoutSuffix;
	        a[3] = +posNegDuration > 0;
	        a[4] = locale;
	        return substituteTimeAgo.apply(null, a);
	    }

	    // This function allows you to set the rounding function for relative time strings
	    function getSetRelativeTimeRounding(roundingFunction) {
	        if (roundingFunction === undefined) {
	            return round;
	        }
	        if (typeof roundingFunction === 'function') {
	            round = roundingFunction;
	            return true;
	        }
	        return false;
	    }

	    // This function allows you to set a threshold for relative time strings
	    function getSetRelativeTimeThreshold(threshold, limit) {
	        if (thresholds[threshold] === undefined) {
	            return false;
	        }
	        if (limit === undefined) {
	            return thresholds[threshold];
	        }
	        thresholds[threshold] = limit;
	        if (threshold === 's') {
	            thresholds.ss = limit - 1;
	        }
	        return true;
	    }

	    function humanize(argWithSuffix, argThresholds) {
	        if (!this.isValid()) {
	            return this.localeData().invalidDate();
	        }

	        var withSuffix = false,
	            th = thresholds,
	            locale,
	            output;

	        if (typeof argWithSuffix === 'object') {
	            argThresholds = argWithSuffix;
	            argWithSuffix = false;
	        }
	        if (typeof argWithSuffix === 'boolean') {
	            withSuffix = argWithSuffix;
	        }
	        if (typeof argThresholds === 'object') {
	            th = Object.assign({}, thresholds, argThresholds);
	            if (argThresholds.s != null && argThresholds.ss == null) {
	                th.ss = argThresholds.s - 1;
	            }
	        }

	        locale = this.localeData();
	        output = relativeTime$1(this, !withSuffix, th, locale);

	        if (withSuffix) {
	            output = locale.pastFuture(+this, output);
	        }

	        return locale.postformat(output);
	    }

	    var abs$1 = Math.abs;

	    function sign(x) {
	        return (x > 0) - (x < 0) || +x;
	    }

	    function toISOString$1() {
	        // for ISO strings we do not use the normal bubbling rules:
	        //  * milliseconds bubble up until they become hours
	        //  * days do not bubble at all
	        //  * months bubble up until they become years
	        // This is because there is no context-free conversion between hours and days
	        // (think of clock changes)
	        // and also not between days and months (28-31 days per month)
	        if (!this.isValid()) {
	            return this.localeData().invalidDate();
	        }

	        var seconds = abs$1(this._milliseconds) / 1000,
	            days = abs$1(this._days),
	            months = abs$1(this._months),
	            minutes,
	            hours,
	            years,
	            s,
	            total = this.asSeconds(),
	            totalSign,
	            ymSign,
	            daysSign,
	            hmsSign;

	        if (!total) {
	            // this is the same as C#'s (Noda) and python (isodate)...
	            // but not other JS (goog.date)
	            return 'P0D';
	        }

	        // 3600 seconds -> 60 minutes -> 1 hour
	        minutes = absFloor(seconds / 60);
	        hours = absFloor(minutes / 60);
	        seconds %= 60;
	        minutes %= 60;

	        // 12 months -> 1 year
	        years = absFloor(months / 12);
	        months %= 12;

	        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
	        s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';

	        totalSign = total < 0 ? '-' : '';
	        ymSign = sign(this._months) !== sign(total) ? '-' : '';
	        daysSign = sign(this._days) !== sign(total) ? '-' : '';
	        hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

	        return (
	            totalSign +
	            'P' +
	            (years ? ymSign + years + 'Y' : '') +
	            (months ? ymSign + months + 'M' : '') +
	            (days ? daysSign + days + 'D' : '') +
	            (hours || minutes || seconds ? 'T' : '') +
	            (hours ? hmsSign + hours + 'H' : '') +
	            (minutes ? hmsSign + minutes + 'M' : '') +
	            (seconds ? hmsSign + s + 'S' : '')
	        );
	    }

	    var proto$2 = Duration.prototype;

	    proto$2.isValid = isValid$1;
	    proto$2.abs = abs;
	    proto$2.add = add$1;
	    proto$2.subtract = subtract$1;
	    proto$2.as = as;
	    proto$2.asMilliseconds = asMilliseconds;
	    proto$2.asSeconds = asSeconds;
	    proto$2.asMinutes = asMinutes;
	    proto$2.asHours = asHours;
	    proto$2.asDays = asDays;
	    proto$2.asWeeks = asWeeks;
	    proto$2.asMonths = asMonths;
	    proto$2.asQuarters = asQuarters;
	    proto$2.asYears = asYears;
	    proto$2.valueOf = valueOf$1;
	    proto$2._bubble = bubble;
	    proto$2.clone = clone$1;
	    proto$2.get = get$2;
	    proto$2.milliseconds = milliseconds;
	    proto$2.seconds = seconds;
	    proto$2.minutes = minutes;
	    proto$2.hours = hours;
	    proto$2.days = days;
	    proto$2.weeks = weeks;
	    proto$2.months = months;
	    proto$2.years = years;
	    proto$2.humanize = humanize;
	    proto$2.toISOString = toISOString$1;
	    proto$2.toString = toISOString$1;
	    proto$2.toJSON = toISOString$1;
	    proto$2.locale = locale;
	    proto$2.localeData = localeData;

	    proto$2.toIsoString = deprecate(
	        'toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)',
	        toISOString$1
	    );
	    proto$2.lang = lang;

	    // FORMATTING

	    addFormatToken('X', 0, 0, 'unix');
	    addFormatToken('x', 0, 0, 'valueOf');

	    // PARSING

	    addRegexToken('x', matchSigned);
	    addRegexToken('X', matchTimestamp);
	    addParseToken('X', function (input, array, config) {
	        config._d = new Date(parseFloat(input) * 1000);
	    });
	    addParseToken('x', function (input, array, config) {
	        config._d = new Date(toInt(input));
	    });

	    //! moment.js

	    hooks.version = '2.27.0';

	    setHookCallback(createLocal);

	    hooks.fn = proto;
	    hooks.min = min;
	    hooks.max = max;
	    hooks.now = now;
	    hooks.utc = createUTC;
	    hooks.unix = createUnix;
	    hooks.months = listMonths;
	    hooks.isDate = isDate;
	    hooks.locale = getSetGlobalLocale;
	    hooks.invalid = createInvalid;
	    hooks.duration = createDuration;
	    hooks.isMoment = isMoment;
	    hooks.weekdays = listWeekdays;
	    hooks.parseZone = createInZone;
	    hooks.localeData = getLocale;
	    hooks.isDuration = isDuration;
	    hooks.monthsShort = listMonthsShort;
	    hooks.weekdaysMin = listWeekdaysMin;
	    hooks.defineLocale = defineLocale;
	    hooks.updateLocale = updateLocale;
	    hooks.locales = listLocales;
	    hooks.weekdaysShort = listWeekdaysShort;
	    hooks.normalizeUnits = normalizeUnits;
	    hooks.relativeTimeRounding = getSetRelativeTimeRounding;
	    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
	    hooks.calendarFormat = getCalendarFormat;
	    hooks.prototype = proto;

	    // currently HTML5 input type only supports 24-hour formats
	    hooks.HTML5_FMT = {
	        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm', // <input type="datetime-local" />
	        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss', // <input type="datetime-local" step="1" />
	        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS', // <input type="datetime-local" step="0.001" />
	        DATE: 'YYYY-MM-DD', // <input type="date" />
	        TIME: 'HH:mm', // <input type="time" />
	        TIME_SECONDS: 'HH:mm:ss', // <input type="time" step="1" />
	        TIME_MS: 'HH:mm:ss.SSS', // <input type="time" step="0.001" />
	        WEEK: 'GGGG-[W]WW', // <input type="week" />
	        MONTH: 'YYYY-MM', // <input type="month" />
	    };

	    return hooks;

	})));
	});

	function _classCallCheck$1(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _defineProperties$1(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass$1(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties$1(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties$1(Constructor, staticProps);
	  return Constructor;
	}

	function _defineProperty$2(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	function _extends$1() {
	  _extends$1 = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends$1.apply(this, arguments);
	}

	function ownKeys(object, enumerableOnly) {
	  var keys = Object.keys(object);

	  if (Object.getOwnPropertySymbols) {
	    var symbols = Object.getOwnPropertySymbols(object);
	    if (enumerableOnly) symbols = symbols.filter(function (sym) {
	      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
	    });
	    keys.push.apply(keys, symbols);
	  }

	  return keys;
	}

	function _objectSpread2(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i] != null ? arguments[i] : {};

	    if (i % 2) {
	      ownKeys(Object(source), true).forEach(function (key) {
	        _defineProperty$2(target, key, source[key]);
	      });
	    } else if (Object.getOwnPropertyDescriptors) {
	      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
	    } else {
	      ownKeys(Object(source)).forEach(function (key) {
	        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
	      });
	    }
	  }

	  return target;
	}

	function _inherits$1(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function");
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf$1(subClass, superClass);
	}

	function _getPrototypeOf$1(o) {
	  _getPrototypeOf$1 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
	    return o.__proto__ || Object.getPrototypeOf(o);
	  };
	  return _getPrototypeOf$1(o);
	}

	function _setPrototypeOf$1(o, p) {
	  _setPrototypeOf$1 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf$1(o, p);
	}

	function _isNativeReflectConstruct$1() {
	  if (typeof Reflect === "undefined" || !Reflect.construct) return false;
	  if (Reflect.construct.sham) return false;
	  if (typeof Proxy === "function") return true;

	  try {
	    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));
	    return true;
	  } catch (e) {
	    return false;
	  }
	}

	function _objectWithoutPropertiesLoose$2(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	function _objectWithoutProperties$2(source, excluded) {
	  if (source == null) return {};

	  var target = _objectWithoutPropertiesLoose$2(source, excluded);

	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	function _assertThisInitialized$1(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	function _possibleConstructorReturn$1(self, call) {
	  if (call && (typeof call === "object" || typeof call === "function")) {
	    return call;
	  }

	  return _assertThisInitialized$1(self);
	}

	function _createSuper$1(Derived) {
	  return function () {
	    var Super = _getPrototypeOf$1(Derived),
	        result;

	    if (_isNativeReflectConstruct$1()) {
	      var NewTarget = _getPrototypeOf$1(this).constructor;

	      result = Reflect.construct(Super, arguments, NewTarget);
	    } else {
	      result = Super.apply(this, arguments);
	    }

	    return _possibleConstructorReturn$1(this, result);
	  };
	}

	function _slicedToArray$1(arr, i) {
	  return _arrayWithHoles$1(arr) || _iterableToArrayLimit$1(arr, i) || _unsupportedIterableToArray$1(arr, i) || _nonIterableRest$1();
	}

	function _toArray$1(arr) {
	  return _arrayWithHoles$1(arr) || _iterableToArray$1(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableRest$1();
	}

	function _toConsumableArray$1(arr) {
	  return _arrayWithoutHoles$1(arr) || _iterableToArray$1(arr) || _unsupportedIterableToArray$1(arr) || _nonIterableSpread$1();
	}

	function _arrayWithoutHoles$1(arr) {
	  if (Array.isArray(arr)) return _arrayLikeToArray$1(arr);
	}

	function _arrayWithHoles$1(arr) {
	  if (Array.isArray(arr)) return arr;
	}

	function _iterableToArray$1(iter) {
	  if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
	}

	function _iterableToArrayLimit$1(arr, i) {
	  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
	  var _arr = [];
	  var _n = true;
	  var _d = false;
	  var _e = undefined;

	  try {
	    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	      _arr.push(_s.value);

	      if (i && _arr.length === i) break;
	    }
	  } catch (err) {
	    _d = true;
	    _e = err;
	  } finally {
	    try {
	      if (!_n && _i["return"] != null) _i["return"]();
	    } finally {
	      if (_d) throw _e;
	    }
	  }

	  return _arr;
	}

	function _unsupportedIterableToArray$1(o, minLen) {
	  if (!o) return;
	  if (typeof o === "string") return _arrayLikeToArray$1(o, minLen);
	  var n = Object.prototype.toString.call(o).slice(8, -1);
	  if (n === "Object" && o.constructor) n = o.constructor.name;
	  if (n === "Map" || n === "Set") return Array.from(n);
	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);
	}

	function _arrayLikeToArray$1(arr, len) {
	  if (len == null || len > arr.length) len = arr.length;

	  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

	  return arr2;
	}

	function _nonIterableSpread$1() {
	  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	function _nonIterableRest$1() {
	  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	function unwrapExports$1 (x) {
		return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
	}

	function createCommonjsModule$1(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var classnames$1 = createCommonjsModule$1(function (module) {
	/*!
	  Copyright (c) 2017 Jed Watson.
	  Licensed under the MIT License (MIT), see
	  http://jedwatson.github.io/classnames
	*/
	/* global define */

	(function () {

		var hasOwn = {}.hasOwnProperty;

		function classNames () {
			var classes = [];

			for (var i = 0; i < arguments.length; i++) {
				var arg = arguments[i];
				if (!arg) continue;

				var argType = typeof arg;

				if (argType === 'string' || argType === 'number') {
					classes.push(arg);
				} else if (Array.isArray(arg) && arg.length) {
					var inner = classNames.apply(null, arg);
					if (inner) {
						classes.push(inner);
					}
				} else if (argType === 'object') {
					for (var key in arg) {
						if (hasOwn.call(arg, key) && arg[key]) {
							classes.push(key);
						}
					}
				}
			}

			return classes.join(' ');
		}

		if ( module.exports) {
			classNames.default = classNames;
			module.exports = classNames;
		} else {
			window.classNames = classNames;
		}
	}());
	});

	// *** Hanzo Standardized Control Decorator ***
	//
	// A standardized control wrapper for making Hanzo controls all behave the same
	// way and share a common props api.
	//
	// Features
	// - Support react style hooks with getValue/setValue
	// - setValue standarizes behavior use onBlur.  This mostly has to do with
	//   Material UI using a nonstandard onChange event for controlled inputs
	// - Standardizes the error field for setting the correct error and helperText
	//   states
	// - The 'nice' api for controls:
	//
	// const {
	//   getValue
	//   setValue
	//   inputValue
	//   error
	//   showError
	// } = this.props
	//
	// - Fully optional and compatible with normal Material UI
	//
	// Custom Fields
	// - getValue - a function that is evaluated and is used to set value
	//   internally converted into a onBlur function
	// - setValue - a function for taking value instead of an event, executes
	//   alongside onBlur.  This is designed for creating uncontrolled inputs.
	// - inputValue - a function fo taking value instead of an event, events
	//   alongside Material UI onChange (standard onInput).  This is designed for
	//   creating controleld inputs.
	// - error - setting to true or false replicates
	// - showError - overwrite showing/hiding the error
	//

	var controlId = 0;
	function control(ControlComponent) {
	  return /*#__PURE__*/function (_Component) {
	    _inherits$1(Control, _Component);

	    var _super = _createSuper$1(Control);

	    function Control(props) {
	      var _this;

	      _classCallCheck$1(this, Control);

	      _this = _super.call(this, props);
	      _this.controlId = controlId++;
	      return _this;
	    }

	    _createClass$1(Control, [{
	      key: "render",
	      value: function render() {
	        var _this$props = this.props,
	            getValue = _this$props.getValue,
	            setValue = _this$props.setValue,
	            inputValue = _this$props.inputValue,
	            onBlur = _this$props.onBlur,
	            onChange = _this$props.onChange,
	            defaultValue = _this$props.defaultValue,
	            value = _this$props.value,
	            error = _this$props.error,
	            helperText = _this$props.helperText,
	            showError = _this$props.showError,
	            props = _objectWithoutProperties$2(_this$props, ["getValue", "setValue", "inputValue", "onBlur", "onChange", "defaultValue", "value", "error", "helperText", "showError"]); // show error defaults to true


	        if (showError == null) {
	          showError = true;
	        } // getValue supercedes both defaultValue and value


	        if (isFunction(getValue)) {
	          value = getValue();
	          defaultValue = undefined;
	        } // inputValue supercedes setValue


	        if (isFunction(inputValue)) {
	          var originalOnChange = onChange;

	          onChange = function onChange(e) {
	            inputValue(valueOrEvent(e));

	            if (isFunction(originalOnChange)) {
	              originalOnChange(e);
	            }
	          };

	          setValue = undefined; // setValue supercedes both onBlue and onChange
	        } else if (isFunction(setValue)) {
	          var originalOnBlur = onBlur;

	          onBlur = function onBlur(e) {
	            setValue(valueOrEvent(e));

	            if (isFunction(originalOnBlur)) {
	              originalOnBlur(e);
	            }
	          };

	          onChange = undefined; // if we are not using the getValue/setValue api, then we must load
	          // a value into the system
	          // some falsy values of value should not cause an initial update

	          if (!this.firstValue && value != null && value !== '' && value !== this.lastValue) {
	            this.firstValue = defaultValue != null && value !== '';
	            onBlur(value);
	            this.lastValue = value;
	          } else if (!this.firstValue && defaultValue !== undefined) {
	            this.firstValue = defaultValue != null && value !== '';
	            onBlur(defaultValue);
	          }
	        } else {
	          setValue = undefined;
	          inputValue = undefined;
	        } // error must be a string


	        error = valueOrError(error);
	        return /*#__PURE__*/React__default.createElement("div", {
	          ref: this.inputRef,
	          className: "control " + classnames$1({
	            valid: !error,
	            invalid: error
	          })
	        }, /*#__PURE__*/React__default.createElement(ControlComponent, _extends$1({}, props, {
	          id: this.id,
	          onBlur: onBlur,
	          onChange: onChange,
	          error: !!(showError && error),
	          helperText: showError && error !== undefined && error !== false && error !== true ? error : helperText,
	          value: value,
	          defaultValue: defaultValue
	        })));
	      }
	    }, {
	      key: "id",
	      get: function get() {
	        return 'control-' + this.controlId;
	      }
	    }]);

	    return Control;
	  }(React.Component);
	}

	var _class;
	var SPECIALNIL = '☭'; //
	// *** Hanzo Standardized Material UI Input ***
	//
	// A Material UI TextField with the following bug fixes:
	// - Selects can now auto set themselves to a placeholder when undefined
	// - defaultValue now takes the first non-undefined value so you cna
	//   asynchronously set default value
	// - Forced always into uncontrolled mode so we don't fire a nonstandard onChange
	//   event compared to a normal input
	//
	// Custom Fields
	// - placeholder - default value for selects
	// - options - automatically generate a list of selections/menu items based on
	//   options map
	// - allowEmpty - Make the placeholder in select mode picakble with a
	//   onBlur/onChange value of undefined
	// - shrink - shorthand for InputLabelProps{ shrink }, recommended taht you overwrite
	//   the whole thing with custom shrink logic if using InputLabelProps
	// - sensitive - defaults to a password field unless focused
	//

	var BaseMUIText = /*#__PURE__*/function (_Component) {
	  _inherits$1(BaseMUIText, _Component);

	  var _super = _createSuper$1(BaseMUIText);

	  // Default InnerComponent
	  function BaseMUIText(props) {
	    var _this;

	    _classCallCheck$1(this, BaseMUIText);

	    _this = _super.call(this, props);
	    _this.options = undefined;
	    _this.firstValue = undefined;
	    _this.inputRef = undefined;
	    _this.InnerComponent = TextField$1;
	    _this.state = {
	      focused: false
	    };
	    return _this;
	  } // Make it so that select can handle a specific nil value based on a rare
	  // unicode special value because empty string does not work


	  _createClass$1(BaseMUIText, [{
	    key: "wrapSelectSetter",
	    value: function wrapSelectSetter(setter) {
	      return function (e) {
	        if (e === SPECIALNIL) {
	          return setter(undefined);
	        }

	        if (e && e.target && e.target.value === e === SPECIALNIL) {
	          var newE = Object.create(e, {
	            target: {
	              value: undefined
	            }
	          });
	          return setter(newE);
	        }

	        return setter(e);
	      };
	    } // Enable sensitive focus detection using Blur and Focus

	  }, {
	    key: "wrapSensitiveBlur",
	    value: function wrapSensitiveBlur(onBlur) {
	      var _this2 = this;

	      return function (e) {
	        _this2.setState({
	          focused: false
	        });

	        if (isFunction(onBlur)) {
	          onBlur(e);
	        }
	      };
	    }
	  }, {
	    key: "wrapSensitiveFocus",
	    value: function wrapSensitiveFocus(onFocus) {
	      var _this3 = this;

	      return function (e) {
	        _this3.setState({
	          focused: true
	        });

	        if (isFunction(onFocus)) {
	          onFocus(e);
	        }
	      };
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this4 = this;

	      var _this$props = this.props,
	          options = _this$props.options,
	          value = _this$props.value,
	          defaultValue = _this$props.defaultValue,
	          onChange = _this$props.onChange,
	          onBlur = _this$props.onBlur,
	          onFocus = _this$props.onFocus,
	          InnerComponent = _this$props.InnerComponent,
	          select = _this$props.select,
	          placeholder = _this$props.placeholder,
	          shrink = _this$props.shrink,
	          disableAutoChange = _this$props.disableAutoChange,
	          allowEmpty = _this$props.allowEmpty,
	          sensitive = _this$props.sensitive,
	          type = _this$props.type,
	          InputLabelProps = _this$props.InputLabelProps,
	          InputProps = _this$props.InputProps,
	          props = _objectWithoutProperties$2(_this$props, ["options", "value", "defaultValue", "onChange", "onBlur", "onFocus", "InnerComponent", "select", "placeholder", "shrink", "disableAutoChange", "allowEmpty", "sensitive", "type", "InputLabelProps", "InputProps"]);

	      if (!options) {
	        options = this.options;
	      }

	      var isSelect = select != null;
	      var isSensitive = sensitive != null;
	      var doesAllowEmpty = allowEmpty != null;
	      var selectOptions = [];

	      if (!options) {
	        options = [];
	      }

	      if (isFunction(onChange)) {
	        onChange = this.wrapSelectSetter(onChange);
	      }

	      if (isFunction(onBlur)) {
	        onBlur = this.wrapSelectSetter(onBlur);

	        if (!disableAutoChange && !isFunction(onChange)) {
	          var onChangeTimeoutId = -1;

	          onChange = function onChange(ev) {
	            clearTimeout(onChangeTimeoutId);
	            var target = ev.target;

	            if (isSelect) {
	              onBlur({
	                target: target
	              });
	            } else {
	              onChangeTimeoutId = setTimeout(function () {
	                onBlur({
	                  target: target
	                });
	              }, 500);
	            }
	          };
	        }
	      }

	      onBlur = this.wrapSensitiveBlur(onBlur);
	      onFocus = this.wrapSensitiveFocus(onFocus);

	      if (isSelect) {
	        // set the default value to '' if it doesn't exist
	        if (!options[defaultValue]) {
	          defaultValue = SPECIALNIL;
	        } // set the value to '' if it doesn't exist


	        if (!options[value]) {
	          value = SPECIALNIL;
	          defaultValue = undefined;
	        }

	        if (props.SelectProps && props.SelectProps.native) {
	          if (placeholder) {
	            if (doesAllowEmpty) {
	              selectOptions.push( /*#__PURE__*/React__default.createElement("option", {
	                key: SPECIALNIL,
	                value: SPECIALNIL
	              }, placeholder));
	            } else {
	              selectOptions.push( /*#__PURE__*/React__default.createElement("option", {
	                disabled: true,
	                key: SPECIALNIL,
	                value: SPECIALNIL
	              }, placeholder));
	            }
	          }

	          for (var k in options) {
	            (function (key) {
	              var opt = options[key];
	              selectOptions.push( /*#__PURE__*/React__default.createElement("option", {
	                key: key,
	                value: key
	              }, opt));
	            })(k);
	          }
	        } else {
	          if (placeholder) {
	            if (doesAllowEmpty) {
	              selectOptions.push( /*#__PURE__*/React__default.createElement(MenuItem$1, {
	                key: SPECIALNIL,
	                value: SPECIALNIL
	              }, placeholder));
	            } else {
	              selectOptions.push( /*#__PURE__*/React__default.createElement(MenuItem$1, {
	                disabled: true,
	                key: SPECIALNIL,
	                value: SPECIALNIL
	              }, placeholder));
	            }
	          }

	          for (var _k in options) {
	            (function (key) {
	              var opt = options[key];
	              selectOptions.push( /*#__PURE__*/React__default.createElement(MenuItem$1, {
	                key: key,
	                value: key
	              }, opt));
	            })(_k);
	          }
	        }
	      } // This is only for text inputs because we can't use fully controlled
	      // inputs since they update on keystroke rather than the standard onchange.
	      // Selects don't have this problem


	      if (!isSelect) {
	        // A real default value system for asynchronous uncontrolled inputs
	        if (this.firstValue === undefined || this.firstValue === '') {
	          this.firstValue = value || defaultValue;

	          if (this.firstValue !== undefined && this.firstValue !== '') {
	            // Keep trying to set until inputRef is assigned
	            var forceSet = function forceSet() {
	              if (_this4.inputRef) {
	                _this4.inputRef.value = _this4.firstValue;
	              } else {
	                requestAnimationFrame(forceSet);
	              }
	            };

	            requestAnimationFrame(forceSet);
	          }
	        }
	      }

	      InnerComponent = InnerComponent || this.InnerComponent;
	      var InputPropsCheck = InputProps || {};
	      var focused = this.state.focused;
	      var shrinkInputLabelProps = !!(focused || this.inputRef && this.inputRef.value || !!value || !!defaultValue || shrink || isSelect || placeholder || InputPropsCheck.startAdornment || InputPropsCheck.endAdornment);
	      return /*#__PURE__*/React__default.createElement(InnerComponent, _extends$1({}, props, {
	        inputRef: function inputRef(ref) {
	          _this4.inputRef = ref;
	        },
	        select: select,
	        options: options,
	        placeholder: isSelect ? '' : placeholder,
	        type: isSensitive && !focused ? 'password' : type,
	        value: isSelect ? value : undefined,
	        defaultValue: value ? undefined : defaultValue,
	        onChange: isSelect ? onChange || onBlur : onChange,
	        onBlur: isSelect ? this.wrapSensitiveBlur() : onBlur,
	        onFocus: onFocus,
	        InputProps: InputProps,
	        InputLabelProps: _objectSpread2({
	          shrink: shrinkInputLabelProps
	        }, InputLabelProps)
	      }), selectOptions);
	    }
	  }]);

	  return BaseMUIText;
	}(React.Component);

	var MUIText = control(_class = /*#__PURE__*/function (_BaseMUIText) {
	  _inherits$1(MUIText, _BaseMUIText);

	  var _super2 = _createSuper$1(MUIText);

	  function MUIText() {
	    _classCallCheck$1(this, MUIText);

	    return _super2.apply(this, arguments);
	  }

	  return MUIText;
	}(BaseMUIText)) || _class;

	var reactIs_production_min$1 = createCommonjsModule$1(function (module, exports) {
	Object.defineProperty(exports,"__esModule",{value:!0});
	var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?Symbol.for("react.suspense_list"):
	60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v=b?Symbol.for("react.fundamental"):60117,w=b?Symbol.for("react.responder"):60118,x=b?Symbol.for("react.scope"):60119;function y(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function z(a){return y(a)===m}
	exports.typeOf=y;exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;exports.Lazy=t;exports.Memo=r;exports.Portal=d;exports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;
	exports.isValidElementType=function(a){return "string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===v||a.$$typeof===w||a.$$typeof===x)};exports.isAsyncMode=function(a){return z(a)||y(a)===l};exports.isConcurrentMode=z;exports.isContextConsumer=function(a){return y(a)===k};exports.isContextProvider=function(a){return y(a)===h};
	exports.isElement=function(a){return "object"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return y(a)===n};exports.isFragment=function(a){return y(a)===e};exports.isLazy=function(a){return y(a)===t};exports.isMemo=function(a){return y(a)===r};exports.isPortal=function(a){return y(a)===d};exports.isProfiler=function(a){return y(a)===g};exports.isStrictMode=function(a){return y(a)===f};exports.isSuspense=function(a){return y(a)===p};
	});

	unwrapExports$1(reactIs_production_min$1);
	var reactIs_production_min_1 = reactIs_production_min$1.typeOf;
	var reactIs_production_min_2 = reactIs_production_min$1.AsyncMode;
	var reactIs_production_min_3 = reactIs_production_min$1.ConcurrentMode;
	var reactIs_production_min_4 = reactIs_production_min$1.ContextConsumer;
	var reactIs_production_min_5 = reactIs_production_min$1.ContextProvider;
	var reactIs_production_min_6 = reactIs_production_min$1.Element;
	var reactIs_production_min_7 = reactIs_production_min$1.ForwardRef;
	var reactIs_production_min_8 = reactIs_production_min$1.Fragment;
	var reactIs_production_min_9 = reactIs_production_min$1.Lazy;
	var reactIs_production_min_10 = reactIs_production_min$1.Memo;
	var reactIs_production_min_11 = reactIs_production_min$1.Portal;
	var reactIs_production_min_12 = reactIs_production_min$1.Profiler;
	var reactIs_production_min_13 = reactIs_production_min$1.StrictMode;
	var reactIs_production_min_14 = reactIs_production_min$1.Suspense;
	var reactIs_production_min_15 = reactIs_production_min$1.isValidElementType;
	var reactIs_production_min_16 = reactIs_production_min$1.isAsyncMode;
	var reactIs_production_min_17 = reactIs_production_min$1.isConcurrentMode;
	var reactIs_production_min_18 = reactIs_production_min$1.isContextConsumer;
	var reactIs_production_min_19 = reactIs_production_min$1.isContextProvider;
	var reactIs_production_min_20 = reactIs_production_min$1.isElement;
	var reactIs_production_min_21 = reactIs_production_min$1.isForwardRef;
	var reactIs_production_min_22 = reactIs_production_min$1.isFragment;
	var reactIs_production_min_23 = reactIs_production_min$1.isLazy;
	var reactIs_production_min_24 = reactIs_production_min$1.isMemo;
	var reactIs_production_min_25 = reactIs_production_min$1.isPortal;
	var reactIs_production_min_26 = reactIs_production_min$1.isProfiler;
	var reactIs_production_min_27 = reactIs_production_min$1.isStrictMode;
	var reactIs_production_min_28 = reactIs_production_min$1.isSuspense;

	var reactIs_development$1 = createCommonjsModule$1(function (module, exports) {



	if (process.env.NODE_ENV !== "production") {
	  (function() {

	Object.defineProperty(exports, '__esModule', { value: true });

	// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
	// nor polyfill, then a plain number is used for performance.
	var hasSymbol = typeof Symbol === 'function' && Symbol.for;
	var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
	var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
	var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
	var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
	var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
	var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
	var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
	// (unstable) APIs that have been removed. Can we remove the symbols?

	var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
	var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
	var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
	var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
	var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
	var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
	var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
	var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
	var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
	var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

	function isValidElementType(type) {
	  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
	  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE);
	}

	/**
	 * Forked from fbjs/warning:
	 * https://github.com/facebook/fbjs/blob/e66ba20ad5be433eb54423f2b097d829324d9de6/packages/fbjs/src/__forks__/warning.js
	 *
	 * Only change is we use console.warn instead of console.error,
	 * and do nothing when 'console' is not supported.
	 * This really simplifies the code.
	 * ---
	 * Similar to invariant but only logs a warning if the condition is not met.
	 * This can be used to log issues in development environments in critical
	 * paths. Removing the logging code for production environments will keep the
	 * same logic and follow the same code paths.
	 */
	var lowPriorityWarningWithoutStack = function () {};

	{
	  var printWarning = function (format) {
	    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    var argIndex = 0;
	    var message = 'Warning: ' + format.replace(/%s/g, function () {
	      return args[argIndex++];
	    });

	    if (typeof console !== 'undefined') {
	      console.warn(message);
	    }

	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };

	  lowPriorityWarningWithoutStack = function (condition, format) {
	    if (format === undefined) {
	      throw new Error('`lowPriorityWarningWithoutStack(condition, format, ...args)` requires a warning ' + 'message argument');
	    }

	    if (!condition) {
	      for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {
	        args[_key2 - 2] = arguments[_key2];
	      }

	      printWarning.apply(void 0, [format].concat(args));
	    }
	  };
	}

	var lowPriorityWarningWithoutStack$1 = lowPriorityWarningWithoutStack;

	function typeOf(object) {
	  if (typeof object === 'object' && object !== null) {
	    var $$typeof = object.$$typeof;

	    switch ($$typeof) {
	      case REACT_ELEMENT_TYPE:
	        var type = object.type;

	        switch (type) {
	          case REACT_ASYNC_MODE_TYPE:
	          case REACT_CONCURRENT_MODE_TYPE:
	          case REACT_FRAGMENT_TYPE:
	          case REACT_PROFILER_TYPE:
	          case REACT_STRICT_MODE_TYPE:
	          case REACT_SUSPENSE_TYPE:
	            return type;

	          default:
	            var $$typeofType = type && type.$$typeof;

	            switch ($$typeofType) {
	              case REACT_CONTEXT_TYPE:
	              case REACT_FORWARD_REF_TYPE:
	              case REACT_LAZY_TYPE:
	              case REACT_MEMO_TYPE:
	              case REACT_PROVIDER_TYPE:
	                return $$typeofType;

	              default:
	                return $$typeof;
	            }

	        }

	      case REACT_PORTAL_TYPE:
	        return $$typeof;
	    }
	  }

	  return undefined;
	} // AsyncMode is deprecated along with isAsyncMode

	var AsyncMode = REACT_ASYNC_MODE_TYPE;
	var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
	var ContextConsumer = REACT_CONTEXT_TYPE;
	var ContextProvider = REACT_PROVIDER_TYPE;
	var Element = REACT_ELEMENT_TYPE;
	var ForwardRef = REACT_FORWARD_REF_TYPE;
	var Fragment = REACT_FRAGMENT_TYPE;
	var Lazy = REACT_LAZY_TYPE;
	var Memo = REACT_MEMO_TYPE;
	var Portal = REACT_PORTAL_TYPE;
	var Profiler = REACT_PROFILER_TYPE;
	var StrictMode = REACT_STRICT_MODE_TYPE;
	var Suspense = REACT_SUSPENSE_TYPE;
	var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

	function isAsyncMode(object) {
	  {
	    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
	      hasWarnedAboutDeprecatedIsAsyncMode = true;
	      lowPriorityWarningWithoutStack$1(false, 'The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
	    }
	  }

	  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
	}
	function isConcurrentMode(object) {
	  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
	}
	function isContextConsumer(object) {
	  return typeOf(object) === REACT_CONTEXT_TYPE;
	}
	function isContextProvider(object) {
	  return typeOf(object) === REACT_PROVIDER_TYPE;
	}
	function isElement(object) {
	  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
	}
	function isForwardRef(object) {
	  return typeOf(object) === REACT_FORWARD_REF_TYPE;
	}
	function isFragment(object) {
	  return typeOf(object) === REACT_FRAGMENT_TYPE;
	}
	function isLazy(object) {
	  return typeOf(object) === REACT_LAZY_TYPE;
	}
	function isMemo(object) {
	  return typeOf(object) === REACT_MEMO_TYPE;
	}
	function isPortal(object) {
	  return typeOf(object) === REACT_PORTAL_TYPE;
	}
	function isProfiler(object) {
	  return typeOf(object) === REACT_PROFILER_TYPE;
	}
	function isStrictMode(object) {
	  return typeOf(object) === REACT_STRICT_MODE_TYPE;
	}
	function isSuspense(object) {
	  return typeOf(object) === REACT_SUSPENSE_TYPE;
	}

	exports.typeOf = typeOf;
	exports.AsyncMode = AsyncMode;
	exports.ConcurrentMode = ConcurrentMode;
	exports.ContextConsumer = ContextConsumer;
	exports.ContextProvider = ContextProvider;
	exports.Element = Element;
	exports.ForwardRef = ForwardRef;
	exports.Fragment = Fragment;
	exports.Lazy = Lazy;
	exports.Memo = Memo;
	exports.Portal = Portal;
	exports.Profiler = Profiler;
	exports.StrictMode = StrictMode;
	exports.Suspense = Suspense;
	exports.isValidElementType = isValidElementType;
	exports.isAsyncMode = isAsyncMode;
	exports.isConcurrentMode = isConcurrentMode;
	exports.isContextConsumer = isContextConsumer;
	exports.isContextProvider = isContextProvider;
	exports.isElement = isElement;
	exports.isForwardRef = isForwardRef;
	exports.isFragment = isFragment;
	exports.isLazy = isLazy;
	exports.isMemo = isMemo;
	exports.isPortal = isPortal;
	exports.isProfiler = isProfiler;
	exports.isStrictMode = isStrictMode;
	exports.isSuspense = isSuspense;
	  })();
	}
	});

	unwrapExports$1(reactIs_development$1);
	var reactIs_development_1$1 = reactIs_development$1.typeOf;
	var reactIs_development_2$1 = reactIs_development$1.AsyncMode;
	var reactIs_development_3$1 = reactIs_development$1.ConcurrentMode;
	var reactIs_development_4$1 = reactIs_development$1.ContextConsumer;
	var reactIs_development_5$1 = reactIs_development$1.ContextProvider;
	var reactIs_development_6$1 = reactIs_development$1.Element;
	var reactIs_development_7$1 = reactIs_development$1.ForwardRef;
	var reactIs_development_8$1 = reactIs_development$1.Fragment;
	var reactIs_development_9$1 = reactIs_development$1.Lazy;
	var reactIs_development_10$1 = reactIs_development$1.Memo;
	var reactIs_development_11$1 = reactIs_development$1.Portal;
	var reactIs_development_12$1 = reactIs_development$1.Profiler;
	var reactIs_development_13$1 = reactIs_development$1.StrictMode;
	var reactIs_development_14$1 = reactIs_development$1.Suspense;
	var reactIs_development_15$1 = reactIs_development$1.isValidElementType;
	var reactIs_development_16$1 = reactIs_development$1.isAsyncMode;
	var reactIs_development_17$1 = reactIs_development$1.isConcurrentMode;
	var reactIs_development_18$1 = reactIs_development$1.isContextConsumer;
	var reactIs_development_19$1 = reactIs_development$1.isContextProvider;
	var reactIs_development_20$1 = reactIs_development$1.isElement;
	var reactIs_development_21$1 = reactIs_development$1.isForwardRef;
	var reactIs_development_22$1 = reactIs_development$1.isFragment;
	var reactIs_development_23$1 = reactIs_development$1.isLazy;
	var reactIs_development_24$1 = reactIs_development$1.isMemo;
	var reactIs_development_25$1 = reactIs_development$1.isPortal;
	var reactIs_development_26$1 = reactIs_development$1.isProfiler;
	var reactIs_development_27$1 = reactIs_development$1.isStrictMode;
	var reactIs_development_28$1 = reactIs_development$1.isSuspense;

	var reactIs$1 = createCommonjsModule$1(function (module) {

	if (process.env.NODE_ENV === 'production') {
	  module.exports = reactIs_production_min$1;
	} else {
	  module.exports = reactIs_development$1;
	}
	});
	var reactIs_1$1 = reactIs$1.typeOf;
	var reactIs_2$1 = reactIs$1.AsyncMode;
	var reactIs_3$1 = reactIs$1.ConcurrentMode;
	var reactIs_4 = reactIs$1.ContextConsumer;
	var reactIs_5 = reactIs$1.ContextProvider;
	var reactIs_6 = reactIs$1.Element;
	var reactIs_7 = reactIs$1.ForwardRef;
	var reactIs_8 = reactIs$1.Fragment;
	var reactIs_9 = reactIs$1.Lazy;
	var reactIs_10 = reactIs$1.Memo;
	var reactIs_11 = reactIs$1.Portal;
	var reactIs_12 = reactIs$1.Profiler;
	var reactIs_13 = reactIs$1.StrictMode;
	var reactIs_14 = reactIs$1.Suspense;
	var reactIs_15 = reactIs$1.isValidElementType;
	var reactIs_16 = reactIs$1.isAsyncMode;
	var reactIs_17 = reactIs$1.isConcurrentMode;
	var reactIs_18 = reactIs$1.isContextConsumer;
	var reactIs_19 = reactIs$1.isContextProvider;
	var reactIs_20 = reactIs$1.isElement;
	var reactIs_21 = reactIs$1.isForwardRef;
	var reactIs_22 = reactIs$1.isFragment;
	var reactIs_23 = reactIs$1.isLazy;
	var reactIs_24 = reactIs$1.isMemo;
	var reactIs_25 = reactIs$1.isPortal;
	var reactIs_26 = reactIs$1.isProfiler;
	var reactIs_27 = reactIs$1.isStrictMode;
	var reactIs_28 = reactIs$1.isSuspense;

	/*
	object-assign
	(c) Sindre Sorhus
	@license MIT
	*/
	/* eslint-disable no-unused-vars */
	var getOwnPropertySymbols$2 = Object.getOwnPropertySymbols;
	var hasOwnProperty$1 = Object.prototype.hasOwnProperty;
	var propIsEnumerable$1 = Object.prototype.propertyIsEnumerable;

	function toObject$1(val) {
		if (val === null || val === undefined) {
			throw new TypeError('Object.assign cannot be called with null or undefined');
		}

		return Object(val);
	}

	function shouldUseNative$1() {
		try {
			if (!Object.assign) {
				return false;
			}

			// Detect buggy property enumeration order in older V8 versions.

			// https://bugs.chromium.org/p/v8/issues/detail?id=4118
			var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
			test1[5] = 'de';
			if (Object.getOwnPropertyNames(test1)[0] === '5') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test2 = {};
			for (var i = 0; i < 10; i++) {
				test2['_' + String.fromCharCode(i)] = i;
			}
			var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
				return test2[n];
			});
			if (order2.join('') !== '0123456789') {
				return false;
			}

			// https://bugs.chromium.org/p/v8/issues/detail?id=3056
			var test3 = {};
			'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
				test3[letter] = letter;
			});
			if (Object.keys(Object.assign({}, test3)).join('') !==
					'abcdefghijklmnopqrst') {
				return false;
			}

			return true;
		} catch (err) {
			// We don't expect any of the above to throw, but better to be safe.
			return false;
		}
	}

	var objectAssign$1 = shouldUseNative$1() ? Object.assign : function (target, source) {
		var from;
		var to = toObject$1(target);
		var symbols;

		for (var s = 1; s < arguments.length; s++) {
			from = Object(arguments[s]);

			for (var key in from) {
				if (hasOwnProperty$1.call(from, key)) {
					to[key] = from[key];
				}
			}

			if (getOwnPropertySymbols$2) {
				symbols = getOwnPropertySymbols$2(from);
				for (var i = 0; i < symbols.length; i++) {
					if (propIsEnumerable$1.call(from, symbols[i])) {
						to[symbols[i]] = from[symbols[i]];
					}
				}
			}
		}

		return to;
	};

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var ReactPropTypesSecret$2 = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	var ReactPropTypesSecret_1$1 = ReactPropTypesSecret$2;

	var printWarning$2 = function() {};

	if (process.env.NODE_ENV !== 'production') {
	  var ReactPropTypesSecret$1$1 = ReactPropTypesSecret_1$1;
	  var loggedTypeFailures$1 = {};
	  var has$2 = Function.call.bind(Object.prototype.hasOwnProperty);

	  printWarning$2 = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	/**
	 * Assert that the values match with the type specs.
	 * Error messages are memorized and will only be shown once.
	 *
	 * @param {object} typeSpecs Map of name to a ReactPropType
	 * @param {object} values Runtime values that need to be type-checked
	 * @param {string} location e.g. "prop", "context", "child context"
	 * @param {string} componentName Name of the component for error messages.
	 * @param {?Function} getStack Returns the component stack.
	 * @private
	 */
	function checkPropTypes$1(typeSpecs, values, location, componentName, getStack) {
	  if (process.env.NODE_ENV !== 'production') {
	    for (var typeSpecName in typeSpecs) {
	      if (has$2(typeSpecs, typeSpecName)) {
	        var error;
	        // Prop type validation may throw. In case they do, we don't want to
	        // fail the render phase where it didn't fail before. So we log it.
	        // After these have been cleaned up, we'll let them throw.
	        try {
	          // This is intentionally an invariant that gets caught. It's the same
	          // behavior as without this statement except with a better message.
	          if (typeof typeSpecs[typeSpecName] !== 'function') {
	            var err = Error(
	              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
	              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
	            );
	            err.name = 'Invariant Violation';
	            throw err;
	          }
	          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret$1$1);
	        } catch (ex) {
	          error = ex;
	        }
	        if (error && !(error instanceof Error)) {
	          printWarning$2(
	            (componentName || 'React class') + ': type specification of ' +
	            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
	            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
	            'You may have forgotten to pass an argument to the type checker ' +
	            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
	            'shape all require an argument).'
	          );
	        }
	        if (error instanceof Error && !(error.message in loggedTypeFailures$1)) {
	          // Only monitor this failure once because there tends to be a lot of the
	          // same error.
	          loggedTypeFailures$1[error.message] = true;

	          var stack = getStack ? getStack() : '';

	          printWarning$2(
	            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
	          );
	        }
	      }
	    }
	  }
	}

	/**
	 * Resets warning cache when testing.
	 *
	 * @private
	 */
	checkPropTypes$1.resetWarningCache = function() {
	  if (process.env.NODE_ENV !== 'production') {
	    loggedTypeFailures$1 = {};
	  }
	};

	var checkPropTypes_1$1 = checkPropTypes$1;

	var has$1$1 = Function.call.bind(Object.prototype.hasOwnProperty);
	var printWarning$1$1 = function() {};

	if (process.env.NODE_ENV !== 'production') {
	  printWarning$1$1 = function(text) {
	    var message = 'Warning: ' + text;
	    if (typeof console !== 'undefined') {
	      console.error(message);
	    }
	    try {
	      // --- Welcome to debugging React ---
	      // This error was thrown as a convenience so that you can use this stack
	      // to find the callsite that caused this warning to fire.
	      throw new Error(message);
	    } catch (x) {}
	  };
	}

	function emptyFunctionThatReturnsNull$1() {
	  return null;
	}

	var factoryWithTypeCheckers$1 = function(isValidElement, throwOnDirectAccess) {
	  /* global Symbol */
	  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
	  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

	  /**
	   * Returns the iterator method function contained on the iterable object.
	   *
	   * Be sure to invoke the function with the iterable as context:
	   *
	   *     var iteratorFn = getIteratorFn(myIterable);
	   *     if (iteratorFn) {
	   *       var iterator = iteratorFn.call(myIterable);
	   *       ...
	   *     }
	   *
	   * @param {?object} maybeIterable
	   * @return {?function}
	   */
	  function getIteratorFn(maybeIterable) {
	    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
	    if (typeof iteratorFn === 'function') {
	      return iteratorFn;
	    }
	  }

	  /**
	   * Collection of methods that allow declaration and validation of props that are
	   * supplied to React components. Example usage:
	   *
	   *   var Props = require('ReactPropTypes');
	   *   var MyArticle = React.createClass({
	   *     propTypes: {
	   *       // An optional string prop named "description".
	   *       description: Props.string,
	   *
	   *       // A required enum prop named "category".
	   *       category: Props.oneOf(['News','Photos']).isRequired,
	   *
	   *       // A prop named "dialog" that requires an instance of Dialog.
	   *       dialog: Props.instanceOf(Dialog).isRequired
	   *     },
	   *     render: function() { ... }
	   *   });
	   *
	   * A more formal specification of how these methods are used:
	   *
	   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
	   *   decl := ReactPropTypes.{type}(.isRequired)?
	   *
	   * Each and every declaration produces a function with the same signature. This
	   * allows the creation of custom validation functions. For example:
	   *
	   *  var MyLink = React.createClass({
	   *    propTypes: {
	   *      // An optional string or URI prop named "href".
	   *      href: function(props, propName, componentName) {
	   *        var propValue = props[propName];
	   *        if (propValue != null && typeof propValue !== 'string' &&
	   *            !(propValue instanceof URI)) {
	   *          return new Error(
	   *            'Expected a string or an URI for ' + propName + ' in ' +
	   *            componentName
	   *          );
	   *        }
	   *      }
	   *    },
	   *    render: function() {...}
	   *  });
	   *
	   * @internal
	   */

	  var ANONYMOUS = '<<anonymous>>';

	  // Important!
	  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
	  var ReactPropTypes = {
	    array: createPrimitiveTypeChecker('array'),
	    bool: createPrimitiveTypeChecker('boolean'),
	    func: createPrimitiveTypeChecker('function'),
	    number: createPrimitiveTypeChecker('number'),
	    object: createPrimitiveTypeChecker('object'),
	    string: createPrimitiveTypeChecker('string'),
	    symbol: createPrimitiveTypeChecker('symbol'),

	    any: createAnyTypeChecker(),
	    arrayOf: createArrayOfTypeChecker,
	    element: createElementTypeChecker(),
	    elementType: createElementTypeTypeChecker(),
	    instanceOf: createInstanceTypeChecker,
	    node: createNodeChecker(),
	    objectOf: createObjectOfTypeChecker,
	    oneOf: createEnumTypeChecker,
	    oneOfType: createUnionTypeChecker,
	    shape: createShapeTypeChecker,
	    exact: createStrictShapeTypeChecker,
	  };

	  /**
	   * inlined Object.is polyfill to avoid requiring consumers ship their own
	   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
	   */
	  /*eslint-disable no-self-compare*/
	  function is(x, y) {
	    // SameValue algorithm
	    if (x === y) {
	      // Steps 1-5, 7-10
	      // Steps 6.b-6.e: +0 != -0
	      return x !== 0 || 1 / x === 1 / y;
	    } else {
	      // Step 6.a: NaN == NaN
	      return x !== x && y !== y;
	    }
	  }
	  /*eslint-enable no-self-compare*/

	  /**
	   * We use an Error-like object for backward compatibility as people may call
	   * PropTypes directly and inspect their output. However, we don't use real
	   * Errors anymore. We don't inspect their stack anyway, and creating them
	   * is prohibitively expensive if they are created too often, such as what
	   * happens in oneOfType() for any type before the one that matched.
	   */
	  function PropTypeError(message) {
	    this.message = message;
	    this.stack = '';
	  }
	  // Make `instanceof Error` still work for returned errors.
	  PropTypeError.prototype = Error.prototype;

	  function createChainableTypeChecker(validate) {
	    if (process.env.NODE_ENV !== 'production') {
	      var manualPropTypeCallCache = {};
	      var manualPropTypeWarningCount = 0;
	    }
	    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
	      componentName = componentName || ANONYMOUS;
	      propFullName = propFullName || propName;

	      if (secret !== ReactPropTypesSecret_1$1) {
	        if (throwOnDirectAccess) {
	          // New behavior only for users of `prop-types` package
	          var err = new Error(
	            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	            'Use `PropTypes.checkPropTypes()` to call them. ' +
	            'Read more at http://fb.me/use-check-prop-types'
	          );
	          err.name = 'Invariant Violation';
	          throw err;
	        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
	          // Old behavior for people using React.PropTypes
	          var cacheKey = componentName + ':' + propName;
	          if (
	            !manualPropTypeCallCache[cacheKey] &&
	            // Avoid spamming the console because they are often not actionable except for lib authors
	            manualPropTypeWarningCount < 3
	          ) {
	            printWarning$1$1(
	              'You are manually calling a React.PropTypes validation ' +
	              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
	              'and will throw in the standalone `prop-types` package. ' +
	              'You may be seeing this warning due to a third-party PropTypes ' +
	              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
	            );
	            manualPropTypeCallCache[cacheKey] = true;
	            manualPropTypeWarningCount++;
	          }
	        }
	      }
	      if (props[propName] == null) {
	        if (isRequired) {
	          if (props[propName] === null) {
	            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
	          }
	          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
	        }
	        return null;
	      } else {
	        return validate(props, propName, componentName, location, propFullName);
	      }
	    }

	    var chainedCheckType = checkType.bind(null, false);
	    chainedCheckType.isRequired = checkType.bind(null, true);

	    return chainedCheckType;
	  }

	  function createPrimitiveTypeChecker(expectedType) {
	    function validate(props, propName, componentName, location, propFullName, secret) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== expectedType) {
	        // `propValue` being instance of, say, date/regexp, pass the 'object'
	        // check, but we can offer a more precise error message here rather than
	        // 'of type `object`'.
	        var preciseType = getPreciseType(propValue);

	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createAnyTypeChecker() {
	    return createChainableTypeChecker(emptyFunctionThatReturnsNull$1);
	  }

	  function createArrayOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
	      }
	      var propValue = props[propName];
	      if (!Array.isArray(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
	      }
	      for (var i = 0; i < propValue.length; i++) {
	        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret_1$1);
	        if (error instanceof Error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!isValidElement(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createElementTypeTypeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      if (!reactIs$1.isValidElementType(propValue)) {
	        var propType = getPropType(propValue);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createInstanceTypeChecker(expectedClass) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!(props[propName] instanceof expectedClass)) {
	        var expectedClassName = expectedClass.name || ANONYMOUS;
	        var actualClassName = getClassName(props[propName]);
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createEnumTypeChecker(expectedValues) {
	    if (!Array.isArray(expectedValues)) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (arguments.length > 1) {
	          printWarning$1$1(
	            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
	            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
	          );
	        } else {
	          printWarning$1$1('Invalid argument supplied to oneOf, expected an array.');
	        }
	      }
	      return emptyFunctionThatReturnsNull$1;
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      for (var i = 0; i < expectedValues.length; i++) {
	        if (is(propValue, expectedValues[i])) {
	          return null;
	        }
	      }

	      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
	        var type = getPreciseType(value);
	        if (type === 'symbol') {
	          return String(value);
	        }
	        return value;
	      });
	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createObjectOfTypeChecker(typeChecker) {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (typeof typeChecker !== 'function') {
	        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
	      }
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
	      }
	      for (var key in propValue) {
	        if (has$1$1(propValue, key)) {
	          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1$1);
	          if (error instanceof Error) {
	            return error;
	          }
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createUnionTypeChecker(arrayOfTypeCheckers) {
	    if (!Array.isArray(arrayOfTypeCheckers)) {
	      process.env.NODE_ENV !== 'production' ? printWarning$1$1('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
	      return emptyFunctionThatReturnsNull$1;
	    }

	    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	      var checker = arrayOfTypeCheckers[i];
	      if (typeof checker !== 'function') {
	        printWarning$1$1(
	          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
	          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
	        );
	        return emptyFunctionThatReturnsNull$1;
	      }
	    }

	    function validate(props, propName, componentName, location, propFullName) {
	      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
	        var checker = arrayOfTypeCheckers[i];
	        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret_1$1) == null) {
	          return null;
	        }
	      }

	      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createNodeChecker() {
	    function validate(props, propName, componentName, location, propFullName) {
	      if (!isNode(props[propName])) {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      for (var key in shapeTypes) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          continue;
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1$1);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }
	    return createChainableTypeChecker(validate);
	  }

	  function createStrictShapeTypeChecker(shapeTypes) {
	    function validate(props, propName, componentName, location, propFullName) {
	      var propValue = props[propName];
	      var propType = getPropType(propValue);
	      if (propType !== 'object') {
	        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
	      }
	      // We need to check all keys in case some are required but missing from
	      // props.
	      var allKeys = objectAssign$1({}, props[propName], shapeTypes);
	      for (var key in allKeys) {
	        var checker = shapeTypes[key];
	        if (!checker) {
	          return new PropTypeError(
	            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
	            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
	            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
	          );
	        }
	        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret_1$1);
	        if (error) {
	          return error;
	        }
	      }
	      return null;
	    }

	    return createChainableTypeChecker(validate);
	  }

	  function isNode(propValue) {
	    switch (typeof propValue) {
	      case 'number':
	      case 'string':
	      case 'undefined':
	        return true;
	      case 'boolean':
	        return !propValue;
	      case 'object':
	        if (Array.isArray(propValue)) {
	          return propValue.every(isNode);
	        }
	        if (propValue === null || isValidElement(propValue)) {
	          return true;
	        }

	        var iteratorFn = getIteratorFn(propValue);
	        if (iteratorFn) {
	          var iterator = iteratorFn.call(propValue);
	          var step;
	          if (iteratorFn !== propValue.entries) {
	            while (!(step = iterator.next()).done) {
	              if (!isNode(step.value)) {
	                return false;
	              }
	            }
	          } else {
	            // Iterator will provide entry [k,v] tuples rather than values.
	            while (!(step = iterator.next()).done) {
	              var entry = step.value;
	              if (entry) {
	                if (!isNode(entry[1])) {
	                  return false;
	                }
	              }
	            }
	          }
	        } else {
	          return false;
	        }

	        return true;
	      default:
	        return false;
	    }
	  }

	  function isSymbol(propType, propValue) {
	    // Native Symbol.
	    if (propType === 'symbol') {
	      return true;
	    }

	    // falsy value can't be a Symbol
	    if (!propValue) {
	      return false;
	    }

	    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
	    if (propValue['@@toStringTag'] === 'Symbol') {
	      return true;
	    }

	    // Fallback for non-spec compliant Symbols which are polyfilled.
	    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
	      return true;
	    }

	    return false;
	  }

	  // Equivalent of `typeof` but with special handling for array and regexp.
	  function getPropType(propValue) {
	    var propType = typeof propValue;
	    if (Array.isArray(propValue)) {
	      return 'array';
	    }
	    if (propValue instanceof RegExp) {
	      // Old webkits (at least until Android 4.0) return 'function' rather than
	      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
	      // passes PropTypes.object.
	      return 'object';
	    }
	    if (isSymbol(propType, propValue)) {
	      return 'symbol';
	    }
	    return propType;
	  }

	  // This handles more types than `getPropType`. Only used for error messages.
	  // See `createPrimitiveTypeChecker`.
	  function getPreciseType(propValue) {
	    if (typeof propValue === 'undefined' || propValue === null) {
	      return '' + propValue;
	    }
	    var propType = getPropType(propValue);
	    if (propType === 'object') {
	      if (propValue instanceof Date) {
	        return 'date';
	      } else if (propValue instanceof RegExp) {
	        return 'regexp';
	      }
	    }
	    return propType;
	  }

	  // Returns a string that is postfixed to a warning about an invalid type.
	  // For example, "undefined" or "of type array"
	  function getPostfixForTypeWarning(value) {
	    var type = getPreciseType(value);
	    switch (type) {
	      case 'array':
	      case 'object':
	        return 'an ' + type;
	      case 'boolean':
	      case 'date':
	      case 'regexp':
	        return 'a ' + type;
	      default:
	        return type;
	    }
	  }

	  // Returns class name of the object, if any.
	  function getClassName(propValue) {
	    if (!propValue.constructor || !propValue.constructor.name) {
	      return ANONYMOUS;
	    }
	    return propValue.constructor.name;
	  }

	  ReactPropTypes.checkPropTypes = checkPropTypes_1$1;
	  ReactPropTypes.resetWarningCache = checkPropTypes_1$1.resetWarningCache;
	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};

	function emptyFunction$1() {}
	function emptyFunctionWithReset$1() {}
	emptyFunctionWithReset$1.resetWarningCache = emptyFunction$1;

	var factoryWithThrowingShims$1 = function() {
	  function shim(props, propName, componentName, location, propFullName, secret) {
	    if (secret === ReactPropTypesSecret_1$1) {
	      // It is still safe when called from React.
	      return;
	    }
	    var err = new Error(
	      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	      'Use PropTypes.checkPropTypes() to call them. ' +
	      'Read more at http://fb.me/use-check-prop-types'
	    );
	    err.name = 'Invariant Violation';
	    throw err;
	  }  shim.isRequired = shim;
	  function getShim() {
	    return shim;
	  }  // Important!
	  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
	  var ReactPropTypes = {
	    array: shim,
	    bool: shim,
	    func: shim,
	    number: shim,
	    object: shim,
	    string: shim,
	    symbol: shim,

	    any: shim,
	    arrayOf: getShim,
	    element: shim,
	    elementType: shim,
	    instanceOf: getShim,
	    node: shim,
	    objectOf: getShim,
	    oneOf: getShim,
	    oneOfType: getShim,
	    shape: getShim,
	    exact: getShim,

	    checkPropTypes: emptyFunctionWithReset$1,
	    resetWarningCache: emptyFunction$1
	  };

	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};

	var propTypes$1 = createCommonjsModule$1(function (module) {
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	if (process.env.NODE_ENV !== 'production') {
	  var ReactIs = reactIs$1;

	  // By explicitly using `prop-types` you are opting into new development behavior.
	  // http://fb.me/prop-types-in-prod
	  var throwOnDirectAccess = true;
	  module.exports = factoryWithTypeCheckers$1(ReactIs.isElement, throwOnDirectAccess);
	} else {
	  // By explicitly using `prop-types` you are opting into new production behavior.
	  // http://fb.me/prop-types-in-prod
	  module.exports = factoryWithThrowingShims$1();
	}
	});
	var propTypes_1$1 = propTypes$1.array;
	var propTypes_2 = propTypes$1.bool;
	var propTypes_3 = propTypes$1.func;
	var propTypes_4 = propTypes$1.number;
	var propTypes_5 = propTypes$1.object;
	var propTypes_6 = propTypes$1.string;
	var propTypes_7 = propTypes$1.symbol;
	var propTypes_8 = propTypes$1.any;
	var propTypes_9 = propTypes$1.arrayOf;
	var propTypes_10 = propTypes$1.element;
	var propTypes_11 = propTypes$1.elementType;
	var propTypes_12 = propTypes$1.instanceOf;
	var propTypes_13 = propTypes$1.node;
	var propTypes_14 = propTypes$1.objectOf;
	var propTypes_15 = propTypes$1.oneOf;
	var propTypes_16 = propTypes$1.oneOfType;
	var propTypes_17 = propTypes$1.shape;
	var propTypes_18 = propTypes$1.exact;
	var propTypes_19 = propTypes$1.checkPropTypes;
	var propTypes_20 = propTypes$1.resetWarningCache;
	var propTypes_21 = propTypes$1.PropTypes;

	//
	// Main
	//

	function memoize$2 (fn, options) {
	  var cache = options && options.cache
	    ? options.cache
	    : cacheDefault;

	  var serializer = options && options.serializer
	    ? options.serializer
	    : serializerDefault;

	  var strategy = options && options.strategy
	    ? options.strategy
	    : strategyDefault;

	  return strategy(fn, {
	    cache: cache,
	    serializer: serializer
	  })
	}

	//
	// Strategy
	//

	function isPrimitive (value) {
	  return value == null || typeof value === 'number' || typeof value === 'boolean' // || typeof value === "string" 'unsafe' primitive for our needs
	}

	function monadic (fn, cache, serializer, arg) {
	  var cacheKey = isPrimitive(arg) ? arg : serializer(arg);

	  var computedValue = cache.get(cacheKey);
	  if (typeof computedValue === 'undefined') {
	    computedValue = fn.call(this, arg);
	    cache.set(cacheKey, computedValue);
	  }

	  return computedValue
	}

	function variadic (fn, cache, serializer) {
	  var args = Array.prototype.slice.call(arguments, 3);
	  var cacheKey = serializer(args);

	  var computedValue = cache.get(cacheKey);
	  if (typeof computedValue === 'undefined') {
	    computedValue = fn.apply(this, args);
	    cache.set(cacheKey, computedValue);
	  }

	  return computedValue
	}

	function assemble (fn, context, strategy, cache, serialize) {
	  return strategy.bind(
	    context,
	    fn,
	    cache,
	    serialize
	  )
	}

	function strategyDefault (fn, options) {
	  var strategy = fn.length === 1 ? monadic : variadic;

	  return assemble(
	    fn,
	    this,
	    strategy,
	    options.cache.create(),
	    options.serializer
	  )
	}

	function strategyVariadic (fn, options) {
	  var strategy = variadic;

	  return assemble(
	    fn,
	    this,
	    strategy,
	    options.cache.create(),
	    options.serializer
	  )
	}

	function strategyMonadic (fn, options) {
	  var strategy = monadic;

	  return assemble(
	    fn,
	    this,
	    strategy,
	    options.cache.create(),
	    options.serializer
	  )
	}

	//
	// Serializer
	//

	function serializerDefault () {
	  return JSON.stringify(arguments)
	}

	//
	// Cache
	//

	function ObjectWithoutPrototypeCache () {
	  this.cache = Object.create(null);
	}

	ObjectWithoutPrototypeCache.prototype.has = function (key) {
	  return (key in this.cache)
	};

	ObjectWithoutPrototypeCache.prototype.get = function (key) {
	  return this.cache[key]
	};

	ObjectWithoutPrototypeCache.prototype.set = function (key, value) {
	  this.cache[key] = value;
	};

	var cacheDefault = {
	  create: function create () {
	    return new ObjectWithoutPrototypeCache()
	  }
	};

	//
	// API
	//

	var src = memoize$2;
	var strategies = {
	  variadic: strategyVariadic,
	  monadic: strategyMonadic
	};
	src.strategies = strategies;

	var _ref$2;

	// Country model:
	// [
	//    Country name,
	//    Regions,
	//    iso2 code,
	//    International dial code,
	//    Format (if available),
	//    Order (if >1 country with same dial code),
	//    Area codes (if >1 country with same dial code)
	// ]
	//
	// Regions:
	// ['america', 'europe', 'asia', 'oceania', 'africa']
	//
	// Sub-regions:
	// ['north-america', 'south-america', 'central-america', 'carribean',
	//  'european-union', 'ex-ussr', 'middle-east', 'north-africa']
	var rawAllCountries = [['Afghanistan', ['asia'], 'af', '93'], ['Albania', ['europe'], 'al', '355'], ['Algeria', ['africa', 'north-africa'], 'dz', '213'], ['American Samoa', ['oceania'], 'as', '1684'], ['Andorra', ['europe'], 'ad', '376'], ['Angola', ['africa'], 'ao', '244'], ['Anguilla', ['america', 'carribean'], 'ai', '1264'], ['Antigua and Barbuda', ['america', 'carribean'], 'ag', '1268'], ['Argentina', ['america', 'south-america'], 'ar', '54', '+.. (..) ........'], ['Armenia', ['asia', 'ex-ussr'], 'am', '374'], ['Aruba', ['america', 'carribean'], 'aw', '297'], ['Australia', ['oceania'], 'au', '61', '+.. ... ... ...'], ['Austria', ['europe', 'european-union'], 'at', '43'], ['Azerbaijan', ['asia', 'ex-ussr'], 'az', '994'], ['Bahamas', ['america', 'carribean'], 'bs', '1242'], ['Bahrain', ['middle-east'], 'bh', '973'], ['Bangladesh', ['asia'], 'bd', '880'], ['Barbados', ['america', 'carribean'], 'bb', '1246'], ['Belarus', ['europe', 'ex-ussr'], 'by', '375', '+... (..) ... .. ..'], ['Belgium', ['europe', 'european-union'], 'be', '32', '+.. ... .. .. ..'], ['Belize', ['america', 'central-america'], 'bz', '501'], ['Benin', ['africa'], 'bj', '229'], ['Bermuda', ['america', 'north-america'], 'bm', '1441'], ['Bhutan', ['asia'], 'bt', '975'], ['Bolivia', ['america', 'south-america'], 'bo', '591'], ['Bosnia and Herzegovina', ['europe'], 'ba', '387'], ['Botswana', ['africa'], 'bw', '267'], ['Brazil', ['america', 'south-america'], 'br', '55', '+.. (..) .........'], ['British Indian Ocean Territory', ['asia'], 'io', '246'], ['British Virgin Islands', ['america', 'carribean'], 'vg', '1284'], ['Brunei', ['asia'], 'bn', '673'], ['Bulgaria', ['europe', 'european-union'], 'bg', '359'], ['Burkina Faso', ['africa'], 'bf', '226'], ['Burundi', ['africa'], 'bi', '257'], ['Cambodia', ['asia'], 'kh', '855'], ['Cameroon', ['africa'], 'cm', '237'], ['Canada', ['america', 'north-america'], 'ca', '1', '+. (...) ...-....', 1, ['204', '236', '249', '250', '289', '306', '343', '365', '387', '403', '416', '418', '431', '437', '438', '450', '506', '514', '519', '548', '579', '581', '587', '604', '613', '639', '647', '672', '705', '709', '742', '778', '780', '782', '807', '819', '825', '867', '873', '902', '905']], ['Cape Verde', ['africa'], 'cv', '238'], ['Caribbean Netherlands', ['america', 'carribean'], 'bq', '599', '', 1], ['Cayman Islands', ['america', 'carribean'], 'ky', '1345'], ['Central African Republic', ['africa'], 'cf', '236'], ['Chad', ['africa'], 'td', '235'], ['Chile', ['america', 'south-america'], 'cl', '56'], ['China', ['asia'], 'cn', '86', '+.. ..-.........'], ['Colombia', ['america', 'south-america'], 'co', '57'], ['Comoros', ['africa'], 'km', '269'], ['Congo', ['africa'], 'cd', '243'], ['Congo', ['africa'], 'cg', '242'], ['Cook Islands', ['oceania'], 'ck', '682'], ['Costa Rica', ['america', 'central-america'], 'cr', '506', '+... ....-....'], ['Côte d’Ivoire', ['africa'], 'ci', '225'], ['Croatia', ['europe', 'european-union'], 'hr', '385'], ['Cuba', ['america', 'carribean'], 'cu', '53'], ['Curaçao', ['america', 'carribean'], 'cw', '599', '', 0], ['Cyprus', ['europe', 'european-union'], 'cy', '357', '+... .. ......'], ['Czech Republic', ['europe', 'european-union'], 'cz', '420'], ['Denmark', ['europe', 'european-union'], 'dk', '45', '+.. .. .. .. ..'], ['Djibouti', ['africa'], 'dj', '253'], ['Dominica', ['america', 'carribean'], 'dm', '1767'], ['Dominican Republic', ['america', 'carribean'], 'do', '1', '', 2, ['809', '829', '849']], ['Ecuador', ['america', 'south-america'], 'ec', '593'], ['Egypt', ['africa', 'north-africa'], 'eg', '20'], ['El Salvador', ['america', 'central-america'], 'sv', '503', '+... ....-....'], ['Equatorial Guinea', ['africa'], 'gq', '240'], ['Eritrea', ['africa'], 'er', '291'], ['Estonia', ['europe', 'european-union', 'ex-ussr'], 'ee', '372', '+... .... ......'], ['Ethiopia', ['africa'], 'et', '251'], ['Falkland Islands', ['america', 'south-america'], 'fk', '500'], ['Faroe Islands', ['europe'], 'fo', '298'], ['Fiji', ['oceania'], 'fj', '679'], ['Finland', ['europe', 'european-union'], 'fi', '358', '+... .. ... .. ..'], ['France', ['europe', 'european-union'], 'fr', '33', '+.. . .. .. .. ..'], ['French Guiana', ['america', 'south-america'], 'gf', '594'], ['French Polynesia', ['oceania'], 'pf', '689'], ['Gabon', ['africa'], 'ga', '241'], ['Gambia', ['africa'], 'gm', '220'], ['Georgia', ['asia', 'ex-ussr'], 'ge', '995'], ['Germany', ['europe', 'european-union'], 'de', '49', '+.. .... ........'], ['Ghana', ['africa'], 'gh', '233'], ['Gibraltar', ['europe'], 'gi', '350'], ['Greece', ['europe', 'european-union'], 'gr', '30'], ['Greenland', ['america'], 'gl', '299'], ['Grenada', ['america', 'carribean'], 'gd', '1473'], ['Guadeloupe', ['america', 'carribean'], 'gp', '590', '', 0], ['Guam', ['oceania'], 'gu', '1671'], ['Guatemala', ['america', 'central-america'], 'gt', '502', '+... ....-....'], ['Guinea', ['africa'], 'gn', '224'], ['Guinea-Bissau', ['africa'], 'gw', '245'], ['Guyana', ['america', 'south-america'], 'gy', '592'], ['Haiti', ['america', 'carribean'], 'ht', '509', '+... ....-....'], ['Honduras', ['america', 'central-america'], 'hn', '504'], ['Hong Kong', ['asia'], 'hk', '852', '+... .... ....'], ['Hungary', ['europe', 'european-union'], 'hu', '36'], ['Iceland', ['europe'], 'is', '354', '+... ... ....'], ['India', ['asia'], 'in', '91', '+.. .....-.....'], ['Indonesia', ['asia'], 'id', '62'], ['Iran', ['middle-east'], 'ir', '98'], ['Iraq', ['middle-east'], 'iq', '964'], ['Ireland', ['europe', 'european-union'], 'ie', '353', '+... .. .......'], ['Israel', ['middle-east'], 'il', '972', '+... ... ... ....'], ['Italy', ['europe', 'european-union'], 'it', '39', '+.. ... .......', 0], ['Jamaica', ['america', 'carribean'], 'jm', '1876'], ['Japan', ['asia'], 'jp', '81', '+.. .. .... ....'], ['Jordan', ['middle-east'], 'jo', '962'], ['Kazakhstan', ['asia', 'ex-ussr'], 'kz', '7', '+. ... ...-..-..', 1, ['313', '327', '7172', '312', '73622', '321', '324', '336', '318', '315', '325', '311', '326', '310']], ['Kenya', ['africa'], 'ke', '254'], ['Kiribati', ['oceania'], 'ki', '686'], ['Kuwait', ['middle-east'], 'kw', '965'], ['Kyrgyzstan', ['asia', 'ex-ussr'], 'kg', '996'], ['Laos', ['asia'], 'la', '856'], ['Latvia', ['europe', 'european-union', 'ex-ussr'], 'lv', '371'], ['Lebanon', ['middle-east'], 'lb', '961'], ['Lesotho', ['africa'], 'ls', '266'], ['Liberia', ['africa'], 'lr', '231'], ['Libya', ['africa', 'north-africa'], 'ly', '218'], ['Liechtenstein', ['europe'], 'li', '423'], ['Lithuania', ['europe', 'european-union', 'ex-ussr'], 'lt', '370'], ['Luxembourg', ['europe', 'european-union'], 'lu', '352'], ['Macau', ['asia'], 'mo', '853'], ['Macedonia', ['europe'], 'mk', '389'], ['Madagascar', ['africa'], 'mg', '261'], ['Malawi', ['africa'], 'mw', '265'], ['Malaysia', ['asia'], 'my', '60', '+.. ..-....-....'], ['Maldives', ['asia'], 'mv', '960'], ['Mali', ['africa'], 'ml', '223'], ['Malta', ['europe', 'european-union'], 'mt', '356'], ['Marshall Islands', ['oceania'], 'mh', '692'], ['Martinique', ['america', 'carribean'], 'mq', '596'], ['Mauritania', ['africa'], 'mr', '222'], ['Mauritius', ['africa'], 'mu', '230'], ['Mexico', ['america', 'central-america'], 'mx', '52'], ['Micronesia', ['oceania'], 'fm', '691'], ['Moldova', ['europe'], 'md', '373', '+... (..) ..-..-..'], ['Monaco', ['europe'], 'mc', '377'], ['Mongolia', ['asia'], 'mn', '976'], ['Montenegro', ['europe'], 'me', '382'], ['Montserrat', ['america', 'carribean'], 'ms', '1664'], ['Morocco', ['africa', 'north-africa'], 'ma', '212'], ['Mozambique', ['africa'], 'mz', '258'], ['Myanmar', ['asia'], 'mm', '95'], ['Namibia', ['africa'], 'na', '264'], ['Nauru', ['africa'], 'nr', '674'], ['Nepal', ['asia'], 'np', '977'], ['Netherlands', ['europe', 'european-union'], 'nl', '31', '+.. .. ........'], ['New Caledonia', ['oceania'], 'nc', '687'], ['New Zealand', ['oceania'], 'nz', '64', '+.. ...-...-....'], ['Nicaragua', ['america', 'central-america'], 'ni', '505'], ['Niger', ['africa'], 'ne', '227'], ['Nigeria', ['africa'], 'ng', '234'], ['Niue', ['asia'], 'nu', '683'], ['Norfolk Island', ['oceania'], 'nf', '672'], ['North Korea', ['asia'], 'kp', '850'], ['Northern Mariana Islands', ['oceania'], 'mp', '1670'], ['Norway', ['europe'], 'no', '47', '+.. ... .. ...'], ['Oman', ['middle-east'], 'om', '968'], ['Pakistan', ['asia'], 'pk', '92', '+.. ...-.......'], ['Palau', ['oceania'], 'pw', '680'], ['Palestine', ['middle-east'], 'ps', '970'], ['Panama', ['america', 'central-america'], 'pa', '507'], ['Papua New Guinea', ['oceania'], 'pg', '675'], ['Paraguay', ['america', 'south-america'], 'py', '595'], ['Peru', ['america', 'south-america'], 'pe', '51'], ['Philippines', ['asia'], 'ph', '63', '+.. .... .......'], ['Poland', ['europe', 'european-union'], 'pl', '48', '+.. ...-...-...'], ['Portugal', ['europe', 'european-union'], 'pt', '351'], ['Puerto Rico', ['america', 'carribean'], 'pr', '1', '', 3, ['787', '939']], ['Qatar', ['middle-east'], 'qa', '974'], ['Réunion', ['africa'], 're', '262'], ['Romania', ['europe', 'european-union'], 'ro', '40'], ['Russia', ['europe', 'asia', 'ex-ussr'], 'ru', '7', '+. (...) ...-..-..', 0], ['Rwanda', ['africa'], 'rw', '250'], ['Saint Barthélemy', ['america', 'carribean'], 'bl', '590', '', 1], ['Saint Helena', ['africa'], 'sh', '290'], ['Saint Kitts and Nevis', ['america', 'carribean'], 'kn', '1869'], ['Saint Lucia', ['america', 'carribean'], 'lc', '1758'], ['Saint Martin', ['america', 'carribean'], 'mf', '590', '', 2], ['Saint Pierre and Miquelon', ['america', 'north-america'], 'pm', '508'], ['Saint Vincent and the Grenadines', ['america', 'carribean'], 'vc', '1784'], ['Samoa', ['oceania'], 'ws', '685'], ['San Marino', ['europe'], 'sm', '378'], ['São Tomé and Príncipe', ['africa'], 'st', '239'], ['Saudi Arabia', ['middle-east'], 'sa', '966'], ['Senegal', ['africa'], 'sn', '221'], ['Serbia', ['europe'], 'rs', '381'], ['Seychelles', ['africa'], 'sc', '248'], ['Sierra Leone', ['africa'], 'sl', '232'], ['Singapore', ['asia'], 'sg', '65', '+.. ....-....'], ['Sint Maarten', ['america', 'carribean'], 'sx', '1721'], ['Slovakia', ['europe', 'european-union'], 'sk', '421'], ['Slovenia', ['europe', 'european-union'], 'si', '386'], ['Solomon Islands', ['oceania'], 'sb', '677'], ['Somalia', ['africa'], 'so', '252'], ['South Africa', ['africa'], 'za', '27'], ['South Korea', ['asia'], 'kr', '82', '+.. ... .... ....'], ['South Sudan', ['africa', 'north-africa'], 'ss', '211'], ['Spain', ['europe', 'european-union'], 'es', '34', '+.. ... ... ...'], ['Sri Lanka', ['asia'], 'lk', '94'], ['Sudan', ['africa'], 'sd', '249'], ['Suriname', ['america', 'south-america'], 'sr', '597'], ['Swaziland', ['africa'], 'sz', '268'], ['Sweden', ['europe', 'european-union'], 'se', '46', '+.. (..) ...-..-..'], ['Switzerland', ['europe'], 'ch', '41', '+.. .. ... .. ..'], ['Syria', ['middle-east'], 'sy', '963'], ['Taiwan', ['asia'], 'tw', '886'], ['Tajikistan', ['asia', 'ex-ussr'], 'tj', '992'], ['Tanzania', ['africa'], 'tz', '255'], ['Thailand', ['asia'], 'th', '66'], ['Timor-Leste', ['asia'], 'tl', '670'], ['Togo', ['africa'], 'tg', '228'], ['Tokelau', ['oceania'], 'tk', '690'], ['Tonga', ['oceania'], 'to', '676'], ['Trinidad and Tobago', ['america', 'carribean'], 'tt', '1868'], ['Tunisia', ['africa', 'north-africa'], 'tn', '216'], ['Turkey', ['europe'], 'tr', '90', '+.. ... ... .. ..'], ['Turkmenistan', ['asia', 'ex-ussr'], 'tm', '993'], ['Turks and Caicos Islands', ['america', 'carribean'], 'tc', '1649'], ['Tuvalu', ['asia'], 'tv', '688'], ['U.S. Virgin Islands', ['america', 'carribean'], 'vi', '1340'], ['Uganda', ['africa'], 'ug', '256'], ['Ukraine', ['europe', 'ex-ussr'], 'ua', '380', '+... (..) ... .. ..'], ['United Arab Emirates', ['middle-east'], 'ae', '971'], ['United Kingdom', ['europe', 'european-union'], 'gb', '44', '+.. .... ......'], ['United States', ['america', 'north-america'], 'us', '1', '+. (...) ...-....', 0, ['907', '205', '251', '256', '334', '479', '501', '870', '480', '520', '602', '623', '928', '209', '213', '310', '323', '408', '415', '510', '530', '559', '562', '619', '626', '650', '661', '707', '714', '760', '805', '818', '831', '858', '909', '916', '925', '949', '951', '303', '719', '970', '203', '860', '202', '302', '239', '305', '321', '352', '386', '407', '561', '727', '772', '813', '850', '863', '904', '941', '954', '229', '404', '478', '706', '770', '912', '808', '319', '515', '563', '641', '712', '208', '217', '309', '312', '618', '630', '708', '773', '815', '847', '219', '260', '317', '574', '765', '812', '316', '620', '785', '913', '270', '502', '606', '859', '225', '318', '337', '504', '985', '413', '508', '617', '781', '978', '301', '410', '207', '231', '248', '269', '313', '517', '586', '616', '734', '810', '906', '989', '218', '320', '507', '612', '651', '763', '952', '314', '417', '573', '636', '660', '816', '228', '601', '662', '406', '252', '336', '704', '828', '910', '919', '701', '308', '402', '603', '201', '609', '732', '856', '908', '973', '505', '575', '702', '775', '212', '315', '516', '518', '585', '607', '631', '716', '718', '845', '914', '216', '330', '419', '440', '513', '614', '740', '937', '405', '580', '918', '503', '541', '215', '412', '570', '610', '717', '724', '814', '401', '803', '843', '864', '605', '423', '615', '731', '865', '901', '931', '210', '214', '254', '281', '325', '361', '409', '432', '512', '713', '806', '817', '830', '903', '915', '936', '940', '956', '972', '979', '435', '801', '276', '434', '540', '703', '757', '804', '802', '206', '253', '360', '425', '509', '262', '414', '608', '715', '920', '304', '307']], ['Uruguay', ['america', 'south-america'], 'uy', '598'], ['Uzbekistan', ['asia', 'ex-ussr'], 'uz', '998'], ['Vanuatu', ['oceania'], 'vu', '678'], ['Vatican City', ['europe'], 'va', '39', '+.. .. .... ....', 1], ['Venezuela', ['america', 'south-america'], 've', '58'], ['Vietnam', ['asia'], 'vn', '84'], ['Wallis and Futuna', ['oceania'], 'wf', '681'], ['Yemen', ['middle-east'], 'ye', '967'], ['Zambia', ['africa'], 'zm', '260'], ['Zimbabwe', ['africa'], 'zw', '263']];
	var allCountryCodes = {};

	function addCountryCode(iso2, dialCode, priority) {
	  if (!(dialCode in allCountryCodes)) {
	    allCountryCodes[dialCode] = [];
	  }

	  var index = priority || 0;
	  allCountryCodes[dialCode][index] = iso2;
	}

	var allCountries = (_ref$2 = []).concat.apply(_ref$2, _toConsumableArray$1(rawAllCountries.map(function (country) {
	  var _country = _slicedToArray$1(country, 7),
	      name = _country[0],
	      regions = _country[1],
	      iso2 = _country[2],
	      dialCode = _country[3],
	      format = _country[4],
	      priority = _country[5],
	      areaCodes = _country[6];

	  var countryItem = {
	    name: name,
	    regions: regions,
	    iso2: iso2,
	    dialCode: dialCode,
	    priority: priority,
	    format: format || undefined,
	    hasAreaCodes: areaCodes
	  };
	  var areaItems = [];

	  if (countryItem.hasAreaCodes) {
	    areaCodes.forEach(function (areaCode) {
	      var areaItem = _objectSpread2({}, countryItem, {
	        regions: regions,
	        dialCode: "".concat(dialCode).concat(areaCode),
	        isAreaCode: true
	      });

	      areaItems.push(areaItem);
	      addCountryCode(iso2, areaItem.dialCode);
	    });
	  }

	  addCountryCode(countryItem.iso2, countryItem.dialCode, countryItem.hasAreaCodes);
	  return areaItems.length > 0 ? [countryItem].concat(areaItems) : [countryItem];
	})));

	var countryData = {
	  allCountries: allCountries,
	  allCountryCodes: allCountryCodes
	};

	var Item = /*#__PURE__*/function (_PureComponent) {
	  _inherits$1(Item, _PureComponent);

	  var _super = _createSuper$1(Item);

	  function Item() {
	    _classCallCheck$1(this, Item);

	    return _super.apply(this, arguments);
	  }

	  _createClass$1(Item, [{
	    key: "render",
	    value: function render() {
	      var _this$props = this.props,
	          name = _this$props.name,
	          iso2 = _this$props.iso2,
	          dialCode = _this$props.dialCode,
	          localization = _this$props.localization,
	          itemRef = _this$props.itemRef,
	          native = _this$props.native,
	          restProps = _objectWithoutProperties$2(_this$props, ["name", "iso2", "dialCode", "localization", "itemRef", "native"]);

	      if (native) {
	        return /*#__PURE__*/React__default.createElement("option", _extends$1({
	          className: "country",
	          "data-dial-code": "1",
	          "data-country-code": iso2,
	          value: iso2
	        }, restProps), localization || name, ' ', "+".concat(dialCode));
	      }

	      return /*#__PURE__*/React__default.createElement(RootRef, {
	        rootRef: function rootRef(node) {
	          return itemRef(node);
	        }
	      }, /*#__PURE__*/React__default.createElement(MenuItem$1, _extends$1({
	        className: "country",
	        "data-dial-code": "1",
	        "data-country-code": iso2
	      }, restProps), /*#__PURE__*/React__default.createElement("span", {
	        className: "flag-icon flag-icon-".concat(iso2),
	        style: {
	          width: 16,
	          marginRight: 8
	        }
	      }), /*#__PURE__*/React__default.createElement("span", {
	        className: "country-name"
	      }, localization || name), /*#__PURE__*/React__default.createElement("span", {
	        className: "dial-code"
	      }, "+".concat(dialCode))));
	    }
	  }]);

	  return Item;
	}(React.PureComponent);

	Item.propTypes = {
	  name: propTypes$1.string.isRequired,
	  iso2: propTypes$1.string.isRequired,
	  dialCode: propTypes$1.string.isRequired,
	  itemRef: propTypes$1.func.isRequired,
	  localization: propTypes$1.string,
	  native: propTypes$1.bool
	};
	Item.defaultProps = {
	  localization: null,
	  native: false
	};

	if (!Array.prototype.findIndex) {
	  Object.defineProperty(Array.prototype, 'findIndex', {
	    value: function value(predicate) {
	      // 1. Let O be ? ToObject(this value).
	      if (this == null) {
	        throw new TypeError('"this" is null or not defined');
	      }

	      var o = Object(this); // 2. Let len be ? ToLength(? Get(O, "length")).

	      var len = o.length >>> 0; // 3. If IsCallable(predicate) is false, throw a TypeError exception.

	      if (typeof predicate !== 'function') {
	        throw new TypeError('predicate must be a function');
	      } // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.


	      var thisArg = arguments[1]; // 5. Let k be 0.

	      var k = 0; // 6. Repeat, while k < len

	      while (k < len) {
	        // a. Let Pk be ! ToString(k).
	        // b. Let kValue be ? Get(O, Pk).
	        // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).
	        // d. If testResult is true, return k.
	        var kValue = o[k];

	        if (predicate.call(thisArg, kValue, k, o)) {
	          return k;
	        } // e. Increase k by 1.


	        k++;
	      } // 7. Return -1.


	      return -1;
	    },
	    configurable: true,
	    writable: true
	  });
	}

	if (!Array.prototype.includes) {
	  Object.defineProperty(Array.prototype, 'includes', {
	    value: function value(val) {
	      if (this == null) {
	        throw new TypeError('"this" is null or not defined');
	      }

	      return this.indexOf(val) > -1;
	    },
	    configurable: true,
	    writable: true
	  });
	}

	if (!String.prototype.includes) {
	  String.prototype.includes = function (search, start) {

	    if (search instanceof RegExp) {
	      throw TypeError('first argument must not be a RegExp');
	    }

	    if (start === undefined) {
	      start = 0;
	    }

	    return this.indexOf(search, start) !== -1;
	  };
	}

	if (!String.prototype.startsWith) {
	  Object.defineProperty(String.prototype, 'startsWith', {
	    value: function value(search, rawPos) {
	      var pos = rawPos > 0 ? rawPos | 0 : 0;
	      return this.substring(pos, pos + search.length) === search;
	    }
	  });
	}

	var head = function head(array) {
	  var _array = _toArray$1(array),
	      h = _array[0],
	      t = _array.slice(1);

	  return h;
	};

	var tail = function tail(array) {
	  var _array2 = _toArray$1(array),
	      h = _array2[0],
	      t = _array2.slice(1);

	  return t;
	};

	var styles$R = function styles() {
	  return {
	    flagButton: {
	      minWidth: 30,
	      padding: 0,
	      height: 30
	    },
	    native: {
	      width: 30,
	      height: 30,
	      padding: 8
	    },
	    nativeRoot: {
	      padding: 0,
	      '& + svg': {
	        display: 'none'
	      }
	    },
	    nativeSelect: {
	      padding: 0,
	      lineHeight: 0,
	      height: 11
	    },
	    positionStart: {
	      position: 'relative'
	    }
	  };
	};

	var MaterialUiPhoneNumber = /*#__PURE__*/function (_Component) {
	  _inherits$1(MaterialUiPhoneNumber, _Component);

	  var _super = _createSuper$1(MaterialUiPhoneNumber);

	  function MaterialUiPhoneNumber(props) {
	    var _this;

	    _classCallCheck$1(this, MaterialUiPhoneNumber);

	    _this = _super.call(this, props);
	    _this.flags = {};
	    _this.guessSelectedCountry = src(function (inputNumber, onlyCountries, defaultCountry) {
	      var secondBestGuess = onlyCountries.find(function (c) {
	        return c.iso2 === defaultCountry;
	      }) || {};
	      if (inputNumber.trim() === '') return secondBestGuess;
	      var bestGuess = onlyCountries.reduce(function (selectedCountry, country) {
	        if (inputNumber.startsWith(country.dialCode)) {
	          if (country.dialCode.length > selectedCountry.dialCode.length) {
	            return country;
	          }

	          if (country.dialCode.length === selectedCountry.dialCode.length && country.priority < selectedCountry.priority) {
	            return country;
	          }
	        }

	        return selectedCountry;
	      }, {
	        dialCode: '',
	        priority: 10001
	      }, _assertThisInitialized$1(_this));
	      if (!bestGuess.name) return secondBestGuess;
	      return bestGuess;
	    });
	    _this.getProbableCandidate = src(function (queryString) {
	      if (!queryString || queryString.length === 0) {
	        return null;
	      }

	      var onlyCountries = _this.state.onlyCountries; // don't include the preferred countries in search

	      var probableCountries = onlyCountries.filter(function (country) {
	        return country.name.toLowerCase().startsWith(queryString.toLowerCase());
	      }, _assertThisInitialized$1(_this));
	      return probableCountries[0];
	    });

	    _this.getOnlyCountries = function (onlyCountriesArray, filteredCountries) {
	      if (onlyCountriesArray.length === 0) return filteredCountries;
	      return filteredCountries.filter(function (country) {
	        return onlyCountriesArray.some(function (element) {
	          return element === country.iso2;
	        });
	      });
	    };

	    _this.excludeCountries = function (selectedCountries, excludedCountries) {
	      if (excludedCountries.length === 0) {
	        return selectedCountries;
	      }

	      return selectedCountries.filter(function (selCountry) {
	        return !excludedCountries.includes(selCountry.iso2);
	      });
	    };

	    _this.filterRegions = function (regions, filteredCountries) {
	      if (typeof regions === 'string') {
	        var region = regions;
	        return filteredCountries.filter(function (country) {
	          return country.regions.some(function (element) {
	            return element === region;
	          });
	        });
	      }

	      return filteredCountries.filter(function (country) {
	        var matches = regions.map(function (region) {
	          return country.regions.some(function (element) {
	            return element === region;
	          });
	        });
	        return matches.some(function (el) {
	          return el;
	        });
	      });
	    };

	    _this.deleteAreaCodes = function (filteredCountries) {
	      return filteredCountries.filter(function (country) {
	        return country.isAreaCode !== true;
	      });
	    };

	    _this.updateDefaultCountry = function (country) {
	      var onlyCountries = _this.state.onlyCountries;
	      var disableCountryCode = _this.props.disableCountryCode;
	      var newSelectedCountry = onlyCountries.find(function (c) {
	        return c.iso2 === country;
	      });

	      _this.setState({
	        defaultCountry: country,
	        selectedCountry: newSelectedCountry,
	        formattedNumber: disableCountryCode ? '' : "+".concat(newSelectedCountry.dialCode)
	      });
	    };

	    _this.scrollTo = function (country) {
	      if (!country) {
	        return;
	      }

	      var container = _this.dropdownContainerRef;

	      if (!container || !document.body) {
	        return;
	      }

	      container.scrollTop = country.offsetTop;
	    };

	    _this.formatNumber = function (text, patternArg) {
	      var _this$props = _this.props,
	          disableCountryCode = _this$props.disableCountryCode,
	          enableLongNumbers = _this$props.enableLongNumbers,
	          autoFormat = _this$props.autoFormat;
	      var pattern;

	      if (disableCountryCode && patternArg) {
	        pattern = patternArg.split(' ');
	        pattern.shift();
	        pattern = pattern.join(' ');
	      } else {
	        pattern = patternArg;
	      }

	      if (!text || text.length === 0) {
	        return disableCountryCode ? '' : '+';
	      } // for all strings with length less than 3, just return it (1, 2 etc.)
	      // also return the same text if the selected country has no fixed format


	      if (text && text.length < 2 || !pattern || !autoFormat) {
	        return disableCountryCode ? text : "+".concat(text);
	      }

	      var formattedObject = pattern.split('').reduce(function (acc, character) {
	        if (acc.remainingText.length === 0) {
	          return acc;
	        }

	        if (character !== '.') {
	          return {
	            formattedText: acc.formattedText + character,
	            remainingText: acc.remainingText
	          };
	        }

	        return {
	          formattedText: acc.formattedText + head(acc.remainingText),
	          remainingText: tail(acc.remainingText)
	        };
	      }, {
	        formattedText: '',
	        remainingText: text.split('')
	      });
	      var formattedNumber;

	      if (enableLongNumbers) {
	        formattedNumber = formattedObject.formattedText + formattedObject.remainingText.join('');
	      } else {
	        formattedNumber = formattedObject.formattedText;
	      } // Always close brackets


	      if (formattedNumber.includes('(') && !formattedNumber.includes(')')) formattedNumber += ')';
	      return formattedNumber;
	    };

	    _this.cursorToEnd = function () {
	      var isModernBrowser = _this.props.isModernBrowser;
	      var input = _this.inputRef;
	      input.focus();

	      if (isModernBrowser) {
	        var len = input.value.length;
	        input.setSelectionRange(len, len);
	      }
	    };

	    _this.getElement = function (index) {
	      return _this.flags["flag_no_".concat(index)];
	    };

	    _this.getCountryData = function () {
	      var selectedCountry = _this.state.selectedCountry;
	      if (!selectedCountry) return {};
	      return {
	        name: selectedCountry.name || '',
	        dialCode: selectedCountry.dialCode || '',
	        countryCode: selectedCountry.iso2 || ''
	      };
	    };

	    _this.handleFlagDropdownClick = function () {
	      var _this$state = _this.state,
	          anchorEl = _this$state.anchorEl,
	          selectedCountry = _this$state.selectedCountry,
	          preferredCountries = _this$state.preferredCountries,
	          onlyCountries = _this$state.onlyCountries;
	      var disabled = _this.props.disabled;
	      if (!anchorEl && disabled) return;
	      var highlightCountryIndex = preferredCountries.includes(selectedCountry) ? preferredCountries.findIndex(function (c) {
	        c.iso2 === selectedCountry.iso2;
	      }) : onlyCountries.findIndex(function (c) {
	        c.iso2 === selectedCountry.iso2;
	      });

	      if (preferredCountries.includes(selectedCountry)) {
	        _this.setState({
	          highlightCountryIndex: highlightCountryIndex
	        }, function () {
	          if (anchorEl) {
	            _this.scrollTo(_this.getElement(highlightCountryIndex));
	          }
	        });
	      } else {
	        _this.setState({
	          highlightCountryIndex: highlightCountryIndex
	        }, function () {
	          if (anchorEl) {
	            _this.scrollTo(_this.getElement(highlightCountryIndex + preferredCountries.length));
	          }
	        });
	      }
	    };

	    _this.handleInput = function (e) {
	      var _this$state2 = _this.state,
	          newSelectedCountry = _this$state2.selectedCountry,
	          freezeSelection = _this$state2.freezeSelection;
	      var _this$state3 = _this.state,
	          selectedCountry = _this$state3.selectedCountry,
	          oldFormattedText = _this$state3.formattedNumber,
	          onlyCountries = _this$state3.onlyCountries,
	          defaultCountry = _this$state3.defaultCountry;
	      var _this$props2 = _this.props,
	          disableCountryCode = _this$props2.disableCountryCode,
	          countryCodeEditable = _this$props2.countryCodeEditable,
	          isModernBrowser = _this$props2.isModernBrowser,
	          onChange = _this$props2.onChange;
	      var formattedNumber = disableCountryCode ? '' : '+';

	      if (!countryCodeEditable) {
	        var updatedInput = "+".concat(newSelectedCountry.dialCode);

	        if (e.target.value.length < updatedInput.length) {
	          return;
	        }
	      } // Does not exceed 15 digit phone number limit


	      if (e.target.value.replace(/\D/g, '').length > 15) {
	        return;
	      } // if the input is the same as before, must be some special key like enter etc.


	      if (e.target.value === oldFormattedText) {
	        return;
	      } // ie hack


	      if (e.preventDefault) {
	        e.preventDefault();
	      } else {
	        e.returnValue = false;
	      }

	      if (e.target.value.length > 0) {
	        // before entering the number in new format, lets check if the dial code now matches some other country
	        var inputNumber = e.target.value.replace(/\D/g, ''); // we don't need to send the whole number to guess the country... only the first 6 characters are enough
	        // the guess country function can then use memoization much more effectively since the set of input it
	        // gets has drastically reduced

	        if (!freezeSelection || selectedCountry.dialCode.length > inputNumber.length) {
	          newSelectedCountry = _this.guessSelectedCountry(inputNumber.substring(0, 6), onlyCountries, defaultCountry);
	          freezeSelection = false;
	        } // let us remove all non numerals from the input


	        formattedNumber = _this.formatNumber(inputNumber, newSelectedCountry.format);
	      }

	      var caretPosition = e.target.selectionStart;
	      var diff = formattedNumber.length - oldFormattedText.length;

	      _this.setState({
	        formattedNumber: formattedNumber,
	        freezeSelection: freezeSelection,
	        selectedCountry: newSelectedCountry.dialCode ? newSelectedCountry : selectedCountry
	      }, function () {
	        if (isModernBrowser) {
	          if (diff > 0) {
	            caretPosition -= diff;
	          }

	          var lastChar = formattedNumber.charAt(formattedNumber.length - 1);

	          if (lastChar === ')') {
	            _this.inputRef.setSelectionRange(formattedNumber.length - 1, formattedNumber.length - 1);
	          } else if (caretPosition > 0 && oldFormattedText.length >= formattedNumber.length) {
	            _this.inputRef.setSelectionRange(caretPosition, caretPosition);
	          }
	        }

	        if (onChange) {
	          onChange(formattedNumber, _this.getCountryData());
	        }
	      });
	    };

	    _this.handleRefInput = function (ref) {
	      var _this$props3 = _this.props,
	          inputRef = _this$props3.inputRef,
	          InputProps = _this$props3.InputProps;
	      _this.inputRef = ref;
	      var refProp;

	      if (inputRef) {
	        refProp = inputRef;
	      } else if (InputProps && InputProps.ref) {
	        refProp = InputProps.ref;
	      }

	      if (refProp) {
	        if (typeof refProp === 'function') {
	          refProp(ref);
	        } else {
	          refProp.current = ref;
	        }
	      }
	    };

	    _this.handleInputClick = function (e) {
	      var onClick = _this.props.onClick;

	      if (onClick) {
	        onClick(e, _this.getCountryData());
	      }
	    };

	    _this.handleFlagItemClick = function (country) {
	      var _this$state4 = _this.state,
	          formattedNumber = _this$state4.formattedNumber,
	          selectedCountry = _this$state4.selectedCountry,
	          onlyCountries = _this$state4.onlyCountries;
	      var onChange = _this.props.onChange;
	      var currentSelectedCountry = selectedCountry;
	      var nextSelectedCountry = isString(country) ? onlyCountries.find(function (c) {
	        return c.iso2 === country;
	      }) : onlyCountries.find(function (c) {
	        return c.iso2 === country.iso2;
	      });
	      var unformattedNumber = formattedNumber.replace(' ', '').replace('(', '').replace(')', '').replace('-', '');
	      var newNumber = unformattedNumber.length > 1 ? unformattedNumber.replace(currentSelectedCountry.dialCode, nextSelectedCountry.dialCode) : nextSelectedCountry.dialCode;

	      var newFormattedNumber = _this.formatNumber(newNumber.replace(/\D/g, ''), nextSelectedCountry.format);

	      _this.setState({
	        anchorEl: null,
	        selectedCountry: nextSelectedCountry,
	        freezeSelection: true,
	        formattedNumber: newFormattedNumber
	      }, function () {
	        _this.cursorToEnd();

	        if (onChange) {
	          onChange(newFormattedNumber, _this.getCountryData());
	        }
	      });
	    };

	    _this.handleInputFocus = function (e) {
	      var selectedCountry = _this.state.selectedCountry;
	      var _this$props4 = _this.props,
	          disableCountryCode = _this$props4.disableCountryCode,
	          onFocus = _this$props4.onFocus; // if the input is blank, insert dial code of the selected country

	      if (_this.inputRef) {
	        if (_this.inputRef.value === '+' && selectedCountry && !disableCountryCode) {
	          _this.setState({
	            formattedNumber: "+".concat(selectedCountry.dialCode)
	          }, function () {
	            return setTimeout(_this.cursorToEnd, 10);
	          });
	        }
	      }

	      _this.setState({
	        placeholder: ''
	      });

	      if (onFocus) {
	        onFocus(e, _this.getCountryData());
	      }

	      setTimeout(_this.cursorToEnd, 10);
	    };

	    _this.handleInputBlur = function (e) {
	      var _this$props5 = _this.props,
	          placeholder = _this$props5.placeholder,
	          onBlur = _this$props5.onBlur;

	      if (!e.target.value) {
	        _this.setState({
	          placeholder: placeholder
	        });
	      }

	      if (onBlur) {
	        onBlur(e, _this.getCountryData());
	      }
	    };

	    _this.getHighlightCountryIndex = function (direction) {
	      var _this$state5 = _this.state,
	          oldHighlightCountryIndex = _this$state5.highlightCountryIndex,
	          onlyCountries = _this$state5.onlyCountries,
	          preferredCountries = _this$state5.preferredCountries; // had to write own function because underscore does not have findIndex. lodash has it

	      var highlightCountryIndex = oldHighlightCountryIndex + direction;

	      if (highlightCountryIndex < 0 || highlightCountryIndex >= onlyCountries.length + preferredCountries.length) {
	        return highlightCountryIndex - direction;
	      }

	      return highlightCountryIndex;
	    };

	    _this.searchCountry = function () {
	      var _this$state6 = _this.state,
	          queryString = _this$state6.queryString,
	          onlyCountries = _this$state6.onlyCountries,
	          preferredCountries = _this$state6.preferredCountries;
	      var probableCandidate = _this.getProbableCandidate(queryString) || onlyCountries[0];
	      var probableCandidateIndex = onlyCountries.findIndex(function (c) {
	        return c.iso2 === probableCandidate.iso2;
	      }) + preferredCountries.length;

	      _this.scrollTo(_this.getElement(probableCandidateIndex), true);

	      _this.setState({
	        queryString: '',
	        highlightCountryIndex: probableCandidateIndex
	      });
	    };

	    _this.handleKeydown = function (e) {
	      var _this$state7 = _this.state,
	          anchorEl = _this$state7.anchorEl,
	          highlightCountryIndex = _this$state7.highlightCountryIndex,
	          preferredCountries = _this$state7.preferredCountries,
	          onlyCountries = _this$state7.onlyCountries,
	          queryString = _this$state7.queryString,
	          debouncedQueryStringSearcher = _this$state7.debouncedQueryStringSearcher;
	      var _this$props6 = _this.props,
	          keys = _this$props6.keys,
	          disabled = _this$props6.disabled;
	      if (!anchorEl || disabled) return true; // ie hack

	      if (e.preventDefault) {
	        e.preventDefault();
	      } else {
	        e.returnValue = false;
	      }

	      var moveHighlight = function moveHighlight(direction) {
	        _this.setState({
	          highlightCountryIndex: _this.getHighlightCountryIndex(direction)
	        }, function () {
	          _this.scrollTo(_this.getElement(highlightCountryIndex + preferredCountries.length), true);
	        });
	      };

	      switch (e.which) {
	        case keys.DOWN:
	          moveHighlight(1);
	          break;

	        case keys.UP:
	          moveHighlight(-1);
	          break;

	        case keys.ENTER:
	          _this.handleFlagItemClick(onlyCountries[highlightCountryIndex], e);

	          break;

	        case keys.ESC:
	          _this.setState({
	            anchorEl: null
	          }, _this.cursorToEnd);

	          break;

	        default:
	          if (e.which >= keys.A && e.which <= keys.Z || e.which === keys.SPACE) {
	            _this.setState({
	              queryString: queryString + String.fromCharCode(e.which)
	            }, debouncedQueryStringSearcher);
	          }

	      }
	    };

	    _this.handleInputKeyDown = function (e) {
	      var _this$props7 = _this.props,
	          keys = _this$props7.keys,
	          onEnterKeyPress = _this$props7.onEnterKeyPress,
	          onKeyDown = _this$props7.onKeyDown;

	      if (e.which === keys.ENTER && onEnterKeyPress) {
	        onEnterKeyPress(e);
	      }

	      if (onKeyDown) {
	        onKeyDown(e);
	      }
	    };

	    _this.checkIfValid = function () {
	      var formattedNumber = _this.state.formattedNumber;
	      var isValid = _this.props.isValid;
	      return isValid(formattedNumber.replace(/\D/g, ''));
	    };

	    _this.updateFormattedNumber = function (number) {
	      var _this$state8 = _this.state,
	          onlyCountries = _this$state8.onlyCountries,
	          defaultCountry = _this$state8.defaultCountry;
	      var disableCountryCode = _this.props.disableCountryCode;
	      var countryGuess;
	      var inputNumber = number;
	      var formattedNumber = number; // if inputNumber does not start with '+', then use default country's dialing prefix,
	      // otherwise use logic for finding country based on country prefix.

	      if (!inputNumber.startsWith('+')) {
	        countryGuess = onlyCountries.find(function (c) {
	          return c.iso2 === defaultCountry;
	        });
	        var dialCode = countryGuess && !inputNumber.replace(/\D/g, '').startsWith(countryGuess.dialCode) ? countryGuess.dialCode : '';
	        formattedNumber = _this.formatNumber((disableCountryCode ? '' : dialCode) + inputNumber.replace(/\D/g, ''), countryGuess ? countryGuess.format : undefined);
	      } else {
	        inputNumber = inputNumber.replace(/\D/g, '');
	        countryGuess = _this.guessSelectedCountry(inputNumber.substring(0, 6), onlyCountries, defaultCountry);
	        formattedNumber = _this.formatNumber(inputNumber, countryGuess.format);
	      }

	      _this.setState({
	        selectedCountry: countryGuess,
	        formattedNumber: formattedNumber
	      });
	    };

	    _this.getDropdownProps = function () {
	      var _this$state9 = _this.state,
	          selectedCountry = _this$state9.selectedCountry,
	          anchorEl = _this$state9.anchorEl,
	          preferredCountries = _this$state9.preferredCountries,
	          onlyCountries = _this$state9.onlyCountries;
	      var _this$props8 = _this.props,
	          classes = _this$props8.classes,
	          dropdownClass = _this$props8.dropdownClass,
	          localization = _this$props8.localization,
	          disableDropdown = _this$props8.disableDropdown,
	          native = _this$props8.native;
	      var inputFlagClasses = "flag-icon flag-icon-".concat(selectedCountry.iso2);
	      var dropdownProps = disableDropdown ? {} : {
	        startAdornment: /*#__PURE__*/React__default.createElement(InputAdornment$1, {
	          className: classes.positionStart,
	          position: "start"
	        }, native ? /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(NativeSelect$1, {
	          id: "country-menu",
	          open: Boolean(anchorEl),
	          onClose: function onClose() {
	            return _this.setState({
	              anchorEl: null
	            });
	          },
	          className: classes.native,
	          classes: {
	            root: classnames$1(classes.nativeRoot, 'native', inputFlagClasses),
	            select: classes.nativeSelect
	          },
	          onChange: function onChange(e) {
	            return _this.handleFlagItemClick(e.target.value);
	          },
	          disableUnderline: true
	        }, !!preferredCountries.length && preferredCountries.map(function (country, index) {
	          return /*#__PURE__*/React__default.createElement(Item, {
	            key: "preferred_".concat(country.iso2, "_").concat(index),
	            itemRef: function itemRef(node) {
	              _this.flags["flag_no_".concat(index)] = node;
	            },
	            name: country.name,
	            iso2: country.iso2,
	            dialCode: country.dialCode,
	            localization: localization && localization[country.name],
	            native: true
	          });
	        }), onlyCountries.map(function (country, index) {
	          return /*#__PURE__*/React__default.createElement(Item, {
	            key: "preferred_".concat(country.iso2, "_").concat(index),
	            itemRef: function itemRef(node) {
	              _this.flags["flag_no_".concat(index)] = node;
	            },
	            name: country.name,
	            iso2: country.iso2,
	            dialCode: country.dialCode,
	            localization: localization && localization[country.name],
	            native: true
	          });
	        }))) : /*#__PURE__*/React__default.createElement(React__default.Fragment, null, /*#__PURE__*/React__default.createElement(Button$1, {
	          className: classes.flagButton,
	          "aria-owns": anchorEl ? 'country-menu' : null,
	          "aria-label": "Select country",
	          onClick: function onClick(e) {
	            return _this.setState({
	              anchorEl: e.currentTarget
	            });
	          },
	          "aria-haspopup": true
	        }, /*#__PURE__*/React__default.createElement("div", {
	          className: inputFlagClasses
	        })), /*#__PURE__*/React__default.createElement(Menu$1, {
	          className: dropdownClass,
	          id: "country-menu",
	          anchorEl: anchorEl,
	          open: Boolean(anchorEl),
	          onClose: function onClose() {
	            return _this.setState({
	              anchorEl: null
	            });
	          },
	          onEnter: _this.handleFlagDropdownClick,
	          PaperProps: {
	            ref: function ref(node) {
	              _this.dropdownContainerRef = node;
	            }
	          }
	        }, !!preferredCountries.length && preferredCountries.map(function (country, index) {
	          return /*#__PURE__*/React__default.createElement(Item, {
	            key: "preferred_".concat(country.iso2, "_").concat(index),
	            itemRef: function itemRef(node) {
	              _this.flags["flag_no_".concat(index)] = node;
	            },
	            onClick: function onClick() {
	              return _this.handleFlagItemClick(country);
	            },
	            name: country.name,
	            iso2: country.iso2,
	            dialCode: country.dialCode,
	            localization: localization && localization[country.name]
	          });
	        }), !!preferredCountries.length && /*#__PURE__*/React__default.createElement(Divider$1, null), onlyCountries.map(function (country, index) {
	          return /*#__PURE__*/React__default.createElement(Item, {
	            key: "preferred_".concat(country.iso2, "_").concat(index),
	            itemRef: function itemRef(node) {
	              _this.flags["flag_no_".concat(index)] = node;
	            },
	            onClick: function onClick() {
	              return _this.handleFlagItemClick(country);
	            },
	            name: country.name,
	            iso2: country.iso2,
	            dialCode: country.dialCode,
	            localization: localization && localization[country.name]
	          });
	        }))))
	      };
	      return dropdownProps;
	    };

	    var _filteredCountries = countryData.allCountries;
	    if (props.disableAreaCodes) _filteredCountries = _this.deleteAreaCodes(_filteredCountries);
	    if (props.regions) _filteredCountries = _this.filterRegions(props.regions, _filteredCountries);

	    var _onlyCountries = _this.excludeCountries(_this.getOnlyCountries(props.onlyCountries, _filteredCountries), props.excludeCountries);

	    var _preferredCountries = _filteredCountries.filter(function (country) {
	      return props.preferredCountries.some(function (preferredCountry) {
	        return preferredCountry === country.iso2;
	      });
	    });

	    var _inputNumber = props.value || '';

	    var _countryGuess;

	    if (_inputNumber.length > 1) {
	      // Country detect by value field
	      _countryGuess = _this.guessSelectedCountry(_inputNumber.replace(/\D/g, '').substring(0, 6), _onlyCountries, props.defaultCountry) || 0;
	    } else if (props.defaultCountry) {
	      // Default country
	      _countryGuess = _onlyCountries.find(function (c) {
	        return c.iso2 == props.defaultCountry;
	      }) || 0;
	    } else {
	      // Empty params
	      _countryGuess = 0;
	    }

	    var countryGuessIndex = countryData.allCountries.findIndex(function (c) {
	      return c.iso2 === _countryGuess;
	    });

	    var _dialCode = _inputNumber.length < 2 && _countryGuess && !_inputNumber.replace(/\D/g, '').startsWith(_countryGuess.dialCode) ? _countryGuess.dialCode : '';

	    var _formattedNumber = _inputNumber === '' && _countryGuess === 0 ? '' : _this.formatNumber((props.disableCountryCode ? '' : _dialCode) + _inputNumber.replace(/\D/g, ''), _countryGuess.name ? _countryGuess.format : undefined);

	    _this.state = {
	      formattedNumber: _formattedNumber,
	      placeholder: props.placeholder,
	      onlyCountries: _onlyCountries,
	      preferredCountries: _preferredCountries,
	      defaultCountry: props.defaultCountry,
	      selectedCountry: _countryGuess,
	      highlightCountryIndex: countryGuessIndex,
	      queryString: '',
	      freezeSelection: false,
	      debouncedQueryStringSearcher: debounce(_this.searchCountry, 100),
	      anchorEl: null
	    };
	    return _this;
	  }

	  _createClass$1(MaterialUiPhoneNumber, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      if (document.addEventListener) {
	        document.addEventListener('keydown', this.handleKeydown);
	      }
	    }
	  }, {
	    key: "componentDidUpdate",
	    value: function componentDidUpdate(_ref) {
	      var prevValue = _ref.value;
	      var _this$state10 = this.state,
	          prevDefaultCountry = _this$state10.defaultCountry,
	          formattedNumber = _this$state10.formattedNumber;
	      var _this$props9 = this.props,
	          defaultCountry = _this$props9.defaultCountry,
	          value = _this$props9.value;

	      if (defaultCountry && defaultCountry !== prevDefaultCountry) {
	        this.updateDefaultCountry(defaultCountry);
	      }

	      if (typeof value === 'string' && value !== prevValue && value !== formattedNumber) {
	        this.updateFormattedNumber(value);
	      }
	    }
	  }, {
	    key: "componentWillUnmount",
	    value: function componentWillUnmount() {
	      if (document.removeEventListener) {
	        document.removeEventListener('keydown', this.handleKeydown);
	      }
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$state11 = this.state,
	          formattedNumber = _this$state11.formattedNumber,
	          statePlaceholder = _this$state11.placeholder;

	      var _this$props10 = this.props,
	          native = _this$props10.native,
	          defaultCountry = _this$props10.defaultCountry,
	          excludeCountries = _this$props10.excludeCountries,
	          onlyCountries = _this$props10.onlyCountries,
	          preferredCountries = _this$props10.preferredCountries,
	          dropdownClass = _this$props10.dropdownClass,
	          autoFormat = _this$props10.autoFormat,
	          disableAreaCodes = _this$props10.disableAreaCodes,
	          isValid = _this$props10.isValid,
	          disableCountryCode = _this$props10.disableCountryCode,
	          disableDropdown = _this$props10.disableDropdown,
	          enableLongNumbers = _this$props10.enableLongNumbers,
	          countryCodeEditable = _this$props10.countryCodeEditable,
	          onEnterKeyPress = _this$props10.onEnterKeyPress,
	          isModernBrowser = _this$props10.isModernBrowser,
	          classes = _this$props10.classes,
	          keys = _this$props10.keys,
	          localization = _this$props10.localization,
	          placeholder = _this$props10.placeholder,
	          regions = _this$props10.regions,
	          onChange = _this$props10.onChange,
	          value = _this$props10.value,
	          inputClass = _this$props10.inputClass,
	          error = _this$props10.error,
	          InputProps = _this$props10.InputProps,
	          restProps = _objectWithoutProperties$2(_this$props10, ["native", "defaultCountry", "excludeCountries", "onlyCountries", "preferredCountries", "dropdownClass", "autoFormat", "disableAreaCodes", "isValid", "disableCountryCode", "disableDropdown", "enableLongNumbers", "countryCodeEditable", "onEnterKeyPress", "isModernBrowser", "classes", "keys", "localization", "placeholder", "regions", "onChange", "value", "inputClass", "error", "InputProps"]);

	      var dropdownProps = this.getDropdownProps();
	      return /*#__PURE__*/React__default.createElement(TextField$1, _extends$1({
	        placeholder: statePlaceholder,
	        value: formattedNumber,
	        className: inputClass,
	        inputRef: this.handleRefInput,
	        error: error || !this.checkIfValid(),
	        onChange: this.handleInput,
	        onClick: this.handleInputClick,
	        onFocus: this.handleInputFocus,
	        onBlur: this.handleInputBlur,
	        onKeyDown: this.handleInputKeyDown,
	        type: "tel",
	        InputProps: _objectSpread2({}, dropdownProps, {}, InputProps)
	      }, restProps));
	    }
	  }]);

	  return MaterialUiPhoneNumber;
	}(React.Component);

	MaterialUiPhoneNumber.propTypes = {
	  classes: propTypes$1.object,
	  excludeCountries: propTypes$1.arrayOf(propTypes$1.string),
	  onlyCountries: propTypes$1.arrayOf(propTypes$1.string),
	  preferredCountries: propTypes$1.arrayOf(propTypes$1.string),
	  defaultCountry: propTypes$1.string,
	  value: propTypes$1.string,
	  placeholder: propTypes$1.string,
	  disabled: propTypes$1.bool,
	  error: propTypes$1.bool,
	  variant: propTypes$1.string,
	  native: propTypes$1.bool,
	  inputClass: propTypes$1.string,
	  dropdownClass: propTypes$1.string,
	  InputProps: propTypes$1.object,
	  inputProps: propTypes$1.object,
	  inputRef: propTypes$1.func,
	  autoFormat: propTypes$1.bool,
	  disableAreaCodes: propTypes$1.bool,
	  disableCountryCode: propTypes$1.bool,
	  disableDropdown: propTypes$1.bool,
	  enableLongNumbers: propTypes$1.bool,
	  countryCodeEditable: propTypes$1.bool,
	  regions: propTypes$1.oneOfType([propTypes$1.string, propTypes$1.arrayOf(propTypes$1.string)]),
	  localization: propTypes$1.object,
	  onChange: propTypes$1.func,
	  onFocus: propTypes$1.func,
	  onBlur: propTypes$1.func,
	  onClick: propTypes$1.func,
	  onKeyDown: propTypes$1.func,
	  isValid: propTypes$1.func,
	  isModernBrowser: propTypes$1.func,
	  onEnterKeyPress: propTypes$1.func,
	  keys: propTypes$1.object
	};
	MaterialUiPhoneNumber.defaultProps = {
	  excludeCountries: [],
	  onlyCountries: [],
	  preferredCountries: [],
	  defaultCountry: '',
	  placeholder: '+1 (702) 123-4567',
	  disabled: false,
	  error: false,
	  variant: 'standard',
	  native: false,
	  inputClass: '',
	  dropdownClass: '',
	  autoFormat: true,
	  disableAreaCodes: false,
	  isValid: function isValid(inputNumber) {
	    return countryData.allCountries.some(function (country) {
	      return inputNumber.startsWith(country.dialCode) || country.dialCode.startsWith(inputNumber);
	    });
	  },
	  disableCountryCode: false,
	  disableDropdown: false,
	  enableLongNumbers: false,
	  countryCodeEditable: true,
	  regions: '',
	  localization: {},
	  onEnterKeyPress: function onEnterKeyPress() {},
	  onChange: function onChange() {},
	  isModernBrowser: function isModernBrowser() {
	    return document.createElement ? Boolean(document.createElement('input').setSelectionRange) : false;
	  },
	  keys: {
	    UP: 38,
	    DOWN: 40,
	    RIGHT: 39,
	    LEFT: 37,
	    ENTER: 13,
	    ESC: 27,
	    PLUS: 43,
	    A: 65,
	    Z: 90,
	    SPACE: 32
	  }
	};
	MaterialUiPhoneNumber.displayName = 'MuiPhoneNumber';
	var MaterialUiPhoneNumber$1 = withStyles$2(styles$R)(MaterialUiPhoneNumber);

	var _class$2;
	// *** Hanzo Standardized Checkbox ***
	//

	var BaseMUICheckbox = /*#__PURE__*/function (_Component) {
	  _inherits$1(BaseMUICheckbox, _Component);

	  var _super = _createSuper$1(BaseMUICheckbox);

	  function BaseMUICheckbox(props) {
	    _classCallCheck$1(this, BaseMUICheckbox);

	    return _super.call(this, props);
	  }

	  _createClass$1(BaseMUICheckbox, [{
	    key: "change",
	    value: function change(e, checked) {
	      var _this$props = this.props,
	          onChange = _this$props.onChange,
	          onBlur = _this$props.onBlur;
	      onChange = onChange || onBlur;

	      if (onChange) {
	        onChange(checked);
	      }
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props2 = this.props,
	          id = _this$props2.id,
	          value = _this$props2.value,
	          defaultValue = _this$props2.defaultValue,
	          error = _this$props2.error,
	          helperText = _this$props2.helperText,
	          disabled = _this$props2.disabled,
	          children = _this$props2.children,
	          classes = _this$props2.classes,
	          label = _this$props2.label,
	          onBlur = _this$props2.onBlur,
	          onChange = _this$props2.onChange,
	          props = _objectWithoutProperties$2(_this$props2, ["id", "value", "defaultValue", "error", "helperText", "disabled", "children", "classes", "label", "onBlur", "onChange"]);

	      if (!disabled) {
	        disabled = this.disabled;
	      }

	      value = value || defaultValue || false;
	      var c = /*#__PURE__*/React__default.createElement(Checkbox$1, _extends$1({}, props, {
	        id: id,
	        disabled: disabled,
	        checked: !!value,
	        onChange: this.change.bind(this),
	        type: "checkbox",
	        className: classes.pointer
	      }));
	      return /*#__PURE__*/React__default.createElement("div", {
	        className: "switch"
	      }, /*#__PURE__*/React__default.createElement(FormControl$1, {
	        className: classes.row
	      }, /*#__PURE__*/React__default.createElement(FormControlLabel$1, {
	        control: c,
	        label: label
	      }), /*#__PURE__*/React__default.createElement("div", {
	        className: classes.break
	      }), !!helperText ? /*#__PURE__*/React__default.createElement(FormHelperText$1, {
	        disabled: disabled,
	        error: !!error,
	        className: classes.helper
	      }, helperText) : null));
	    }
	  }]);

	  return BaseMUICheckbox;
	}(React.Component);

	var styles$1$1 = function styles(theme) {
	  return {
	    pointer: {
	      cursor: 'pointer'
	    },
	    row: {
	      flexDirection: 'row',
	      alignItems: 'center',
	      flexWrap: 'wrap'
	    },
	    break: {
	      flexBasis: '100%',
	      height: 0
	    },
	    label: {
	      textAlign: 'left',
	      cursor: 'pointer'
	    },
	    helper: {
	      padding: '0 0 15px',
	      margin: '-3px 0 0'
	    }
	  };
	};

	var MUICheckbox = withStyles$1(styles$1$1)(control(_class$2 = /*#__PURE__*/function (_BaseMUICheckbox) {
	  _inherits$1(MUICheckbox, _BaseMUICheckbox);

	  var _super2 = _createSuper$1(MUICheckbox);

	  function MUICheckbox() {
	    _classCallCheck$1(this, MUICheckbox);

	    return _super2.apply(this, arguments);
	  }

	  return MUICheckbox;
	}(BaseMUICheckbox)) || _class$2);

	var _class$3;
	// *** Hanzo Standardized Switch ***
	//

	var BaseMUISwitch = /*#__PURE__*/function (_Component) {
	  _inherits$1(BaseMUISwitch, _Component);

	  var _super = _createSuper$1(BaseMUISwitch);

	  function BaseMUISwitch(props) {
	    _classCallCheck$1(this, BaseMUISwitch);

	    return _super.call(this, props);
	  }

	  _createClass$1(BaseMUISwitch, [{
	    key: "change",
	    value: function change(e, checked) {
	      var _this$props = this.props,
	          onChange = _this$props.onChange,
	          onBlur = _this$props.onBlur;
	      onChange = onChange || onBlur;

	      if (onChange) {
	        onChange(checked);
	      }
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props2 = this.props,
	          id = _this$props2.id,
	          value = _this$props2.value,
	          defaultValue = _this$props2.defaultValue,
	          error = _this$props2.error,
	          helperText = _this$props2.helperText,
	          disabled = _this$props2.disabled,
	          children = _this$props2.children,
	          classes = _this$props2.classes,
	          label = _this$props2.label,
	          onBlur = _this$props2.onBlur,
	          onChange = _this$props2.onChange,
	          props = _objectWithoutProperties$2(_this$props2, ["id", "value", "defaultValue", "error", "helperText", "disabled", "children", "classes", "label", "onBlur", "onChange"]);

	      if (!disabled) {
	        disabled = this.disabled;
	      }

	      value = value || defaultValue || false;
	      var c = /*#__PURE__*/React__default.createElement(Switch$1, _extends$1({}, props, {
	        id: id,
	        disabled: disabled,
	        checked: !!value,
	        onChange: this.change.bind(this),
	        type: "checkbox",
	        className: classes.pointer
	      }));
	      return /*#__PURE__*/React__default.createElement("div", {
	        className: "switch"
	      }, /*#__PURE__*/React__default.createElement(FormControl$1, {
	        className: classes.row
	      }, /*#__PURE__*/React__default.createElement(FormControlLabel$1, {
	        control: c,
	        label: label
	      }), /*#__PURE__*/React__default.createElement("div", {
	        className: classes.break
	      }), !!helperText ? /*#__PURE__*/React__default.createElement(FormHelperText$1, {
	        disabled: disabled,
	        error: !!error,
	        className: classes.helper
	      }, helperText) : null));
	    }
	  }]);

	  return BaseMUISwitch;
	}(React.Component);

	var styles$2$1 = function styles(theme) {
	  return {
	    pointer: {
	      cursor: 'pointer'
	    },
	    row: {
	      flexDirection: 'row',
	      alignItems: 'center',
	      flexWrap: 'wrap'
	    },
	    break: {
	      flexBasis: '100%',
	      height: 0
	    },
	    label: {
	      textAlign: 'left',
	      cursor: 'pointer'
	    },
	    helper: {
	      padding: '0 0 15px',
	      margin: '-3px 0 0'
	    }
	  };
	};

	var MUISwitch = withStyles$1(styles$2$1)(control(_class$3 = /*#__PURE__*/function (_BaseMUISwitch) {
	  _inherits$1(MUISwitch, _BaseMUISwitch);

	  var _super2 = _createSuper$1(MUISwitch);

	  function MUISwitch() {
	    _classCallCheck$1(this, MUISwitch);

	    return _super2.apply(this, arguments);
	  }

	  return MUISwitch;
	}(BaseMUISwitch)) || _class$3);

	var defaultFormats = {
	    normalDateWithWeekday: "ddd, MMM D",
	    normalDate: "D MMMM",
	    shortDate: "MMM D",
	    monthAndDate: "MMMM D",
	    dayOfMonth: "D",
	    year: "YYYY",
	    month: "MMMM",
	    monthShort: "MMM",
	    monthAndYear: "MMMM YYYY",
	    minutes: "mm",
	    hours12h: "hh",
	    hours24h: "HH",
	    seconds: "ss",
	    fullTime: "LT",
	    fullTime12h: "hh:mm A",
	    fullTime24h: "HH:mm",
	    fullDate: "ll",
	    fullDateTime: "lll",
	    fullDateTime12h: "ll hh:mm A",
	    fullDateTime24h: "ll HH:mm",
	    keyboardDate: "L",
	    keyboardDateTime: "L LT",
	    keyboardDateTime12h: "L hh:mm A",
	    keyboardDateTime24h: "L HH:mm"
	};
	var MomentUtils = /** @class */ (function () {
	    function MomentUtils(_a) {
	        var _b = _a === void 0 ? {} : _a, locale = _b.locale, formats = _b.formats, instance = _b.instance;
	        this.moment = instance || moment$1;
	        this.locale = locale;
	        this.formats = Object.assign({}, defaultFormats, formats);
	    }
	    MomentUtils.prototype.is12HourCycleInCurrentLocale = function () {
	        return /A|a/.test(this.moment()
	            .localeData()
	            .longDateFormat("LT"));
	    };
	    MomentUtils.prototype.getFormatHelperText = function (format) {
	        var _this = this;
	        // @see https://github.com/moment/moment/blob/develop/src/lib/format/format.js#L6
	        var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})|./g;
	        return format
	            .match(localFormattingTokens)
	            .map(function (token) {
	            var firstCharacter = token[0];
	            if (firstCharacter === "L" || firstCharacter === ";") {
	                return _this.moment.localeData().longDateFormat(token);
	            }
	            return token;
	        })
	            .join("")
	            .replace(/a/gi, "(a|p)m")
	            .toLocaleLowerCase();
	    };
	    MomentUtils.prototype.getCurrentLocaleCode = function () {
	        return this.locale || this.moment.locale();
	    };
	    MomentUtils.prototype.parse = function (value, format) {
	        if (value === "") {
	            return null;
	        }
	        return this.moment(value, format, true);
	    };
	    MomentUtils.prototype.date = function (value) {
	        if (value === null) {
	            return null;
	        }
	        var moment = this.moment(value);
	        moment.locale(this.locale);
	        return moment;
	    };
	    MomentUtils.prototype.toJsDate = function (value) {
	        return value.toDate();
	    };
	    MomentUtils.prototype.isValid = function (value) {
	        return this.moment(value).isValid();
	    };
	    MomentUtils.prototype.isNull = function (date) {
	        return date === null;
	    };
	    MomentUtils.prototype.getDiff = function (date, comparing) {
	        return date.diff(comparing);
	    };
	    MomentUtils.prototype.isAfter = function (date, value) {
	        return date.isAfter(value);
	    };
	    MomentUtils.prototype.isBefore = function (date, value) {
	        return date.isBefore(value);
	    };
	    MomentUtils.prototype.isAfterDay = function (date, value) {
	        return date.isAfter(value, "day");
	    };
	    MomentUtils.prototype.isBeforeDay = function (date, value) {
	        return date.isBefore(value, "day");
	    };
	    MomentUtils.prototype.isBeforeYear = function (date, value) {
	        return date.isBefore(value, "year");
	    };
	    MomentUtils.prototype.isAfterYear = function (date, value) {
	        return date.isAfter(value, "year");
	    };
	    MomentUtils.prototype.startOfDay = function (date) {
	        return date.clone().startOf("day");
	    };
	    MomentUtils.prototype.endOfDay = function (date) {
	        return date.clone().endOf("day");
	    };
	    MomentUtils.prototype.format = function (date, formatKey) {
	        return this.formatByString(date, this.formats[formatKey]);
	    };
	    MomentUtils.prototype.formatByString = function (date, formatString) {
	        date.locale(this.locale);
	        return date.format(formatString);
	    };
	    MomentUtils.prototype.formatNumber = function (numberToFormat) {
	        return numberToFormat;
	    };
	    MomentUtils.prototype.getHours = function (date) {
	        return date.get("hours");
	    };
	    MomentUtils.prototype.addDays = function (date, count) {
	        return count < 0
	            ? date.clone().subtract(Math.abs(count), "days")
	            : date.clone().add(count, "days");
	    };
	    MomentUtils.prototype.addMonths = function (date, count) {
	        return count < 0
	            ? date.clone().subtract(Math.abs(count), "months")
	            : date.clone().add(count, "months");
	    };
	    MomentUtils.prototype.setHours = function (date, count) {
	        return date.clone().hours(count);
	    };
	    MomentUtils.prototype.getMinutes = function (date) {
	        return date.get("minutes");
	    };
	    MomentUtils.prototype.setMinutes = function (date, count) {
	        return date.clone().minutes(count);
	    };
	    MomentUtils.prototype.getSeconds = function (date) {
	        return date.get("seconds");
	    };
	    MomentUtils.prototype.setSeconds = function (date, count) {
	        return date.clone().seconds(count);
	    };
	    MomentUtils.prototype.getMonth = function (date) {
	        return date.get("month");
	    };
	    MomentUtils.prototype.isSameDay = function (date, comparing) {
	        return date.isSame(comparing, "day");
	    };
	    MomentUtils.prototype.isSameMonth = function (date, comparing) {
	        return date.isSame(comparing, "month");
	    };
	    MomentUtils.prototype.isSameYear = function (date, comparing) {
	        return date.isSame(comparing, "year");
	    };
	    MomentUtils.prototype.isSameHour = function (date, comparing) {
	        return date.isSame(comparing, "hour");
	    };
	    MomentUtils.prototype.setMonth = function (date, count) {
	        return date.clone().month(count);
	    };
	    MomentUtils.prototype.getMeridiemText = function (ampm) {
	        return ampm === "am" ? "AM" : "PM";
	    };
	    MomentUtils.prototype.startOfMonth = function (date) {
	        return date.clone().startOf("month");
	    };
	    MomentUtils.prototype.endOfMonth = function (date) {
	        return date.clone().endOf("month");
	    };
	    MomentUtils.prototype.startOfWeek = function (date) {
	        return date.clone().startOf("week");
	    };
	    MomentUtils.prototype.endOfWeek = function (date) {
	        return date.clone().endOf("week");
	    };
	    MomentUtils.prototype.getNextMonth = function (date) {
	        return date.clone().add(1, "month");
	    };
	    MomentUtils.prototype.getPreviousMonth = function (date) {
	        return date.clone().subtract(1, "month");
	    };
	    MomentUtils.prototype.getMonthArray = function (date) {
	        var firstMonth = date.clone().startOf("year");
	        var monthArray = [firstMonth];
	        while (monthArray.length < 12) {
	            var prevMonth = monthArray[monthArray.length - 1];
	            monthArray.push(this.getNextMonth(prevMonth));
	        }
	        return monthArray;
	    };
	    MomentUtils.prototype.getYear = function (date) {
	        return date.get("year");
	    };
	    MomentUtils.prototype.setYear = function (date, year) {
	        return date.clone().set("year", year);
	    };
	    MomentUtils.prototype.mergeDateAndTime = function (date, time) {
	        return date
	            .hour(time.hour())
	            .minute(time.minute())
	            .second(time.second());
	    };
	    MomentUtils.prototype.getWeekdays = function () {
	        return this.moment.weekdaysShort(true);
	    };
	    MomentUtils.prototype.isEqual = function (value, comparing) {
	        if (value === null && comparing === null) {
	            return true;
	        }
	        return this.moment(value).isSame(comparing);
	    };
	    MomentUtils.prototype.getWeekArray = function (date) {
	        var start = date
	            .clone()
	            .startOf("month")
	            .startOf("week");
	        var end = date
	            .clone()
	            .endOf("month")
	            .endOf("week");
	        var count = 0;
	        var current = start;
	        var nestedWeeks = [];
	        while (current.isBefore(end)) {
	            var weekNumber = Math.floor(count / 7);
	            nestedWeeks[weekNumber] = nestedWeeks[weekNumber] || [];
	            nestedWeeks[weekNumber].push(current);
	            current = current.clone().add(1, "day");
	            count += 1;
	        }
	        return nestedWeeks;
	    };
	    MomentUtils.prototype.getYearRange = function (start, end) {
	        var startDate = this.moment(start).startOf("year");
	        var endDate = this.moment(end).endOf("year");
	        var years = [];
	        var current = startDate;
	        while (current.isBefore(endDate)) {
	            years.push(current);
	            current = current.clone().add(1, "year");
	        }
	        return years;
	    };
	    MomentUtils.prototype.isWithinRange = function (date, _a) {
	        var start = _a[0], end = _a[1];
	        return date.isBetween(start, end, null, "[]");
	    };
	    return MomentUtils;
	}());

	function _defineProperty$1$1(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	var MuiPickersContext = React.createContext(null);
	var MuiPickersUtilsProvider = function MuiPickersUtilsProvider(_ref) {
	  var Utils = _ref.utils,
	      children = _ref.children,
	      locale = _ref.locale,
	      libInstance = _ref.libInstance;
	  var utils = React.useMemo(function () {
	    return new Utils({
	      locale: locale,
	      instance: libInstance
	    });
	  }, [Utils, libInstance, locale]);
	  return React.createElement(MuiPickersContext.Provider, {
	    value: utils,
	    children: children
	  });
	};
	process.env.NODE_ENV !== "production" ? MuiPickersUtilsProvider.propTypes = {
	  utils: propTypes_3.isRequired,
	  locale: propTypes_16([propTypes_5, propTypes_6]),
	  children: propTypes_16([propTypes_10.isRequired, propTypes_9(propTypes_10.isRequired)]).isRequired
	} : void 0;

	var checkUtils = function checkUtils(utils) {
	  if (!utils) {
	    // tslint:disable-next-line
	    throw new Error('Can not find utils in context. You either a) forgot to wrap your component tree in MuiPickersUtilsProvider; or b) mixed named and direct file imports.  Recommendation: use named imports from the module index.');
	  }
	};
	function useUtils() {
	  var utils = React.useContext(MuiPickersContext);
	  checkUtils(utils);
	  return utils;
	}

	function toVal$1(mix) {
		var k, y, str='';
		if (mix) {
			if (typeof mix === 'object') {
				if (Array.isArray(mix)) {
					for (k=0; k < mix.length; k++) {
						if (mix[k] && (y = toVal$1(mix[k]))) {
							str && (str += ' ');
							str += y;
						}
					}
				} else {
					for (k in mix) {
						if (mix[k] && (y = toVal$1(k))) {
							str && (str += ' ');
							str += y;
						}
					}
				}
			} else if (typeof mix !== 'boolean' && !mix.call) {
				str && (str += ' ');
				str += mix;
			}
		}
		return str;
	}

	function clsx$1 () {
		var i=0, x, str='';
		while (i < arguments.length) {
			if (x = toVal$1(arguments[i++])) {
				str && (str += ' ');
				str += x;
			}
		}
		return str;
	}

	function _extends$1$1() {
	  _extends$1$1 = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends$1$1.apply(this, arguments);
	}

	function _objectWithoutPropertiesLoose$1$1(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	function _objectWithoutProperties$1$1(source, excluded) {
	  if (source == null) return {};
	  var target = _objectWithoutPropertiesLoose$1$1(source, excluded);
	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	/** Use it instead of .includes method for IE support */
	function arrayIncludes(array, itemOrItems) {
	  if (Array.isArray(itemOrItems)) {
	    return itemOrItems.every(function (item) {
	      return array.indexOf(item) !== -1;
	    });
	  }

	  return array.indexOf(itemOrItems) !== -1;
	}

	var DIALOG_WIDTH = 310;
	var DIALOG_WIDTH_WIDER = 325;
	var VIEW_HEIGHT = 305;

	var useStyles = makeStyles$1(function (theme) {
	  return {
	    staticWrapperRoot: {
	      overflow: 'hidden',
	      minWidth: DIALOG_WIDTH,
	      display: 'flex',
	      flexDirection: 'column',
	      backgroundColor: theme.palette.background.paper
	    }
	  };
	}, {
	  name: 'MuiPickersStaticWrapper'
	});
	var StaticWrapper = function StaticWrapper(_ref) {
	  var children = _ref.children;
	  var classes = useStyles();
	  return React.createElement("div", {
	    className: classes.staticWrapperRoot,
	    children: children
	  });
	};

	var ModalDialog = function ModalDialog(_ref) {
	  var children = _ref.children,
	      classes = _ref.classes,
	      onAccept = _ref.onAccept,
	      onDismiss = _ref.onDismiss,
	      onClear = _ref.onClear,
	      onSetToday = _ref.onSetToday,
	      okLabel = _ref.okLabel,
	      cancelLabel = _ref.cancelLabel,
	      clearLabel = _ref.clearLabel,
	      todayLabel = _ref.todayLabel,
	      clearable = _ref.clearable,
	      showTodayButton = _ref.showTodayButton,
	      showTabs = _ref.showTabs,
	      wider = _ref.wider,
	      other = _objectWithoutProperties$1$1(_ref, ["children", "classes", "onAccept", "onDismiss", "onClear", "onSetToday", "okLabel", "cancelLabel", "clearLabel", "todayLabel", "clearable", "showTodayButton", "showTabs", "wider"]);

	  return React.createElement(Dialog$1, _extends$1$1({
	    role: "dialog",
	    onClose: onDismiss,
	    classes: {
	      paper: clsx$1(classes.dialogRoot, wider && classes.dialogRootWider)
	    }
	  }, other), React.createElement(DialogContent$1, {
	    children: children,
	    className: classes.dialog
	  }), React.createElement(DialogActions$1, {
	    classes: {
	      root: clsx$1((clearable || showTodayButton) && classes.withAdditionalAction)
	    }
	  }, clearable && React.createElement(Button$1, {
	    color: "primary",
	    onClick: onClear
	  }, clearLabel), showTodayButton && React.createElement(Button$1, {
	    color: "primary",
	    onClick: onSetToday
	  }, todayLabel), cancelLabel && React.createElement(Button$1, {
	    color: "primary",
	    onClick: onDismiss
	  }, cancelLabel), okLabel && React.createElement(Button$1, {
	    color: "primary",
	    onClick: onAccept
	  }, okLabel)));
	};
	ModalDialog.displayName = 'ModalDialog';
	var styles$3$1 = createStyles$1({
	  dialogRoot: {
	    minWidth: DIALOG_WIDTH
	  },
	  dialogRootWider: {
	    minWidth: DIALOG_WIDTH_WIDER
	  },
	  dialog: {
	    '&:first-child': {
	      padding: 0
	    }
	  },
	  withAdditionalAction: {
	    // set justifyContent to default value to fix IE11 layout bug
	    // see https://github.com/dmtrKovalenko/material-ui-pickers/pull/267
	    justifyContent: 'flex-start',
	    '& > *:first-child': {
	      marginRight: 'auto'
	    }
	  }
	});
	var ModalDialog$1 = withStyles$1(styles$3$1, {
	  name: 'MuiPickersModal'
	})(ModalDialog);

	var useIsomorphicEffect = typeof window === 'undefined' ? React.useEffect : React.useLayoutEffect;
	function runKeyHandler(e, keyHandlers) {
	  var handler = keyHandlers[e.key];

	  if (handler) {
	    handler(); // if event was handled prevent other side effects (e.g. page scroll)

	    e.preventDefault();
	  }
	}
	function useKeyDown(active, keyHandlers) {
	  var keyHandlersRef = React.useRef(keyHandlers);
	  keyHandlersRef.current = keyHandlers;
	  useIsomorphicEffect(function () {
	    if (active) {
	      var handleKeyDown = function handleKeyDown(event) {
	        runKeyHandler(event, keyHandlersRef.current);
	      };

	      window.addEventListener('keydown', handleKeyDown);
	      return function () {
	        window.removeEventListener('keydown', handleKeyDown);
	      };
	    }
	  }, [active]);
	}

	var ModalWrapper = function ModalWrapper(_ref) {
	  var open = _ref.open,
	      children = _ref.children,
	      okLabel = _ref.okLabel,
	      cancelLabel = _ref.cancelLabel,
	      clearLabel = _ref.clearLabel,
	      todayLabel = _ref.todayLabel,
	      showTodayButton = _ref.showTodayButton,
	      clearable = _ref.clearable,
	      DialogProps = _ref.DialogProps,
	      showTabs = _ref.showTabs,
	      wider = _ref.wider,
	      InputComponent = _ref.InputComponent,
	      DateInputProps = _ref.DateInputProps,
	      onClear = _ref.onClear,
	      onAccept = _ref.onAccept,
	      onDismiss = _ref.onDismiss,
	      onSetToday = _ref.onSetToday,
	      other = _objectWithoutProperties$1$1(_ref, ["open", "children", "okLabel", "cancelLabel", "clearLabel", "todayLabel", "showTodayButton", "clearable", "DialogProps", "showTabs", "wider", "InputComponent", "DateInputProps", "onClear", "onAccept", "onDismiss", "onSetToday"]);

	  useKeyDown(open, {
	    Enter: onAccept
	  });
	  return React.createElement(React.Fragment, null, React.createElement(InputComponent, _extends$1$1({}, other, DateInputProps)), React.createElement(ModalDialog$1, _extends$1$1({
	    wider: wider,
	    showTabs: showTabs,
	    open: open,
	    onClear: onClear,
	    onAccept: onAccept,
	    onDismiss: onDismiss,
	    onSetToday: onSetToday,
	    clearLabel: clearLabel,
	    todayLabel: todayLabel,
	    okLabel: okLabel,
	    cancelLabel: cancelLabel,
	    clearable: clearable,
	    showTodayButton: showTodayButton,
	    children: children
	  }, DialogProps)));
	};
	process.env.NODE_ENV !== "production" ? ModalWrapper.propTypes = {
	  okLabel: propTypes_13,
	  cancelLabel: propTypes_13,
	  clearLabel: propTypes_13,
	  clearable: propTypes_2,
	  todayLabel: propTypes_13,
	  showTodayButton: propTypes_2,
	  DialogProps: propTypes_5
	} : void 0;
	ModalWrapper.defaultProps = {
	  okLabel: 'OK',
	  cancelLabel: 'Cancel',
	  clearLabel: 'Clear',
	  todayLabel: 'Today',
	  clearable: false,
	  showTodayButton: false
	};

	var InlineWrapper = function InlineWrapper(_ref) {
	  var open = _ref.open,
	      wider = _ref.wider,
	      children = _ref.children,
	      PopoverProps = _ref.PopoverProps,
	      onClear = _ref.onClear,
	      onDismiss = _ref.onDismiss,
	      onSetToday = _ref.onSetToday,
	      onAccept = _ref.onAccept,
	      showTabs = _ref.showTabs,
	      DateInputProps = _ref.DateInputProps,
	      InputComponent = _ref.InputComponent,
	      other = _objectWithoutProperties$1$1(_ref, ["open", "wider", "children", "PopoverProps", "onClear", "onDismiss", "onSetToday", "onAccept", "showTabs", "DateInputProps", "InputComponent"]);

	  var ref = React.useRef();
	  useKeyDown(open, {
	    Enter: onAccept
	  });
	  return React.createElement(React.Fragment, null, React.createElement(InputComponent, _extends$1$1({}, other, DateInputProps, {
	    inputRef: ref
	  })), React.createElement(Popover$1, _extends$1$1({
	    open: open,
	    onClose: onDismiss,
	    anchorEl: ref.current,
	    anchorOrigin: {
	      vertical: 'bottom',
	      horizontal: 'center'
	    },
	    transformOrigin: {
	      vertical: 'top',
	      horizontal: 'center'
	    },
	    children: children
	  }, PopoverProps)));
	};
	process.env.NODE_ENV !== "production" ? InlineWrapper.propTypes = {
	  onOpen: propTypes_3,
	  onClose: propTypes_3,
	  PopoverProps: propTypes_5
	} : void 0;

	function getWrapperFromVariant(variant) {
	  switch (variant) {
	    case 'inline':
	      return InlineWrapper;

	    case 'static':
	      return StaticWrapper;

	    default:
	      return ModalWrapper;
	  }
	}
	var VariantContext = React.createContext(null);
	var Wrapper = function Wrapper(_ref) {
	  var variant = _ref.variant,
	      props = _objectWithoutProperties$1$1(_ref, ["variant"]);

	  var Component = getWrapperFromVariant(variant);
	  return React.createElement(VariantContext.Provider, {
	    value: variant || 'dialog'
	  }, React.createElement(Component, props));
	};

	function _inheritsLoose$1(subClass, superClass) {
	  subClass.prototype = Object.create(superClass.prototype);
	  subClass.prototype.constructor = subClass;
	  subClass.__proto__ = superClass;
	}

	var Rifm =
	/*#__PURE__*/
	function (_React$Component) {
	  _inheritsLoose$1(Rifm, _React$Component);

	  function Rifm(props) {
	    var _this;

	    _this = _React$Component.call(this, props) || this;
	    _this._state = null;
	    _this._del = false;

	    _this._handleChange = function (evt) {
	      if (process.env.NODE_ENV !== 'production') {
	        if (evt.target.type === 'number') {
	          console.error('Rifm does not support input type=number, use type=tel instead.');
	          return;
	        }
	      } // FUTURE: use evt.nativeEvent.inputType for del event, see comments at onkeydown


	      var stateValue = _this.state.value;
	      var value = evt.target.value;
	      var input = evt.target;
	      var op = value.length > stateValue.length;
	      var del = _this._del;

	      var noOp = stateValue === _this.props.format(value);

	      _this.setState({
	        value: value,
	        local: true
	      }, function () {
	        var selectionStart = input.selectionStart;
	        var refuse = _this.props.refuse || /[^\d]+/g;
	        var before = value.substr(0, selectionStart).replace(refuse, '');
	        _this._state = {
	          input: input,
	          before: before,
	          op: op,
	          di: del && noOp,
	          del: del
	        };

	        if (_this.props.replace && _this.props.replace(stateValue) && op && !noOp) {
	          var start = -1;

	          for (var i = 0; i !== before.length; ++i) {
	            start = Math.max(start, value.toLowerCase().indexOf(before[i].toLowerCase(), start + 1));
	          }

	          var c = value.substr(start + 1).replace(refuse, '')[0];
	          start = value.indexOf(c, start + 1);
	          value = "" + value.substr(0, start) + value.substr(start + 1);
	        }

	        var fv = _this.props.format(value);

	        if (stateValue === fv) {
	          _this.setState({
	            value: value
	          });
	        } else {
	          _this.props.onChange(fv);
	        }
	      });
	    };

	    _this._hKD = function (evt) {
	      if (evt.code === 'Delete') {
	        _this._del = true;
	      }
	    };

	    _this._hKU = function (evt) {
	      if (evt.code === 'Delete') {
	        _this._del = false;
	      }
	    };

	    _this.state = {
	      value: props.value,
	      local: true
	    };
	    return _this;
	  }

	  Rifm.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
	    return {
	      value: state.local ? state.value : props.value,
	      local: false
	    };
	  };

	  var _proto = Rifm.prototype;

	  _proto.render = function render() {
	    var _handleChange = this._handleChange,
	        value = this.state.value,
	        children = this.props.children;
	    return children({
	      value: value,
	      onChange: _handleChange
	    });
	  } // delete when  https://developer.mozilla.org/en-US/docs/Web/API/InputEvent/inputType will be supported by all major browsers
	  ;

	  _proto.componentWillUnmount = function componentWillUnmount() {
	    document.removeEventListener('keydown', this._hKD);
	    document.removeEventListener('keyup', this._hKU);
	  } // delete when  https://developer.mozilla.org/en-US/docs/Web/API/InputEvent/inputType will be supported by all major browsers
	  ;

	  _proto.componentDidMount = function componentDidMount() {
	    document.addEventListener('keydown', this._hKD);
	    document.addEventListener('keyup', this._hKU);
	  };

	  _proto.componentDidUpdate = function componentDidUpdate() {
	    var _state = this._state;

	    if (_state) {
	      var value = this.state.value;
	      var start = -1;

	      for (var i = 0; i !== _state.before.length; ++i) {
	        start = Math.max(start, value.toLowerCase().indexOf(_state.before[i].toLowerCase(), start + 1));
	      } // format usually looks better without this


	      if (this.props.replace && (_state.op || _state.del && !_state.di)) {
	        while (value[start + 1] && (this.props.refuse || /[^\d]+/).test(value[start + 1])) {
	          start += 1;
	        }
	      }

	      _state.input.selectionStart = _state.input.selectionEnd = start + 1 + (_state.di ? 1 : 0);
	    }

	    this._state = null;
	  };

	  return Rifm;
	}(React.Component);

	function _arrayWithHoles$1$1(arr) {
	  if (Array.isArray(arr)) return arr;
	}

	function _iterableToArrayLimit$1$1(arr, i) {
	  if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
	    return;
	  }

	  var _arr = [];
	  var _n = true;
	  var _d = false;
	  var _e = undefined;

	  try {
	    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	      _arr.push(_s.value);

	      if (i && _arr.length === i) break;
	    }
	  } catch (err) {
	    _d = true;
	    _e = err;
	  } finally {
	    try {
	      if (!_n && _i["return"] != null) _i["return"]();
	    } finally {
	      if (_d) throw _e;
	    }
	  }

	  return _arr;
	}

	function _nonIterableRest$1$1() {
	  throw new TypeError("Invalid attempt to destructure non-iterable instance");
	}

	function _slicedToArray$1$1(arr, i) {
	  return _arrayWithHoles$1$1(arr) || _iterableToArrayLimit$1$1(arr, i) || _nonIterableRest$1$1();
	}

	function _classCallCheck$1$1(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _defineProperties$1$1(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass$1$1(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties$1$1(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties$1$1(Constructor, staticProps);
	  return Constructor;
	}

	function _typeof$2(obj) {
	  "@babel/helpers - typeof";

	  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
	    _typeof$2 = function _typeof(obj) {
	      return typeof obj;
	    };
	  } else {
	    _typeof$2 = function _typeof(obj) {
	      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
	    };
	  }

	  return _typeof$2(obj);
	}

	function _assertThisInitialized$1$1(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	function _possibleConstructorReturn$1$1(self, call) {
	  if (call && (_typeof$2(call) === "object" || typeof call === "function")) {
	    return call;
	  }

	  return _assertThisInitialized$1$1(self);
	}

	function _getPrototypeOf$1$1(o) {
	  _getPrototypeOf$1$1 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
	    return o.__proto__ || Object.getPrototypeOf(o);
	  };
	  return _getPrototypeOf$1$1(o);
	}

	function _setPrototypeOf$1$1(o, p) {
	  _setPrototypeOf$1$1 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf$1$1(o, p);
	}

	function _inherits$1$1(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function");
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf$1$1(subClass, superClass);
	}

	var useStyles$1 = makeStyles$1(function (theme) {
	  return {
	    day: {
	      width: 36,
	      height: 36,
	      fontSize: theme.typography.caption.fontSize,
	      margin: '0 2px',
	      color: theme.palette.text.primary,
	      fontWeight: theme.typography.fontWeightMedium,
	      padding: 0
	    },
	    hidden: {
	      opacity: 0,
	      pointerEvents: 'none'
	    },
	    current: {
	      color: theme.palette.primary.main,
	      fontWeight: 600
	    },
	    daySelected: {
	      color: theme.palette.primary.contrastText,
	      backgroundColor: theme.palette.primary.main,
	      fontWeight: theme.typography.fontWeightMedium,
	      '&:hover': {
	        backgroundColor: theme.palette.primary.main
	      }
	    },
	    dayDisabled: {
	      pointerEvents: 'none',
	      color: theme.palette.text.hint
	    }
	  };
	}, {
	  name: 'MuiPickersDay'
	});
	var Day = function Day(_ref) {
	  var children = _ref.children,
	      disabled = _ref.disabled,
	      hidden = _ref.hidden,
	      current = _ref.current,
	      selected = _ref.selected,
	      other = _objectWithoutProperties$1$1(_ref, ["children", "disabled", "hidden", "current", "selected"]);

	  var classes = useStyles$1();
	  var className = clsx$1(classes.day, hidden && classes.hidden, current && classes.current, selected && classes.daySelected, disabled && classes.dayDisabled);
	  return React.createElement(IconButton$1, _extends$1$1({
	    className: className,
	    tabIndex: hidden || disabled ? -1 : 0
	  }, other), React.createElement(Typography$1, {
	    variant: "body2",
	    color: "inherit"
	  }, children));
	};
	Day.displayName = 'Day';
	process.env.NODE_ENV !== "production" ? Day.propTypes = {
	  current: propTypes_2,
	  disabled: propTypes_2,
	  hidden: propTypes_2,
	  selected: propTypes_2
	} : void 0;
	Day.defaultProps = {
	  disabled: false,
	  hidden: false,
	  current: false,
	  selected: false
	};

	function hasClass(element, className) {
	  if (element.classList) return !!className && element.classList.contains(className);
	  return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
	}

	function addClass(element, className) {
	  if (element.classList) element.classList.add(className);else if (!hasClass(element, className)) if (typeof element.className === 'string') element.className = element.className + " " + className;else element.setAttribute('class', (element.className && element.className.baseVal || '') + " " + className);
	}

	function replaceClassName(origClass, classToRemove) {
	  return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", 'g'), '$1').replace(/\s+/g, ' ').replace(/^\s*|\s*$/g, '');
	}

	function removeClass(element, className) {
	  if (element.classList) {
	    element.classList.remove(className);
	  } else if (typeof element.className === 'string') {
	    element.className = replaceClassName(element.className, className);
	  } else {
	    element.setAttribute('class', replaceClassName(element.className && element.className.baseVal || '', className));
	  }
	}

	var config$1 = {
	  disabled: false
	};

	var timeoutsShape$1 = process.env.NODE_ENV !== 'production' ? propTypes$1.oneOfType([propTypes$1.number, propTypes$1.shape({
	  enter: propTypes$1.number,
	  exit: propTypes$1.number,
	  appear: propTypes$1.number
	}).isRequired]) : null;
	var classNamesShape$1 = process.env.NODE_ENV !== 'production' ? propTypes$1.oneOfType([propTypes$1.string, propTypes$1.shape({
	  enter: propTypes$1.string,
	  exit: propTypes$1.string,
	  active: propTypes$1.string
	}), propTypes$1.shape({
	  enter: propTypes$1.string,
	  enterDone: propTypes$1.string,
	  enterActive: propTypes$1.string,
	  exit: propTypes$1.string,
	  exitDone: propTypes$1.string,
	  exitActive: propTypes$1.string
	})]) : null;

	var TransitionGroupContext$1 = React__default.createContext(null);

	var UNMOUNTED$1 = 'unmounted';
	var EXITED$1 = 'exited';
	var ENTERING$1 = 'entering';
	var ENTERED$1 = 'entered';
	var EXITING$1 = 'exiting';
	/**
	 * The Transition component lets you describe a transition from one component
	 * state to another _over time_ with a simple declarative API. Most commonly
	 * it's used to animate the mounting and unmounting of a component, but can also
	 * be used to describe in-place transition states as well.
	 *
	 * ---
	 *
	 * **Note**: `Transition` is a platform-agnostic base component. If you're using
	 * transitions in CSS, you'll probably want to use
	 * [`CSSTransition`](https://reactcommunity.org/react-transition-group/css-transition)
	 * instead. It inherits all the features of `Transition`, but contains
	 * additional features necessary to play nice with CSS transitions (hence the
	 * name of the component).
	 *
	 * ---
	 *
	 * By default the `Transition` component does not alter the behavior of the
	 * component it renders, it only tracks "enter" and "exit" states for the
	 * components. It's up to you to give meaning and effect to those states. For
	 * example we can add styles to a component when it enters or exits:
	 *
	 * ```jsx
	 * import { Transition } from 'react-transition-group';
	 *
	 * const duration = 300;
	 *
	 * const defaultStyle = {
	 *   transition: `opacity ${duration}ms ease-in-out`,
	 *   opacity: 0,
	 * }
	 *
	 * const transitionStyles = {
	 *   entering: { opacity: 1 },
	 *   entered:  { opacity: 1 },
	 *   exiting:  { opacity: 0 },
	 *   exited:  { opacity: 0 },
	 * };
	 *
	 * const Fade = ({ in: inProp }) => (
	 *   <Transition in={inProp} timeout={duration}>
	 *     {state => (
	 *       <div style={{
	 *         ...defaultStyle,
	 *         ...transitionStyles[state]
	 *       }}>
	 *         I'm a fade Transition!
	 *       </div>
	 *     )}
	 *   </Transition>
	 * );
	 * ```
	 *
	 * There are 4 main states a Transition can be in:
	 *  - `'entering'`
	 *  - `'entered'`
	 *  - `'exiting'`
	 *  - `'exited'`
	 *
	 * Transition state is toggled via the `in` prop. When `true` the component
	 * begins the "Enter" stage. During this stage, the component will shift from
	 * its current transition state, to `'entering'` for the duration of the
	 * transition and then to the `'entered'` stage once it's complete. Let's take
	 * the following example (we'll use the
	 * [useState](https://reactjs.org/docs/hooks-reference.html#usestate) hook):
	 *
	 * ```jsx
	 * function App() {
	 *   const [inProp, setInProp] = useState(false);
	 *   return (
	 *     <div>
	 *       <Transition in={inProp} timeout={500}>
	 *         {state => (
	 *           // ...
	 *         )}
	 *       </Transition>
	 *       <button onClick={() => setInProp(true)}>
	 *         Click to Enter
	 *       </button>
	 *     </div>
	 *   );
	 * }
	 * ```
	 *
	 * When the button is clicked the component will shift to the `'entering'` state
	 * and stay there for 500ms (the value of `timeout`) before it finally switches
	 * to `'entered'`.
	 *
	 * When `in` is `false` the same thing happens except the state moves from
	 * `'exiting'` to `'exited'`.
	 */

	var Transition$1 =
	/*#__PURE__*/
	function (_React$Component) {
	  _inheritsLoose$1(Transition, _React$Component);

	  function Transition(props, context) {
	    var _this;

	    _this = _React$Component.call(this, props, context) || this;
	    var parentGroup = context; // In the context of a TransitionGroup all enters are really appears

	    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
	    var initialStatus;
	    _this.appearStatus = null;

	    if (props.in) {
	      if (appear) {
	        initialStatus = EXITED$1;
	        _this.appearStatus = ENTERING$1;
	      } else {
	        initialStatus = ENTERED$1;
	      }
	    } else {
	      if (props.unmountOnExit || props.mountOnEnter) {
	        initialStatus = UNMOUNTED$1;
	      } else {
	        initialStatus = EXITED$1;
	      }
	    }

	    _this.state = {
	      status: initialStatus
	    };
	    _this.nextCallback = null;
	    return _this;
	  }

	  Transition.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
	    var nextIn = _ref.in;

	    if (nextIn && prevState.status === UNMOUNTED$1) {
	      return {
	        status: EXITED$1
	      };
	    }

	    return null;
	  }; // getSnapshotBeforeUpdate(prevProps) {
	  //   let nextStatus = null
	  //   if (prevProps !== this.props) {
	  //     const { status } = this.state
	  //     if (this.props.in) {
	  //       if (status !== ENTERING && status !== ENTERED) {
	  //         nextStatus = ENTERING
	  //       }
	  //     } else {
	  //       if (status === ENTERING || status === ENTERED) {
	  //         nextStatus = EXITING
	  //       }
	  //     }
	  //   }
	  //   return { nextStatus }
	  // }


	  var _proto = Transition.prototype;

	  _proto.componentDidMount = function componentDidMount() {
	    this.updateStatus(true, this.appearStatus);
	  };

	  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
	    var nextStatus = null;

	    if (prevProps !== this.props) {
	      var status = this.state.status;

	      if (this.props.in) {
	        if (status !== ENTERING$1 && status !== ENTERED$1) {
	          nextStatus = ENTERING$1;
	        }
	      } else {
	        if (status === ENTERING$1 || status === ENTERED$1) {
	          nextStatus = EXITING$1;
	        }
	      }
	    }

	    this.updateStatus(false, nextStatus);
	  };

	  _proto.componentWillUnmount = function componentWillUnmount() {
	    this.cancelNextCallback();
	  };

	  _proto.getTimeouts = function getTimeouts() {
	    var timeout = this.props.timeout;
	    var exit, enter, appear;
	    exit = enter = appear = timeout;

	    if (timeout != null && typeof timeout !== 'number') {
	      exit = timeout.exit;
	      enter = timeout.enter; // TODO: remove fallback for next major

	      appear = timeout.appear !== undefined ? timeout.appear : enter;
	    }

	    return {
	      exit: exit,
	      enter: enter,
	      appear: appear
	    };
	  };

	  _proto.updateStatus = function updateStatus(mounting, nextStatus) {
	    if (mounting === void 0) {
	      mounting = false;
	    }

	    if (nextStatus !== null) {
	      // nextStatus will always be ENTERING or EXITING.
	      this.cancelNextCallback();
	      var node = ReactDOM__default.findDOMNode(this);

	      if (nextStatus === ENTERING$1) {
	        this.performEnter(node, mounting);
	      } else {
	        this.performExit(node);
	      }
	    } else if (this.props.unmountOnExit && this.state.status === EXITED$1) {
	      this.setState({
	        status: UNMOUNTED$1
	      });
	    }
	  };

	  _proto.performEnter = function performEnter(node, mounting) {
	    var _this2 = this;

	    var enter = this.props.enter;
	    var appearing = this.context ? this.context.isMounting : mounting;
	    var timeouts = this.getTimeouts();
	    var enterTimeout = appearing ? timeouts.appear : timeouts.enter; // no enter animation skip right to ENTERED
	    // if we are mounting and running this it means appear _must_ be set

	    if (!mounting && !enter || config$1.disabled) {
	      this.safeSetState({
	        status: ENTERED$1
	      }, function () {
	        _this2.props.onEntered(node);
	      });
	      return;
	    }

	    this.props.onEnter(node, appearing);
	    this.safeSetState({
	      status: ENTERING$1
	    }, function () {
	      _this2.props.onEntering(node, appearing);

	      _this2.onTransitionEnd(node, enterTimeout, function () {
	        _this2.safeSetState({
	          status: ENTERED$1
	        }, function () {
	          _this2.props.onEntered(node, appearing);
	        });
	      });
	    });
	  };

	  _proto.performExit = function performExit(node) {
	    var _this3 = this;

	    var exit = this.props.exit;
	    var timeouts = this.getTimeouts(); // no exit animation skip right to EXITED

	    if (!exit || config$1.disabled) {
	      this.safeSetState({
	        status: EXITED$1
	      }, function () {
	        _this3.props.onExited(node);
	      });
	      return;
	    }

	    this.props.onExit(node);
	    this.safeSetState({
	      status: EXITING$1
	    }, function () {
	      _this3.props.onExiting(node);

	      _this3.onTransitionEnd(node, timeouts.exit, function () {
	        _this3.safeSetState({
	          status: EXITED$1
	        }, function () {
	          _this3.props.onExited(node);
	        });
	      });
	    });
	  };

	  _proto.cancelNextCallback = function cancelNextCallback() {
	    if (this.nextCallback !== null) {
	      this.nextCallback.cancel();
	      this.nextCallback = null;
	    }
	  };

	  _proto.safeSetState = function safeSetState(nextState, callback) {
	    // This shouldn't be necessary, but there are weird race conditions with
	    // setState callbacks and unmounting in testing, so always make sure that
	    // we can cancel any pending setState callbacks after we unmount.
	    callback = this.setNextCallback(callback);
	    this.setState(nextState, callback);
	  };

	  _proto.setNextCallback = function setNextCallback(callback) {
	    var _this4 = this;

	    var active = true;

	    this.nextCallback = function (event) {
	      if (active) {
	        active = false;
	        _this4.nextCallback = null;
	        callback(event);
	      }
	    };

	    this.nextCallback.cancel = function () {
	      active = false;
	    };

	    return this.nextCallback;
	  };

	  _proto.onTransitionEnd = function onTransitionEnd(node, timeout, handler) {
	    this.setNextCallback(handler);
	    var doesNotHaveTimeoutOrListener = timeout == null && !this.props.addEndListener;

	    if (!node || doesNotHaveTimeoutOrListener) {
	      setTimeout(this.nextCallback, 0);
	      return;
	    }

	    if (this.props.addEndListener) {
	      this.props.addEndListener(node, this.nextCallback);
	    }

	    if (timeout != null) {
	      setTimeout(this.nextCallback, timeout);
	    }
	  };

	  _proto.render = function render() {
	    var status = this.state.status;

	    if (status === UNMOUNTED$1) {
	      return null;
	    }

	    var _this$props = this.props,
	        children = _this$props.children,
	        childProps = _objectWithoutPropertiesLoose$1$1(_this$props, ["children"]); // filter props for Transtition


	    delete childProps.in;
	    delete childProps.mountOnEnter;
	    delete childProps.unmountOnExit;
	    delete childProps.appear;
	    delete childProps.enter;
	    delete childProps.exit;
	    delete childProps.timeout;
	    delete childProps.addEndListener;
	    delete childProps.onEnter;
	    delete childProps.onEntering;
	    delete childProps.onEntered;
	    delete childProps.onExit;
	    delete childProps.onExiting;
	    delete childProps.onExited;

	    if (typeof children === 'function') {
	      // allows for nested Transitions
	      return React__default.createElement(TransitionGroupContext$1.Provider, {
	        value: null
	      }, children(status, childProps));
	    }

	    var child = React__default.Children.only(children);
	    return (// allows for nested Transitions
	      React__default.createElement(TransitionGroupContext$1.Provider, {
	        value: null
	      }, React__default.cloneElement(child, childProps))
	    );
	  };

	  return Transition;
	}(React__default.Component);

	Transition$1.contextType = TransitionGroupContext$1;
	Transition$1.propTypes = process.env.NODE_ENV !== "production" ? {
	  /**
	   * A `function` child can be used instead of a React element. This function is
	   * called with the current transition status (`'entering'`, `'entered'`,
	   * `'exiting'`, `'exited'`), which can be used to apply context
	   * specific props to a component.
	   *
	   * ```jsx
	   * <Transition in={this.state.in} timeout={150}>
	   *   {state => (
	   *     <MyComponent className={`fade fade-${state}`} />
	   *   )}
	   * </Transition>
	   * ```
	   */
	  children: propTypes$1.oneOfType([propTypes$1.func.isRequired, propTypes$1.element.isRequired]).isRequired,

	  /**
	   * Show the component; triggers the enter or exit states
	   */
	  in: propTypes$1.bool,

	  /**
	   * By default the child component is mounted immediately along with
	   * the parent `Transition` component. If you want to "lazy mount" the component on the
	   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
	   * mounted, even on "exited", unless you also specify `unmountOnExit`.
	   */
	  mountOnEnter: propTypes$1.bool,

	  /**
	   * By default the child component stays mounted after it reaches the `'exited'` state.
	   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
	   */
	  unmountOnExit: propTypes$1.bool,

	  /**
	   * Normally a component is not transitioned if it is shown when the
	   * `<Transition>` component mounts. If you want to transition on the first
	   * mount set `appear` to `true`, and the component will transition in as soon
	   * as the `<Transition>` mounts.
	   *
	   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
	   * > only adds an additional enter transition. However, in the
	   * > `<CSSTransition>` component that first enter transition does result in
	   * > additional `.appear-*` classes, that way you can choose to style it
	   * > differently.
	   */
	  appear: propTypes$1.bool,

	  /**
	   * Enable or disable enter transitions.
	   */
	  enter: propTypes$1.bool,

	  /**
	   * Enable or disable exit transitions.
	   */
	  exit: propTypes$1.bool,

	  /**
	   * The duration of the transition, in milliseconds.
	   * Required unless `addEndListener` is provided.
	   *
	   * You may specify a single timeout for all transitions:
	   *
	   * ```jsx
	   * timeout={500}
	   * ```
	   *
	   * or individually:
	   *
	   * ```jsx
	   * timeout={{
	   *  appear: 500,
	   *  enter: 300,
	   *  exit: 500,
	   * }}
	   * ```
	   *
	   * - `appear` defaults to the value of `enter`
	   * - `enter` defaults to `0`
	   * - `exit` defaults to `0`
	   *
	   * @type {number | { enter?: number, exit?: number, appear?: number }}
	   */
	  timeout: function timeout(props) {
	    var pt = timeoutsShape$1;
	    if (!props.addEndListener) pt = pt.isRequired;

	    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	      args[_key - 1] = arguments[_key];
	    }

	    return pt.apply(void 0, [props].concat(args));
	  },

	  /**
	   * Add a custom transition end trigger. Called with the transitioning
	   * DOM node and a `done` callback. Allows for more fine grained transition end
	   * logic. **Note:** Timeouts are still used as a fallback if provided.
	   *
	   * ```jsx
	   * addEndListener={(node, done) => {
	   *   // use the css transitionend event to mark the finish of a transition
	   *   node.addEventListener('transitionend', done, false);
	   * }}
	   * ```
	   */
	  addEndListener: propTypes$1.func,

	  /**
	   * Callback fired before the "entering" status is applied. An extra parameter
	   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool) -> void
	   */
	  onEnter: propTypes$1.func,

	  /**
	   * Callback fired after the "entering" status is applied. An extra parameter
	   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool)
	   */
	  onEntering: propTypes$1.func,

	  /**
	   * Callback fired after the "entered" status is applied. An extra parameter
	   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool) -> void
	   */
	  onEntered: propTypes$1.func,

	  /**
	   * Callback fired before the "exiting" status is applied.
	   *
	   * @type Function(node: HtmlElement) -> void
	   */
	  onExit: propTypes$1.func,

	  /**
	   * Callback fired after the "exiting" status is applied.
	   *
	   * @type Function(node: HtmlElement) -> void
	   */
	  onExiting: propTypes$1.func,

	  /**
	   * Callback fired after the "exited" status is applied.
	   *
	   * @type Function(node: HtmlElement) -> void
	   */
	  onExited: propTypes$1.func // Name the function so it is clearer in the documentation

	} : {};

	function noop$1() {}

	Transition$1.defaultProps = {
	  in: false,
	  mountOnEnter: false,
	  unmountOnExit: false,
	  appear: false,
	  enter: true,
	  exit: true,
	  onEnter: noop$1,
	  onEntering: noop$1,
	  onEntered: noop$1,
	  onExit: noop$1,
	  onExiting: noop$1,
	  onExited: noop$1
	};
	Transition$1.UNMOUNTED = 0;
	Transition$1.EXITED = 1;
	Transition$1.ENTERING = 2;
	Transition$1.ENTERED = 3;
	Transition$1.EXITING = 4;

	var _addClass = function addClass$1(node, classes) {
	  return node && classes && classes.split(' ').forEach(function (c) {
	    return addClass(node, c);
	  });
	};

	var removeClass$1 = function removeClass$1(node, classes) {
	  return node && classes && classes.split(' ').forEach(function (c) {
	    return removeClass(node, c);
	  });
	};
	/**
	 * A transition component inspired by the excellent
	 * [ng-animate](http://www.nganimate.org/) library, you should use it if you're
	 * using CSS transitions or animations. It's built upon the
	 * [`Transition`](https://reactcommunity.org/react-transition-group/transition)
	 * component, so it inherits all of its props.
	 *
	 * `CSSTransition` applies a pair of class names during the `appear`, `enter`,
	 * and `exit` states of the transition. The first class is applied and then a
	 * second `*-active` class in order to activate the CSS transition. After the
	 * transition, matching `*-done` class names are applied to persist the
	 * transition state.
	 *
	 * ```jsx
	 * function App() {
	 *   const [inProp, setInProp] = useState(false);
	 *   return (
	 *     <div>
	 *       <CSSTransition in={inProp} timeout={200} classNames="my-node">
	 *         <div>
	 *           {"I'll receive my-node-* classes"}
	 *         </div>
	 *       </CSSTransition>
	 *       <button type="button" onClick={() => setInProp(true)}>
	 *         Click to Enter
	 *       </button>
	 *     </div>
	 *   );
	 * }
	 * ```
	 *
	 * When the `in` prop is set to `true`, the child component will first receive
	 * the class `example-enter`, then the `example-enter-active` will be added in
	 * the next tick. `CSSTransition` [forces a
	 * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)
	 * between before adding the `example-enter-active`. This is an important trick
	 * because it allows us to transition between `example-enter` and
	 * `example-enter-active` even though they were added immediately one after
	 * another. Most notably, this is what makes it possible for us to animate
	 * _appearance_.
	 *
	 * ```css
	 * .my-node-enter {
	 *   opacity: 0;
	 * }
	 * .my-node-enter-active {
	 *   opacity: 1;
	 *   transition: opacity 200ms;
	 * }
	 * .my-node-exit {
	 *   opacity: 1;
	 * }
	 * .my-node-exit-active {
	 *   opacity: 0;
	 *   transition: opacity 200ms;
	 * }
	 * ```
	 *
	 * `*-active` classes represent which styles you want to animate **to**.
	 *
	 * **Note**: If you're using the
	 * [`appear`](http://reactcommunity.org/react-transition-group/transition#Transition-prop-appear)
	 * prop, make sure to define styles for `.appear-*` classes as well.
	 */


	var CSSTransition =
	/*#__PURE__*/
	function (_React$Component) {
	  _inheritsLoose$1(CSSTransition, _React$Component);

	  function CSSTransition() {
	    var _this;

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
	    _this.appliedClasses = {
	      appear: {},
	      enter: {},
	      exit: {}
	    };

	    _this.onEnter = function (node, appearing) {
	      _this.removeClasses(node, 'exit');

	      _this.addClass(node, appearing ? 'appear' : 'enter', 'base');

	      if (_this.props.onEnter) {
	        _this.props.onEnter(node, appearing);
	      }
	    };

	    _this.onEntering = function (node, appearing) {
	      var type = appearing ? 'appear' : 'enter';

	      _this.addClass(node, type, 'active');

	      if (_this.props.onEntering) {
	        _this.props.onEntering(node, appearing);
	      }
	    };

	    _this.onEntered = function (node, appearing) {
	      var type = appearing ? 'appear' : 'enter';

	      _this.removeClasses(node, type);

	      _this.addClass(node, type, 'done');

	      if (_this.props.onEntered) {
	        _this.props.onEntered(node, appearing);
	      }
	    };

	    _this.onExit = function (node) {
	      _this.removeClasses(node, 'appear');

	      _this.removeClasses(node, 'enter');

	      _this.addClass(node, 'exit', 'base');

	      if (_this.props.onExit) {
	        _this.props.onExit(node);
	      }
	    };

	    _this.onExiting = function (node) {
	      _this.addClass(node, 'exit', 'active');

	      if (_this.props.onExiting) {
	        _this.props.onExiting(node);
	      }
	    };

	    _this.onExited = function (node) {
	      _this.removeClasses(node, 'exit');

	      _this.addClass(node, 'exit', 'done');

	      if (_this.props.onExited) {
	        _this.props.onExited(node);
	      }
	    };

	    _this.getClassNames = function (type) {
	      var classNames = _this.props.classNames;
	      var isStringClassNames = typeof classNames === 'string';
	      var prefix = isStringClassNames && classNames ? classNames + "-" : '';
	      var baseClassName = isStringClassNames ? "" + prefix + type : classNames[type];
	      var activeClassName = isStringClassNames ? baseClassName + "-active" : classNames[type + "Active"];
	      var doneClassName = isStringClassNames ? baseClassName + "-done" : classNames[type + "Done"];
	      return {
	        baseClassName: baseClassName,
	        activeClassName: activeClassName,
	        doneClassName: doneClassName
	      };
	    };

	    return _this;
	  }

	  var _proto = CSSTransition.prototype;

	  _proto.addClass = function addClass(node, type, phase) {
	    var className = this.getClassNames(type)[phase + "ClassName"];

	    if (type === 'appear' && phase === 'done') {
	      className += " " + this.getClassNames('enter').doneClassName;
	    } // This is for to force a repaint,
	    // which is necessary in order to transition styles when adding a class name.


	    if (phase === 'active') {
	      /* eslint-disable no-unused-expressions */
	      node && node.scrollTop;
	    }

	    this.appliedClasses[type][phase] = className;

	    _addClass(node, className);
	  };

	  _proto.removeClasses = function removeClasses(node, type) {
	    var _this$appliedClasses$ = this.appliedClasses[type],
	        baseClassName = _this$appliedClasses$.base,
	        activeClassName = _this$appliedClasses$.active,
	        doneClassName = _this$appliedClasses$.done;
	    this.appliedClasses[type] = {};

	    if (baseClassName) {
	      removeClass$1(node, baseClassName);
	    }

	    if (activeClassName) {
	      removeClass$1(node, activeClassName);
	    }

	    if (doneClassName) {
	      removeClass$1(node, doneClassName);
	    }
	  };

	  _proto.render = function render() {
	    var _this$props = this.props,
	        _ = _this$props.classNames,
	        props = _objectWithoutPropertiesLoose$1$1(_this$props, ["classNames"]);

	    return React__default.createElement(Transition$1, _extends$1$1({}, props, {
	      onEnter: this.onEnter,
	      onEntered: this.onEntered,
	      onEntering: this.onEntering,
	      onExit: this.onExit,
	      onExiting: this.onExiting,
	      onExited: this.onExited
	    }));
	  };

	  return CSSTransition;
	}(React__default.Component);

	CSSTransition.defaultProps = {
	  classNames: ''
	};
	CSSTransition.propTypes = process.env.NODE_ENV !== "production" ? _extends$1$1({}, Transition$1.propTypes, {
	  /**
	   * The animation classNames applied to the component as it appears, enters,
	   * exits or has finished the transition. A single name can be provided and it
	   * will be suffixed for each stage: e.g.
	   *
	   * `classNames="fade"` applies `fade-appear`, `fade-appear-active`,
	   * `fade-appear-done`, `fade-enter`, `fade-enter-active`, `fade-enter-done`,
	   * `fade-exit`, `fade-exit-active`, and `fade-exit-done`.
	   *
	   * **Note**: `fade-appear-done` and `fade-enter-done` will _both_ be applied.
	   * This allows you to define different behavior for when appearing is done and
	   * when regular entering is done, using selectors like
	   * `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply an
	   * epic entrance animation when element first appears in the DOM using
	   * [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can
	   * simply use `fade-enter-done` for defining both cases.
	   *
	   * Each individual classNames can also be specified independently like:
	   *
	   * ```js
	   * classNames={{
	   *  appear: 'my-appear',
	   *  appearActive: 'my-active-appear',
	   *  appearDone: 'my-done-appear',
	   *  enter: 'my-enter',
	   *  enterActive: 'my-active-enter',
	   *  enterDone: 'my-done-enter',
	   *  exit: 'my-exit',
	   *  exitActive: 'my-active-exit',
	   *  exitDone: 'my-done-exit',
	   * }}
	   * ```
	   *
	   * If you want to set these classes using CSS Modules:
	   *
	   * ```js
	   * import styles from './styles.css';
	   * ```
	   *
	   * you might want to use camelCase in your CSS file, that way could simply
	   * spread them instead of listing them one by one:
	   *
	   * ```js
	   * classNames={{ ...styles }}
	   * ```
	   *
	   * @type {string | {
	   *  appear?: string,
	   *  appearActive?: string,
	   *  appearDone?: string,
	   *  enter?: string,
	   *  enterActive?: string,
	   *  enterDone?: string,
	   *  exit?: string,
	   *  exitActive?: string,
	   *  exitDone?: string,
	   * }}
	   */
	  classNames: classNamesShape$1,

	  /**
	   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is
	   * applied.
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool)
	   */
	  onEnter: propTypes$1.func,

	  /**
	   * A `<Transition>` callback fired immediately after the 'enter-active' or
	   * 'appear-active' class is applied.
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool)
	   */
	  onEntering: propTypes$1.func,

	  /**
	   * A `<Transition>` callback fired immediately after the 'enter' or
	   * 'appear' classes are **removed** and the `done` class is added to the DOM node.
	   *
	   * @type Function(node: HtmlElement, isAppearing: bool)
	   */
	  onEntered: propTypes$1.func,

	  /**
	   * A `<Transition>` callback fired immediately after the 'exit' class is
	   * applied.
	   *
	   * @type Function(node: HtmlElement)
	   */
	  onExit: propTypes$1.func,

	  /**
	   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.
	   *
	   * @type Function(node: HtmlElement)
	   */
	  onExiting: propTypes$1.func,

	  /**
	   * A `<Transition>` callback fired immediately after the 'exit' classes
	   * are **removed** and the `exit-done` class is added to the DOM node.
	   *
	   * @type Function(node: HtmlElement)
	   */
	  onExited: propTypes$1.func
	}) : {};

	/**
	 * Given `this.props.children`, return an object mapping key to child.
	 *
	 * @param {*} children `this.props.children`
	 * @return {object} Mapping of key to child
	 */

	function getChildMapping$1(children, mapFn) {
	  var mapper = function mapper(child) {
	    return mapFn && React.isValidElement(child) ? mapFn(child) : child;
	  };

	  var result = Object.create(null);
	  if (children) React.Children.map(children, function (c) {
	    return c;
	  }).forEach(function (child) {
	    // run the map function here instead so that the key is the computed one
	    result[child.key] = mapper(child);
	  });
	  return result;
	}
	/**
	 * When you're adding or removing children some may be added or removed in the
	 * same render pass. We want to show *both* since we want to simultaneously
	 * animate elements in and out. This function takes a previous set of keys
	 * and a new set of keys and merges them with its best guess of the correct
	 * ordering. In the future we may expose some of the utilities in
	 * ReactMultiChild to make this easy, but for now React itself does not
	 * directly have this concept of the union of prevChildren and nextChildren
	 * so we implement it here.
	 *
	 * @param {object} prev prev children as returned from
	 * `ReactTransitionChildMapping.getChildMapping()`.
	 * @param {object} next next children as returned from
	 * `ReactTransitionChildMapping.getChildMapping()`.
	 * @return {object} a key set that contains all keys in `prev` and all keys
	 * in `next` in a reasonable order.
	 */

	function mergeChildMappings$1(prev, next) {
	  prev = prev || {};
	  next = next || {};

	  function getValueForKey(key) {
	    return key in next ? next[key] : prev[key];
	  } // For each key of `next`, the list of keys to insert before that key in
	  // the combined list


	  var nextKeysPending = Object.create(null);
	  var pendingKeys = [];

	  for (var prevKey in prev) {
	    if (prevKey in next) {
	      if (pendingKeys.length) {
	        nextKeysPending[prevKey] = pendingKeys;
	        pendingKeys = [];
	      }
	    } else {
	      pendingKeys.push(prevKey);
	    }
	  }

	  var i;
	  var childMapping = {};

	  for (var nextKey in next) {
	    if (nextKeysPending[nextKey]) {
	      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
	        var pendingNextKey = nextKeysPending[nextKey][i];
	        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
	      }
	    }

	    childMapping[nextKey] = getValueForKey(nextKey);
	  } // Finally, add the keys which didn't appear before any key in `next`


	  for (i = 0; i < pendingKeys.length; i++) {
	    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
	  }

	  return childMapping;
	}

	function getProp$1(child, prop, props) {
	  return props[prop] != null ? props[prop] : child.props[prop];
	}

	function getInitialChildMapping$1(props, onExited) {
	  return getChildMapping$1(props.children, function (child) {
	    return React.cloneElement(child, {
	      onExited: onExited.bind(null, child),
	      in: true,
	      appear: getProp$1(child, 'appear', props),
	      enter: getProp$1(child, 'enter', props),
	      exit: getProp$1(child, 'exit', props)
	    });
	  });
	}
	function getNextChildMapping$1(nextProps, prevChildMapping, onExited) {
	  var nextChildMapping = getChildMapping$1(nextProps.children);
	  var children = mergeChildMappings$1(prevChildMapping, nextChildMapping);
	  Object.keys(children).forEach(function (key) {
	    var child = children[key];
	    if (!React.isValidElement(child)) return;
	    var hasPrev = key in prevChildMapping;
	    var hasNext = key in nextChildMapping;
	    var prevChild = prevChildMapping[key];
	    var isLeaving = React.isValidElement(prevChild) && !prevChild.props.in; // item is new (entering)

	    if (hasNext && (!hasPrev || isLeaving)) {
	      // console.log('entering', key)
	      children[key] = React.cloneElement(child, {
	        onExited: onExited.bind(null, child),
	        in: true,
	        exit: getProp$1(child, 'exit', nextProps),
	        enter: getProp$1(child, 'enter', nextProps)
	      });
	    } else if (!hasNext && hasPrev && !isLeaving) {
	      // item is old (exiting)
	      // console.log('leaving', key)
	      children[key] = React.cloneElement(child, {
	        in: false
	      });
	    } else if (hasNext && hasPrev && React.isValidElement(prevChild)) {
	      // item hasn't changed transition states
	      // copy over the last transition props;
	      // console.log('unchanged', key)
	      children[key] = React.cloneElement(child, {
	        onExited: onExited.bind(null, child),
	        in: prevChild.props.in,
	        exit: getProp$1(child, 'exit', nextProps),
	        enter: getProp$1(child, 'enter', nextProps)
	      });
	    }
	  });
	  return children;
	}

	var values$2 = Object.values || function (obj) {
	  return Object.keys(obj).map(function (k) {
	    return obj[k];
	  });
	};

	var defaultProps$1 = {
	  component: 'div',
	  childFactory: function childFactory(child) {
	    return child;
	  }
	  /**
	   * The `<TransitionGroup>` component manages a set of transition components
	   * (`<Transition>` and `<CSSTransition>`) in a list. Like with the transition
	   * components, `<TransitionGroup>` is a state machine for managing the mounting
	   * and unmounting of components over time.
	   *
	   * Consider the example below. As items are removed or added to the TodoList the
	   * `in` prop is toggled automatically by the `<TransitionGroup>`.
	   *
	   * Note that `<TransitionGroup>`  does not define any animation behavior!
	   * Exactly _how_ a list item animates is up to the individual transition
	   * component. This means you can mix and match animations across different list
	   * items.
	   */

	};

	var TransitionGroup$1 =
	/*#__PURE__*/
	function (_React$Component) {
	  _inheritsLoose$1(TransitionGroup, _React$Component);

	  function TransitionGroup(props, context) {
	    var _this;

	    _this = _React$Component.call(this, props, context) || this;

	    var handleExited = _this.handleExited.bind(_assertThisInitialized$1$1(_assertThisInitialized$1$1(_this))); // Initial children should all be entering, dependent on appear


	    _this.state = {
	      contextValue: {
	        isMounting: true
	      },
	      handleExited: handleExited,
	      firstRender: true
	    };
	    return _this;
	  }

	  var _proto = TransitionGroup.prototype;

	  _proto.componentDidMount = function componentDidMount() {
	    this.mounted = true;
	    this.setState({
	      contextValue: {
	        isMounting: false
	      }
	    });
	  };

	  _proto.componentWillUnmount = function componentWillUnmount() {
	    this.mounted = false;
	  };

	  TransitionGroup.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
	    var prevChildMapping = _ref.children,
	        handleExited = _ref.handleExited,
	        firstRender = _ref.firstRender;
	    return {
	      children: firstRender ? getInitialChildMapping$1(nextProps, handleExited) : getNextChildMapping$1(nextProps, prevChildMapping, handleExited),
	      firstRender: false
	    };
	  };

	  _proto.handleExited = function handleExited(child, node) {
	    var currentChildMapping = getChildMapping$1(this.props.children);
	    if (child.key in currentChildMapping) return;

	    if (child.props.onExited) {
	      child.props.onExited(node);
	    }

	    if (this.mounted) {
	      this.setState(function (state) {
	        var children = _extends$1$1({}, state.children);

	        delete children[child.key];
	        return {
	          children: children
	        };
	      });
	    }
	  };

	  _proto.render = function render() {
	    var _this$props = this.props,
	        Component = _this$props.component,
	        childFactory = _this$props.childFactory,
	        props = _objectWithoutPropertiesLoose$1$1(_this$props, ["component", "childFactory"]);

	    var contextValue = this.state.contextValue;
	    var children = values$2(this.state.children).map(childFactory);
	    delete props.appear;
	    delete props.enter;
	    delete props.exit;

	    if (Component === null) {
	      return React__default.createElement(TransitionGroupContext$1.Provider, {
	        value: contextValue
	      }, children);
	    }

	    return React__default.createElement(TransitionGroupContext$1.Provider, {
	      value: contextValue
	    }, React__default.createElement(Component, props, children));
	  };

	  return TransitionGroup;
	}(React__default.Component);

	TransitionGroup$1.propTypes = process.env.NODE_ENV !== "production" ? {
	  /**
	   * `<TransitionGroup>` renders a `<div>` by default. You can change this
	   * behavior by providing a `component` prop.
	   * If you use React v16+ and would like to avoid a wrapping `<div>` element
	   * you can pass in `component={null}`. This is useful if the wrapping div
	   * borks your css styles.
	   */
	  component: propTypes$1.any,

	  /**
	   * A set of `<Transition>` components, that are toggled `in` and out as they
	   * leave. the `<TransitionGroup>` will inject specific transition props, so
	   * remember to spread them through if you are wrapping the `<Transition>` as
	   * with our `<Fade>` example.
	   *
	   * While this component is meant for multiple `Transition` or `CSSTransition`
	   * children, sometimes you may want to have a single transition child with
	   * content that you want to be transitioned out and in when you change it
	   * (e.g. routes, images etc.) In that case you can change the `key` prop of
	   * the transition child as you change its content, this will cause
	   * `TransitionGroup` to transition the child out and back in.
	   */
	  children: propTypes$1.node,

	  /**
	   * A convenience prop that enables or disables appear animations
	   * for all children. Note that specifying this will override any defaults set
	   * on individual children Transitions.
	   */
	  appear: propTypes$1.bool,

	  /**
	   * A convenience prop that enables or disables enter animations
	   * for all children. Note that specifying this will override any defaults set
	   * on individual children Transitions.
	   */
	  enter: propTypes$1.bool,

	  /**
	   * A convenience prop that enables or disables exit animations
	   * for all children. Note that specifying this will override any defaults set
	   * on individual children Transitions.
	   */
	  exit: propTypes$1.bool,

	  /**
	   * You may need to apply reactive updates to a child as it is exiting.
	   * This is generally done by using `cloneElement` however in the case of an exiting
	   * child the element has already been removed and not accessible to the consumer.
	   *
	   * If you do need to update a child as it leaves you can provide a `childFactory`
	   * to wrap every child, even the ones that are leaving.
	   *
	   * @type Function(child: ReactElement) -> ReactElement
	   */
	  childFactory: propTypes$1.func
	} : {};
	TransitionGroup$1.defaultProps = defaultProps$1;

	var findClosestEnabledDate = function findClosestEnabledDate(_ref) {
	  var date = _ref.date,
	      utils = _ref.utils,
	      minDate = _ref.minDate,
	      maxDate = _ref.maxDate,
	      disableFuture = _ref.disableFuture,
	      disablePast = _ref.disablePast,
	      shouldDisableDate = _ref.shouldDisableDate;
	  var today = utils.startOfDay(utils.date());

	  if (disablePast && utils.isBefore(minDate, today)) {
	    minDate = today;
	  }

	  if (disableFuture && utils.isAfter(maxDate, today)) {
	    maxDate = today;
	  }

	  var forward = date;
	  var backward = date;

	  if (utils.isBefore(date, minDate)) {
	    forward = utils.date(minDate);
	    backward = null;
	  }

	  if (utils.isAfter(date, maxDate)) {
	    if (backward) {
	      backward = utils.date(maxDate);
	    }

	    forward = null;
	  }

	  while (forward || backward) {
	    if (forward && utils.isAfter(forward, maxDate)) {
	      forward = null;
	    }

	    if (backward && utils.isBefore(backward, minDate)) {
	      backward = null;
	    }

	    if (forward) {
	      if (!shouldDisableDate(forward)) {
	        return forward;
	      }

	      forward = utils.addDays(forward, 1);
	    }

	    if (backward) {
	      if (!shouldDisableDate(backward)) {
	        return backward;
	      }

	      backward = utils.addDays(backward, -1);
	    }
	  } // fallback to today if no enabled days


	  return utils.date();
	};
	var isYearOnlyView = function isYearOnlyView(views) {
	  return views.length === 1 && views[0] === 'year';
	};
	var isYearAndMonthViews = function isYearAndMonthViews(views) {
	  return views.length === 2 && arrayIncludes(views, 'month') && arrayIncludes(views, 'year');
	};
	var getFormatByViews = function getFormatByViews(views, utils) {
	  if (isYearOnlyView(views)) {
	    return utils.yearFormat;
	  }

	  if (isYearAndMonthViews(views)) {
	    return utils.yearMonthFormat;
	  }

	  return utils.dateFormat;
	};

	var DayWrapper = function DayWrapper(_ref) {
	  var children = _ref.children,
	      value = _ref.value,
	      disabled = _ref.disabled,
	      onSelect = _ref.onSelect,
	      dayInCurrentMonth = _ref.dayInCurrentMonth,
	      other = _objectWithoutProperties$1$1(_ref, ["children", "value", "disabled", "onSelect", "dayInCurrentMonth"]);

	  var handleClick = React.useCallback(function () {
	    return onSelect(value);
	  }, [onSelect, value]);
	  return React.createElement("div", _extends$1$1({
	    role: "presentation",
	    onClick: dayInCurrentMonth && !disabled ? handleClick : undefined,
	    onKeyPress: dayInCurrentMonth && !disabled ? handleClick : undefined
	  }, other), children);
	};

	var animationDuration = 350;
	var useStyles$2 = makeStyles$1(function (theme) {
	  var slideTransition = theme.transitions.create('transform', {
	    duration: animationDuration,
	    easing: 'cubic-bezier(0.35, 0.8, 0.4, 1)'
	  });
	  return {
	    transitionContainer: {
	      display: 'block',
	      position: 'relative',
	      '& > *': {
	        position: 'absolute',
	        top: 0,
	        right: 0,
	        left: 0
	      }
	    },
	    'slideEnter-left': {
	      willChange: 'transform',
	      transform: 'translate(100%)'
	    },
	    'slideEnter-right': {
	      willChange: 'transform',
	      transform: 'translate(-100%)'
	    },
	    slideEnterActive: {
	      transform: 'translate(0%)',
	      transition: slideTransition
	    },
	    slideExit: {
	      transform: 'translate(0%)'
	    },
	    'slideExitActiveLeft-left': {
	      willChange: 'transform',
	      transform: 'translate(-200%)',
	      transition: slideTransition
	    },
	    'slideExitActiveLeft-right': {
	      willChange: 'transform',
	      transform: 'translate(200%)',
	      transition: slideTransition
	    }
	  };
	}, {
	  name: 'MuiPickersSlideTransition'
	});

	var SlideTransition = function SlideTransition(_ref) {
	  var children = _ref.children,
	      transKey = _ref.transKey,
	      slideDirection = _ref.slideDirection,
	      _ref$className = _ref.className,
	      className = _ref$className === void 0 ? null : _ref$className;
	  var classes = useStyles$2();
	  var transitionClasses = {
	    exit: classes.slideExit,
	    enterActive: classes.slideEnterActive,
	    // @ts-ignore
	    enter: classes['slideEnter-' + slideDirection],
	    // @ts-ignore
	    exitActive: classes['slideExitActiveLeft-' + slideDirection]
	  };
	  return React.createElement(TransitionGroup$1, {
	    className: clsx$1(classes.transitionContainer, className),
	    childFactory: function childFactory(element) {
	      return React.cloneElement(element, {
	        classNames: transitionClasses
	      });
	    }
	  }, React.createElement(CSSTransition, {
	    mountOnEnter: true,
	    unmountOnExit: true,
	    key: transKey + slideDirection,
	    timeout: animationDuration,
	    classNames: transitionClasses,
	    children: children
	  }));
	};

	var ArrowLeftIcon = function ArrowLeftIcon(props) {
	  return React__default.createElement(require$$2, props, React__default.createElement("path", {
	    d: "M15.41 16.59L10.83 12l4.58-4.59L14 6l-6 6 6 6 1.41-1.41z"
	  }), React__default.createElement("path", {
	    fill: "none",
	    d: "M0 0h24v24H0V0z"
	  }));
	};

	var ArrowRightIcon = function ArrowRightIcon(props) {
	  return React__default.createElement(require$$2, props, React__default.createElement("path", {
	    d: "M8.59 16.59L13.17 12 8.59 7.41 10 6l6 6-6 6-1.41-1.41z"
	  }), React__default.createElement("path", {
	    fill: "none",
	    d: "M0 0h24v24H0V0z"
	  }));
	};

	var useStyles$1$1 = makeStyles$1(function (theme) {
	  return {
	    switchHeader: {
	      display: 'flex',
	      justifyContent: 'space-between',
	      alignItems: 'center',
	      marginTop: theme.spacing(0.5),
	      marginBottom: theme.spacing(1)
	    },
	    transitionContainer: {
	      width: '100%',
	      overflow: 'hidden',
	      height: 23
	    },
	    iconButton: {
	      zIndex: 1,
	      backgroundColor: theme.palette.background.paper
	    },
	    daysHeader: {
	      display: 'flex',
	      justifyContent: 'center',
	      alignItems: 'center',
	      maxHeight: 16
	    },
	    dayLabel: {
	      width: 36,
	      margin: '0 2px',
	      textAlign: 'center',
	      color: theme.palette.text.hint
	    }
	  };
	}, {
	  name: 'MuiPickersCalendarHeader'
	});
	var CalendarHeader = function CalendarHeader(_ref) {
	  var currentMonth = _ref.currentMonth,
	      onMonthChange = _ref.onMonthChange,
	      leftArrowIcon = _ref.leftArrowIcon,
	      rightArrowIcon = _ref.rightArrowIcon,
	      leftArrowButtonProps = _ref.leftArrowButtonProps,
	      rightArrowButtonProps = _ref.rightArrowButtonProps,
	      disablePrevMonth = _ref.disablePrevMonth,
	      disableNextMonth = _ref.disableNextMonth,
	      slideDirection = _ref.slideDirection;
	  var utils = useUtils();
	  var classes = useStyles$1$1();
	  var theme = useTheme$1();
	  var rtl = theme.direction === 'rtl';

	  var selectNextMonth = function selectNextMonth() {
	    return onMonthChange(utils.getNextMonth(currentMonth), 'left');
	  };

	  var selectPreviousMonth = function selectPreviousMonth() {
	    return onMonthChange(utils.getPreviousMonth(currentMonth), 'right');
	  };

	  return React.createElement("div", null, React.createElement("div", {
	    className: classes.switchHeader
	  }, React.createElement(IconButton$1, _extends$1$1({}, leftArrowButtonProps, {
	    disabled: disablePrevMonth,
	    onClick: selectPreviousMonth,
	    className: classes.iconButton
	  }), rtl ? rightArrowIcon : leftArrowIcon), React.createElement(SlideTransition, {
	    slideDirection: slideDirection,
	    transKey: currentMonth.toString(),
	    className: classes.transitionContainer
	  }, React.createElement(Typography$1, {
	    align: "center",
	    variant: "body1"
	  }, utils.getCalendarHeaderText(currentMonth))), React.createElement(IconButton$1, _extends$1$1({}, rightArrowButtonProps, {
	    disabled: disableNextMonth,
	    onClick: selectNextMonth,
	    className: classes.iconButton
	  }), rtl ? leftArrowIcon : rightArrowIcon)), React.createElement("div", {
	    className: classes.daysHeader
	  }, utils.getWeekdays().map(function (day, index) {
	    return React.createElement(Typography$1, {
	      key: index // eslint-disable-line react/no-array-index-key
	      ,
	      variant: "caption",
	      className: classes.dayLabel
	    }, day);
	  })));
	};
	CalendarHeader.displayName = 'CalendarHeader';
	process.env.NODE_ENV !== "production" ? CalendarHeader.propTypes = {
	  leftArrowIcon: propTypes_13,
	  rightArrowIcon: propTypes_13,
	  disablePrevMonth: propTypes_2,
	  disableNextMonth: propTypes_2
	} : void 0;
	CalendarHeader.defaultProps = {
	  leftArrowIcon: React.createElement(ArrowLeftIcon, null),
	  rightArrowIcon: React.createElement(ArrowRightIcon, null),
	  disablePrevMonth: false,
	  disableNextMonth: false
	};

	var withUtils = function withUtils() {
	  return function (Component) {
	    var WithUtils = function WithUtils(props) {
	      var utils = useUtils();
	      return React.createElement(Component, _extends$1$1({
	        utils: utils
	      }, props));
	    };

	    WithUtils.displayName = "WithUtils(".concat(Component.displayName || Component.name, ")");
	    return WithUtils;
	  };
	};

	var KeyDownListener = function KeyDownListener(_ref) {
	  var onKeyDown = _ref.onKeyDown;
	  React.useEffect(function () {
	    window.addEventListener('keydown', onKeyDown);
	    return function () {
	      window.removeEventListener('keydown', onKeyDown);
	    };
	  }, [onKeyDown]);
	  return null;
	};

	var Calendar =
	/*#__PURE__*/
	function (_React$Component) {
	  _inherits$1$1(Calendar, _React$Component);

	  function Calendar() {
	    var _getPrototypeOf2;

	    var _this;

	    _classCallCheck$1$1(this, Calendar);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _possibleConstructorReturn$1$1(this, (_getPrototypeOf2 = _getPrototypeOf$1$1(Calendar)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    _this.state = {
	      slideDirection: 'left',
	      currentMonth: _this.props.utils.startOfMonth(_this.props.date),
	      loadingQueue: 0
	    };

	    _this.pushToLoadingQueue = function () {
	      var loadingQueue = _this.state.loadingQueue + 1;

	      _this.setState({
	        loadingQueue: loadingQueue
	      });
	    };

	    _this.popFromLoadingQueue = function () {
	      var loadingQueue = _this.state.loadingQueue;
	      loadingQueue = loadingQueue <= 0 ? 0 : loadingQueue - 1;

	      _this.setState({
	        loadingQueue: loadingQueue
	      });
	    };

	    _this.handleChangeMonth = function (newMonth, slideDirection) {
	      _this.setState({
	        currentMonth: newMonth,
	        slideDirection: slideDirection
	      });

	      if (_this.props.onMonthChange) {
	        var returnVal = _this.props.onMonthChange(newMonth);

	        if (returnVal) {
	          _this.pushToLoadingQueue();

	          returnVal.then(function () {
	            _this.popFromLoadingQueue();
	          });
	        }
	      }
	    };

	    _this.validateMinMaxDate = function (day) {
	      var _this$props = _this.props,
	          minDate = _this$props.minDate,
	          maxDate = _this$props.maxDate,
	          utils = _this$props.utils,
	          disableFuture = _this$props.disableFuture,
	          disablePast = _this$props.disablePast;
	      var now = utils.date();
	      return Boolean(disableFuture && utils.isAfterDay(day, now) || disablePast && utils.isBeforeDay(day, now) || minDate && utils.isBeforeDay(day, utils.date(minDate)) || maxDate && utils.isAfterDay(day, utils.date(maxDate)));
	    };

	    _this.shouldDisablePrevMonth = function () {
	      var _this$props2 = _this.props,
	          utils = _this$props2.utils,
	          disablePast = _this$props2.disablePast,
	          minDate = _this$props2.minDate;
	      var now = utils.date();
	      var firstEnabledMonth = utils.startOfMonth(disablePast && utils.isAfter(now, utils.date(minDate)) ? now : utils.date(minDate));
	      return !utils.isBefore(firstEnabledMonth, _this.state.currentMonth);
	    };

	    _this.shouldDisableNextMonth = function () {
	      var _this$props3 = _this.props,
	          utils = _this$props3.utils,
	          disableFuture = _this$props3.disableFuture,
	          maxDate = _this$props3.maxDate;
	      var now = utils.date();
	      var lastEnabledMonth = utils.startOfMonth(disableFuture && utils.isBefore(now, utils.date(maxDate)) ? now : utils.date(maxDate));
	      return !utils.isAfter(lastEnabledMonth, _this.state.currentMonth);
	    };

	    _this.shouldDisableDate = function (day) {
	      var shouldDisableDate = _this.props.shouldDisableDate;
	      return _this.validateMinMaxDate(day) || Boolean(shouldDisableDate && shouldDisableDate(day));
	    };

	    _this.handleDaySelect = function (day) {
	      var isFinish = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	      var _this$props4 = _this.props,
	          date = _this$props4.date,
	          utils = _this$props4.utils;

	      _this.props.onChange(utils.mergeDateAndTime(day, date), isFinish);
	    };

	    _this.moveToDay = function (day) {
	      var utils = _this.props.utils;

	      if (day && !_this.shouldDisableDate(day)) {
	        if (utils.getMonth(day) !== utils.getMonth(_this.state.currentMonth)) {
	          _this.handleChangeMonth(utils.startOfMonth(day), 'left');
	        }

	        _this.handleDaySelect(day, false);
	      }
	    };

	    _this.handleKeyDown = function (event) {
	      var _this$props5 = _this.props,
	          theme = _this$props5.theme,
	          date = _this$props5.date,
	          utils = _this$props5.utils;
	      runKeyHandler(event, {
	        ArrowUp: function ArrowUp() {
	          return _this.moveToDay(utils.addDays(date, -7));
	        },
	        ArrowDown: function ArrowDown() {
	          return _this.moveToDay(utils.addDays(date, 7));
	        },
	        ArrowLeft: function ArrowLeft() {
	          return _this.moveToDay(utils.addDays(date, theme.direction === 'ltr' ? -1 : 1));
	        },
	        ArrowRight: function ArrowRight() {
	          return _this.moveToDay(utils.addDays(date, theme.direction === 'ltr' ? 1 : -1));
	        }
	      });
	    };

	    _this.renderWeeks = function () {
	      var _this$props6 = _this.props,
	          utils = _this$props6.utils,
	          classes = _this$props6.classes;
	      var weeks = utils.getWeekArray(_this.state.currentMonth);
	      return weeks.map(function (week) {
	        return React.createElement("div", {
	          key: "week-".concat(week[0].toString()),
	          className: classes.week
	        }, _this.renderDays(week));
	      });
	    };

	    _this.renderDays = function (week) {
	      var _this$props7 = _this.props,
	          date = _this$props7.date,
	          renderDay = _this$props7.renderDay,
	          utils = _this$props7.utils;
	      var now = utils.date();
	      var selectedDate = utils.startOfDay(date);
	      var currentMonthNumber = utils.getMonth(_this.state.currentMonth);
	      return week.map(function (day) {
	        var disabled = _this.shouldDisableDate(day);

	        var isDayInCurrentMonth = utils.getMonth(day) === currentMonthNumber;
	        var dayComponent = React.createElement(Day, {
	          disabled: disabled,
	          current: utils.isSameDay(day, now),
	          hidden: !isDayInCurrentMonth,
	          selected: utils.isSameDay(selectedDate, day)
	        }, utils.getDayText(day));

	        if (renderDay) {
	          dayComponent = renderDay(day, selectedDate, isDayInCurrentMonth, dayComponent);
	        }

	        return React.createElement(DayWrapper, {
	          value: day,
	          key: day.toString(),
	          disabled: disabled,
	          dayInCurrentMonth: isDayInCurrentMonth,
	          onSelect: _this.handleDaySelect
	        }, dayComponent);
	      });
	    };

	    return _this;
	  }

	  _createClass$1$1(Calendar, [{
	    key: "componentDidMount",
	    value: function componentDidMount() {
	      var _this$props8 = this.props,
	          date = _this$props8.date,
	          minDate = _this$props8.minDate,
	          maxDate = _this$props8.maxDate,
	          utils = _this$props8.utils,
	          disablePast = _this$props8.disablePast,
	          disableFuture = _this$props8.disableFuture;

	      if (this.shouldDisableDate(date)) {
	        var closestEnabledDate = findClosestEnabledDate({
	          date: date,
	          utils: utils,
	          minDate: utils.date(minDate),
	          maxDate: utils.date(maxDate),
	          disablePast: Boolean(disablePast),
	          disableFuture: Boolean(disableFuture),
	          shouldDisableDate: this.shouldDisableDate
	        });
	        this.handleDaySelect(closestEnabledDate, false);
	      }
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$state = this.state,
	          currentMonth = _this$state.currentMonth,
	          slideDirection = _this$state.slideDirection;
	      var _this$props9 = this.props,
	          classes = _this$props9.classes,
	          allowKeyboardControl = _this$props9.allowKeyboardControl,
	          leftArrowButtonProps = _this$props9.leftArrowButtonProps,
	          leftArrowIcon = _this$props9.leftArrowIcon,
	          rightArrowButtonProps = _this$props9.rightArrowButtonProps,
	          rightArrowIcon = _this$props9.rightArrowIcon,
	          loadingIndicator = _this$props9.loadingIndicator;
	      var loadingElement = loadingIndicator ? loadingIndicator : React.createElement(CircularProgress$1, null);
	      return React.createElement(React.Fragment, null, allowKeyboardControl && this.context !== 'static' && React.createElement(KeyDownListener, {
	        onKeyDown: this.handleKeyDown
	      }), React.createElement(CalendarHeader, {
	        currentMonth: currentMonth,
	        slideDirection: slideDirection,
	        onMonthChange: this.handleChangeMonth,
	        leftArrowIcon: leftArrowIcon,
	        leftArrowButtonProps: leftArrowButtonProps,
	        rightArrowIcon: rightArrowIcon,
	        rightArrowButtonProps: rightArrowButtonProps,
	        disablePrevMonth: this.shouldDisablePrevMonth(),
	        disableNextMonth: this.shouldDisableNextMonth()
	      }), React.createElement(SlideTransition, {
	        slideDirection: slideDirection,
	        transKey: currentMonth.toString(),
	        className: classes.transitionContainer
	      }, React.createElement(React.Fragment, null, this.state.loadingQueue > 0 && React.createElement("div", {
	        className: classes.progressContainer
	      }, loadingElement) || React.createElement("div", null, this.renderWeeks()))));
	    }
	  }], [{
	    key: "getDerivedStateFromProps",
	    value: function getDerivedStateFromProps(nextProps, state) {
	      var utils = nextProps.utils,
	          nextDate = nextProps.date;

	      if (!utils.isEqual(nextDate, state.lastDate)) {
	        var nextMonth = utils.getMonth(nextDate);
	        var lastDate = state.lastDate || nextDate;
	        var lastMonth = utils.getMonth(lastDate);
	        return {
	          lastDate: nextDate,
	          currentMonth: nextProps.utils.startOfMonth(nextDate),
	          // prettier-ignore
	          slideDirection: nextMonth === lastMonth ? state.slideDirection : utils.isAfterDay(nextDate, lastDate) ? 'left' : 'right'
	        };
	      }

	      return null;
	    }
	  }]);

	  return Calendar;
	}(React.Component);
	Calendar.contextType = VariantContext;
	process.env.NODE_ENV !== "production" ? Calendar.propTypes = {
	  renderDay: propTypes_3,
	  shouldDisableDate: propTypes_3,
	  allowKeyboardControl: propTypes_2
	} : void 0;
	Calendar.defaultProps = {
	  minDate: new Date('1900-01-01'),
	  maxDate: new Date('2100-01-01'),
	  disablePast: false,
	  disableFuture: false,
	  allowKeyboardControl: true
	};
	var styles$4$1 = function styles(theme) {
	  return {
	    transitionContainer: {
	      minHeight: 36 * 6,
	      marginTop: theme.spacing(1.5)
	    },
	    progressContainer: {
	      width: '100%',
	      height: '100%',
	      display: 'flex',
	      justifyContent: 'center',
	      alignItems: 'center'
	    },
	    week: {
	      display: 'flex',
	      justifyContent: 'center'
	    }
	  };
	};
	var Calendar$1 = withStyles$1(styles$4$1, {
	  name: 'MuiPickersCalendar',
	  withTheme: true
	})(withUtils()(Calendar));

	var ClockType;

	(function (ClockType) {
	  ClockType["HOURS"] = "hours";
	  ClockType["MINUTES"] = "minutes";
	  ClockType["SECONDS"] = "seconds";
	})(ClockType || (ClockType = {}));

	var ClockType$1 = ClockType;

	var ClockPointer =
	/*#__PURE__*/
	function (_React$Component) {
	  _inherits$1$1(ClockPointer, _React$Component);

	  function ClockPointer() {
	    var _getPrototypeOf2;

	    var _this;

	    _classCallCheck$1$1(this, ClockPointer);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _possibleConstructorReturn$1$1(this, (_getPrototypeOf2 = _getPrototypeOf$1$1(ClockPointer)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    _this.state = {
	      toAnimateTransform: false,
	      previousType: undefined
	    };

	    _this.getAngleStyle = function () {
	      var _this$props = _this.props,
	          value = _this$props.value,
	          isInner = _this$props.isInner,
	          type = _this$props.type;
	      var max = type === ClockType$1.HOURS ? 12 : 60;
	      var angle = 360 / max * value;

	      if (type === ClockType$1.HOURS && value > 12) {
	        angle -= 360; // round up angle to max 360 degrees
	      }

	      return {
	        height: isInner ? '26%' : '40%',
	        transform: "rotateZ(".concat(angle, "deg)")
	      };
	    };

	    return _this;
	  }

	  _createClass$1$1(ClockPointer, [{
	    key: "render",
	    value: function render() {
	      var _this$props2 = this.props,
	          classes = _this$props2.classes,
	          hasSelected = _this$props2.hasSelected;
	      return React.createElement("div", {
	        style: this.getAngleStyle(),
	        className: clsx$1(classes.pointer, this.state.toAnimateTransform && classes.animateTransform)
	      }, React.createElement("div", {
	        className: clsx$1(classes.thumb, hasSelected && classes.noPoint)
	      }));
	    }
	  }]);

	  return ClockPointer;
	}(React.Component);

	ClockPointer.getDerivedStateFromProps = function (nextProps, state) {
	  if (nextProps.type !== state.previousType) {
	    return {
	      toAnimateTransform: true,
	      previousType: nextProps.type
	    };
	  }

	  return {
	    toAnimateTransform: false,
	    previousType: nextProps.type
	  };
	};

	var styles$5$1 = function styles(theme) {
	  return createStyles$1({
	    pointer: {
	      width: 2,
	      backgroundColor: theme.palette.primary.main,
	      position: 'absolute',
	      left: 'calc(50% - 1px)',
	      bottom: '50%',
	      transformOrigin: 'center bottom 0px'
	    },
	    animateTransform: {
	      transition: theme.transitions.create(['transform', 'height'])
	    },
	    thumb: {
	      width: 4,
	      height: 4,
	      backgroundColor: theme.palette.primary.contrastText,
	      borderRadius: '100%',
	      position: 'absolute',
	      top: -21,
	      left: -15,
	      border: "14px solid ".concat(theme.palette.primary.main),
	      boxSizing: 'content-box'
	    },
	    noPoint: {
	      backgroundColor: theme.palette.primary.main
	    }
	  });
	};
	var ClockPointer$1 = withStyles$1(styles$5$1, {
	  name: 'MuiPickersClockPointer'
	})(ClockPointer);

	var center = {
	  x: 260 / 2,
	  y: 260 / 2
	};
	var basePoint = {
	  x: center.x,
	  y: 0
	};
	var cx = basePoint.x - center.x;
	var cy = basePoint.y - center.y;

	var rad2deg = function rad2deg(rad) {
	  return rad * 57.29577951308232;
	};

	var getAngleValue = function getAngleValue(step, offsetX, offsetY) {
	  var x = offsetX - center.x;
	  var y = offsetY - center.y;
	  var atan = Math.atan2(cx, cy) - Math.atan2(x, y);
	  var deg = rad2deg(atan);
	  deg = Math.round(deg / step) * step;
	  deg %= 360;
	  var value = Math.floor(deg / step) || 0;
	  var delta = Math.pow(x, 2) + Math.pow(y, 2);
	  var distance = Math.sqrt(delta);
	  return {
	    value: value,
	    distance: distance
	  };
	};

	var getHours = function getHours(offsetX, offsetY, ampm) {
	  var _getAngleValue = getAngleValue(30, offsetX, offsetY),
	      value = _getAngleValue.value,
	      distance = _getAngleValue.distance;

	  value = value || 12;

	  if (!ampm) {
	    if (distance < 90) {
	      value += 12;
	      value %= 24;
	    }
	  } else {
	    value %= 12;
	  }

	  return value;
	};
	var getMinutes = function getMinutes(offsetX, offsetY) {
	  var step = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
	  var angleStep = step * 6;

	  var _getAngleValue2 = getAngleValue(angleStep, offsetX, offsetY),
	      value = _getAngleValue2.value;

	  value = value * step % 60;
	  return value;
	};
	var getMeridiem = function getMeridiem(date, utils) {
	  return utils.getHours(date) >= 12 ? 'pm' : 'am';
	};
	var convertToMeridiem = function convertToMeridiem(time, meridiem, ampm, utils) {
	  if (ampm) {
	    var currentMeridiem = utils.getHours(time) >= 12 ? 'pm' : 'am';

	    if (currentMeridiem !== meridiem) {
	      var hours = meridiem === 'am' ? utils.getHours(time) - 12 : utils.getHours(time) + 12;
	      return utils.setHours(time, hours);
	    }
	  }

	  return time;
	};

	var Clock =
	/*#__PURE__*/
	function (_React$Component) {
	  _inherits$1$1(Clock, _React$Component);

	  function Clock() {
	    var _getPrototypeOf2;

	    var _this;

	    _classCallCheck$1$1(this, Clock);

	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _this = _possibleConstructorReturn$1$1(this, (_getPrototypeOf2 = _getPrototypeOf$1$1(Clock)).call.apply(_getPrototypeOf2, [this].concat(args)));
	    _this.isMoving = false;

	    _this.handleTouchMove = function (e) {
	      _this.isMoving = true;

	      _this.setTime(e);
	    };

	    _this.handleTouchEnd = function (e) {
	      if (_this.isMoving) {
	        _this.setTime(e, true);

	        _this.isMoving = false;
	      }
	    };

	    _this.handleMove = function (e) {
	      e.preventDefault();
	      e.stopPropagation(); // MouseEvent.which is deprecated, but MouseEvent.buttons is not supported in Safari

	      var isButtonPressed = typeof e.buttons === 'undefined' ? e.nativeEvent.which === 1 : e.buttons === 1;

	      if (isButtonPressed) {
	        _this.setTime(e.nativeEvent, false);
	      }
	    };

	    _this.handleMouseUp = function (e) {
	      if (_this.isMoving) {
	        _this.isMoving = false;
	      }

	      _this.setTime(e.nativeEvent, true);
	    };

	    _this.hasSelected = function () {
	      var _this$props = _this.props,
	          type = _this$props.type,
	          value = _this$props.value;

	      if (type === ClockType$1.HOURS) {
	        return true;
	      }

	      return value % 5 === 0;
	    };

	    return _this;
	  }

	  _createClass$1$1(Clock, [{
	    key: "setTime",
	    value: function setTime(e) {
	      var isFinish = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	      var offsetX = e.offsetX,
	          offsetY = e.offsetY;

	      if (typeof offsetX === 'undefined') {
	        var rect = e.target.getBoundingClientRect();
	        offsetX = e.changedTouches[0].clientX - rect.left;
	        offsetY = e.changedTouches[0].clientY - rect.top;
	      }

	      var value = this.props.type === ClockType$1.SECONDS || this.props.type === ClockType$1.MINUTES ? getMinutes(offsetX, offsetY, this.props.minutesStep) : getHours(offsetX, offsetY, Boolean(this.props.ampm));
	      this.props.onChange(value, isFinish);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props2 = this.props,
	          classes = _this$props2.classes,
	          value = _this$props2.value,
	          children = _this$props2.children,
	          type = _this$props2.type,
	          ampm = _this$props2.ampm;
	      var isPointerInner = !ampm && type === ClockType$1.HOURS && (value < 1 || value > 12);
	      return React.createElement("div", {
	        className: classes.container
	      }, React.createElement("div", {
	        className: classes.clock
	      }, React.createElement("div", {
	        role: "menu",
	        tabIndex: -1,
	        className: classes.squareMask,
	        onTouchMove: this.handleTouchMove,
	        onTouchEnd: this.handleTouchEnd,
	        onMouseUp: this.handleMouseUp,
	        onMouseMove: this.handleMove
	      }), React.createElement("div", {
	        className: classes.pin
	      }), React.createElement(ClockPointer$1, {
	        type: type,
	        value: value,
	        isInner: isPointerInner,
	        hasSelected: this.hasSelected()
	      }), children));
	    }
	  }]);

	  return Clock;
	}(React.Component);
	process.env.NODE_ENV !== "production" ? Clock.propTypes = {
	  type: propTypes_15(Object.keys(ClockType$1).map(function (key) {
	    return ClockType$1[key];
	  })).isRequired,
	  value: propTypes_4.isRequired,
	  onChange: propTypes_3.isRequired,
	  children: propTypes_9(propTypes_13).isRequired,
	  ampm: propTypes_2,
	  minutesStep: propTypes_4,
	  innerRef: propTypes_8
	} : void 0;
	Clock.defaultProps = {
	  ampm: false,
	  minutesStep: 1
	};
	var styles$1$1$1 = function styles(theme) {
	  return createStyles$1({
	    container: {
	      display: 'flex',
	      justifyContent: 'center',
	      alignItems: 'flex-end',
	      margin: "".concat(theme.spacing(2), "px 0 ").concat(theme.spacing(1), "px")
	    },
	    clock: {
	      backgroundColor: 'rgba(0,0,0,.07)',
	      borderRadius: '50%',
	      height: 260,
	      width: 260,
	      position: 'relative',
	      pointerEvents: 'none'
	    },
	    squareMask: {
	      width: '100%',
	      height: '100%',
	      position: 'absolute',
	      pointerEvents: 'auto',
	      outline: 'none',
	      touchActions: 'none',
	      userSelect: 'none',
	      '&:active': {
	        cursor: 'move'
	      }
	    },
	    pin: {
	      width: 6,
	      height: 6,
	      borderRadius: '50%',
	      backgroundColor: theme.palette.primary.main,
	      position: 'absolute',
	      top: '50%',
	      left: '50%',
	      transform: 'translate(-50%, -50%)'
	    }
	  });
	};
	var Clock$1 = withStyles$1(styles$1$1$1, {
	  name: 'MuiPickersClock'
	})(Clock);

	var positions$1 = {
	  0: [0, 40],
	  1: [55, 19.6],
	  2: [94.4, 59.5],
	  3: [109, 114],
	  4: [94.4, 168.5],
	  5: [54.5, 208.4],
	  6: [0, 223],
	  7: [-54.5, 208.4],
	  8: [-94.4, 168.5],
	  9: [-109, 114],
	  10: [-94.4, 59.5],
	  11: [-54.5, 19.6],
	  12: [0, 5],
	  13: [36.9, 49.9],
	  14: [64, 77],
	  15: [74, 114],
	  16: [64, 151],
	  17: [37, 178],
	  18: [0, 188],
	  19: [-37, 178],
	  20: [-64, 151],
	  21: [-74, 114],
	  22: [-64, 77],
	  23: [-37, 50]
	};
	var useStyles$3 = makeStyles$1(function (theme) {
	  var size = theme.spacing(4);
	  return {
	    clockNumber: {
	      width: size,
	      height: 32,
	      userSelect: 'none',
	      position: 'absolute',
	      left: "calc((100% - ".concat(typeof size === 'number' ? "".concat(size, "px") : size, ") / 2)"),
	      display: 'inline-flex',
	      justifyContent: 'center',
	      alignItems: 'center',
	      borderRadius: '50%',
	      color: theme.palette.type === 'light' ? theme.palette.text.primary : theme.palette.text.hint
	    },
	    clockNumberSelected: {
	      color: theme.palette.primary.contrastText
	    }
	  };
	}, {
	  name: 'MuiPickersClockNumber'
	});
	var ClockNumber = function ClockNumber(_ref) {
	  var selected = _ref.selected,
	      label = _ref.label,
	      index = _ref.index,
	      isInner = _ref.isInner;
	  var classes = useStyles$3();
	  var className = clsx$1(classes.clockNumber, selected && classes.clockNumberSelected);
	  var transformStyle = React.useMemo(function () {
	    var position = positions$1[index];
	    return {
	      transform: "translate(".concat(position[0], "px, ").concat(position[1], "px")
	    };
	  }, [index]);
	  return React.createElement(Typography$1, {
	    component: "span",
	    className: className,
	    variant: isInner ? 'body2' : 'body1',
	    style: transformStyle,
	    children: label
	  });
	};

	var getHourNumbers = function getHourNumbers(_ref) {
	  var ampm = _ref.ampm,
	      utils = _ref.utils,
	      date = _ref.date;
	  var currentHours = utils.getHours(date);
	  var hourNumbers = [];
	  var startHour = ampm ? 1 : 0;
	  var endHour = ampm ? 12 : 23;

	  var isSelected = function isSelected(hour) {
	    if (ampm) {
	      if (hour === 12) {
	        return currentHours === 12 || currentHours === 0;
	      }

	      return currentHours === hour || currentHours - 12 === hour;
	    }

	    return currentHours === hour;
	  };

	  for (var hour = startHour; hour <= endHour; hour += 1) {
	    var label = hour.toString();

	    if (hour === 0) {
	      label = '00';
	    }

	    var props = {
	      index: hour,
	      label: utils.formatNumber(label),
	      selected: isSelected(hour),
	      isInner: !ampm && (hour === 0 || hour > 12)
	    };
	    hourNumbers.push(React.createElement(ClockNumber, _extends$1$1({
	      key: hour
	    }, props)));
	  }

	  return hourNumbers;
	};
	var getMinutesNumbers = function getMinutesNumbers(_ref2) {
	  var value = _ref2.value,
	      utils = _ref2.utils;
	  var f = utils.formatNumber;
	  return [React.createElement(ClockNumber, {
	    label: f('00'),
	    selected: value === 0,
	    index: 12,
	    key: 12
	  }), React.createElement(ClockNumber, {
	    label: f('05'),
	    selected: value === 5,
	    index: 1,
	    key: 1
	  }), React.createElement(ClockNumber, {
	    label: f('10'),
	    selected: value === 10,
	    index: 2,
	    key: 2
	  }), React.createElement(ClockNumber, {
	    label: f('15'),
	    selected: value === 15,
	    index: 3,
	    key: 3
	  }), React.createElement(ClockNumber, {
	    label: f('20'),
	    selected: value === 20,
	    index: 4,
	    key: 4
	  }), React.createElement(ClockNumber, {
	    label: f('25'),
	    selected: value === 25,
	    index: 5,
	    key: 5
	  }), React.createElement(ClockNumber, {
	    label: f('30'),
	    selected: value === 30,
	    index: 6,
	    key: 6
	  }), React.createElement(ClockNumber, {
	    label: f('35'),
	    selected: value === 35,
	    index: 7,
	    key: 7
	  }), React.createElement(ClockNumber, {
	    label: f('40'),
	    selected: value === 40,
	    index: 8,
	    key: 8
	  }), React.createElement(ClockNumber, {
	    label: f('45'),
	    selected: value === 45,
	    index: 9,
	    key: 9
	  }), React.createElement(ClockNumber, {
	    label: f('50'),
	    selected: value === 50,
	    index: 10,
	    key: 10
	  }), React.createElement(ClockNumber, {
	    label: f('55'),
	    selected: value === 55,
	    index: 11,
	    key: 11
	  })];
	};

	var ClockView = function ClockView(_ref) {
	  var type = _ref.type,
	      onHourChange = _ref.onHourChange,
	      onMinutesChange = _ref.onMinutesChange,
	      onSecondsChange = _ref.onSecondsChange,
	      ampm = _ref.ampm,
	      date = _ref.date,
	      minutesStep = _ref.minutesStep;
	  var utils = useUtils();
	  var viewProps = React.useMemo(function () {
	    switch (type) {
	      case ClockType$1.HOURS:
	        return {
	          value: utils.getHours(date),
	          children: getHourNumbers({
	            date: date,
	            utils: utils,
	            ampm: Boolean(ampm)
	          }),
	          onChange: function onChange(value, isFinish) {
	            var currentMeridiem = getMeridiem(date, utils);
	            var updatedTimeWithMeridiem = convertToMeridiem(utils.setHours(date, value), currentMeridiem, Boolean(ampm), utils);
	            onHourChange(updatedTimeWithMeridiem, isFinish);
	          }
	        };

	      case ClockType$1.MINUTES:
	        var minutesValue = utils.getMinutes(date);
	        return {
	          value: minutesValue,
	          children: getMinutesNumbers({
	            value: minutesValue,
	            utils: utils
	          }),
	          onChange: function onChange(value, isFinish) {
	            var updatedTime = utils.setMinutes(date, value);
	            onMinutesChange(updatedTime, isFinish);
	          }
	        };

	      case ClockType$1.SECONDS:
	        var secondsValue = utils.getSeconds(date);
	        return {
	          value: secondsValue,
	          children: getMinutesNumbers({
	            value: secondsValue,
	            utils: utils
	          }),
	          onChange: function onChange(value, isFinish) {
	            var updatedTime = utils.setSeconds(date, value);
	            onSecondsChange(updatedTime, isFinish);
	          }
	        };

	      default:
	        throw new Error('You must provide the type for TimePickerView');
	    }
	  }, [ampm, date, onHourChange, onMinutesChange, onSecondsChange, type, utils]);
	  return React.createElement(Clock$1, _extends$1$1({
	    type: type,
	    ampm: ampm,
	    minutesStep: minutesStep
	  }, viewProps));
	};
	ClockView.displayName = 'TimePickerView';
	process.env.NODE_ENV !== "production" ? ClockView.propTypes = {
	  date: propTypes_5.isRequired,
	  onHourChange: propTypes_3.isRequired,
	  onMinutesChange: propTypes_3.isRequired,
	  onSecondsChange: propTypes_3.isRequired,
	  ampm: propTypes_2,
	  minutesStep: propTypes_4,
	  type: propTypes_15(Object.keys(ClockType$1).map(function (key) {
	    return ClockType$1[key];
	  })).isRequired
	} : void 0;
	ClockView.defaultProps = {
	  ampm: true,
	  minutesStep: 1
	};
	var ClockView$1 = React.memo(ClockView);

	function ownKeys$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1(source, true).forEach(function (key) { _defineProperty$1$1(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
	var date = propTypes_16([propTypes_5, propTypes_6, propTypes_4, propTypes_12(Date)]);
	var datePickerView = propTypes_15(['year', 'month', 'day']);
	/* eslint-disable @typescript-eslint/no-object-literal-type-assertion */

	var timePickerDefaultProps = {
	  ampm: true,
	  invalidDateMessage: 'Invalid Time Format'
	};
	var datePickerDefaultProps = {
	  minDate: new Date('1900-01-01'),
	  maxDate: new Date('2100-01-01'),
	  invalidDateMessage: 'Invalid Date Format',
	  minDateMessage: 'Date should not be before minimal date',
	  maxDateMessage: 'Date should not be after maximal date',
	  allowKeyboardControl: true
	};
	var dateTimePickerDefaultProps = _objectSpread({}, timePickerDefaultProps, {}, datePickerDefaultProps, {
	  showTabs: true
	});

	function useViews(views, openTo, onChange) {
	  var _React$useState = React.useState(openTo && arrayIncludes(views, openTo) ? openTo : views[0]),
	      _React$useState2 = _slicedToArray$1$1(_React$useState, 2),
	      openView = _React$useState2[0],
	      setOpenView = _React$useState2[1];

	  var handleChangeAndOpenNext = React.useCallback(function (date, isFinish) {
	    var nextViewToOpen = views[views.indexOf(openView) + 1];

	    if (isFinish && nextViewToOpen) {
	      // do not close picker if needs to show next view
	      onChange(date, false);
	      setOpenView(nextViewToOpen);
	      return;
	    }

	    onChange(date, Boolean(isFinish));
	  }, [onChange, openView, views]);
	  return {
	    handleChangeAndOpenNext: handleChangeAndOpenNext,
	    openView: openView,
	    setOpenView: setOpenView
	  };
	}

	var useStyles$4 = makeStyles$1(function (theme) {
	  return {
	    root: {
	      height: 40,
	      display: 'flex',
	      alignItems: 'center',
	      justifyContent: 'center',
	      cursor: 'pointer',
	      outline: 'none',
	      '&:focus': {
	        color: theme.palette.primary.main,
	        fontWeight: theme.typography.fontWeightMedium
	      }
	    },
	    yearSelected: {
	      margin: '10px 0',
	      fontWeight: theme.typography.fontWeightMedium
	    },
	    yearDisabled: {
	      pointerEvents: 'none',
	      color: theme.palette.text.hint
	    }
	  };
	}, {
	  name: 'MuiPickersYear'
	});
	var Year = function Year(_ref) {
	  var onSelect = _ref.onSelect,
	      forwardedRef = _ref.forwardedRef,
	      value = _ref.value,
	      selected = _ref.selected,
	      disabled = _ref.disabled,
	      children = _ref.children,
	      other = _objectWithoutProperties$1$1(_ref, ["onSelect", "forwardedRef", "value", "selected", "disabled", "children"]);

	  var classes = useStyles$4();
	  var handleClick = React.useCallback(function () {
	    return onSelect(value);
	  }, [onSelect, value]);
	  return React.createElement(Typography$1, _extends$1$1({
	    role: "button",
	    component: "div",
	    tabIndex: disabled ? -1 : 0,
	    onClick: handleClick,
	    onKeyPress: handleClick,
	    color: selected ? 'primary' : undefined,
	    variant: selected ? 'h5' : 'subtitle1',
	    children: children,
	    ref: forwardedRef,
	    className: clsx$1(classes.root, selected && classes.yearSelected, disabled && classes.yearDisabled)
	  }, other));
	};
	Year.displayName = 'Year';
	var Year$1 = React.forwardRef(function (props, ref) {
	  return React.createElement(Year, _extends$1$1({}, props, {
	    forwardedRef: ref
	  }));
	});

	var useStyles$1$2 = makeStyles$1({
	  container: {
	    height: 300,
	    overflowY: 'auto'
	  }
	}, {
	  name: 'MuiPickersYearSelection'
	});
	var YearSelection = function YearSelection(_ref) {
	  var date = _ref.date,
	      onChange = _ref.onChange,
	      onYearChange = _ref.onYearChange,
	      minDate = _ref.minDate,
	      maxDate = _ref.maxDate,
	      disablePast = _ref.disablePast,
	      disableFuture = _ref.disableFuture,
	      animateYearScrolling = _ref.animateYearScrolling;
	  var utils = useUtils();
	  var classes = useStyles$1$2();
	  var currentVariant = React.useContext(VariantContext);
	  var selectedYearRef = React.useRef(null);
	  React.useEffect(function () {
	    if (selectedYearRef.current && selectedYearRef.current.scrollIntoView) {
	      try {
	        selectedYearRef.current.scrollIntoView({
	          block: currentVariant === 'static' ? 'nearest' : 'center',
	          behavior: animateYearScrolling ? 'smooth' : 'auto'
	        });
	      } catch (e) {
	        // call without arguments in case when scrollIntoView works improperly (e.g. Firefox 52-57)
	        selectedYearRef.current.scrollIntoView();
	      }
	    }
	  }, []); // eslint-disable-line

	  var currentYear = utils.getYear(date);
	  var onYearSelect = React.useCallback(function (year) {
	    var newDate = utils.setYear(date, year);

	    if (onYearChange) {
	      onYearChange(newDate);
	    }

	    onChange(newDate, true);
	  }, [date, onChange, onYearChange, utils]);
	  return React.createElement("div", {
	    className: classes.container
	  }, utils.getYearRange(minDate, maxDate).map(function (year) {
	    var yearNumber = utils.getYear(year);
	    var selected = yearNumber === currentYear;
	    return React.createElement(Year$1, {
	      key: utils.getYearText(year),
	      selected: selected,
	      value: yearNumber,
	      onSelect: onYearSelect,
	      ref: selected ? selectedYearRef : undefined,
	      disabled: Boolean(disablePast && utils.isBeforeYear(year, utils.date()) || disableFuture && utils.isAfterYear(year, utils.date()))
	    }, utils.getYearText(year));
	  }));
	};

	var useStyles$2$1 = makeStyles$1(function (theme) {
	  return {
	    root: {
	      flex: '1 0 33.33%',
	      display: 'flex',
	      alignItems: 'center',
	      justifyContent: 'center',
	      cursor: 'pointer',
	      outline: 'none',
	      height: 75,
	      transition: theme.transitions.create('font-size', {
	        duration: '100ms'
	      }),
	      '&:focus': {
	        color: theme.palette.primary.main,
	        fontWeight: theme.typography.fontWeightMedium
	      }
	    },
	    monthSelected: {
	      color: theme.palette.primary.main,
	      fontWeight: theme.typography.fontWeightMedium
	    },
	    monthDisabled: {
	      pointerEvents: 'none',
	      color: theme.palette.text.hint
	    }
	  };
	}, {
	  name: 'MuiPickersMonth'
	});
	var Month = function Month(_ref) {
	  var selected = _ref.selected,
	      onSelect = _ref.onSelect,
	      disabled = _ref.disabled,
	      value = _ref.value,
	      children = _ref.children,
	      other = _objectWithoutProperties$1$1(_ref, ["selected", "onSelect", "disabled", "value", "children"]);

	  var classes = useStyles$2$1();
	  var handleSelection = React.useCallback(function () {
	    onSelect(value);
	  }, [onSelect, value]);
	  return React.createElement(Typography$1, _extends$1$1({
	    role: "button",
	    component: "div",
	    className: clsx$1(classes.root, selected && classes.monthSelected, disabled && classes.monthDisabled),
	    tabIndex: disabled ? -1 : 0,
	    onClick: handleSelection,
	    onKeyPress: handleSelection,
	    color: selected ? 'primary' : undefined,
	    variant: selected ? 'h5' : 'subtitle1',
	    children: children
	  }, other));
	};
	Month.displayName = 'Month';

	var useStyles$3$1 = makeStyles$1({
	  container: {
	    width: 310,
	    display: 'flex',
	    flexWrap: 'wrap',
	    alignContent: 'stretch'
	  }
	}, {
	  name: 'MuiPickersMonthSelection'
	});
	var MonthSelection = function MonthSelection(_ref) {
	  var disablePast = _ref.disablePast,
	      disableFuture = _ref.disableFuture,
	      minDate = _ref.minDate,
	      maxDate = _ref.maxDate,
	      date = _ref.date,
	      onMonthChange = _ref.onMonthChange,
	      onChange = _ref.onChange;
	  var utils = useUtils();
	  var classes = useStyles$3$1();
	  var currentMonth = utils.getMonth(date);

	  var shouldDisableMonth = function shouldDisableMonth(month) {
	    var now = utils.date();
	    var utilMinDate = utils.date(minDate);
	    var utilMaxDate = utils.date(maxDate);
	    var firstEnabledMonth = utils.startOfMonth(disablePast && utils.isAfter(now, utilMinDate) ? now : utilMinDate);
	    var lastEnabledMonth = utils.startOfMonth(disableFuture && utils.isBefore(now, utilMaxDate) ? now : utilMaxDate);
	    var isBeforeFirstEnabled = utils.isBefore(month, firstEnabledMonth);
	    var isAfterLastEnabled = utils.isAfter(month, lastEnabledMonth);
	    return isBeforeFirstEnabled || isAfterLastEnabled;
	  };

	  var onMonthSelect = React.useCallback(function (month) {
	    var newDate = utils.setMonth(date, month);
	    onChange(newDate, true);

	    if (onMonthChange) {
	      onMonthChange(newDate);
	    }
	  }, [date, onChange, onMonthChange, utils]);
	  return React.createElement("div", {
	    className: classes.container
	  }, utils.getMonthArray(date).map(function (month) {
	    var monthNumber = utils.getMonth(month);
	    var monthText = utils.format(month, 'MMM');
	    return React.createElement(Month, {
	      key: monthText,
	      value: monthNumber,
	      selected: monthNumber === currentMonth,
	      onSelect: onMonthSelect,
	      disabled: shouldDisableMonth(month)
	    }, monthText);
	  }));
	};

	var getOrientation = function getOrientation() {
	  if (typeof window === 'undefined') {
	    return 'portrait';
	  }

	  if (window.screen && window.screen.orientation && window.screen.orientation.angle) {
	    return Math.abs(window.screen.orientation.angle) === 90 ? 'landscape' : 'portrait';
	  } // Support IOS safari


	  if (window.orientation) {
	    return Math.abs(Number(window.orientation)) === 90 ? 'landscape' : 'portrait';
	  }

	  return 'portrait';
	};

	function useIsLandscape(customOrientation) {
	  var _React$useState = React.useState(getOrientation()),
	      _React$useState2 = _slicedToArray$1$1(_React$useState, 2),
	      orientation = _React$useState2[0],
	      setOrientation = _React$useState2[1];

	  var eventHandler = React.useCallback(function () {
	    return setOrientation(getOrientation());
	  }, []);
	  useIsomorphicEffect(function () {
	    window.addEventListener('orientationchange', eventHandler);
	    return function () {
	      return window.removeEventListener('orientationchange', eventHandler);
	    };
	  }, [eventHandler]);
	  var orientationToUse = customOrientation || orientation;
	  return orientationToUse === 'landscape';
	}

	function ownKeys$1$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1$1(source, true).forEach(function (key) { _defineProperty$1$1(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1$1(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
	var viewsMap = {
	  year: YearSelection,
	  month: MonthSelection,
	  date: Calendar$1,
	  hours: ClockView,
	  minutes: ClockView,
	  seconds: ClockView
	};
	var useStyles$4$1 = makeStyles$1({
	  container: {
	    display: 'flex',
	    flexDirection: 'column'
	  },
	  containerLandscape: {
	    flexDirection: 'row'
	  },
	  pickerView: {
	    overflowX: 'hidden',
	    minHeight: VIEW_HEIGHT,
	    minWidth: DIALOG_WIDTH,
	    maxWidth: DIALOG_WIDTH_WIDER,
	    display: 'flex',
	    flexDirection: 'column',
	    justifyContent: 'center'
	  },
	  pickerViewLandscape: {
	    padding: '0 8px'
	  }
	}, {
	  name: 'MuiPickersBasePicker'
	});
	var Picker = function Picker(_ref) {
	  var date = _ref.date,
	      views = _ref.views,
	      disableToolbar = _ref.disableToolbar,
	      onChange = _ref.onChange,
	      openTo = _ref.openTo,
	      unparsedMinDate = _ref.minDate,
	      unparsedMaxDate = _ref.maxDate,
	      ToolbarComponent = _ref.ToolbarComponent,
	      orientation = _ref.orientation,
	      rest = _objectWithoutProperties$1$1(_ref, ["date", "views", "disableToolbar", "onChange", "openTo", "minDate", "maxDate", "ToolbarComponent", "orientation"]);

	  var utils = useUtils();
	  var classes = useStyles$4$1();
	  var isLandscape = useIsLandscape(orientation);

	  var _useViews = useViews(views, openTo, onChange),
	      openView = _useViews.openView,
	      setOpenView = _useViews.setOpenView,
	      handleChangeAndOpenNext = _useViews.handleChangeAndOpenNext;

	  var minDate = React.useMemo(function () {
	    return utils.date(unparsedMinDate);
	  }, [unparsedMinDate, utils]);
	  var maxDate = React.useMemo(function () {
	    return utils.date(unparsedMaxDate);
	  }, [unparsedMaxDate, utils]);
	  return React.createElement("div", {
	    className: clsx$1(classes.container, isLandscape && classes.containerLandscape)
	  }, !disableToolbar && React.createElement(ToolbarComponent, _extends$1$1({}, rest, {
	    views: views,
	    isLandscape: isLandscape,
	    date: date,
	    onChange: onChange,
	    setOpenView: setOpenView,
	    openView: openView
	  })), React.createElement("div", {
	    className: clsx$1(classes.pickerView, isLandscape && classes.pickerViewLandscape)
	  }, openView === 'year' && React.createElement(YearSelection, _extends$1$1({}, rest, {
	    date: date,
	    onChange: handleChangeAndOpenNext,
	    minDate: minDate,
	    maxDate: maxDate
	  })), openView === 'month' && React.createElement(MonthSelection, _extends$1$1({}, rest, {
	    date: date,
	    onChange: handleChangeAndOpenNext,
	    minDate: minDate,
	    maxDate: maxDate
	  })), openView === 'date' && React.createElement(Calendar$1, _extends$1$1({}, rest, {
	    date: date,
	    onChange: handleChangeAndOpenNext,
	    minDate: minDate,
	    maxDate: maxDate
	  })), (openView === 'hours' || openView === 'minutes' || openView === 'seconds') && React.createElement(ClockView, _extends$1$1({}, rest, {
	    date: date,
	    type: openView,
	    onHourChange: handleChangeAndOpenNext,
	    onMinutesChange: handleChangeAndOpenNext,
	    onSecondsChange: handleChangeAndOpenNext
	  }))));
	};
	Picker.defaultProps = _objectSpread$1({}, datePickerDefaultProps, {
	  views: Object.keys(viewsMap)
	});

	var useStyles$5 = makeStyles$1(function (theme) {
	  var textColor = theme.palette.type === 'light' ? theme.palette.primary.contrastText : theme.palette.getContrastText(theme.palette.background["default"]);
	  return {
	    toolbarTxt: {
	      color: fade(textColor, 0.54)
	    },
	    toolbarBtnSelected: {
	      color: textColor
	    }
	  };
	}, {
	  name: 'MuiPickersToolbarText'
	});

	var ToolbarText = function ToolbarText(_ref) {
	  var selected = _ref.selected,
	      label = _ref.label,
	      _ref$className = _ref.className,
	      className = _ref$className === void 0 ? null : _ref$className,
	      other = _objectWithoutProperties$1$1(_ref, ["selected", "label", "className"]);

	  var classes = useStyles$5();
	  return React.createElement(Typography$1, _extends$1$1({
	    children: label,
	    className: clsx$1(classes.toolbarTxt, className, selected && classes.toolbarBtnSelected)
	  }, other));
	};

	var ToolbarButton = function ToolbarButton(_ref) {
	  var classes = _ref.classes,
	      _ref$className = _ref.className,
	      className = _ref$className === void 0 ? null : _ref$className,
	      label = _ref.label,
	      selected = _ref.selected,
	      variant = _ref.variant,
	      align = _ref.align,
	      typographyClassName = _ref.typographyClassName,
	      other = _objectWithoutProperties$1$1(_ref, ["classes", "className", "label", "selected", "variant", "align", "typographyClassName"]);

	  return React.createElement(Button$1, _extends$1$1({
	    variant: "text",
	    className: clsx$1(classes.toolbarBtn, className)
	  }, other), React.createElement(ToolbarText, {
	    align: align,
	    className: typographyClassName,
	    variant: variant,
	    label: label,
	    selected: selected
	  }));
	};

	process.env.NODE_ENV !== "production" ? ToolbarButton.propTypes = {
	  selected: propTypes_2.isRequired,
	  label: propTypes_6.isRequired,
	  classes: propTypes_8.isRequired,
	  className: propTypes_6,
	  innerRef: propTypes_8
	} : void 0;
	ToolbarButton.defaultProps = {
	  className: ''
	};
	var styles$6$1 = createStyles$1({
	  toolbarBtn: {
	    padding: 0,
	    minWidth: '16px',
	    textTransform: 'none'
	  }
	});
	var ToolbarButton$1 = withStyles$1(styles$6$1, {
	  name: 'MuiPickersToolbarButton'
	})(ToolbarButton);

	var useStyles$1$3 = makeStyles$1(function (theme) {
	  return {
	    toolbar: {
	      display: 'flex',
	      flexDirection: 'row',
	      alignItems: 'center',
	      justifyContent: 'center',
	      height: 100,
	      backgroundColor: theme.palette.type === 'light' ? theme.palette.primary.main : theme.palette.background["default"]
	    },
	    toolbarLandscape: {
	      height: 'auto',
	      maxWidth: 150,
	      padding: 8,
	      justifyContent: 'flex-start'
	    }
	  };
	}, {
	  name: 'MuiPickersToolbar'
	});

	var PickerToolbar = function PickerToolbar(_ref) {
	  var children = _ref.children,
	      isLandscape = _ref.isLandscape,
	      _ref$className = _ref.className,
	      className = _ref$className === void 0 ? null : _ref$className,
	      other = _objectWithoutProperties$1$1(_ref, ["children", "isLandscape", "className"]);

	  var classes = useStyles$1$3();
	  return React.createElement(Toolbar$1, _extends$1$1({
	    className: clsx$1(classes.toolbar, className, isLandscape && classes.toolbarLandscape)
	  }, other), children);
	};

	function ownKeys$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$2(source, true).forEach(function (key) { _defineProperty$1$1(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$2(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
	var PureDateInput = function PureDateInput(_ref) {
	  var inputValue = _ref.inputValue,
	      inputVariant = _ref.inputVariant,
	      validationError = _ref.validationError,
	      InputProps = _ref.InputProps,
	      onOpen = _ref.openPicker,
	      _ref$TextFieldCompone = _ref.TextFieldComponent,
	      TextFieldComponent = _ref$TextFieldCompone === void 0 ? TextField$1 : _ref$TextFieldCompone,
	      other = _objectWithoutProperties$1$1(_ref, ["inputValue", "inputVariant", "validationError", "InputProps", "openPicker", "TextFieldComponent"]);

	  var PureDateInputProps = React.useMemo(function () {
	    return _objectSpread$2({}, InputProps, {
	      readOnly: true
	    });
	  }, [InputProps]);
	  return React.createElement(TextFieldComponent, _extends$1$1({
	    error: Boolean(validationError),
	    helperText: validationError
	  }, other, {
	    // do not overridable
	    onClick: onOpen,
	    value: inputValue,
	    variant: inputVariant,
	    InputProps: PureDateInputProps,
	    onKeyDown: function onKeyDown(e) {
	      // space
	      if (e.keyCode === 32) {
	        e.stopPropagation();
	        onOpen();
	      }
	    }
	  }));
	};
	PureDateInput.displayName = 'PureDateInput';

	var KeyboardIcon = function KeyboardIcon(props) {
	  return React__default.createElement(require$$2, props, React__default.createElement("path", {
	    d: "M17 12h-5v5h5v-5zM16 1v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2h-1V1h-2zm3 18H5V8h14v11z"
	  }), React__default.createElement("path", {
	    fill: "none",
	    d: "M0 0h24v24H0z"
	  }));
	};

	var getDisplayDate = function getDisplayDate(value, format, utils, isEmpty, _ref) {
	  var invalidLabel = _ref.invalidLabel,
	      emptyLabel = _ref.emptyLabel,
	      labelFunc = _ref.labelFunc;
	  var date = utils.date(value);

	  if (labelFunc) {
	    return labelFunc(isEmpty ? null : date, invalidLabel);
	  }

	  if (isEmpty) {
	    return emptyLabel || '';
	  }

	  return utils.isValid(date) ? utils.format(date, format) : invalidLabel;
	};

	var getComparisonMaxDate = function getComparisonMaxDate(utils, strictCompareDates, date) {
	  if (strictCompareDates) {
	    return date;
	  }

	  return utils.endOfDay(date);
	};

	var getComparisonMinDate = function getComparisonMinDate(utils, strictCompareDates, date) {
	  if (strictCompareDates) {
	    return date;
	  }

	  return utils.startOfDay(date);
	};

	var validate = function validate(value, utils, _ref2) {
	  var maxDate = _ref2.maxDate,
	      minDate = _ref2.minDate,
	      disablePast = _ref2.disablePast,
	      disableFuture = _ref2.disableFuture,
	      maxDateMessage = _ref2.maxDateMessage,
	      minDateMessage = _ref2.minDateMessage,
	      invalidDateMessage = _ref2.invalidDateMessage,
	      strictCompareDates = _ref2.strictCompareDates;
	  var parsedValue = utils.date(value); // if null - do not show error

	  if (value === null) {
	    return '';
	  }

	  if (!utils.isValid(value)) {
	    return invalidDateMessage;
	  }

	  if (maxDate && utils.isAfter(parsedValue, getComparisonMaxDate(utils, !!strictCompareDates, utils.date(maxDate)))) {
	    return maxDateMessage;
	  }

	  if (disableFuture && utils.isAfter(parsedValue, getComparisonMaxDate(utils, !!strictCompareDates, utils.date()))) {
	    return maxDateMessage;
	  }

	  if (minDate && utils.isBefore(parsedValue, getComparisonMinDate(utils, !!strictCompareDates, utils.date(minDate)))) {
	    return minDateMessage;
	  }

	  if (disablePast && utils.isBefore(parsedValue, getComparisonMinDate(utils, !!strictCompareDates, utils.date()))) {
	    return minDateMessage;
	  }

	  return '';
	};
	function makeMaskFromFormat(format, numberMaskChar) {
	  return format.replace(/[a-z]/gi, numberMaskChar);
	}
	var maskedDateFormatter = function maskedDateFormatter(mask, numberMaskChar, refuse) {
	  return function (value) {
	    var result = '';
	    var parsed = value.replace(refuse, '');

	    if (parsed === '') {
	      return parsed;
	    }

	    var i = 0;
	    var n = 0;

	    while (i < mask.length) {
	      var maskChar = mask[i];

	      if (maskChar === numberMaskChar && n < parsed.length) {
	        var parsedChar = parsed[n];
	        result += parsedChar;
	        n += 1;
	      } else {
	        result += maskChar;
	      }

	      i += 1;
	    }

	    return result;
	  };
	};

	function ownKeys$1$2(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$1$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$1$2(source, true).forEach(function (key) { _defineProperty$1$1(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$1$2(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }
	var KeyboardDateInput = function KeyboardDateInput(_ref) {
	  var inputValue = _ref.inputValue,
	      inputVariant = _ref.inputVariant,
	      validationError = _ref.validationError,
	      KeyboardButtonProps = _ref.KeyboardButtonProps,
	      InputAdornmentProps = _ref.InputAdornmentProps,
	      onOpen = _ref.openPicker,
	      onChange = _ref.onChange,
	      InputProps = _ref.InputProps,
	      mask = _ref.mask,
	      _ref$maskChar = _ref.maskChar,
	      maskChar = _ref$maskChar === void 0 ? '_' : _ref$maskChar,
	      _ref$refuse = _ref.refuse,
	      refuse = _ref$refuse === void 0 ? /[^\d]+/gi : _ref$refuse,
	      format = _ref.format,
	      keyboardIcon = _ref.keyboardIcon,
	      disabled = _ref.disabled,
	      rifmFormatter = _ref.rifmFormatter,
	      _ref$TextFieldCompone = _ref.TextFieldComponent,
	      TextFieldComponent = _ref$TextFieldCompone === void 0 ? TextField$1 : _ref$TextFieldCompone,
	      other = _objectWithoutProperties$1$1(_ref, ["inputValue", "inputVariant", "validationError", "KeyboardButtonProps", "InputAdornmentProps", "openPicker", "onChange", "InputProps", "mask", "maskChar", "refuse", "format", "keyboardIcon", "disabled", "rifmFormatter", "TextFieldComponent"]);

	  var inputMask = mask || makeMaskFromFormat(format, maskChar); // prettier-ignore

	  var formatter = React.useMemo(function () {
	    return maskedDateFormatter(inputMask, maskChar, refuse);
	  }, [inputMask, maskChar, refuse]);
	  var position = InputAdornmentProps && InputAdornmentProps.position ? InputAdornmentProps.position : 'end';

	  var handleChange = function handleChange(text) {
	    var finalString = text === '' || text === inputMask ? null : text;
	    onChange(finalString);
	  };

	  return React.createElement(Rifm, {
	    key: inputMask,
	    value: inputValue,
	    onChange: handleChange,
	    refuse: refuse,
	    format: rifmFormatter || formatter
	  }, function (_ref2) {
	    var onChange = _ref2.onChange,
	        value = _ref2.value;
	    return React.createElement(TextFieldComponent, _extends$1$1({
	      disabled: disabled,
	      error: Boolean(validationError),
	      helperText: validationError
	    }, other, {
	      value: value,
	      onChange: onChange,
	      variant: inputVariant,
	      InputProps: _objectSpread$1$1({}, InputProps, _defineProperty$1$1({}, "".concat(position, "Adornment"), React.createElement(InputAdornment$1, _extends$1$1({
	        position: position
	      }, InputAdornmentProps), React.createElement(IconButton$1, _extends$1$1({
	        disabled: disabled
	      }, KeyboardButtonProps, {
	        onClick: onOpen
	      }), keyboardIcon))))
	    }));
	  });
	};
	KeyboardDateInput.defaultProps = {
	  keyboardIcon: React.createElement(KeyboardIcon, null)
	};

	function useOpenState(_ref) {
	  var open = _ref.open,
	      onOpen = _ref.onOpen,
	      onClose = _ref.onClose;
	  var setIsOpenState = null;

	  if (open === undefined || open === null) {
	    // The component is uncontrolled, so we need to give it its own state.
	    var _useState = React.useState(false);

	    var _useState2 = _slicedToArray$1$1(_useState, 2);

	    open = _useState2[0];
	    setIsOpenState = _useState2[1];
	  } // prettier-ignore


	  var setIsOpen = React.useCallback(function (newIsOpen) {
	    setIsOpenState && setIsOpenState(newIsOpen);
	    return newIsOpen ? onOpen && onOpen() : onClose && onClose();
	  }, [onOpen, onClose, setIsOpenState]);
	  return {
	    isOpen: open,
	    setIsOpen: setIsOpen
	  };
	}

	var useValueToDate = function useValueToDate(utils, _ref) {
	  var value = _ref.value,
	      initialFocusedDate = _ref.initialFocusedDate;
	  var nowRef = React.useRef(utils.date());
	  var date = utils.date(value || initialFocusedDate || nowRef.current);
	  return date && utils.isValid(date) ? date : nowRef.current;
	};

	function useDateValues(props, options) {
	  var utils = useUtils();
	  var date = useValueToDate(utils, props);
	  var format = props.format || options.getDefaultFormat();
	  return {
	    date: date,
	    format: format
	  };
	}

	function usePickerState(props, options) {
	  var autoOk = props.autoOk,
	      disabled = props.disabled,
	      readOnly = props.readOnly,
	      onAccept = props.onAccept,
	      _onChange = props.onChange,
	      onError = props.onError,
	      value = props.value,
	      variant = props.variant;
	  var utils = useUtils();

	  var _useOpenState = useOpenState(props),
	      isOpen = _useOpenState.isOpen,
	      setIsOpen = _useOpenState.setIsOpen;

	  var _useDateValues = useDateValues(props, options),
	      date = _useDateValues.date,
	      format = _useDateValues.format;

	  var _useState = React.useState(date),
	      _useState2 = _slicedToArray$1$1(_useState, 2),
	      pickerDate = _useState2[0],
	      setPickerDate = _useState2[1];

	  React.useEffect(function () {
	    // if value was changed in closed state - treat it as accepted
	    if (!isOpen && !utils.isEqual(pickerDate, date)) {
	      setPickerDate(date);
	    }
	  }, [date, isOpen, pickerDate, utils]);
	  var acceptDate = React.useCallback(function (acceptedDate) {
	    _onChange(acceptedDate);

	    if (onAccept) {
	      onAccept(acceptedDate);
	    }

	    setIsOpen(false);
	  }, [onAccept, _onChange, setIsOpen]);
	  var wrapperProps = React.useMemo(function () {
	    return {
	      format: format,
	      open: isOpen,
	      onClear: function onClear() {
	        return acceptDate(null);
	      },
	      onAccept: function onAccept() {
	        return acceptDate(pickerDate);
	      },
	      onSetToday: function onSetToday() {
	        return setPickerDate(utils.date());
	      },
	      onDismiss: function onDismiss() {
	        setIsOpen(false);
	      }
	    };
	  }, [acceptDate, format, isOpen, pickerDate, setIsOpen, utils]);
	  var pickerProps = React.useMemo(function () {
	    return {
	      date: pickerDate,
	      onChange: function onChange(newDate) {
	        var isFinish = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	        setPickerDate(newDate);

	        if (isFinish && autoOk) {
	          acceptDate(newDate);
	          return;
	        } // simulate autoOk, but do not close the modal


	        if (variant === 'inline' || variant === 'static') {
	          _onChange(newDate);

	          onAccept && onAccept(newDate);
	        }
	      }
	    };
	  }, [acceptDate, autoOk, onAccept, _onChange, pickerDate, variant]);
	  var validationError = validate(value, utils, props);
	  React.useEffect(function () {
	    if (onError) {
	      onError(validationError, value);
	    }
	  }, [onError, validationError, value]);
	  var inputValue = getDisplayDate(date, format, utils, value === null, props);
	  var inputProps = React.useMemo(function () {
	    return {
	      inputValue: inputValue,
	      validationError: validationError,
	      openPicker: function openPicker() {
	        return !readOnly && !disabled && setIsOpen(true);
	      }
	    };
	  }, [disabled, inputValue, readOnly, setIsOpen, validationError]);
	  var pickerState = {
	    pickerProps: pickerProps,
	    inputProps: inputProps,
	    wrapperProps: wrapperProps
	  };
	  React.useDebugValue(pickerState);
	  return pickerState;
	}

	function ownKeys$2$1(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$2$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$2$1(source, true).forEach(function (key) { _defineProperty$1$1(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$2$1(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	function parseInputString(value, utils, format) {
	  try {
	    return utils.parse(value, format);
	  } catch (_unused) {
	    return null;
	  }
	}

	function useKeyboardPickerState(props, options) {
	  var _props$format = props.format,
	      format = _props$format === void 0 ? options.getDefaultFormat() : _props$format,
	      inputValue = props.inputValue,
	      _onChange = props.onChange,
	      value = props.value;
	  var utils = useUtils();
	  var displayDate = getDisplayDate(value, format, utils, value === null, props);

	  var _useState = React.useState(displayDate),
	      _useState2 = _slicedToArray$1$1(_useState, 2),
	      innerInputValue = _useState2[0],
	      setInnerInputValue = _useState2[1];

	  var dateValue = inputValue ? parseInputString(inputValue, utils, format) : value;
	  React.useEffect(function () {
	    if (value === null || utils.isValid(value)) {
	      setInnerInputValue(displayDate);
	    }
	  }, [displayDate, setInnerInputValue, utils, value]);
	  var handleKeyboardChange = React.useCallback(function (date) {
	    _onChange(date, date === null ? null : utils.format(date, format));
	  }, [format, _onChange, utils]);

	  var _usePickerState = usePickerState( // Extend props interface
	  _objectSpread$2$1({}, props, {
	    value: dateValue,
	    onChange: handleKeyboardChange
	  }), options),
	      innerInputProps = _usePickerState.inputProps,
	      wrapperProps = _usePickerState.wrapperProps,
	      pickerProps = _usePickerState.pickerProps;

	  var inputProps = React.useMemo(function () {
	    return _objectSpread$2$1({}, innerInputProps, {
	      // reuse validation and open/close logic
	      format: wrapperProps.format,
	      inputValue: inputValue || innerInputValue,
	      onChange: function onChange(value) {
	        setInnerInputValue(value || '');
	        var date = value === null ? null : utils.parse(value, wrapperProps.format);

	        _onChange(date, value);
	      }
	    });
	  }, [innerInputProps, innerInputValue, inputValue, _onChange, utils, wrapperProps.format]);
	  return {
	    inputProps: inputProps,
	    wrapperProps: wrapperProps,
	    pickerProps: pickerProps
	  };
	}

	function makePickerWithState(_ref) {
	  var Input = _ref.Input,
	      useState = _ref.useState,
	      useOptions = _ref.useOptions,
	      getCustomProps = _ref.getCustomProps,
	      DefaultToolbarComponent = _ref.DefaultToolbarComponent;

	  function PickerWithState(props) {
	    var allowKeyboardControl = props.allowKeyboardControl,
	        ampm = props.ampm,
	        animateYearScrolling = props.animateYearScrolling,
	        autoOk = props.autoOk,
	        dateRangeIcon = props.dateRangeIcon,
	        disableFuture = props.disableFuture,
	        disablePast = props.disablePast,
	        disableToolbar = props.disableToolbar,
	        emptyLabel = props.emptyLabel,
	        format = props.format,
	        forwardedRef = props.forwardedRef,
	        hideTabs = props.hideTabs,
	        initialFocusedDate = props.initialFocusedDate,
	        invalidDateMessage = props.invalidDateMessage,
	        invalidLabel = props.invalidLabel,
	        labelFunc = props.labelFunc,
	        leftArrowButtonProps = props.leftArrowButtonProps,
	        leftArrowIcon = props.leftArrowIcon,
	        loadingIndicator = props.loadingIndicator,
	        maxDate = props.maxDate,
	        maxDateMessage = props.maxDateMessage,
	        minDate = props.minDate,
	        minDateMessage = props.minDateMessage,
	        minutesStep = props.minutesStep,
	        onAccept = props.onAccept,
	        onChange = props.onChange,
	        onClose = props.onClose,
	        onMonthChange = props.onMonthChange,
	        onOpen = props.onOpen,
	        onYearChange = props.onYearChange,
	        openTo = props.openTo,
	        orientation = props.orientation,
	        renderDay = props.renderDay,
	        rightArrowButtonProps = props.rightArrowButtonProps,
	        rightArrowIcon = props.rightArrowIcon,
	        shouldDisableDate = props.shouldDisableDate,
	        strictCompareDates = props.strictCompareDates,
	        timeIcon = props.timeIcon,
	        _props$ToolbarCompone = props.ToolbarComponent,
	        ToolbarComponent = _props$ToolbarCompone === void 0 ? DefaultToolbarComponent : _props$ToolbarCompone,
	        value = props.value,
	        variant = props.variant,
	        views = props.views,
	        other = _objectWithoutProperties$1$1(props, ["allowKeyboardControl", "ampm", "animateYearScrolling", "autoOk", "dateRangeIcon", "disableFuture", "disablePast", "disableToolbar", "emptyLabel", "format", "forwardedRef", "hideTabs", "initialFocusedDate", "invalidDateMessage", "invalidLabel", "labelFunc", "leftArrowButtonProps", "leftArrowIcon", "loadingIndicator", "maxDate", "maxDateMessage", "minDate", "minDateMessage", "minutesStep", "onAccept", "onChange", "onClose", "onMonthChange", "onOpen", "onYearChange", "openTo", "orientation", "renderDay", "rightArrowButtonProps", "rightArrowIcon", "shouldDisableDate", "strictCompareDates", "timeIcon", "ToolbarComponent", "value", "variant", "views"]);

	    var injectedProps = getCustomProps ? getCustomProps(props) : {};
	    var options = useOptions(props);

	    var _useState = useState(props, options),
	        pickerProps = _useState.pickerProps,
	        inputProps = _useState.inputProps,
	        wrapperProps = _useState.wrapperProps;

	    return React.createElement(Wrapper, _extends$1$1({
	      variant: variant,
	      InputComponent: Input,
	      DateInputProps: inputProps
	    }, injectedProps, wrapperProps, other), React.createElement(Picker, _extends$1$1({}, pickerProps, {
	      allowKeyboardControl: allowKeyboardControl,
	      ampm: ampm,
	      animateYearScrolling: animateYearScrolling,
	      dateRangeIcon: dateRangeIcon,
	      disableFuture: disableFuture,
	      disablePast: disablePast,
	      disableToolbar: disableToolbar,
	      hideTabs: hideTabs,
	      leftArrowButtonProps: leftArrowButtonProps,
	      leftArrowIcon: leftArrowIcon,
	      loadingIndicator: loadingIndicator,
	      maxDate: maxDate,
	      minDate: minDate,
	      minutesStep: minutesStep,
	      onMonthChange: onMonthChange,
	      onYearChange: onYearChange,
	      openTo: openTo,
	      orientation: orientation,
	      renderDay: renderDay,
	      rightArrowButtonProps: rightArrowButtonProps,
	      rightArrowIcon: rightArrowIcon,
	      shouldDisableDate: shouldDisableDate,
	      strictCompareDates: strictCompareDates,
	      timeIcon: timeIcon,
	      ToolbarComponent: ToolbarComponent,
	      views: views
	    })));
	  }

	  return PickerWithState;
	}

	var useStyles$6 = makeStyles$1({
	  toolbar: {
	    flexDirection: 'column',
	    alignItems: 'flex-start'
	  },
	  toolbarLandscape: {
	    padding: 16
	  },
	  dateLandscape: {
	    marginRight: 16
	  }
	}, {
	  name: 'MuiPickersDatePickerRoot'
	});
	var DatePickerToolbar = function DatePickerToolbar(_ref) {
	  var date = _ref.date,
	      views = _ref.views,
	      setOpenView = _ref.setOpenView,
	      isLandscape = _ref.isLandscape,
	      openView = _ref.openView;
	  var utils = useUtils();
	  var classes = useStyles$6();
	  var isYearOnly = React.useMemo(function () {
	    return isYearOnlyView(views);
	  }, [views]);
	  var isYearAndMonth = React.useMemo(function () {
	    return isYearAndMonthViews(views);
	  }, [views]);
	  return React.createElement(PickerToolbar, {
	    isLandscape: isLandscape,
	    className: clsx$1(!isYearOnly && classes.toolbar, isLandscape && classes.toolbarLandscape)
	  }, React.createElement(ToolbarButton$1, {
	    variant: isYearOnly ? 'h3' : 'subtitle1',
	    onClick: function onClick() {
	      return setOpenView('year');
	    },
	    selected: openView === 'year',
	    label: utils.getYearText(date)
	  }), !isYearOnly && !isYearAndMonth && React.createElement(ToolbarButton$1, {
	    variant: "h4",
	    selected: openView === 'date',
	    onClick: function onClick() {
	      return setOpenView('date');
	    },
	    align: isLandscape ? 'left' : 'center',
	    label: utils.getDatePickerHeaderText(date),
	    className: clsx$1(isLandscape && classes.dateLandscape)
	  }), isYearAndMonth && React.createElement(ToolbarButton$1, {
	    variant: "h4",
	    onClick: function onClick() {
	      return setOpenView('month');
	    },
	    selected: openView === 'month',
	    label: utils.getMonthText(date)
	  }));
	};

	function ownKeys$3(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$3(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys$3(source, true).forEach(function (key) { _defineProperty$1$1(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys$3(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

	var defaultProps$1$1 = _objectSpread$3({}, datePickerDefaultProps, {
	  openTo: 'date',
	  views: ['year', 'date']
	});

	function useOptions(props) {
	  var utils = useUtils();
	  return {
	    getDefaultFormat: function getDefaultFormat() {
	      return getFormatByViews(props.views, utils);
	    }
	  };
	}

	var DatePicker = makePickerWithState({
	  useOptions: useOptions,
	  Input: PureDateInput,
	  useState: usePickerState,
	  DefaultToolbarComponent: DatePickerToolbar
	});
	var KeyboardDatePicker = makePickerWithState({
	  useOptions: useOptions,
	  Input: KeyboardDateInput,
	  useState: useKeyboardPickerState,
	  DefaultToolbarComponent: DatePickerToolbar
	});
	DatePicker.defaultProps = defaultProps$1$1;
	KeyboardDatePicker.defaultProps = defaultProps$1$1;

	/**
	 * react-number-format - 4.4.1
	 * Author : Sudhanshu Yadav
	 * Copyright (c) 2016, 2020 to Sudhanshu Yadav, released under the MIT license.
	 * https://github.com/s-yadav/react-number-format
	 */

	function _classCallCheck$2(instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	}

	function _defineProperties$2(target, props) {
	  for (var i = 0; i < props.length; i++) {
	    var descriptor = props[i];
	    descriptor.enumerable = descriptor.enumerable || false;
	    descriptor.configurable = true;
	    if ("value" in descriptor) descriptor.writable = true;
	    Object.defineProperty(target, descriptor.key, descriptor);
	  }
	}

	function _createClass$2(Constructor, protoProps, staticProps) {
	  if (protoProps) _defineProperties$2(Constructor.prototype, protoProps);
	  if (staticProps) _defineProperties$2(Constructor, staticProps);
	  return Constructor;
	}

	function _extends$2() {
	  _extends$2 = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends$2.apply(this, arguments);
	}

	function _inherits$2(subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function");
	  }

	  subClass.prototype = Object.create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf$2(subClass, superClass);
	}

	function _getPrototypeOf$2(o) {
	  _getPrototypeOf$2 = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
	    return o.__proto__ || Object.getPrototypeOf(o);
	  };
	  return _getPrototypeOf$2(o);
	}

	function _setPrototypeOf$2(o, p) {
	  _setPrototypeOf$2 = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
	    o.__proto__ = p;
	    return o;
	  };

	  return _setPrototypeOf$2(o, p);
	}

	function _assertThisInitialized$2(self) {
	  if (self === void 0) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return self;
	}

	function _possibleConstructorReturn$2(self, call) {
	  if (call && (typeof call === "object" || typeof call === "function")) {
	    return call;
	  }

	  return _assertThisInitialized$2(self);
	}

	function createCommonjsModule$1$1(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var ReactPropTypesSecret$2$1 = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

	var ReactPropTypesSecret_1$1$1 = ReactPropTypesSecret$2$1;

	function emptyFunction$1$1() {}
	function emptyFunctionWithReset$1$1() {}
	emptyFunctionWithReset$1$1.resetWarningCache = emptyFunction$1$1;

	var factoryWithThrowingShims$1$1 = function() {
	  function shim(props, propName, componentName, location, propFullName, secret) {
	    if (secret === ReactPropTypesSecret_1$1$1) {
	      // It is still safe when called from React.
	      return;
	    }
	    var err = new Error(
	      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
	      'Use PropTypes.checkPropTypes() to call them. ' +
	      'Read more at http://fb.me/use-check-prop-types'
	    );
	    err.name = 'Invariant Violation';
	    throw err;
	  }  shim.isRequired = shim;
	  function getShim() {
	    return shim;
	  }  // Important!
	  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
	  var ReactPropTypes = {
	    array: shim,
	    bool: shim,
	    func: shim,
	    number: shim,
	    object: shim,
	    string: shim,
	    symbol: shim,

	    any: shim,
	    arrayOf: getShim,
	    element: shim,
	    elementType: shim,
	    instanceOf: getShim,
	    node: shim,
	    objectOf: getShim,
	    oneOf: getShim,
	    oneOfType: getShim,
	    shape: getShim,
	    exact: getShim,

	    checkPropTypes: emptyFunctionWithReset$1$1,
	    resetWarningCache: emptyFunction$1$1
	  };

	  ReactPropTypes.PropTypes = ReactPropTypes;

	  return ReactPropTypes;
	};

	var propTypes$1$1 = createCommonjsModule$1$1(function (module) {
	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	{
	  // By explicitly using `prop-types` you are opting into new production behavior.
	  // http://fb.me/prop-types-in-prod
	  module.exports = factoryWithThrowingShims$1$1();
	}
	});

	// basic noop function
	function noop$1$1() {}
	function returnTrue() {
	  return true;
	}
	function charIsNumber(_char) {
	  return !!(_char || '').match(/\d/);
	}
	function escapeRegExp(str) {
	  return str.replace(/[-[\]/{}()*+?.\\^$|]/g, "\\$&");
	}
	function getThousandsGroupRegex(thousandsGroupStyle) {
	  switch (thousandsGroupStyle) {
	    case 'lakh':
	      return /(\d+?)(?=(\d\d)+(\d)(?!\d))(\.\d+)?/g;

	    case 'wan':
	      return /(\d)(?=(\d{4})+(?!\d))/g;

	    case 'thousand':
	    default:
	      return /(\d)(?=(\d{3})+(?!\d))/g;
	  }
	}
	function applyThousandSeparator(str, thousandSeparator, thousandsGroupStyle) {
	  var thousandsGroupRegex = getThousandsGroupRegex(thousandsGroupStyle);
	  var index = str.search(/[1-9]/);
	  index = index === -1 ? str.length : index;
	  return str.substring(0, index) + str.substring(index, str.length).replace(thousandsGroupRegex, '$1' + thousandSeparator);
	} //spilt a float number into different parts beforeDecimal, afterDecimal, and negation

	function splitDecimal(numStr) {
	  var allowNegative = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
	  var hasNagation = numStr[0] === '-';
	  var addNegation = hasNagation && allowNegative;
	  numStr = numStr.replace('-', '');
	  var parts = numStr.split('.');
	  var beforeDecimal = parts[0];
	  var afterDecimal = parts[1] || '';
	  return {
	    beforeDecimal: beforeDecimal,
	    afterDecimal: afterDecimal,
	    hasNagation: hasNagation,
	    addNegation: addNegation
	  };
	}
	function fixLeadingZero(numStr) {
	  if (!numStr) return numStr;
	  var isNegative = numStr[0] === '-';
	  if (isNegative) numStr = numStr.substring(1, numStr.length);
	  var parts = numStr.split('.');
	  var beforeDecimal = parts[0].replace(/^0+/, '') || '0';
	  var afterDecimal = parts[1] || '';
	  return "".concat(isNegative ? '-' : '').concat(beforeDecimal).concat(afterDecimal ? ".".concat(afterDecimal) : '');
	}
	/**
	 * limit decimal numbers to given scale
	 * Not used .fixedTo because that will break with big numbers
	 */

	function limitToScale(numStr, scale, fixedDecimalScale) {
	  var str = '';
	  var filler = fixedDecimalScale ? '0' : '';

	  for (var i = 0; i <= scale - 1; i++) {
	    str += numStr[i] || filler;
	  }

	  return str;
	}
	/**
	 * This method is required to round prop value to given scale.
	 * Not used .round or .fixedTo because that will break with big numbers
	 */

	function roundToPrecision(numStr, scale, fixedDecimalScale) {
	  //if number is empty don't do anything return empty string
	  if (['', '-'].indexOf(numStr) !== -1) return numStr;
	  var shoudHaveDecimalSeparator = numStr.indexOf('.') !== -1 && scale;

	  var _splitDecimal = splitDecimal(numStr),
	      beforeDecimal = _splitDecimal.beforeDecimal,
	      afterDecimal = _splitDecimal.afterDecimal,
	      hasNagation = _splitDecimal.hasNagation;

	  var roundedDecimalParts = parseFloat("0.".concat(afterDecimal || '0')).toFixed(scale).split('.');
	  var intPart = beforeDecimal.split('').reverse().reduce(function (roundedStr, current, idx) {
	    if (roundedStr.length > idx) {
	      return (Number(roundedStr[0]) + Number(current)).toString() + roundedStr.substring(1, roundedStr.length);
	    }

	    return current + roundedStr;
	  }, roundedDecimalParts[0]);
	  var decimalPart = limitToScale(roundedDecimalParts[1] || '', Math.min(scale, afterDecimal.length), fixedDecimalScale);
	  var negation = hasNagation ? '-' : '';
	  var decimalSeparator = shoudHaveDecimalSeparator ? '.' : '';
	  return "".concat(negation).concat(intPart).concat(decimalSeparator).concat(decimalPart);
	}
	function omit$2(obj, keyMaps) {
	  var filteredObj = {};
	  Object.keys(obj).forEach(function (key) {
	    if (!keyMaps[key]) filteredObj[key] = obj[key];
	  });
	  return filteredObj;
	}
	/** set the caret positon in an input field **/

	function setCaretPosition(el, caretPos) {
	  el.value = el.value; // ^ this is used to not only get "focus", but
	  // to make sure we don't have it everything -selected-
	  // (it causes an issue in chrome, and having it doesn't hurt any other browser)

	  if (el !== null) {
	    if (el.createTextRange) {
	      var range = el.createTextRange();
	      range.move('character', caretPos);
	      range.select();
	      return true;
	    } // (el.selectionStart === 0 added for Firefox bug)


	    if (el.selectionStart || el.selectionStart === 0) {
	      el.focus();
	      el.setSelectionRange(caretPos, caretPos);
	      return true;
	    } // fail city, fortunately this never happens (as far as I've tested) :)


	    el.focus();
	    return false;
	  }
	}
	/**
	  Given previous value and newValue it returns the index
	  start - end to which values have changed.
	  This function makes assumption about only consecutive
	  characters are changed which is correct assumption for caret input.
	*/

	function findChangedIndex(prevValue, newValue) {
	  var i = 0,
	      j = 0;
	  var prevLength = prevValue.length;
	  var newLength = newValue.length;

	  while (prevValue[i] === newValue[i] && i < prevLength) {
	    i++;
	  } //check what has been changed from last


	  while (prevValue[prevLength - 1 - j] === newValue[newLength - 1 - j] && newLength - j > i && prevLength - j > i) {
	    j++;
	  }

	  return {
	    start: i,
	    end: prevLength - j
	  };
	}
	/*
	  Returns a number whose value is limited to the given range
	*/

	function clamp$1(num, min, max) {
	  return Math.min(Math.max(num, min), max);
	}
	function getCurrentCaretPosition(el) {
	  /*Max of selectionStart and selectionEnd is taken for the patch of pixel and other mobile device caret bug*/
	  return Math.max(el.selectionStart, el.selectionEnd);
	}

	var propTypes$1$1$1 = {
	  thousandSeparator: propTypes$1$1.oneOfType([propTypes$1$1.string, propTypes$1$1.oneOf([true])]),
	  decimalSeparator: propTypes$1$1.string,
	  allowedDecimalSeparators: propTypes$1$1.arrayOf(propTypes$1$1.string),
	  thousandsGroupStyle: propTypes$1$1.oneOf(['thousand', 'lakh', 'wan']),
	  decimalScale: propTypes$1$1.number,
	  fixedDecimalScale: propTypes$1$1.bool,
	  displayType: propTypes$1$1.oneOf(['input', 'text']),
	  prefix: propTypes$1$1.string,
	  suffix: propTypes$1$1.string,
	  format: propTypes$1$1.oneOfType([propTypes$1$1.string, propTypes$1$1.func]),
	  removeFormatting: propTypes$1$1.func,
	  mask: propTypes$1$1.oneOfType([propTypes$1$1.string, propTypes$1$1.arrayOf(propTypes$1$1.string)]),
	  value: propTypes$1$1.oneOfType([propTypes$1$1.number, propTypes$1$1.string]),
	  defaultValue: propTypes$1$1.oneOfType([propTypes$1$1.number, propTypes$1$1.string]),
	  isNumericString: propTypes$1$1.bool,
	  customInput: propTypes$1$1.elementType,
	  allowNegative: propTypes$1$1.bool,
	  allowEmptyFormatting: propTypes$1$1.bool,
	  allowLeadingZeros: propTypes$1$1.bool,
	  onValueChange: propTypes$1$1.func,
	  onKeyDown: propTypes$1$1.func,
	  onMouseUp: propTypes$1$1.func,
	  onChange: propTypes$1$1.func,
	  onFocus: propTypes$1$1.func,
	  onBlur: propTypes$1$1.func,
	  type: propTypes$1$1.oneOf(['text', 'tel', 'password']),
	  isAllowed: propTypes$1$1.func,
	  renderText: propTypes$1$1.func,
	  getInputRef: propTypes$1$1.oneOfType([propTypes$1$1.func, // for legacy refs
	  propTypes$1$1.shape({
	    current: propTypes$1$1.any
	  })])
	};
	var defaultProps$2 = {
	  displayType: 'input',
	  decimalSeparator: '.',
	  thousandsGroupStyle: 'thousand',
	  fixedDecimalScale: false,
	  prefix: '',
	  suffix: '',
	  allowNegative: true,
	  allowEmptyFormatting: false,
	  allowLeadingZeros: false,
	  isNumericString: false,
	  type: 'text',
	  onValueChange: noop$1$1,
	  onChange: noop$1$1,
	  onKeyDown: noop$1$1,
	  onMouseUp: noop$1$1,
	  onFocus: noop$1$1,
	  onBlur: noop$1$1,
	  isAllowed: returnTrue
	};

	var NumberFormat =
	/*#__PURE__*/
	function (_React$Component) {
	  _inherits$2(NumberFormat, _React$Component);

	  function NumberFormat(props) {
	    var _this;

	    _classCallCheck$2(this, NumberFormat);

	    _this = _possibleConstructorReturn$2(this, _getPrototypeOf$2(NumberFormat).call(this, props));
	    var defaultValue = props.defaultValue; //validate props

	    _this.validateProps();

	    var formattedValue = _this.formatValueProp(defaultValue);

	    _this.state = {
	      value: formattedValue,
	      numAsString: _this.removeFormatting(formattedValue)
	    };
	    _this.selectionBeforeInput = {
	      selectionStart: 0,
	      selectionEnd: 0
	    };
	    _this.onChange = _this.onChange.bind(_assertThisInitialized$2(_this));
	    _this.onKeyDown = _this.onKeyDown.bind(_assertThisInitialized$2(_this));
	    _this.onMouseUp = _this.onMouseUp.bind(_assertThisInitialized$2(_this));
	    _this.onFocus = _this.onFocus.bind(_assertThisInitialized$2(_this));
	    _this.onBlur = _this.onBlur.bind(_assertThisInitialized$2(_this));
	    return _this;
	  }

	  _createClass$2(NumberFormat, [{
	    key: "componentDidUpdate",
	    value: function componentDidUpdate(prevProps) {
	      this.updateValueIfRequired(prevProps);
	    }
	  }, {
	    key: "updateValueIfRequired",
	    value: function updateValueIfRequired(prevProps) {
	      var props = this.props,
	          state = this.state,
	          focusedElm = this.focusedElm;
	      var stateValue = state.value,
	          _state$numAsString = state.numAsString,
	          lastNumStr = _state$numAsString === void 0 ? '' : _state$numAsString; // If only state changed no need to do any thing

	      if (prevProps !== props) {
	        //validate props
	        this.validateProps();
	        var lastValueWithNewFormat = this.formatNumString(lastNumStr);
	        var formattedValue = props.value === undefined ? lastValueWithNewFormat : this.formatValueProp();
	        var numAsString = this.removeFormatting(formattedValue);
	        var floatValue = parseFloat(numAsString);
	        var lastFloatValue = parseFloat(lastNumStr);

	        if ( //while typing set state only when float value changes
	        (!isNaN(floatValue) || !isNaN(lastFloatValue)) && floatValue !== lastFloatValue || //can also set state when float value is same and the format props changes
	        lastValueWithNewFormat !== stateValue || //set state always when not in focus and formatted value is changed
	        focusedElm === null && formattedValue !== stateValue) {
	          this.updateValue({
	            formattedValue: formattedValue,
	            numAsString: numAsString,
	            input: focusedElm
	          });
	        }
	      }
	    }
	    /** Misc methods **/

	  }, {
	    key: "getFloatString",
	    value: function getFloatString() {
	      var num = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
	      var decimalScale = this.props.decimalScale;

	      var _this$getSeparators = this.getSeparators(),
	          decimalSeparator = _this$getSeparators.decimalSeparator;

	      var numRegex = this.getNumberRegex(true); //remove negation for regex check

	      var hasNegation = num[0] === '-';
	      if (hasNegation) num = num.replace('-', ''); //if decimal scale is zero remove decimal and number after decimalSeparator

	      if (decimalSeparator && decimalScale === 0) {
	        num = num.split(decimalSeparator)[0];
	      }

	      num = (num.match(numRegex) || []).join('').replace(decimalSeparator, '.'); //remove extra decimals

	      var firstDecimalIndex = num.indexOf('.');

	      if (firstDecimalIndex !== -1) {
	        num = "".concat(num.substring(0, firstDecimalIndex), ".").concat(num.substring(firstDecimalIndex + 1, num.length).replace(new RegExp(escapeRegExp(decimalSeparator), 'g'), ''));
	      } //add negation back


	      if (hasNegation) num = '-' + num;
	      return num;
	    } //returned regex assumes decimalSeparator is as per prop

	  }, {
	    key: "getNumberRegex",
	    value: function getNumberRegex(g, ignoreDecimalSeparator) {
	      var _this$props = this.props,
	          format = _this$props.format,
	          decimalScale = _this$props.decimalScale;

	      var _this$getSeparators2 = this.getSeparators(),
	          decimalSeparator = _this$getSeparators2.decimalSeparator;

	      return new RegExp('\\d' + (decimalSeparator && decimalScale !== 0 && !ignoreDecimalSeparator && !format ? '|' + escapeRegExp(decimalSeparator) : ''), g ? 'g' : undefined);
	    }
	  }, {
	    key: "getSeparators",
	    value: function getSeparators() {
	      var decimalSeparator = this.props.decimalSeparator;
	      var _this$props2 = this.props,
	          thousandSeparator = _this$props2.thousandSeparator,
	          allowedDecimalSeparators = _this$props2.allowedDecimalSeparators;

	      if (thousandSeparator === true) {
	        thousandSeparator = ',';
	      }

	      if (!allowedDecimalSeparators) {
	        allowedDecimalSeparators = [decimalSeparator, '.'];
	      }

	      return {
	        decimalSeparator: decimalSeparator,
	        thousandSeparator: thousandSeparator,
	        allowedDecimalSeparators: allowedDecimalSeparators
	      };
	    }
	  }, {
	    key: "getMaskAtIndex",
	    value: function getMaskAtIndex(index) {
	      var _this$props$mask = this.props.mask,
	          mask = _this$props$mask === void 0 ? ' ' : _this$props$mask;

	      if (typeof mask === 'string') {
	        return mask;
	      }

	      return mask[index] || ' ';
	    }
	  }, {
	    key: "getValueObject",
	    value: function getValueObject(formattedValue, numAsString) {
	      var floatValue = parseFloat(numAsString);
	      return {
	        formattedValue: formattedValue,
	        value: numAsString,
	        floatValue: isNaN(floatValue) ? undefined : floatValue
	      };
	    }
	  }, {
	    key: "validateProps",
	    value: function validateProps() {
	      var mask = this.props.mask; //validate decimalSeparator and thousandSeparator

	      var _this$getSeparators3 = this.getSeparators(),
	          decimalSeparator = _this$getSeparators3.decimalSeparator,
	          thousandSeparator = _this$getSeparators3.thousandSeparator;

	      if (decimalSeparator === thousandSeparator) {
	        throw new Error("\n          Decimal separator can't be same as thousand separator.\n          thousandSeparator: ".concat(thousandSeparator, " (thousandSeparator = {true} is same as thousandSeparator = \",\")\n          decimalSeparator: ").concat(decimalSeparator, " (default value for decimalSeparator is .)\n       "));
	      } //validate mask


	      if (mask) {
	        var maskAsStr = mask === 'string' ? mask : mask.toString();

	        if (maskAsStr.match(/\d/g)) {
	          throw new Error("\n          Mask ".concat(mask, " should not contain numeric character;\n        "));
	        }
	      }
	    }
	    /** Misc methods end **/

	    /** caret specific methods **/

	  }, {
	    key: "setPatchedCaretPosition",
	    value: function setPatchedCaretPosition(el, caretPos, currentValue) {
	      /* setting caret position within timeout of 0ms is required for mobile chrome,
	      otherwise browser resets the caret position after we set it
	      We are also setting it without timeout so that in normal browser we don't see the flickering */
	      setCaretPosition(el, caretPos);
	      setTimeout(function () {
	        if (el.value === currentValue) setCaretPosition(el, caretPos);
	      }, 0);
	    }
	    /* This keeps the caret within typing area so people can't type in between prefix or suffix */

	  }, {
	    key: "correctCaretPosition",
	    value: function correctCaretPosition(value, caretPos, direction) {
	      var _this$props3 = this.props,
	          prefix = _this$props3.prefix,
	          suffix = _this$props3.suffix,
	          format = _this$props3.format; //if value is empty return 0

	      if (value === '') return 0; //caret position should be between 0 and value length

	      caretPos = clamp$1(caretPos, 0, value.length); //in case of format as number limit between prefix and suffix

	      if (!format) {
	        var hasNegation = value[0] === '-';
	        return clamp$1(caretPos, prefix.length + (hasNegation ? 1 : 0), value.length - suffix.length);
	      } //in case if custom format method don't do anything


	      if (typeof format === 'function') return caretPos;
	      /* in case format is string find the closest # position from the caret position */
	      //in case the caretPos have input value on it don't do anything

	      if (format[caretPos] === '#' && charIsNumber(value[caretPos])) return caretPos; //if caretPos is just after input value don't do anything

	      if (format[caretPos - 1] === '#' && charIsNumber(value[caretPos - 1])) return caretPos; //find the nearest caret position

	      var firstHashPosition = format.indexOf('#');
	      var lastHashPosition = format.lastIndexOf('#'); //limit the cursor between the first # position and the last # position

	      caretPos = clamp$1(caretPos, firstHashPosition, lastHashPosition + 1);
	      var nextPos = format.substring(caretPos, format.length).indexOf('#');
	      var caretLeftBound = caretPos;
	      var caretRightBound = caretPos + (nextPos === -1 ? 0 : nextPos); //get the position where the last number is present

	      while (caretLeftBound > firstHashPosition && (format[caretLeftBound] !== '#' || !charIsNumber(value[caretLeftBound]))) {
	        caretLeftBound -= 1;
	      }

	      var goToLeft = !charIsNumber(value[caretRightBound]) || direction === 'left' && caretPos !== firstHashPosition || caretPos - caretLeftBound < caretRightBound - caretPos;

	      if (goToLeft) {
	        //check if number should be taken after the bound or after it
	        //if number preceding a valid number keep it after
	        return charIsNumber(value[caretLeftBound]) ? caretLeftBound + 1 : caretLeftBound;
	      }

	      return caretRightBound;
	    }
	  }, {
	    key: "getCaretPosition",
	    value: function getCaretPosition(inputValue, formattedValue, caretPos) {
	      var format = this.props.format;
	      var stateValue = this.state.value;
	      var numRegex = this.getNumberRegex(true);
	      var inputNumber = (inputValue.match(numRegex) || []).join('');
	      var formattedNumber = (formattedValue.match(numRegex) || []).join('');
	      var j, i;
	      j = 0;

	      for (i = 0; i < caretPos; i++) {
	        var currentInputChar = inputValue[i] || '';
	        var currentFormatChar = formattedValue[j] || ''; //no need to increase new cursor position if formatted value does not have those characters
	        //case inputValue = 1a23 and formattedValue =  123

	        if (!currentInputChar.match(numRegex) && currentInputChar !== currentFormatChar) continue; //When we are striping out leading zeros maintain the new cursor position
	        //Case inputValue = 00023 and formattedValue = 23;

	        if (currentInputChar === '0' && currentFormatChar.match(numRegex) && currentFormatChar !== '0' && inputNumber.length !== formattedNumber.length) continue; //we are not using currentFormatChar because j can change here

	        while (currentInputChar !== formattedValue[j] && j < formattedValue.length) {
	          j++;
	        }

	        j++;
	      }

	      if (typeof format === 'string' && !stateValue) {
	        //set it to the maximum value so it goes after the last number
	        j = formattedValue.length;
	      } //correct caret position if its outside of editable area


	      j = this.correctCaretPosition(formattedValue, j);
	      return j;
	    }
	    /** caret specific methods ends **/

	    /** methods to remove formattting **/

	  }, {
	    key: "removePrefixAndSuffix",
	    value: function removePrefixAndSuffix(val) {
	      var _this$props4 = this.props,
	          format = _this$props4.format,
	          prefix = _this$props4.prefix,
	          suffix = _this$props4.suffix; //remove prefix and suffix

	      if (!format && val) {
	        var isNegative = val[0] === '-'; //remove negation sign

	        if (isNegative) val = val.substring(1, val.length); //remove prefix

	        val = prefix && val.indexOf(prefix) === 0 ? val.substring(prefix.length, val.length) : val; //remove suffix

	        var suffixLastIndex = val.lastIndexOf(suffix);
	        val = suffix && suffixLastIndex !== -1 && suffixLastIndex === val.length - suffix.length ? val.substring(0, suffixLastIndex) : val; //add negation sign back

	        if (isNegative) val = '-' + val;
	      }

	      return val;
	    }
	  }, {
	    key: "removePatternFormatting",
	    value: function removePatternFormatting(val) {
	      var format = this.props.format;
	      var formatArray = format.split('#').filter(function (str) {
	        return str !== '';
	      });
	      var start = 0;
	      var numStr = '';

	      for (var i = 0, ln = formatArray.length; i <= ln; i++) {
	        var part = formatArray[i] || ''; //if i is the last fragment take the index of end of the value
	        //For case like +1 (911) 911 91 91 having pattern +1 (###) ### ## ##

	        var index = i === ln ? val.length : val.indexOf(part, start);
	        /* in any case if we don't find the pattern part in the value assume the val as numeric string
	        This will be also in case if user has started typing, in any other case it will not be -1
	        unless wrong prop value is provided */

	        if (index === -1) {
	          numStr = val;
	          break;
	        } else {
	          numStr += val.substring(start, index);
	          start = index + part.length;
	        }
	      }

	      return (numStr.match(/\d/g) || []).join('');
	    }
	  }, {
	    key: "removeFormatting",
	    value: function removeFormatting(val) {
	      var _this$props5 = this.props,
	          format = _this$props5.format,
	          removeFormatting = _this$props5.removeFormatting;
	      if (!val) return val;

	      if (!format) {
	        val = this.removePrefixAndSuffix(val);
	        val = this.getFloatString(val);
	      } else if (typeof format === 'string') {
	        val = this.removePatternFormatting(val);
	      } else if (typeof removeFormatting === 'function') {
	        //condition need to be handled if format method is provide,
	        val = removeFormatting(val);
	      } else {
	        val = (val.match(/\d/g) || []).join('');
	      }

	      return val;
	    }
	    /** methods to remove formattting end **/

	    /*** format specific methods start ***/

	    /**
	     * Format when # based string is provided
	     * @param  {string} numStr Numeric String
	     * @return {string}        formatted Value
	     */

	  }, {
	    key: "formatWithPattern",
	    value: function formatWithPattern(numStr) {
	      var format = this.props.format;
	      var hashCount = 0;
	      var formattedNumberAry = format.split('');

	      for (var i = 0, ln = format.length; i < ln; i++) {
	        if (format[i] === '#') {
	          formattedNumberAry[i] = numStr[hashCount] || this.getMaskAtIndex(hashCount);
	          hashCount += 1;
	        }
	      }

	      return formattedNumberAry.join('');
	    }
	    /**
	     * @param  {string} numStr Numeric string/floatString] It always have decimalSeparator as .
	     * @return {string} formatted Value
	     */

	  }, {
	    key: "formatAsNumber",
	    value: function formatAsNumber(numStr) {
	      var _this$props6 = this.props,
	          decimalScale = _this$props6.decimalScale,
	          fixedDecimalScale = _this$props6.fixedDecimalScale,
	          prefix = _this$props6.prefix,
	          suffix = _this$props6.suffix,
	          allowNegative = _this$props6.allowNegative,
	          thousandsGroupStyle = _this$props6.thousandsGroupStyle;

	      var _this$getSeparators4 = this.getSeparators(),
	          thousandSeparator = _this$getSeparators4.thousandSeparator,
	          decimalSeparator = _this$getSeparators4.decimalSeparator;

	      var hasDecimalSeparator = numStr.indexOf('.') !== -1 || decimalScale && fixedDecimalScale;

	      var _splitDecimal = splitDecimal(numStr, allowNegative),
	          beforeDecimal = _splitDecimal.beforeDecimal,
	          afterDecimal = _splitDecimal.afterDecimal,
	          addNegation = _splitDecimal.addNegation; // eslint-disable-line prefer-const
	      //apply decimal precision if its defined


	      if (decimalScale !== undefined) afterDecimal = limitToScale(afterDecimal, decimalScale, fixedDecimalScale);

	      if (thousandSeparator) {
	        beforeDecimal = applyThousandSeparator(beforeDecimal, thousandSeparator, thousandsGroupStyle);
	      } //add prefix and suffix


	      if (prefix) beforeDecimal = prefix + beforeDecimal;
	      if (suffix) afterDecimal = afterDecimal + suffix; //restore negation sign

	      if (addNegation) beforeDecimal = '-' + beforeDecimal;
	      numStr = beforeDecimal + (hasDecimalSeparator && decimalSeparator || '') + afterDecimal;
	      return numStr;
	    }
	  }, {
	    key: "formatNumString",
	    value: function formatNumString() {
	      var numStr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
	      var _this$props7 = this.props,
	          format = _this$props7.format,
	          allowEmptyFormatting = _this$props7.allowEmptyFormatting;
	      var formattedValue = numStr;

	      if (numStr === '' && !allowEmptyFormatting) {
	        formattedValue = '';
	      } else if (numStr === '-' && !format) {
	        formattedValue = '-';
	      } else if (typeof format === 'string') {
	        formattedValue = this.formatWithPattern(formattedValue);
	      } else if (typeof format === 'function') {
	        formattedValue = format(formattedValue);
	      } else {
	        formattedValue = this.formatAsNumber(formattedValue);
	      }

	      return formattedValue;
	    }
	  }, {
	    key: "formatValueProp",
	    value: function formatValueProp(defaultValue) {
	      var _this$props8 = this.props,
	          format = _this$props8.format,
	          decimalScale = _this$props8.decimalScale,
	          fixedDecimalScale = _this$props8.fixedDecimalScale,
	          allowEmptyFormatting = _this$props8.allowEmptyFormatting;
	      var _this$props9 = this.props,
	          _this$props9$value = _this$props9.value,
	          value = _this$props9$value === void 0 ? defaultValue : _this$props9$value,
	          isNumericString = _this$props9.isNumericString;
	      var isNonNumericFalsy = !value && value !== 0;

	      if (isNonNumericFalsy && allowEmptyFormatting) {
	        value = '';
	      } // if value is not defined return empty string


	      if (isNonNumericFalsy && !allowEmptyFormatting) return '';

	      if (typeof value === 'number') {
	        value = value.toString();
	        isNumericString = true;
	      } //change infinity value to empty string


	      if (value === 'Infinity' && isNumericString) {
	        value = '';
	      } //round the number based on decimalScale
	      //format only if non formatted value is provided


	      if (isNumericString && !format && typeof decimalScale === 'number') {
	        value = roundToPrecision(value, decimalScale, fixedDecimalScale);
	      }

	      var formattedValue = isNumericString ? this.formatNumString(value) : this.formatInput(value);
	      return formattedValue;
	    }
	  }, {
	    key: "formatNegation",
	    value: function formatNegation() {
	      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
	      var allowNegative = this.props.allowNegative;
	      var negationRegex = new RegExp('(-)');
	      var doubleNegationRegex = new RegExp('(-)(.)*(-)'); // Check number has '-' value

	      var hasNegation = negationRegex.test(value); // Check number has 2 or more '-' values

	      var removeNegation = doubleNegationRegex.test(value); //remove negation

	      value = value.replace(/-/g, '');

	      if (hasNegation && !removeNegation && allowNegative) {
	        value = '-' + value;
	      }

	      return value;
	    }
	  }, {
	    key: "formatInput",
	    value: function formatInput() {
	      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
	      var format = this.props.format; //format negation only if we are formatting as number

	      if (!format) {
	        value = this.removePrefixAndSuffix(value);
	        value = this.formatNegation(value);
	      } //remove formatting from number


	      value = this.removeFormatting(value);
	      return this.formatNumString(value);
	    }
	    /*** format specific methods end ***/

	  }, {
	    key: "isCharacterAFormat",
	    value: function isCharacterAFormat(caretPos, value) {
	      var _this$props10 = this.props,
	          format = _this$props10.format,
	          prefix = _this$props10.prefix,
	          suffix = _this$props10.suffix,
	          decimalScale = _this$props10.decimalScale,
	          fixedDecimalScale = _this$props10.fixedDecimalScale;

	      var _this$getSeparators5 = this.getSeparators(),
	          decimalSeparator = _this$getSeparators5.decimalSeparator; //check within format pattern


	      if (typeof format === 'string' && format[caretPos] !== '#') return true; //check in number format

	      if (!format && (caretPos < prefix.length || caretPos >= value.length - suffix.length || decimalScale && fixedDecimalScale && value[caretPos] === decimalSeparator)) {
	        return true;
	      }

	      return false;
	    }
	  }, {
	    key: "checkIfFormatGotDeleted",
	    value: function checkIfFormatGotDeleted(start, end, value) {
	      for (var i = start; i < end; i++) {
	        if (this.isCharacterAFormat(i, value)) return true;
	      }

	      return false;
	    }
	    /**
	     * This will check if any formatting got removed by the delete or backspace and reset the value
	     * It will also work as fallback if android chome keyDown handler does not work
	     **/

	  }, {
	    key: "correctInputValue",
	    value: function correctInputValue(caretPos, lastValue, value) {
	      var _this$props11 = this.props,
	          format = _this$props11.format,
	          allowNegative = _this$props11.allowNegative,
	          prefix = _this$props11.prefix,
	          suffix = _this$props11.suffix,
	          decimalScale = _this$props11.decimalScale;

	      var _this$getSeparators6 = this.getSeparators(),
	          allowedDecimalSeparators = _this$getSeparators6.allowedDecimalSeparators,
	          decimalSeparator = _this$getSeparators6.decimalSeparator;

	      var lastNumStr = this.state.numAsString || '';
	      var _this$selectionBefore = this.selectionBeforeInput,
	          selectionStart = _this$selectionBefore.selectionStart,
	          selectionEnd = _this$selectionBefore.selectionEnd;

	      var _findChangedIndex = findChangedIndex(lastValue, value),
	          start = _findChangedIndex.start,
	          end = _findChangedIndex.end;
	      /** Check for any allowed decimal separator is added in the numeric format and replace it with decimal separator */


	      if (!format && start === end && allowedDecimalSeparators.indexOf(value[selectionStart]) !== -1) {
	        var separator = decimalScale === 0 ? '' : decimalSeparator;
	        return value.substr(0, selectionStart) + separator + value.substr(selectionStart + 1, value.length);
	      }
	      /* don't do anyhting if something got added,
	       or if value is empty string (when whole input is cleared)
	       or whole input is replace with a number
	      */


	      var leftBound = !!format ? 0 : prefix.length;
	      var rightBound = lastValue.length - (!!format ? 0 : suffix.length);

	      if (value.length > lastValue.length || !value.length || start === end || selectionStart === 0 && selectionEnd === lastValue.length || selectionStart === leftBound && selectionEnd === rightBound) {
	        return value;
	      } //if format got deleted reset the value to last value


	      if (this.checkIfFormatGotDeleted(start, end, lastValue)) {
	        value = lastValue;
	      } //for numbers check if beforeDecimal got deleted and there is nothing after decimal,
	      //clear all numbers in such case while keeping the - sign


	      if (!format) {
	        var numericString = this.removeFormatting(value);

	        var _splitDecimal2 = splitDecimal(numericString, allowNegative),
	            beforeDecimal = _splitDecimal2.beforeDecimal,
	            afterDecimal = _splitDecimal2.afterDecimal,
	            addNegation = _splitDecimal2.addNegation; // eslint-disable-line prefer-const
	        //clear only if something got deleted


	        var isBeforeDecimalPoint = caretPos < value.indexOf(decimalSeparator) + 1;

	        if (numericString.length < lastNumStr.length && isBeforeDecimalPoint && beforeDecimal === '' && !parseFloat(afterDecimal)) {
	          return addNegation ? '-' : '';
	        }
	      }

	      return value;
	    }
	    /** Update value and caret position */

	  }, {
	    key: "updateValue",
	    value: function updateValue(params) {
	      var formattedValue = params.formattedValue,
	          input = params.input,
	          _params$setCaretPosit = params.setCaretPosition,
	          setCaretPosition = _params$setCaretPosit === void 0 ? true : _params$setCaretPosit;
	      var numAsString = params.numAsString,
	          caretPos = params.caretPos;
	      var onValueChange = this.props.onValueChange;
	      var lastValue = this.state.value;

	      if (input) {
	        //set caret position, and value imperatively when element is provided
	        if (setCaretPosition) {
	          //calculate caret position if not defined
	          if (!caretPos) {
	            var inputValue = params.inputValue || input.value;
	            var currentCaretPosition = getCurrentCaretPosition(input);
	            /**
	             * set the value imperatively, this is required for IE fix
	             * This is also required as if new caret position is beyond the previous value.
	             * Caret position will not be set correctly
	             */

	            input.value = formattedValue; //get the caret position

	            caretPos = this.getCaretPosition(inputValue, formattedValue, currentCaretPosition);
	          } //set caret position


	          this.setPatchedCaretPosition(input, caretPos, formattedValue);
	        } else {
	          /**
	           * if we are not setting caret position set the value imperatively.
	           * This is required on onBlur method
	           */
	          input.value = formattedValue;
	        }
	      } //calculate numeric string if not passed


	      if (numAsString === undefined) {
	        numAsString = this.removeFormatting(formattedValue);
	      } //update state if value is changed


	      if (formattedValue !== lastValue) {
	        this.setState({
	          value: formattedValue,
	          numAsString: numAsString
	        }); // trigger onValueChange synchronously, so parent is updated along with the number format. Fix for #277, #287

	        onValueChange(this.getValueObject(formattedValue, numAsString));
	      }
	    }
	  }, {
	    key: "onChange",
	    value: function onChange(e) {
	      var el = e.target;
	      var inputValue = el.value;
	      var state = this.state,
	          props = this.props;
	      var isAllowed = props.isAllowed;
	      var lastValue = state.value || '';
	      var currentCaretPosition = getCurrentCaretPosition(el);
	      inputValue = this.correctInputValue(currentCaretPosition, lastValue, inputValue);
	      var formattedValue = this.formatInput(inputValue) || '';
	      var numAsString = this.removeFormatting(formattedValue);
	      var valueObj = this.getValueObject(formattedValue, numAsString);

	      if (!isAllowed(valueObj)) {
	        formattedValue = lastValue;
	      }

	      this.updateValue({
	        formattedValue: formattedValue,
	        numAsString: numAsString,
	        inputValue: inputValue,
	        input: el
	      });
	      props.onChange(e);
	    }
	  }, {
	    key: "onBlur",
	    value: function onBlur(e) {
	      var props = this.props,
	          state = this.state;
	      var format = props.format,
	          onBlur = props.onBlur,
	          allowLeadingZeros = props.allowLeadingZeros;
	      var numAsString = state.numAsString;
	      var lastValue = state.value;
	      this.focusedElm = null;

	      if (this.focusTimeout) {
	        clearTimeout(this.focusTimeout);
	      }

	      if (!format) {
	        // if the numAsString is not a valid number reset it to empty
	        if (isNaN(parseFloat(numAsString))) {
	          numAsString = '';
	        }

	        if (!allowLeadingZeros) {
	          numAsString = fixLeadingZero(numAsString);
	        }

	        var formattedValue = this.formatNumString(numAsString); //change the state

	        if (formattedValue !== lastValue) {
	          // the event needs to be persisted because its properties can be accessed in an asynchronous way
	          this.updateValue({
	            formattedValue: formattedValue,
	            numAsString: numAsString,
	            input: e.target,
	            setCaretPosition: false
	          });
	          onBlur(e);
	          return;
	        }
	      }

	      onBlur(e);
	    }
	  }, {
	    key: "onKeyDown",
	    value: function onKeyDown(e) {
	      var el = e.target;
	      var key = e.key;
	      var selectionStart = el.selectionStart,
	          selectionEnd = el.selectionEnd,
	          _el$value = el.value,
	          value = _el$value === void 0 ? '' : _el$value;
	      var expectedCaretPosition;
	      var _this$props12 = this.props,
	          decimalScale = _this$props12.decimalScale,
	          fixedDecimalScale = _this$props12.fixedDecimalScale,
	          prefix = _this$props12.prefix,
	          suffix = _this$props12.suffix,
	          format = _this$props12.format,
	          onKeyDown = _this$props12.onKeyDown;
	      var ignoreDecimalSeparator = decimalScale !== undefined && fixedDecimalScale;
	      var numRegex = this.getNumberRegex(false, ignoreDecimalSeparator);
	      var negativeRegex = new RegExp('-');
	      var isPatternFormat = typeof format === 'string';
	      this.selectionBeforeInput = {
	        selectionStart: selectionStart,
	        selectionEnd: selectionEnd
	      }; //Handle backspace and delete against non numerical/decimal characters or arrow keys

	      if (key === 'ArrowLeft' || key === 'Backspace') {
	        expectedCaretPosition = selectionStart - 1;
	      } else if (key === 'ArrowRight') {
	        expectedCaretPosition = selectionStart + 1;
	      } else if (key === 'Delete') {
	        expectedCaretPosition = selectionStart;
	      } //if expectedCaretPosition is not set it means we don't want to Handle keyDown
	      //also if multiple characters are selected don't handle


	      if (expectedCaretPosition === undefined || selectionStart !== selectionEnd) {
	        onKeyDown(e);
	        return;
	      }

	      var newCaretPosition = expectedCaretPosition;
	      var leftBound = isPatternFormat ? format.indexOf('#') : prefix.length;
	      var rightBound = isPatternFormat ? format.lastIndexOf('#') + 1 : value.length - suffix.length;

	      if (key === 'ArrowLeft' || key === 'ArrowRight') {
	        var direction = key === 'ArrowLeft' ? 'left' : 'right';
	        newCaretPosition = this.correctCaretPosition(value, expectedCaretPosition, direction);
	      } else if (key === 'Delete' && !numRegex.test(value[expectedCaretPosition]) && !negativeRegex.test(value[expectedCaretPosition])) {
	        while (!numRegex.test(value[newCaretPosition]) && newCaretPosition < rightBound) {
	          newCaretPosition++;
	        }
	      } else if (key === 'Backspace' && !numRegex.test(value[expectedCaretPosition])) {
	        /* NOTE: This is special case when backspace is pressed on a
	        negative value while the cursor position is after prefix. We can't handle it on onChange because
	        we will not have any information of keyPress
	        */
	        if (selectionStart <= leftBound + 1 && value[0] === '-' && typeof format === 'undefined') {
	          var newValue = value.substring(1);
	          this.updateValue({
	            formattedValue: newValue,
	            caretPos: newCaretPosition,
	            input: el
	          });
	        } else if (!negativeRegex.test(value[expectedCaretPosition])) {
	          while (!numRegex.test(value[newCaretPosition - 1]) && newCaretPosition > leftBound) {
	            newCaretPosition--;
	          }

	          newCaretPosition = this.correctCaretPosition(value, newCaretPosition, 'left');
	        }
	      }

	      if (newCaretPosition !== expectedCaretPosition || expectedCaretPosition < leftBound || expectedCaretPosition > rightBound) {
	        e.preventDefault();
	        this.setPatchedCaretPosition(el, newCaretPosition, value);
	      }
	      /* NOTE: this is just required for unit test as we need to get the newCaretPosition,
	              Remove this when you find different solution */


	      if (e.isUnitTestRun) {
	        this.setPatchedCaretPosition(el, newCaretPosition, value);
	      }

	      onKeyDown(e);
	    }
	    /** required to handle the caret position when click anywhere within the input **/

	  }, {
	    key: "onMouseUp",
	    value: function onMouseUp(e) {
	      var el = e.target;
	      /**
	       * NOTE: we have to give default value for value as in case when custom input is provided
	       * value can come as undefined when nothing is provided on value prop.
	      */

	      var selectionStart = el.selectionStart,
	          selectionEnd = el.selectionEnd,
	          _el$value2 = el.value,
	          value = _el$value2 === void 0 ? '' : _el$value2;

	      if (selectionStart === selectionEnd) {
	        var caretPosition = this.correctCaretPosition(value, selectionStart);

	        if (caretPosition !== selectionStart) {
	          this.setPatchedCaretPosition(el, caretPosition, value);
	        }
	      }

	      this.props.onMouseUp(e);
	    }
	  }, {
	    key: "onFocus",
	    value: function onFocus(e) {
	      var _this2 = this;

	      // Workaround Chrome and Safari bug https://bugs.chromium.org/p/chromium/issues/detail?id=779328
	      // (onFocus event target selectionStart is always 0 before setTimeout)
	      e.persist();
	      this.focusedElm = e.target;
	      this.focusTimeout = setTimeout(function () {
	        var el = e.target;
	        var selectionStart = el.selectionStart,
	            selectionEnd = el.selectionEnd,
	            _el$value3 = el.value,
	            value = _el$value3 === void 0 ? '' : _el$value3;

	        var caretPosition = _this2.correctCaretPosition(value, selectionStart); //setPatchedCaretPosition only when everything is not selected on focus (while tabbing into the field)


	        if (caretPosition !== selectionStart && !(selectionStart === 0 && selectionEnd === value.length)) {
	          _this2.setPatchedCaretPosition(el, caretPosition, value);
	        }

	        _this2.props.onFocus(e);
	      }, 0);
	    }
	  }, {
	    key: "render",
	    value: function render() {
	      var _this$props13 = this.props,
	          type = _this$props13.type,
	          displayType = _this$props13.displayType,
	          customInput = _this$props13.customInput,
	          renderText = _this$props13.renderText,
	          getInputRef = _this$props13.getInputRef;
	      var value = this.state.value;
	      var otherProps = omit$2(this.props, propTypes$1$1$1);

	      var inputProps = _extends$2({
	        inputMode: 'numeric'
	      }, otherProps, {
	        type: type,
	        value: value,
	        onChange: this.onChange,
	        onKeyDown: this.onKeyDown,
	        onMouseUp: this.onMouseUp,
	        onFocus: this.onFocus,
	        onBlur: this.onBlur
	      });

	      if (displayType === 'text') {
	        return renderText ? renderText(value) || null : React__default.createElement("span", _extends$2({}, otherProps, {
	          ref: getInputRef
	        }), value);
	      } else if (customInput) {
	        var CustomInput = customInput;
	        return React__default.createElement(CustomInput, _extends$2({}, inputProps, {
	          ref: getInputRef
	        }));
	      }

	      return React__default.createElement("input", _extends$2({}, inputProps, {
	        ref: getInputRef
	      }));
	    }
	  }]);

	  return NumberFormat;
	}(React__default.Component);

	NumberFormat.propTypes = propTypes$1$1$1;
	NumberFormat.defaultProps = defaultProps$2;
	//# sourceMappingURL=index.esm.js.map

	var createSvgIcon_1 = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = createSvgIcon;

	var _extends2 = interopRequireDefault(_extends_1);

	var _react = interopRequireDefault(React__default);

	var _SvgIcon = interopRequireDefault(require$$2);

	function createSvgIcon(path, displayName) {
	  var Component = _react.default.memo(_react.default.forwardRef(function (props, ref) {
	    return _react.default.createElement(_SvgIcon.default, (0, _extends2.default)({
	      ref: ref
	    }, props), path);
	  }));

	  if (process.env.NODE_ENV !== 'production') {
	    Component.displayName = "".concat(displayName, "Icon");
	  }

	  Component.muiName = _SvgIcon.default.muiName;
	  return Component;
	}
	});

	unwrapExports(createSvgIcon_1);

	var LocalShipping = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _react = interopRequireDefault(React__default);

	var _createSvgIcon = interopRequireDefault(createSvgIcon_1);

	var _default = (0, _createSvgIcon.default)(_react.default.createElement("path", {
	  d: "M20 8h-3V4H3c-1.1 0-2 .9-2 2v11h2c0 1.66 1.34 3 3 3s3-1.34 3-3h6c0 1.66 1.34 3 3 3s3-1.34 3-3h2v-5l-3-4zM6 18.5c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5zm13.5-9l1.96 2.5H17V9.5h2.5zm-1.5 9c-.83 0-1.5-.67-1.5-1.5s.67-1.5 1.5-1.5 1.5.67 1.5 1.5-.67 1.5-1.5 1.5z"
	}), 'LocalShipping');

	exports.default = _default;
	});

	var LocalShippingIcon = unwrapExports(LocalShipping);

	const isString$1 = (str) => typeof str === 'string' || str instanceof String;

	const isObject = (obj) => obj === Object(obj);

	const isFunction$1 = (fn) => typeof fn === 'function';

	// allSettled Polyfill
	if (!Promise.allSettled) {
	  Promise.allSettled = promises =>
	    Promise.all(
	      promises.map((promise, i) =>
	        promise
	          .then(value => ({
	            status: 'fulfilled',
	            value,
	          }))
	          .catch(reason => ({
	            status: 'rejected',
	            reason,
	          }))
	      )
	    );
	}

	class Source {
	  constructor(middleware, defaults, dst, err, notify) {
	    Object.defineProperties(this, {
	      __middleware: {
	        value: middleware || {},
	      },
	      __defaults: {
	        value: defaults || {},
	      },
	      __dst: {
	        value: dst || {},
	      },
	      __err: {
	        value: err || {},
	      },
	      __running: {
	        value: {},
	      },
	      __waitingValues: {
	        value: {},
	      },
	      __hooks: {
	        value: {},
	      },
	      __notify: {
	        value: notify,
	      },
	    });

	    if (isObject(this.__middleware)) {
	      for (const prop of Object.keys(this.__middleware)) {
	        if (isFunction$1(this.__middleware[prop])) {
	          this.__middleware[prop] = [this.__middleware[prop]];
	          // support for [0, (v) => v] syntax for using the first value as the
	          // default
	        } else if (!Array.isArray(this.__middleware[prop])) {
	          this.__defaults[prop] = this.__middleware[prop];
	          this.__middleware[prop] = [];
	        }

	        if (!isFunction$1(this.__middleware[prop][0])) {
	          this.__defaults[prop] = this.__middleware[prop].shift();
	        }

	        this.prop(prop, undefined, ...this.__middleware[prop]);
	      }

	      for (const prop of Object.keys(this.__defaults)) {
	        if (!this.__middleware[prop]) {
	          this.prop(prop);
	        }
	        this[prop] = this.__defaults[prop];
	      }
	    } else {
	      throw new Error('source: middleware must be an object')
	    }
	  }

	  // run a chain of middleware
	  static async runMiddleware(src, value, middleware) {
	    if (!src) {
	      throw new Error('source.runMiddleware: source undefined')
	    }

	    if (!middleware || !middleware.length) {
	      return value
	    }

	    // clone the middleware because middleware may modified by a middleware
	    // (advanced)
	    const mw = middleware.slice(0);

	    let lastValue = value;
	    if (isObject(value)) {
	      lastValue = Object.assign({}, value);
	    }

	    for (const m of mw) {
	      const newValue = await m.call(src, value, lastValue, src, mw);
	      lastValue = value;
	      value = newValue;
	    }

	    return value
	  }

	  // update a single prop's destination
	  static async updateDst(src, prop, value) {
	    if (!src) {
	      throw new Error('source.updateDst: source undefined')
	    }

	    if (!src.__dst) {
	      throw new Error('source.updateDst: destination undefined')
	    }

	    if (isFunction$1(src.__dst)) {
	      return await src.__dst(prop, value)
	    }

	    return src.__dst[prop] = value
	  }

	  // update a single prop's error
	  static async updateErr(src, prop, err) {
	    if (!src) {
	      throw new Error('source.updateErr: source undefined')
	    }

	    if (!src.__err) {
	      throw new Error('source.updateErr: errors undefined')
	    }

	    if (isFunction$1(src.__err)) {
	      return await src.__err(prop, err)
	    }

	    if (err === undefined) {
	      delete src.__err[prop];
	      return undefined
	    }

	    return src.__err[prop] = err
	  }

	  // wait for all the middleware to complete all runs
	  async waitAll() {
	    let ps, res;
	    do {
	      res = undefined;
	      ps = [];
	      for (let prop in this.__running) {
	        ps.push(this.__running[prop]);
	      }

	      try {
	        res = await Promise.all(ps);
	      } catch (e) {
	        return e
	      }
	    } while(res && res.length > 0)
	  }

	  // wait for a specific middleware to complete the most current run
	  async wait(prop) {
	    if (!prop) {
	      return await this.waitAll()
	    }

	    while(this.__running[prop]) {
	      try {
	        await this.__running[prop];
	      } catch (e) {
	        return e
	      }
	    }
	  }

	  // run the middleware for a specific prop, or overwrite with value, return the value or error.
	  // Use rethrow to rethrow the error. Returns the value assigned or error.
	  async run(prop, value, ignoreErrors) {
	    if (!prop) {
	      return await this.runAll()
	    }

	    try {
	      this.__waitingValues[prop] = value === undefined ? this[prop] : value;

	      let ret;

	      // just do this at the same time, somewhat of a hack
	      Source.updateErr(this, prop, undefined);
	      while (this.__waitingValues.hasOwnProperty(prop)) {

	        const v = this.__waitingValues[prop];

	        const p = Source.runMiddleware(this, v === undefined ? this[prop] : v, this.__middleware[prop]);
	        this.__running[prop] = p;
	        delete this.__waitingValues[prop];
	        const y = await p;

	        ret = await Source.updateDst(this, prop, y);
	      }

	      delete this.__running[prop];
	      return ret
	    } catch (err) {
	      delete this.__running[prop];
	      const e = (await Source.updateErr(this, prop, err)) || err;

	      if (ignoreErrors) {
	        return e
	      }

	      throw e
	    }
	  }

	  // runAll calls run for every prop asynchronously and waits until they are
	  // finished to return the result or the the first error.
	  async runAll() {
	    let ps = [];
	    let result = {};

	    for (const prop of Object.keys(this)) {
	      ps.push(this.run(prop).then((x) => result[prop] = x ));
	    }

	    try {
	      await Promise.all(ps);
	    } catch (e) {
	      return e
	    }
	    return result
	  }

	  // runSettle calls run for every prop asynchronously and waits until they are
	  // finished to return the results of each execution whether valid or error in
	  // the form of Promise.settleAll except a map.
	  async runSettle() {
	    let ps = [];
	    let props = Object.keys(this);

	    for (const prop of props) {
	      ps.push(this.run(prop));
	    }

	    let ret = await Promise.allSettled(ps);

	    let result = {};
	    for (const k in props) {
	      result[props[k]] = ret[k];
	    }

	    return result
	  }

	  // test the middleware for a specific prop, return the value or error.  Use
	  // setError to save the error and rethrow to rethrow the error.  Returns the value to be assigned or error.
	  async test(prop, setError) {
	    try {
	      return await Source.runMiddleware(this, this[prop], middleware)
	    } catch (err) {
	      if (setError) {
	        await Source.updateErr(this, prop, err);
	      }

	      throw err
	    }
	  }

	  // prop defines a property named prop with initial value
	  // and a asynchronous middleware chain that is executed when prop
	  // is set.  It can overwrite existing props.
	  prop(prop, initial, ...middleware) {
	    if (!isString$1(prop) && prop !== '') {
	      throw new Error(`source.prop: prop is not a string or is ''`)
	    }

	    this.__middleware[prop] = middleware;

	    let p;

	    Object.defineProperties(this, {
	      [`_${prop}`]: {
	        value: undefined,
	        writable: true,
	      },
	      [prop]: {
	        get: () => {
	          return this[`_${prop}`]
	        },
	        set: (x) => {
	          if (x === this[`_${prop}`]) {
	            return
	          }

	          this[`_${prop}`] = x;
	          p = this.run(prop, x, true);
	        },
	        // act like a normal property
	        enumerable: true,
	      }
	    });

	    if (initial !== undefined) {
	      this[prop] = initial;
	    }

	    return this.__hooks[prop] = [() => this[prop], (value) => {
	      this[prop] = value;
	      return p
	    }, () => this.__dst[prop]]
	  }

	  // hook gets a React style getter/setter pair for a prop on this
	  // object, returns undefined if prop does not exist.
	  hook(prop) {
	    if (!this.hasOwnProperty(prop)) {
	      throw new Error(`source.hook: prop ''${prop}' does not exist`)
	    }

	    return this.__hooks[prop]
	  }

	  // returns all the values on source without any member variables
	}

	const midstream = (middleware, opts = {}) => {
	  const src = new Source(middleware, opts.defaults, opts.dst || opts.destination, opts.err || opts.errors, opts.notify);

	  const ret = {
	    src,
	    dst: src.__dst,
	    err: src.__err,
	    hooks: src.__hooks,
	    runAll:  function() { return src.runAll.apply(src, arguments) },
	    run:     function() { return src.run.apply(src, arguments) },
	    waitAll: function() { return src.waitAll.apply(src, arguments) },
	    wait:    function() { return src.wait.apply(src,arguments) },
	    source: src,
	    destination: src.__dst,
	    errors: src.__err,
	  };

	  for (let prop in src.__hooks) {
	    let hook = src.__hooks[prop];
	    let hookName = prop.split('.').map(x => x.charAt(0).toUpperCase() + x.substring(1)).join('');

	    Object.defineProperty(ret, hookName.charAt(0).toLowerCase() + hookName.substring(1), {
	      get: hook[0]
	    });

	    ret['set' + hookName] = hook[1];
	  }

	  return ret
	};
	//# sourceMappingURL=midstream.esm.js.map

	const useMidstream = (config, opts) => {
	    const [dst, setDst] = React.useState(() => opts.dst || opts.destination || {});
	    const [err, setErr] = React.useState(() => opts.err || opts.errors || {});
	    // standard force rerender hack
	    const [, setTick] = React.useState(0);
	    const [ms] = React.useState(() => {
	        let tick = 0;
	        return midstream(config, {
	            dst: (name, value) => {
	                if (isFunction(dst)) {
	                    dst(name, value);
	                }
	                else {
	                    dst[name] = value;
	                }
	                setTick(tick++);
	            },
	            // err behaves just like dst
	            err: (name, value) => {
	                if (isFunction(err)) {
	                    err(name, value);
	                }
	                else {
	                    err[name] = value;
	                }
	                setTick(tick++);
	            },
	        });
	    });
	    const ret = { ...ms };
	    return Object.assign(ret, {
	        get dst() {
	            return dst;
	        },
	        get err() {
	            return err;
	        },
	    });
	};

	var emailRe = /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;

	var isEmail = function isEmail(value) {
	  if (!value) {
	    return value;
	  }

	  if (emailRe.test(value)) {
	    return value.toLowerCase();
	  }

	  throw new Error('Enter a valid email');
	};

	// This file is a workaround for a bug in web browsers' "native"
	// ES6 importing system which is uncapable of importing "*.json" files.
	// https://github.com/catamphetamine/libphonenumber-js/issues/239
	var metadata = {"version":"1.7.50","country_calling_codes":{},"countries":{"AC":["247","00","(?:[01589]\\d|[46])\\d{4}",[5,6]],"AD":["376","00","(?:1|6\\d)\\d{7}|[135-9]\\d{5}",[6,8,9],[["(\\d{3})(\\d{3})","$1 $2",["[135-9]"]],["(\\d{4})(\\d{4})","$1 $2",["1"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["6"]]]],"AE":["971","00","(?:[4-7]\\d|9[0-689])\\d{7}|800\\d{2,9}|[2-4679]\\d{7}",[5,6,7,8,9,10,11,12],[["(\\d{3})(\\d{2,9})","$1 $2",["60|8"]],["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["[236]|[479][2-8]"],"0$1"],["(\\d{3})(\\d)(\\d{5})","$1 $2 $3",["[479]"]],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["5"],"0$1"]],"0"],"AF":["93","00","[2-7]\\d{8}",[9],[["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[2-7]"],"0$1"]],"0"],"AG":["1","011","(?:268|[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"1|([457]\\d{6})$","268$1",0,"268"],"AI":["1","011","(?:264|[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"1|([2457]\\d{6})$","264$1",0,"264"],"AL":["355","00","(?:700\\d\\d|900)\\d{3}|8\\d{5,7}|(?:[2-5]|6\\d)\\d{7}",[6,7,8,9],[["(\\d{3})(\\d{3,4})","$1 $2",["80|9"],"0$1"],["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["4[2-6]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["[2358][2-5]|4"],"0$1"],["(\\d{3})(\\d{5})","$1 $2",["[23578]"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["6"],"0$1"]],"0"],"AM":["374","00","(?:[1-489]\\d|55|60|77)\\d{6}",[8],[["(\\d{3})(\\d{2})(\\d{3})","$1 $2 $3",["[89]0"],"0 $1"],["(\\d{3})(\\d{5})","$1 $2",["2|3[12]"],"(0$1)"],["(\\d{2})(\\d{6})","$1 $2",["1|47"],"(0$1)"],["(\\d{2})(\\d{6})","$1 $2",["[3-9]"],"0$1"]],"0"],"AO":["244","00","[29]\\d{8}",[9],[["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[29]"]]]],"AR":["54","00","11\\d{8}|(?:[2368]|9\\d)\\d{9}",[10,11],[["(\\d{4})(\\d{2})(\\d{4})","$1 $2-$3",["2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9])","2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8]))|2(?:2[24-9]|3[1-59]|47)","2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5[56][46]|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]","2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|58|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|54(?:4|5[13-7]|6[89])|86[3-6]))|2(?:2[24-9]|3[1-59]|47)|38(?:[58][78]|7[378])|3(?:454|85[56])[46]|3(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]"],"0$1",1],["(\\d{2})(\\d{4})(\\d{4})","$1 $2-$3",["1"],"0$1",1],["(\\d{3})(\\d{3})(\\d{4})","$1-$2-$3",["[68]"],"0$1"],["(\\d{3})(\\d{3})(\\d{4})","$1 $2-$3",["[23]"],"0$1",1],["(\\d)(\\d{4})(\\d{2})(\\d{4})","$2 15-$3-$4",["9(?:2[2-469]|3[3-578])","9(?:2(?:2[024-9]|3[0-59]|47|6[245]|9[02-8])|3(?:3[28]|4[03-9]|5[2-46-8]|7[1-578]|8[2-9]))","9(?:2(?:[23]02|6(?:[25]|4[6-8])|9(?:[02356]|4[02568]|72|8[23]))|3(?:3[28]|4(?:[04679]|3[5-8]|5[4-68]|8[2379])|5(?:[2467]|3[237]|8[2-5])|7[1-578]|8(?:[2469]|3[2578]|5[4-8]|7[36-8]|8[5-8])))|92(?:2[24-9]|3[1-59]|47)","9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3[78]|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8[23])|7[1-578]|8(?:[2469]|3[278]|5(?:[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4[35][56]|58[45]|8(?:[38]5|54|76))[4-6]","9(?:2(?:[23]02|6(?:[25]|4(?:64|[78]))|9(?:[02356]|4(?:[0268]|5[2-6])|72|8[23]))|3(?:3[28]|4(?:[04679]|3(?:5(?:4[0-25689]|[56])|[78])|5(?:4[46]|8)|8[2379])|5(?:[2467]|3[237]|8(?:[23]|4(?:[45]|60)|5(?:4[0-39]|5|64)))|7[1-578]|8(?:[2469]|3[278]|5(?:4(?:4|5[13-7]|6[89])|[56][46]|[78])|7[378]|8(?:6[3-6]|[78]))))|92(?:2[24-9]|3[1-59]|47)|93(?:4(?:36|5[56])|8(?:[38]5|76))[4-6]"],"0$1",0,"$1 $2 $3-$4"],["(\\d)(\\d{2})(\\d{4})(\\d{4})","$2 15-$3-$4",["91"],"0$1",0,"$1 $2 $3-$4"],["(\\d)(\\d{3})(\\d{3})(\\d{4})","$2 15-$3-$4",["9"],"0$1",0,"$1 $2 $3-$4"]],"0",0,"0?(?:(11|2(?:2(?:02?|[13]|2[13-79]|4[1-6]|5[2457]|6[124-8]|7[1-4]|8[13-6]|9[1267])|3(?:02?|1[467]|2[03-6]|3[13-8]|[49][2-6]|5[2-8]|[67])|4(?:7[3-578]|9)|6(?:[0136]|2[24-6]|4[6-8]?|5[15-8])|80|9(?:0[1-3]|[19]|2\\d|3[1-6]|4[02568]?|5[2-4]|6[2-46]|72?|8[23]?))|3(?:3(?:2[79]|6|8[2578])|4(?:0[0-24-9]|[12]|3[5-8]?|4[24-7]|5[4-68]?|6[02-9]|7[126]|8[2379]?|9[1-36-8])|5(?:1|2[1245]|3[237]?|4[1-46-9]|6[2-4]|7[1-6]|8[2-5]?)|6[24]|7(?:[069]|1[1568]|2[15]|3[145]|4[13]|5[14-8]|7[2-57]|8[126])|8(?:[01]|2[15-7]|3[2578]?|4[13-6]|5[4-8]?|6[1-357-9]|7[36-8]?|8[5-8]?|9[124])))15)?","9$1"],"AS":["1","011","(?:[58]\\d\\d|684|900)\\d{7}",[10],0,"1",0,"1|([267]\\d{6})$","684$1",0,"684"],"AT":["43","00","1\\d{3,12}|2\\d{6,12}|43(?:(?:0\\d|5[02-9])\\d{3,9}|2\\d{4,5}|[3467]\\d{4}|8\\d{4,6}|9\\d{4,7})|5\\d{4,12}|8\\d{7,12}|9\\d{8,12}|(?:[367]\\d|4[0-24-9])\\d{4,11}",[4,5,6,7,8,9,10,11,12,13],[["(\\d)(\\d{3,12})","$1 $2",["1(?:11|[2-9])"],"0$1"],["(\\d{3})(\\d{2})","$1 $2",["517"],"0$1"],["(\\d{2})(\\d{3,5})","$1 $2",["5[079]"],"0$1"],["(\\d{3})(\\d{3,10})","$1 $2",["(?:31|4)6|51|6(?:5[0-3579]|[6-9])|7(?:20|32|8)|[89]"],"0$1"],["(\\d{4})(\\d{3,9})","$1 $2",["[2-467]|5[2-6]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["5"],"0$1"],["(\\d{2})(\\d{4})(\\d{4,7})","$1 $2 $3",["5"],"0$1"]],"0"],"AU":["61","001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011","1(?:[0-79]\\d{7,8}|8[0-24-9]\\d{7})|(?:[2-478]\\d\\d|550)\\d{6}|1\\d{4,7}",[5,6,7,8,9,10],[["(\\d{2})(\\d{3,4})","$1 $2",["16"],"0$1"],["(\\d{2})(\\d{3})(\\d{2,4})","$1 $2 $3",["16"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["14|[45]"],"0$1"],["(\\d)(\\d{4})(\\d{4})","$1 $2 $3",["[2378]"],"(0$1)"],["(\\d{4})(\\d{3})(\\d{3})","$1 $2 $3",["1(?:30|[89])"]]],"0",0,"0|(183[12])",0,0,0,[["(?:[237]\\d{5}|8(?:51(?:0(?:0[03-9]|[1247]\\d|3[2-9]|5[0-8]|6[1-9]|8[0-6])|1(?:1[69]|[23]\\d|4[0-4]))|(?:[6-8]\\d{3}|9(?:[02-9]\\d\\d|1(?:[0-57-9]\\d|6[0135-9])))\\d))\\d{3}",[9]],["483[0-3]\\d{5}|4(?:[0-3]\\d|4[047-9]|5[0-25-9]|6[06-9]|7[02-9]|8[0-2457-9]|9[0-27-9])\\d{6}",[9]],["180(?:0\\d{3}|2)\\d{3}",[7,10]],["190[0-26]\\d{6}",[10]],0,0,0,["16\\d{3,7}",[5,6,7,8,9]],["(?:14(?:5(?:1[0458]|[23][458])|71\\d)|550\\d\\d)\\d{4}",[9]],["13(?:00\\d{3}|45[0-4])\\d{3}|13\\d{4}",[6,8,10]]],"0011"],"AW":["297","00","(?:[25-79]\\d\\d|800)\\d{4}",[7],[["(\\d{3})(\\d{4})","$1 $2",["[25-9]"]]]],"AX":["358","00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))","2\\d{4,9}|35\\d{4,5}|(?:60\\d\\d|800)\\d{4,6}|7\\d{5,11}|(?:[14]\\d|3[0-46-9]|50)\\d{4,8}",[5,6,7,8,9,10,11,12],0,"0",0,0,0,0,"18",0,"00"],"AZ":["994","00","365\\d{6}|(?:[124579]\\d|60|88)\\d{7}",[9],[["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["90"],"0$1"],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["1[28]|2|365|46","1[28]|2|365|46","1[28]|2|365(?:[0-46-9]|5[0-35-9])|46"],"(0$1)"],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[13-9]"],"0$1"]],"0"],"BA":["387","00","6\\d{8}|(?:[35689]\\d|49|70)\\d{6}",[8,9],[["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["6[1-3]|[7-9]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3})","$1 $2-$3",["[3-5]|6[56]"],"0$1"],["(\\d{2})(\\d{2})(\\d{2})(\\d{3})","$1 $2 $3 $4",["6"],"0$1"]],"0"],"BB":["1","011","(?:246|[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"1|([2-9]\\d{6})$","246$1",0,"246"],"BD":["880","00","1\\d{9}|2\\d{7,8}|88\\d{4,6}|(?:8[0-79]|9\\d)\\d{4,8}|(?:[346]\\d|[57])\\d{5,8}",[6,7,8,9,10],[["(\\d{2})(\\d{4,6})","$1-$2",["31[5-8]|[459]1"],"0$1"],["(\\d{3})(\\d{3,7})","$1-$2",["3(?:[67]|8[013-9])|4(?:6[168]|7|[89][18])|5(?:6[128]|9)|6(?:28|4[14]|5)|7[2-589]|8(?:0[014-9]|[12])|9[358]|(?:3[2-5]|4[235]|5[2-578]|6[0389]|76|8[3-7]|9[24])1|(?:44|66)[01346-9]"],"0$1"],["(\\d{4})(\\d{3,6})","$1-$2",["[13-9]"],"0$1"],["(\\d)(\\d{7,8})","$1-$2",["2"],"0$1"]],"0"],"BE":["32","00","4\\d{8}|[1-9]\\d{7}",[8,9],[["(\\d{3})(\\d{2})(\\d{3})","$1 $2 $3",["(?:80|9)0"],"0$1"],["(\\d)(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[239]|4[23]"],"0$1"],["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[15-8]"],"0$1"],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["4"],"0$1"]],"0"],"BF":["226","00","[025-7]\\d{7}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[025-7]"]]]],"BG":["359","00","[2-7]\\d{6,7}|[89]\\d{6,8}|2\\d{5}",[6,7,8,9],[["(\\d)(\\d)(\\d{2})(\\d{2})","$1 $2 $3 $4",["2"],"0$1"],["(\\d{3})(\\d{4})","$1 $2",["43[1-6]|70[1-9]"],"0$1"],["(\\d)(\\d{3})(\\d{3,4})","$1 $2 $3",["2"],"0$1"],["(\\d{2})(\\d{3})(\\d{2,3})","$1 $2 $3",["[356]|4[124-7]|7[1-9]|8[1-6]|9[1-7]"],"0$1"],["(\\d{3})(\\d{2})(\\d{3})","$1 $2 $3",["(?:70|8)0"],"0$1"],["(\\d{3})(\\d{3})(\\d{2})","$1 $2 $3",["43[1-7]|7"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[48]|9[08]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["9"],"0$1"]],"0"],"BH":["973","00","[136-9]\\d{7}",[8],[["(\\d{4})(\\d{4})","$1 $2",["[13679]|8[047]"]]]],"BI":["257","00","(?:[267]\\d|31)\\d{6}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[2367]"]]]],"BJ":["229","00","(?:[2689]\\d|51)\\d{6}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[25689]"]]]],"BL":["590","00","(?:590|69\\d|976)\\d{6}",[9],0,"0",0,0,0,0,0,[["590(?:2[7-9]|5[12]|87)\\d{4}"],["69(?:0\\d\\d|1(?:2[29]|3[0-5]))\\d{4}"],0,0,0,0,0,0,["976[01]\\d{5}"]]],"BM":["1","011","(?:441|[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"1|([2-8]\\d{6})$","441$1",0,"441"],"BN":["673","00","[2-578]\\d{6}",[7],[["(\\d{3})(\\d{4})","$1 $2",["[2-578]"]]]],"BO":["591","00(?:1\\d)?","(?:[2-467]\\d\\d|8001)\\d{5}",[8,9],[["(\\d)(\\d{7})","$1 $2",["[23]|4[46]"]],["(\\d{8})","$1",["[67]"]],["(\\d{3})(\\d{2})(\\d{4})","$1 $2 $3",["8"]]],"0",0,"0(1\\d)?"],"BQ":["599","00","(?:[34]1|7\\d)\\d{5}",[7],0,0,0,0,0,0,"[347]"],"BR":["55","00(?:1[245]|2[1-35]|31|4[13]|[56]5|99)","(?:[1-46-9]\\d\\d|5(?:[0-46-9]\\d|5[0-24679]))\\d{8}|[1-9]\\d{9}|[3589]\\d{8}|[34]\\d{7}",[8,9,10,11],[["(\\d{4})(\\d{4})","$1-$2",["300|4(?:0[02]|37)","4(?:02|37)0|[34]00"]],["(\\d{3})(\\d{2,3})(\\d{4})","$1 $2 $3",["(?:[358]|90)0"],"0$1"],["(\\d{2})(\\d{4})(\\d{4})","$1 $2-$3",["(?:[14689][1-9]|2[12478]|3[1-578]|5[13-5]|7[13-579])[2-57]"],"($1)"],["(\\d{2})(\\d{5})(\\d{4})","$1 $2-$3",["[16][1-9]|[2-57-9]"],"($1)"]],"0",0,"0(?:(1[245]|2[1-35]|31|4[13]|[56]5|99)(\\d{10,11}))?","$2"],"BS":["1","011","(?:242|[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"1|([3-8]\\d{6})$","242$1",0,"242"],"BT":["975","00","[17]\\d{7}|[2-8]\\d{6}",[7,8],[["(\\d)(\\d{3})(\\d{3})","$1 $2 $3",["[2-68]|7[246]"]],["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["1[67]|7"]]]],"BW":["267","00","90\\d{5}|(?:[2-6]|7\\d)\\d{6}",[7,8],[["(\\d{2})(\\d{5})","$1 $2",["90"]],["(\\d{3})(\\d{4})","$1 $2",["[2-6]"]],["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["7"]]]],"BY":["375","810","(?:[12]\\d|33|44|902)\\d{7}|8(?:0[0-79]\\d{5,7}|[1-7]\\d{9})|8(?:1[0-489]|[5-79]\\d)\\d{7}|8[1-79]\\d{6,7}|8[0-79]\\d{5}|8\\d{5}",[6,7,8,9,10,11],[["(\\d{3})(\\d{3})","$1 $2",["800"],"8 $1"],["(\\d{3})(\\d{2})(\\d{2,4})","$1 $2 $3",["800"],"8 $1"],["(\\d{4})(\\d{2})(\\d{3})","$1 $2-$3",["1(?:5[169]|6[3-5]|7[179])|2(?:1[35]|2[34]|3[3-5])","1(?:5[169]|6(?:3[1-3]|4|5[125])|7(?:1[3-9]|7[0-24-6]|9[2-7]))|2(?:1[35]|2[34]|3[3-5])"],"8 0$1"],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2-$3-$4",["1(?:[56]|7[467])|2[1-3]"],"8 0$1"],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2-$3-$4",["[1-4]"],"8 0$1"],["(\\d{3})(\\d{3,4})(\\d{4})","$1 $2 $3",["[89]"],"8 $1"]],"8",0,"0|80?",0,0,0,0,"8~10"],"BZ":["501","00","(?:0800\\d|[2-8])\\d{6}",[7,11],[["(\\d{3})(\\d{4})","$1-$2",["[2-8]"]],["(\\d)(\\d{3})(\\d{4})(\\d{3})","$1-$2-$3-$4",["0"]]]],"CA":["1","011","(?:[2-8]\\d|90)\\d{8}",[10],0,"1",0,0,0,0,0,[["(?:2(?:04|[23]6|[48]9|50)|3(?:06|43|6[57])|4(?:03|1[68]|3[178]|50)|5(?:06|1[49]|48|79|8[17])|6(?:04|13|39|47|72)|7(?:0[59]|78|8[02])|8(?:[06]7|19|25|73)|90[25])[2-9]\\d{6}"],[""],["8(?:00|33|44|55|66|77|88)[2-9]\\d{6}"],["900[2-9]\\d{6}"],["52(?:35(?:[02-46-9]\\d|1[02-9]|5[0-46-9])|45(?:[034]\\d|1[02-9]|2[024-9]|5[0-46-9]))\\d{4}|52(?:3[2-46-9]|4[2-4])(?:[02-9]\\d|1[02-9])\\d{4}|(?:5(?:00|2[12]|33|44|66|77|88)|622)[2-9]\\d{6}"],0,0,0,["600[2-9]\\d{6}"]]],"CC":["61","001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011","1(?:[0-79]\\d|8[0-24-9])\\d{7}|(?:[148]\\d\\d|550)\\d{6}|1\\d{5,7}",[6,7,8,9,10],0,"0",0,"0|([59]\\d{7})$","8$1",0,0,[["8(?:51(?:0(?:02|31|60)|118)|91(?:0(?:1[0-2]|29)|1(?:[28]2|50|79)|2(?:10|64)|3(?:[06]8|22)|4[29]8|62\\d|70[23]|959))\\d{3}",[9]],["483[0-3]\\d{5}|4(?:[0-3]\\d|4[047-9]|5[0-25-9]|6[06-9]|7[02-9]|8[0-2457-9]|9[0-27-9])\\d{6}",[9]],["180(?:0\\d{3}|2)\\d{3}",[7,10]],["190[0-26]\\d{6}",[10]],0,0,0,0,["(?:14(?:5(?:1[0458]|[23][458])|71\\d)|550\\d\\d)\\d{4}",[9]],["13(?:00\\d{3}|45[0-4])\\d{3}|13\\d{4}",[6,8,10]]],"0011"],"CD":["243","00","[189]\\d{8}|[1-68]\\d{6}",[7,9],[["(\\d{2})(\\d{2})(\\d{3})","$1 $2 $3",["88"],"0$1"],["(\\d{2})(\\d{5})","$1 $2",["[1-6]"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["1"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[89]"],"0$1"]],"0"],"CF":["236","00","(?:[27]\\d{3}|8776)\\d{4}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[278]"]]]],"CG":["242","00","222\\d{6}|(?:0\\d|80)\\d{7}",[9],[["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["801"]],["(\\d)(\\d{4})(\\d{4})","$1 $2 $3",["8"]],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[02]"]]]],"CH":["41","00","8\\d{11}|[2-9]\\d{8}",[9],[["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["8[047]|90"],"0$1"],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[2-79]|81"],"0$1"],["(\\d{3})(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4 $5",["8"],"0$1"]],"0"],"CI":["225","00","[02-9]\\d{7}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[02-9]"]]]],"CK":["682","00","[2-578]\\d{4}",[5],[["(\\d{2})(\\d{3})","$1 $2",["[2-578]"]]]],"CL":["56","(?:0|1(?:1[0-69]|2[02-5]|5[13-58]|69|7[0167]|8[018]))0","12300\\d{6}|6\\d{9,10}|[2-9]\\d{8}",[9,10,11],[["(\\d{5})(\\d{4})","$1 $2",["219","2196"],"($1)"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["44"]],["(\\d)(\\d{4})(\\d{4})","$1 $2 $3",["2[1-3]"],"($1)"],["(\\d)(\\d{4})(\\d{4})","$1 $2 $3",["9[2-9]"]],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["3[2-5]|[47]|5[1-3578]|6[13-57]|8(?:0[1-9]|[1-9])"],"($1)"],["(\\d{3})(\\d{3})(\\d{3,4})","$1 $2 $3",["60|8"]],["(\\d{4})(\\d{3})(\\d{4})","$1 $2 $3",["1"]],["(\\d{3})(\\d{3})(\\d{2})(\\d{3})","$1 $2 $3 $4",["60"]]]],"CM":["237","00","(?:[26]\\d\\d|88)\\d{6}",[8,9],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["88"]],["(\\d)(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4 $5",["[26]"]]]],"CN":["86","00|1(?:[12]\\d|79)\\d\\d00","1[127]\\d{8,9}|2\\d{9}(?:\\d{2})?|[12]\\d{6,7}|86\\d{6}|(?:1[03-689]\\d|6)\\d{7,9}|(?:[3-579]\\d|8[0-57-9])\\d{6,9}",[7,8,9,10,11,12],[["(\\d{2})(\\d{5,6})","$1 $2",["(?:10|2[0-57-9])[19]","(?:10|2[0-57-9])(?:10|9[56])","(?:10|2[0-57-9])(?:100|9[56])"],"0$1"],["(\\d{3})(\\d{5,6})","$1 $2",["3(?:[157]|35|49|9[1-68])|4(?:[17]|2[179]|6[47-9]|8[23])|5(?:[1357]|2[37]|4[36]|6[1-46]|80)|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]|4[13]|5[1-5])|(?:4[35]|59|85)[1-9]","(?:3(?:[157]\\d|35|49|9[1-68])|4(?:[17]\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\d|5[1-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\d|4[13]|5[1-5]))[19]","85[23](?:10|95)|(?:3(?:[157]\\d|35|49|9[1-68])|4(?:[17]\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\d|4[13]|5[1-5]))(?:10|9[56])","85[23](?:100|95)|(?:3(?:[157]\\d|35|49|9[1-68])|4(?:[17]\\d|2[179]|[35][1-9]|6[47-9]|8[23])|5(?:[1357]\\d|2[37]|4[36]|6[1-46]|80|9[1-9])|6(?:3[1-5]|6[0238]|9[12])|7(?:01|[1579]\\d|2[248]|3[014-9]|4[3-6]|6[023689])|8(?:1[236-8]|2[5-7]|[37]\\d|5[14-9]|8[36-8]|9[1-8])|9(?:0[1-3689]|1[1-79]|[379]\\d|4[13]|5[1-5]))(?:100|9[56])"],"0$1"],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["(?:4|80)0"]],["(\\d{2})(\\d{4})(\\d{4})","$1 $2 $3",["10|2(?:[02-57-9]|1[1-9])","10|2(?:[02-57-9]|1[1-9])","10[0-79]|2(?:[02-57-9]|1[1-79])|(?:10|21)8(?:0[1-9]|[1-9])"],"0$1",1],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["3(?:[3-59]|7[02-68])|4(?:[26-8]|3[3-9]|5[2-9])|5(?:3[03-9]|[468]|7[028]|9[2-46-9])|6|7(?:[0-247]|3[04-9]|5[0-4689]|6[2368])|8(?:[1-358]|9[1-7])|9(?:[013479]|5[1-5])|(?:[34]1|55|79|87)[02-9]"],"0$1",1],["(\\d{3})(\\d{7,8})","$1 $2",["9"]],["(\\d{4})(\\d{3})(\\d{4})","$1 $2 $3",["80"],"0$1",1],["(\\d{3})(\\d{4})(\\d{4})","$1 $2 $3",["[3-578]"],"0$1",1],["(\\d{3})(\\d{4})(\\d{4})","$1 $2 $3",["1[3-9]"]],["(\\d{2})(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3 $4",["[12]"],"0$1",1]],"0",0,"0|(1(?:[12]\\d|79)\\d\\d)",0,0,0,0,"00"],"CO":["57","00(?:4(?:[14]4|56)|[579])","(?:1\\d|3)\\d{9}|[124-8]\\d{7}",[8,10,11],[["(\\d)(\\d{7})","$1 $2",["[14][2-9]|[25-8]"],"($1)"],["(\\d{3})(\\d{7})","$1 $2",["3"]],["(\\d)(\\d{3})(\\d{7})","$1-$2-$3",["1"],"0$1",0,"$1 $2 $3"]],"0",0,"0([3579]|4(?:[14]4|56))?"],"CR":["506","00","(?:8\\d|90)\\d{8}|(?:[24-8]\\d{3}|3005)\\d{4}",[8,10],[["(\\d{4})(\\d{4})","$1 $2",["[2-7]|8[3-9]"]],["(\\d{3})(\\d{3})(\\d{4})","$1-$2-$3",["[89]"]]],0,0,"(19(?:0[0-2468]|1[09]|20|66|77|99))"],"CU":["53","119","[27]\\d{6,7}|[34]\\d{5,7}|(?:5|8\\d\\d)\\d{7}",[6,7,8,10],[["(\\d{2})(\\d{4,6})","$1 $2",["2[1-4]|[34]"],"(0$1)"],["(\\d)(\\d{6,7})","$1 $2",["7"],"(0$1)"],["(\\d)(\\d{7})","$1 $2",["5"],"0$1"],["(\\d{3})(\\d{7})","$1 $2",["8"],"0$1"]],"0"],"CV":["238","0","(?:[2-59]\\d\\d|800)\\d{4}",[7],[["(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3",["[2-589]"]]]],"CW":["599","00","(?:[34]1|60|(?:7|9\\d)\\d)\\d{5}",[7,8],[["(\\d{3})(\\d{4})","$1 $2",["[3467]"]],["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["9[4-8]"]]],0,0,0,0,0,"[69]"],"CX":["61","001[14-689]|14(?:1[14]|34|4[17]|[56]6|7[47]|88)0011","1(?:[0-79]\\d|8[0-24-9])\\d{7}|(?:[148]\\d\\d|550)\\d{6}|1\\d{5,7}",[6,7,8,9,10],0,"0",0,"0|([59]\\d{7})$","8$1",0,0,[["8(?:51(?:0(?:01|30|59)|117)|91(?:00[6-9]|1(?:[28]1|49|78)|2(?:09|63)|3(?:12|26|75)|4(?:56|97)|64\\d|7(?:0[01]|1[0-2])|958))\\d{3}",[9]],["483[0-3]\\d{5}|4(?:[0-3]\\d|4[047-9]|5[0-25-9]|6[06-9]|7[02-9]|8[0-2457-9]|9[0-27-9])\\d{6}",[9]],["180(?:0\\d{3}|2)\\d{3}",[7,10]],["190[0-26]\\d{6}",[10]],0,0,0,0,["(?:14(?:5(?:1[0458]|[23][458])|71\\d)|550\\d\\d)\\d{4}",[9]],["13(?:00\\d{3}|45[0-4])\\d{3}|13\\d{4}",[6,8,10]]],"0011"],"CY":["357","00","(?:[279]\\d|[58]0)\\d{6}",[8],[["(\\d{2})(\\d{6})","$1 $2",["[257-9]"]]]],"CZ":["420","00","(?:[2-578]\\d|60)\\d{7}|9\\d{8,11}",[9],[["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[2-8]|9[015-7]"]],["(\\d{2})(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3 $4",["9"]],["(\\d{3})(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3 $4",["9"]]]],"DE":["49","00","[2579]\\d{5,14}|49(?:[05]\\d{10}|[46][1-8]\\d{4,9})|49(?:[0-25]\\d|3[1-689]|7[1-7])\\d{4,8}|49(?:[0-2579]\\d|[34][1-9]|6[0-8])\\d{3}|49\\d{3,4}|(?:1|[368]\\d|4[0-8])\\d{3,13}",[4,5,6,7,8,9,10,11,12,13,14,15],[["(\\d{2})(\\d{3,13})","$1 $2",["3[02]|40|[68]9"],"0$1"],["(\\d{3})(\\d{3,12})","$1 $2",["2(?:0[1-389]|1[124]|2[18]|3[14])|3(?:[35-9][15]|4[015])|906|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1","2(?:0[1-389]|12[0-8])|3(?:[35-9][15]|4[015])|906|2(?:[13][14]|2[18])|(?:2[4-9]|4[2-9]|[579][1-9]|[68][1-8])1"],"0$1"],["(\\d{4})(\\d{2,11})","$1 $2",["[24-6]|3(?:[3569][02-46-9]|4[2-4679]|7[2-467]|8[2-46-8])|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]","[24-6]|3(?:3(?:0[1-467]|2[127-9]|3[124578]|7[1257-9]|8[1256]|9[145])|4(?:2[135]|4[13578]|9[1346])|5(?:0[14]|2[1-3589]|6[1-4]|7[13468]|8[13568])|6(?:2[1-489]|3[124-6]|6[13]|7[12579]|8[1-356]|9[135])|7(?:2[1-7]|4[145]|6[1-5]|7[1-4])|8(?:21|3[1468]|6|7[1467]|8[136])|9(?:0[12479]|2[1358]|4[134679]|6[1-9]|7[136]|8[147]|9[1468]))|70[2-8]|8(?:0[2-9]|[1-8])|90[7-9]|[79][1-9]|3[68]4[1347]|3(?:47|60)[1356]|3(?:3[46]|46|5[49])[1246]|3[4579]3[1357]"],"0$1"],["(\\d{3})(\\d{4})","$1 $2",["138"],"0$1"],["(\\d{5})(\\d{2,10})","$1 $2",["3"],"0$1"],["(\\d{3})(\\d{5,11})","$1 $2",["181"],"0$1"],["(\\d{3})(\\d)(\\d{4,10})","$1 $2 $3",["1(?:3|80)|9"],"0$1"],["(\\d{3})(\\d{7,8})","$1 $2",["1[67]"],"0$1"],["(\\d{3})(\\d{7,12})","$1 $2",["8"],"0$1"],["(\\d{5})(\\d{6})","$1 $2",["185","1850","18500"],"0$1"],["(\\d{3})(\\d{4})(\\d{4})","$1 $2 $3",["7"],"0$1"],["(\\d{4})(\\d{7})","$1 $2",["18[68]"],"0$1"],["(\\d{5})(\\d{6})","$1 $2",["15[0568]"],"0$1"],["(\\d{4})(\\d{7})","$1 $2",["15[1279]"],"0$1"],["(\\d{3})(\\d{8})","$1 $2",["18"],"0$1"],["(\\d{3})(\\d{2})(\\d{7,8})","$1 $2 $3",["1(?:6[023]|7)"],"0$1"],["(\\d{4})(\\d{2})(\\d{7})","$1 $2 $3",["15[279]"],"0$1"],["(\\d{3})(\\d{2})(\\d{8})","$1 $2 $3",["15"],"0$1"]],"0"],"DJ":["253","00","(?:2\\d|77)\\d{6}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[27]"]]]],"DK":["45","00","[2-9]\\d{7}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[2-9]"]]]],"DM":["1","011","(?:[58]\\d\\d|767|900)\\d{7}",[10],0,"1",0,"1|([2-7]\\d{6})$","767$1",0,"767"],"DO":["1","011","(?:[58]\\d\\d|900)\\d{7}",[10],0,"1",0,0,0,0,"8[024]9"],"DZ":["213","00","(?:[1-4]|[5-79]\\d|80)\\d{7}",[8,9],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[1-4]"],"0$1"],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["9"],"0$1"],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[5-8]"],"0$1"]],"0"],"EC":["593","00","1\\d{9,10}|(?:[2-7]|9\\d)\\d{7}",[8,9,10,11],[["(\\d)(\\d{3})(\\d{4})","$1 $2-$3",["[2-7]"],"(0$1)",0,"$1-$2-$3"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["9"],"0$1"],["(\\d{4})(\\d{3})(\\d{3,4})","$1 $2 $3",["1"]]],"0"],"EE":["372","00","8\\d{9}|[4578]\\d{7}|(?:[3-8]\\d|90)\\d{5}",[7,8,10],[["(\\d{3})(\\d{4})","$1 $2",["[369]|4[3-8]|5(?:[0-2]|5[0-478]|6[45])|7[1-9]|88","[369]|4[3-8]|5(?:[02]|1(?:[0-8]|95)|5[0-478]|6(?:4[0-4]|5[1-589]))|7[1-9]|88"]],["(\\d{4})(\\d{3,4})","$1 $2",["[45]|8(?:00|[1-49])","[45]|8(?:00[1-9]|[1-49])"]],["(\\d{2})(\\d{2})(\\d{4})","$1 $2 $3",["7"]],["(\\d{4})(\\d{3})(\\d{3})","$1 $2 $3",["8"]]]],"EG":["20","00","[189]\\d{8,9}|[24-6]\\d{8}|[135]\\d{7}",[8,9,10],[["(\\d)(\\d{7,8})","$1 $2",["[23]"],"0$1"],["(\\d{2})(\\d{6,7})","$1 $2",["1[35]|[4-6]|8[2468]|9[235-7]"],"0$1"],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["[189]"],"0$1"]],"0"],"EH":["212","00","[5-8]\\d{8}",[9],0,"0",0,0,0,0,"528[89]"],"ER":["291","00","[178]\\d{6}",[7],[["(\\d)(\\d{3})(\\d{3})","$1 $2 $3",["[178]"],"0$1"]],"0"],"ES":["34","00","(?:51|[6-9]\\d)\\d{7}",[9],[["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[89]00"]],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[5-9]"]]]],"ET":["251","00","(?:11|[2-59]\\d)\\d{7}",[9],[["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[1-59]"],"0$1"]],"0"],"FI":["358","00|99(?:[01469]|5(?:[14]1|3[23]|5[59]|77|88|9[09]))","[1-35689]\\d{4}|7\\d{10,11}|(?:[124-7]\\d|3[0-46-9])\\d{8}|[1-9]\\d{5,8}",[5,6,7,8,9,10,11,12],[["(\\d)(\\d{4,9})","$1 $2",["[2568][1-8]|3(?:0[1-9]|[1-9])|9"],"0$1"],["(\\d{3})(\\d{3,7})","$1 $2",["[12]00|[368]|70[07-9]"],"0$1"],["(\\d{2})(\\d{4,8})","$1 $2",["[1245]|7[135]"],"0$1"],["(\\d{2})(\\d{6,10})","$1 $2",["7"],"0$1"]],"0",0,0,0,0,"1[03-79]|[2-9]",0,"00"],"FJ":["679","0(?:0|52)","45\\d{5}|(?:0800\\d|[235-9])\\d{6}",[7,11],[["(\\d{3})(\\d{4})","$1 $2",["[235-9]|45"]],["(\\d{4})(\\d{3})(\\d{4})","$1 $2 $3",["0"]]],0,0,0,0,0,0,0,"00"],"FK":["500","00","[2-7]\\d{4}",[5]],"FM":["691","00","(?:[39]\\d\\d|820)\\d{4}",[7],[["(\\d{3})(\\d{4})","$1 $2",["[389]"]]]],"FO":["298","00","(?:[2-8]\\d|90)\\d{4}",[6],[["(\\d{6})","$1",["[2-9]"]]],0,0,"(10(?:01|[12]0|88))"],"FR":["33","00","[1-9]\\d{8}",[9],[["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["8"],"0 $1"],["(\\d)(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4 $5",["[1-79]"],"0$1"]],"0"],"GA":["241","00","(?:[067]\\d|11)\\d{6}|[2-7]\\d{6}",[7,8],[["(\\d)(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[2-7]"],"0$1"],["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["11|[67]"],"0$1"],["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["0"]]],0,0,"0(11\\d{6}|6[256]\\d{6}|7[47]\\d{6})","$1"],"GB":["44","00","[1-357-9]\\d{9}|[18]\\d{8}|8\\d{6}",[7,9,10],[["(\\d{3})(\\d{4})","$1 $2",["800","8001","80011","800111","8001111"],"0$1"],["(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3",["845","8454","84546","845464"],"0$1"],["(\\d{3})(\\d{6})","$1 $2",["800"],"0$1"],["(\\d{5})(\\d{4,5})","$1 $2",["1(?:38|5[23]|69|76|94)","1(?:(?:38|69)7|5(?:24|39)|768|946)","1(?:3873|5(?:242|39[4-6])|(?:697|768)[347]|9467)"],"0$1"],["(\\d{4})(\\d{5,6})","$1 $2",["1(?:[2-69][02-9]|[78])"],"0$1"],["(\\d{2})(\\d{4})(\\d{4})","$1 $2 $3",["[25]|7(?:0|6[02-9])","[25]|7(?:0|6(?:[03-9]|2[356]))"],"0$1"],["(\\d{4})(\\d{6})","$1 $2",["7"],"0$1"],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["[1389]"],"0$1"]],"0",0,0,0,0,0,[["(?:1(?:1(?:3(?:[0-58]\\d\\d|73[03])|(?:4[0-5]|5[0-26-9]|6[0-4]|[78][0-49])\\d\\d)|2(?:(?:0[024-9]|2[3-9]|3[3-79]|4[1-689]|[58][02-9]|6[0-47-9]|7[013-9]|9\\d)\\d\\d|1(?:[0-7]\\d\\d|8(?:0\\d|20)))|(?:3(?:0\\d|1[0-8]|[25][02-9]|3[02-579]|[468][0-46-9]|7[1-35-79]|9[2-578])|4(?:0[03-9]|[137]\\d|[28][02-57-9]|4[02-69]|5[0-8]|[69][0-79])|5(?:0[1-35-9]|[16]\\d|2[024-9]|3[015689]|4[02-9]|5[03-9]|7[0-35-9]|8[0-468]|9[0-57-9])|6(?:0[034689]|1\\d|2[0-35689]|[38][013-9]|4[1-467]|5[0-69]|6[13-9]|7[0-8]|9[0-24578])|7(?:0[0246-9]|2\\d|3[0236-8]|4[03-9]|5[0-46-9]|6[013-9]|7[0-35-9]|8[024-9]|9[02-9])|8(?:0[35-9]|2[1-57-9]|3[02-578]|4[0-578]|5[124-9]|6[2-69]|7\\d|8[02-9]|9[02569])|9(?:0[02-589]|[18]\\d|2[02-689]|3[1-57-9]|4[2-9]|5[0-579]|6[2-47-9]|7[0-24578]|9[2-57]))\\d\\d)|2(?:0[013478]|3[0189]|4[017]|8[0-46-9]|9[0-2])\\d{3})\\d{4}|1(?:2(?:0(?:46[1-4]|87[2-9])|545[1-79]|76(?:2\\d|3[1-8]|6[1-6])|9(?:7(?:2[0-4]|3[2-5])|8(?:2[2-8]|7[0-47-9]|8[3-5])))|3(?:6(?:38[2-5]|47[23])|8(?:47[04-9]|64[0157-9]))|4(?:044[1-7]|20(?:2[23]|8\\d)|6(?:0(?:30|5[2-57]|6[1-8]|7[2-8])|140)|8(?:052|87[1-3]))|5(?:2(?:4(?:3[2-79]|6\\d)|76\\d)|6(?:26[06-9]|686))|6(?:06(?:4\\d|7[4-79])|295[5-7]|35[34]\\d|47(?:24|61)|59(?:5[08]|6[67]|74)|9(?:55[0-4]|77[23]))|7(?:26(?:6[13-9]|7[0-7])|(?:442|688)\\d|50(?:2[0-3]|[3-68]2|76))|8(?:27[56]\\d|37(?:5[2-5]|8[239])|843[2-58])|9(?:0(?:0(?:6[1-8]|85)|52\\d)|3583|4(?:66[1-8]|9(?:2[01]|81))|63(?:23|3[1-4])|9561))\\d{3}",[9,10]],["7(?:457[0-57-9]|700[01]|911[028])\\d{5}|7(?:[1-3]\\d\\d|4(?:[0-46-9]\\d|5[0-689])|5(?:0[0-8]|[13-9]\\d|2[0-35-9])|7(?:0[1-9]|[1-7]\\d|8[02-9]|9[0-689])|8(?:[014-9]\\d|[23][0-8])|9(?:[024-9]\\d|1[02-9]|3[0-689]))\\d{6}",[10]],["80[08]\\d{7}|800\\d{6}|8001111"],["(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\d|8[2-49]))\\d{7}|845464\\d",[7,10]],["70\\d{8}",[10]],0,["(?:3[0347]|55)\\d{8}",[10]],["76(?:0[0-2]|2[356]|34|4[0134]|5[49]|6[0-369]|77|81|9[39])\\d{6}",[10]],["56\\d{8}",[10]]],0," x"],"GD":["1","011","(?:473|[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"1|([2-9]\\d{6})$","473$1",0,"473"],"GE":["995","00","(?:[3-57]\\d\\d|800)\\d{6}",[9],[["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["70"],"0$1"],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["32"],"0$1"],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[57]"]],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[348]"],"0$1"]],"0"],"GF":["594","00","(?:[56]94|976)\\d{6}",[9],[["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[569]"],"0$1"]],"0"],"GG":["44","00","(?:1481|[357-9]\\d{3})\\d{6}|8\\d{6}(?:\\d{2})?",[7,9,10],0,"0",0,"0|([25-9]\\d{5})$","1481$1",0,0,[["1481[25-9]\\d{5}",[10]],["7(?:(?:781|839)\\d|911[17])\\d{5}",[10]],["80[08]\\d{7}|800\\d{6}|8001111"],["(?:8(?:4[2-5]|7[0-3])|9(?:[01]\\d|8[0-3]))\\d{7}|845464\\d",[7,10]],["70\\d{8}",[10]],0,["(?:3[0347]|55)\\d{8}",[10]],["76(?:0[0-2]|2[356]|34|4[0134]|5[49]|6[0-369]|77|81|9[39])\\d{6}",[10]],["56\\d{8}",[10]]]],"GH":["233","00","(?:[235]\\d{3}|800)\\d{5}",[8,9],[["(\\d{3})(\\d{5})","$1 $2",["8"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[235]"],"0$1"]],"0"],"GI":["350","00","[256]\\d{7}",[8],[["(\\d{3})(\\d{5})","$1 $2",["2"]]]],"GL":["299","00","(?:19|[2-689]\\d)\\d{4}",[6],[["(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3",["19|[2-689]"]]]],"GM":["220","00","[2-9]\\d{6}",[7],[["(\\d{3})(\\d{4})","$1 $2",["[2-9]"]]]],"GN":["224","00","722\\d{6}|(?:3|6\\d)\\d{7}",[8,9],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["3"]],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[67]"]]]],"GP":["590","00","(?:590|69\\d|976)\\d{6}",[9],[["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[569]"],"0$1"]],"0",0,0,0,0,0,[["590(?:0[1-68]|1[0-2]|2[0-68]|3[1289]|4[0-24-9]|5[3-579]|6[0189]|7[08]|8[0-689]|9\\d)\\d{4}"],["69(?:0\\d\\d|1(?:2[29]|3[0-5]))\\d{4}"],0,0,0,0,0,0,["976[01]\\d{5}"]]],"GQ":["240","00","222\\d{6}|(?:3\\d|55|[89]0)\\d{7}",[9],[["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[235]"]],["(\\d{3})(\\d{6})","$1 $2",["[89]"]]]],"GR":["30","00","5005000\\d{3}|(?:[2689]\\d|70)\\d{8}",[10],[["(\\d{2})(\\d{4})(\\d{4})","$1 $2 $3",["21|7"]],["(\\d{4})(\\d{6})","$1 $2",["2(?:2|3[2-57-9]|4[2-469]|5[2-59]|6[2-9]|7[2-69]|8[2-49])|5"]],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["[2689]"]]]],"GT":["502","00","(?:1\\d{3}|[2-7])\\d{7}",[8,11],[["(\\d{4})(\\d{4})","$1 $2",["[2-7]"]],["(\\d{4})(\\d{3})(\\d{4})","$1 $2 $3",["1"]]]],"GU":["1","011","(?:[58]\\d\\d|671|900)\\d{7}",[10],0,"1",0,"1|([3-9]\\d{6})$","671$1",0,"671"],"GW":["245","00","[49]\\d{8}|4\\d{6}",[7,9],[["(\\d{3})(\\d{4})","$1 $2",["40"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[49]"]]]],"GY":["592","001","(?:862\\d|9008)\\d{3}|(?:[2-46]\\d|77)\\d{5}",[7],[["(\\d{3})(\\d{4})","$1 $2",["[2-46-9]"]]]],"HK":["852","00(?:30|5[09]|[126-9]?)","8[0-46-9]\\d{6,7}|9\\d{4}(?:\\d(?:\\d(?:\\d{4})?)?)?|(?:[235-79]\\d|46)\\d{6}",[5,6,7,8,9,11],[["(\\d{3})(\\d{2,5})","$1 $2",["900","9003"]],["(\\d{4})(\\d{4})","$1 $2",["[2-7]|8[1-4]|9(?:0[1-9]|[1-8])"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["8"]],["(\\d{3})(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3 $4",["9"]]],0,0,0,0,0,0,0,"00"],"HN":["504","00","8\\d{10}|[237-9]\\d{7}",[8,11],[["(\\d{4})(\\d{4})","$1-$2",["[237-9]"]]]],"HR":["385","00","(?:[24-69]\\d|3[0-79])\\d{7}|80\\d{5,7}|[1-79]\\d{7}|6\\d{5,6}",[6,7,8,9],[["(\\d{2})(\\d{2})(\\d{2,3})","$1 $2 $3",["6[01]"],"0$1"],["(\\d{3})(\\d{2})(\\d{2,3})","$1 $2 $3",["8"],"0$1"],["(\\d)(\\d{4})(\\d{3})","$1 $2 $3",["1"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[67]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["9"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[2-5]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["8"],"0$1"]],"0"],"HT":["509","00","[2-489]\\d{7}",[8],[["(\\d{2})(\\d{2})(\\d{4})","$1 $2 $3",["[2-489]"]]]],"HU":["36","00","[2357]\\d{8}|[1-9]\\d{7}",[8,9],[["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["1"],"(06 $1)"],["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["[27][2-9]|3[2-7]|4[24-9]|5[2-79]|6|8[2-57-9]|9[2-69]"],"(06 $1)"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[2-57-9]"],"06 $1"]],"06"],"ID":["62","00[189]","(?:(?:007803|8\\d{4})\\d|[1-36])\\d{6}|[1-9]\\d{8,10}|[2-9]\\d{7}",[7,8,9,10,11,12,13],[["(\\d)(\\d{3})(\\d{3})","$1 $2 $3",["15"]],["(\\d{2})(\\d{5,9})","$1 $2",["2[124]|[36]1"],"(0$1)"],["(\\d{3})(\\d{5,7})","$1 $2",["800"],"0$1"],["(\\d{3})(\\d{5,8})","$1 $2",["[2-79]"],"(0$1)"],["(\\d{3})(\\d{3,4})(\\d{3})","$1-$2-$3",["8[1-35-9]"],"0$1"],["(\\d{3})(\\d{6,8})","$1 $2",["1"],"0$1"],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["804"],"0$1"],["(\\d{3})(\\d)(\\d{3})(\\d{3})","$1 $2 $3 $4",["80"],"0$1"],["(\\d{3})(\\d{4})(\\d{4,5})","$1-$2-$3",["8"],"0$1"]],"0"],"IE":["353","00","(?:1\\d|[2569])\\d{6,8}|4\\d{6,9}|7\\d{8}|8\\d{8,9}",[7,8,9,10],[["(\\d{2})(\\d{5})","$1 $2",["2[24-9]|47|58|6[237-9]|9[35-9]"],"(0$1)"],["(\\d{3})(\\d{5})","$1 $2",["[45]0"],"(0$1)"],["(\\d)(\\d{3,4})(\\d{4})","$1 $2 $3",["1"],"(0$1)"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[2569]|4[1-69]|7[14]"],"(0$1)"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["70"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["81"],"(0$1)"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[78]"],"0$1"],["(\\d{4})(\\d{3})(\\d{3})","$1 $2 $3",["1"]],["(\\d{2})(\\d{4})(\\d{4})","$1 $2 $3",["4"],"(0$1)"],["(\\d{2})(\\d)(\\d{3})(\\d{4})","$1 $2 $3 $4",["8"],"0$1"]],"0"],"IL":["972","0(?:0|1[2-9])","1\\d{6}(?:\\d{3,5})?|[57]\\d{8}|[1-489]\\d{7}",[7,8,9,10,11,12],[["(\\d{4})(\\d{3})","$1-$2",["125"]],["(\\d{4})(\\d{2})(\\d{2})","$1-$2-$3",["121"]],["(\\d)(\\d{3})(\\d{4})","$1-$2-$3",["[2-489]"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1-$2-$3",["[57]"],"0$1"],["(\\d{4})(\\d{3})(\\d{3})","$1-$2-$3",["12"]],["(\\d{4})(\\d{6})","$1-$2",["159"]],["(\\d)(\\d{3})(\\d{3})(\\d{3})","$1-$2-$3-$4",["1[7-9]"]],["(\\d{3})(\\d{1,2})(\\d{3})(\\d{4})","$1-$2 $3-$4",["15"]]],"0"],"IM":["44","00","1624\\d{6}|(?:[3578]\\d|90)\\d{8}",[10],0,"0",0,"0|([5-8]\\d{5})$","1624$1",0,"74576|(?:16|7[56])24"],"IN":["91","00","(?:000800|[2-9]\\d\\d)\\d{7}|1\\d{7,12}",[8,9,10,11,12,13],[["(\\d{8})","$1",["5(?:0|2[23]|3[03]|[67]1|88)","5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|888)","5(?:0|2(?:21|3)|3(?:0|3[23])|616|717|8888)"],0,1],["(\\d{4})(\\d{4,5})","$1 $2",["180","1800"],0,1],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["140"],0,1],["(\\d{2})(\\d{4})(\\d{4})","$1 $2 $3",["11|2[02]|33|4[04]|79[1-7]|80[2-46]","11|2[02]|33|4[04]|79(?:[1-6]|7[19])|80(?:[2-4]|6[0-589])","11|2[02]|33|4[04]|79(?:[124-6]|3(?:[02-9]|1[0-24-9])|7(?:1|9[1-6]))|80(?:[2-4]|6[0-589])"],"0$1",1],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["1(?:2[0-249]|3[0-25]|4[145]|[68]|7[1257])|2(?:1[257]|3[013]|4[01]|5[0137]|6[0158]|78|8[1568])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|5[12]|[78]1)|6(?:12|[2-4]1|5[17]|6[13]|80)|7(?:12|3[134]|4[47]|61|88)|8(?:16|2[014]|3[126]|6[136]|7[078]|8[34]|91)|(?:43|59|75)[15]|(?:1[59]|29|67|72)[14]","1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|674|7(?:(?:2[14]|3[34]|5[15])[2-6]|61[346]|88[0-8])|8(?:70[2-6]|84[235-7]|91[3-7])|(?:1(?:29|60|8[06])|261|552|6(?:12|[2-47]1|5[17]|6[13]|80)|7(?:12|31|4[47])|8(?:16|2[014]|3[126]|6[136]|7[78]|83))[2-7]","1(?:2[0-24]|3[0-25]|4[145]|[59][14]|6[1-9]|7[1257]|8[1-57-9])|2(?:1[257]|3[013]|4[01]|5[0137]|6[058]|78|8[1568]|9[14])|3(?:26|4[1-3]|5[34]|6[01489]|7[02-46]|8[159])|4(?:1[36]|2[1-47]|3[15]|5[12]|6[0-26-9]|7[0-24-9]|8[013-57]|9[014-7])|5(?:1[025]|22|[36][25]|4[28]|[578]1|9[15])|6(?:12(?:[2-6]|7[0-8])|74[2-7])|7(?:(?:2[14]|5[15])[2-6]|3171|61[346]|88(?:[2-7]|82))|8(?:70[2-6]|84(?:[2356]|7[19])|91(?:[3-6]|7[19]))|73[134][2-6]|(?:74[47]|8(?:16|2[014]|3[126]|6[136]|7[78]|83))(?:[2-6]|7[19])|(?:1(?:29|60|8[06])|261|552|6(?:[2-4]1|5[17]|6[13]|7(?:1|4[0189])|80)|7(?:12|88[01]))[2-7]"],"0$1",1],["(\\d{4})(\\d{3})(\\d{3})","$1 $2 $3",["1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2[2457-9]|3[2-5]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1[013-9]|28|3[129]|4[1-35689]|5[29]|6[02-5]|70)|807","1(?:[2-479]|5[0235-9])|[2-5]|6(?:1[1358]|2(?:[2457]|84|95)|3(?:[2-4]|55)|4[235-7]|5[2-689]|6[24578]|7[235689]|8[1-6])|7(?:1(?:[013-8]|9[6-9])|28[6-8]|3(?:17|2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4|5[0-367])|70[13-7])|807[19]","1(?:[2-479]|5(?:[0236-9]|5[013-9]))|[2-5]|6(?:2(?:84|95)|355|83)|73179|807(?:1|9[1-3])|(?:1552|6(?:1[1358]|2[2457]|3[2-4]|4[235-7]|5[2-689]|6[24578]|7[235689]|8[124-6])\\d|7(?:1(?:[013-8]\\d|9[6-9])|28[6-8]|3(?:2[0-49]|9[2-57])|4(?:1[2-4]|[29][0-7]|3[0-8]|[56]\\d|8[0-24-7])|5(?:2[1-3]|9[0-6])|6(?:0[5689]|2[5-9]|3[02-8]|4\\d|5[0-367])|70[13-7]))[2-7]"],"0$1",1],["(\\d{5})(\\d{5})","$1 $2",["[6-9]"],"0$1",1],["(\\d{4})(\\d{2,4})(\\d{4})","$1 $2 $3",["1(?:6|8[06])","1(?:6|8[06]0)"],0,1],["(\\d{4})(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3 $4",["18"],0,1]],"0"],"IO":["246","00","3\\d{6}",[7],[["(\\d{3})(\\d{4})","$1 $2",["3"]]]],"IQ":["964","00","(?:1|7\\d\\d)\\d{7}|[2-6]\\d{7,8}",[8,9,10],[["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["1"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[2-6]"],"0$1"],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["7"],"0$1"]],"0"],"IR":["98","00","[1-9]\\d{9}|(?:[1-8]\\d\\d|9)\\d{3,4}",[4,5,6,7,10],[["(\\d{4,5})","$1",["96"],"0$1"],["(\\d{2})(\\d{4,5})","$1 $2",["(?:1[137]|2[13-68]|3[1458]|4[145]|5[1468]|6[16]|7[1467]|8[13467])[12689]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3,4})","$1 $2 $3",["9"],"0$1"],["(\\d{2})(\\d{4})(\\d{4})","$1 $2 $3",["[1-8]"],"0$1"]],"0"],"IS":["354","00|1(?:0(?:01|[12]0)|100)","(?:38\\d|[4-9])\\d{6}",[7,9],[["(\\d{3})(\\d{4})","$1 $2",["[4-9]"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["3"]]],0,0,0,0,0,0,0,"00"],"IT":["39","00","0\\d{5,10}|3[0-8]\\d{7,10}|55\\d{8}|8\\d{5}(?:\\d{2,4})?|(?:1\\d|39)\\d{7,8}",[6,7,8,9,10,11],[["(\\d{2})(\\d{4,6})","$1 $2",["0[26]"]],["(\\d{3})(\\d{3,6})","$1 $2",["0[13-57-9][0159]|8(?:03|4[17]|9[245])","0[13-57-9][0159]|8(?:03|4[17]|9(?:2|[45][0-4]))"]],["(\\d{4})(\\d{2,6})","$1 $2",["0(?:[13-579][2-46-8]|8[236-8])"]],["(\\d{4})(\\d{4})","$1 $2",["894"]],["(\\d{2})(\\d{3,4})(\\d{4})","$1 $2 $3",["0[26]|5"]],["(\\d{3})(\\d{3})(\\d{3,4})","$1 $2 $3",["1[4679]|[38]"]],["(\\d{3})(\\d{3,4})(\\d{4})","$1 $2 $3",["0[13-57-9][0159]"]],["(\\d{2})(\\d{4})(\\d{5})","$1 $2 $3",["0[26]"]],["(\\d{4})(\\d{3})(\\d{4})","$1 $2 $3",["0"]],["(\\d{3})(\\d{4})(\\d{4,5})","$1 $2 $3",["3"]]],0,0,0,0,0,0,[["0669[0-79]\\d{1,6}|0(?:1(?:[0159]\\d|[27][1-5]|31|4[1-4]|6[1356]|8[2-57])|2\\d\\d|3(?:[0159]\\d|2[1-4]|3[12]|[48][1-6]|6[2-59]|7[1-7])|4(?:[0159]\\d|[23][1-9]|4[245]|6[1-5]|7[1-4]|81)|5(?:[0159]\\d|2[1-5]|3[2-6]|4[1-79]|6[4-6]|7[1-578]|8[3-8])|6(?:[0-57-9]\\d|6[0-8])|7(?:[0159]\\d|2[12]|3[1-7]|4[2-46]|6[13569]|7[13-6]|8[1-59])|8(?:[0159]\\d|2[3-578]|3[1-356]|[6-8][1-5])|9(?:[0159]\\d|[238][1-5]|4[12]|6[1-8]|7[1-6]))\\d{2,7}"],["3[1-9]\\d{8}|3[2-9]\\d{7}",[9,10]],["80(?:0\\d{3}|3)\\d{3}",[6,9]],["(?:0878\\d\\d|89(?:2|4[5-9]\\d))\\d{3}|89[45][0-4]\\d\\d|(?:1(?:44|6[346])|89(?:5[5-9]|9))\\d{6}",[6,8,9,10]],["1(?:78\\d|99)\\d{6}",[9,10]],0,0,0,["55\\d{8}",[10]],["84(?:[08]\\d{3}|[17])\\d{3}",[6,9]]]],"JE":["44","00","1534\\d{6}|(?:[3578]\\d|90)\\d{8}",[10],0,"0",0,"0|([0-24-8]\\d{5})$","1534$1",0,0,[["1534[0-24-8]\\d{5}"],["7(?:(?:(?:50|82)9|937)\\d|7(?:00[378]|97[7-9]))\\d{5}"],["80(?:07(?:35|81)|8901)\\d{4}"],["(?:8(?:4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|90(?:066[59]|1810|71(?:07|55)))\\d{4}"],["701511\\d{4}"],0,["(?:3(?:0(?:07(?:35|81)|8901)|3\\d{4}|4(?:4(?:4(?:05|42|69)|703)|5(?:041|800))|7(?:0002|1206))|55\\d{4})\\d{4}"],["76(?:0[0-2]|2[356]|34|4[0134]|5[49]|6[0-369]|77|81|9[39])\\d{6}"],["56\\d{8}"]]],"JM":["1","011","(?:[58]\\d\\d|658|900)\\d{7}",[10],0,"1",0,0,0,0,"658|876"],"JO":["962","00","(?:(?:[2689]|7\\d)\\d|32|53)\\d{6}",[8,9],[["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["[2356]|87"],"(0$1)"],["(\\d{3})(\\d{5,6})","$1 $2",["[89]"],"0$1"],["(\\d{2})(\\d{7})","$1 $2",["70"],"0$1"],["(\\d)(\\d{4})(\\d{4})","$1 $2 $3",["7"],"0$1"]],"0"],"JP":["81","010","00[1-9]\\d{6,14}|[257-9]\\d{9}|(?:00|[1-9]\\d\\d)\\d{6}",[8,9,10,11,12,13,14,15,16,17],[["(\\d{3})(\\d{3})(\\d{3})","$1-$2-$3",["(?:12|57|99)0"],"0$1"],["(\\d{4})(\\d)(\\d{4})","$1-$2-$3",["1(?:26|3[79]|4[56]|5[4-68]|6[3-5])|499|5(?:76|97)|746|8(?:3[89]|47|51|63)|9(?:49|80|9[16])","1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:76|97)9|7468|8(?:3(?:8[78]|96)|477|51[24]|636)|9(?:496|802|9(?:1[23]|69))|1(?:45|58)[67]","1(?:267|3(?:7[247]|9[278])|466|5(?:47|58|64)|6(?:3[245]|48|5[4-68]))|499[2468]|5(?:769|979[2-69])|7468|8(?:3(?:8[78]|96[2457-9])|477|51[24]|636[2-57-9])|9(?:496|802|9(?:1[23]|69))|1(?:45|58)[67]"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1-$2-$3",["60"],"0$1"],["(\\d)(\\d{4})(\\d{4})","$1-$2-$3",["[36]|4(?:2[09]|7[01])","[36]|4(?:2(?:0|9[02-69])|7(?:0[019]|1))"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1-$2-$3",["1(?:1|5[45]|77|88|9[69])|2(?:2[1-37]|3[0-269]|4[59]|5|6[24]|7[1-358]|8[1369]|9[0-38])|4(?:[28][1-9]|3[0-57]|[45]|6[248]|7[2-579]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-389])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9[2-6])|8(?:2[124589]|3[279]|49|6[0-24-9]|7[0-468]|8[68]|9[019])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9[1-489])","1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2(?:[127]|3[014-9])|3[0-269]|4[59]|5(?:[0468][01]|[1-3]|5[0-69]|9[19])|62|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|2[01]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|8[1-9])|5(?:2|3[045]|4[0-369]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0-2469])|49|6(?:[0-24]|5[0-3589]|72|9[01459])|7[0-468]|8[68])|9(?:[23][1-9]|4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3[34]|4[0178]))|(?:49|55|83)[29]|(?:264|837)[016-9]|2(?:57|93)[015-9]|(?:47[59]|59[89]|8(?:6[68]|9))[019]","1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[0468][01]|[1-3]|5[0-69]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17))|4(?:2(?:[13-79]|2[01]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9[0169])|3(?:[29]|7(?:[017-9]|6[6-8]))|49|6(?:[0-24]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|72|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:8294|96)[1-3]|2(?:57|93)[015-9]|(?:223|8699)[014-9]|(?:48|8292|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]","1(?:1|5(?:4[018]|5[017])|77|88|9[69])|2(?:2[127]|3[0-269]|4[59]|5(?:[0468][01]|[1-3]|5[0-69]|7[015-9]|9(?:17|99))|6(?:2|4[016-9])|7(?:[1-35]|8[0189])|8(?:[16]|3[0134]|9[0-5])|9(?:[028]|17|3[015-9]))|4(?:2(?:[13-79]|2[01]|8[014-6])|3[0-57]|[45]|6[248]|7[2-47]|9[29])|5(?:2|3[045]|4[0-369]|5[29]|8[02389]|9[0-3])|7(?:2[02-46-9]|34|[58]|6[0249]|7[57]|9(?:[23]|4[0-59]|5[01569]|6[0167]))|8(?:2(?:[1258]|4[0-39]|9(?:[019]|4[1-3]|6(?:[0-47-9]|5[01346-9])))|3(?:[29]|7(?:[017-9]|6[6-8]))|49|6(?:[0-24]|5(?:[0-389]|5[23])|6(?:[01]|9[178])|72|9[0145])|7[0-468]|8[68])|9(?:4[15]|5[138]|6[1-3]|7[156]|8[189]|9(?:[1289]|3(?:31|4[357])|4[0178]))|(?:223|8699)[014-9]|(?:48|829(?:2|66)|9[23])[1-9]|(?:47[59]|59[89]|8(?:68|9))[019]"],"0$1"],["(\\d{3})(\\d{2})(\\d{4})","$1-$2-$3",["[14]|[29][2-9]|5[3-9]|7[2-4679]|8(?:[246-9]|3[3-8]|5[2-9])","[14]|[29][2-9]|5[3-9]|7[2-4679]|8(?:[246-9]|3(?:[3-6][2-9]|7|8[2-5])|5[2-9])"],"0$1"],["(\\d{3})(\\d{3})(\\d{4})","$1-$2-$3",["800"],"0$1"],["(\\d{2})(\\d{4})(\\d{4})","$1-$2-$3",["[2579]|80"],"0$1"]],"0"],"KE":["254","000","(?:[17]\\d\\d|900)\\d{6}|(?:2|80)0\\d{6,7}|[4-6]\\d{6,8}",[7,8,9,10],[["(\\d{2})(\\d{5,7})","$1 $2",["[24-6]"],"0$1"],["(\\d{3})(\\d{6})","$1 $2",["[17]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3,4})","$1 $2 $3",["[89]"],"0$1"]],"0"],"KG":["996","00","8\\d{9}|(?:[235-8]\\d|99)\\d{7}",[9,10],[["(\\d{4})(\\d{5})","$1 $2",["3(?:1[346]|[24-79])"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[235-79]|88"],"0$1"],["(\\d{3})(\\d{3})(\\d)(\\d{2,3})","$1 $2 $3 $4",["8"],"0$1"]],"0"],"KH":["855","00[14-9]","1\\d{9}|[1-9]\\d{7,8}",[8,9,10],[["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[1-9]"],"0$1"],["(\\d{4})(\\d{3})(\\d{3})","$1 $2 $3",["1"]]],"0"],"KI":["686","00","(?:[37]\\d|6[0-79])\\d{6}|(?:[2-48]\\d|50)\\d{3}",[5,8],0,"0"],"KM":["269","00","[3478]\\d{6}",[7],[["(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3",["[3478]"]]]],"KN":["1","011","(?:[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"1|([2-7]\\d{6})$","869$1",0,"869"],"KP":["850","00|99","85\\d{6}|(?:19\\d|[2-7])\\d{7}",[8,10],[["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["8"],"0$1"],["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["[2-7]"],"0$1"],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["1"],"0$1"]],"0"],"KR":["82","00(?:[125689]|3(?:[46]5|91)|7(?:00|27|3|55|6[126]))","00[1-9]\\d{8,11}|(?:[12]|5\\d{3})\\d{7}|[13-6]\\d{9}|(?:[1-6]\\d|80)\\d{7}|[3-6]\\d{4,5}|(?:00|7)0\\d{8}",[5,6,8,9,10,11,12,13,14],[["(\\d{2})(\\d{3,4})","$1-$2",["(?:3[1-3]|[46][1-4]|5[1-5])1"],"0$1"],["(\\d{4})(\\d{4})","$1-$2",["1"]],["(\\d)(\\d{3,4})(\\d{4})","$1-$2-$3",["2"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1-$2-$3",["60|8"],"0$1"],["(\\d{2})(\\d{3,4})(\\d{4})","$1-$2-$3",["[1346]|5[1-5]"],"0$1"],["(\\d{2})(\\d{4})(\\d{4})","$1-$2-$3",["[57]"],"0$1"],["(\\d{2})(\\d{5})(\\d{4})","$1-$2-$3",["5"],"0$1"]],"0",0,"0(8(?:[1-46-8]|5\\d\\d))?"],"KW":["965","00","(?:18|[2569]\\d\\d)\\d{5}",[7,8],[["(\\d{4})(\\d{3,4})","$1 $2",["[169]|2(?:[235]|4[1-35-9])|52"]],["(\\d{3})(\\d{5})","$1 $2",["[25]"]]]],"KY":["1","011","(?:345|[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"1|([2-9]\\d{6})$","345$1",0,"345"],"KZ":["7","810","33622\\d{5}|(?:7\\d|80)\\d{8}",[10],0,"8",0,0,0,0,"33|7",0,"8~10"],"LA":["856","00","[23]\\d{9}|3\\d{8}|(?:[235-8]\\d|41)\\d{6}",[8,9,10],[["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["2[13]|3[14]|[4-8]"],"0$1"],["(\\d{2})(\\d{2})(\\d{2})(\\d{3})","$1 $2 $3 $4",["30[013-9]"],"0$1"],["(\\d{2})(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3 $4",["[23]"],"0$1"]],"0"],"LB":["961","00","[7-9]\\d{7}|[13-9]\\d{6}",[7,8],[["(\\d)(\\d{3})(\\d{3})","$1 $2 $3",["[13-69]|7(?:[2-57]|62|8[0-7]|9[04-9])|8[02-9]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["[7-9]"]]],"0"],"LC":["1","011","(?:[58]\\d\\d|758|900)\\d{7}",[10],0,"1",0,"1|([2-8]\\d{6})$","758$1",0,"758"],"LI":["423","00","90\\d{5}|(?:[2378]|6\\d\\d)\\d{6}",[7,9],[["(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3",["[237-9]"]],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["69"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["6"]]],"0",0,"0|(1001)"],"LK":["94","00","[1-9]\\d{8}",[9],[["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["7"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[1-689]"],"0$1"]],"0"],"LR":["231","00","(?:2|33|5\\d|77|88)\\d{7}|[4-6]\\d{6}",[7,8,9],[["(\\d)(\\d{3})(\\d{3})","$1 $2 $3",["[4-6]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["2"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[3578]"],"0$1"]],"0"],"LS":["266","00","(?:[256]\\d\\d|800)\\d{5}",[8],[["(\\d{4})(\\d{4})","$1 $2",["[2568]"]]]],"LT":["370","00","(?:[3469]\\d|52|[78]0)\\d{6}",[8],[["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["52[0-7]"],"(8-$1)",1],["(\\d{3})(\\d{2})(\\d{3})","$1 $2 $3",["[7-9]"],"8 $1",1],["(\\d{2})(\\d{6})","$1 $2",["37|4(?:[15]|6[1-8])"],"(8-$1)",1],["(\\d{3})(\\d{5})","$1 $2",["[3-6]"],"(8-$1)",1]],"8",0,"[08]"],"LU":["352","00","35[013-9]\\d{4,8}|6\\d{8}|35\\d{2,4}|(?:[2457-9]\\d|3[0-46-9])\\d{2,9}",[4,5,6,7,8,9,10,11],[["(\\d{2})(\\d{3})","$1 $2",["2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])"]],["(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3",["2(?:0[2-689]|[2-9])|[3-57]|8(?:0[2-9]|[13-9])|9(?:0[89]|[2-579])"]],["(\\d{2})(\\d{2})(\\d{3})","$1 $2 $3",["20[2-689]"]],["(\\d{2})(\\d{2})(\\d{2})(\\d{1,2})","$1 $2 $3 $4",["2(?:[0367]|4[3-8])"]],["(\\d{3})(\\d{2})(\\d{3})","$1 $2 $3",["80[01]|90[015]"]],["(\\d{2})(\\d{2})(\\d{2})(\\d{3})","$1 $2 $3 $4",["20"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["6"]],["(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{1,2})","$1 $2 $3 $4 $5",["2(?:[0367]|4[3-8])"]],["(\\d{2})(\\d{2})(\\d{2})(\\d{1,5})","$1 $2 $3 $4",["[3-57]|8[13-9]|9(?:0[89]|[2-579])|(?:2|80)[2-9]"]]],0,0,"(15(?:0[06]|1[12]|[35]5|4[04]|6[26]|77|88|99)\\d)"],"LV":["371","00","(?:[268]\\d|90)\\d{6}",[8],[["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["[269]|8[01]"]]]],"LY":["218","00","[2-9]\\d{8}",[9],[["(\\d{2})(\\d{7})","$1-$2",["[2-9]"],"0$1"]],"0"],"MA":["212","00","[5-8]\\d{8}",[9],[["(\\d{5})(\\d{4})","$1-$2",["5(?:29|38)","5(?:29|38)[89]","5(?:29|38)[89]0"],"0$1"],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["5[45]"],"0$1"],["(\\d{4})(\\d{5})","$1-$2",["5(?:2[2-489]|3[5-9]|9)|892","5(?:2(?:[2-49]|8[235-9])|3[5-9]|9)|892"],"0$1"],["(\\d{2})(\\d{7})","$1-$2",["8"],"0$1"],["(\\d{3})(\\d{6})","$1-$2",["[5-7]"],"0$1"]],"0",0,0,0,0,0,[["5(?:29(?:[189][05]|2[29]|3[01])|38[89][05])\\d{4}|5(?:2(?:[015-7]\\d|2[02-9]|3[0-578]|4[02-46-8]|8[0235-7]|90)|3(?:[0-47]\\d|5[02-9]|6[02-8]|80|9[3-9])|(?:4[067]|5[03])\\d)\\d{5}"],["(?:6(?:[0-79]\\d|8[0-247-9])|7(?:0[016-8]|6[1267]|7[0-27]))\\d{6}"],["80\\d{7}"],["89\\d{7}"],0,0,0,0,["592(?:4[0-2]|93)\\d{4}"]]],"MC":["377","00","870\\d{5}|(?:[349]|6\\d)\\d{7}",[8,9],[["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["4"],"0$1"],["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[39]"]],["(\\d)(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4 $5",["6"],"0$1"]],"0"],"MD":["373","00","(?:[235-7]\\d|[89]0)\\d{6}",[8],[["(\\d{3})(\\d{5})","$1 $2",["[89]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["22|3"],"0$1"],["(\\d{3})(\\d{2})(\\d{3})","$1 $2 $3",["[25-7]"],"0$1"]],"0"],"ME":["382","00","(?:20|[3-79]\\d)\\d{6}|80\\d{6,7}",[8,9],[["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[2-9]"],"0$1"]],"0"],"MF":["590","00","(?:590|69\\d|976)\\d{6}",[9],0,"0",0,0,0,0,0,[["590(?:0[079]|[14]3|[27][79]|30|5[0-268]|87)\\d{4}"],["69(?:0\\d\\d|1(?:2[29]|3[0-5]))\\d{4}"],0,0,0,0,0,0,["976[01]\\d{5}"]]],"MG":["261","00","[23]\\d{8}",[9],[["(\\d{2})(\\d{2})(\\d{3})(\\d{2})","$1 $2 $3 $4",["[23]"],"0$1"]],"0",0,"0|([24-9]\\d{6})$","20$1"],"MH":["692","011","329\\d{4}|(?:[256]\\d|45)\\d{5}",[7],[["(\\d{3})(\\d{4})","$1-$2",["[2-6]"]]],"1"],"MK":["389","00","[2-578]\\d{7}",[8],[["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["2"],"0$1"],["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["[347]"],"0$1"],["(\\d{3})(\\d)(\\d{2})(\\d{2})","$1 $2 $3 $4",["[58]"],"0$1"]],"0"],"ML":["223","00","[24-9]\\d{7}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[24-9]"]]]],"MM":["95","00","1\\d{5,7}|95\\d{6}|(?:[4-7]|9[0-46-9])\\d{6,8}|(?:2|8\\d)\\d{5,8}",[6,7,8,9,10],[["(\\d)(\\d{2})(\\d{3})","$1 $2 $3",["16|2"],"0$1"],["(\\d{2})(\\d{2})(\\d{3})","$1 $2 $3",["[45]|6(?:0[23]|[1-689]|7[235-7])|7(?:[0-4]|5[2-7])|8[1-6]"],"0$1"],["(\\d)(\\d{3})(\\d{3,4})","$1 $2 $3",["[12]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[4-7]|8[1-35]"],"0$1"],["(\\d)(\\d{3})(\\d{4,6})","$1 $2 $3",["9(?:2[0-4]|[35-9]|4[137-9])"],"0$1"],["(\\d)(\\d{4})(\\d{4})","$1 $2 $3",["2"],"0$1"],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["8"],"0$1"],["(\\d)(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3 $4",["92"],"0$1"],["(\\d)(\\d{5})(\\d{4})","$1 $2 $3",["9"],"0$1"]],"0"],"MN":["976","001","[12]\\d{7,9}|[57-9]\\d{7}",[8,9,10],[["(\\d{2})(\\d{2})(\\d{4})","$1 $2 $3",["[12]1"],"0$1"],["(\\d{4})(\\d{4})","$1 $2",["[57-9]"]],["(\\d{3})(\\d{5,6})","$1 $2",["[12]2[1-3]"],"0$1"],["(\\d{4})(\\d{5,6})","$1 $2",["[12](?:27|3[2-8]|4[2-68]|5[1-4689])","[12](?:27|3[2-8]|4[2-68]|5[1-4689])[0-3]"],"0$1"],["(\\d{5})(\\d{4,5})","$1 $2",["[12]"],"0$1"]],"0"],"MO":["853","00","(?:28|[68]\\d)\\d{6}",[8],[["(\\d{4})(\\d{4})","$1 $2",["[268]"]]]],"MP":["1","011","[58]\\d{9}|(?:67|90)0\\d{7}",[10],0,"1",0,"1|([2-9]\\d{6})$","670$1",0,"670"],"MQ":["596","00","69\\d{7}|(?:59|97)6\\d{6}",[9],[["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[569]"],"0$1"]],"0"],"MR":["222","00","(?:[2-4]\\d\\d|800)\\d{5}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[2-48]"]]]],"MS":["1","011","(?:[58]\\d\\d|664|900)\\d{7}",[10],0,"1",0,"1|([34]\\d{6})$","664$1",0,"664"],"MT":["356","00","3550\\d{4}|(?:[2579]\\d\\d|800)\\d{5}",[8],[["(\\d{4})(\\d{4})","$1 $2",["[2357-9]"]]]],"MU":["230","0(?:0|[24-7]0|3[03])","(?:[2-468]|5\\d)\\d{6}",[7,8],[["(\\d{3})(\\d{4})","$1 $2",["[2-46]|8[013]"]],["(\\d{4})(\\d{4})","$1 $2",["5"]]],0,0,0,0,0,0,0,"020"],"MV":["960","0(?:0|19)","(?:800|9[0-57-9]\\d)\\d{7}|[34679]\\d{6}",[7,10],[["(\\d{3})(\\d{4})","$1-$2",["[3467]|9[13-9]"]],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["[89]"]]],0,0,0,0,0,0,0,"00"],"MW":["265","00","1\\d{6}(?:\\d{2})?|(?:[23]1|77|88|99)\\d{7}",[7,9],[["(\\d)(\\d{3})(\\d{3})","$1 $2 $3",["1[2-9]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["2"],"0$1"],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[137-9]"],"0$1"]],"0"],"MX":["52","0[09]","(?:1(?:[01467]\\d|[2359][1-9]|8[1-79])|[2-9]\\d)\\d{8}",[10,11],[["(\\d{2})(\\d{4})(\\d{4})","$1 $2 $3",["33|5[56]|81"],0,1],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["[2-9]"],0,1],["(\\d)(\\d{2})(\\d{4})(\\d{4})","$2 $3 $4",["1(?:33|5[56]|81)"],0,1],["(\\d)(\\d{3})(\\d{3})(\\d{4})","$2 $3 $4",["1"],0,1]],"01",0,"0(?:[12]|4[45])|1",0,0,0,0,"00"],"MY":["60","00","1\\d{8,9}|(?:3\\d|[4-9])\\d{7}",[8,9,10],[["(\\d)(\\d{3})(\\d{4})","$1-$2 $3",["[4-79]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1-$2 $3",["1(?:[02469]|[378][1-9])|8"],"0$1"],["(\\d)(\\d{4})(\\d{4})","$1-$2 $3",["3"],"0$1"],["(\\d)(\\d{3})(\\d{2})(\\d{4})","$1-$2-$3-$4",["1[36-8]"]],["(\\d{3})(\\d{3})(\\d{4})","$1-$2 $3",["15"],"0$1"],["(\\d{2})(\\d{4})(\\d{4})","$1-$2 $3",["1"],"0$1"]],"0"],"MZ":["258","00","(?:2|8\\d)\\d{7}",[8,9],[["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["2|8[2-79]"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["8"]]]],"NA":["264","00","[68]\\d{7,8}",[8,9],[["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["88"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["6"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["87"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["8"],"0$1"]],"0"],"NC":["687","00","[2-57-9]\\d{5}",[6],[["(\\d{2})(\\d{2})(\\d{2})","$1.$2.$3",["[2-57-9]"]]]],"NE":["227","00","[0289]\\d{7}",[8],[["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["08"]],["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[089]|2[013]"]]]],"NF":["672","00","[13]\\d{5}",[6],[["(\\d{2})(\\d{4})","$1 $2",["1[0-3]"]],["(\\d)(\\d{5})","$1 $2",["[13]"]]],0,0,"([0-258]\\d{4})$","3$1"],"NG":["234","009","(?:[124-7]|9\\d{3})\\d{6}|[1-9]\\d{7}|[78]\\d{9,13}",[7,8,10,11,12,13,14],[["(\\d{2})(\\d{2})(\\d{3})","$1 $2 $3",["78"],"0$1"],["(\\d)(\\d{3})(\\d{3,4})","$1 $2 $3",["[12]|9(?:0[3-9]|[1-9])"],"0$1"],["(\\d{2})(\\d{3})(\\d{2,3})","$1 $2 $3",["[3-7]|8[2-9]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3,4})","$1 $2 $3",["[7-9]"],"0$1"],["(\\d{3})(\\d{4})(\\d{4,5})","$1 $2 $3",["[78]"],"0$1"],["(\\d{3})(\\d{5})(\\d{5,6})","$1 $2 $3",["[78]"],"0$1"]],"0"],"NI":["505","00","(?:1800|[25-8]\\d{3})\\d{4}",[8],[["(\\d{4})(\\d{4})","$1 $2",["[125-8]"]]]],"NL":["31","00","(?:[124-7]\\d\\d|3(?:[02-9]\\d|1[0-8]))\\d{6}|[89]\\d{6,9}|1\\d{4,5}",[5,6,7,8,9,10],[["(\\d{3})(\\d{4,7})","$1 $2",["[89]0"],"0$1"],["(\\d{2})(\\d{7})","$1 $2",["66"],"0$1"],["(\\d)(\\d{8})","$1 $2",["6"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["1[16-8]|2[259]|3[124]|4[17-9]|5[124679]"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[1-57-9]"],"0$1"]],"0"],"NO":["47","00","(?:0|[2-9]\\d{3})\\d{4}",[5,8],[["(\\d{3})(\\d{2})(\\d{3})","$1 $2 $3",["[489]|5[89]"]],["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[235-7]"]]],0,0,0,0,0,"[02-689]|7[0-8]"],"NP":["977","00","9\\d{9}|[1-9]\\d{7}",[8,10],[["(\\d)(\\d{7})","$1-$2",["1[2-6]"],"0$1"],["(\\d{2})(\\d{6})","$1-$2",["[1-8]|9(?:[1-579]|6[2-6])"],"0$1"],["(\\d{3})(\\d{7})","$1-$2",["9"]]],"0"],"NR":["674","00","(?:444|(?:55|8\\d)\\d|666)\\d{4}",[7],[["(\\d{3})(\\d{4})","$1 $2",["[4-68]"]]]],"NU":["683","00","(?:[47]|888\\d)\\d{3}",[4,7],[["(\\d{3})(\\d{4})","$1 $2",["8"]]]],"NZ":["64","0(?:0|161)","2\\d{7,9}|(?:[34]\\d|6[0-35-9])\\d{6}|(?:508|[79]\\d)\\d{6,7}|8\\d{4,9}",[5,6,7,8,9,10],[["(\\d{2})(\\d{3,8})","$1 $2",["83"],"0$1"],["(\\d{3})(\\d{2})(\\d{3})","$1 $2 $3",["[89]0"],"0$1"],["(\\d)(\\d{3})(\\d{4})","$1-$2 $3",["24|[346]|7[2-57-9]|9[2-9]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3,4})","$1 $2 $3",["2(?:10|74)|[59]|80"],"0$1"],["(\\d{2})(\\d{3,4})(\\d{4})","$1 $2 $3",["2[028]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,5})","$1 $2 $3",["2(?:[169]|7[0-35-9])|7|86"],"0$1"]],"0",0,0,0,0,0,0,"00"],"OM":["968","00","(?:1505|[279]\\d{3}|500)\\d{4}|8007\\d{4,5}",[7,8,9],[["(\\d{3})(\\d{4,6})","$1 $2",["[58]"]],["(\\d{2})(\\d{6})","$1 $2",["2"]],["(\\d{4})(\\d{4})","$1 $2",["[179]"]]]],"PA":["507","00","(?:[1-57-9]|6\\d)\\d{6}",[7,8],[["(\\d{3})(\\d{4})","$1-$2",["[1-57-9]"]],["(\\d{4})(\\d{4})","$1-$2",["6"]]]],"PE":["51","19(?:1[124]|77|90)00","(?:[14-8]|9\\d)\\d{7}",[8,9],[["(\\d{3})(\\d{5})","$1 $2",["80"],"(0$1)"],["(\\d)(\\d{7})","$1 $2",["1"],"(0$1)"],["(\\d{2})(\\d{6})","$1 $2",["[4-8]"],"(0$1)"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["9"]]],"0",0,0,0,0,0,0,0," Anexo "],"PF":["689","00","[48]\\d{7}|4\\d{5}",[6,8],[["(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3",["44"]],["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[48]"]]]],"PG":["675","00|140[1-3]","(?:180|[78]\\d{3})\\d{4}|(?:[2-589]\\d|64)\\d{5}",[7,8],[["(\\d{3})(\\d{4})","$1 $2",["18|[2-69]|85"]],["(\\d{4})(\\d{4})","$1 $2",["[78]"]]],0,0,0,0,0,0,0,"00"],"PH":["63","00","1800\\d{7,9}|(?:2|[89]\\d{4})\\d{5}|[2-8]\\d{8}|[28]\\d{7}",[6,8,9,10,11,12,13],[["(\\d)(\\d{5})","$1 $2",["2"],"(0$1)"],["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["2"],"(0$1)"],["(\\d{4})(\\d{4,6})","$1 $2",["3(?:23|39|46)|4(?:2[3-6]|[35]9|4[26]|76)|544|88[245]|(?:52|64|86)2","3(?:230|397|461)|4(?:2(?:35|[46]4|51)|396|4(?:22|63)|59[347]|76[15])|5(?:221|446)|642[23]|8(?:622|8(?:[24]2|5[13]))"],"(0$1)"],["(\\d{5})(\\d{4})","$1 $2",["346|4(?:27|9[35])|883","3469|4(?:279|9(?:30|56))|8834"],"(0$1)"],["(\\d)(\\d{4})(\\d{4})","$1 $2 $3",["2"],"(0$1)"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[3-7]|8[2-8]"],"(0$1)"],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["[89]"],"0$1"],["(\\d{4})(\\d{3})(\\d{4})","$1 $2 $3",["1"]],["(\\d{4})(\\d{1,2})(\\d{3})(\\d{4})","$1 $2 $3 $4",["1"]]],"0"],"PK":["92","00","122\\d{6}|[24-8]\\d{10,11}|9(?:[013-9]\\d{8,10}|2(?:[01]\\d\\d|2(?:[06-8]\\d|1[01]))\\d{7})|(?:[2-8]\\d{3}|92(?:[0-7]\\d|8[1-9]))\\d{6}|[24-9]\\d{8}|[89]\\d{7}",[8,9,10,11,12],[["(\\d{3})(\\d{3})(\\d{2})","$1 $2 $3",["[89]0"],"0$1"],["(\\d{4})(\\d{5})","$1 $2",["1"]],["(\\d{3})(\\d{6,7})","$1 $2",["2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:2[2-8]|3[27-9]|4[2-6]|6[3569]|9[25-8])","9(?:2[3-8]|98)|(?:2(?:3[2358]|4[2-4]|9[2-8])|45[3479]|54[2-467]|60[468]|72[236]|8(?:2[2-689]|3[23578]|4[3478]|5[2356])|9(?:22|3[27-9]|4[2-6]|6[3569]|9[25-7]))[2-9]"],"(0$1)"],["(\\d{2})(\\d{7,8})","$1 $2",["(?:2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91)[2-9]"],"(0$1)"],["(\\d{5})(\\d{5})","$1 $2",["58"],"(0$1)"],["(\\d{3})(\\d{7})","$1 $2",["3"],"0$1"],["(\\d{2})(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3 $4",["2[125]|4[0-246-9]|5[1-35-7]|6[1-8]|7[14]|8[16]|91"],"(0$1)"],["(\\d{3})(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3 $4",["[24-9]"],"(0$1)"]],"0"],"PL":["48","00","[1-57-9]\\d{6}(?:\\d{2})?|6\\d{5,8}",[6,7,8,9],[["(\\d{5})","$1",["19"]],["(\\d{3})(\\d{3})","$1 $2",["11|64"]],["(\\d{2})(\\d{2})(\\d{3})","$1 $2 $3",["(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])1","(?:1[2-8]|2[2-69]|3[2-4]|4[1-468]|5[24-689]|6[1-3578]|7[14-7]|8[1-79]|9[145])19"]],["(\\d{3})(\\d{2})(\\d{2,3})","$1 $2 $3",["64"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["39|45|5[0137]|6[0469]|7[02389]|8[08]"]],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["1[2-8]|[2-8]|9[145]"]]]],"PM":["508","00","[45]\\d{5}",[6],[["(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3",["[45]"],"0$1"]],"0"],"PR":["1","011","(?:[589]\\d\\d|787)\\d{7}",[10],0,"1",0,0,0,0,"787|939"],"PS":["970","00","[2489]2\\d{6}|(?:1\\d|5)\\d{8}",[8,9,10],[["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["[2489]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["5"],"0$1"],["(\\d{4})(\\d{3})(\\d{3})","$1 $2 $3",["1"]]],"0"],"PT":["351","00","(?:[26-9]\\d|30)\\d{7}",[9],[["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["2[12]"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[236-9]"]]]],"PW":["680","01[12]","(?:[24-8]\\d\\d|345|900)\\d{4}",[7],[["(\\d{3})(\\d{4})","$1 $2",["[2-9]"]]]],"PY":["595","00","59\\d{4,6}|(?:[2-46-9]\\d|5[0-8])\\d{4,7}",[6,7,8,9],[["(\\d{3})(\\d{3,6})","$1 $2",["[2-9]0"],"0$1"],["(\\d{2})(\\d{5})","$1 $2",["[26]1|3[289]|4[1246-8]|7[1-3]|8[1-36]"],"(0$1)"],["(\\d{3})(\\d{4,5})","$1 $2",["2[279]|3[13-5]|4[359]|5|6(?:[34]|7[1-46-8])|7[46-8]|85"],"(0$1)"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["2[14-68]|3[26-9]|4[1246-8]|6(?:1|75)|7[1-35]|8[1-36]"],"(0$1)"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["87"]],["(\\d{3})(\\d{6})","$1 $2",["9"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[2-8]"],"0$1"]],"0"],"QA":["974","00","[2-7]\\d{7}|(?:2\\d\\d|800)\\d{4}",[7,8],[["(\\d{3})(\\d{4})","$1 $2",["2[126]|8"]],["(\\d{4})(\\d{4})","$1 $2",["[2-7]"]]]],"RE":["262","00","9769\\d{5}|(?:26|[68]\\d)\\d{7}",[9],[["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[2689]"],"0$1"]],"0",0,0,0,0,"26[23]|69|[89]"],"RO":["40","00","(?:[237]\\d|[89]0)\\d{7}|[23]\\d{5}",[6,9],[["(\\d{3})(\\d{3})","$1 $2",["2[3-6]","2[3-6]\\d9"],"0$1"],["(\\d{2})(\\d{4})","$1 $2",["219|31"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[23]1"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[237-9]"],"0$1"]],"0",0,0,0,0,0,0,0," int "],"RS":["381","00","38[02-9]\\d{6,9}|6\\d{7,9}|90\\d{4,8}|38\\d{5,6}|(?:7\\d\\d|800)\\d{3,9}|(?:[12]\\d|3[0-79])\\d{5,10}",[6,7,8,9,10,11,12],[["(\\d{3})(\\d{3,9})","$1 $2",["(?:2[389]|39)0|[7-9]"],"0$1"],["(\\d{2})(\\d{5,10})","$1 $2",["[1-36]"],"0$1"]],"0"],"RU":["7","810","[347-9]\\d{9}",[10],[["(\\d{4})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["7(?:1[0-8]|2[1-9])","7(?:1(?:[0-6]2|7|8[27])|2(?:1[23]|[2-9]2))","7(?:1(?:[0-6]2|7|8[27])|2(?:13[03-69]|62[013-9]))|72[1-57-9]2"],"8 ($1)",1],["(\\d{5})(\\d)(\\d{2})(\\d{2})","$1 $2 $3 $4",["7(?:1[0-68]|2[1-9])","7(?:1(?:[06][3-6]|[18]|2[35]|[3-5][3-5])|2(?:[13][3-5]|[24-689]|7[457]))","7(?:1(?:0(?:[356]|4[023])|[18]|2(?:3[013-9]|5)|3[45]|43[013-79]|5(?:3[1-8]|4[1-7]|5)|6(?:3[0-35-9]|[4-6]))|2(?:1(?:3[178]|[45])|[24-689]|3[35]|7[457]))|7(?:14|23)4[0-8]|71(?:33|45)[1-79]"],"8 ($1)",1],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["7"],"8 ($1)",1],["(\\d{3})(\\d{3})(\\d{2})(\\d{2})","$1 $2-$3-$4",["[3489]"],"8 ($1)",1]],"8",0,0,0,0,"3[04-689]|[489]",0,"8~10"],"RW":["250","00","(?:06|[27]\\d\\d|[89]00)\\d{6}",[8,9],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["0"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[7-9]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["2"]]],"0"],"SA":["966","00","92\\d{7}|(?:[15]|8\\d)\\d{8}",[9,10],[["(\\d{4})(\\d{5})","$1 $2",["9"]],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["1"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["5"],"0$1"],["(\\d{3})(\\d{3})(\\d{3,4})","$1 $2 $3",["81"],"0$1"],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["8"]]],"0"],"SB":["677","0[01]","(?:[1-6]|[7-9]\\d\\d)\\d{4}",[5,7],[["(\\d{2})(\\d{5})","$1 $2",["7|8[4-9]|9(?:[1-8]|9[0-8])"]]]],"SC":["248","010|0[0-2]","8000\\d{3}|(?:[249]\\d|64)\\d{5}",[7],[["(\\d)(\\d{3})(\\d{3})","$1 $2 $3",["[246]|9[57]"]]],0,0,0,0,0,0,0,"00"],"SD":["249","00","[19]\\d{8}",[9],[["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[19]"],"0$1"]],"0"],"SE":["46","00","(?:[26]\\d\\d|9)\\d{9}|[1-9]\\d{8}|[1-689]\\d{7}|[1-4689]\\d{6}|2\\d{5}",[6,7,8,9,10],[["(\\d{2})(\\d{2,3})(\\d{2})","$1-$2 $3",["20"],"0$1",0,"$1 $2 $3"],["(\\d{3})(\\d{4})","$1-$2",["9(?:00|39|44)"],"0$1",0,"$1 $2"],["(\\d{2})(\\d{3})(\\d{2})","$1-$2 $3",["[12][136]|3[356]|4[0246]|6[03]|90[1-9]"],"0$1",0,"$1 $2 $3"],["(\\d)(\\d{2,3})(\\d{2})(\\d{2})","$1-$2 $3 $4",["8"],"0$1",0,"$1 $2 $3 $4"],["(\\d{3})(\\d{2,3})(\\d{2})","$1-$2 $3",["1[2457]|2(?:[247-9]|5[0138])|3[0247-9]|4[1357-9]|5[0-35-9]|6(?:[125689]|4[02-57]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])"],"0$1",0,"$1 $2 $3"],["(\\d{3})(\\d{2,3})(\\d{3})","$1-$2 $3",["9(?:00|39|44)"],"0$1",0,"$1 $2 $3"],["(\\d{2})(\\d{2,3})(\\d{2})(\\d{2})","$1-$2 $3 $4",["1[13689]|2[0136]|3[1356]|4[0246]|54|6[03]|90[1-9]"],"0$1",0,"$1 $2 $3 $4"],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1-$2 $3 $4",["10|7"],"0$1",0,"$1 $2 $3 $4"],["(\\d)(\\d{3})(\\d{3})(\\d{2})","$1-$2 $3 $4",["8"],"0$1",0,"$1 $2 $3 $4"],["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1-$2 $3 $4",["[13-5]|2(?:[247-9]|5[0138])|6(?:[124-689]|7[0-2])|9(?:[125-8]|3[02-5]|4[0-3])"],"0$1",0,"$1 $2 $3 $4"],["(\\d{3})(\\d{2})(\\d{2})(\\d{3})","$1-$2 $3 $4",["9"],"0$1",0,"$1 $2 $3 $4"],["(\\d{3})(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1-$2 $3 $4 $5",["[26]"],"0$1",0,"$1 $2 $3 $4 $5"]],"0"],"SG":["65","0[0-3]\\d","(?:(?:1\\d|8)\\d\\d|7000)\\d{7}|[3689]\\d{7}",[8,10,11],[["(\\d{4})(\\d{4})","$1 $2",["[369]|8[1-9]"]],["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["8"]],["(\\d{4})(\\d{4})(\\d{3})","$1 $2 $3",["7"]],["(\\d{4})(\\d{3})(\\d{4})","$1 $2 $3",["1"]]]],"SH":["290","00","(?:[256]\\d|8)\\d{3}",[4,5],0,0,0,0,0,0,"[256]"],"SI":["386","00|10(?:22|66|88|99)","[1-7]\\d{7}|8\\d{4,7}|90\\d{4,6}",[5,6,7,8],[["(\\d{2})(\\d{3,6})","$1 $2",["8[09]|9"],"0$1"],["(\\d{3})(\\d{5})","$1 $2",["59|8"],"0$1"],["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["[37][01]|4[0139]|51|6"],"0$1"],["(\\d)(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[1-57]"],"(0$1)"]],"0",0,0,0,0,0,0,"00"],"SJ":["47","00","0\\d{4}|(?:[4589]\\d|79)\\d{6}",[5,8],0,0,0,0,0,0,"79"],"SK":["421","00","[2-689]\\d{8}|[2-59]\\d{6}|[2-5]\\d{5}",[6,7,9],[["(\\d)(\\d{2})(\\d{3,4})","$1 $2 $3",["21"],"0$1"],["(\\d{2})(\\d{2})(\\d{2,3})","$1 $2 $3",["[3-5][1-8]1","[3-5][1-8]1[67]"],"0$1"],["(\\d)(\\d{3})(\\d{3})(\\d{2})","$1/$2 $3 $4",["2"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[689]"],"0$1"],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1/$2 $3 $4",["[3-5]"],"0$1"]],"0"],"SL":["232","00","(?:[2378]\\d|66|99)\\d{6}",[8],[["(\\d{2})(\\d{6})","$1 $2",["[236-9]"],"(0$1)"]],"0"],"SM":["378","00","(?:0549|[5-7]\\d)\\d{6}",[8,10],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[5-7]"]],["(\\d{4})(\\d{6})","$1 $2",["0"]]],0,0,"([89]\\d{5})$","0549$1"],"SN":["221","00","(?:[378]\\d{4}|93330)\\d{4}",[9],[["(\\d{3})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["8"]],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[379]"]]]],"SO":["252","00","[346-9]\\d{8}|[12679]\\d{7}|[1-5]\\d{6}|[1348]\\d{5}",[6,7,8,9],[["(\\d{2})(\\d{4})","$1 $2",["8[125]"]],["(\\d{6})","$1",["[134]"]],["(\\d)(\\d{6})","$1 $2",["[15]|2[0-79]|3[0-46-8]|4[0-7]"]],["(\\d)(\\d{7})","$1 $2",["24|[67]"]],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[3478]|64|90"]],["(\\d{2})(\\d{5,7})","$1 $2",["1|28|6[1-35-9]|9[2-9]"]]],"0"],"SR":["597","00","(?:[2-5]|68|[78]\\d)\\d{5}",[6,7],[["(\\d{2})(\\d{2})(\\d{2})","$1-$2-$3",["56"]],["(\\d{3})(\\d{3})","$1-$2",["[2-5]"]],["(\\d{3})(\\d{4})","$1-$2",["[6-8]"]]]],"SS":["211","00","[19]\\d{8}",[9],[["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[19]"],"0$1"]],"0"],"ST":["239","00","(?:22|9\\d)\\d{5}",[7],[["(\\d{3})(\\d{4})","$1 $2",["[29]"]]]],"SV":["503","00","[267]\\d{7}|[89]00\\d{4}(?:\\d{4})?",[7,8,11],[["(\\d{3})(\\d{4})","$1 $2",["[89]"]],["(\\d{4})(\\d{4})","$1 $2",["[267]"]],["(\\d{3})(\\d{4})(\\d{4})","$1 $2 $3",["[89]"]]]],"SX":["1","011","7215\\d{6}|(?:[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"1|(5\\d{6})$","721$1",0,"721"],"SY":["963","00","[1-39]\\d{8}|[1-5]\\d{7}",[8,9],[["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[1-5]"],"0$1",1],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["9"],"0$1",1]],"0"],"SZ":["268","00","0800\\d{4}|(?:[237]\\d|900)\\d{6}",[8,9],[["(\\d{4})(\\d{4})","$1 $2",["[0237]"]],["(\\d{5})(\\d{4})","$1 $2",["9"]]]],"TA":["290","00","8\\d{3}",[4],0,0,0,0,0,0,"8"],"TC":["1","011","(?:[58]\\d\\d|649|900)\\d{7}",[10],0,"1",0,"1|([2-479]\\d{6})$","649$1",0,"649"],"TD":["235","00|16","(?:22|[69]\\d|77)\\d{6}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[2679]"]]],0,0,0,0,0,0,0,"00"],"TG":["228","00","[279]\\d{7}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[279]"]]]],"TH":["66","00[1-9]","1\\d{8,9}|(?:[2-57]|[689]\\d)\\d{7}",[8,9,10],[["(\\d)(\\d{3})(\\d{4})","$1 $2 $3",["2"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["14|[3-9]"],"0$1"],["(\\d{4})(\\d{3})(\\d{3})","$1 $2 $3",["1"]]],"0"],"TJ":["992","810","(?:00|11|[3-579]\\d|88)\\d{7}",[9],[["(\\d{6})(\\d)(\\d{2})","$1 $2 $3",["331","3317"],0,1],["(\\d{3})(\\d{2})(\\d{4})","$1 $2 $3",["[34]7|91[78]"],0,1],["(\\d{4})(\\d)(\\d{4})","$1 $2 $3",["3"],0,1],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[0457-9]|11"],0,1]],"8",0,0,0,0,0,0,"8~10"],"TK":["690","00","[2-47]\\d{3,6}",[4,5,6,7]],"TL":["670","00","7\\d{7}|(?:[2-47]\\d|[89]0)\\d{5}",[7,8],[["(\\d{3})(\\d{4})","$1 $2",["[2-489]|70"]],["(\\d{4})(\\d{4})","$1 $2",["7"]]]],"TM":["993","810","[1-6]\\d{7}",[8],[["(\\d{2})(\\d{2})(\\d{2})(\\d{2})","$1 $2-$3-$4",["12"],"(8 $1)"],["(\\d{3})(\\d)(\\d{2})(\\d{2})","$1 $2-$3-$4",["[1-5]"],"(8 $1)"],["(\\d{2})(\\d{6})","$1 $2",["6"],"8 $1"]],"8",0,0,0,0,0,0,"8~10"],"TN":["216","00","[2-57-9]\\d{7}",[8],[["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["[2-57-9]"]]]],"TO":["676","00","(?:0800|[5-8]\\d{3})\\d{3}|[2-8]\\d{4}",[5,7],[["(\\d{2})(\\d{3})","$1-$2",["[2-4]|50|6[09]|7[0-24-69]|8[05]"]],["(\\d{4})(\\d{3})","$1 $2",["0"]],["(\\d{3})(\\d{4})","$1 $2",["[5-8]"]]]],"TR":["90","00","(?:4|8\\d{5})\\d{6}|(?:[2-58]\\d\\d|900)\\d{7}",[7,10,12],[["(\\d{3})(\\d{3})(\\d{4})","$1 $2 $3",["512|8[0589]|90"],"0$1",1],["(\\d{3})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["5(?:[0-59]|61)","5(?:[0-59]|616)","5(?:[0-59]|6161)"],"0$1",1],["(\\d{3})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[24][1-8]|3[1-9]"],"(0$1)",1],["(\\d{3})(\\d{3})(\\d{6})","$1 $2 $3",["80"],"0$1",1]],"0"],"TT":["1","011","(?:[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"1|([2-46-8]\\d{6})$","868$1",0,"868"],"TV":["688","00","(?:2|7\\d\\d|90)\\d{4}",[5,6,7],[["(\\d{2})(\\d{3})","$1 $2",["2"]],["(\\d{2})(\\d{4})","$1 $2",["90"]],["(\\d{2})(\\d{5})","$1 $2",["7"]]]],"TW":["886","0(?:0[25-79]|19)","[2-689]\\d{8}|7\\d{9,10}|[2-8]\\d{7}|2\\d{6}",[7,8,9,10,11],[["(\\d{2})(\\d)(\\d{4})","$1 $2 $3",["202"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["[258]0"],"0$1"],["(\\d)(\\d{3,4})(\\d{4})","$1 $2 $3",["[23568]|4(?:0[02-48]|[1-47-9])|7[1-9]","[23568]|4(?:0[2-48]|[1-47-9])|(?:400|7)[1-9]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[49]"],"0$1"],["(\\d{2})(\\d{4})(\\d{4,5})","$1 $2 $3",["7"],"0$1"]],"0",0,0,0,0,0,0,0,"#"],"TZ":["255","00[056]","(?:[26-8]\\d|41|90)\\d{7}",[9],[["(\\d{3})(\\d{2})(\\d{4})","$1 $2 $3",["[89]"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[24]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[67]"],"0$1"]],"0"],"UA":["380","00","[89]\\d{9}|[3-9]\\d{8}",[9,10],[["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["6[12][29]|(?:3[1-8]|4[136-8]|5[12457]|6[49])2|(?:56|65)[24]","6[12][29]|(?:35|4[1378]|5[12457]|6[49])2|(?:56|65)[24]|(?:3[1-46-8]|46)2[013-9]"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["4[45][0-5]|5(?:0|6[37])|6(?:[12][018]|[36-8])|7|89|9[1-9]|(?:48|57)[0137-9]","4[45][0-5]|5(?:0|6(?:3[14-7]|7))|6(?:[12][018]|[36-8])|7|89|9[1-9]|(?:48|57)[0137-9]"],"0$1"],["(\\d{4})(\\d{5})","$1 $2",["[3-6]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3,4})","$1 $2 $3",["[89]"],"0$1"]],"0",0,0,0,0,0,0,"0~0"],"UG":["256","00[057]","800\\d{6}|(?:[29]0|[347]\\d)\\d{7}",[9],[["(\\d{4})(\\d{5})","$1 $2",["202","2024"],"0$1"],["(\\d{3})(\\d{6})","$1 $2",["[27-9]|4(?:6[45]|[7-9])"],"0$1"],["(\\d{2})(\\d{7})","$1 $2",["[34]"],"0$1"]],"0"],"US":["1","011","[2-9]\\d{9}",[10],[["(\\d{3})(\\d{3})(\\d{4})","($1) $2-$3",["[2-9]"],0,1,"$1-$2-$3"]],"1",0,0,0,0,0,[["(?:2(?:0[1-35-9]|1[02-9]|2[03-589]|3[149]|4[08]|5[1-46]|6[0279]|7[0269]|8[13])|3(?:0[1-57-9]|1[02-9]|2[0135]|3[0-24679]|4[167]|5[12]|6[014]|8[056])|4(?:0[124-9]|1[02-579]|2[3-5]|3[0245]|4[0235]|58|6[39]|7[0589]|8[04])|5(?:0[1-57-9]|1[0235-8]|20|3[0149]|4[01]|5[19]|6[1-47]|7[013-5]|8[056])|6(?:0[1-35-9]|1[024-9]|2[03689]|[34][016]|5[0179]|6[0-279]|78|8[0-29])|7(?:0[1-46-8]|1[2-9]|2[04-7]|3[1247]|4[037]|5[47]|6[02359]|7[02-59]|8[156])|8(?:0[1-68]|1[02-8]|2[08]|3[0-28]|4[3578]|5[046-9]|6[02-5]|7[028])|9(?:0[1346-9]|1[02-9]|2[0589]|3[0146-8]|4[0179]|5[12469]|7[0-389]|8[04-69]))[2-9]\\d{6}"],[""],["8(?:00|33|44|55|66|77|88)[2-9]\\d{6}"],["900[2-9]\\d{6}"],["52(?:35(?:[02-46-9]\\d|1[02-9]|5[0-46-9])|45(?:[034]\\d|1[02-9]|2[024-9]|5[0-46-9]))\\d{4}|52(?:3[2-46-9]|4[2-4])(?:[02-9]\\d|1[02-9])\\d{4}|5(?:00|2[12]|33|44|66|77|88)[2-9]\\d{6}"]]],"UY":["598","0(?:0|1[3-9]\\d)","(?:[249]\\d\\d|80)\\d{5}|9\\d{6}",[7,8],[["(\\d{3})(\\d{4})","$1 $2",["8|90"],"0$1"],["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["9"],"0$1"],["(\\d{4})(\\d{4})","$1 $2",["[24]"]]],"0",0,0,0,0,0,0,"00"," int. "],"UZ":["998","810","(?:[679]\\d|88)\\d{7}",[9],[["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[6-9]"],"8 $1"]],"8",0,0,0,0,0,0,"8~10"],"VA":["39","00","0\\d{5,10}|3[0-8]\\d{7,10}|55\\d{8}|8\\d{5}(?:\\d{2,4})?|(?:1\\d|39)\\d{7,8}",[6,7,8,9,10,11],0,0,0,0,0,0,"06698"],"VC":["1","011","(?:[58]\\d\\d|784|900)\\d{7}",[10],0,"1",0,"1|([2-7]\\d{6})$","784$1",0,"784"],"VE":["58","00","[68]00\\d{7}|(?:[24]\\d|[59]0)\\d{8}",[10],[["(\\d{3})(\\d{7})","$1-$2",["[24-689]"],"0$1"]],"0"],"VG":["1","011","(?:284|[58]\\d\\d|900)\\d{7}",[10],0,"1",0,"1|([2-578]\\d{6})$","284$1",0,"284"],"VI":["1","011","[58]\\d{9}|(?:34|90)0\\d{7}",[10],0,"1",0,"1|([2-9]\\d{6})$","340$1",0,"340"],"VN":["84","00","[12]\\d{9}|[135-9]\\d{8}|[16]\\d{7}|[16-8]\\d{6}",[7,8,9,10],[["(\\d{2})(\\d{5})","$1 $2",["80"],"0$1",1],["(\\d{4})(\\d{4,6})","$1 $2",["1"],0,1],["(\\d{2})(\\d{3})(\\d{2})(\\d{2})","$1 $2 $3 $4",["[69]"],"0$1",1],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[3578]"],"0$1",1],["(\\d{2})(\\d{4})(\\d{4})","$1 $2 $3",["2[48]"],"0$1",1],["(\\d{3})(\\d{4})(\\d{3})","$1 $2 $3",["2"],"0$1",1]],"0"],"VU":["678","00","(?:[23]\\d|[48]8)\\d{3}|(?:[57]\\d|90)\\d{5}",[5,7],[["(\\d{3})(\\d{4})","$1 $2",["[579]"]]]],"WF":["681","00","(?:[45]0|68|72|8\\d)\\d{4}",[6],[["(\\d{2})(\\d{2})(\\d{2})","$1 $2 $3",["[4-8]"]]]],"WS":["685","0","(?:[2-6]|8\\d{5})\\d{4}|[78]\\d{6}|[68]\\d{5}",[5,6,7,10],[["(\\d{5})","$1",["[2-5]|6[1-9]"]],["(\\d{3})(\\d{3,7})","$1 $2",["[68]"]],["(\\d{2})(\\d{5})","$1 $2",["7"]]]],"XK":["383","00","[23]\\d{7,8}|(?:4\\d\\d|[89]00)\\d{5}",[8,9],[["(\\d{3})(\\d{5})","$1 $2",["[89]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3})","$1 $2 $3",["[2-4]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[23]"],"0$1"]],"0"],"YE":["967","00","(?:1|7\\d)\\d{7}|[1-7]\\d{6}",[7,8,9],[["(\\d)(\\d{3})(\\d{3,4})","$1 $2 $3",["[1-6]|7[24-68]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["7"],"0$1"]],"0"],"YT":["262","00","80\\d{7}|(?:26|63)9\\d{6}",[9],0,"0",0,0,0,0,"269|63"],"ZA":["27","00","[1-9]\\d{8}|8\\d{4,7}",[5,6,7,8,9],[["(\\d{2})(\\d{3,4})","$1 $2",["8[1-4]"],"0$1"],["(\\d{2})(\\d{3})(\\d{2,3})","$1 $2 $3",["8[1-4]"],"0$1"],["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["860"],"0$1"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["[1-9]"],"0$1"]],"0"],"ZM":["260","00","(?:63|80)0\\d{6}|(?:21|[79]\\d)\\d{7}",[9],[["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[28]"],"0$1"],["(\\d{2})(\\d{7})","$1 $2",["[79]"],"0$1"]],"0"],"ZW":["263","00","2(?:[0-57-9]\\d{6,8}|6[0-24-9]\\d{6,7})|[38]\\d{9}|[35-8]\\d{8}|[3-6]\\d{7}|[1-689]\\d{6}|[1-3569]\\d{5}|[1356]\\d{4}",[5,6,7,8,9,10],[["(\\d{3})(\\d{3,5})","$1 $2",["2(?:0[45]|2[278]|[49]8)|3(?:[09]8|17)|6(?:[29]8|37|75)|[23][78]|(?:33|5[15]|6[68])[78]"],"0$1"],["(\\d)(\\d{3})(\\d{2,4})","$1 $2 $3",["[49]"],"0$1"],["(\\d{3})(\\d{4})","$1 $2",["80"],"0$1"],["(\\d{2})(\\d{7})","$1 $2",["24|8[13-59]|(?:2[05-79]|39|5[45]|6[15-8])2","2(?:02[014]|4|[56]20|[79]2)|392|5(?:42|525)|6(?:[16-8]21|52[013])|8[13-59]"],"(0$1)"],["(\\d{2})(\\d{3})(\\d{4})","$1 $2 $3",["7"],"0$1"],["(\\d{3})(\\d{3})(\\d{3,4})","$1 $2 $3",["2(?:1[39]|2[0157]|[378]|[56][14])|3(?:12|29)","2(?:1[39]|2[0157]|[378]|[56][14])|3(?:123|29)"],"0$1"],["(\\d{4})(\\d{6})","$1 $2",["8"],"0$1"],["(\\d{2})(\\d{3,5})","$1 $2",["1|2(?:0[0-36-9]|12|29|[56])|3(?:1[0-689]|[24-6])|5(?:[0236-9]|1[2-4])|6(?:[013-59]|7[0-46-9])|(?:33|55|6[68])[0-69]|(?:29|3[09]|62)[0-79]"],"0$1"],["(\\d{2})(\\d{3})(\\d{3,4})","$1 $2 $3",["29[013-9]|39|54"],"0$1"],["(\\d{4})(\\d{3,5})","$1 $2",["(?:25|54)8","258|5483"],"0$1"]],"0"]},"nonGeographic":{"800":["800",0,"[1-9]\\d{7}",[8],[["(\\d{4})(\\d{4})","$1 $2",["[1-9]"]]],0,0,0,0,0,0,[0,0,["[1-9]\\d{7}"]]],"808":["808",0,"[1-9]\\d{7}",[8],[["(\\d{4})(\\d{4})","$1 $2",["[1-9]"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,0,["[1-9]\\d{7}"]]],"870":["870",0,"[35-7]\\d{8}",[9],[["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["[35-7]"]]],0,0,0,0,0,0,[0,["(?:[356]\\d|7[6-8])\\d{7}"]]],"878":["878",0,"10\\d{10}",[12],[["(\\d{2})(\\d{5})(\\d{5})","$1 $2 $3",["1"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,["10\\d{10}"]]],"881":["881",0,"[0-36-9]\\d{8}",[9],[["(\\d)(\\d{3})(\\d{5})","$1 $2 $3",["[0-36-9]"]]],0,0,0,0,0,0,[0,["[0-36-9]\\d{8}"]]],"882":["882",0,"[13]\\d{6}(?:\\d{2,5})?|285\\d{9}|[19]\\d{7}",[7,8,9,10,11,12],[["(\\d{2})(\\d{5})","$1 $2",["16|342"]],["(\\d{2})(\\d{2})(\\d{4})","$1 $2 $3",["[19]"]],["(\\d{2})(\\d{4})(\\d{3})","$1 $2 $3",["3[23]"]],["(\\d{2})(\\d{3,4})(\\d{4})","$1 $2 $3",["1"]],["(\\d{2})(\\d{4})(\\d{4})","$1 $2 $3",["34[57]"]],["(\\d{3})(\\d{4})(\\d{4})","$1 $2 $3",["34"]],["(\\d{2})(\\d{4,5})(\\d{5})","$1 $2 $3",["[1-3]"]]],0,0,0,0,0,0,[0,["3(?:37\\d\\d|42)\\d{4}|3(?:2|47|7\\d{3})\\d{7}",[7,9,10,12]],0,0,0,0,0,0,["1(?:3(?:0[0347]|[13][0139]|2[035]|4[013568]|6[0459]|7[06]|8[15-8]|9[0689])\\d{4}|6\\d{5,10})|(?:(?:285\\d\\d|3(?:45|[69]\\d{3}))\\d|9[89])\\d{6}"]]],"883":["883",0,"51\\d{7}(?:\\d{3})?",[9,12],[["(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3",["510"]],["(\\d{3})(\\d{3})(\\d{3})(\\d{3})","$1 $2 $3 $4",["510"]],["(\\d{4})(\\d{4})(\\d{4})","$1 $2 $3",["5"]]],0,0,0,0,0,0,[0,0,0,0,0,0,0,0,["51[013]0\\d{8}|5100\\d{5}"]]],"888":["888",0,"\\d{11}",[11],[["(\\d{3})(\\d{3})(\\d{5})","$1 $2 $3"]],0,0,0,0,0,0,[0,0,0,0,0,0,["\\d{11}"]]],"979":["979",0,"[1359]\\d{8}",[9],[["(\\d)(\\d{4})(\\d{4})","$1 $2 $3",["[1359]"]]],0,0,0,0,0,0,[0,0,0,["[1359]\\d{8}"]]]}};

	// The minimum length of the national significant number.
	var MIN_LENGTH_FOR_NSN = 2; // The ITU says the maximum length should be 15,
	// but one can find longer numbers in Germany.

	var MAX_LENGTH_FOR_NSN = 17; // The maximum length of the country calling code.

	var MAX_LENGTH_COUNTRY_CODE = 3; // Digits accepted in phone numbers
	// (ascii, fullwidth, arabic-indic, and eastern arabic digits).

	var VALID_DIGITS = "0-9\uFF10-\uFF19\u0660-\u0669\u06F0-\u06F9"; // `DASHES` will be right after the opening square bracket of the "character class"

	var DASHES = "-\u2010-\u2015\u2212\u30FC\uFF0D";
	var SLASHES = "\uFF0F/";
	var DOTS = "\uFF0E.";
	var WHITESPACE = " \xA0\xAD\u200B\u2060\u3000";
	var BRACKETS = "()\uFF08\uFF09\uFF3B\uFF3D\\[\\]"; // export const OPENING_BRACKETS = '(\uFF08\uFF3B\\\['

	var TILDES = "~\u2053\u223C\uFF5E"; // Regular expression of acceptable punctuation found in phone numbers. This
	// excludes punctuation found as a leading character only. This consists of dash
	// characters, white space characters, full stops, slashes, square brackets,
	// parentheses and tildes. Full-width variants are also present.

	var VALID_PUNCTUATION = "".concat(DASHES).concat(SLASHES).concat(DOTS).concat(WHITESPACE).concat(BRACKETS).concat(TILDES);
	var PLUS_CHARS = "+\uFF0B"; // const LEADING_PLUS_CHARS_PATTERN = new RegExp('^[' + PLUS_CHARS + ']+')

	/**
	 * Checks whether the entire input sequence can be matched
	 * against the regular expression.
	 * @return {boolean}
	 */
	function matchesEntirely(text, regular_expression) {
	  // If assigning the `''` default value is moved to the arguments above,
	  // code coverage would decrease for some weird reason.
	  text = text || '';
	  return new RegExp('^(?:' + regular_expression + ')$').test(text);
	}
	/**
	 * Merges two arrays.
	 * @param  {*} a
	 * @param  {*} b
	 * @return {*}
	 */

	function mergeArrays(a, b) {
	  var merged = a.slice();

	  for (var _iterator = b, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
	    var _ref;

	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }

	    var element = _ref;

	    if (a.indexOf(element) < 0) {
	      merged.push(element);
	    }
	  }

	  return merged.sort(function (a, b) {
	    return a - b;
	  }); // ES6 version, requires Set polyfill.
	  // let merged = new Set(a)
	  // for (const element of b)
	  // {
	  // 	merged.add(i)
	  // }
	  // return Array.from(merged).sort((a, b) => a - b)
	}

	function _classCallCheck$3(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	// https://stackoverflow.com/a/46971044/970769
	var ParseError = function ParseError(code) {
	  _classCallCheck$3(this, ParseError);

	  this.name = this.constructor.name;
	  this.message = code;
	  this.stack = new Error(code).stack;
	};
	ParseError.prototype = Object.create(Error.prototype);
	ParseError.prototype.constructor = ParseError;

	// Copy-pasted from:
	// https://github.com/substack/semver-compare/blob/master/index.js
	//
	// Inlining this function because some users reported issues with
	// importing from `semver-compare` in a browser with ES6 "native" modules.
	//
	// Fixes `semver-compare` not being able to compare versions with alpha/beta/etc "tags".
	// https://github.com/catamphetamine/libphonenumber-js/issues/381
	function compare (a, b) {
	  a = a.split('-');
	  b = b.split('-');
	  var pa = a[0].split('.');
	  var pb = b[0].split('.');

	  for (var i = 0; i < 3; i++) {
	    var na = Number(pa[i]);
	    var nb = Number(pb[i]);
	    if (na > nb) return 1;
	    if (nb > na) return -1;
	    if (!isNaN(na) && isNaN(nb)) return 1;
	    if (isNaN(na) && !isNaN(nb)) return -1;
	  }

	  if (a[1] && b[1]) {
	    return a[1] > b[1] ? 1 : a[1] < b[1] ? -1 : 0;
	  }

	  return !a[1] && b[1] ? 1 : a[1] && !b[1] ? -1 : 0;
	}

	function _typeof$3(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$3 = function _typeof(obj) { return typeof obj; }; } else { _typeof$3 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$3(obj); }

	function _classCallCheck$1$2(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$3(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$3(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$3(Constructor.prototype, protoProps); if (staticProps) _defineProperties$3(Constructor, staticProps); return Constructor; }

	var V3 = '1.2.0'; // Moved `001` country code to "nonGeographic" section of metadata.

	var V4 = '1.7.35';
	var DEFAULT_EXT_PREFIX = ' ext. ';
	/**
	 * See: https://gitlab.com/catamphetamine/libphonenumber-js/blob/master/METADATA.md
	 */

	var Metadata =
	/*#__PURE__*/
	function () {
	  function Metadata(metadata) {
	    _classCallCheck$1$2(this, Metadata);

	    validateMetadata(metadata);
	    this.metadata = metadata;
	    setVersion.call(this, metadata);
	  }

	  _createClass$3(Metadata, [{
	    key: "getCountries",
	    value: function getCountries() {
	      return Object.keys(this.metadata.countries).filter(function (_) {
	        return _ !== '001';
	      });
	    }
	  }, {
	    key: "getCountryMetadata",
	    value: function getCountryMetadata(countryCode) {
	      return this.metadata.countries[countryCode];
	    }
	  }, {
	    key: "nonGeographic",
	    value: function nonGeographic() {
	      if (this.v1 || this.v2 || this.v3) return; // `nonGeographical` was a typo.
	      // It's present in metadata generated from `1.7.35` to `1.7.37`.

	      return this.metadata.nonGeographic || this.metadata.nonGeographical;
	    }
	  }, {
	    key: "hasCountry",
	    value: function hasCountry(country) {
	      return this.getCountryMetadata(country) !== undefined;
	    }
	  }, {
	    key: "hasCallingCode",
	    value: function hasCallingCode(callingCode) {
	      if (this.getCountryCodesForCallingCode(callingCode)) {
	        return true;
	      }

	      if (this.nonGeographic()) {
	        if (this.nonGeographic()[callingCode]) {
	          return true;
	        }
	      } else {
	        // A hacky workaround for old custom metadata (generated before V4).
	        var countryCodes = this.countryCallingCodes()[callingCode];

	        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {
	          return true;
	        }
	      }
	    }
	  }, {
	    key: "isNonGeographicCallingCode",
	    value: function isNonGeographicCallingCode(callingCode) {
	      if (this.nonGeographic()) {
	        return this.nonGeographic()[callingCode] ? true : false;
	      } else {
	        return this.getCountryCodesForCallingCode(callingCode) ? false : true;
	      }
	    } // Deprecated.

	  }, {
	    key: "country",
	    value: function country(countryCode) {
	      return this.selectNumberingPlan(countryCode);
	    }
	  }, {
	    key: "selectNumberingPlan",
	    value: function selectNumberingPlan(countryCode, callingCode) {
	      if (countryCode && countryCode !== '001') {
	        if (!this.hasCountry(countryCode)) {
	          throw new Error("Unknown country: ".concat(countryCode));
	        }

	        this.numberingPlan = new NumberingPlan(this.getCountryMetadata(countryCode), this);
	      } else if (callingCode) {
	        if (!this.hasCallingCode(callingCode)) {
	          throw new Error("Unknown calling code: ".concat(callingCode));
	        }

	        this.numberingPlan = new NumberingPlan(this.getNumberingPlanMetadata(callingCode), this);
	      } else {
	        this.numberingPlan = undefined;
	      }

	      return this;
	    }
	  }, {
	    key: "getCountryCodesForCallingCode",
	    value: function getCountryCodesForCallingCode(callingCode) {
	      var countryCodes = this.countryCallingCodes()[callingCode];

	      if (countryCodes) {
	        // Metadata before V4 included "non-geographic entity" calling codes
	        // inside `country_calling_codes` (for example, `"881":["001"]`).
	        // Now the semantics of `country_calling_codes` has changed:
	        // it's specifically for "countries" now.
	        // Older versions of custom metadata will simply skip parsing
	        // "non-geographic entity" phone numbers with new versions
	        // of this library: it's not considered a bug,
	        // because such numbers are extremely rare,
	        // and developers extremely rarely use custom metadata.
	        if (countryCodes.length === 1 && countryCodes[0].length === 3) {
	          return;
	        }

	        return countryCodes;
	      }
	    }
	  }, {
	    key: "getCountryCodeForCallingCode",
	    value: function getCountryCodeForCallingCode(callingCode) {
	      var countryCodes = this.getCountryCodesForCallingCode(callingCode);

	      if (countryCodes) {
	        return countryCodes[0];
	      }
	    }
	  }, {
	    key: "getNumberingPlanMetadata",
	    value: function getNumberingPlanMetadata(callingCode) {
	      var countryCode = this.getCountryCodeForCallingCode(callingCode);

	      if (countryCode) {
	        return this.getCountryMetadata(countryCode);
	      }

	      if (this.nonGeographic()) {
	        var metadata = this.nonGeographic()[callingCode];

	        if (metadata) {
	          return metadata;
	        }
	      } else {
	        // A hacky workaround for old custom metadata (generated before V4).
	        var countryCodes = this.countryCallingCodes()[callingCode];

	        if (countryCodes && countryCodes.length === 1 && countryCodes[0] === '001') {
	          return this.metadata.countries['001'];
	        }
	      }
	    } // Deprecated.

	  }, {
	    key: "countryCallingCode",
	    value: function countryCallingCode() {
	      return this.numberingPlan.callingCode();
	    } // Deprecated.

	  }, {
	    key: "IDDPrefix",
	    value: function IDDPrefix() {
	      return this.numberingPlan.IDDPrefix();
	    } // Deprecated.

	  }, {
	    key: "defaultIDDPrefix",
	    value: function defaultIDDPrefix() {
	      return this.numberingPlan.defaultIDDPrefix();
	    } // Deprecated.

	  }, {
	    key: "nationalNumberPattern",
	    value: function nationalNumberPattern() {
	      return this.numberingPlan.nationalNumberPattern();
	    } // Deprecated.

	  }, {
	    key: "possibleLengths",
	    value: function possibleLengths() {
	      return this.numberingPlan.possibleLengths();
	    } // Deprecated.

	  }, {
	    key: "formats",
	    value: function formats() {
	      return this.numberingPlan.formats();
	    } // Deprecated.

	  }, {
	    key: "nationalPrefixForParsing",
	    value: function nationalPrefixForParsing() {
	      return this.numberingPlan.nationalPrefixForParsing();
	    } // Deprecated.

	  }, {
	    key: "nationalPrefixTransformRule",
	    value: function nationalPrefixTransformRule() {
	      return this.numberingPlan.nationalPrefixTransformRule();
	    } // Deprecated.

	  }, {
	    key: "leadingDigits",
	    value: function leadingDigits() {
	      return this.numberingPlan.leadingDigits();
	    } // Deprecated.

	  }, {
	    key: "hasTypes",
	    value: function hasTypes() {
	      return this.numberingPlan.hasTypes();
	    } // Deprecated.

	  }, {
	    key: "type",
	    value: function type(_type) {
	      return this.numberingPlan.type(_type);
	    } // Deprecated.

	  }, {
	    key: "ext",
	    value: function ext() {
	      return this.numberingPlan.ext();
	    }
	  }, {
	    key: "countryCallingCodes",
	    value: function countryCallingCodes() {
	      if (this.v1) return this.metadata.country_phone_code_to_countries;
	      return this.metadata.country_calling_codes;
	    } // Deprecated.

	  }, {
	    key: "chooseCountryByCountryCallingCode",
	    value: function chooseCountryByCountryCallingCode(callingCode) {
	      this.selectNumberingPlan(null, callingCode);
	    }
	  }, {
	    key: "hasSelectedNumberingPlan",
	    value: function hasSelectedNumberingPlan() {
	      return this.numberingPlan !== undefined;
	    }
	  }]);

	  return Metadata;
	}();

	var NumberingPlan =
	/*#__PURE__*/
	function () {
	  function NumberingPlan(metadata, globalMetadataObject) {
	    _classCallCheck$1$2(this, NumberingPlan);

	    this.globalMetadataObject = globalMetadataObject;
	    this.metadata = metadata;
	    setVersion.call(this, globalMetadataObject.metadata);
	  }

	  _createClass$3(NumberingPlan, [{
	    key: "callingCode",
	    value: function callingCode() {
	      return this.metadata[0];
	    } // Formatting information for regions which share
	    // a country calling code is contained by only one region
	    // for performance reasons. For example, for NANPA region
	    // ("North American Numbering Plan Administration",
	    //  which includes USA, Canada, Cayman Islands, Bahamas, etc)
	    // it will be contained in the metadata for `US`.

	  }, {
	    key: "getDefaultCountryMetadataForRegion",
	    value: function getDefaultCountryMetadataForRegion() {
	      return this.globalMetadataObject.getNumberingPlanMetadata(this.callingCode());
	    }
	  }, {
	    key: "IDDPrefix",
	    value: function IDDPrefix() {
	      if (this.v1 || this.v2) return;
	      return this.metadata[1];
	    }
	  }, {
	    key: "defaultIDDPrefix",
	    value: function defaultIDDPrefix() {
	      if (this.v1 || this.v2) return;
	      return this.metadata[12];
	    }
	  }, {
	    key: "nationalNumberPattern",
	    value: function nationalNumberPattern() {
	      if (this.v1 || this.v2) return this.metadata[1];
	      return this.metadata[2];
	    }
	  }, {
	    key: "possibleLengths",
	    value: function possibleLengths() {
	      if (this.v1) return;
	      return this.metadata[this.v2 ? 2 : 3];
	    }
	  }, {
	    key: "_getFormats",
	    value: function _getFormats(metadata) {
	      return metadata[this.v1 ? 2 : this.v2 ? 3 : 4];
	    } // For countries of the same region (e.g. NANPA)
	    // formats are all stored in the "main" country for that region.
	    // E.g. "RU" and "KZ", "US" and "CA".

	  }, {
	    key: "formats",
	    value: function formats() {
	      var _this = this;

	      var formats = this._getFormats(this.metadata) || this._getFormats(this.getDefaultCountryMetadataForRegion()) || [];
	      return formats.map(function (_) {
	        return new Format(_, _this);
	      });
	    }
	  }, {
	    key: "nationalPrefix",
	    value: function nationalPrefix() {
	      return this.metadata[this.v1 ? 3 : this.v2 ? 4 : 5];
	    }
	  }, {
	    key: "_getNationalPrefixFormattingRule",
	    value: function _getNationalPrefixFormattingRule(metadata) {
	      return metadata[this.v1 ? 4 : this.v2 ? 5 : 6];
	    } // For countries of the same region (e.g. NANPA)
	    // national prefix formatting rule is stored in the "main" country for that region.
	    // E.g. "RU" and "KZ", "US" and "CA".

	  }, {
	    key: "nationalPrefixFormattingRule",
	    value: function nationalPrefixFormattingRule() {
	      return this._getNationalPrefixFormattingRule(this.metadata) || this._getNationalPrefixFormattingRule(this.getDefaultCountryMetadataForRegion());
	    }
	  }, {
	    key: "_nationalPrefixForParsing",
	    value: function _nationalPrefixForParsing() {
	      return this.metadata[this.v1 ? 5 : this.v2 ? 6 : 7];
	    }
	  }, {
	    key: "nationalPrefixForParsing",
	    value: function nationalPrefixForParsing() {
	      // If `national_prefix_for_parsing` is not set explicitly,
	      // then infer it from `national_prefix` (if any)
	      return this._nationalPrefixForParsing() || this.nationalPrefix();
	    }
	  }, {
	    key: "nationalPrefixTransformRule",
	    value: function nationalPrefixTransformRule() {
	      return this.metadata[this.v1 ? 6 : this.v2 ? 7 : 8];
	    }
	  }, {
	    key: "_getNationalPrefixIsOptionalWhenFormatting",
	    value: function _getNationalPrefixIsOptionalWhenFormatting() {
	      return !!this.metadata[this.v1 ? 7 : this.v2 ? 8 : 9];
	    } // For countries of the same region (e.g. NANPA)
	    // "national prefix is optional when formatting" flag is
	    // stored in the "main" country for that region.
	    // E.g. "RU" and "KZ", "US" and "CA".

	  }, {
	    key: "nationalPrefixIsOptionalWhenFormattingInNationalFormat",
	    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {
	      return this._getNationalPrefixIsOptionalWhenFormatting(this.metadata) || this._getNationalPrefixIsOptionalWhenFormatting(this.getDefaultCountryMetadataForRegion());
	    }
	  }, {
	    key: "leadingDigits",
	    value: function leadingDigits() {
	      return this.metadata[this.v1 ? 8 : this.v2 ? 9 : 10];
	    }
	  }, {
	    key: "types",
	    value: function types() {
	      return this.metadata[this.v1 ? 9 : this.v2 ? 10 : 11];
	    }
	  }, {
	    key: "hasTypes",
	    value: function hasTypes() {
	      // Versions 1.2.0 - 1.2.4: can be `[]`.

	      /* istanbul ignore next */
	      if (this.types() && this.types().length === 0) {
	        return false;
	      } // Versions <= 1.2.4: can be `undefined`.
	      // Version >= 1.2.5: can be `0`.


	      return !!this.types();
	    }
	  }, {
	    key: "type",
	    value: function type(_type2) {
	      if (this.hasTypes() && getType(this.types(), _type2)) {
	        return new Type(getType(this.types(), _type2), this);
	      }
	    }
	  }, {
	    key: "ext",
	    value: function ext() {
	      if (this.v1 || this.v2) return DEFAULT_EXT_PREFIX;
	      return this.metadata[13] || DEFAULT_EXT_PREFIX;
	    }
	  }]);

	  return NumberingPlan;
	}();

	var Format =
	/*#__PURE__*/
	function () {
	  function Format(format, metadata) {
	    _classCallCheck$1$2(this, Format);

	    this._format = format;
	    this.metadata = metadata;
	  }

	  _createClass$3(Format, [{
	    key: "pattern",
	    value: function pattern() {
	      return this._format[0];
	    }
	  }, {
	    key: "format",
	    value: function format() {
	      return this._format[1];
	    }
	  }, {
	    key: "leadingDigitsPatterns",
	    value: function leadingDigitsPatterns() {
	      return this._format[2] || [];
	    }
	  }, {
	    key: "nationalPrefixFormattingRule",
	    value: function nationalPrefixFormattingRule() {
	      return this._format[3] || this.metadata.nationalPrefixFormattingRule();
	    }
	  }, {
	    key: "nationalPrefixIsOptionalWhenFormattingInNationalFormat",
	    value: function nationalPrefixIsOptionalWhenFormattingInNationalFormat() {
	      return !!this._format[4] || this.metadata.nationalPrefixIsOptionalWhenFormattingInNationalFormat();
	    }
	  }, {
	    key: "nationalPrefixIsMandatoryWhenFormattingInNationalFormat",
	    value: function nationalPrefixIsMandatoryWhenFormattingInNationalFormat() {
	      // National prefix is omitted if there's no national prefix formatting rule
	      // set for this country, or when the national prefix formatting rule
	      // contains no national prefix itself, or when this rule is set but
	      // national prefix is optional for this phone number format
	      // (and it is not enforced explicitly)
	      return this.usesNationalPrefix() && !this.nationalPrefixIsOptionalWhenFormattingInNationalFormat();
	    } // Checks whether national prefix formatting rule contains national prefix.

	  }, {
	    key: "usesNationalPrefix",
	    value: function usesNationalPrefix() {
	      return this.nationalPrefixFormattingRule() && // Check that national prefix formatting rule is not a "dummy" one.
	      !FIRST_GROUP_ONLY_PREFIX_PATTERN.test(this.nationalPrefixFormattingRule()); // Previously, `FIRST_GROUP_ONLY_PREFIX_PATTERN` check was instead done via:
	      // // Check that national prefix formatting rule is not a "dummy" one.
	      // this.nationalPrefixFormattingRule() !== '$1' &&
	      // // Check that national prefix formatting rule actually has national prefix digit(s).
	      // // Filters out cases like "($1)".
	      // // Is used in place of `libphonenumber`'s `FIRST_GROUP_ONLY_PREFIX_PATTERN_` regexp.
	      // /\d/.test(this.nationalPrefixFormattingRule().replace('$1', ''))
	    }
	  }, {
	    key: "internationalFormat",
	    value: function internationalFormat() {
	      return this._format[5] || this.format();
	    }
	  }]);

	  return Format;
	}();
	/**
	 * A pattern that is used to determine if the national prefix formatting rule
	 * has the first group only, i.e., does not start with the national prefix.
	 * Note that the pattern explicitly allows for unbalanced parentheses.
	 */


	var FIRST_GROUP_ONLY_PREFIX_PATTERN = /^\(?\$1\)?$/;

	var Type =
	/*#__PURE__*/
	function () {
	  function Type(type, metadata) {
	    _classCallCheck$1$2(this, Type);

	    this.type = type;
	    this.metadata = metadata;
	  }

	  _createClass$3(Type, [{
	    key: "pattern",
	    value: function pattern() {
	      if (this.metadata.v1) return this.type;
	      return this.type[0];
	    }
	  }, {
	    key: "possibleLengths",
	    value: function possibleLengths() {
	      if (this.metadata.v1) return;
	      return this.type[1] || this.metadata.possibleLengths();
	    }
	  }]);

	  return Type;
	}();

	function getType(types, type) {
	  switch (type) {
	    case 'FIXED_LINE':
	      return types[0];

	    case 'MOBILE':
	      return types[1];

	    case 'TOLL_FREE':
	      return types[2];

	    case 'PREMIUM_RATE':
	      return types[3];

	    case 'PERSONAL_NUMBER':
	      return types[4];

	    case 'VOICEMAIL':
	      return types[5];

	    case 'UAN':
	      return types[6];

	    case 'PAGER':
	      return types[7];

	    case 'VOIP':
	      return types[8];

	    case 'SHARED_COST':
	      return types[9];
	  }
	}

	function validateMetadata(metadata) {
	  if (!metadata) {
	    throw new Error('[libphonenumber-js] `metadata` argument not passed. Check your arguments.');
	  } // `country_phone_code_to_countries` was renamed to
	  // `country_calling_codes` in `1.0.18`.


	  if (!is_object(metadata) || !is_object(metadata.countries)) {
	    throw new Error("[libphonenumber-js] `metadata` argument was passed but it's not a valid metadata. Must be an object having `.countries` child object property. Got ".concat(is_object(metadata) ? 'an object of shape: { ' + Object.keys(metadata).join(', ') + ' }' : 'a ' + type_of(metadata) + ': ' + metadata, "."));
	  }
	} // Babel transforms `typeof` into some "branches"
	// so istanbul will show this as "branch not covered".

	/* istanbul ignore next */

	var is_object = function is_object(_) {
	  return _typeof$3(_) === 'object';
	}; // Babel transforms `typeof` into some "branches"
	// so istanbul will show this as "branch not covered".

	/* istanbul ignore next */


	var type_of = function type_of(_) {
	  return _typeof$3(_);
	};
	/**
	 * Returns "country calling code" for a country.
	 * Throws an error if the country doesn't exist or isn't supported by this library.
	 * @param  {string} country
	 * @param  {object} metadata
	 * @return {string}
	 * @example
	 * // Returns "44"
	 * getCountryCallingCode("GB")
	 */

	function getCountryCallingCode(country, metadata) {
	  metadata = new Metadata(metadata);

	  if (metadata.hasCountry(country)) {
	    return metadata.country(country).countryCallingCode();
	  }

	  throw new Error("Unknown country: ".concat(country));
	}
	function isSupportedCountry(country, metadata) {
	  // metadata = new Metadata(metadata)
	  // return metadata.hasCountry(country)
	  return metadata.countries[country] !== undefined;
	}

	function setVersion(metadata) {
	  this.v1 = !metadata.version;
	  this.v2 = metadata.version !== undefined && compare(metadata.version, V3) === -1;
	  this.v3 = metadata.version !== undefined && compare(metadata.version, V4) === -1;
	  this.v4 = metadata.version !== undefined; // && compare(metadata.version, V5) === -1
	} // const ISO_COUNTRY_CODE = /^[A-Z]{2}$/
	// function isCountryCode(countryCode) {
	// 	return ISO_COUNTRY_CODE.test(countryCodeOrCountryCallingCode)
	// }

	var RFC3966_EXTN_PREFIX = ';ext='; // Pattern to capture digits used in an extension.
	// Places a maximum length of '7' for an extension.

	var CAPTURING_EXTN_DIGITS = '([' + VALID_DIGITS + ']{1,7})';
	/**
	 * Regexp of all possible ways to write extensions, for use when parsing. This
	 * will be run as a case-insensitive regexp match. Wide character versions are
	 * also provided after each ASCII version. There are three regular expressions
	 * here. The first covers RFC 3966 format, where the extension is added using
	 * ';ext='. The second more generic one starts with optional white space and
	 * ends with an optional full stop (.), followed by zero or more spaces/tabs
	 * /commas and then the numbers themselves. The other one covers the special
	 * case of American numbers where the extension is written with a hash at the
	 * end, such as '- 503#'. Note that the only capturing groups should be around
	 * the digits that you want to capture as part of the extension, or else parsing
	 * will fail! We allow two options for representing the accented o - the
	 * character itself, and one in the unicode decomposed form with the combining
	 * acute accent.
	 */

	function create_extension_pattern(purpose) {
	  // One-character symbols that can be used to indicate an extension.
	  var single_extension_characters = "x\uFF58#\uFF03~\uFF5E";

	  switch (purpose) {
	    // For parsing, we are slightly more lenient in our interpretation than for matching. Here we
	    // allow "comma" and "semicolon" as possible extension indicators. When matching, these are
	    case 'parsing':
	      single_extension_characters = ',;' + single_extension_characters;
	  }

	  return RFC3966_EXTN_PREFIX + CAPTURING_EXTN_DIGITS + '|' + "[ \xA0\\t,]*" + "(?:e?xt(?:ensi(?:o\u0301?|\xF3))?n?|\uFF45?\uFF58\uFF54\uFF4E?|" + // "доб."
	  "\u0434\u043E\u0431|" + '[' + single_extension_characters + "]|int|anexo|\uFF49\uFF4E\uFF54)" + "[:\\.\uFF0E]?[ \xA0\\t,-]*" + CAPTURING_EXTN_DIGITS + '#?|' + '[- ]+([' + VALID_DIGITS + ']{1,5})#';
	}
	/**
	 * Regexp of all possible ways to write extensions, for use when parsing. This
	 * will be run as a case-insensitive regexp match. Wide character versions are
	 * also provided after each ASCII version. There are three regular expressions
	 * here. The first covers RFC 3966 format, where the extension is added using
	 * ';ext='. The second more generic one starts with optional white space and
	 * ends with an optional full stop (.), followed by zero or more spaces/tabs
	 * /commas and then the numbers themselves. The other one covers the special
	 * case of American numbers where the extension is written with a hash at the
	 * end, such as '- 503#'. Note that the only capturing groups should be around
	 * the digits that you want to capture as part of the extension, or else parsing
	 * will fail! We allow two options for representing the accented o - the
	 * character itself, and one in the unicode decomposed form with the combining
	 * acute accent.
	 */


	var EXTN_PATTERNS_FOR_PARSING = create_extension_pattern('parsing');
	var EXTN_PATTERNS_FOR_MATCHING = create_extension_pattern('matching'); // Regexp of all known extension prefixes used by different regions followed by
	// 1 or more valid digits, for use when parsing.

	var EXTN_PATTERN = new RegExp('(?:' + EXTN_PATTERNS_FOR_PARSING + ')$', 'i'); // Strips any extension (as in, the part of the number dialled after the call is
	// connected, usually indicated with extn, ext, x or similar) from the end of
	// the number, and returns it.

	function extractExtension(number) {
	  var start = number.search(EXTN_PATTERN);

	  if (start < 0) {
	    return {};
	  } // If we find a potential extension, and the number preceding this is a viable
	  // number, we assume it is an extension.


	  var number_without_extension = number.slice(0, start);
	  var matches = number.match(EXTN_PATTERN);
	  var i = 1;

	  while (i < matches.length) {
	    if (matches[i] != null && matches[i].length > 0) {
	      return {
	        number: number_without_extension,
	        ext: matches[i]
	      };
	    }

	    i++;
	  }
	}

	//  Checks we have at least three leading digits, and only valid punctuation,
	//  alpha characters and digits in the phone number. Does not include extension
	//  data. The symbol 'x' is allowed here as valid punctuation since it is often
	//  used as a placeholder for carrier codes, for example in Brazilian phone
	//  numbers. We also allow multiple '+' characters at the start.
	//
	//  Corresponds to the following:
	//  [digits]{minLengthNsn}|
	//  plus_sign*
	//  (([punctuation]|[star])*[digits]){3,}([punctuation]|[star]|[digits]|[alpha])*
	//
	//  The first reg-ex is to allow short numbers (two digits long) to be parsed if
	//  they are entered as "15" etc, but only if there is no punctuation in them.
	//  The second expression restricts the number of digits to three or more, but
	//  then allows them to be in international form, and to have alpha-characters
	//  and punctuation. We split up the two reg-exes here and combine them when
	//  creating the reg-ex VALID_PHONE_NUMBER_PATTERN itself so we can prefix it
	//  with ^ and append $ to each branch.
	//
	//  "Note VALID_PUNCTUATION starts with a -,
	//   so must be the first in the range" (c) Google devs.
	//  (wtf did they mean by saying that; probably nothing)
	//

	var MIN_LENGTH_PHONE_NUMBER_PATTERN = '[' + VALID_DIGITS + ']{' + MIN_LENGTH_FOR_NSN + '}'; //
	// And this is the second reg-exp:
	// (see MIN_LENGTH_PHONE_NUMBER_PATTERN for a full description of this reg-exp)
	//

	var VALID_PHONE_NUMBER = '[' + PLUS_CHARS + ']{0,1}' + '(?:' + '[' + VALID_PUNCTUATION + ']*' + '[' + VALID_DIGITS + ']' + '){3,}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*'; // The combined regular expression for valid phone numbers:
	//

	var VALID_PHONE_NUMBER_PATTERN = new RegExp( // Either a short two-digit-only phone number
	'^' + MIN_LENGTH_PHONE_NUMBER_PATTERN + '$' + '|' + // Or a longer fully parsed phone number (min 3 characters)
	'^' + VALID_PHONE_NUMBER + // Phone number extensions
	'(?:' + EXTN_PATTERNS_FOR_PARSING + ')?' + '$', 'i'); // Checks to see if the string of characters could possibly be a phone number at
	// all. At the moment, checks to see that the string begins with at least 2
	// digits, ignoring any punctuation commonly found in phone numbers. This method
	// does not require the number to be normalized in advance - but does assume
	// that leading non-number symbols have been removed, such as by the method
	// `extract_possible_number`.
	//

	function isViablePhoneNumber(number) {
	  return number.length >= MIN_LENGTH_FOR_NSN && VALID_PHONE_NUMBER_PATTERN.test(number);
	}

	// These mappings map a character (key) to a specific digit that should
	// replace it for normalization purposes. Non-European digits that
	// may be used in phone numbers are mapped to a European equivalent.
	//
	// E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.
	//
	var DIGITS = {
	  '0': '0',
	  '1': '1',
	  '2': '2',
	  '3': '3',
	  '4': '4',
	  '5': '5',
	  '6': '6',
	  '7': '7',
	  '8': '8',
	  '9': '9',
	  "\uFF10": '0',
	  // Fullwidth digit 0
	  "\uFF11": '1',
	  // Fullwidth digit 1
	  "\uFF12": '2',
	  // Fullwidth digit 2
	  "\uFF13": '3',
	  // Fullwidth digit 3
	  "\uFF14": '4',
	  // Fullwidth digit 4
	  "\uFF15": '5',
	  // Fullwidth digit 5
	  "\uFF16": '6',
	  // Fullwidth digit 6
	  "\uFF17": '7',
	  // Fullwidth digit 7
	  "\uFF18": '8',
	  // Fullwidth digit 8
	  "\uFF19": '9',
	  // Fullwidth digit 9
	  "\u0660": '0',
	  // Arabic-indic digit 0
	  "\u0661": '1',
	  // Arabic-indic digit 1
	  "\u0662": '2',
	  // Arabic-indic digit 2
	  "\u0663": '3',
	  // Arabic-indic digit 3
	  "\u0664": '4',
	  // Arabic-indic digit 4
	  "\u0665": '5',
	  // Arabic-indic digit 5
	  "\u0666": '6',
	  // Arabic-indic digit 6
	  "\u0667": '7',
	  // Arabic-indic digit 7
	  "\u0668": '8',
	  // Arabic-indic digit 8
	  "\u0669": '9',
	  // Arabic-indic digit 9
	  "\u06F0": '0',
	  // Eastern-Arabic digit 0
	  "\u06F1": '1',
	  // Eastern-Arabic digit 1
	  "\u06F2": '2',
	  // Eastern-Arabic digit 2
	  "\u06F3": '3',
	  // Eastern-Arabic digit 3
	  "\u06F4": '4',
	  // Eastern-Arabic digit 4
	  "\u06F5": '5',
	  // Eastern-Arabic digit 5
	  "\u06F6": '6',
	  // Eastern-Arabic digit 6
	  "\u06F7": '7',
	  // Eastern-Arabic digit 7
	  "\u06F8": '8',
	  // Eastern-Arabic digit 8
	  "\u06F9": '9' // Eastern-Arabic digit 9

	};
	function parseDigit(character) {
	  return DIGITS[character];
	}
	/**
	 * Parses phone number digits from a string.
	 * Drops all punctuation leaving only digits.
	 * Also converts wide-ascii and arabic-indic numerals to conventional numerals.
	 * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.
	 * @param  {string} string
	 * @return {string}
	 * @example
	 * ```js
	 * parseDigits('8 (800) 555')
	 * // Outputs '8800555'.
	 * ```
	 */

	function parseDigits(string) {
	  var result = ''; // Using `.split('')` here instead of normal `for ... of`
	  // because the importing application doesn't neccessarily include an ES6 polyfill.
	  // The `.split('')` approach discards "exotic" UTF-8 characters
	  // (the ones consisting of four bytes) but digits
	  // (including non-European ones) don't fall into that range
	  // so such "exotic" characters would be discarded anyway.

	  for (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
	    var _ref;

	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }

	    var character = _ref;
	    var digit = parseDigit(character);

	    if (digit) {
	      result += digit;
	    }
	  }

	  return result;
	}

	/**
	 * Parses phone number characters from a string.
	 * Drops all punctuation leaving only digits and the leading `+` sign (if any).
	 * Also converts wide-ascii and arabic-indic numerals to conventional numerals.
	 * E.g. in Iraq they don't write `+442323234` but rather `+٤٤٢٣٢٣٢٣٤`.
	 * @param  {string} string
	 * @return {string}
	 * @example
	 * ```js
	 * // Outputs '8800555'.
	 * parseIncompletePhoneNumber('8 (800) 555')
	 * // Outputs '+7800555'.
	 * parseIncompletePhoneNumber('+7 800 555')
	 * ```
	 */

	function parseIncompletePhoneNumber(string) {
	  var result = ''; // Using `.split('')` here instead of normal `for ... of`
	  // because the importing application doesn't neccessarily include an ES6 polyfill.
	  // The `.split('')` approach discards "exotic" UTF-8 characters
	  // (the ones consisting of four bytes) but digits
	  // (including non-European ones) don't fall into that range
	  // so such "exotic" characters would be discarded anyway.

	  for (var _iterator = string.split(''), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
	    var _ref;

	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }

	    var character = _ref;
	    result += parsePhoneNumberCharacter(character, result) || '';
	  }

	  return result;
	}
	/**
	 * `input-format` `parse()` function.
	 * https://gitlab.com/catamphetamine/input-format
	 * @param  {string} character - Yet another character from raw input string.
	 * @param  {string} value - The value parsed so far.
	 * @param  {object} meta - Optional custom use-case-specific metadata.
	 * @return {string?} The parsed character.
	 */

	function parsePhoneNumberCharacter(character, value) {
	  // Only allow a leading `+`.
	  if (character === '+') {
	    // If this `+` is not the first parsed character
	    // then discard it.
	    if (value) {
	      return;
	    }

	    return '+';
	  } // Allow digits.


	  return parseDigit(character);
	}

	var NON_FIXED_LINE_PHONE_TYPES = ['MOBILE', 'PREMIUM_RATE', 'TOLL_FREE', 'SHARED_COST', 'VOIP', 'PERSONAL_NUMBER', 'PAGER', 'UAN', 'VOICEMAIL']; // Finds out national phone number type (fixed line, mobile, etc)

	function getNumberType(input, options, metadata) {
	  // If assigning the `{}` default value is moved to the arguments above,
	  // code coverage would decrease for some weird reason.
	  options = options || {}; // When `parse()` returned `{}`
	  // meaning that the phone number is not a valid one.

	  if (!input.country) {
	    return;
	  }

	  metadata = new Metadata(metadata);
	  metadata.selectNumberingPlan(input.country, input.countryCallingCode);
	  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // The following is copy-pasted from the original function:
	  // https://github.com/googlei18n/libphonenumber/blob/3ea547d4fbaa2d0b67588904dfa5d3f2557c27ff/javascript/i18n/phonenumbers/phonenumberutil.js#L2835
	  // Is this national number even valid for this country

	  if (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) {
	    return;
	  } // Is it fixed line number


	  if (is_of_type(nationalNumber, 'FIXED_LINE', metadata)) {
	    // Because duplicate regular expressions are removed
	    // to reduce metadata size, if "mobile" pattern is ""
	    // then it means it was removed due to being a duplicate of the fixed-line pattern.
	    //
	    if (metadata.type('MOBILE') && metadata.type('MOBILE').pattern() === '') {
	      return 'FIXED_LINE_OR_MOBILE';
	    } // v1 metadata.
	    // Legacy.
	    // Deprecated.


	    if (!metadata.type('MOBILE')) {
	      return 'FIXED_LINE_OR_MOBILE';
	    } // Check if the number happens to qualify as both fixed line and mobile.
	    // (no such country in the minimal metadata set)

	    /* istanbul ignore if */


	    if (is_of_type(nationalNumber, 'MOBILE', metadata)) {
	      return 'FIXED_LINE_OR_MOBILE';
	    }

	    return 'FIXED_LINE';
	  }

	  for (var _i = 0, _NON_FIXED_LINE_PHONE = NON_FIXED_LINE_PHONE_TYPES; _i < _NON_FIXED_LINE_PHONE.length; _i++) {
	    var _type = _NON_FIXED_LINE_PHONE[_i];

	    if (is_of_type(nationalNumber, _type, metadata)) {
	      return _type;
	    }
	  }
	}
	function is_of_type(nationalNumber, type, metadata) {
	  type = metadata.type(type);

	  if (!type || !type.pattern()) {
	    return false;
	  } // Check if any possible number lengths are present;
	  // if so, we use them to avoid checking
	  // the validation pattern if they don't match.
	  // If they are absent, this means they match
	  // the general description, which we have
	  // already checked before a specific number type.


	  if (type.possibleLengths() && type.possibleLengths().indexOf(nationalNumber.length) < 0) {
	    return false;
	  }

	  return matchesEntirely(nationalNumber, type.pattern());
	} // Should only be called for the "new" metadata which has "possible lengths".

	function checkNumberLengthForType(nationalNumber, type, metadata) {
	  var type_info = metadata.type(type); // There should always be "<possiblePengths/>" set for every type element.
	  // This is declared in the XML schema.
	  // For size efficiency, where a sub-description (e.g. fixed-line)
	  // has the same "<possiblePengths/>" as the "general description", this is missing,
	  // so we fall back to the "general description". Where no numbers of the type
	  // exist at all, there is one possible length (-1) which is guaranteed
	  // not to match the length of any real phone number.

	  var possible_lengths = type_info && type_info.possibleLengths() || metadata.possibleLengths(); // let local_lengths    = type_info && type.possibleLengthsLocal() || metadata.possibleLengthsLocal()
	  // Metadata before version `1.0.18` didn't contain `possible_lengths`.

	  if (!possible_lengths) {
	    return 'IS_POSSIBLE';
	  }

	  if (type === 'FIXED_LINE_OR_MOBILE') {
	    // No such country in metadata.

	    /* istanbul ignore next */
	    if (!metadata.type('FIXED_LINE')) {
	      // The rare case has been encountered where no fixedLine data is available
	      // (true for some non-geographic entities), so we just check mobile.
	      return checkNumberLengthForType(nationalNumber, 'MOBILE', metadata);
	    }

	    var mobile_type = metadata.type('MOBILE');

	    if (mobile_type) {
	      // Merge the mobile data in if there was any. "Concat" creates a new
	      // array, it doesn't edit possible_lengths in place, so we don't need a copy.
	      // Note that when adding the possible lengths from mobile, we have
	      // to again check they aren't empty since if they are this indicates
	      // they are the same as the general desc and should be obtained from there.
	      possible_lengths = mergeArrays(possible_lengths, mobile_type.possibleLengths()); // The current list is sorted; we need to merge in the new list and
	      // re-sort (duplicates are okay). Sorting isn't so expensive because
	      // the lists are very small.
	      // if (local_lengths)
	      // {
	      // 	local_lengths = mergeArrays(local_lengths, mobile_type.possibleLengthsLocal())
	      // }
	      // else
	      // {
	      // 	local_lengths = mobile_type.possibleLengthsLocal()
	      // }
	    }
	  } // If the type doesn't exist then return 'INVALID_LENGTH'.
	  else if (type && !type_info) {
	      return 'INVALID_LENGTH';
	    }

	  var actual_length = nationalNumber.length; // In `libphonenumber-js` all "local-only" formats are dropped for simplicity.
	  // // This is safe because there is never an overlap beween the possible lengths
	  // // and the local-only lengths; this is checked at build time.
	  // if (local_lengths && local_lengths.indexOf(nationalNumber.length) >= 0)
	  // {
	  // 	return 'IS_POSSIBLE_LOCAL_ONLY'
	  // }

	  var minimum_length = possible_lengths[0];

	  if (minimum_length === actual_length) {
	    return 'IS_POSSIBLE';
	  }

	  if (minimum_length > actual_length) {
	    return 'TOO_SHORT';
	  }

	  if (possible_lengths[possible_lengths.length - 1] < actual_length) {
	    return 'TOO_LONG';
	  } // We skip the first element since we've already checked it.


	  return possible_lengths.indexOf(actual_length, 1) >= 0 ? 'IS_POSSIBLE' : 'INVALID_LENGTH';
	}

	function isPossiblePhoneNumber(input, options, metadata) {
	  /* istanbul ignore if */
	  if (options === undefined) {
	    options = {};
	  }

	  metadata = new Metadata(metadata);

	  if (options.v2) {
	    if (!input.countryCallingCode) {
	      throw new Error('Invalid phone number object passed');
	    }

	    metadata.chooseCountryByCountryCallingCode(input.countryCallingCode);
	  } else {
	    if (!input.phone) {
	      return false;
	    }

	    if (input.country) {
	      if (!metadata.hasCountry(input.country)) {
	        throw new Error("Unknown country: ".concat(input.country));
	      }

	      metadata.country(input.country);
	    } else {
	      if (!input.countryCallingCode) {
	        throw new Error('Invalid phone number object passed');
	      }

	      metadata.chooseCountryByCountryCallingCode(input.countryCallingCode);
	    }
	  }

	  if (metadata.possibleLengths()) {
	    return isPossibleNumber(input.phone || input.nationalNumber, undefined, metadata);
	  } else {
	    // There was a bug between `1.7.35` and `1.7.37` where "possible_lengths"
	    // were missing for "non-geographical" numbering plans.
	    // Just assume the number is possible in such cases:
	    // it's unlikely that anyone generated their custom metadata
	    // in that short period of time (one day).
	    // This code can be removed in some future major version update.
	    if (input.countryCallingCode && metadata.isNonGeographicCallingCode(input.countryCallingCode)) {
	      // "Non-geographic entities" did't have `possibleLengths`
	      // due to a bug in metadata generation process.
	      return true;
	    } else {
	      throw new Error('Missing "possibleLengths" in metadata. Perhaps the metadata has been generated before v1.0.18.');
	    }
	  }
	}
	function isPossibleNumber(nationalNumber, isInternational, metadata) {
	  switch (checkNumberLengthForType(nationalNumber, undefined, metadata)) {
	    case 'IS_POSSIBLE':
	      return true;
	    // case 'IS_POSSIBLE_LOCAL_ONLY':
	    // 	return !isInternational

	    default:
	      return false;
	  }
	}

	var CAPTURING_DIGIT_PATTERN = new RegExp('([' + VALID_DIGITS + '])');
	/**
	 * Pattern that makes it easy to distinguish whether a region has a single
	 * international dialing prefix or not. If a region has a single international
	 * prefix (e.g. 011 in USA), it will be represented as a string that contains
	 * a sequence of ASCII digits, and possibly a tilde, which signals waiting for
	 * the tone. If there are multiple available international prefixes in a
	 * region, they will be represented as a regex string that always contains one
	 * or more characters that are not ASCII digits or a tilde.
	 */

	var SINGLE_IDD_PREFIX = /^[\d]+(?:[~\u2053\u223C\uFF5E][\d]+)?$/; // For regions that have multiple IDD prefixes
	// a preferred IDD prefix is returned.

	function getIDDPrefix(country, callingCode, metadata) {
	  var countryMetadata = new Metadata(metadata);
	  countryMetadata.selectNumberingPlan(country, callingCode);

	  if (SINGLE_IDD_PREFIX.test(countryMetadata.IDDPrefix())) {
	    return countryMetadata.IDDPrefix();
	  }

	  return countryMetadata.defaultIDDPrefix();
	}
	function stripIDDPrefix(number, country, callingCode, metadata) {
	  if (!country) {
	    return;
	  } // Check if the number is IDD-prefixed.


	  var countryMetadata = new Metadata(metadata);
	  countryMetadata.selectNumberingPlan(country, callingCode);
	  var IDDPrefixPattern = new RegExp(countryMetadata.IDDPrefix());

	  if (number.search(IDDPrefixPattern) !== 0) {
	    return;
	  } // Strip IDD prefix.


	  number = number.slice(number.match(IDDPrefixPattern)[0].length); // Some kind of a weird edge case.
	  // No explanation from Google given.

	  var matchedGroups = number.match(CAPTURING_DIGIT_PATTERN);
	  /* istanbul ignore next */

	  if (matchedGroups && matchedGroups[1] != null && matchedGroups[1].length > 0) {
	    if (matchedGroups[1] === '0') {
	      return;
	    }
	  }

	  return number;
	}

	function _slicedToArray$2(arr, i) { return _arrayWithHoles$2(arr) || _iterableToArrayLimit$2(arr, i) || _nonIterableRest$2(); }

	function _nonIterableRest$2() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

	function _iterableToArrayLimit$2(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

	function _arrayWithHoles$2(arr) { if (Array.isArray(arr)) return arr; }

	/**
	 * @param  {string} text - Phone URI (RFC 3966).
	 * @return {object} `{ ?number, ?ext }`.
	 */

	function parseRFC3966(text) {
	  var number;
	  var ext; // Replace "tel:" with "tel=" for parsing convenience.

	  text = text.replace(/^tel:/, 'tel=');

	  for (var _iterator = text.split(';'), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
	    var _ref;

	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }

	    var part = _ref;

	    var _part$split = part.split('='),
	        _part$split2 = _slicedToArray$2(_part$split, 2),
	        name = _part$split2[0],
	        value = _part$split2[1];

	    switch (name) {
	      case 'tel':
	        number = value;
	        break;

	      case 'ext':
	        ext = value;
	        break;

	      case 'phone-context':
	        // Only "country contexts" are supported.
	        // "Domain contexts" are ignored.
	        if (value[0] === '+') {
	          number = value + number;
	        }

	        break;
	    }
	  } // If the phone number is not viable, then abort.


	  if (!isViablePhoneNumber(number)) {
	    return {};
	  }

	  var result = {
	    number: number
	  };

	  if (ext) {
	    result.ext = ext;
	  }

	  return result;
	}
	/**
	 * @param  {object} - `{ ?number, ?extension }`.
	 * @return {string} Phone URI (RFC 3966).
	 */

	function formatRFC3966(_ref2) {
	  var number = _ref2.number,
	      ext = _ref2.ext;

	  if (!number) {
	    return '';
	  }

	  if (number[0] !== '+') {
	    throw new Error("\"formatRFC3966()\" expects \"number\" to be in E.164 format.");
	  }

	  return "tel:".concat(number).concat(ext ? ';ext=' + ext : '');
	}

	/**
	 * Checks if a given phone number is valid.
	 *
	 * If the `number` is a string, it will be parsed to an object,
	 * but only if it contains only valid phone number characters (including punctuation).
	 * If the `number` is an object, it is used as is.
	 *
	 * The optional `defaultCountry` argument is the default country.
	 * I.e. it does not restrict to just that country,
	 * e.g. in those cases where several countries share
	 * the same phone numbering rules (NANPA, Britain, etc).
	 * For example, even though the number `07624 369230`
	 * belongs to the Isle of Man ("IM" country code)
	 * calling `isValidNumber('07624369230', 'GB', metadata)`
	 * still returns `true` because the country is not restricted to `GB`,
	 * it's just that `GB` is the default one for the phone numbering rules.
	 * For restricting the country see `isValidNumberForRegion()`
	 * though restricting a country might not be a good idea.
	 * https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion
	 *
	 * Examples:
	 *
	 * ```js
	 * isValidNumber('+78005553535', metadata)
	 * isValidNumber('8005553535', 'RU', metadata)
	 * isValidNumber('88005553535', 'RU', metadata)
	 * isValidNumber({ phone: '8005553535', country: 'RU' }, metadata)
	 * ```
	 */

	function isValidNumber(input, options, metadata) {
	  // If assigning the `{}` default value is moved to the arguments above,
	  // code coverage would decrease for some weird reason.
	  options = options || {};
	  metadata = new Metadata(metadata); // This is just to support `isValidNumber({})`
	  // for cases when `parseNumber()` returns `{}`.

	  if (!input.country) {
	    return false;
	  }

	  metadata.selectNumberingPlan(input.country, input.countryCallingCode); // By default, countries only have type regexps when it's required for
	  // distinguishing different countries having the same `countryCallingCode`.

	  if (metadata.hasTypes()) {
	    return getNumberType(input, options, metadata.metadata) !== undefined;
	  } // If there are no type regexps for this country in metadata then use
	  // `nationalNumberPattern` as a "better than nothing" replacement.


	  var national_number = options.v2 ? input.nationalNumber : input.phone;
	  return matchesEntirely(national_number, metadata.nationalNumberPattern());
	}

	function _objectSpread$4(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty$3(target, key, source[key]); }); } return target; }

	function _defineProperty$3(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	var DEFAULT_OPTIONS = {
	  formatExtension: function formatExtension(formattedNumber, extension, metadata) {
	    return "".concat(formattedNumber).concat(metadata.ext()).concat(extension);
	  } // Formats a phone number
	  //
	  // Example use cases:
	  //
	  // ```js
	  // formatNumber('8005553535', 'RU', 'INTERNATIONAL')
	  // formatNumber('8005553535', 'RU', 'INTERNATIONAL', metadata)
	  // formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL')
	  // formatNumber({ phone: '8005553535', country: 'RU' }, 'INTERNATIONAL', metadata)
	  // formatNumber('+78005553535', 'NATIONAL')
	  // formatNumber('+78005553535', 'NATIONAL', metadata)
	  // ```
	  //

	};
	function formatNumber$1(input, format, options, metadata) {
	  // Apply default options.
	  if (options) {
	    options = _objectSpread$4({}, DEFAULT_OPTIONS, options);
	  } else {
	    options = DEFAULT_OPTIONS;
	  }

	  metadata = new Metadata(metadata);

	  if (input.country && input.country !== '001') {
	    // Validate `input.country`.
	    if (!metadata.hasCountry(input.country)) {
	      throw new Error("Unknown country: ".concat(input.country));
	    }

	    metadata.country(input.country);
	  } else if (input.countryCallingCode) {
	    metadata.chooseCountryByCountryCallingCode(input.countryCallingCode);
	  } else return input.phone || '';

	  var countryCallingCode = metadata.countryCallingCode();
	  var nationalNumber = options.v2 ? input.nationalNumber : input.phone; // This variable should have been declared inside `case`s
	  // but Babel has a bug and it says "duplicate variable declaration".

	  var number;

	  switch (format) {
	    case 'NATIONAL':
	      // Legacy argument support.
	      // (`{ country: ..., phone: '' }`)
	      if (!nationalNumber) {
	        return '';
	      }

	      number = formatNationalNumber(nationalNumber, 'NATIONAL', metadata, options);
	      return addExtension(number, input.ext, metadata, options.formatExtension);

	    case 'INTERNATIONAL':
	      // Legacy argument support.
	      // (`{ country: ..., phone: '' }`)
	      if (!nationalNumber) {
	        return "+".concat(countryCallingCode);
	      }

	      number = formatNationalNumber(nationalNumber, 'INTERNATIONAL', metadata, options);
	      number = "+".concat(countryCallingCode, " ").concat(number);
	      return addExtension(number, input.ext, metadata, options.formatExtension);

	    case 'E.164':
	      // `E.164` doesn't define "phone number extensions".
	      return "+".concat(countryCallingCode).concat(nationalNumber);

	    case 'RFC3966':
	      return formatRFC3966({
	        number: "+".concat(countryCallingCode).concat(nationalNumber),
	        ext: input.ext
	      });

	    case 'IDD':
	      if (!options.fromCountry) {
	        return; // throw new Error('`fromCountry` option not passed for IDD-prefixed formatting.')
	      }

	      var IDDPrefix = getIDDPrefix(options.fromCountry, undefined, metadata.metadata);

	      if (!IDDPrefix) {
	        return;
	      }

	      if (options.humanReadable) {
	        var formattedForSameCountryCallingCode = countryCallingCode && formatIDDSameCountryCallingCodeNumber(nationalNumber, metadata.countryCallingCode(), options.fromCountry, metadata, options);

	        if (formattedForSameCountryCallingCode) {
	          number = formattedForSameCountryCallingCode;
	        } else {
	          number = "".concat(IDDPrefix, " ").concat(countryCallingCode, " ").concat(formatNationalNumber(nationalNumber, 'INTERNATIONAL', metadata, options));
	        }

	        return addExtension(number, input.ext, metadata, options.formatExtension);
	      }

	      return "".concat(IDDPrefix).concat(countryCallingCode).concat(nationalNumber);

	    default:
	      throw new Error("Unknown \"format\" argument passed to \"formatNumber()\": \"".concat(format, "\""));
	  }
	} // This was originally set to $1 but there are some countries for which the
	// first group is not used in the national pattern (e.g. Argentina) so the $1
	// group does not match correctly.  Therefore, we use \d, so that the first
	// group actually used in the pattern will be matched.

	var FIRST_GROUP_PATTERN = /(\$\d)/;
	function formatNationalNumberUsingFormat(number, format, useInternationalSeparator, useNationalPrefixFormattingRule, metadata) {
	  var formattedNumber = number.replace(new RegExp(format.pattern()), useInternationalSeparator ? format.internationalFormat() : useNationalPrefixFormattingRule && format.nationalPrefixFormattingRule() ? format.format().replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule()) : format.format());

	  if (useInternationalSeparator) {
	    return applyInternationalSeparatorStyle(formattedNumber);
	  }

	  return formattedNumber;
	}

	function formatNationalNumber(number, formatAs, metadata, options) {
	  var format = chooseFormatForNumber(metadata.formats(), number);

	  if (!format) {
	    return number;
	  }

	  return formatNationalNumberUsingFormat(number, format, formatAs === 'INTERNATIONAL', format.nationalPrefixIsOptionalWhenFormattingInNationalFormat() && options.nationalPrefix === false ? false : true);
	}

	function chooseFormatForNumber(availableFormats, nationalNnumber) {
	  for (var _iterator = availableFormats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
	    var _ref;

	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }

	    var format = _ref;

	    // Validate leading digits
	    if (format.leadingDigitsPatterns().length > 0) {
	      // The last leading_digits_pattern is used here, as it is the most detailed
	      var lastLeadingDigitsPattern = format.leadingDigitsPatterns()[format.leadingDigitsPatterns().length - 1]; // If leading digits don't match then move on to the next phone number format

	      if (nationalNnumber.search(lastLeadingDigitsPattern) !== 0) {
	        continue;
	      }
	    } // Check that the national number matches the phone number format regular expression


	    if (matchesEntirely(nationalNnumber, format.pattern())) {
	      return format;
	    }
	  }
	} // Removes brackets and replaces dashes with spaces.
	//
	// E.g. "(999) 111-22-33" -> "999 111 22 33"
	//
	// For some reason Google's metadata contains `<intlFormat/>`s with brackets and dashes.
	// Meanwhile, there's no single opinion about using punctuation in international phone numbers.
	//
	// For example, Google's `<intlFormat/>` for USA is `+1 213-373-4253`.
	// And here's a quote from WikiPedia's "North American Numbering Plan" page:
	// https://en.wikipedia.org/wiki/North_American_Numbering_Plan
	//
	// "The country calling code for all countries participating in the NANP is 1.
	// In international format, an NANP number should be listed as +1 301 555 01 00,
	// where 301 is an area code (Maryland)."
	//
	// I personally prefer the international format without any punctuation.
	// For example, brackets are remnants of the old age, meaning that the
	// phone number part in brackets (so called "area code") can be omitted
	// if dialing within the same "area".
	// And hyphens were clearly introduced for splitting local numbers into memorizable groups.
	// For example, remembering "5553535" is difficult but "555-35-35" is much simpler.
	// Imagine a man taking a bus from home to work and seeing an ad with a phone number.
	// He has a couple of seconds to memorize that number until it passes by.
	// If it were spaces instead of hyphens the man wouldn't necessarily get it,
	// but with hyphens instead of spaces the grouping is more explicit.
	// I personally think that hyphens introduce visual clutter,
	// so I prefer replacing them with spaces in international numbers.
	// In the modern age all output is done on displays where spaces are clearly distinguishable
	// so hyphens can be safely replaced with spaces without losing any legibility.
	//


	function applyInternationalSeparatorStyle(local) {
	  return local.replace(new RegExp("[".concat(VALID_PUNCTUATION, "]+"), 'g'), ' ').trim();
	}

	function addExtension(formattedNumber, ext, metadata, formatExtension) {
	  return ext ? formatExtension(formattedNumber, ext, metadata) : formattedNumber;
	}

	function formatIDDSameCountryCallingCodeNumber(number, toCountryCallingCode, fromCountry, toCountryMetadata, options) {
	  var fromCountryMetadata = new Metadata(toCountryMetadata.metadata);
	  fromCountryMetadata.country(fromCountry); // If calling within the same country calling code.

	  if (toCountryCallingCode === fromCountryMetadata.countryCallingCode()) {
	    // For NANPA regions, return the national format for these regions
	    // but prefix it with the country calling code.
	    if (toCountryCallingCode === '1') {
	      return toCountryCallingCode + ' ' + formatNationalNumber(number, 'NATIONAL', toCountryMetadata, options);
	    } // If regions share a country calling code, the country calling code need
	    // not be dialled. This also applies when dialling within a region, so this
	    // if clause covers both these cases. Technically this is the case for
	    // dialling from La Reunion to other overseas departments of France (French
	    // Guiana, Martinique, Guadeloupe), but not vice versa - so we don't cover
	    // this edge case for now and for those cases return the version including
	    // country calling code. Details here:
	    // http://www.petitfute.com/voyage/225-info-pratiques-reunion
	    //


	    return formatNationalNumber(number, 'NATIONAL', toCountryMetadata, options);
	  }
	}

	function _objectSpread$1$2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty$1$2(target, key, source[key]); }); } return target; }

	function _defineProperty$1$2(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	function _classCallCheck$2$1(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$1$2(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$1$2(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$1$2(Constructor.prototype, protoProps); if (staticProps) _defineProperties$1$2(Constructor, staticProps); return Constructor; }

	var PhoneNumber =
	/*#__PURE__*/
	function () {
	  function PhoneNumber(countryCallingCode, nationalNumber, metadata) {
	    _classCallCheck$2$1(this, PhoneNumber);

	    if (!countryCallingCode) {
	      throw new TypeError('`country` or `countryCallingCode` not passed');
	    }

	    if (!nationalNumber) {
	      throw new TypeError('`nationalNumber` not passed');
	    }

	    var _metadata = new Metadata(metadata); // If country code is passed then derive `countryCallingCode` from it.
	    // Also store the country code as `.country`.


	    if (isCountryCode(countryCallingCode)) {
	      this.country = countryCallingCode;

	      _metadata.country(countryCallingCode);

	      countryCallingCode = _metadata.countryCallingCode();
	    }

	    this.countryCallingCode = countryCallingCode;
	    this.nationalNumber = nationalNumber;
	    this.number = '+' + this.countryCallingCode + this.nationalNumber;
	    this.metadata = metadata;
	  }

	  _createClass$1$2(PhoneNumber, [{
	    key: "isPossible",
	    value: function isPossible() {
	      return isPossiblePhoneNumber(this, {
	        v2: true
	      }, this.metadata);
	    }
	  }, {
	    key: "isValid",
	    value: function isValid() {
	      return isValidNumber(this, {
	        v2: true
	      }, this.metadata);
	    }
	  }, {
	    key: "isNonGeographic",
	    value: function isNonGeographic() {
	      var metadata = new Metadata(this.metadata);
	      return metadata.isNonGeographicCallingCode(this.countryCallingCode);
	    }
	  }, {
	    key: "isEqual",
	    value: function isEqual(phoneNumber) {
	      return this.number === phoneNumber.number && this.ext === phoneNumber.ext;
	    } // // Is just an alias for `this.isValid() && this.country === country`.
	    // // https://github.com/googlei18n/libphonenumber/blob/master/FAQ.md#when-should-i-use-isvalidnumberforregion
	    // isValidForRegion(country) {
	    // 	return isValidNumberForRegion(this, country, { v2: true }, this.metadata)
	    // }

	  }, {
	    key: "getType",
	    value: function getType() {
	      return getNumberType(this, {
	        v2: true
	      }, this.metadata);
	    }
	  }, {
	    key: "format",
	    value: function format(_format, options) {
	      return formatNumber$1(this, _format, options ? _objectSpread$1$2({}, options, {
	        v2: true
	      }) : {
	        v2: true
	      }, this.metadata);
	    }
	  }, {
	    key: "formatNational",
	    value: function formatNational(options) {
	      return this.format('NATIONAL', options);
	    }
	  }, {
	    key: "formatInternational",
	    value: function formatInternational(options) {
	      return this.format('INTERNATIONAL', options);
	    }
	  }, {
	    key: "getURI",
	    value: function getURI(options) {
	      return this.format('RFC3966', options);
	    }
	  }]);

	  return PhoneNumber;
	}();

	var isCountryCode = function isCountryCode(value) {
	  return /^[A-Z]{2}$/.test(value);
	};

	// This is a port of Google Android `libphonenumber`'s
	// This prevents malicious input from consuming CPU.

	var MAX_INPUT_STRING_LENGTH = 250; // This consists of the plus symbol, digits, and arabic-indic digits.

	var PHONE_NUMBER_START_PATTERN = new RegExp('[' + PLUS_CHARS + VALID_DIGITS + ']'); // Regular expression of trailing characters that we want to remove.

	var AFTER_PHONE_NUMBER_END_PATTERN = new RegExp('[^' + VALID_DIGITS + ']+$');
	//  {
	//    country:
	//    {
	//      restrict - (a two-letter country code)
	//                 the phone number must be in this country
	//
	//      default - (a two-letter country code)
	//                default country to use for phone number parsing and validation
	//                (if no country code could be derived from the phone number)
	//    }
	//  }
	//
	// Returns `{ country, number }`
	//
	// Example use cases:
	//
	// ```js
	// parse('8 (800) 555-35-35', 'RU')
	// parse('8 (800) 555-35-35', 'RU', metadata)
	// parse('8 (800) 555-35-35', { country: { default: 'RU' } })
	// parse('8 (800) 555-35-35', { country: { default: 'RU' } }, metadata)
	// parse('+7 800 555 35 35')
	// parse('+7 800 555 35 35', metadata)
	// ```
	//

	function parse(text, options, metadata) {
	  // If assigning the `{}` default value is moved to the arguments above,
	  // code coverage would decrease for some weird reason.
	  options = options || {};
	  metadata = new Metadata(metadata); // Validate `defaultCountry`.

	  if (options.defaultCountry && !metadata.hasCountry(options.defaultCountry)) {
	    if (options.v2) {
	      throw new ParseError('INVALID_COUNTRY');
	    }

	    throw new Error("Unknown country: ".concat(options.defaultCountry));
	  } // Parse the phone number.


	  var _parseInput = parseInput(text, options.v2),
	      formattedPhoneNumber = _parseInput.number,
	      ext = _parseInput.ext; // If the phone number is not viable then return nothing.


	  if (!formattedPhoneNumber) {
	    if (options.v2) {
	      throw new ParseError('NOT_A_NUMBER');
	    }

	    return {};
	  }

	  var _parsePhoneNumber = parsePhoneNumber(formattedPhoneNumber, options.defaultCountry, options.defaultCallingCode, metadata),
	      country = _parsePhoneNumber.country,
	      nationalNumber = _parsePhoneNumber.nationalNumber,
	      countryCallingCode = _parsePhoneNumber.countryCallingCode,
	      carrierCode = _parsePhoneNumber.carrierCode;

	  if (!metadata.hasSelectedNumberingPlan()) {
	    if (options.v2) {
	      throw new ParseError('INVALID_COUNTRY');
	    }

	    return {};
	  } // Validate national (significant) number length.


	  if (!nationalNumber || nationalNumber.length < MIN_LENGTH_FOR_NSN) {
	    // Won't throw here because the regexp already demands length > 1.

	    /* istanbul ignore if */
	    if (options.v2) {
	      throw new ParseError('TOO_SHORT');
	    } // Google's demo just throws an error in this case.


	    return {};
	  } // Validate national (significant) number length.
	  //
	  // A sidenote:
	  //
	  // They say that sometimes national (significant) numbers
	  // can be longer than `MAX_LENGTH_FOR_NSN` (e.g. in Germany).
	  // https://github.com/googlei18n/libphonenumber/blob/7e1748645552da39c4e1ba731e47969d97bdb539/resources/phonenumber.proto#L36
	  // Such numbers will just be discarded.
	  //


	  if (nationalNumber.length > MAX_LENGTH_FOR_NSN) {
	    if (options.v2) {
	      throw new ParseError('TOO_LONG');
	    } // Google's demo just throws an error in this case.


	    return {};
	  }

	  if (options.v2) {
	    var phoneNumber = new PhoneNumber(countryCallingCode, nationalNumber, metadata.metadata);

	    if (country) {
	      phoneNumber.country = country;
	    }

	    if (carrierCode) {
	      phoneNumber.carrierCode = carrierCode;
	    }

	    if (ext) {
	      phoneNumber.ext = ext;
	    }

	    return phoneNumber;
	  } // Check if national phone number pattern matches the number.
	  // National number pattern is different for each country,
	  // even for those ones which are part of the "NANPA" group.


	  var valid = (options.extended ? metadata.hasSelectedNumberingPlan() : country) ? matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) : false;

	  if (!options.extended) {
	    return valid ? result(country, nationalNumber, ext) : {};
	  }

	  return {
	    country: country,
	    countryCallingCode: countryCallingCode,
	    carrierCode: carrierCode,
	    valid: valid,
	    possible: valid ? true : options.extended === true && metadata.possibleLengths() && isPossibleNumber(nationalNumber, countryCallingCode !== undefined, metadata) ? true : false,
	    phone: nationalNumber,
	    ext: ext
	  };
	}
	/**
	 * Extracts a formatted phone number from text.
	 * Doesn't guarantee that the extracted phone number
	 * is a valid phone number (for example, doesn't validate its length).
	 * @param  {string} text
	 * @param  {boolean} throwOnError — By default, it won't throw if the text is too long.
	 * @return {string}
	 * @example
	 * // Returns "(213) 373-4253".
	 * extractFormattedPhoneNumber("Call (213) 373-4253 for assistance.")
	 */

	function extractFormattedPhoneNumber(text, throwOnError) {
	  if (!text) {
	    return;
	  }

	  if (text.length > MAX_INPUT_STRING_LENGTH) {
	    if (throwOnError) {
	      throw new ParseError('TOO_LONG');
	    }

	    return;
	  } // Attempt to extract a possible number from the string passed in


	  var startsAt = text.search(PHONE_NUMBER_START_PATTERN);

	  if (startsAt < 0) {
	    return;
	  }

	  return text // Trim everything to the left of the phone number
	  .slice(startsAt) // Remove trailing non-numerical characters
	  .replace(AFTER_PHONE_NUMBER_END_PATTERN, '');
	}
	/**
	 * Strips any national prefix (such as 0, 1) present in a
	 * (possibly incomplete) number provided.
	 * "Carrier codes" are only used  in Colombia and Brazil,
	 * and only when dialing within those countries from a mobile phone to a fixed line number.
	 * Sometimes it won't actually strip national prefix
	 * and will instead prepend some digits to the `number`:
	 * for example, when number `2345678` is passed with `VI` country selected,
	 * it will return `{ number: "3402345678" }`, because `340` area code is prepended.
	 * @param {string} number — National number digits.
	 * @param {object} metadata — Metadata with country selected.
	 * @return {object} `{ nationalNumber: string, carrierCode: string? }`.
	 */

	function stripNationalPrefixAndCarrierCode(number, metadata) {
	  if (number && metadata.nationalPrefixForParsing()) {
	    // See METADATA.md for the description of
	    // `national_prefix_for_parsing` and `national_prefix_transform_rule`.
	    // Attempt to parse the first digits as a national prefix.
	    var prefixPattern = new RegExp('^(?:' + metadata.nationalPrefixForParsing() + ')');
	    var prefixMatch = prefixPattern.exec(number);

	    if (prefixMatch) {
	      var nationalNumber;
	      var carrierCode; // If a "capturing group" didn't match
	      // then its element in `prefixMatch[]` array will be `undefined`.

	      var capturedGroupsCount = prefixMatch.length - 1;

	      if (metadata.nationalPrefixTransformRule() && capturedGroupsCount > 0 && prefixMatch[capturedGroupsCount]) {
	        nationalNumber = number.replace(prefixPattern, metadata.nationalPrefixTransformRule()); // Carrier code is the last captured group,
	        // but only when there's more than one captured group.

	        if (capturedGroupsCount > 1 && prefixMatch[capturedGroupsCount]) {
	          carrierCode = prefixMatch[1];
	        }
	      } // If it's a simple-enough case then just
	      // strip the national prefix from the number.
	      else {
	          // National prefix is the whole substring matched by
	          // the `national_prefix_for_parsing` regexp.
	          var nationalPrefix = prefixMatch[0];
	          nationalNumber = number.slice(nationalPrefix.length); // Carrier code is the last captured group.

	          if (capturedGroupsCount > 0) {
	            carrierCode = prefixMatch[1];
	          }
	        } // We require that the national (significant) number remaining after
	      // stripping the national prefix and carrier code be long enough
	      // to be a possible length for the region. Otherwise, we don't do
	      // the stripping, since the original number could be a valid number.
	      // For example, in some countries (Russia, Belarus) the same digit
	      // could be both a national prefix and a leading digit of a valid
	      // national phone number, like `8` is the national prefix for Russia
	      // and `800 555 35 35` is a valid national (significant) number.


	      if (matchesEntirely(number, metadata.nationalNumberPattern()) && !matchesEntirely(nationalNumber, metadata.nationalNumberPattern())) ; else {
	        return {
	          nationalNumber: nationalNumber,
	          carrierCode: carrierCode
	        };
	      }
	    }
	  }

	  return {
	    nationalNumber: number
	  };
	}
	function findCountryCode(callingCode, nationalPhoneNumber, metadata) {


	  var possibleCountries = metadata.getCountryCodesForCallingCode(callingCode);

	  if (!possibleCountries) {
	    return;
	  } // If there's just one country corresponding to the country code,
	  // then just return it, without further phone number digits validation.


	  if (possibleCountries.length === 1) {
	    return possibleCountries[0];
	  }

	  return _findCountryCode(possibleCountries, nationalPhoneNumber, metadata.metadata);
	} // Changes `metadata` `country`.

	function _findCountryCode(possibleCountries, nationalPhoneNumber, metadata) {
	  metadata = new Metadata(metadata);

	  for (var _iterator = possibleCountries, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
	    var _ref;

	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }

	    var country = _ref;
	    metadata.country(country); // Leading digits check would be the simplest one

	    if (metadata.leadingDigits()) {
	      if (nationalPhoneNumber && nationalPhoneNumber.search(metadata.leadingDigits()) === 0) {
	        return country;
	      }
	    } // Else perform full validation with all of those
	    // fixed-line/mobile/etc regular expressions.
	    else if (getNumberType({
	        phone: nationalPhoneNumber,
	        country: country
	      }, undefined, metadata.metadata)) {
	        return country;
	      }
	  }
	}
	/**
	 * @param  {string} text - Input.
	 * @return {object} `{ ?number, ?ext }`.
	 */


	function parseInput(text, v2) {
	  // Parse RFC 3966 phone number URI.
	  if (text && text.indexOf('tel:') === 0) {
	    return parseRFC3966(text);
	  }

	  var number = extractFormattedPhoneNumber(text, v2); // If the phone number is not viable, then abort.

	  if (!number || !isViablePhoneNumber(number)) {
	    return {};
	  } // Attempt to parse extension first, since it doesn't require region-specific
	  // data and we want to have the non-normalised number here.


	  var withExtensionStripped = extractExtension(number);

	  if (withExtensionStripped.ext) {
	    return withExtensionStripped;
	  }

	  return {
	    number: number
	  };
	}
	/**
	 * Creates `parse()` result object.
	 */


	function result(country, nationalNumber, ext) {
	  var result = {
	    country: country,
	    phone: nationalNumber
	  };

	  if (ext) {
	    result.ext = ext;
	  }

	  return result;
	}
	/**
	 * Parses a viable phone number.
	 * @param {string} formattedPhoneNumber — Example: "(213) 373-4253".
	 * @param {string} [defaultCountry]
	 * @param {string} [defaultCallingCode]
	 * @param {Metadata} metadata
	 * @return {object} Returns `{ country: string?, countryCallingCode: string?, nationalNumber: string? }`.
	 */


	function parsePhoneNumber(formattedPhoneNumber, defaultCountry, defaultCallingCode, metadata) {
	  // Extract calling code from phone number.
	  var _extractCountryCallin = extractCountryCallingCode(parseIncompletePhoneNumber(formattedPhoneNumber), defaultCountry, defaultCallingCode, metadata.metadata),
	      countryCallingCode = _extractCountryCallin.countryCallingCode,
	      number = _extractCountryCallin.number; // Choose a country by `countryCallingCode`.


	  var country;

	  if (countryCallingCode) {
	    metadata.chooseCountryByCountryCallingCode(countryCallingCode);
	  } // If `formattedPhoneNumber` is in "national" format
	  // then `number` is defined and `countryCallingCode` isn't.
	  else if (number && (defaultCountry || defaultCallingCode)) {
	      metadata.selectNumberingPlan(defaultCountry, defaultCallingCode);

	      if (defaultCountry) {
	        country = defaultCountry;
	      }

	      countryCallingCode = defaultCallingCode || getCountryCallingCode(defaultCountry, metadata.metadata);
	    } else return {};

	  if (!number) {
	    return {
	      countryCallingCode: countryCallingCode
	    };
	  }

	  var _stripNationalPrefixA = stripNationalPrefixAndCarrierCodeFromCompleteNumber(parseIncompletePhoneNumber(number), metadata),
	      nationalNumber = _stripNationalPrefixA.nationalNumber,
	      carrierCode = _stripNationalPrefixA.carrierCode; // Sometimes there are several countries
	  // corresponding to the same country phone code
	  // (e.g. NANPA countries all having `1` country phone code).
	  // Therefore, to reliably determine the exact country,
	  // national (significant) number should have been parsed first.
	  //
	  // When `metadata.json` is generated, all "ambiguous" country phone codes
	  // get their countries populated with the full set of
	  // "phone number type" regular expressions.
	  //


	  var exactCountry = findCountryCode(countryCallingCode, nationalNumber, metadata);

	  if (exactCountry) {
	    country = exactCountry;
	    /* istanbul ignore if */

	    if (exactCountry === '001') ; else {
	      metadata.country(country);
	    }
	  }

	  return {
	    country: country,
	    countryCallingCode: countryCallingCode,
	    nationalNumber: nationalNumber,
	    carrierCode: carrierCode
	  };
	}
	/**
	 * Strips national prefix and carrier code from a complete phone number.
	 * The difference from the non-"FromCompleteNumber" function is that
	 * it won't extract national prefix if the resultant number is too short
	 * to be a complete number for the selected phone numbering plan.
	 * @param  {string} number — Complete phone number digits.
	 * @param  {Metadata} metadata — Metadata with a phone numbering plan selected.
	 * @return {object} `{ nationalNumber: string, carrierCode: string? }`.
	 */


	function stripNationalPrefixAndCarrierCodeFromCompleteNumber(number, metadata) {
	  // Parsing national prefixes and carrier codes
	  // is only required for local phone numbers
	  // but some people don't understand that
	  // and sometimes write international phone numbers
	  // with national prefixes (or maybe even carrier codes).
	  // http://ucken.blogspot.ru/2016/03/trunk-prefixes-in-skype4b.html
	  // Google's original library forgives such mistakes
	  // and so does this library, because it has been requested:
	  // https://github.com/catamphetamine/libphonenumber-js/issues/127
	  var _stripNationalPrefixA2 = stripNationalPrefixAndCarrierCode(parseIncompletePhoneNumber(number), metadata),
	      nationalNumber = _stripNationalPrefixA2.nationalNumber,
	      carrierCode = _stripNationalPrefixA2.carrierCode; // If a national prefix has been extracted, check to see
	  // if the resultant number isn't too short.


	  if (nationalNumber.length !== number.length + (carrierCode ? carrierCode.length : 0)) {
	    // If not using legacy generated metadata (before version `1.0.18`)
	    // then it has "possible lengths", so use those to validate the number length.
	    if (metadata.possibleLengths()) {
	      // "We require that the NSN remaining after stripping the national prefix and
	      // carrier code be long enough to be a possible length for the region.
	      // Otherwise, we don't do the stripping, since the original number could be
	      // a valid short number."
	      // https://github.com/google/libphonenumber/blob/876268eb1ad6cdc1b7b5bef17fc5e43052702d57/java/libphonenumber/src/com/google/i18n/phonenumbers/PhoneNumberUtil.java#L3236-L3250
	      switch (checkNumberLengthForType(nationalNumber, undefined, metadata)) {
	        case 'TOO_SHORT':
	        case 'INVALID_LENGTH':
	          // case 'IS_POSSIBLE_LOCAL_ONLY':
	          // Don't strip the national prefix.
	          return {
	            nationalNumber: number
	          };
	      }
	    }
	  }

	  return {
	    nationalNumber: nationalNumber,
	    carrierCode: carrierCode
	  };
	}
	/**
	 * Converts a phone number digits (possibly with a `+`)
	 * into a calling code and the rest phone number digits.
	 * The "rest phone number digits" could include
	 * a national prefix, carrier code, and national
	 * (significant) number.
	 * @param  {string} number — Phone number digits (possibly with a `+`).
	 * @param  {string} [country] — Default country.
	 * @param  {string} [callingCode] — Default calling code (some phone numbering plans are non-geographic).
	 * @param  {object} metadata
	 * @return {object} `{ countryCallingCode: string?, number: string }`
	 * @example
	 * // Returns `{ countryCallingCode: "1", number: "2133734253" }`.
	 * extractCountryCallingCode('2133734253', 'US', null, metadata)
	 * extractCountryCallingCode('2133734253', null, '1', metadata)
	 * extractCountryCallingCode('+12133734253', null, null, metadata)
	 * extractCountryCallingCode('+12133734253', 'RU', null, metadata)
	 */

	function extractCountryCallingCode(number, country, callingCode, metadata) {
	  if (!number) {
	    return {};
	  } // If this is not an international phone number,
	  // then either extract an "IDD" prefix, or extract a
	  // country calling code from a number by autocorrecting it
	  // by prepending a leading `+` in cases when it starts
	  // with the country calling code.
	  // https://wikitravel.org/en/International_dialling_prefix
	  // https://github.com/catamphetamine/libphonenumber-js/issues/376


	  if (number[0] !== '+') {
	    // Convert an "out-of-country" dialing phone number
	    // to a proper international phone number.
	    var numberWithoutIDD = stripIDDPrefix(number, country, callingCode, metadata); // If an IDD prefix was stripped then
	    // convert the number to international one
	    // for subsequent parsing.

	    if (numberWithoutIDD && numberWithoutIDD !== number) {
	      number = '+' + numberWithoutIDD;
	    } else {
	      // Check to see if the number starts with the country calling code
	      // for the default country. If so, we remove the country calling code,
	      // and do some checks on the validity of the number before and after.
	      // https://github.com/catamphetamine/libphonenumber-js/issues/376
	      if (country || callingCode) {
	        var _extractCountryCallin2 = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata),
	            countryCallingCode = _extractCountryCallin2.countryCallingCode,
	            shorterNumber = _extractCountryCallin2.number;

	        if (countryCallingCode) {
	          return {
	            countryCallingCode: countryCallingCode,
	            number: shorterNumber
	          };
	        }
	      }

	      return {
	        number: number
	      };
	    }
	  } // Fast abortion: country codes do not begin with a '0'


	  if (number[1] === '0') {
	    return {};
	  }

	  metadata = new Metadata(metadata); // The thing with country phone codes
	  // is that they are orthogonal to each other
	  // i.e. there's no such country phone code A
	  // for which country phone code B exists
	  // where B starts with A.
	  // Therefore, while scanning digits,
	  // if a valid country code is found,
	  // that means that it is the country code.
	  //

	  var i = 2;

	  while (i - 1 <= MAX_LENGTH_COUNTRY_CODE && i <= number.length) {
	    var _countryCallingCode = number.slice(1, i);

	    if (metadata.hasCallingCode(_countryCallingCode)) {
	      metadata.selectNumberingPlan(undefined, _countryCallingCode);
	      return {
	        countryCallingCode: _countryCallingCode,
	        number: number.slice(i)
	      };
	    }

	    i++;
	  }

	  return {};
	}
	/**
	 * Sometimes some people incorrectly input international phone numbers
	 * without the leading `+`. This function corrects such input.
	 * @param  {string} number — Phone number digits.
	 * @param  {string?} country
	 * @param  {string?} callingCode
	 * @param  {object} metadata
	 * @return {object} `{ countryCallingCode: string?, number: string }`.
	 */

	function extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(number, country, callingCode, metadata) {
	  var countryCallingCode = country ? getCountryCallingCode(country, metadata) : callingCode;

	  if (number.indexOf(countryCallingCode) === 0) {
	    metadata = new Metadata(metadata);
	    metadata.selectNumberingPlan(country, callingCode);
	    var possibleShorterNumber = number.slice(countryCallingCode.length);

	    var _stripNationalPrefixA3 = stripNationalPrefixAndCarrierCode(possibleShorterNumber, metadata),
	        possibleShorterNationalNumber = _stripNationalPrefixA3.nationalNumber;

	    var _stripNationalPrefixA4 = stripNationalPrefixAndCarrierCode(number, metadata),
	        nationalNumber = _stripNationalPrefixA4.nationalNumber; // If the number was not valid before but is valid now,
	    // or if it was too long before, we consider the number
	    // with the country calling code stripped to be a better result
	    // and keep that instead.
	    // For example, in Germany (+49), `49` is a valid area code,
	    // so if a number starts with `49`, it could be both a valid
	    // national German number or an international number without
	    // a leading `+`.


	    if (!matchesEntirely(nationalNumber, metadata.nationalNumberPattern()) && matchesEntirely(possibleShorterNationalNumber, metadata.nationalNumberPattern()) || checkNumberLengthForType(nationalNumber, undefined, metadata) === 'TOO_LONG') {
	      return {
	        countryCallingCode: countryCallingCode,
	        number: possibleShorterNumber
	      };
	    }
	  }

	  return {
	    number: number
	  };
	}

	/** Returns a regular expression quantifier with an upper and lower limit. */
	function limit(lower, upper) {
	  if (lower < 0 || upper <= 0 || upper < lower) {
	    throw new TypeError();
	  }

	  return "{".concat(lower, ",").concat(upper, "}");
	}
	/**
	 * Trims away any characters after the first match of {@code pattern} in {@code candidate},
	 * returning the trimmed version.
	 */

	function trimAfterFirstMatch(regexp, string) {
	  var index = string.search(regexp);

	  if (index >= 0) {
	    return string.slice(0, index);
	  }

	  return string;
	}
	function startsWith(string, substring) {
	  return string.indexOf(substring) === 0;
	}
	function endsWith(string, substring) {
	  return string.indexOf(substring, string.length - substring.length) === string.length - substring.length;
	}

	// of parsing. This allows us to strip off parts of the number that are actually the start of
	// another number, such as for: (530) 583-6985 x302/x2303 -> the second extension here makes this
	// actually two phone numbers, (530) 583-6985 x302 and (530) 583-6985 x2303. We remove the second
	// extension so that the first number is parsed correctly.
	//
	// Matches a slash (\ or /) followed by a space followed by an `x`.
	//

	var SECOND_NUMBER_START_PATTERN = /[\\/] *x/;
	function parsePreCandidate(candidate) {
	  // Check for extra numbers at the end.
	  // TODO: This is the place to start when trying to support extraction of multiple phone number
	  // from split notations (+41 79 123 45 67 / 68).
	  return trimAfterFirstMatch(SECOND_NUMBER_START_PATTERN, candidate);
	}

	// Matches strings that look like dates using "/" as a separator.
	// Examples: 3/10/2011, 31/10/96 or 08/31/95.
	var SLASH_SEPARATED_DATES = /(?:(?:[0-3]?\d\/[01]?\d)|(?:[01]?\d\/[0-3]?\d))\/(?:[12]\d)?\d{2}/; // Matches timestamps.
	// Examples: "2012-01-02 08:00".
	// Note that the reg-ex does not include the
	// trailing ":\d\d" -- that is covered by TIME_STAMPS_SUFFIX.

	var TIME_STAMPS = /[12]\d{3}[-/]?[01]\d[-/]?[0-3]\d +[0-2]\d$/;
	var TIME_STAMPS_SUFFIX_LEADING = /^:[0-5]\d/;
	function isValidPreCandidate(candidate, offset, text) {
	  // Skip a match that is more likely to be a date.
	  if (SLASH_SEPARATED_DATES.test(candidate)) {
	    return false;
	  } // Skip potential time-stamps.


	  if (TIME_STAMPS.test(candidate)) {
	    var followingText = text.slice(offset + candidate.length);

	    if (TIME_STAMPS_SUFFIX_LEADING.test(followingText)) {
	      return false;
	    }
	  }

	  return true;
	}

	// Javascript doesn't support UTF-8 regular expressions.
	// So mimicking them here.
	// Copy-pasted from `PhoneNumberMatcher.js`.

	/**
	 * "\p{Z}" is any kind of whitespace or invisible separator ("Separator").
	 * http://www.regular-expressions.info/unicode.html
	 * "\P{Z}" is the reverse of "\p{Z}".
	 * "\p{N}" is any kind of numeric character in any script ("Number").
	 * "\p{Nd}" is a digit zero through nine in any script except "ideographic scripts" ("Decimal_Digit_Number").
	 * "\p{Sc}" is a currency symbol ("Currency_Symbol").
	 * "\p{L}" is any kind of letter from any language ("Letter").
	 * "\p{Mn}" is "non-spacing mark".
	 *
	 * Javascript doesn't support Unicode Regular Expressions
	 * so substituting it with this explicit set of characters.
	 *
	 * https://stackoverflow.com/questions/13210194/javascript-regex-equivalent-of-a-za-z-using-pl
	 * https://github.com/danielberndt/babel-plugin-utf-8-regex/blob/master/src/transformer.js
	 */
	var _pZ = " \xA0\u1680\u180E\u2000-\u200A\u2028\u2029\u202F\u205F\u3000";
	var pZ = "[".concat(_pZ, "]");
	var PZ = "[^".concat(_pZ, "]");
	var _pN = "0-9\xB2\xB3\xB9\xBC-\xBE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D66-\u0D75\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19"; // const pN = `[${_pN}]`

	var _pNd = "0-9\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0BE6-\u0BEF\u0C66-\u0C6F\u0CE6-\u0CEF\u0D66-\u0D6F\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F29\u1040-\u1049\u1090-\u1099\u17E0-\u17E9\u1810-\u1819\u1946-\u194F\u19D0-\u19D9\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\uA620-\uA629\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19";
	var pNd = "[".concat(_pNd, "]");
	var _pL = "A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u0527\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0\u08A2-\u08AC\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0977\u0979-\u097F\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C33\u0C35-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191C\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC";
	var pL = "[".concat(_pL, "]");
	var pL_regexp = new RegExp(pL);
	var _pSc = "$\xA2-\xA5\u058F\u060B\u09F2\u09F3\u09FB\u0AF1\u0BF9\u0E3F\u17DB\u20A0-\u20B9\uA838\uFDFC\uFE69\uFF04\uFFE0\uFFE1\uFFE5\uFFE6";
	var pSc = "[".concat(_pSc, "]");
	var pSc_regexp = new RegExp(pSc);
	var _pMn = "\u0300-\u036F\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E4-\u08FE\u0900-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0CBC\u0CBF\u0CC6\u0CCC\u0CCD\u0CE2\u0CE3\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1DC0-\u1DE6\u1DFC-\u1DFF\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099\u309A\uA66F\uA674-\uA67D\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE26";
	var pMn = "[".concat(_pMn, "]");
	var pMn_regexp = new RegExp(pMn);
	var _InBasic_Latin = "\0-\x7F";
	var _InLatin_1_Supplement = "\x80-\xFF";
	var _InLatin_Extended_A = "\u0100-\u017F";
	var _InLatin_Extended_Additional = "\u1E00-\u1EFF";
	var _InLatin_Extended_B = "\u0180-\u024F";
	var _InCombining_Diacritical_Marks = "\u0300-\u036F";
	var latinLetterRegexp = new RegExp('[' + _InBasic_Latin + _InLatin_1_Supplement + _InLatin_Extended_A + _InLatin_Extended_Additional + _InLatin_Extended_B + _InCombining_Diacritical_Marks + ']');
	/**
	 * Helper method to determine if a character is a Latin-script letter or not.
	 * For our purposes, combining marks should also return true since we assume
	 * they have been added to a preceding Latin character.
	 */

	function isLatinLetter(letter) {
	  // Combining marks are a subset of non-spacing-mark.
	  if (!pL_regexp.test(letter) && !pMn_regexp.test(letter)) {
	    return false;
	  }

	  return latinLetterRegexp.test(letter);
	}
	function isInvalidPunctuationSymbol(character) {
	  return character === '%' || pSc_regexp.test(character);
	}

	// Copy-pasted from `PhoneNumberMatcher.js`.
	var OPENING_PARENS = "(\\[\uFF08\uFF3B";
	var CLOSING_PARENS = ")\\]\uFF09\uFF3D";
	var NON_PARENS = "[^".concat(OPENING_PARENS).concat(CLOSING_PARENS, "]");
	var LEAD_CLASS = "[".concat(OPENING_PARENS).concat(PLUS_CHARS, "]"); // Punctuation that may be at the start of a phone number - brackets and plus signs.

	var LEAD_CLASS_LEADING = new RegExp('^' + LEAD_CLASS); // Limit on the number of pairs of brackets in a phone number.

	var BRACKET_PAIR_LIMIT = limit(0, 3);
	/**
	 * Pattern to check that brackets match. Opening brackets should be closed within a phone number.
	 * This also checks that there is something inside the brackets. Having no brackets at all is also
	 * fine.
	 *
	 * An opening bracket at the beginning may not be closed, but subsequent ones should be.  It's
	 * also possible that the leading bracket was dropped, so we shouldn't be surprised if we see a
	 * closing bracket first. We limit the sets of brackets in a phone number to four.
	 */

	var MATCHING_BRACKETS_ENTIRE = new RegExp('^' + "(?:[" + OPENING_PARENS + "])?" + "(?:" + NON_PARENS + "+" + "[" + CLOSING_PARENS + "])?" + NON_PARENS + "+" + "(?:[" + OPENING_PARENS + "]" + NON_PARENS + "+[" + CLOSING_PARENS + "])" + BRACKET_PAIR_LIMIT + NON_PARENS + "*" + '$');
	/**
	 * Matches strings that look like publication pages. Example:
	 * <pre>Computing Complete Answers to Queries in the Presence of Limited Access Patterns.
	 * Chen Li. VLDB J. 12(3): 211-227 (2003).</pre>
	 *
	 * The string "211-227 (2003)" is not a telephone number.
	 */

	var PUB_PAGES = /\d{1,5}-+\d{1,5}\s{0,4}\(\d{1,4}/;
	function isValidCandidate(candidate, offset, text, leniency) {
	  // Check the candidate doesn't contain any formatting
	  // which would indicate that it really isn't a phone number.
	  if (!MATCHING_BRACKETS_ENTIRE.test(candidate) || PUB_PAGES.test(candidate)) {
	    return;
	  } // If leniency is set to VALID or stricter, we also want to skip numbers that are surrounded
	  // by Latin alphabetic characters, to skip cases like abc8005001234 or 8005001234def.


	  if (leniency !== 'POSSIBLE') {
	    // If the candidate is not at the start of the text,
	    // and does not start with phone-number punctuation,
	    // check the previous character.
	    if (offset > 0 && !LEAD_CLASS_LEADING.test(candidate)) {
	      var previousChar = text[offset - 1]; // We return null if it is a latin letter or an invalid punctuation symbol.

	      if (isInvalidPunctuationSymbol(previousChar) || isLatinLetter(previousChar)) {
	        return false;
	      }
	    }

	    var lastCharIndex = offset + candidate.length;

	    if (lastCharIndex < text.length) {
	      var nextChar = text[lastCharIndex];

	      if (isInvalidPunctuationSymbol(nextChar) || isLatinLetter(nextChar)) {
	        return false;
	      }
	    }
	  }

	  return true;
	}

	function _classCallCheck$3$1(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$2$1(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$2$1(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$2$1(Constructor.prototype, protoProps); if (staticProps) _defineProperties$2$1(Constructor, staticProps); return Constructor; }

	function _defineProperty$5(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

	var VALID_PHONE_NUMBER$1 = '[' + PLUS_CHARS + ']{0,1}' + '(?:' + '[' + VALID_PUNCTUATION + ']*' + '[' + VALID_DIGITS + ']' + '){3,}' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*';
	var WHITESPACE_IN_THE_BEGINNING_PATTERN = new RegExp('^[' + WHITESPACE + ']+');
	var PUNCTUATION_IN_THE_END_PATTERN = new RegExp('[' + VALID_PUNCTUATION + ']+$'); // // Regular expression for getting opening brackets for a valid number
	/**
	 * Extracts a parseable phone number including any opening brackets, etc.
	 * @param  {string} text - Input.
	 * @return {object} `{ ?number, ?startsAt, ?endsAt }`.
	 */

	var PhoneNumberSearch =
	/*#__PURE__*/
	function () {
	  // Iteration tristate.
	  function PhoneNumberSearch(text, options, metadata) {
	    _classCallCheck$3$1(this, PhoneNumberSearch);

	    _defineProperty$5(this, "state", 'NOT_READY');

	    this.text = text; // If assigning the `{}` default value is moved to the arguments above,
	    // code coverage would decrease for some weird reason.

	    this.options = options || {};
	    this.metadata = metadata;
	    this.regexp = new RegExp(VALID_PHONE_NUMBER$1 + // Phone number extensions
	    '(?:' + EXTN_PATTERNS_FOR_PARSING + ')?', 'ig'); // this.searching_from = 0
	  }

	  _createClass$2$1(PhoneNumberSearch, [{
	    key: "find",
	    value: function find() {
	      var matches = this.regexp.exec(this.text);

	      if (!matches) {
	        return;
	      }

	      var number = matches[0];
	      var startsAt = matches.index;
	      number = number.replace(WHITESPACE_IN_THE_BEGINNING_PATTERN, '');
	      startsAt += matches[0].length - number.length; // Fixes not parsing numbers with whitespace in the end.
	      // Also fixes not parsing numbers with opening parentheses in the end.
	      // https://github.com/catamphetamine/libphonenumber-js/issues/252

	      number = number.replace(PUNCTUATION_IN_THE_END_PATTERN, '');
	      number = parsePreCandidate(number);
	      var result = this.parseCandidate(number, startsAt);

	      if (result) {
	        return result;
	      } // Tail recursion.
	      // Try the next one if this one is not a valid phone number.


	      return this.find();
	    }
	  }, {
	    key: "parseCandidate",
	    value: function parseCandidate(number, startsAt) {
	      if (!isValidPreCandidate(number, startsAt, this.text)) {
	        return;
	      } // Don't parse phone numbers which are non-phone numbers
	      // due to being part of something else (e.g. a UUID).
	      // https://github.com/catamphetamine/libphonenumber-js/issues/213
	      // Copy-pasted from Google's `PhoneNumberMatcher.js` (`.parseAndValidate()`).


	      if (!isValidCandidate(number, startsAt, this.text, this.options.extended ? 'POSSIBLE' : 'VALID')) {
	        return;
	      } // // Prepend any opening brackets left behind by the
	      // // `PHONE_NUMBER_START_PATTERN` regexp.
	      // const text_before_number = text.slice(this.searching_from, startsAt)
	      // const full_number_starts_at = text_before_number.search(BEFORE_NUMBER_DIGITS_PUNCTUATION)
	      // if (full_number_starts_at >= 0)
	      // {
	      // 	number   = text_before_number.slice(full_number_starts_at) + number
	      // 	startsAt = full_number_starts_at
	      // }
	      //
	      // this.searching_from = matches.lastIndex


	      var result = parse(number, this.options, this.metadata);

	      if (!result.phone) {
	        return;
	      }

	      result.startsAt = startsAt;
	      result.endsAt = startsAt + number.length;
	      return result;
	    }
	  }, {
	    key: "hasNext",
	    value: function hasNext() {
	      if (this.state === 'NOT_READY') {
	        this.last_match = this.find();

	        if (this.last_match) {
	          this.state = 'READY';
	        } else {
	          this.state = 'DONE';
	        }
	      }

	      return this.state === 'READY';
	    }
	  }, {
	    key: "next",
	    value: function next() {
	      // Check the state and find the next match as a side-effect if necessary.
	      if (!this.hasNext()) {
	        throw new Error('No next element');
	      } // Don't retain that memory any longer than necessary.


	      var result = this.last_match;
	      this.last_match = null;
	      this.state = 'NOT_READY';
	      return result;
	    }
	  }]);

	  return PhoneNumberSearch;
	}();

	function _defineProperties$3$1(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$3$1(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$3$1(Constructor.prototype, protoProps); if (staticProps) _defineProperties$3$1(Constructor, staticProps); return Constructor; }

	function _classCallCheck$4(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	// https://medium.com/dsinjs/implementing-lru-cache-in-javascript-94ba6755cda9
	var Node = function Node(key, value) {
	  var next = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
	  var prev = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;

	  _classCallCheck$4(this, Node);

	  this.key = key;
	  this.value = value;
	  this.next = next;
	  this.prev = prev;
	};

	var LRUCache =
	/*#__PURE__*/
	function () {
	  //set default limit of 10 if limit is not passed.
	  function LRUCache() {
	    var limit = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;

	    _classCallCheck$4(this, LRUCache);

	    this.size = 0;
	    this.limit = limit;
	    this.head = null;
	    this.tail = null;
	    this.cache = {};
	  } // Write Node to head of LinkedList
	  // update cache with Node key and Node reference


	  _createClass$3$1(LRUCache, [{
	    key: "put",
	    value: function put(key, value) {
	      this.ensureLimit();

	      if (!this.head) {
	        this.head = this.tail = new Node(key, value);
	      } else {
	        var node = new Node(key, value, this.head);
	        this.head.prev = node;
	        this.head = node;
	      } //Update the cache map


	      this.cache[key] = this.head;
	      this.size++;
	    } // Read from cache map and make that node as new Head of LinkedList

	  }, {
	    key: "get",
	    value: function get(key) {
	      if (this.cache[key]) {
	        var value = this.cache[key].value; // node removed from it's position and cache

	        this.remove(key); // write node again to the head of LinkedList to make it most recently used

	        this.put(key, value);
	        return value;
	      }

	      console.log("Item not available in cache for key ".concat(key));
	    }
	  }, {
	    key: "ensureLimit",
	    value: function ensureLimit() {
	      if (this.size === this.limit) {
	        this.remove(this.tail.key);
	      }
	    }
	  }, {
	    key: "remove",
	    value: function remove(key) {
	      var node = this.cache[key];

	      if (node.prev !== null) {
	        node.prev.next = node.next;
	      } else {
	        this.head = node.next;
	      }

	      if (node.next !== null) {
	        node.next.prev = node.prev;
	      } else {
	        this.tail = node.prev;
	      }

	      delete this.cache[key];
	      this.size--;
	    }
	  }, {
	    key: "clear",
	    value: function clear() {
	      this.head = null;
	      this.tail = null;
	      this.size = 0;
	      this.cache = {};
	    } // // Invokes the callback function with every node of the chain and the index of the node.
	    // forEach(fn) {
	    //   let node = this.head;
	    //   let counter = 0;
	    //   while (node) {
	    //     fn(node, counter);
	    //     node = node.next;
	    //     counter++;
	    //   }
	    // }
	    // // To iterate over LRU with a 'for...of' loop
	    // *[Symbol.iterator]() {
	    //   let node = this.head;
	    //   while (node) {
	    //     yield node;
	    //     node = node.next;
	    //   }
	    // }

	  }]);

	  return LRUCache;
	}();

	function _classCallCheck$5(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$4(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$4(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$4(Constructor.prototype, protoProps); if (staticProps) _defineProperties$4(Constructor, staticProps); return Constructor; }
	// countries being used for the same doc with ~10 patterns for each country. Some pages will have
	// a lot more countries in use, but typically fewer numbers for each so expanding the cache for
	// that use-case won't have a lot of benefit.

	var RegExpCache =
	/*#__PURE__*/
	function () {
	  function RegExpCache(size) {
	    _classCallCheck$5(this, RegExpCache);

	    this.cache = new LRUCache(size);
	  }

	  _createClass$4(RegExpCache, [{
	    key: "getPatternForRegExp",
	    value: function getPatternForRegExp(pattern) {
	      var regExp = this.cache.get(pattern);

	      if (!regExp) {
	        regExp = new RegExp('^' + pattern);
	        this.cache.put(pattern, regExp);
	      }

	      return regExp;
	    }
	  }]);

	  return RegExpCache;
	}();

	/**
	 * Leniency when finding potential phone numbers in text segments
	 * The levels here are ordered in increasing strictness.
	 */

	var Leniency = {
	  /**
	   * Phone numbers accepted are "possible", but not necessarily "valid".
	   */
	  POSSIBLE: function POSSIBLE(number, candidate, metadata) {
	    return true;
	  },

	  /**
	   * Phone numbers accepted are "possible" and "valid".
	   * Numbers written in national format must have their national-prefix
	   * present if it is usually written for a number of this type.
	   */
	  VALID: function VALID(number, candidate, metadata) {
	    if (!isValidNumber(number, undefined, metadata) || !containsOnlyValidXChars(number, candidate.toString())) {
	      return false;
	    } // Skipped for simplicity.
	    // return isNationalPrefixPresentIfRequired(number, metadata)


	    return true;
	  },

	  /**
	   * Phone numbers accepted are "valid" and
	   * are grouped in a possible way for this locale. For example, a US number written as
	   * "65 02 53 00 00" and "650253 0000" are not accepted at this leniency level, whereas
	   * "650 253 0000", "650 2530000" or "6502530000" are.
	   * Numbers with more than one '/' symbol in the national significant number
	   * are also dropped at this level.
	   *
	   * Warning: This level might result in lower coverage especially for regions outside of
	   * country code "+1". If you are not sure about which level to use,
	   * email the discussion group libphonenumber-discuss@googlegroups.com.
	   */
	  STRICT_GROUPING: function STRICT_GROUPING(number, candidate, metadata, regExpCache) {
	    var candidateString = candidate.toString();

	    if (!isValidNumber(number, undefined, metadata) || !containsOnlyValidXChars(number, candidateString) || containsMoreThanOneSlashInNationalNumber(number, candidateString) || !isNationalPrefixPresentIfRequired(number)) {
	      return false;
	    }

	    return checkNumberGroupingIsValid(number, candidate, metadata, allNumberGroupsRemainGrouped, regExpCache);
	  },

	  /**
	   * Phone numbers accepted are {@linkplain PhoneNumberUtil#isValidNumber(PhoneNumber) valid} and
	   * are grouped in the same way that we would have formatted it, or as a single block. For
	   * example, a US number written as "650 2530000" is not accepted at this leniency level, whereas
	   * "650 253 0000" or "6502530000" are.
	   * Numbers with more than one '/' symbol are also dropped at this level.
	   * <p>
	   * Warning: This level might result in lower coverage especially for regions outside of country
	   * code "+1". If you are not sure about which level to use, email the discussion group
	   * libphonenumber-discuss@googlegroups.com.
	   */
	  EXACT_GROUPING: function EXACT_GROUPING(number, candidate, metadata, regExpCache) {
	    var candidateString = candidate.toString();

	    if (!isValidNumber(number, undefined, metadata) || !containsOnlyValidXChars(number, candidateString) || containsMoreThanOneSlashInNationalNumber(number, candidateString) || !isNationalPrefixPresentIfRequired(number)) {
	      return false;
	    }

	    return checkNumberGroupingIsValid(number, candidate, metadata, allNumberGroupsAreExactlyPresent, regExpCache);
	  }
	};

	function containsOnlyValidXChars(number, candidate, metadata) {
	  // The characters 'x' and 'X' can be (1) a carrier code, in which case they always precede the
	  // national significant number or (2) an extension sign, in which case they always precede the
	  // extension number. We assume a carrier code is more than 1 digit, so the first case has to
	  // have more than 1 consecutive 'x' or 'X', whereas the second case can only have exactly 1 'x'
	  // or 'X'. We ignore the character if it appears as the last character of the string.
	  for (var index = 0; index < candidate.length - 1; index++) {
	    var charAtIndex = candidate.charAt(index);

	    if (charAtIndex === 'x' || charAtIndex === 'X') {
	      var charAtNextIndex = candidate.charAt(index + 1);

	      if (charAtNextIndex === 'x' || charAtNextIndex === 'X') {
	        // This is the carrier code case, in which the 'X's always precede the national
	        // significant number.
	        index++;

	        if (util.isNumberMatch(number, candidate.substring(index)) != MatchType.NSN_MATCH) {
	          return false;
	        } // This is the extension sign case, in which the 'x' or 'X' should always precede the
	        // extension number.

	      } else if (parseDigits(candidate.substring(index)) !== number.ext) {
	        return false;
	      }
	    }
	  }

	  return true;
	}

	function isNationalPrefixPresentIfRequired(number, _metadata) {
	  // First, check how we deduced the country code. If it was written in international format, then
	  // the national prefix is not required.
	  if (number.getCountryCodeSource() != 'FROM_DEFAULT_COUNTRY') {
	    return true;
	  }

	  var phoneNumberRegion = util.getRegionCodeForCountryCode(number.getCountryCode());
	  var metadata = util.getMetadataForRegion(phoneNumberRegion);

	  if (metadata == null) {
	    return true;
	  } // Check if a national prefix should be present when formatting this number.


	  var nationalNumber = util.getNationalSignificantNumber(number);
	  var formatRule = util.chooseFormattingPatternForNumber(metadata.numberFormats(), nationalNumber); // To do this, we check that a national prefix formatting rule was present
	  // and that it wasn't just the first-group symbol ($1) with punctuation.

	  if (formatRule && formatRule.getNationalPrefixFormattingRule().length > 0) {
	    if (formatRule.getNationalPrefixOptionalWhenFormatting()) {
	      // The national-prefix is optional in these cases, so we don't need to check if it was
	      // present.
	      return true;
	    }

	    if (PhoneNumberUtil.formattingRuleHasFirstGroupOnly(formatRule.getNationalPrefixFormattingRule())) {
	      // National Prefix not needed for this number.
	      return true;
	    } // Normalize the remainder.


	    var rawInputCopy = PhoneNumberUtil.normalizeDigitsOnly(number.getRawInput()); // Check if we found a national prefix and/or carrier code at the start of the raw input, and
	    // return the result.

	    return util.maybeStripNationalPrefixAndCarrierCode(rawInputCopy, metadata, null);
	  }

	  return true;
	}

	function containsMoreThanOneSlashInNationalNumber(number, candidate) {
	  var firstSlashInBodyIndex = candidate.indexOf('/');

	  if (firstSlashInBodyIndex < 0) {
	    // No slashes, this is okay.
	    return false;
	  } // Now look for a second one.


	  var secondSlashInBodyIndex = candidate.indexOf('/', firstSlashInBodyIndex + 1);

	  if (secondSlashInBodyIndex < 0) {
	    // Only one slash, this is okay.
	    return false;
	  } // If the first slash is after the country calling code, this is permitted.


	  var candidateHasCountryCode = number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITH_PLUS_SIGN || number.getCountryCodeSource() === CountryCodeSource.FROM_NUMBER_WITHOUT_PLUS_SIGN;

	  if (candidateHasCountryCode && PhoneNumberUtil.normalizeDigitsOnly(candidate.substring(0, firstSlashInBodyIndex)) === String(number.getCountryCode())) {
	    // Any more slashes and this is illegal.
	    return candidate.slice(secondSlashInBodyIndex + 1).indexOf('/') >= 0;
	  }

	  return true;
	}

	function checkNumberGroupingIsValid(number, candidate, metadata, checkGroups, regExpCache) {
	  var normalizedCandidate = normalizeDigits(candidate, true
	  /* keep non-digits */
	  );
	  var formattedNumberGroups = getNationalNumberGroups(metadata, number, null);

	  if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {
	    return true;
	  } // If this didn't pass, see if there are any alternate formats that match, and try them instead.


	  var alternateFormats = MetadataManager.getAlternateFormatsForCountry(number.getCountryCode());
	  var nationalSignificantNumber = util.getNationalSignificantNumber(number);

	  if (alternateFormats) {
	    for (var _iterator = alternateFormats.numberFormats(), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var alternateFormat = _ref;

	      if (alternateFormat.leadingDigitsPatterns().length > 0) {
	        // There is only one leading digits pattern for alternate formats.
	        var leadingDigitsRegExp = regExpCache.getPatternForRegExp('^' + alternateFormat.leadingDigitsPatterns()[0]);

	        if (!leadingDigitsRegExp.test(nationalSignificantNumber)) {
	          // Leading digits don't match; try another one.
	          continue;
	        }
	      }

	      formattedNumberGroups = getNationalNumberGroups(metadata, number, alternateFormat);

	      if (checkGroups(metadata, number, normalizedCandidate, formattedNumberGroups)) {
	        return true;
	      }
	    }
	  }

	  return false;
	}
	/**
	 * Helper method to get the national-number part of a number, formatted without any national
	 * prefix, and return it as a set of digit blocks that would be formatted together following
	 * standard formatting rules.
	 */


	function getNationalNumberGroups(metadata, number, formattingPattern) {
	  if (formattingPattern) {
	    // We format the NSN only, and split that according to the separator.
	    var nationalSignificantNumber = util.getNationalSignificantNumber(number);
	    return util.formatNsnUsingPattern(nationalSignificantNumber, formattingPattern, 'RFC3966', metadata).split('-');
	  } // This will be in the format +CC-DG1-DG2-DGX;ext=EXT where DG1..DGX represents groups of digits.


	  var rfc3966Format = formatNumber(number, 'RFC3966', metadata); // We remove the extension part from the formatted string before splitting it into different
	  // groups.

	  var endIndex = rfc3966Format.indexOf(';');

	  if (endIndex < 0) {
	    endIndex = rfc3966Format.length;
	  } // The country-code will have a '-' following it.


	  var startIndex = rfc3966Format.indexOf('-') + 1;
	  return rfc3966Format.slice(startIndex, endIndex).split('-');
	}

	function allNumberGroupsAreExactlyPresent(metadata, number, normalizedCandidate, formattedNumberGroups) {
	  var candidateGroups = normalizedCandidate.split(NON_DIGITS_PATTERN); // Set this to the last group, skipping it if the number has an extension.

	  var candidateNumberGroupIndex = number.hasExtension() ? candidateGroups.length - 2 : candidateGroups.length - 1; // First we check if the national significant number is formatted as a block.
	  // We use contains and not equals, since the national significant number may be present with
	  // a prefix such as a national number prefix, or the country code itself.

	  if (candidateGroups.length == 1 || candidateGroups[candidateNumberGroupIndex].contains(util.getNationalSignificantNumber(number))) {
	    return true;
	  } // Starting from the end, go through in reverse, excluding the first group, and check the
	  // candidate and number groups are the same.


	  var formattedNumberGroupIndex = formattedNumberGroups.length - 1;

	  while (formattedNumberGroupIndex > 0 && candidateNumberGroupIndex >= 0) {
	    if (candidateGroups[candidateNumberGroupIndex] !== formattedNumberGroups[formattedNumberGroupIndex]) {
	      return false;
	    }

	    formattedNumberGroupIndex--;
	    candidateNumberGroupIndex--;
	  } // Now check the first group. There may be a national prefix at the start, so we only check
	  // that the candidate group ends with the formatted number group.


	  return candidateNumberGroupIndex >= 0 && endsWith(candidateGroups[candidateNumberGroupIndex], formattedNumberGroups[0]);
	}

	function allNumberGroupsRemainGrouped(metadata, number, normalizedCandidate, formattedNumberGroups) {
	  var fromIndex = 0;

	  if (number.getCountryCodeSource() !== CountryCodeSource.FROM_DEFAULT_COUNTRY) {
	    // First skip the country code if the normalized candidate contained it.
	    var countryCode = String(number.getCountryCode());
	    fromIndex = normalizedCandidate.indexOf(countryCode) + countryCode.length();
	  } // Check each group of consecutive digits are not broken into separate groupings in the
	  // {@code normalizedCandidate} string.


	  for (var i = 0; i < formattedNumberGroups.length; i++) {
	    // Fails if the substring of {@code normalizedCandidate} starting from {@code fromIndex}
	    // doesn't contain the consecutive digits in formattedNumberGroups[i].
	    fromIndex = normalizedCandidate.indexOf(formattedNumberGroups[i], fromIndex);

	    if (fromIndex < 0) {
	      return false;
	    } // Moves {@code fromIndex} forward.


	    fromIndex += formattedNumberGroups[i].length();

	    if (i == 0 && fromIndex < normalizedCandidate.length()) {
	      // We are at the position right after the NDC. We get the region used for formatting
	      // information based on the country code in the phone number, rather than the number itself,
	      // as we do not need to distinguish between different countries with the same country
	      // calling code and this is faster.
	      var region = util.getRegionCodeForCountryCode(number.getCountryCode());

	      if (util.getNddPrefixForRegion(region, true) != null && Character.isDigit(normalizedCandidate.charAt(fromIndex))) {
	        // This means there is no formatting symbol after the NDC. In this case, we only
	        // accept the number if there is no formatting symbol at all in the number, except
	        // for extensions. This is only important for countries with national prefixes.
	        var nationalSignificantNumber = util.getNationalSignificantNumber(number);
	        return startsWith(normalizedCandidate.slice(fromIndex - formattedNumberGroups[i].length), nationalSignificantNumber);
	      }
	    }
	  } // The check here makes sure that we haven't mistakenly already used the extension to
	  // match the last group of the subscriber number. Note the extension cannot have
	  // formatting in-between digits.


	  return normalizedCandidate.slice(fromIndex).contains(number.getExtension());
	}

	function _objectSpread$5(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty$6(target, key, source[key]); }); } return target; }

	function _classCallCheck$6(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$5(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$5(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$5(Constructor.prototype, protoProps); if (staticProps) _defineProperties$5(Constructor, staticProps); return Constructor; }

	function _defineProperty$6(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	/**
	 * Patterns used to extract phone numbers from a larger phone-number-like pattern. These are
	 * ordered according to specificity. For example, white-space is last since that is frequently
	 * used in numbers, not just to separate two numbers. We have separate patterns since we don't
	 * want to break up the phone-number-like text on more than one different kind of symbol at one
	 * time, although symbols of the same type (e.g. space) can be safely grouped together.
	 *
	 * Note that if there is a match, we will always check any text found up to the first match as
	 * well.
	 */

	var INNER_MATCHES = [// Breaks on the slash - e.g. "651-234-2345/332-445-1234"
	'\\/+(.*)/', // Note that the bracket here is inside the capturing group, since we consider it part of the
	// phone number. Will match a pattern like "(650) 223 3345 (754) 223 3321".
	'(\\([^(]*)', // Breaks on a hyphen - e.g. "12345 - 332-445-1234 is my number."
	// We require a space on either side of the hyphen for it to be considered a separator.
	"(?:".concat(pZ, "-|-").concat(pZ, ")").concat(pZ, "*(.+)"), // Various types of wide hyphens. Note we have decided not to enforce a space here, since it's
	// possible that it's supposed to be used to break two numbers without spaces, and we haven't
	// seen many instances of it used within a number.
	"[\u2012-\u2015\uFF0D]".concat(pZ, "*(.+)"), // Breaks on a full stop - e.g. "12345. 332-445-1234 is my number."
	"\\.+".concat(pZ, "*([^.]+)"), // Breaks on space - e.g. "3324451234 8002341234"
	"".concat(pZ, "+(").concat(PZ, "+)")]; // Limit on the number of leading (plus) characters.

	var leadLimit = limit(0, 2); // Limit on the number of consecutive punctuation characters.

	var punctuationLimit = limit(0, 4);
	/* The maximum number of digits allowed in a digit-separated block. As we allow all digits in a
	 * single block, set high enough to accommodate the entire national number and the international
	 * country code. */

	var digitBlockLimit = MAX_LENGTH_FOR_NSN + MAX_LENGTH_COUNTRY_CODE; // Limit on the number of blocks separated by punctuation.
	// Uses digitBlockLimit since some formats use spaces to separate each digit.

	var blockLimit = limit(0, digitBlockLimit);
	/* A punctuation sequence allowing white space. */

	var punctuation = "[".concat(VALID_PUNCTUATION, "]") + punctuationLimit; // A digits block without punctuation.

	var digitSequence = pNd + limit(1, digitBlockLimit);
	/**
	 * Phone number pattern allowing optional punctuation.
	 * The phone number pattern used by `find()`, similar to
	 * VALID_PHONE_NUMBER, but with the following differences:
	 * <ul>
	 *   <li>All captures are limited in order to place an upper bound to the text matched by the
	 *       pattern.
	 * <ul>
	 *   <li>Leading punctuation / plus signs are limited.
	 *   <li>Consecutive occurrences of punctuation are limited.
	 *   <li>Number of digits is limited.
	 * </ul>
	 *   <li>No whitespace is allowed at the start or end.
	 *   <li>No alpha digits (vanity numbers such as 1-800-SIX-FLAGS) are currently supported.
	 * </ul>
	 */

	var PATTERN = '(?:' + LEAD_CLASS + punctuation + ')' + leadLimit + digitSequence + '(?:' + punctuation + digitSequence + ')' + blockLimit + '(?:' + EXTN_PATTERNS_FOR_MATCHING + ')?'; // Regular expression of trailing characters that we want to remove.
	// We remove all characters that are not alpha or numerical characters.
	// The hash character is retained here, as it may signify
	// the previous block was an extension.
	//
	// // Don't know what does '&&' mean here.
	// const UNWANTED_END_CHAR_PATTERN = new RegExp(`[[\\P{N}&&\\P{L}]&&[^#]]+$`)
	//

	var UNWANTED_END_CHAR_PATTERN = new RegExp("[^".concat(_pN).concat(_pL, "#]+$"));
	var MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER || Math.pow(2, 53) - 1;
	/**
	 * A stateful class that finds and extracts telephone numbers from {@linkplain CharSequence text}.
	 * Instances can be created using the {@linkplain PhoneNumberUtil#findNumbers factory methods} in
	 * {@link PhoneNumberUtil}.
	 *
	 * <p>Vanity numbers (phone numbers using alphabetic digits such as <tt>1-800-SIX-FLAGS</tt> are
	 * not found.
	 *
	 * <p>This class is not thread-safe.
	 */

	var PhoneNumberMatcher =
	/*#__PURE__*/
	function () {
	  /** The iteration tristate. */

	  /** The next index to start searching at. Undefined in {@link State#DONE}. */
	  // A cache for frequently used country-specific regular expressions. Set to 32 to cover ~2-3
	  // countries being used for the same doc with ~10 patterns for each country. Some pages will have
	  // a lot more countries in use, but typically fewer numbers for each so expanding the cache for
	  // that use-case won't have a lot of benefit.

	  /**
	   * Creates a new instance. See the factory methods in {@link PhoneNumberUtil} on how to obtain a
	   * new instance.
	   *
	   * @param util  the phone number util to use
	   * @param text  the character sequence that we will search, null for no text
	   * @param country  the country to assume for phone numbers not written in international format
	   *     (with a leading plus, or with the international dialing prefix of the specified region).
	   *     May be null or "ZZ" if only numbers with a leading plus should be
	   *     considered.
	   * @param leniency  the leniency to use when evaluating candidate phone numbers
	   * @param maxTries  the maximum number of invalid numbers to try before giving up on the text.
	   *     This is to cover degenerate cases where the text has a lot of false positives in it. Must
	   *     be {@code >= 0}.
	   */
	  function PhoneNumberMatcher() {
	    var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
	    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    var metadata = arguments.length > 2 ? arguments[2] : undefined;

	    _classCallCheck$6(this, PhoneNumberMatcher);

	    _defineProperty$6(this, "state", 'NOT_READY');

	    _defineProperty$6(this, "searchIndex", 0);

	    _defineProperty$6(this, "regExpCache", new RegExpCache(32));

	    options = _objectSpread$5({}, options, {
	      defaultCallingCode: options.defaultCallingCode,
	      defaultCountry: options.defaultCountry && isSupportedCountry(options.defaultCountry, metadata) ? options.defaultCountry : undefined,
	      leniency: options.leniency || options.extended ? 'POSSIBLE' : 'VALID',
	      maxTries: options.maxTries || MAX_SAFE_INTEGER
	    });

	    if (!options.leniency) {
	      throw new TypeError('`Leniency` not supplied');
	    }

	    if (options.maxTries < 0) {
	      throw new TypeError('`maxTries` not supplied');
	    }

	    this.text = text;
	    this.options = options;
	    this.metadata = metadata;
	    /** The degree of validation requested. */

	    this.leniency = Leniency[options.leniency];

	    if (!this.leniency) {
	      throw new TypeError("Unknown leniency: ".concat(options.leniency, "."));
	    }
	    /** The maximum number of retries after matching an invalid number. */


	    this.maxTries = options.maxTries;
	    this.PATTERN = new RegExp(PATTERN, 'ig');
	  }
	  /**
	   * Attempts to find the next subsequence in the searched sequence on or after {@code searchIndex}
	   * that represents a phone number. Returns the next match, null if none was found.
	   *
	   * @param index  the search index to start searching at
	   * @return  the phone number match found, null if none can be found
	   */


	  _createClass$5(PhoneNumberMatcher, [{
	    key: "find",
	    value: function find() // (index)
	    {
	      // // Reset the regular expression.
	      // this.PATTERN.lastIndex = index
	      var matches;

	      while (this.maxTries > 0 && (matches = this.PATTERN.exec(this.text)) !== null) {
	        var candidate = matches[0];
	        var offset = matches.index;
	        candidate = parsePreCandidate(candidate);

	        if (isValidPreCandidate(candidate, offset, this.text)) {
	          var match = // Try to come up with a valid match given the entire candidate.
	          this.parseAndVerify(candidate, offset, this.text) // If that failed, try to find an "inner match" -
	          // there might be a phone number within this candidate.
	          || this.extractInnerMatch(candidate, offset, this.text);

	          if (match) {
	            if (this.options.v2) {
	              var phoneNumber = new PhoneNumber(match.country || match.countryCallingCode, match.phone, this.metadata);

	              if (match.ext) {
	                phoneNumber.ext = match.ext;
	              }

	              return {
	                startsAt: match.startsAt,
	                endsAt: match.endsAt,
	                number: phoneNumber
	              };
	            }

	            return match;
	          }
	        }

	        this.maxTries--;
	      }
	    }
	    /**
	     * Attempts to extract a match from `candidate`
	     * if the whole candidate does not qualify as a match.
	     */

	  }, {
	    key: "extractInnerMatch",
	    value: function extractInnerMatch(candidate, offset, text) {
	      for (var _i = 0, _INNER_MATCHES = INNER_MATCHES; _i < _INNER_MATCHES.length; _i++) {
	        var innerMatchPattern = _INNER_MATCHES[_i];
	        var isFirstMatch = true;
	        var matches = void 0;
	        var possibleInnerMatch = new RegExp(innerMatchPattern, 'g');

	        while ((matches = possibleInnerMatch.exec(candidate)) !== null && this.maxTries > 0) {
	          if (isFirstMatch) {
	            // We should handle any group before this one too.
	            var _group = trimAfterFirstMatch(UNWANTED_END_CHAR_PATTERN, candidate.slice(0, matches.index));

	            var _match = this.parseAndVerify(_group, offset, text);

	            if (_match) {
	              return _match;
	            }

	            this.maxTries--;
	            isFirstMatch = false;
	          }

	          var group = trimAfterFirstMatch(UNWANTED_END_CHAR_PATTERN, matches[1]); // Java code does `groupMatcher.start(1)` here,
	          // but there's no way in javascript to get a group match start index,
	          // therefore using the overall match start index `matches.index`.

	          var match = this.parseAndVerify(group, offset + matches.index, text);

	          if (match) {
	            return match;
	          }

	          this.maxTries--;
	        }
	      }
	    }
	    /**
	     * Parses a phone number from the `candidate` using `parseNumber` and
	     * verifies it matches the requested `leniency`. If parsing and verification succeed,
	     * a corresponding `PhoneNumberMatch` is returned, otherwise this method returns `null`.
	     *
	     * @param candidate  the candidate match
	     * @param offset  the offset of {@code candidate} within {@link #text}
	     * @return  the parsed and validated phone number match, or null
	     */

	  }, {
	    key: "parseAndVerify",
	    value: function parseAndVerify(candidate, offset, text) {
	      if (!isValidCandidate(candidate, offset, text, this.options.leniency)) {
	        return;
	      }

	      var number = parse(candidate, {
	        extended: true,
	        defaultCountry: this.options.defaultCountry,
	        defaultCallingCode: this.options.defaultCallingCode
	      }, this.metadata);

	      if (!number.possible) {
	        return;
	      }

	      if (this.leniency(number, candidate, this.metadata, this.regExpCache)) {
	        // // We used parseAndKeepRawInput to create this number,
	        // // but for now we don't return the extra values parsed.
	        // // TODO: stop clearing all values here and switch all users over
	        // // to using rawInput() rather than the rawString() of PhoneNumberMatch.
	        // number.clearCountryCodeSource()
	        // number.clearRawInput()
	        // number.clearPreferredDomesticCarrierCode()
	        var result = {
	          startsAt: offset,
	          endsAt: offset + candidate.length,
	          phone: number.phone
	        };

	        if (number.country && number.country !== '001') {
	          result.country = number.country;
	        } else {
	          result.countryCallingCode = number.countryCallingCode;
	        }

	        if (number.ext) {
	          result.ext = number.ext;
	        }

	        return result;
	      }
	    }
	  }, {
	    key: "hasNext",
	    value: function hasNext() {
	      if (this.state === 'NOT_READY') {
	        this.lastMatch = this.find(); // (this.searchIndex)

	        if (this.lastMatch) {
	          // this.searchIndex = this.lastMatch.endsAt
	          this.state = 'READY';
	        } else {
	          this.state = 'DONE';
	        }
	      }

	      return this.state === 'READY';
	    }
	  }, {
	    key: "next",
	    value: function next() {
	      // Check the state and find the next match as a side-effect if necessary.
	      if (!this.hasNext()) {
	        throw new Error('No next element');
	      } // Don't retain that memory any longer than necessary.


	      var result = this.lastMatch;
	      this.lastMatch = null;
	      this.state = 'NOT_READY';
	      return result;
	    }
	  }]);

	  return PhoneNumberMatcher;
	}();

	function _typeof$2$1(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof$2$1 = function _typeof(obj) { return typeof obj; }; } else { _typeof$2$1 = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof$2$1(obj); }

	function _classCallCheck$7(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _defineProperties$6(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

	function _createClass$6(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties$6(Constructor.prototype, protoProps); if (staticProps) _defineProperties$6(Constructor, staticProps); return Constructor; }

	function _defineProperty$7(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
	// Could be any digit, I guess.

	var DUMMY_DIGIT = '9'; // I don't know why is it exactly `15`

	var LONGEST_NATIONAL_PHONE_NUMBER_LENGTH = 15; // Create a phone number consisting only of the digit 9 that matches the
	// `number_pattern` by applying the pattern to the "longest phone number" string.

	var LONGEST_DUMMY_PHONE_NUMBER = repeat(DUMMY_DIGIT, LONGEST_NATIONAL_PHONE_NUMBER_LENGTH); // The digits that have not been entered yet will be represented by a \u2008,
	// the punctuation space.

	var DIGIT_PLACEHOLDER = 'x'; // '\u2008' (punctuation space)

	var DIGIT_PLACEHOLDER_MATCHER = new RegExp(DIGIT_PLACEHOLDER); // A set of characters that, if found in a national prefix formatting rules, are an indicator to
	// us that we should separate the national prefix from the number when formatting.

	var NATIONAL_PREFIX_SEPARATORS_PATTERN = /[- ]/; // Deprecated: Google has removed some formatting pattern related code from their repo.
	// An example of a character class is "[1-4]".

	var CREATE_CHARACTER_CLASS_PATTERN =  function () {
	  return /\[([^\[\]])*\]/g;
	}; // Any digit in a regular expression that actually denotes a digit. For
	// example, in the regular expression "80[0-2]\d{6,10}", the first 2 digits
	// (8 and 0) are standalone digits, but the rest are not.
	// Two look-aheads are needed because the number following \\d could be a
	// two-digit number, since the phone number can be as long as 15 digits.


	var CREATE_STANDALONE_DIGIT_PATTERN =  function () {
	  return /\d(?=[^,}][^,}])/g;
	}; // A pattern that is used to determine if a `format` is eligible
	// to be used by the "as you type formatter".
	// It is eligible when the `format` contains groups of the dollar sign
	// followed by a single digit, separated by valid phone number punctuation.
	// This prevents invalid punctuation (such as the star sign in Israeli star numbers)
	// getting into the output of the "as you type formatter".


	var ELIGIBLE_FORMAT_PATTERN = new RegExp('^' + '[' + VALID_PUNCTUATION + ']*' + '(\\$\\d[' + VALID_PUNCTUATION + ']*)+' + '$'); // This is the minimum length of the leading digits of a phone number
	// to guarantee the first "leading digits pattern" for a phone number format
	// to be preemptive.

	var MIN_LEADING_DIGITS_LENGTH = 3;
	var VALID_FORMATTED_PHONE_NUMBER_PART = '[' + VALID_PUNCTUATION + VALID_DIGITS + ']+';
	var VALID_FORMATTED_PHONE_NUMBER_PART_PATTERN = new RegExp('^' + VALID_FORMATTED_PHONE_NUMBER_PART + '$', 'i');
	var VALID_PHONE_NUMBER$2 = '(?:' + '[' + PLUS_CHARS + ']' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']*' + '|' + '[' + VALID_PUNCTUATION + VALID_DIGITS + ']+' + ')';
	var AFTER_PHONE_NUMBER_DIGITS_END_PATTERN = new RegExp('[^' + VALID_PUNCTUATION + VALID_DIGITS + ']+' + '.*' + '$');

	var AsYouType =
	/*#__PURE__*/
	function () {
	  // Not setting `options` to a constructor argument
	  // not to break backwards compatibility
	  // for older versions of the library.

	  /**
	   * @param {(string|object)?} [optionsOrDefaultCountry] - The default country used for parsing non-international phone numbers. Can also be an `options` object.
	   * @param {Object} metadata
	   */
	  function AsYouType(optionsOrDefaultCountry, metadata) {
	    _classCallCheck$7(this, AsYouType);

	    _defineProperty$7(this, "options", {});

	    this.metadata = new Metadata(metadata); // Set `defaultCountry` and `defaultCallingCode` options.

	    var defaultCountry;
	    var defaultCallingCode; // Turns out `null` also has type "object". Weird.

	    if (optionsOrDefaultCountry) {
	      if (_typeof$2$1(optionsOrDefaultCountry) === 'object') {
	        defaultCountry = optionsOrDefaultCountry.defaultCountry;
	        defaultCallingCode = optionsOrDefaultCountry.defaultCallingCode;
	      } else {
	        defaultCountry = optionsOrDefaultCountry;
	      }
	    }

	    if (defaultCountry && this.metadata.hasCountry(defaultCountry)) {
	      this.defaultCountry = defaultCountry;
	    }

	    if (defaultCallingCode) {

	      this.defaultCallingCode = defaultCallingCode;
	    } // Reset.


	    this.reset();
	  }

	  _createClass$6(AsYouType, [{
	    key: "reset",
	    value: function reset() {
	      this.formattedOutput = '';
	      this.international = false;
	      this.internationalPrefix = undefined;
	      this.countryCallingCode = undefined;
	      this.digits = '';
	      this.nationalNumberDigits = '';
	      this.nationalPrefix = '';
	      this.carrierCode = '';
	      this.setCountry(this.defaultCountry, this.defaultCallingCode);
	      return this;
	    }
	  }, {
	    key: "resetFormat",
	    value: function resetFormat() {
	      this.chosenFormat = undefined;
	      this.template = undefined;
	      this.populatedNationalNumberTemplate = undefined;
	      this.populatedNationalNumberTemplatePosition = -1;
	    }
	    /**
	     * Returns `true` if the phone number is being input in international format.
	     * In other words, returns `true` if and only if the parsed phone number starts with a `"+"`.
	     * @return {boolean}
	     */

	  }, {
	    key: "isInternational",
	    value: function isInternational() {
	      return this.international;
	    }
	    /**
	     * Returns the "country calling code" part of the phone number.
	     * Returns `undefined` if the number is not being input in international format.
	     * Returns "country calling code" for "non-geographic" phone numbering plans too.
	     * @return {string} [countryCallingCode]
	     */

	  }, {
	    key: "getCountryCallingCode",
	    value: function getCountryCallingCode() {
	      return this.countryCallingCode;
	    }
	    /**
	     * Returns a two-letter country code of the phone number.
	     * Returns `undefined` for "non-geographic" phone numbering plans.
	     * Returns `undefined` if no phone number has been input yet.
	     * @return {string} [country]
	     */

	  }, {
	    key: "getCountry",
	    value: function getCountry() {
	      // If no digits have been input yet,
	      // then `this.country` is the `defaultCountry`.
	      // Won't return the `defaultCountry` in such case.
	      if (!this.digits) {
	        return;
	      }

	      var countryCode = this.country;

	      return countryCode;
	    }
	  }, {
	    key: "setCountry",
	    value: function setCountry(country, callingCode) {
	      this.country = country;
	      this.metadata.selectNumberingPlan(country, callingCode);

	      if (this.metadata.hasSelectedNumberingPlan()) {
	        this.initializePhoneNumberFormatsForCountry();
	      } else {
	        this.matchingFormats = [];
	      }

	      this.resetFormat();
	    }
	    /**
	     * Inputs "next" phone number characters.
	     * @param  {string} text
	     * @return {string} Formatted phone number characters that have been input so far.
	     */

	  }, {
	    key: "input",
	    value: function input(text) {
	      var formattedDigits = this.extractFormattedDigits(text); // If the extracted phone number part
	      // can possibly be a part of some valid phone number
	      // then parse phone number characters from a formatted phone number.

	      if (VALID_FORMATTED_PHONE_NUMBER_PART_PATTERN.test(formattedDigits)) {
	        this.formattedOutput = this.getFullNumber(this.inputDigits(parseDigits(formattedDigits)) || this.getNonFormattedNationalNumber());
	      }

	      return this.formattedOutput;
	    }
	    /**
	     * Extracts formatted phone number digits from text (if there're any).
	     * @param  {string} text
	     * @return {string}
	     */

	  }, {
	    key: "extractFormattedDigits",
	    value: function extractFormattedDigits(text) {
	      // Extract a formatted phone number part from text.
	      var extractedNumber = extractFormattedPhoneNumber$1(text) || ''; // Trim a `+`.

	      if (extractedNumber[0] === '+') {
	        // Trim the `+`.
	        extractedNumber = extractedNumber.slice('+'.length);

	        if (this.digits) ; else {
	          this.formattedOutput = '+';
	          this.startInternationalNumber();
	        }
	      }

	      return extractedNumber;
	    }
	  }, {
	    key: "startInternationalNumber",
	    value: function startInternationalNumber() {
	      // Prepend the `+` to parsed input.
	      this.international = true; // If a default country was set then reset it
	      // because an explicitly international phone
	      // number is being entered.

	      this.setCountry();
	    }
	    /**
	     * Inputs "next" phone number digits.
	     * @param  {string} digits
	     * @return {string} [formattedNumber] Formatted national phone number (if it can be formatted at this stage). Returning `undefined` means "don't format the national phone number at this stage".
	     */

	  }, {
	    key: "inputDigits",
	    value: function inputDigits(nextDigits) {
	      // Some users input their phone number in "out-of-country"
	      // dialing format instead of using the leading `+`.
	      // https://github.com/catamphetamine/libphonenumber-js/issues/185
	      // Detect such numbers.
	      if (!this.digits) {
	        var numberWithoutIDD = stripIDDPrefix(nextDigits, this.defaultCountry, this.defaultCallingCode, this.metadata.metadata);

	        if (numberWithoutIDD && numberWithoutIDD !== nextDigits) {
	          // If an IDD prefix was stripped then
	          // convert the number to international one
	          // for subsequent parsing.
	          this.internationalPrefix = nextDigits.slice(0, nextDigits.length - numberWithoutIDD.length);
	          nextDigits = numberWithoutIDD;
	          this.startInternationalNumber();
	        }
	      } // Append phone number digits.


	      this.digits += nextDigits; // Try to format the parsed input

	      if (this.isInternational()) {
	        if (this.countryCallingCode) {
	          this.nationalNumberDigits += nextDigits; // `this.country` could be `undefined`, for example, when there is
	          // ambiguity in a form of several different countries,
	          // each corresponding to the same country phone code
	          // (e.g. NANPA: USA, Canada, etc), and there's not enough digits
	          // to reliably determine the country the phone number belongs to.
	          // Therefore, in cases of such ambiguity, each time something is input,
	          // try to determine the country (if it hasn't been determined yet).

	          if (!this.country || this.isCountryCallingCodeAmbiguous()) {
	            this.determineTheCountry();
	          }
	        } else {
	          // Extract country calling code from the digits entered so far.
	          // There must be some digits in order to extract anything from them.
	          //
	          // If one looks at country phone codes
	          // then they can notice that no one country phone code
	          // is ever a (leftmost) substring of another country phone code.
	          // So if a valid country code is extracted so far
	          // then it means that this is the country code.
	          //
	          // If no country phone code could be extracted so far,
	          // then don't format the phone number.
	          //
	          if (!this.extractCountryCallingCode()) {
	            // Don't format the phone number.
	            return;
	          } // Possibly extract a national prefix.
	          // Some people incorrectly input national prefix
	          // in an international phone number.
	          // For example, some people write British phone numbers as `+44(0)...`.
	          // Also, mobile phone numbers in Mexico are supposed to be dialled
	          // internationally using a `15` national prefix.
	          //
	          // https://www.mexperience.com/dialing-cell-phones-in-mexico/
	          //
	          // "Dialing a Mexican cell phone from abroad
	          // When you are calling a cell phone number in Mexico from outside Mexico,
	          // it’s necessary to dial an additional “1” after Mexico’s country code
	          // (which is “52”) and before the area code.
	          // You also ignore the 045, and simply dial the area code and the
	          // cell phone’s number.
	          //
	          // If you don’t add the “1”, you’ll receive a recorded announcement
	          // asking you to redial using it.
	          //
	          // For example, if you are calling from the USA to a cell phone
	          // in Mexico City, you would dial +52 – 1 – 55 – 1234 5678.
	          // (Note that this is different to calling a land line in Mexico City
	          // from abroad, where the number dialed would be +52 – 55 – 1234 5678)".
	          //


	          this.nationalNumberDigits = this.digits.slice(this.countryCallingCode.length); // this.extractNationalPrefix()
	          //
	          // Determine the country from country calling code and national number.

	          this.determineTheCountry();
	        }
	      } else {
	        this.nationalNumberDigits += nextDigits; // If `defaultCallingCode` is set,
	        // see if the `country` could be derived.

	        if (!this.country) {
	          this.determineTheCountry();
	        } // Some national prefixes are substrings of other national prefixes
	        // (for the same country), therefore try to extract national prefix each time
	        // because a longer national prefix might be available at some point in time.


	        var previousNationalPrefix = this.nationalPrefix;
	        this.nationalNumberDigits = this.nationalPrefix + this.nationalNumberDigits; // Re-extract national prefix.

	        this.extractNationalPrefix(); // If another national prefix has been extracted.

	        if (this.nationalPrefix !== previousNationalPrefix) {
	          // National number has changed
	          // (due to another national prefix been extracted)
	          // therefore national number has changed
	          // therefore reset all previous formatting data.
	          // (and leading digits matching state)
	          this.initializePhoneNumberFormatsForCountry();
	          this.resetFormat();
	        }
	      }

	      if (this.nationalNumberDigits) {
	        // Match the available formats by the currently available leading digits.
	        this.matchFormats(this.nationalNumberDigits);
	      } // Format the phone number (given the next digits)


	      return this.formatNationalNumberWithNextDigits(nextDigits);
	    }
	  }, {
	    key: "formatNationalNumberWithNextDigits",
	    value: function formatNationalNumberWithNextDigits(nextDigits) {
	      // See if the phone number digits can be formatted as a complete phone number.
	      // If not, use the results from `formatNextNationalNumberDigits()`,
	      // which formats based on the chosen formatting pattern.
	      // Attempting to format complete phone number first is how it's done
	      // in Google's `libphonenumber`.
	      var formattedNumber = this.attemptToFormatCompletePhoneNumber(); // Just because a phone number doesn't have a suitable format
	      // that doesn't mean that the phone number is invalid,
	      // because phone number formats only format phone numbers,
	      // they don't validate them and some (rare) phone numbers
	      // are meant to stay non-formatted.

	      if (formattedNumber) {
	        return formattedNumber;
	      } // Format the next phone number digits
	      // using the previously chosen phone number format.
	      //
	      // This is done here because if `attemptToFormatCompletePhoneNumber`
	      // was placed before this call then the `template`
	      // wouldn't reflect the situation correctly (and would therefore be inconsistent)
	      //


	      var previouslyChosenFormat = this.chosenFormat; // Choose a format from the list of matching ones.

	      var newlyChosenFormat = this.chooseFormat();

	      if (newlyChosenFormat) {
	        if (newlyChosenFormat === previouslyChosenFormat) {
	          // If could format the next (current) digit
	          // using the previously chosen phone number format
	          // then return the formatted number so far.
	          //
	          // If no new phone number format could be chosen,
	          // and couldn't format the supplied national number
	          // using the previously chosen phone number pattern,
	          // then return `undefined`.
	          //
	          return this.formatNextNationalNumberDigits(nextDigits);
	        } else {
	          // If a more appropriate phone number format
	          // has been chosen for these "leading digits",
	          // then format the national phone number (so far)
	          // using the newly selected format.
	          //
	          // Will return `undefined` if it couldn't format
	          // the supplied national number
	          // using the selected phone number pattern.
	          //
	          return this.reformatNationalNumber();
	        }
	      }
	    }
	  }, {
	    key: "chooseFormat",
	    value: function chooseFormat() {
	      // When there are multiple available formats, the formatter uses the first
	      // format where a formatting template could be created.
	      for (var _iterator = this.matchingFormats, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {
	        var _ref;

	        if (_isArray) {
	          if (_i >= _iterator.length) break;
	          _ref = _iterator[_i++];
	        } else {
	          _i = _iterator.next();
	          if (_i.done) break;
	          _ref = _i.value;
	        }

	        var format = _ref;

	        // If this format is currently being used
	        // and is still possible, then stick to it.
	        if (this.chosenFormat === format) {
	          break;
	        }

	        if (!this.createFormattingTemplate(format)) {
	          continue;
	        }

	        this.chosenFormat = format; // With a new formatting template, the matched position
	        // using the old template needs to be reset.

	        this.populatedNationalNumberTemplatePosition = -1;
	        break;
	      }

	      if (!this.chosenFormat) {
	        // No format matches the national phone number entered.
	        this.resetFormat();
	      }

	      return this.chosenFormat;
	    } // Formats each digit of the national phone number (so far)
	    // using the selected format.

	  }, {
	    key: "reformatNationalNumber",
	    value: function reformatNationalNumber() {
	      return this.formatNextNationalNumberDigits(this.nationalPrefix + this.nationalNumberDigits);
	    }
	  }, {
	    key: "initializePhoneNumberFormatsForCountry",
	    value: function initializePhoneNumberFormatsForCountry() {
	      // Get all "eligible" phone number formats for this country
	      this.matchingFormats = this.metadata.formats().filter(function (format) {
	        // Compared to `libphonenumber`'s code, the two "Discard a few formats
	        // that we know are not relevant based on the presence of the national prefix"
	        // checks have changed: the first one has been moved to `.matchFormats()`,
	        // and the second one doesn't apply to this library because it doesn't deal with
	        // "incomplete" phone numbers (for example, phone numbers, entered without "area code").
	        return ELIGIBLE_FORMAT_PATTERN.test(format.internationalFormat());
	      });
	    }
	  }, {
	    key: "matchFormats",
	    value: function matchFormats(leadingDigits) {
	      var _this = this;

	      // "leading digits" pattern list starts with a
	      // "leading digits" pattern fitting a maximum of 3 leading digits.
	      // So, after a user inputs 3 digits of a national (significant) phone number
	      // this national (significant) number can already be formatted.
	      // The next "leading digits" pattern is for 4 leading digits max,
	      // and the "leading digits" pattern after it is for 5 leading digits max, etc.
	      // This implementation is different from Google's
	      // in that it searches for a fitting format
	      // even if the user has entered less than
	      // `MIN_LEADING_DIGITS_LENGTH` digits of a national number.
	      // Because some leading digit patterns already match for a single first digit.
	      var leadingDigitsPatternIndex = leadingDigits.length - MIN_LEADING_DIGITS_LENGTH;

	      if (leadingDigitsPatternIndex < 0) {
	        leadingDigitsPatternIndex = 0;
	      }

	      this.matchingFormats = this.matchingFormats.filter(function (format) {
	        // If national prefix is mandatory for this phone number format
	        // and the user didn't input the national prefix
	        // then this phone number format isn't suitable.
	        if (!_this.isInternational() && !_this.nationalPrefix && format.nationalPrefixIsMandatoryWhenFormattingInNationalFormat()) {
	          return false;
	        }

	        var leadingDigitsPatternsCount = format.leadingDigitsPatterns().length; // If this format is not restricted to a certain
	        // leading digits pattern then it fits.

	        if (leadingDigitsPatternsCount === 0) {
	          return true;
	        } // Start excluding any non-matching formats only when the
	        // national number entered so far is at least 3 digits long,
	        // otherwise format matching would give false negatives.
	        // For example, when the digits entered so far are `2`
	        // and the leading digits pattern is `21` –
	        // it's quite obvious in this case that the format could be the one
	        // but due to the absence of further digits it would give false negative.


	        if (leadingDigits.length < MIN_LEADING_DIGITS_LENGTH) {
	          return true;
	        } // If at least `MIN_LEADING_DIGITS_LENGTH` digits of a national number are available
	        // then format matching starts narrowing down the list of possible formats
	        // (only previously matched formats are considered for next digits).


	        leadingDigitsPatternIndex = Math.min(leadingDigitsPatternIndex, leadingDigitsPatternsCount - 1);
	        var leadingDigitsPattern = format.leadingDigitsPatterns()[leadingDigitsPatternIndex]; // Brackets are required for `^` to be applied to
	        // all or-ed (`|`) parts, not just the first one.

	        return new RegExp("^(".concat(leadingDigitsPattern, ")")).test(leadingDigits);
	      }); // If there was a phone number format chosen
	      // and it no longer holds given the new leading digits then reset it.
	      // The test for this `if` condition is marked as:
	      // "Reset a chosen format when it no longer holds given the new leading digits".
	      // To construct a valid test case for this one can find a country
	      // in `PhoneNumberMetadata.xml` yielding one format for 3 `<leadingDigits>`
	      // and yielding another format for 4 `<leadingDigits>` (Australia in this case).

	      if (this.chosenFormat && this.matchingFormats.indexOf(this.chosenFormat) === -1) {
	        this.resetFormat();
	      }
	    }
	  }, {
	    key: "getSeparatorAfterNationalPrefix",
	    value: function getSeparatorAfterNationalPrefix(format) {
	      if (this.metadata.countryCallingCode() === '1') {
	        return ' ';
	      }

	      if (format && format.nationalPrefixFormattingRule() && NATIONAL_PREFIX_SEPARATORS_PATTERN.test(format.nationalPrefixFormattingRule())) {
	        return ' ';
	      }

	      return '';
	    } // This is in accordance to how Google's `libphonenumber` does it.
	    // "Check to see if there is an exact pattern match for these digits.
	    // If so, we should use this instead of any other formatting template
	    // whose `leadingDigitsPattern` also matches the input."

	  }, {
	    key: "attemptToFormatCompletePhoneNumber",
	    value: function attemptToFormatCompletePhoneNumber() {
	      for (var _iterator2 = this.matchingFormats, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {
	        var _ref2;

	        if (_isArray2) {
	          if (_i2 >= _iterator2.length) break;
	          _ref2 = _iterator2[_i2++];
	        } else {
	          _i2 = _iterator2.next();
	          if (_i2.done) break;
	          _ref2 = _i2.value;
	        }

	        var format = _ref2;
	        var matcher = new RegExp("^(?:".concat(format.pattern(), ")$"));

	        if (!matcher.test(this.nationalNumberDigits)) {
	          continue;
	        } // Here, national number is formatted without "national prefix
	        // formatting rule", because otherwise there'd be a bug
	        // when "area code" is "duplicated" during input:
	        // https://github.com/catamphetamine/libphonenumber-js/issues/318


	        var formattedNationalNumber = formatNationalNumberUsingFormat(this.nationalNumberDigits, format, this.isInternational(), false, // Don't prepend national prefix (it will be prepended manually).
	        this.metadata); // Check if this `format` preserves all digits.
	        // This is how it's done in Google's `libphonenumber`.
	        // Also, it fixes the bug when "area code" is "duplicated" during input:
	        // https://github.com/catamphetamine/libphonenumber-js/issues/318
	        //
	        // "Check that we didn't remove nor add any extra digits when we matched
	        // this formatting pattern. This usually happens after we entered the last
	        // digit during AYTF. Eg: In case of MX, we swallow mobile token (1) when
	        // formatted but AYTF should retain all the number entered and not change
	        // in order to match a format (of same leading digits and length) display
	        // in that way."
	        // "If it's the same (i.e entered number and format is same), then it's
	        // safe to return this in formatted number as nothing is lost / added."
	        // Otherwise, don't use this format.
	        // https://github.com/google/libphonenumber/commit/3e7c1f04f5e7200f87fb131e6f85c6e99d60f510#diff-9149457fa9f5d608a11bb975c6ef4bc5
	        // https://github.com/google/libphonenumber/commit/3ac88c7106e7dcb553bcc794b15f19185928a1c6#diff-2dcb77e833422ee304da348b905cde0b
	        //

	        if (parseDigits(formattedNationalNumber) !== this.nationalNumberDigits) {
	          continue;
	        } // Prepend national prefix (if any).


	        if (this.nationalPrefix) {
	          // Here, national number is formatted with "national prefix
	          // formatting rule". The reason is that "national prefix
	          // formatting rule" often adds parentheses, and while Google's
	          // `libphonenumber` dismisses those preferring simply prepending
	          // national prefix followed by a " " character, this library
	          // looks if the national prefix could be formatted better.
	          var formattedNationalNumberWithNationalPrefix = formatNationalNumberUsingFormat(this.nationalNumberDigits, format, this.isInternational(), true, // Prepend national prefix.
	          this.metadata);

	          if (parseDigits(formattedNationalNumberWithNationalPrefix) === this.nationalPrefix + this.nationalNumberDigits) {
	            formattedNationalNumber = formattedNationalNumberWithNationalPrefix;
	          } else {
	            formattedNationalNumber = this.nationalPrefix + this.getSeparatorAfterNationalPrefix(format) + formattedNationalNumber;
	          }
	        } // formats national number (probably) without national prefix.
	        // Formatting a national number with national prefix could result in
	        // bugs when "area code" is "duplicated" during input:
	        // https://github.com/catamphetamine/libphonenumber-js/issues/318
	        // The "are all digits preserved" check fixes that type of bug.
	        // To leave the formatter in a consistent state


	        this.resetFormat();
	        this.chosenFormat = format; // Set `this.template` and `this.populatedNationalNumberTemplate`.

	        /* istanbul ignore else */

	        if (this.createFormattingTemplate(format)) {
	          // Populate `this.populatedNationalNumberTemplate` with phone number digits.
	          this.reformatNationalNumber();
	        } else {
	          // If the formatting template couldn't be created for a format,
	          // create it manually from the formatted phone number.
	          // This case doesn't ever happen with the current metadata.
	          this.template = this.getFullNumber(formattedNationalNumber).replace(/[\d\+]/g, DIGIT_PLACEHOLDER);
	          this.populatedNationalNumberTemplate = formattedNationalNumber;
	          this.populatedNationalNumberTemplatePosition = this.populatedNationalNumberTemplate.length - 1;
	        }

	        return formattedNationalNumber;
	      }
	    }
	  }, {
	    key: "getInternationalPrefix",
	    value: function getInternationalPrefix(options) {
	      return this.internationalPrefix ? options && options.spacing === false ? this.internationalPrefix : this.internationalPrefix + ' ' : '+';
	    } // Prepends `+CountryCode ` in case of an international phone number

	  }, {
	    key: "getFullNumber",
	    value: function getFullNumber(formattedNationalNumber) {
	      if (this.isInternational()) {
	        var prefix = this.getInternationalPrefix();

	        if (!this.countryCallingCode) {
	          return "".concat(prefix).concat(this.digits);
	        }

	        if (!formattedNationalNumber) {
	          return "".concat(prefix).concat(this.countryCallingCode);
	        }

	        return "".concat(prefix).concat(this.countryCallingCode, " ").concat(formattedNationalNumber);
	      }

	      return formattedNationalNumber;
	    }
	  }, {
	    key: "getNonFormattedNationalNumber",
	    value: function getNonFormattedNationalNumber() {
	      return this.nationalPrefix + (this.nationalPrefix && this.nationalNumberDigits && this.getSeparatorAfterNationalPrefix()) + this.nationalNumberDigits;
	    } // Extracts the country calling code from the beginning
	    // of the entered `national_number` (so far),
	    // and places the remaining input into the `national_number`.

	  }, {
	    key: "extractCountryCallingCode",
	    value: function extractCountryCallingCode$1() {
	      var _extractCountryCallin = extractCountryCallingCode('+' + this.digits, this.defaultCountry, this.defaultCallingCode, this.metadata.metadata),
	          countryCallingCode = _extractCountryCallin.countryCallingCode,
	          number = _extractCountryCallin.number;

	      if (!countryCallingCode) {
	        return;
	      }

	      this.nationalNumberDigits = number;
	      this.countryCallingCode = countryCallingCode;
	      this.metadata.chooseCountryByCountryCallingCode(countryCallingCode);
	      this.initializePhoneNumberFormatsForCountry();
	      this.resetFormat();
	      return this.metadata.hasSelectedNumberingPlan();
	    }
	  }, {
	    key: "extractNationalPrefix",
	    value: function extractNationalPrefix() {
	      this.nationalPrefix = '';

	      if (!this.metadata.hasSelectedNumberingPlan()) {
	        return;
	      } // Only strip national prefixes for non-international phone numbers
	      // because national prefixes can't be present in international phone numbers.
	      // While `parseNumber()` is forgiving is such cases, `AsYouType` is not.


	      var _stripNationalPrefixA = stripNationalPrefixAndCarrierCode(this.nationalNumberDigits, this.metadata),
	          nationalNumber = _stripNationalPrefixA.nationalNumber,
	          carrierCode = _stripNationalPrefixA.carrierCode; // Sometimes `stripNationalPrefixAndCarrierCode()` won't actually
	      // strip national prefix and will instead prepend some digits to the `number`:
	      // for example, when number `2345678` is passed with `VI` country selected,
	      // it will return `{ number: "3402345678" }`, because `340` area code is prepended.
	      // So check if the `nationalNumber` is actually at the end of `this.nationalNumberDigits`.


	      if (nationalNumber) {
	        var index = this.nationalNumberDigits.indexOf(nationalNumber);

	        if (index < 0 || index !== this.nationalNumberDigits.length - nationalNumber.length) {
	          return;
	        }
	      }

	      if (carrierCode) {
	        this.carrierCode = carrierCode;
	      }

	      this.nationalPrefix = this.nationalNumberDigits.slice(0, this.nationalNumberDigits.length - nationalNumber.length);
	      this.nationalNumberDigits = nationalNumber;
	      return this.nationalPrefix;
	    } // isPossibleNumber(number) {
	    // 	switch (checkNumberLengthForType(number, undefined, this.metadata)) {
	    // 		case 'IS_POSSIBLE':
	    // 			return true
	    // 		// case 'IS_POSSIBLE_LOCAL_ONLY':
	    // 		// 	return !this.isInternational()
	    // 		default:
	    // 			return false
	    // 	}
	    // }

	  }, {
	    key: "isCountryCallingCodeAmbiguous",
	    value: function isCountryCallingCodeAmbiguous() {
	      var countryCodes = this.metadata.getCountryCodesForCallingCode(this.countryCallingCode);
	      return countryCodes && countryCodes.length > 1;
	    }
	  }, {
	    key: "createFormattingTemplate",
	    value: function createFormattingTemplate(format) {
	      // The formatter doesn't format numbers when numberPattern contains '|', e.g.
	      // (20|3)\d{4}. In those cases we quickly return.
	      // (Though there's no such format in current metadata)

	      /* istanbul ignore if */
	      if ( format.pattern().indexOf('|') >= 0) {
	        return;
	      } // Get formatting template for this phone number format


	      var template = this.getTemplateForNumberFormatPattern(format, this.nationalPrefix); // If the national number entered is too long
	      // for any phone number format, then abort.

	      if (!template) {
	        return;
	      }

	      this.template = template;
	      this.populatedNationalNumberTemplate = template; // For convenience, the public `.template` property
	      // contains the whole international number
	      // if the phone number being input is international:
	      // 'x' for the '+' sign, 'x'es for the country phone code,
	      // a spacebar and then the template for the formatted national number.

	      if (this.isInternational()) {
	        this.template = this.getInternationalPrefix().replace(/[\d\+]/g, DIGIT_PLACEHOLDER) + repeat(DIGIT_PLACEHOLDER, this.countryCallingCode.length) + ' ' + template;
	      }

	      return this.template;
	    }
	    /**
	     * Generates formatting template for a national phone number,
	     * optionally containing a national prefix, for a format.
	     * @param  {Format} format
	     * @param  {string} nationalPrefix
	     * @return {string}
	     */

	  }, {
	    key: "getTemplateForNumberFormatPattern",
	    value: function getTemplateForNumberFormatPattern(format, nationalPrefix) {
	      var pattern = format.pattern();
	      /* istanbul ignore else */

	      {
	        pattern = pattern // Replace anything in the form of [..] with \d
	        .replace(CREATE_CHARACTER_CLASS_PATTERN(), '\\d') // Replace any standalone digit (not the one in `{}`) with \d
	        .replace(CREATE_STANDALONE_DIGIT_PATTERN(), '\\d');
	      } // Generate a dummy national number (consisting of `9`s)
	      // that fits this format's `pattern`.
	      //
	      // This match will always succeed,
	      // because the "longest dummy phone number"
	      // has enough length to accomodate any possible
	      // national phone number format pattern.
	      //


	      var digits = LONGEST_DUMMY_PHONE_NUMBER.match(pattern)[0]; // If the national number entered is too long
	      // for any phone number format, then abort.

	      if (this.nationalNumberDigits.length > digits.length) {
	        return;
	      } // Get a formatting template which can be used to efficiently format
	      // a partial number where digits are added one by one.
	      // Below `strictPattern` is used for the
	      // regular expression (with `^` and `$`).
	      // This wasn't originally in Google's `libphonenumber`
	      // and I guess they don't really need it
	      // because they're not using "templates" to format phone numbers
	      // but I added `strictPattern` after encountering
	      // South Korean phone number formatting bug.
	      //
	      // Non-strict regular expression bug demonstration:
	      //
	      // this.nationalNumberDigits : `111111111` (9 digits)
	      //
	      // pattern : (\d{2})(\d{3,4})(\d{4})
	      // format : `$1 $2 $3`
	      // digits : `9999999999` (10 digits)
	      //
	      // '9999999999'.replace(new RegExp(/(\d{2})(\d{3,4})(\d{4})/g), '$1 $2 $3') = "99 9999 9999"
	      //
	      // template : xx xxxx xxxx
	      //
	      // But the correct template in this case is `xx xxx xxxx`.
	      // The template was generated incorrectly because of the
	      // `{3,4}` variability in the `pattern`.
	      //
	      // The fix is, if `this.nationalNumberDigits` has already sufficient length
	      // to satisfy the `pattern` completely then `this.nationalNumberDigits`
	      // is used instead of `digits`.


	      var strictPattern = new RegExp('^' + pattern + '$');
	      var nationalNumberDummyDigits = this.nationalNumberDigits.replace(/\d/g, DUMMY_DIGIT); // If `this.nationalNumberDigits` has already sufficient length
	      // to satisfy the `pattern` completely then use it
	      // instead of `digits`.

	      if (strictPattern.test(nationalNumberDummyDigits)) {
	        digits = nationalNumberDummyDigits;
	      }

	      var numberFormat = this.getFormatFormat(format);
	      var includesNationalPrefix;

	      if (nationalPrefix) {
	        if (format.nationalPrefixFormattingRule()) {
	          var numberFormatWithNationalPrefix = numberFormat.replace(FIRST_GROUP_PATTERN, format.nationalPrefixFormattingRule());

	          if (parseDigits(numberFormatWithNationalPrefix) === nationalPrefix + parseDigits(numberFormat)) {
	            numberFormat = numberFormatWithNationalPrefix;
	            includesNationalPrefix = true;
	            var i = nationalPrefix.length;

	            while (i > 0) {
	              numberFormat = numberFormat.replace(/\d/, DIGIT_PLACEHOLDER);
	              i--;
	            }
	          }
	        }
	      } // Generate formatting template for this phone number format.


	      var template = digits // Format the dummy phone number according to the format.
	      .replace(new RegExp(pattern), numberFormat) // Replace each dummy digit with a DIGIT_PLACEHOLDER.
	      .replace(new RegExp(DUMMY_DIGIT, 'g'), DIGIT_PLACEHOLDER);

	      if (nationalPrefix) {
	        if (!includesNationalPrefix) {
	          // Prepend national prefix to the template manually.
	          template = repeat(DIGIT_PLACEHOLDER, nationalPrefix.length) + this.getSeparatorAfterNationalPrefix(format) + template;
	        }
	      }

	      return template;
	    }
	  }, {
	    key: "formatNextNationalNumberDigits",
	    value: function formatNextNationalNumberDigits(digits) {
	      // Using `.split('')` to iterate through a string here
	      // to avoid requiring `Symbol.iterator` polyfill.
	      // `.split('')` is generally not safe for Unicode,
	      // but in this particular case for `digits` it is safe.
	      // for (const digit of digits)
	      for (var _iterator3 = digits.split(''), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _iterator3[Symbol.iterator]();;) {
	        var _ref3;

	        if (_isArray3) {
	          if (_i3 >= _iterator3.length) break;
	          _ref3 = _iterator3[_i3++];
	        } else {
	          _i3 = _iterator3.next();
	          if (_i3.done) break;
	          _ref3 = _i3.value;
	        }

	        var digit = _ref3;

	        // If there is room for more digits in current `template`,
	        // then set the next digit in the `template`,
	        // and return the formatted digits so far.
	        // If more digits are entered than the current format could handle.
	        if (this.populatedNationalNumberTemplate.slice(this.populatedNationalNumberTemplatePosition + 1).search(DIGIT_PLACEHOLDER_MATCHER) < 0) {
	          // Reset the format.
	          this.resetFormat();
	          return;
	        }

	        this.populatedNationalNumberTemplatePosition = this.populatedNationalNumberTemplate.search(DIGIT_PLACEHOLDER_MATCHER);
	        this.populatedNationalNumberTemplate = this.populatedNationalNumberTemplate.replace(DIGIT_PLACEHOLDER_MATCHER, digit);
	      } // Return the formatted phone number so far.


	      return cutAndStripNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1); // The old way which was good for `input-format` but is not so good
	      // for `react-phone-number-input`'s default input (`InputBasic`).
	      // return closeNonPairedParens(this.populatedNationalNumberTemplate, this.populatedNationalNumberTemplatePosition + 1)
	      // 	.replace(new RegExp(DIGIT_PLACEHOLDER, 'g'), ' ')
	    }
	  }, {
	    key: "getFormatFormat",
	    value: function getFormatFormat(format) {
	      if (this.isInternational()) {
	        return applyInternationalSeparatorStyle(format.internationalFormat());
	      }

	      return format.format();
	    } // Determines the country of the phone number
	    // entered so far based on the country phone code
	    // and the national phone number.

	  }, {
	    key: "determineTheCountry",
	    value: function determineTheCountry() {
	      this.country = findCountryCode(this.isInternational() ? this.countryCallingCode : this.defaultCallingCode, this.nationalNumberDigits, this.metadata);
	    }
	    /**
	     * Returns an instance of `PhoneNumber` class.
	     * Will return `undefined` if no national (significant) number
	     * digits have been entered so far, or if no `defaultCountry` has been
	     * set and the user enters a phone number not in international format.
	     */

	  }, {
	    key: "getNumber",
	    value: function getNumber() {
	      if (this.isInternational()) {
	        if (!this.countryCallingCode) {
	          return;
	        }
	      } else {
	        if (!this.country && !this.defaultCallingCode) {
	          return;
	        }
	      }

	      if (!this.nationalNumberDigits) {
	        return undefined;
	      }

	      var countryCode = this.getCountry();
	      var callingCode = this.getCountryCallingCode() || this.defaultCallingCode;
	      var nationalNumber = this.nationalNumberDigits;
	      var carrierCode = this.carrierCode; // When an international number without a leading `+` has been autocorrected,
	      // extract country calling code, because normally it's only extracted
	      // for international numbers with a leading `+`.
	      // Could also just use `parsePhoneNumberFromString()` here
	      // instead of hacking around this single case.

	      if (!this.isInternational() && this.nationalNumberDigits === this.digits) {
	        var _extractCountryCallin2 = extractCountryCallingCodeFromInternationalNumberWithoutPlusSign(this.digits, countryCode, callingCode, this.metadata.metadata),
	            countryCallingCode = _extractCountryCallin2.countryCallingCode,
	            number = _extractCountryCallin2.number;

	        if (countryCallingCode) {
	          var _stripNationalPrefixA2 = stripNationalPrefixAndCarrierCodeFromCompleteNumber(number, this.metadata),
	              shorterNationalNumber = _stripNationalPrefixA2.nationalNumber,
	              newCarrierCode = _stripNationalPrefixA2.carrierCode;

	          nationalNumber = shorterNationalNumber;
	          carrierCode = newCarrierCode;
	        }
	      }

	      var phoneNumber = new PhoneNumber(countryCode || callingCode, nationalNumber, this.metadata.metadata);

	      if (carrierCode) {
	        phoneNumber.carrierCode = carrierCode;
	      } // Phone number extensions are not supported by "As You Type" formatter.


	      return phoneNumber;
	    }
	    /**
	     * Returns `true` if the phone number is "possible".
	     * Is just a shortcut for `PhoneNumber.isPossible()`.
	     * @return {boolean}
	     */

	  }, {
	    key: "isPossible",
	    value: function isPossible() {
	      var phoneNumber = this.getNumber();

	      if (!phoneNumber) {
	        return false;
	      }

	      return phoneNumber.isPossible();
	    }
	    /**
	     * Returns `true` if the phone number is "valid".
	     * Is just a shortcut for `PhoneNumber.isValid()`.
	     * @return {boolean}
	     */

	  }, {
	    key: "isValid",
	    value: function isValid() {
	      var phoneNumber = this.getNumber();

	      if (!phoneNumber) {
	        return false;
	      }

	      return phoneNumber.isValid();
	    }
	    /**
	     * @deprecated
	     * This method is used in `react-phone-number-input/source/input-control.js`
	     * in versions before `3.0.16`.
	     */

	  }, {
	    key: "getNationalNumber",
	    value: function getNationalNumber() {
	      return this.nationalNumberDigits;
	    }
	  }, {
	    key: "getNonFormattedTemplate",
	    value: function getNonFormattedTemplate() {
	      return this.getFullNumber(this.getNonFormattedNationalNumber()).replace(/[\+\d]/g, DIGIT_PLACEHOLDER);
	    }
	    /**
	     * Returns formatted phone number template.
	     * @return {string} [template]
	     */

	  }, {
	    key: "getTemplate",
	    value: function getTemplate() {
	      if (!this.template) {
	        return this.getNonFormattedTemplate();
	      }

	      var index = -1;
	      var i = 0;

	      while (i < (this.isInternational() ? this.getInternationalPrefix({
	        spacing: false
	      }).length : 0) + this.digits.length) {
	        index = this.template.indexOf(DIGIT_PLACEHOLDER, index + 1);
	        i++;
	      }

	      return cutAndStripNonPairedParens(this.template, index + 1);
	    }
	  }]);

	  return AsYouType;
	}();
	function stripNonPairedParens(string) {
	  var dangling_braces = [];
	  var i = 0;

	  while (i < string.length) {
	    if (string[i] === '(') {
	      dangling_braces.push(i);
	    } else if (string[i] === ')') {
	      dangling_braces.pop();
	    }

	    i++;
	  }

	  var start = 0;
	  var cleared_string = '';
	  dangling_braces.push(string.length);

	  for (var _i4 = 0, _dangling_braces = dangling_braces; _i4 < _dangling_braces.length; _i4++) {
	    var index = _dangling_braces[_i4];
	    cleared_string += string.slice(start, index);
	    start = index + 1;
	  }

	  return cleared_string;
	}
	function cutAndStripNonPairedParens(string, cutBeforeIndex) {
	  if (string[cutBeforeIndex] === ')') {
	    cutBeforeIndex++;
	  }

	  return stripNonPairedParens(string.slice(0, cutBeforeIndex));
	}
	// http://stackoverflow.com/questions/202605/repeat-string-javascript

	function repeat(string, times) {
	  if (times < 1) {
	    return '';
	  }

	  var result = '';

	  while (times > 1) {
	    if (times & 1) {
	      result += string;
	    }

	    times >>= 1;
	    string += string;
	  }

	  return result + string;
	}
	/**
	 * Extracts formatted phone number from text (if there's any).
	 * @param  {string} text
	 * @return {string} [formattedPhoneNumber]
	 */

	function extractFormattedPhoneNumber$1(text) {
	  // Attempt to extract a possible number from the string passed in.
	  var startsAt = text.search(VALID_PHONE_NUMBER$2);

	  if (startsAt < 0) {
	    return;
	  } // Trim everything to the left of the phone number.


	  text = text.slice(startsAt); // Trim the `+`.

	  var hasPlus;

	  if (text[0] === '+') {
	    hasPlus = true;
	    text = text.slice('+'.length);
	  } // Trim everything to the right of the phone number.


	  text = text.replace(AFTER_PHONE_NUMBER_DIGITS_END_PATTERN, ''); // Re-add the previously trimmed `+`.

	  if (hasPlus) {
	    text = '+' + text;
	  }

	  return text;
	}

	// Deprecated.
	function PhoneNumberSearch$1(text, options)
	{
		PhoneNumberSearch.call(this, text, options, metadata);
	}

	// Deprecated.
	PhoneNumberSearch$1.prototype = Object.create(PhoneNumberSearch.prototype, {});
	PhoneNumberSearch$1.prototype.constructor = PhoneNumberSearch$1;

	function PhoneNumberMatcher$1(text, options)
	{
		PhoneNumberMatcher.call(this, text, options, metadata);
	}

	PhoneNumberMatcher$1.prototype = Object.create(PhoneNumberMatcher.prototype, {});
	PhoneNumberMatcher$1.prototype.constructor = PhoneNumberMatcher$1;

	function AsYouType$1(country)
	{
		AsYouType.call(this, country, metadata);
	}

	AsYouType$1.prototype = Object.create(AsYouType.prototype, {});
	AsYouType$1.prototype.constructor = AsYouType$1;

	var isRequired = function isRequired(value) {
	  if (value != null && value !== '') {
	    return value;
	  }

	  throw new Error('Required');
	};

	var isStateRequiredForCountry = function isStateRequiredForCountry(getStates, getCountry) {
	  return function (value) {
	    var states = getStates();
	    var country = getCountry();

	    if (states[country] && Object.keys(states[country]).length === 0 || value != null && value !== '') {
	      return value;
	    }

	    throw new Error('Required');
	  };
	};
	//# sourceMappingURL=index.esm.js.map

	const useStyles$7 = makeStyles$1((theme) => ({
	    form: {
	        paddingTop: theme.spacing(2),
	        paddingBottom: theme.spacing(2),
	    },
	    buttons: {
	        '& button': {
	            marginRight: theme.spacing(2),
	        },
	    },
	}));
	const ShippingForm = ({ width, height, setAddress, setUser, setPayment, setFormAwait, user, order, countryOptions, stateOptions, isActive, isLoading, shippingIcon, shippingTitle, nativeSelects, }) => {
	    const classes = useStyles$7();
	    const addressMS = useMidstream({
	        line1: [isRequired],
	        line2: [],
	        city: [isRequired],
	        postalCode: [isRequired],
	        state: [
	            isStateRequiredForCountry(() => stateOptions, () => order.shippingAddress.country),
	        ],
	        country: [isRequired]
	    }, {
	        dst: setAddress,
	    });
	    const { setLine1, setLine2, setCity, setPostalCode, setState, setCountry, } = addressMS;
	    const addressErr = addressMS.err;
	    const addressRun = addressMS.runAll;
	    const submit = React.useMemo(() => async () => {
	        let ret = await addressRun();
	        if (ret instanceof Error) {
	            console.log('shipping form error', ret);
	            throw ret;
	        }
	    }, []);
	    if (isActive) {
	        raf_1(() => {
	            setFormAwait(submit);
	        });
	    }
	    return (React__default.createElement("div", { className: 'shipping' },
	        React__default.createElement(StyledGrid, { container: true },
	            React__default.createElement(StyledGrid, { item: true, xs: 12, className: 'shipping-header' },
	                React__default.createElement(StyledGrid, { container: true, spacing: 1, alignItems: 'center' },
	                    React__default.createElement(StyledGrid, { item: true, className: 'shipping-icon' }, shippingIcon || React__default.createElement(LocalShippingIcon, { style: { fontSize: '2rem' } })),
	                    React__default.createElement(StyledGrid, { item: true, className: 'shipping-title' }, shippingTitle || (React__default.createElement(Typography$1, { variant: 'h6' }, "Shipping Information")))))),
	        React__default.createElement(StyledGrid, { container: true, className: classnames(classes.form, 'shipping-body'), spacing: 3 },
	            React__default.createElement(StyledGrid, { item: true, xs: 12, sm: 8, className: 'shipping-line1' },
	                React__default.createElement(MUIText, { fullWidth: true, label: 'Address', variant: undefined, size: 'medium', value: order.shippingAddress.line1, setValue: setLine1, error: addressErr.line1 })),
	            React__default.createElement(StyledGrid, { item: true, xs: 12, sm: 4, className: 'shipping-line2' },
	                React__default.createElement(MUIText, { fullWidth: true, label: 'Suite', variant: undefined, size: 'medium', value: order.shippingAddress.line2, setValue: setLine2, error: addressErr.line2 })),
	            React__default.createElement(StyledGrid, { item: true, xs: 12, sm: 6, className: 'shipping-country' },
	                React__default.createElement(MUIText, { fullWidth: true, select: true, options: countryOptions, placeholder: 'Select a Country', label: 'Country', variant: undefined, size: 'medium', value: order.shippingAddress.country, setValue: setCountry, error: addressErr.country, SelectProps: { native: !!nativeSelects } })),
	            React__default.createElement(StyledGrid, { item: true, xs: 12, sm: 6, className: 'shipping-state' },
	                React__default.createElement(MUIText, { fullWidth: true, select: true, options: stateOptions[order.shippingAddress.country], label: 'State', placeholder: 'Select a State', variant: undefined, size: 'medium', value: order.shippingAddress.state, setValue: setState, error: addressErr.state, SelectProps: { native: !!nativeSelects } })),
	            React__default.createElement(StyledGrid, { item: true, xs: 12, sm: 7, className: 'shipping-city' },
	                React__default.createElement(MUIText, { fullWidth: true, label: 'City', variant: undefined, size: 'medium', value: order.shippingAddress.city, setValue: setCity, error: addressErr.city })),
	            React__default.createElement(StyledGrid, { item: true, xs: 12, sm: 5, className: 'shipping-postal-code' },
	                React__default.createElement(MUIText, { fullWidth: true, label: 'Postal Code', variant: undefined, size: 'medium', value: order.shippingAddress.postalCode, setValue: setPostalCode, error: addressErr.postalCode })))));
	};

	var Lock = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _react = interopRequireDefault(React__default);

	var _createSvgIcon = interopRequireDefault(createSvgIcon_1);

	var _default = (0, _createSvgIcon.default)(_react.default.createElement("path", {
	  d: "M18 8h-1V6c0-2.76-2.24-5-5-5S7 3.24 7 6v2H6c-1.1 0-2 .9-2 2v10c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V10c0-1.1-.9-2-2-2zm-6 9c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zm3.1-9H8.9V6c0-1.71 1.39-3.1 3.1-3.1 1.71 0 3.1 1.39 3.1 3.1v2z"
	}), 'Lock');

	exports.default = _default;
	});

	var LockIcon = unwrapExports(Lock);

	var DEFAULT_CVC_LENGTH = 3;
	var DEFAULT_ZIP_LENGTH = 5;
	var DEFAULT_CARD_FORMAT = /(\d{1,4})/g;
	var CARD_TYPES = [{
	  displayName: 'Visa',
	  type: 'visa',
	  format: DEFAULT_CARD_FORMAT,
	  startPattern: /^4/,
	  gaps: [4, 8, 12],
	  lengths: [16, 18, 19],
	  code: {
	    name: 'CVV',
	    length: 3
	  }
	}, {
	  displayName: 'Mastercard',
	  type: 'mastercard',
	  format: DEFAULT_CARD_FORMAT,
	  startPattern: /^(5[1-5]|677189)|^(222[1-9]|2[3-6]\d{2}|27[0-1]\d|2720)/,
	  gaps: [4, 8, 12],
	  lengths: [16],
	  code: {
	    name: 'CVC',
	    length: 3
	  }
	}, {
	  displayName: 'American Express',
	  type: 'amex',
	  format: /(\d{1,4})(\d{1,6})?(\d{1,5})?/,
	  startPattern: /^3[47]/,
	  gaps: [4, 10],
	  lengths: [15],
	  code: {
	    name: 'CID',
	    length: 4
	  }
	}, {
	  displayName: 'Diners Club',
	  type: 'dinersclub',
	  format: DEFAULT_CARD_FORMAT,
	  startPattern: /^(36|38|30[0-5])/,
	  gaps: [4, 10],
	  lengths: [14, 16, 19],
	  code: {
	    name: 'CVV',
	    length: 3
	  }
	}, {
	  displayName: 'Discover',
	  type: 'discover',
	  format: DEFAULT_CARD_FORMAT,
	  startPattern: /^(6011|65|64[4-9]|622)/,
	  gaps: [4, 8, 12],
	  lengths: [16, 19],
	  code: {
	    name: 'CID',
	    length: 3
	  }
	}, {
	  displayName: 'JCB',
	  type: 'jcb',
	  format: DEFAULT_CARD_FORMAT,
	  startPattern: /^35/,
	  gaps: [4, 8, 12],
	  lengths: [16, 17, 18, 19],
	  code: {
	    name: 'CVV',
	    length: 3
	  }
	}, {
	  displayName: 'UnionPay',
	  type: 'unionpay',
	  format: DEFAULT_CARD_FORMAT,
	  startPattern: /^62/,
	  gaps: [4, 8, 12],
	  lengths: [14, 15, 16, 17, 18, 19],
	  code: {
	    name: 'CVN',
	    length: 3
	  }
	}, {
	  displayName: 'Maestro',
	  type: 'maestro',
	  format: DEFAULT_CARD_FORMAT,
	  startPattern: /^(5018|5020|5038|6304|6703|6708|6759|676[1-3])/,
	  gaps: [4, 8, 12],
	  lengths: [12, 13, 14, 15, 16, 17, 18, 19],
	  code: {
	    name: 'CVC',
	    length: 3
	  }
	}, {
	  displayName: 'Elo',
	  type: 'elo',
	  format: DEFAULT_CARD_FORMAT,
	  startPattern: /^(4011(78|79)|43(1274|8935)|45(1416|7393|763(1|2))|50(4175|6699|67[0-7][0-9]|9000)|627780|63(6297|6368)|650(03([^4])|04([0-9])|05(0|1)|4(0[5-9]|3[0-9]|8[5-9]|9[0-9])|5([0-2][0-9]|3[0-8])|9([2-6][0-9]|7[0-8])|541|700|720|901)|651652|655000|655021)/,
	  gaps: [4, 8, 12],
	  lengths: [16],
	  code: {
	    name: 'CVE',
	    length: 3
	  }
	}, {
	  displayName: 'Hipercard',
	  type: 'hipercard',
	  format: DEFAULT_CARD_FORMAT,
	  startPattern: /^(384100|384140|384160|606282|637095|637568|60(?!11))/,
	  gaps: [4, 8, 12],
	  lengths: [16],
	  code: {
	    name: 'CVC',
	    length: 3
	  }
	}];
	var getCardTypeByValue = function getCardTypeByValue(value) {
	  return CARD_TYPES.filter(function (cardType) {
	    return cardType.startPattern.test(value);
	  })[0];
	};
	var getCardTypeByType = function getCardTypeByType(type) {
	  return CARD_TYPES.filter(function (cardType) {
	    return cardType.type === type;
	  })[0];
	};

	var cardTypes = /*#__PURE__*/Object.freeze({
	  DEFAULT_CVC_LENGTH: DEFAULT_CVC_LENGTH,
	  DEFAULT_ZIP_LENGTH: DEFAULT_ZIP_LENGTH,
	  DEFAULT_CARD_FORMAT: DEFAULT_CARD_FORMAT,
	  CARD_TYPES: CARD_TYPES,
	  getCardTypeByValue: getCardTypeByValue,
	  getCardTypeByType: getCardTypeByType
	});

	var MONTH_REGEX = /(0[1-9]|1[0-2])/;
	var EMPTY_CARD_NUMBER = 'Enter a card number';
	var EMPTY_EXPIRY_DATE = 'Enter an expiry date';
	var EMPTY_CVC = 'Enter a CVC';
	var EMPTY_ZIP = 'Enter a ZIP code';
	var INVALID_CARD_NUMBER = 'Card number is invalid';
	var INVALID_EXPIRY_DATE = 'Expiry date is invalid';
	var INVALID_CVC = 'CVC is invalid';
	var MONTH_OUT_OF_RANGE = 'Expiry month must be between 01 and 12';
	var YEAR_OUT_OF_RANGE = 'Expiry year cannot be in the past';
	var DATE_OUT_OF_RANGE = 'Expiry date cannot be in the past';
	var hasCardNumberReachedMaxLength = function hasCardNumberReachedMaxLength(currentValue) {
	  var cardType = getCardTypeByValue(currentValue);
	  return cardType && currentValue.length >= cardType.lengths[cardType.lengths.length - 1];
	};
	var isNumeric = function isNumeric(e) {
	  return /^\d*$/.test(e.key);
	};
	var validateLuhn = function validateLuhn(cardNumber) {
	  return cardNumber.split('').reverse().map(function (digit) {
	    return parseInt(digit, 10);
	  }).map(function (digit, idx) {
	    return idx % 2 ? digit * 2 : digit;
	  }).map(function (digit) {
	    return digit > 9 ? digit % 10 + 1 : digit;
	  }).reduce(function (accum, digit) {
	    return accum += digit;
	  }) % 10 === 0;
	};
	var getCardNumberError = function getCardNumberError(cardNumber, cardNumberValidator) {
	  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
	      _ref$errorMessages = _ref.errorMessages,
	      errorMessages = _ref$errorMessages === void 0 ? {} : _ref$errorMessages;

	  if (!cardNumber) {
	    return errorMessages.emptyCardNumber || EMPTY_CARD_NUMBER;
	  }

	  var rawCardNumber = cardNumber.replace(/\s/g, '');
	  var cardType = getCardTypeByValue(rawCardNumber);

	  if (cardType && cardType.lengths) {
	    var doesCardNumberMatchLength = cardType.lengths.includes(rawCardNumber.length);

	    if (doesCardNumberMatchLength) {
	      var isLuhnValid = validateLuhn(rawCardNumber);

	      if (isLuhnValid) {
	        if (cardNumberValidator) {
	          return cardNumberValidator({
	            cardNumber: rawCardNumber,
	            cardType: cardType,
	            errorMessages: errorMessages
	          });
	        }

	        return;
	      }
	    }
	  }

	  return errorMessages.invalidCardNumber || INVALID_CARD_NUMBER;
	};
	var getExpiryDateError = function getExpiryDateError(expiryDate, expiryValidator) {
	  var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
	      _ref2$errorMessages = _ref2.errorMessages,
	      errorMessages = _ref2$errorMessages === void 0 ? {} : _ref2$errorMessages;

	  if (!expiryDate) {
	    return errorMessages.emptyExpiryDate || EMPTY_EXPIRY_DATE;
	  }

	  var rawExpiryDate = expiryDate.replace(' / ', '').replace('/', '');

	  if (rawExpiryDate.length === 4) {
	    var month = rawExpiryDate.slice(0, 2);
	    var year = "20".concat(rawExpiryDate.slice(2, 4));

	    if (!MONTH_REGEX.test(month)) {
	      return errorMessages.monthOutOfRange || MONTH_OUT_OF_RANGE;
	    }

	    if (parseInt(year) < new Date().getFullYear()) {
	      return errorMessages.yearOutOfRange || YEAR_OUT_OF_RANGE;
	    }

	    if (parseInt(year) === new Date().getFullYear() && parseInt(month) < new Date().getMonth() + 1) {
	      return errorMessages.dateOutOfRange || DATE_OUT_OF_RANGE;
	    }

	    if (expiryValidator) {
	      return expiryValidator({
	        expiryDate: {
	          month: month,
	          year: year
	        },
	        errorMessages: errorMessages
	      });
	    }

	    return;
	  }

	  return errorMessages.invalidExpiryDate || INVALID_EXPIRY_DATE;
	};
	var getCVCError = function getCVCError(cvc, cvcValidator) {
	  var _ref3 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
	      cardType = _ref3.cardType,
	      _ref3$errorMessages = _ref3.errorMessages,
	      errorMessages = _ref3$errorMessages === void 0 ? {} : _ref3$errorMessages;

	  if (!cvc) {
	    return errorMessages.emptyCVC || EMPTY_CVC;
	  }

	  if (cvc.length < 3) {
	    return errorMessages.invalidCVC || INVALID_CVC;
	  }

	  if (cardType && cvc.length !== cardType.code.length) {
	    return errorMessages.invalidCVC || INVALID_CVC;
	  }

	  if (cvcValidator) {
	    return cvcValidator({
	      cvc: cvc,
	      cardType: cardType,
	      errorMessages: errorMessages
	    });
	  }

	  return;
	};
	var getZIPError = function getZIPError(zip) {
	  var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	      _ref4$errorMessages = _ref4.errorMessages,
	      errorMessages = _ref4$errorMessages === void 0 ? {} : _ref4$errorMessages;

	  if (!zip) {
	    return errorMessages.emptyZIP || EMPTY_ZIP;
	  }

	  return;
	};

	var validator = /*#__PURE__*/Object.freeze({
	  EMPTY_CARD_NUMBER: EMPTY_CARD_NUMBER,
	  EMPTY_EXPIRY_DATE: EMPTY_EXPIRY_DATE,
	  EMPTY_CVC: EMPTY_CVC,
	  EMPTY_ZIP: EMPTY_ZIP,
	  INVALID_CARD_NUMBER: INVALID_CARD_NUMBER,
	  INVALID_EXPIRY_DATE: INVALID_EXPIRY_DATE,
	  INVALID_CVC: INVALID_CVC,
	  MONTH_OUT_OF_RANGE: MONTH_OUT_OF_RANGE,
	  YEAR_OUT_OF_RANGE: YEAR_OUT_OF_RANGE,
	  DATE_OUT_OF_RANGE: DATE_OUT_OF_RANGE,
	  hasCardNumberReachedMaxLength: hasCardNumberReachedMaxLength,
	  isNumeric: isNumeric,
	  validateLuhn: validateLuhn,
	  getCardNumberError: getCardNumberError,
	  getExpiryDateError: getExpiryDateError,
	  getCVCError: getCVCError,
	  getZIPError: getZIPError
	});

	function _defineProperty$4(obj, key, value) {
	  if (key in obj) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	function _objectSpread$6(target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i] != null ? arguments[i] : {};
	    var ownKeys = Object.keys(source);

	    if (typeof Object.getOwnPropertySymbols === 'function') {
	      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
	        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
	      }));
	    }

	    ownKeys.forEach(function (key) {
	      _defineProperty$4(target, key, source[key]);
	    });
	  }

	  return target;
	}

	function _objectWithoutPropertiesLoose$3(source, excluded) {
	  if (source == null) return {};
	  var target = {};
	  var sourceKeys = Object.keys(source);
	  var key, i;

	  for (i = 0; i < sourceKeys.length; i++) {
	    key = sourceKeys[i];
	    if (excluded.indexOf(key) >= 0) continue;
	    target[key] = source[key];
	  }

	  return target;
	}

	function _objectWithoutProperties$3(source, excluded) {
	  if (source == null) return {};

	  var target = _objectWithoutPropertiesLoose$3(source, excluded);

	  var key, i;

	  if (Object.getOwnPropertySymbols) {
	    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

	    for (i = 0; i < sourceSymbolKeys.length; i++) {
	      key = sourceSymbolKeys[i];
	      if (excluded.indexOf(key) >= 0) continue;
	      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
	      target[key] = source[key];
	    }
	  }

	  return target;
	}

	function _slicedToArray$3(arr, i) {
	  return _arrayWithHoles$3(arr) || _iterableToArrayLimit$3(arr, i) || _nonIterableRest$3();
	}

	function _toArray$2(arr) {
	  return _arrayWithHoles$3(arr) || _iterableToArray$2(arr) || _nonIterableRest$3();
	}

	function _arrayWithHoles$3(arr) {
	  if (Array.isArray(arr)) return arr;
	}

	function _iterableToArray$2(iter) {
	  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
	}

	function _iterableToArrayLimit$3(arr, i) {
	  var _arr = [];
	  var _n = true;
	  var _d = false;
	  var _e = undefined;

	  try {
	    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
	      _arr.push(_s.value);

	      if (i && _arr.length === i) break;
	    }
	  } catch (err) {
	    _d = true;
	    _e = err;
	  } finally {
	    try {
	      if (!_n && _i["return"] != null) _i["return"]();
	    } finally {
	      if (_d) throw _e;
	    }
	  }

	  return _arr;
	}

	function _nonIterableRest$3() {
	  throw new TypeError("Invalid attempt to destructure non-iterable instance");
	}

	var formatCardNumber = function formatCardNumber(cardNumber) {
	  var cardType = getCardTypeByValue(cardNumber);
	  if (!cardType) return (cardNumber.match(/\d+/g) || []).join('');
	  var format = cardType.format;

	  if (format && format.global) {
	    return (cardNumber.match(format) || []).join(' ');
	  }

	  if (format) {
	    var execResult = format.exec(cardNumber.split(' ').join(''));

	    if (execResult) {
	      return execResult.splice(1, 3).filter(function (x) {
	        return x;
	      }).join(' ');
	    }
	  }

	  return cardNumber;
	};
	var formatExpiry = function formatExpiry(event) {
	  var eventData = event.nativeEvent && event.nativeEvent.data;
	  var prevExpiry = event.target.value.split(' / ').join('/');
	  if (!prevExpiry) return null;
	  var expiry = prevExpiry;

	  if (/^[2-9]$/.test(expiry)) {
	    expiry = "0".concat(expiry);
	  }

	  if (prevExpiry.length === 2 && +prevExpiry > 12) {
	    var _prevExpiry$split = prevExpiry.split(''),
	        _prevExpiry$split2 = _toArray$2(_prevExpiry$split),
	        head = _prevExpiry$split2[0],
	        tail = _prevExpiry$split2.slice(1);

	    expiry = "0".concat(head, "/").concat(tail.join(''));
	  }

	  if (/^1[/-]$/.test(expiry)) {
	    return "01 / ";
	  }

	  expiry = expiry.match(/(\d{1,2})/g) || [];

	  if (expiry.length === 1) {
	    if (!eventData && prevExpiry.includes('/')) {
	      return expiry[0];
	    }

	    if (/\d{2}/.test(expiry)) {
	      return "".concat(expiry[0], " / ");
	    }
	  }

	  if (expiry.length > 2) {
	    var _ref = expiry.join('').match(/^(\d{2}).*(\d{2})$/) || [],
	        _ref2 = _slicedToArray$3(_ref, 3),
	        _ref2$ = _ref2[1],
	        month = _ref2$ === void 0 ? null : _ref2$,
	        _ref2$2 = _ref2[2],
	        year = _ref2$2 === void 0 ? null : _ref2$2;

	    return [month, year].join(' / ');
	  }

	  return expiry.join(' / ');
	};

	var formatter = /*#__PURE__*/Object.freeze({
	  formatCardNumber: formatCardNumber,
	  formatExpiry: formatExpiry
	});

	var BACKSPACE_KEY_CODE = 'Backspace';
	var ENTER_KEY_CODE = 'Enter';
	var isHighlighted = function isHighlighted() {
	  return (window.getSelection() || {
	    type: undefined
	  }).type === 'Range';
	};
	var utils = {
	  cardTypes: cardTypes,
	  formatter: formatter,
	  validator: validator,
	  BACKSPACE_KEY_CODE: BACKSPACE_KEY_CODE,
	  ENTER_KEY_CODE: ENTER_KEY_CODE,
	  isHighlighted: isHighlighted
	};

	function usePaymentCard() {
	  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	      _ref$autoFocus = _ref.autoFocus,
	      autoFocus = _ref$autoFocus === void 0 ? true : _ref$autoFocus,
	      errorMessages = _ref.errorMessages,
	      onBlur = _ref.onBlur,
	      onChange = _ref.onChange,
	      onError = _ref.onError,
	      onTouch = _ref.onTouch,
	      cardNumberValidator = _ref.cardNumberValidator,
	      cvcValidator = _ref.cvcValidator,
	      expiryValidator = _ref.expiryValidator;

	  var cardNumberField = React__default.useRef();
	  var expiryDateField = React__default.useRef();
	  var cvcField = React__default.useRef();
	  var zipField = React__default.useRef();
	  /** ====== START: META STUFF ====== */

	  var _React$useState = React__default.useState({
	    cardNumber: false,
	    expiryDate: false,
	    cvc: false,
	    zip: false
	  }),
	      _React$useState2 = _slicedToArray$3(_React$useState, 2),
	      touchedInputs = _React$useState2[0],
	      setTouchedInputs = _React$useState2[1];

	  var _React$useState3 = React__default.useState(false),
	      _React$useState4 = _slicedToArray$3(_React$useState3, 2),
	      isTouched = _React$useState4[0],
	      setIsTouched = _React$useState4[1];

	  var _React$useState5 = React__default.useState({
	    cardNumber: undefined,
	    expiryDate: undefined,
	    cvc: undefined,
	    zip: undefined
	  }),
	      _React$useState6 = _slicedToArray$3(_React$useState5, 2),
	      erroredInputs = _React$useState6[0],
	      setErroredInputs = _React$useState6[1];

	  var _React$useState7 = React__default.useState(),
	      _React$useState8 = _slicedToArray$3(_React$useState7, 2),
	      error = _React$useState8[0],
	      setError = _React$useState8[1];

	  var _React$useState9 = React__default.useState(),
	      _React$useState10 = _slicedToArray$3(_React$useState9, 2),
	      cardType = _React$useState10[0],
	      setCardType = _React$useState10[1];

	  var _React$useState11 = React__default.useState(),
	      _React$useState12 = _slicedToArray$3(_React$useState11, 2),
	      focused = _React$useState12[0],
	      setFocused = _React$useState12[1];

	  var setInputError = React__default.useCallback(function (input, error) {
	    setErroredInputs(function (erroredInputs) {
	      if (erroredInputs[input] === error) return erroredInputs;
	      var newError = error;

	      var newErroredInputs = _objectSpread$6({}, erroredInputs, _defineProperty$4({}, input, error));

	      if (error) {
	        setError(error);
	      } else {
	        newError = Object.values(newErroredInputs).find(Boolean);
	        setError(newError);
	      }

	      onError && onError(newError, newErroredInputs);
	      return newErroredInputs;
	    });
	  }, []); // eslint-disable-line

	  var setInputTouched = React__default.useCallback(function (input, value) {
	    requestAnimationFrame(function () {
	      if (document.activeElement.tagName !== 'INPUT') {
	        setIsTouched(true);
	      } else if (value === false) {
	        setIsTouched(false);
	      }
	    });
	    setTouchedInputs(function (touchedInputs) {
	      if (touchedInputs[input] === value) return touchedInputs;

	      var newTouchedInputs = _objectSpread$6({}, touchedInputs, _defineProperty$4({}, input, value));

	      onTouch && onTouch(_defineProperty$4({}, input, value), newTouchedInputs);
	      return newTouchedInputs;
	    });
	  }, []); // eslint-disable-line

	  /** ====== END: META STUFF ====== */

	  /** ====== START: CARD NUMBER STUFF ====== */

	  var handleBlurCardNumber = React__default.useCallback(function () {
	    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    return function (e) {
	      props.onBlur && props.onBlur(e);
	      onBlur && onBlur(e);
	      setFocused(undefined);
	      setInputTouched('cardNumber', true);
	    };
	  }, [onBlur, setInputTouched]);
	  var handleChangeCardNumber = React__default.useCallback(function () {
	    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    return function (e) {
	      var formattedCardNumber = e.target.value || '';
	      var cardNumber = formattedCardNumber.replace(/\s/g, '');
	      var cursorPosition = cardNumberField.current.selectionStart;
	      var cardType = utils.cardTypes.getCardTypeByValue(cardNumber);
	      setCardType(cardType);
	      setInputTouched('cardNumber', false); // @ts-ignore

	      cardNumberField.current.value = utils.formatter.formatCardNumber(cardNumber);
	      props.onChange && props.onChange(e);
	      onChange && onChange(e); // Due to the card number formatting, the selection cursor will fall to the end of
	      // the input field. Here, we want to reposition the cursor to the correct place.

	      requestAnimationFrame(function () {
	        if (document.activeElement !== cardNumberField.current) return;

	        if (cardNumberField.current.value[cursorPosition - 1] === ' ') {
	          cursorPosition = cursorPosition + 1;
	        }

	        cardNumberField.current.setSelectionRange(cursorPosition, cursorPosition);
	      });
	      var cardNumberError = utils.validator.getCardNumberError(cardNumber, cardNumberValidator, {
	        errorMessages: errorMessages
	      });

	      if (!cardNumberError && autoFocus) {
	        expiryDateField.current && expiryDateField.current.focus();
	      }

	      setInputError('cardNumber', cardNumberError);
	      props.onError && props.onError(cardNumberError);
	    };
	  }, [autoFocus, cardNumberValidator, errorMessages, onChange, setInputError, setInputTouched]);
	  var handleFocusCardNumber = React__default.useCallback(function () {
	    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    return function (e) {
	      props.onFocus && props.onFocus(e);
	      setFocused('cardNumber');
	    };
	  }, []);
	  var handleKeyPressCardNumber = React__default.useCallback(function () {
	    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    return function (e) {
	      var formattedCardNumber = e.target.value || '';
	      var cardNumber = formattedCardNumber.replace(/\s/g, '');
	      props.onKeyPress && props.onKeyPress(e);

	      if (e.key !== utils.ENTER_KEY_CODE) {
	        if (!utils.validator.isNumeric(e)) {
	          e.preventDefault();
	        }

	        if (utils.validator.hasCardNumberReachedMaxLength(cardNumber)) {
	          e.preventDefault();
	        }
	      }
	    };
	  }, []);
	  var getCardNumberProps = React__default.useCallback(function () {
	    var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    var refKey = _ref2.refKey,
	        props = _objectWithoutProperties$3(_ref2, ["refKey"]);

	    return _objectSpread$6(_defineProperty$4({
	      'aria-label': 'Card number',
	      autoComplete: 'cc-number',
	      id: 'cardNumber',
	      name: 'cardNumber',
	      placeholder: 'Card number',
	      type: 'tel'
	    }, refKey || 'ref', cardNumberField), props, {
	      onBlur: handleBlurCardNumber(props),
	      onChange: handleChangeCardNumber(props),
	      onFocus: handleFocusCardNumber(props),
	      onKeyPress: handleKeyPressCardNumber(props)
	    });
	  }, [handleBlurCardNumber, handleChangeCardNumber, handleFocusCardNumber, handleKeyPressCardNumber]);
	  /** ====== END: CARD NUMBER STUFF ====== */

	  /** ====== START: EXPIRY DATE STUFF ====== */

	  var handleBlurExpiryDate = React__default.useCallback(function () {
	    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    return function (e) {
	      props.onBlur && props.onBlur(e);
	      onBlur && onBlur(e);
	      setFocused(undefined);
	      setInputTouched('expiryDate', true);
	    };
	  }, [onBlur, setInputTouched]);
	  var handleChangeExpiryDate = React__default.useCallback(function () {
	    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    return function (e) {
	      setInputTouched('expiryDate', false);
	      expiryDateField.current.value = utils.formatter.formatExpiry(e);
	      props.onChange && props.onChange(e);
	      onChange && onChange(e);
	      var expiryDateError = utils.validator.getExpiryDateError(expiryDateField.current.value, expiryValidator, {
	        errorMessages: errorMessages
	      });

	      if (!expiryDateError && autoFocus) {
	        cvcField.current && cvcField.current.focus();
	      }

	      setInputError('expiryDate', expiryDateError);
	      props.onError && props.onError(expiryDateError);
	    };
	  }, [autoFocus, errorMessages, expiryValidator, onChange, setInputError, setInputTouched]);
	  var handleFocusExpiryDate = React__default.useCallback(function () {
	    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    return function (e) {
	      props.onFocus && props.onFocus(e);
	      setFocused('expiryDate');
	    };
	  }, []);
	  var handleKeyDownExpiryDate = React__default.useCallback(function () {
	    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    return function (e) {
	      props.onKeyDown && props.onKeyDown(e);

	      if (e.key === utils.BACKSPACE_KEY_CODE && !e.target.value && autoFocus) {
	        cardNumberField.current && cardNumberField.current.focus();
	      }
	    };
	  }, [autoFocus]);
	  var handleKeyPressExpiryDate = React__default.useCallback(function () {
	    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    return function (e) {
	      var formattedExpiryDate = e.target.value || '';
	      var expiryDate = formattedExpiryDate.replace(' / ', '');
	      props.onKeyPress && props.onKeyPress(e);

	      if (e.key !== utils.ENTER_KEY_CODE) {
	        if (!utils.validator.isNumeric(e)) {
	          e.preventDefault();
	        }

	        if (expiryDate.length >= 4) {
	          e.preventDefault();
	        }
	      }
	    };
	  }, []);
	  var getExpiryDateProps = React__default.useCallback(function () {
	    var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    var refKey = _ref3.refKey,
	        props = _objectWithoutProperties$3(_ref3, ["refKey"]);

	    return _objectSpread$6(_defineProperty$4({
	      'aria-label': 'Expiry date in format MM YY',
	      autoComplete: 'cc-exp',
	      id: 'expiryDate',
	      name: 'expiryDate',
	      placeholder: 'MM/YY',
	      type: 'tel'
	    }, refKey || 'ref', expiryDateField), props, {
	      onBlur: handleBlurExpiryDate(props),
	      onChange: handleChangeExpiryDate(props),
	      onFocus: handleFocusExpiryDate(props),
	      onKeyDown: handleKeyDownExpiryDate(props),
	      onKeyPress: handleKeyPressExpiryDate(props)
	    });
	  }, [handleBlurExpiryDate, handleChangeExpiryDate, handleFocusExpiryDate, handleKeyDownExpiryDate, handleKeyPressExpiryDate]);
	  /** ====== END: EXPIRY DATE STUFF ====== */

	  /** ====== START: CVC STUFF ====== */

	  var handleBlurCVC = React__default.useCallback(function () {
	    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    return function (e) {
	      props.onBlur && props.onBlur(e);
	      onBlur && onBlur(e);
	      setFocused(undefined);
	      setInputTouched('cvc', true);
	    };
	  }, [onBlur, setInputTouched]);
	  var handleChangeCVC = React__default.useCallback(function () {
	    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
	        cardType = _ref4.cardType;

	    return function (e) {
	      var cvc = e.target.value;
	      setInputTouched('cvc', false);
	      props.onChange && props.onChange(e);
	      onChange && onChange(e);
	      var cvcError = utils.validator.getCVCError(cvc, cvcValidator, {
	        cardType: cardType,
	        errorMessages: errorMessages
	      });

	      if (!cvcError && autoFocus) {
	        zipField.current && zipField.current.focus();
	      }

	      setInputError('cvc', cvcError);
	      props.onError && props.onError(cvcError);
	    };
	  }, [autoFocus, cvcValidator, errorMessages, onChange, setInputError, setInputTouched]);
	  var handleFocusCVC = React__default.useCallback(function () {
	    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    return function (e) {
	      props.onFocus && props.onFocus(e);
	      setFocused('cvc');
	    };
	  }, []);
	  var handleKeyDownCVC = React__default.useCallback(function () {
	    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    return function (e) {
	      props.onKeyDown && props.onKeyDown(e);

	      if (e.key === utils.BACKSPACE_KEY_CODE && !e.target.value && autoFocus) {
	        expiryDateField.current && expiryDateField.current.focus();
	      }
	    };
	  }, [autoFocus]);
	  var handleKeyPressCVC = React__default.useCallback(function () {
	    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    var _ref5 = arguments.length > 1 ? arguments[1] : undefined,
	        cardType = _ref5.cardType;

	    return function (e) {
	      var formattedCVC = e.target.value || '';
	      var cvc = formattedCVC.replace(' / ', '');
	      props.onKeyPress && props.onKeyPress(e);

	      if (e.key !== utils.ENTER_KEY_CODE) {
	        if (!utils.validator.isNumeric(e)) {
	          e.preventDefault();
	        }

	        if (cardType && cvc.length >= cardType.code.length) {
	          e.preventDefault();
	        }

	        if (cvc.length >= 4) {
	          e.preventDefault();
	        }
	      }
	    };
	  }, []);
	  var getCVCProps = React__default.useCallback(function () {
	    var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    var refKey = _ref6.refKey,
	        props = _objectWithoutProperties$3(_ref6, ["refKey"]);

	    return _objectSpread$6(_defineProperty$4({
	      'aria-label': 'CVC',
	      autoComplete: 'cc-csc',
	      id: 'cvc',
	      name: 'cvc',
	      placeholder: cardType ? cardType.code.name : 'CVC',
	      type: 'tel'
	    }, refKey || 'ref', cvcField), props, {
	      onBlur: handleBlurCVC(props),
	      onChange: handleChangeCVC(props, {
	        cardType: cardType
	      }),
	      onFocus: handleFocusCVC(props),
	      onKeyDown: handleKeyDownCVC(props),
	      onKeyPress: handleKeyPressCVC(props, {
	        cardType: cardType
	      })
	    });
	  }, [cardType, handleBlurCVC, handleChangeCVC, handleFocusCVC, handleKeyDownCVC, handleKeyPressCVC]);
	  /** ====== END: CVC STUFF ====== */

	  /** ====== START: ZIP STUFF ====== */

	  var handleBlurZIP = React__default.useCallback(function () {
	    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    return function (e) {
	      props.onBlur && props.onBlur(e);
	      onBlur && onBlur(e);
	      setFocused(undefined);
	      setInputTouched('zip', true);
	    };
	  }, [onBlur, setInputTouched]);
	  var handleChangeZIP = React__default.useCallback(function () {
	    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    return function (e) {
	      var zip = e.target.value;
	      setInputTouched('zip', false);
	      props.onChange && props.onChange(e);
	      onChange && onChange(e);
	      var zipError = utils.validator.getZIPError(zip, {
	        errorMessages: errorMessages
	      });
	      setInputError('zip', zipError);
	      props.onError && props.onError(zipError);
	    };
	  }, [errorMessages, onChange, setInputError, setInputTouched]);
	  var handleFocusZIP = React__default.useCallback(function () {
	    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    return function (e) {
	      props.onFocus && props.onFocus(e);
	      setFocused('zip');
	    };
	  }, []);
	  var handleKeyDownZIP = React__default.useCallback(function () {
	    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    return function (e) {
	      props.onKeyDown && props.onKeyDown(e);

	      if (e.key === utils.BACKSPACE_KEY_CODE && !e.target.value && autoFocus) {
	        cvcField.current && cvcField.current.focus();
	      }
	    };
	  }, [autoFocus]);
	  var handleKeyPressZIP = React__default.useCallback(function () {
	    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    return function (e) {
	      props.onKeyPress && props.onKeyPress(e);

	      if (e.key !== utils.ENTER_KEY_CODE) {
	        if (!utils.validator.isNumeric(e)) {
	          e.preventDefault();
	        }
	      }
	    };
	  }, []);
	  var getZIPProps = React__default.useCallback(function () {
	    var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    var refKey = _ref7.refKey,
	        props = _objectWithoutProperties$3(_ref7, ["refKey"]);

	    return _objectSpread$6(_defineProperty$4({
	      autoComplete: 'off',
	      id: 'zip',
	      maxLength: '6',
	      name: 'zip',
	      placeholder: 'ZIP',
	      type: 'tel'
	    }, refKey || 'ref', zipField), props, {
	      onBlur: handleBlurZIP(props),
	      onChange: handleChangeZIP(props),
	      onFocus: handleFocusZIP(props),
	      onKeyDown: handleKeyDownZIP(props),
	      onKeyPress: handleKeyPressZIP(props)
	    });
	  }, [handleBlurZIP, handleChangeZIP, handleFocusZIP, handleKeyDownZIP, handleKeyPressZIP]);
	  /** ====== END: ZIP STUFF ====== */

	  /** ====== START: CARD IMAGE STUFF ====== */

	  var getCardImageProps = React__default.useCallback(function () {
	    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	    var images = props.images || {};
	    return _objectSpread$6({
	      'aria-label': cardType ? cardType.displayName : 'Placeholder card',
	      children: images[cardType ? cardType.type : 'placeholder'] || images.placeholder,
	      width: '1.5em',
	      height: '1em',
	      viewBox: '0 0 24 16'
	    }, props);
	  }, [cardType]);
	  /** ====== END: CARD IMAGE STUFF ====== */
	  // Set default field errors

	  React__default.useLayoutEffect(function () {
	    if (zipField.current) {
	      var zipError = utils.validator.getZIPError(zipField.current.value, {
	        errorMessages: errorMessages
	      });
	      setInputError('zip', zipError);
	    }

	    if (cvcField.current) {
	      var cvcError = utils.validator.getCVCError(cvcField.current.value, cvcValidator, {
	        errorMessages: errorMessages
	      });
	      setInputError('cvc', cvcError);
	    }

	    if (expiryDateField.current) {
	      var expiryDateError = utils.validator.getExpiryDateError(expiryDateField.current.value, expiryValidator, {
	        errorMessages: errorMessages
	      });
	      setInputError('expiryDate', expiryDateError);
	    }

	    if (cardNumberField.current) {
	      var cardNumberError = utils.validator.getCardNumberError(cardNumberField.current.value, cardNumberValidator, {
	        errorMessages: errorMessages
	      });
	      setInputError('cardNumber', cardNumberError);
	    }
	  }, [cardNumberValidator, cvcValidator, errorMessages, expiryValidator, setInputError]); // Format default values

	  React__default.useLayoutEffect(function () {
	    if (cardNumberField.current) {
	      cardNumberField.current.value = utils.formatter.formatCardNumber(cardNumberField.current.value);
	    }

	    if (expiryDateField.current) {
	      expiryDateField.current.value = utils.formatter.formatExpiry({
	        target: expiryDateField.current
	      });
	    }
	  }, []); // Set default card type

	  React__default.useLayoutEffect(function () {
	    if (cardNumberField.current) {
	      var _cardType = utils.cardTypes.getCardTypeByValue(cardNumberField.current.value);

	      setCardType(_cardType);
	    }
	  }, []);
	  return {
	    getCardImageProps: getCardImageProps,
	    getCardNumberProps: getCardNumberProps,
	    getExpiryDateProps: getExpiryDateProps,
	    getCVCProps: getCVCProps,
	    getZIPProps: getZIPProps,
	    wrapperProps: {
	      error: error,
	      focused: focused,
	      isTouched: isTouched
	    },
	    meta: {
	      cardType: cardType,
	      erroredInputs: erroredInputs,
	      error: error,
	      focused: focused,
	      isTouched: isTouched,
	      touchedInputs: touchedInputs
	    }
	  };
	}

	var visa = React__default.createElement("g", {
	  stroke: "none",
	  strokeWidth: "1",
	  fill: "none",
	  fillRule: "evenodd"
	}, React__default.createElement("g", {
	  id: "New-Icons",
	  transform: "translate(-80.000000, -280.000000)",
	  fillRule: "nonzero"
	}, React__default.createElement("g", {
	  id: "Card-Brands",
	  transform: "translate(40.000000, 200.000000)"
	}, React__default.createElement("g", {
	  id: "Color",
	  transform: "translate(0.000000, 80.000000)"
	}, React__default.createElement("g", {
	  id: "Visa",
	  transform: "translate(40.000000, 0.000000)"
	}, React__default.createElement("rect", {
	  strokeOpacity: "0.2",
	  stroke: "#000000",
	  strokeWidth: "0.5",
	  fill: "#FFFFFF",
	  x: "0.25",
	  y: "0.25",
	  width: "23.5",
	  height: "15.5",
	  rx: "2"
	}), React__default.createElement("path", {
	  d: "M2.78773262,5.91443732 C2.26459089,5.62750595 1.6675389,5.39673777 1,5.23659312 L1.0280005,5.1118821 L3.76497922,5.1118821 C4.13596254,5.12488556 4.43699113,5.23650585 4.53494636,5.63071135 L5.12976697,8.46659052 L5.31198338,9.32072617 L6.97796639,5.1118821 L8.77678896,5.1118821 L6.10288111,11.2775284 L4.30396552,11.2775284 L2.78773262,5.91443732 L2.78773262,5.91443732 Z M10.0999752,11.2840738 L8.39882877,11.2840738 L9.46284763,5.1118821 L11.163901,5.1118821 L10.0999752,11.2840738 Z M16.2667821,5.26277458 L16.0354292,6.59558538 L15.881566,6.53004446 C15.5737466,6.40524617 15.1674138,6.28053516 14.6143808,6.29371316 C13.942741,6.29371316 13.6415263,6.56277129 13.6345494,6.82545859 C13.6345494,7.11441463 13.998928,7.3048411 14.5939153,7.58725177 C15.5740257,8.02718756 16.0286384,8.56556562 16.0218476,9.26818871 C16.0080799,10.5486366 14.8460128,11.376058 13.0610509,11.376058 C12.2978746,11.3694253 11.5627918,11.2180965 11.163808,11.0475679 L11.4018587,9.66204513 L11.6258627,9.76066195 C12.1788958,9.99070971 12.5428092,10.0889775 13.221984,10.0889775 C13.7117601,10.0889775 14.2368857,9.89837643 14.2435835,9.48488392 C14.2435835,9.21565125 14.0198586,9.01850486 13.3617074,8.7164581 C12.717789,8.42086943 11.8568435,7.92848346 11.8707973,7.04197926 C11.8780532,5.84042483 13.0610509,5 14.7409877,5 C15.3990458,5 15.9312413,5.13788902 16.2667821,5.26277458 Z M18.5277524,9.0974856 L19.941731,9.0974856 C19.8717762,8.78889347 19.549631,7.31147374 19.549631,7.31147374 L19.4307452,6.77964104 C19.3467437,7.00942698 19.1998574,7.38373457 19.2069273,7.37055657 C19.2069273,7.37055657 18.6678479,8.74290137 18.5277524,9.0974856 Z M20.6276036,5.1118821 L22,11.2839865 L20.4249023,11.2839865 C20.4249023,11.2839865 20.2707601,10.5748181 20.221922,10.3581228 L18.0377903,10.3581228 C17.9746264,10.5221933 17.6807607,11.2839865 17.6807607,11.2839865 L15.8957988,11.2839865 L18.4226343,5.62399144 C18.5977072,5.22341512 18.9059917,5.1118821 19.3117663,5.1118821 L20.6276036,5.1118821 L20.6276036,5.1118821 Z",
	  id: "Shape",
	  fill: "#171E6C"
	}))))));

	var unionpay = React__default.createElement("g", {
	  fill: "none"
	}, React__default.createElement("path", {
	  d: "m4.54588254.00006676h5.79377466c.8087588 0 1.3117793.72566459 1.1231113 1.61890981l-2.69741608 12.74856503c-.19036262.8901361-1.00010994 1.6164225-1.80943362 1.6164225h-5.79320976c-.80762905 0-1.31177937-.7262864-1.12311135-1.6164225l2.69854581-12.74856503c.18866803-.89324522.9979917-1.61890981 1.80773904-1.61890981",
	  fill: "#dd2423"
	}), React__default.createElement("path", {
	  d: "m9.85756516.00006676h6.66269264c.8086174 0 .4439911.72566459.2537697 1.61890981l-2.6969924 12.74856503c-.1892329.8901361-.1302036 1.6164225-.9405158 1.6164225h-6.66269248c-.81031221 0-1.31177939-.7262864-1.12141672-1.6164225l2.69685116-12.74856503c.19149238-.89324522.99912144-1.61890981 1.8083039-1.61890981",
	  fill: "#16315e"
	}), React__default.createElement("path", {
	  d: "m16.2559813.00006676h5.7937745c.8098886 0 1.3129092.72566459 1.1226878 1.61890981l-2.6969924 12.74856503c-.1903626.8901361-1.0006749 1.6164225-1.8104222 1.6164225h-5.7910915c-.8103122 0-1.3129091-.7262864-1.1231113-1.6164225l2.697416-12.74856503c.1886681-.89324522.9974268-1.61890981 1.8077391-1.61890981",
	  fill: "#036862"
	}), React__default.createElement("path", {
	  d: "m6.05901135 4.08561434c-.59580116.00668457-.77175951 0-.8279645-.01461278-.02160646.11301588-.42365577 2.15460824-.42478553 2.15631824-.08656699.4130443-.14955043.7074763-.36349659.89759795-.12144798.1105286-.26323144.1638497-.42760986.1638497-.26421996 0-.41814822-.1444178-.44399122-.41832975l-.00494264-.09405035s.08049458-.55326485.08049458-.55637395c0 0 .42196112-1.86048711.49751306-2.10641713.00395412-.01399096.00508387-.02129736.00607239-.02798193-.82132725.00792821-.9669236 0-.97695012-.01461278-.00550753.02005371-.025843.13540142-.025843.13540142l-.43085788 2.09693437-.03699927.1778407-.07159782.5817131c0 .1725552.03078565.31339755.09207452.4324762.19629382.37760055.75622549.4341862 1.07297875.4341862.40812169 0 .79096525-.09544945 1.04967767-.26971465.44907509-.2921002.56656897-.74867195.67135315-1.15440985l.04857917-.20815445s.43467082-1.93230737.5085281-2.18367833c.00282441-.01399096.00395413-.02129736.00776704-.02798193zm1.47893982 1.55881086c-.10478422 0-.29627659.0279819-.46828081.12078865-.0624186.0352883-.12144796.07601755-.18372539.11659135l.056205-.22338905-.03078563-.03762015c-.36476761.08130305-.44639193.0921849-.78333945.14441785l-.02824374.0206755c-.03911752.3570805-.07385733.6255515-.21888878 1.32743145-.05521646.25867735-.11255121.519842-.17002718.7778975l.01553403.03280105c.34527946-.0200537.45006363-.0200537.75015309-.0146128l.02428961-.0290701c.03812903-.21499445.04307165-.2653619.12752039-.70079175.03968242-.20644445.1224365-.66006255.16324868-.8215804.07498704-.038242.14898558-.07586215.21959486-.07586215.16819135 0 .14771465.1615179.14121858.22587635-.00720213.1080413-.06849101.4609245-.13133325.76390655l-.04194194.19556255c-.02923223.14441785-.06128888.2847938-.09052111.427968l.01270966.02860375c.34033679-.0200537.44413246-.0200537.73476028-.0146128l.0341749-.0290701c.0525333-.3357831.06792611-.42563615.16113038-.9145426l.04688457-.22463265c.09108601-.43962715.13684082-.6625498.06792616-.8441214-.07286879-.2034908-.24769738-.2526146-.40826291-.2526146zm1.65214439.4602871c-.18090101.038242-.29627659.0637366-.41094606.08021485-.11368097.02005375-.22453757.038242-.39936616.06498025l-.01383941.0138355-.01270966.01103735c-.01821719.14332965-.0309269.26722735-.05507525.41288885-.02047669.150636-.05196844.3217921-.10323077.56772215-.03968243.18825615-.06015913.25385825-.08275412.32008215-.0220301.06622385-.04631967.1305823-.09094476.31572935l.01045019.0171001.00875554.01570095c.1633899-.00855005.27029237-.0146128.38016043-.01570095.10972684-.00435275.22340776 0 .39936611.00108815l.01539286-.0138355.01652257-.0152346c.02541932-.1669588.02923224-.21188535.04476626-.29334385.01539282-.0873658.04194194-.20830985.10704369-.53134565.03078568-.1517242.06510179-.30298205.09701718-.4578154.03318641-.1542115.06792612-.30609115.10097127-.45781535l-.00494263-.0183437zm.00385525-.620608c-.1643784-.10679765-.45288796-.07290845-.64706354.0746185-.19361063.14457325-.21564072.34977405-.05182718.4579708.16155403.10384405.45119334.0729085.64367421-.0758621.19318708-.14768235.21733543-.3510177.05521651-.4567272zm.99410809 2.473369c.3325698 0 .6734715-.1008904.9300657-.400297.1974235-.2428209.2879446-.60409865.3192952-.7528692.1021011-.4931037.0225949-.7233328-.0772466-.8635533-.1516687-.21375085-.4197016-.28230655-.697761-.28230655-.1672028 0-.5654392.01818825-.87654364.33391765-.22340786.22774175-.32663863.5367866-.38891601.83308405-.06284224.3018939-.13514621.84536505.31887154 1.0476122.14008884.0662239.34203141.08441215.47223481.08441215zm-.0259841-1.10948335c.0766817-.3734032.1672028-.6868008.3982364-.6868008.1810422 0 .1941755.23318275.1136809.6078296-.0144042.0831685-.0804945.3923688-.1698859.5240393-.0624186.09715945-.1362759.15607695-.2179003.15607695-.0242896 0-.1687562 0-.1710157-.23613635-.0011297-.11659135.0204767-.23567.0468846-.3650087zm2.1066988 1.06146325.0259841-.0290701c.0368581-.21499445.0429305-.2655174.1245549-.70079175.0408121-.20644445.1252608-.66006255.1649433-.82158045.0751282-.0383974.1478558-.07601755.2207245-.07601755.1670616 0 .1467262.1615179.140089.2258763-.0060725.1081968-.0673613.4609245-.1313334.76390655l-.0396824.1955626c-.030362.14457325-.0634071.2847938-.0926394.42812345l.0127097.02860375c.3414665-.02005375.441308-.02005375.7336305-.0146128l.0353047-.0290701c.0512623-.33593855.0651017-.42579165.1611304-.9145426l.0457548-.2247881c.0915096-.43962715.1378292-.66239435.0700444-.84396595-.0749871-.2034908-.2509454-.2526146-.4092515-.2526146-.1049254 0-.2974063.02782645-.468422.12078865-.0611476.0352883-.1224365.0758621-.1825956.11659135l.0523921-.22338905-.0281025-.0377756c-.3646263.0814585-.4479453.09234035-.7844692.1445733l-.025843.0206755c-.0408122.35708045-.0739986.62539605-.21903 1.32743145-.0552164.25867735-.1125512.51984195-.1698859.7778975l.0153928.03280105c.3458442-.02005375.4490751-.02005375.7485997-.0146128zm2.5088186.01453505c.0214652-.1153477.1489856-.7990394.1501153-.7990394 0 0 .1085971-.50165375.1152345-.519842 0 0 .0341748-.0522329.0683497-.07290845h.0502738c.4743532 0 1.0099953 0 1.4298381-.3399804.2856852-.2331827.4809905-.57751585.5681223-.99600105.022595-.1026004.0392588-.22463269.0392588-.34666496 0-.16027425-.0292322-.3188385-.1136809-.44273624-.2140874-.32972035-.6404262-.3357831-1.132573-.33827039-.0015534 0-.2426136.00248729-.2426136.00248729-.629976.00855003-.8826161.00606275-.9864117-.00792821-.0087556.05052291-.0252782.14037599-.0252782.14037599s-.2256673 1.15130077-.2256673 1.15316622c0 0-.5400198 2.4477966-.5654392 2.5631443.5500464-.00730635.7755725-.00730635.8704714.0041973zm.4181482-2.0451678s.2399304-1.14896892.2388007-1.14461618l.0077669-.05891749.0033893-.04492654.0958874.01088185s.4948299.046792.5064099.04803565c.1953052.0831685.2757998.29754113.2195948.57736036-.0512623.2557237-.2019425.4707182-.3955532.5745622-.1594358.0879876-.3547411.095294-.5559775.095294h-.1302035zm1.4938667.99045135c-.0634072.2975411-.136276.8410123.3154822 1.0347094.1440429.0674675.2731167.0875212.4043088.08021485.1385355-.00823915.2669031-.08472305.3858092-.1947853-.0107326.04523745-.0214652.0904749-.0321978.1358678l.0204766.0290701c.324944-.01507915.4257741-.01507915.7778319-.0121255l.0319154-.0267383c.0514036-.332674.0998416-.65570975.2334344-1.2921431.0651017-.30484755.1300622-.6067414.1968587-.9103453l-.0104501-.03342285c-.3634967.0741521-.4606551.09000855-.8103124.1445733l-.026549.0237846c-.0035305.0309356-.0072021.0606275-.0105914.09031945-.0543692-.0966931-.1331691-.17923975-.2547583-.2306954-.1554817-.0673121-.5206729.01943185-.8346018.33407305-.2205834.2246327-.3264973.53243385-.3866564.8276432zm.7634275.01818825c.0778115-.3667187.1672028-.67700715.3988014-.67700715.1464436 0 .2235489.14877055.2078737.40247335-.0124272.06327025-.025843.1299605-.0418008.20535625-.0231597.10897405-.0482967.21701535-.0727275.32521215-.0248545.07399665-.0538043.143796-.0855784.1902771-.0595943.09296215-.2013777.150636-.2830021.150636-.0231599 0-.1660731 0-.1710157-.23193905-.0011298-.11550315.0204767-.23442635.0474494-.36500865zm3.9866711-1.21085565-.0281024-.0352883c-.3596838.08021485-.4247856.09296215-.755237.142086l-.0242897.02673825c-.0011296.00435275-.0021182.01103735-.0038128.0171001l-.0011298-.00606275c-.2460027.6247742-.2388006.4899946-.4390485.98185465-.0011298-.02238555-.0011298-.0363765-.0022595-.06016115l-.0501327-1.0662668-.0314917-.0352883c-.3767711.08021485-.3856679.09296215-.7336305.142086l-.0271139.02673825c-.003813.01274735-.003813.0267383-.0060724.0419729l.0022594.00544095c.0434954.2446864.0330452.19012165.0766818.5762722.0203354.1894998.0474494.3800878.0677848.5672558.0343162.3132421.0535219.4674536.0954638.94547815-.2349878.4268798-.2906279.5883977-.51686.9630446l.0015534.0037309-.1592946.27733195c-.0182171.0292256-.0347397.0492793-.0578996.05782935-.0254193.0138355-.0584644.01632275-.1043605.01632275h-.0882616l-.131192.4803564.4500635.00855005c.26422-.00124365.4302931-.1372669.5196844-.32008215l.283002-.53383295h-.004519l.0297972-.03762015c.1903626-.4511308 1.6384179-3.1855867 1.6384179-3.1855867zm-4.7501128 6.3087581h-.1909276l.7066579-2.57293795h.2344228l.0744221-.265051.0072022.29474295c-.0087556.1821934.121448.3437113.4634794.31697305h.3955532l.1361347-.49543555h-.1488443c-.0855785 0-.1252609-.02378465-.1203182-.0747739l-.0072022-.299873h-.7325008v.00155455c-.2368235.00544095-.9440462.0250283-1.0872418.0670012-.1732752.0491238-.3558709.1936971-.3558709.1936971l.071739-.26536195h-.6851925l-.1427719.52652655-.7161194 2.61226815h-.1389591l-.136276.4918601h1.3647364l-.0457548.1640051h.6724828l.0446251-.1640051h.1886681zm-.5599316-2.0501423c-.1097268.03342285-.313929.1347796-.313929.1347796l.1816071-.65757525h.5443977l-.1313333.47911275s-.1681914.01088185-.2807425.0436829zm.0104502.9394154s-.1710158.0236292-.283567.0516111c-.1108566.0369984-.3187303.1535897-.3187303.1535897l.1875382-.6843135h.5472221zm-.3050322 1.1167897h-.5460922l.158306-.5775158h.5443976zm1.315112-1.5959024h.7871525l-.1131162.4032506h-.7976024l-.1197535.4408708h.6979023l-.5284398.8190931c-.0369994.0601612-.0701858.0814585-.1070437.0984031-.0369994.0206755-.0855785.0449265-.1417835.0449265h-.1936107l-.133028.4828437h.5064098c.2632315 0 .4187131-.131826.5335239-.3048476l.3623669-.5459584.0778115.5543531c.0165225.1038439.0843074.1646269.1302034.1882561.0506975.0279819.1030897.0760176.1770882.0831685.0793648.0037309.1366995.0066846.1748285.0066846h.2488272l.1494092-.5403621h-.0981469c-.0563463 0-.1533633-.0104155-.1698859-.0298474-.0165226-.0236292-.0165226-.0600057-.0254194-.1153477l-.0789412-.5555967h-.3232494l.1417836-.1857688h.796049l.1224365-.4408708h-.7370197l.1148107-.4032506h.7347603l.1362759-.497301h-2.1905826zm-6.6483163 1.7081877.1837253-.6728098h.7550958l.1379705-.5004101h-.7558018l.1153756-.4141325h.7385731l.1368408-.4845537h-1.84798632l-.13401641.4845537h.41984283l-.1119863.4141325h-.42097264l-.13952389.5089601h.41970155l-.24487301.8901361c-.03304514.117835.01553408.1627615.04631971.2174817.03149175.0533211.06340718.0886094.13514621.1086631.07399857.0181883.12469597.0290701.19361067.0290701h.8512656l.1516688-.554353-.3773361.0570521c-.0728688 0-.2746701-.0096382-.25264-.0837903zm.0866093-3.22084395-.1913512.38070965c-.0409534.08316845-.0778114.1347796-.1109978.1585642-.0292322.02005375-.0871318.0284483-.1710157.0284483h-.0998415l-.13345158.48704095h.33158128c.1594357 0 .2818722-.0643584.3403368-.09653765.0628422-.0369983.0793647-.0158564.1279439-.0674675l.1119864-.1067977h1.0354146l.1374057-.50709465h-.7579202l.1323219-.2768656zm1.5286064 3.23062205c-.0176524-.027982-.0049427-.0772612.0220301-.1798616l.283002-1.0311339h1.0067472c.1467262-.0023318.25264-.0041973.3215547-.0096382.0739985-.0085501.1544932-.0376202.2421899-.0898531.0905212-.0547202.1368408-.1123941.1759583-.178618.0436366-.0660684.113681-.2106417.1738401-.4335643l.3557296-1.3048905-1.044735.0066846s-.3216959.0522329-.4633381.10990675c-.1429132.06435845-.3471154.2440646-.3471154.2440646l.0943341-.3577023h-.645369l-.9035164 3.29860265c-.0320566.1280949-.0535218.2210571-.0584645.2768655-.0016946.0601612.0689147.1197005.1146695.164627.0540867.0449266.1340164.0376202.2106981.0449266.0806358.0066846.1953053.0108818.3536113.0108818h.4959597l.1522336-.5658567-.4439912.0461702c-.0474494 0-.0817655-.027982-.0960286-.0516111zm.4876277-1.9074346h1.0574447l-.06722.2319391c-.0094616.0054409-.0320566-.0115037-.1396652.0024873h-.9156612zm.2118279-.77789745h1.0663414l-.0766816.27935285s-.5025969-.0054409-.5830915.01088185c-.3541763.06746755-.5610614.27577745-.5610614.27577745zm.802065 1.78653705c-.0087555.0346665-.0225949.0558084-.0419418.0716648-.0214654.0152346-.0562051.0206755-.1080323.0206755h-.1506803l.0088968-.2824619h-.626728l-.0254193 1.380908c-.0009886.0996467.007767.1573206.0739985.2034908.0662315.0576738.2702923.0649802.5449624.0649802h.392729l.1417834-.5168883-.3418902.0206755-.1136809.0073064c-.0155341-.0073064-.030362-.013991-.0468846-.0321792-.0144043-.015701-.0386939-.0060627-.0347398-.1057095l.0026831-.3539713.3585541-.0163228c.1936107 0 .2763648-.0693331.346974-.1354015.0673612-.0632702.0893913-.1360232.1148107-.2344264l.0601592-.3133975h-.4927118z",
	  fill: "#fefefe"
	}));

	var placeholder = React__default.createElement("g", {
	  stroke: "none",
	  strokeWidth: "1",
	  fill: "none",
	  fillRule: "evenodd"
	}, React__default.createElement("g", null, React__default.createElement("rect", {
	  id: "Rectangle",
	  fill: "#D8D8D8",
	  x: "0",
	  y: "0",
	  width: "24",
	  height: "16",
	  rx: "1"
	}), React__default.createElement("rect", {
	  id: "Rectangle",
	  fill: "#A6A6A6",
	  x: "0.923076923",
	  y: "10.3529412",
	  width: "4.61538462",
	  height: "1.88235294",
	  rx: "0.941176471"
	}), React__default.createElement("rect", {
	  id: "Rectangle",
	  fill: "#FFFFFF",
	  x: "16.6153846",
	  y: "3.76470588",
	  width: "4.61538462",
	  height: "2.82352941",
	  rx: "1"
	}), React__default.createElement("rect", {
	  id: "Rectangle",
	  fill: "#A6A6A6",
	  x: "6.46153846",
	  y: "10.3529412",
	  width: "4.61538462",
	  height: "1.88235294",
	  rx: "0.941176471"
	}), React__default.createElement("rect", {
	  id: "Rectangle",
	  fill: "#A6A6A6",
	  x: "11.9230769",
	  y: "10.3529412",
	  width: "5.61538462",
	  height: "1.88235294",
	  rx: "0.941176471"
	}), React__default.createElement("rect", {
	  id: "Rectangle",
	  fill: "#A6A6A6",
	  x: "18.4615385",
	  y: "10.3529412",
	  width: "4.61538462",
	  height: "1.88235294",
	  rx: "0.941176471"
	})));

	var mastercard = React__default.createElement("g", {
	  fill: "none",
	  fillRule: "evenodd"
	}, React__default.createElement("rect", {
	  fill: "#252525",
	  height: "16",
	  rx: "2",
	  width: "24"
	}), React__default.createElement("circle", {
	  cx: "9",
	  cy: "8",
	  fill: "#eb001b",
	  r: "5"
	}), React__default.createElement("circle", {
	  cx: "15",
	  cy: "8",
	  fill: "#f79e1b",
	  r: "5"
	}), React__default.createElement("path", {
	  d: "m12 3.99963381c1.2144467.91220633 2 2.36454836 2 4.00036619s-.7855533 3.0881599-2 4.0003662c-1.2144467-.9122063-2-2.36454837-2-4.0003662s.7855533-3.08815986 2-4.00036619z",
	  fill: "#ff5f00"
	}));

	var jcb = React__default.createElement("g", {
	  fill: "none"
	}, React__default.createElement("path", {
	  d: "m.20535714 16h4.51785715c1.0278125 0 2.25892857-1.1946667 2.25892857-2.1333333v-13.8666667h-4.51785715c-1.0278125 0-2.25892857 1.19466667-2.25892857 3.2z",
	  fill: "#047ab1"
	}), React__default.createElement("path", {
	  d: "m2.76924107 10.816c-.86733559.0001606-1.73039558-.1147397-2.56388393-.3413333v-1.17333337c.64678874.37770431 1.38610045.59084099 2.14598215.61866667.8696875 0 1.35535714-.576 1.35535714-1.36533333v-3.22133334h2.14598214v3.22133334c0 1.25866666-.70026786 2.26133333-3.0834375 2.26133333z",
	  fill: "#fff"
	}), React__default.createElement("path", {
	  d: "m8.11160714 16h4.51785716c1.0278125 0 2.2589286-1.1946667 2.2589286-2.1333333v-13.8666667h-4.5178572c-1.02781249 0-2.25892856 1.19466667-2.25892856 3.2z",
	  fill: "#d42d06"
	}), React__default.createElement("path", {
	  d: "m8.11160714 6.08c.65508929-.59733333 1.78455357-.97066667 3.61428576-.88533333.9939285.04266666 2.0330357.32 2.0330357.32v1.184c-.5943231-.3394747-1.2623758-.54734656-1.9539732-.608-1.3892411-.11733334-2.23633933.61866666-2.23633933 1.90933333s.84709823 2.0266667 2.23633933 1.92c.6920185-.06606555 1.3596342-.27744592 1.9539732-.61866667v1.17333337s-1.0391072.288-2.0330357.3306666c-1.82973219.0853334-2.95919647-.288-3.61428576-.8853333z",
	  fill: "#fff"
	}), React__default.createElement("path", {
	  d: "m16.0178571 16h4.5178572c1.0278125 0 2.2589286-1.1946667 2.2589286-2.1333333v-13.8666667h-4.5178572c-1.0278125 0-2.2589286 1.19466667-2.2589286 3.2z",
	  fill: "#67b637"
	}), React__default.createElement("path", {
	  d: "m21.6651786 9.28c0 .8533333-.7002679 1.3866667-1.6377232 1.3866667h-4.0095983v-5.33333337h3.6481697l.2597768.01066667c.8245089.04266667 1.4344196.50133333 1.4344196 1.29066667 0 .61866666-.4179018 1.152-1.1746428 1.28v.032c.8358035.05333333 1.4795982.55466666 1.4795982 1.33333333zm-2.880134-3.104c-.0486104-.00686658-.0976798-.01043129-.1468303-.01066667h-1.3553572v1.344h1.5021875c.2823661-.064.5195536-.30933333.5195536-.672 0-.36266666-.2371875-.608-.5195536-.66133333zm.1694197 2.176c-.059755-.00886168-.1202559-.01243275-.1807143-.01066667h-1.4908929v1.46133334h1.4908929l.1807143-.02133334c.2823661-.064.5195536-.34133333.5195536-.71466666 0-.37333334-.2258929-.64-.5195536-.71466667z",
	  fill: "#fff"
	}));

	var amex = React__default.createElement("g", {
	  fill: "none",
	  fillRule: "evenodd"
	}, React__default.createElement("rect", {
	  fill: "#016fd0",
	  height: "16",
	  rx: "2",
	  width: "24"
	}), React__default.createElement("path", {
	  d: "m13.7640663 13.3938564v-5.70139231l10.1475359.00910497v1.57489503l-1.1728619 1.25339231 1.1728619 1.2648839v1.6083094h-1.8726188l-.9951823-1.0981657-.9881105 1.1023204z",
	  fill: "#fffffe"
	}), React__default.createElement("path", {
	  d: "m14.4418122 12.7687956v-4.448884h3.7722872v1.02488398h-2.550895v.69569062h2.4900774v1.0078232h-2.4900774v.6833149h2.550895v1.0371713z",
	  fill: "#016fd0"
	}), React__default.createElement("path", {
	  d: "m18.1952707 12.7687956 2.087337-2.2270055-2.0874254-2.2217901h1.6156464l1.2754917 1.41003315 1.2791161-1.41003315h1.5461657v.03500552l-2.0428729 2.18678458 2.0428729 2.1638895v.063116h-1.5617237l-1.2981216-1.4241768-1.2847735 1.4241768z",
	  fill: "#016fd0"
	}), React__default.createElement("path", {
	  d: "m14.2373481 2.6319558h2.4460552l.8591381 1.95085083v-1.95085083h3.0198453l.5207514 1.46156906.5225194-1.46156906h2.3059447v5.70139227h-12.1865193z",
	  fill: "#fffffe"
	}), React__default.createElement("g", {
	  fill: "#016fd0"
	}, React__default.createElement("path", {
	  d: "m14.7004641 3.25135912-1.9740111 4.44517127h1.3539006l.3724199-.89016575h2.0179447l.3721547.89016575h1.3875801l-1.96579-4.44517127zm.1696353 2.55743646.592-1.41507182.5915581 1.41507182z"
	}), React__default.createElement("path", {
	  d: "m18.2119779 7.69573481v-4.44508288l1.903116.00654144.9792707 2.73272928.9856354-2.73927072h1.8316022v4.44508288l-1.1786077.01043094v-3.05334807l-1.1125746 3.04291713h-1.0758011l-1.1356464-3.05334807v3.05334807z"
	})));

	var dinersclub = React__default.createElement("g", {
	  id: "319",
	  stroke: "none",
	  strokeWidth: "1",
	  fill: "none",
	  fillRule: "evenodd"
	}, React__default.createElement("g", {
	  id: "New-Icons",
	  transform: "translate(-320.000000, -280.000000)",
	  fillRule: "nonzero"
	}, React__default.createElement("g", {
	  id: "Card-Brands",
	  transform: "translate(40.000000, 200.000000)"
	}, React__default.createElement("g", {
	  id: "Color",
	  transform: "translate(0.000000, 80.000000)"
	}, React__default.createElement("g", {
	  id: "Diners-Club",
	  transform: "translate(280.000000, 0.000000)"
	}, React__default.createElement("path", {
	  d: "M21.9972414,15.749927 L21.999381,15.7499362 C22.9544683,15.7581106 23.73806,14.9772525 23.75,14.0041555 L23.7500083,2.00630219 C23.7461702,1.53568921 23.5588633,1.08617106 23.2297297,0.756801782 C22.9014319,0.428268884 22.4589161,0.246148853 21.9972414,0.250070854 L2.00063,0.250061791 C1.54108393,0.246148853 1.09856813,0.428268884 0.77027028,0.756801782 C0.441136651,1.08617106 0.253829819,1.53568921 0.25,2.00426336 L0.249991686,13.9936957 C0.253829819,14.4643086 0.441136651,14.9138268 0.77027028,15.2431961 C1.09856813,15.571729 1.54108393,15.753849 2.00275862,15.749927 L21.9972414,15.749927 Z M21.996203,16.249927 C21.9958359,16.249924 21.9954688,16.249921 21.9951018,16.2499178 L21.9972414,16.249927 L21.996203,16.249927 Z",
	  id: "shape",
	  strokeOpacity: "0.2",
	  stroke: "#000000",
	  strokeWidth: "0.5",
	  fill: "#FFFFFF"
	}), React__default.createElement("path", {
	  d: "M10.0021142,2.05179033 L10.0021142,2.03579033 L14.0021142,2.03579033 L14.0021142,2.05179033 C17.1375481,2.28122918 19.5642283,4.89197286 19.5642283,8.03579033 C19.5642283,11.1796078 17.1375481,13.7903515 14.0021142,14.0197903 L14.0021142,14.0357903 L10.0021142,14.0357903 L10.0021142,14.0197903 C6.86668021,13.7903515 4.44,11.1796078 4.44,8.03579033 C4.44,4.89197286 6.86668021,2.28122918 10.0021142,2.05179033 Z",
	  id: "shape",
	  fill: "#0165AC"
	}), React__default.createElement("path", {
	  d: "M11.6021142,11.4277903 C13.0374002,10.9175027 13.9961556,9.55908923 13.9961556,8.03579033 C13.9961556,6.51249143 13.0374002,5.15407792 11.6021142,4.64379033 L11.6021142,11.4277903 L11.6021142,11.4277903 Z M9.20211417,4.64379033 C7.76682809,5.15407792 6.80807271,6.51249143 6.80807271,8.03579033 C6.80807271,9.55908923 7.76682809,10.9175027 9.20211417,11.4277903 L9.20211417,4.64379033 L9.20211417,4.64379033 Z M10.4021142,13.2357903 C7.53023347,13.2357903 5.20211417,10.907671 5.20211417,8.03579033 C5.20211417,5.16390963 7.53023347,2.83579033 10.4021142,2.83579033 C13.2739949,2.83579033 15.6021142,5.16390963 15.6021142,8.03579033 C15.6021142,10.907671 13.2739949,13.2357903 10.4021142,13.2357903 Z",
	  id: "shape",
	  fill: "#FFFFFF"
	}))))));

	var discover = React__default.createElement("g", {
	  id: "319",
	  stroke: "none",
	  strokeWidth: "1",
	  fill: "none",
	  fillRule: "evenodd"
	}, React__default.createElement("g", {
	  id: "New-Icons",
	  transform: "translate(-280.000000, -280.000000)",
	  fillRule: "nonzero"
	}, React__default.createElement("g", {
	  id: "Card-Brands",
	  transform: "translate(40.000000, 200.000000)"
	}, React__default.createElement("g", {
	  id: "Color",
	  transform: "translate(0.000000, 80.000000)"
	}, React__default.createElement("g", {
	  id: "Discover",
	  transform: "translate(240.000000, 0.000000)"
	}, React__default.createElement("path", {
	  d: "M21.9972414,15.749927 L21.999381,15.7499362 C22.9544683,15.7581106 23.73806,14.9772525 23.75,14.0041555 L23.7500083,2.00630219 C23.7461702,1.53568921 23.5588633,1.08617106 23.2297297,0.756801782 C22.9014319,0.428268884 22.4589161,0.246148853 21.9972414,0.250070854 L2.00063,0.250061791 C1.54108393,0.246148853 1.09856813,0.428268884 0.77027028,0.756801782 C0.441136651,1.08617106 0.253829819,1.53568921 0.25,2.00426336 L0.249991686,13.9936957 C0.253829819,14.4643086 0.441136651,14.9138268 0.77027028,15.2431961 C1.09856813,15.571729 1.54108393,15.753849 2.00275862,15.749927 L21.9972414,15.749927 Z M21.996203,16.249927 C21.9958359,16.249924 21.9954688,16.249921 21.9951018,16.2499178 L21.9972414,16.249927 L21.996203,16.249927 Z",
	  id: "shape",
	  strokeOpacity: "0.2",
	  stroke: "#000000",
	  strokeWidth: "0.5",
	  fill: "#FFFFFF"
	}), React__default.createElement("path", {
	  d: "M12.6124138,15.9999283 L21.9972414,15.9999283 C22.5240217,16.0043364 23.0309756,15.7992919 23.4065697,15.4299059 C23.7821638,15.06052 23.9956285,14.5570537 24,14.0302731 L24,11.6716524 C20.4561668,13.7059622 16.6127929,15.1667795 12.6124138,15.9999283 L12.6124138,15.9999283 Z",
	  id: "shape",
	  fill: "#F27712"
	}), React__default.createElement("path", {
	  d: "M23.1724138,9.29647999 L22.32,9.29647999 L21.36,8.03027309 L21.2689655,8.03027309 L21.2689655,9.29647999 L20.5737931,9.29647999 L20.5737931,6.1516524 L21.6,6.1516524 C22.4027586,6.1516524 22.8662069,6.48268688 22.8662069,7.07854895 C22.8662069,7.56682481 22.5765517,7.88130757 22.0551724,7.98061792 L23.1724138,9.29647999 Z M22.1462069,7.10337654 C22.1462069,6.79716964 21.9144828,6.63992826 21.4841379,6.63992826 L21.2689655,6.63992826 L21.2689655,7.5916524 L21.4675862,7.5916524 C21.9144828,7.5916524 22.1462069,7.42613516 22.1462069,7.10337654 L22.1462069,7.10337654 Z M18.1406897,6.1516524 L20.1103448,6.1516524 L20.1103448,6.68130757 L18.8358621,6.68130757 L18.8358621,7.38475585 L20.0606897,7.38475585 L20.0606897,7.92268688 L18.8358621,7.92268688 L18.8358621,8.77510068 L20.1103448,8.77510068 L20.1103448,9.30475585 L18.1406897,9.30475585 L18.1406897,6.1516524 Z M15.9062069,9.37923861 L14.4,6.14337654 L15.1613793,6.14337654 L16.1131034,8.26199723 L17.0731034,6.14337654 L17.817931,6.14337654 L16.2951724,9.37923861 L15.9227586,9.37923861 L15.9062069,9.37923861 Z M9.60827586,9.37096274 C8.54896552,9.37096274 7.72137931,8.65096274 7.72137931,7.71579033 C7.72137931,6.8054455 8.56551724,6.06889378 9.62482759,6.06889378 C9.92275862,6.06889378 10.1710345,6.12682481 10.4772414,6.25923861 L10.4772414,6.98751447 C10.2453534,6.75969251 9.93335245,6.63192067 9.60827586,6.6316524 C8.9462069,6.6316524 8.44137931,7.1116524 8.44137931,7.71579033 C8.44137931,8.35303171 8.93793103,8.80820412 9.64137931,8.80820412 C9.95586207,8.80820412 10.1958621,8.70889378 10.4772414,8.46061792 L10.4772414,9.18889378 C10.1627586,9.32130757 9.89793103,9.37096274 9.60827586,9.37096274 L9.60827586,9.37096274 Z M7.5062069,8.33647999 C7.5062069,8.94889378 7.00137931,9.37096274 6.27310345,9.37096274 C5.74344828,9.37096274 5.36275862,9.18889378 5.04,8.77510068 L5.49517241,8.38613516 C5.65241379,8.66751447 5.91724138,8.80820412 6.24827586,8.80820412 C6.56275862,8.80820412 6.7862069,8.6178593 6.7862069,8.36958343 C6.7862069,8.22889378 6.72,8.12130757 6.57931034,8.03854895 C6.42504922,7.96369158 6.26441119,7.90275992 6.09931034,7.85647999 C5.44551724,7.64958343 5.22206897,7.42613516 5.22206897,6.98751447 C5.22206897,6.47441102 5.70206897,6.0854455 6.33103448,6.0854455 C6.72827586,6.0854455 7.08413793,6.20958343 7.38206897,6.44130757 L7.01793103,6.85510068 C6.87360928,6.69688076 6.66932728,6.60675635 6.45517241,6.60682481 C6.15724138,6.60682481 5.94206897,6.75579033 5.94206897,6.95441102 C5.94206897,7.11992826 6.0662069,7.21096274 6.48,7.3516524 C7.27448276,7.59992826 7.5062069,7.8316524 7.5062069,8.34475585 L7.5062069,8.33647999 Z M4.08827586,6.1516524 L4.78344828,6.1516524 L4.78344828,9.30475585 L4.08827586,9.30475585 L4.08827586,6.1516524 Z M1.8537931,9.30475585 L0.827586207,9.30475585 L0.827586207,6.1516524 L1.8537931,6.1516524 C2.97931034,6.1516524 3.75724138,6.79716964 3.75724138,7.72406619 C3.75724138,8.19579033 3.52551724,8.64268688 3.12,8.94061792 C2.77241379,9.18889378 2.38344828,9.30475585 1.84551724,9.30475585 L1.8537931,9.30475585 Z M2.66482759,6.9378593 C2.43310345,6.75579033 2.16827586,6.68958343 1.71310345,6.68958343 L1.52275862,6.68958343 L1.52275862,8.77510068 L1.71310345,8.77510068 C2.16,8.77510068 2.44137931,8.69234206 2.66482759,8.52682481 C2.90482759,8.32820412 3.04551724,8.03027309 3.04551724,7.72406619 C3.04551724,7.4178593 2.90482759,7.12820412 2.66482759,6.9378593 Z",
	  id: "shape",
	  fill: "#000000"
	}), React__default.createElement("path", {
	  d: "M12.4137931,6.06889378 C11.5034483,6.06889378 10.7586207,6.79716964 10.7586207,7.69923861 C10.7586207,8.65923861 11.4703448,9.37923861 12.4137931,9.37923861 C13.3406897,9.37923861 14.0689655,8.65096274 14.0689655,7.72406619 C14.0689655,6.79716964 13.3489655,6.06889378 12.4137931,6.06889378 Z",
	  id: "shape",
	  fill: "#F27712"
	}))))));

	var hipercard = React__default.createElement("g", {
	  id: "Page-1",
	  stroke: "none",
	  strokeWidth: "1",
	  fill: "none",
	  fillRule: "evenodd"
	}, React__default.createElement("g", {
	  id: "Group-2"
	}, React__default.createElement("rect", {
	  id: "Rectangle",
	  fill: "#B3131B",
	  x: "0",
	  y: "0",
	  width: "24",
	  height: "16",
	  rx: "2"
	}), React__default.createElement("g", {
	  id: "Hipercard_logo",
	  transform: "translate(2.000000, 6.000000)",
	  fill: "#FFFFFF",
	  fillRule: "nonzero"
	}, React__default.createElement("path", {
	  d: "M4.45845797,4.72911206 L4.71934477,4.72911206 L4.72670967,4.71021617 C4.73076043,4.69982332 4.73407456,4.67539055 4.73407456,4.65592007 C4.73407456,4.63644958 4.74267391,4.56566228 4.75318417,4.49861521 C4.76369454,4.43156695 4.78836018,4.27726169 4.80799675,4.15571305 C4.82763331,4.0341644 4.85703646,3.85139347 4.87333717,3.74955542 C4.88963776,3.64771736 4.90953167,3.51735868 4.91754595,3.45986946 C4.92556023,3.40238023 4.93534271,3.3553436 4.93928464,3.3553436 C4.94322668,3.3553436 4.96009268,3.38074637 4.9767648,3.41179473 L5.0070776,3.46824705 L5.07434118,3.5349692 L5.14160488,3.60169134 L5.22440039,3.63432372 L5.30719578,3.66695609 L5.40587279,3.67955056 L5.5045498,3.69214384 L5.62980554,3.68457856 L5.75506139,3.67701327 L5.8906751,3.64246001 L6.02628894,3.60790675 L6.09908975,3.57519075 C6.13913019,3.55719677 6.21011098,3.51796553 6.25682484,3.48801021 L6.34175912,3.43354447 L6.42095111,3.35561954 C6.46450662,3.31276155 6.5259323,3.24403729 6.55745263,3.20290069 C6.58897283,3.16176409 6.61476215,3.12510239 6.61476215,3.12143264 C6.61476215,3.11776169 6.63024834,3.09228724 6.64917582,3.06482382 C6.66810343,3.0373592 6.70683989,2.96113177 6.73525696,2.8954298 C6.76367415,2.82972783 6.80808531,2.71146429 6.83394853,2.63262192 L6.88097263,2.48927217 L6.90527961,2.36510142 C6.91864839,2.29680721 6.93584673,2.18391928 6.94349809,2.11423935 L6.95740984,1.98754804 L6.9493753,1.88003572 L6.94134076,1.77252341 L6.91602234,1.66501109 L6.89070392,1.55749878 L6.84971924,1.47700311 L6.80873457,1.39650745 L6.72956721,1.31388424 L6.65039973,1.23125983 L6.55674682,1.18360201 L6.4630938,1.13594299 L6.35995932,1.11163207 L6.25682484,1.08732115 L6.15369036,1.07986696 L6.05055588,1.07241397 L5.93566831,1.0854122 L5.82078075,1.09840925 L5.7270093,1.12198192 L5.63323773,1.1455534 L5.55177641,1.18267501 C5.50697261,1.2030916 5.44177912,1.23776791 5.40690207,1.25973387 C5.3720249,1.28169983 5.33604735,1.30697239 5.32695174,1.31589472 C5.31785613,1.32481824 5.29608043,1.34134766 5.27856116,1.3526257 L5.24670802,1.37313308 L5.26898276,1.26820942 C5.28123392,1.21050159 5.29147275,1.15656744 5.2917358,1.14835469 L5.29221386,1.13342243 L5.06976516,1.13342243 L4.84731634,1.13342243 L4.80831003,1.37532513 C4.78685648,1.50837162 4.75298372,1.71398893 4.73303727,1.83225247 C4.7130907,1.95051602 4.68301183,2.12791134 4.66619545,2.22646429 C4.64937895,2.32501725 4.61938307,2.49972476 4.59953794,2.61470321 C4.5796928,2.72968165 4.54689191,2.91245259 4.52664697,3.02086084 C4.50640216,3.12926909 4.47674372,3.28784975 4.46073931,3.37326231 C4.44473502,3.45867488 4.41461296,3.61994335 4.39380151,3.7316367 C4.37299019,3.84333005 4.33954562,4.02072536 4.31948026,4.12584852 C4.29941502,4.23097167 4.26676167,4.39761576 4.24691738,4.49616871 C4.2270731,4.59472167 4.20785211,4.68745104 4.20420394,4.70223398 L4.19757093,4.72911206 L4.45845773,4.72911206 L4.45845797,4.72911206 Z M5.58158434,3.34795511 L5.48028286,3.35395071 L5.41406652,3.34244331 L5.34785018,3.33093472 L5.28059837,3.30070464 L5.21334656,3.27047457 L5.16636177,3.22630134 L5.11937709,3.18212931 L5.09225746,3.12240025 C5.07734166,3.08954926 5.0581828,3.0337432 5.04968233,2.99838718 L5.03422684,2.93410437 L5.04041916,2.8311458 L5.04661147,2.72818843 L5.07787505,2.56691995 C5.09507,2.47822229 5.12594421,2.31157821 5.14648436,2.19659976 C5.1670245,2.08162131 5.19812318,1.9131519 5.21559259,1.82222277 L5.24735509,1.6568975 L5.3169102,1.5999088 C5.35516545,1.56856538 5.41576424,1.52655673 5.45157423,1.50655705 L5.51668327,1.470194 L5.60161755,1.44430981 L5.68655183,1.41842563 L5.79575304,1.41211346 L5.90495426,1.40580129 L5.99387134,1.42445946 L6.08278843,1.44311762 L6.1455397,1.47157016 L6.20829096,1.50002269 L6.2609103,1.55210763 L6.31352963,1.60419138 L6.34191746,1.65934519 C6.3575308,1.68968039 6.37946059,1.74905705 6.39065044,1.79129506 L6.41099548,1.86808991 L6.40476348,2.09506035 L6.39853137,2.32203079 L6.36736983,2.45618705 C6.35023095,2.52997394 6.31760514,2.64286188 6.29486799,2.70704912 L6.25352781,2.82375493 L6.20290006,2.91822719 C6.17505485,2.9701879 6.1321162,3.04040419 6.10748089,3.07426459 C6.08284558,3.10812381 6.04357913,3.15198525 6.0202222,3.17173287 C5.99686528,3.19148049 5.95774892,3.22234369 5.93329695,3.24031617 L5.8888387,3.27299275 L5.7858622,3.30747553 L5.6828857,3.34195951 L5.58158434,3.34795511 Z M8.10111202,3.67635864 L8.23458018,3.67786023 L8.36804833,3.665875 C8.44145581,3.6592833 8.56157715,3.64555995 8.63498463,3.63537973 C8.70839211,3.62519831 8.83520336,3.60240928 8.91678734,3.58473665 L9.06512179,3.5526048 L9.07250973,3.498771 C9.07657311,3.4691621 9.093232,3.38101873 9.10952955,3.3028967 L9.1391613,3.16085621 L9.1326233,3.1544198 L9.12608543,3.1479822 L9.0807372,3.1695444 C9.05579576,3.181403 8.97811171,3.20969069 8.90810597,3.23240685 L8.78082285,3.27370711 L8.6472364,3.29918394 L8.51364995,3.32466077 L8.30131425,3.32506693 L8.08897856,3.32547309 L8.01617775,3.30258252 C7.9761373,3.28999283 7.91724557,3.26695772 7.88530737,3.25139472 L7.82723768,3.22309628 L7.7793106,3.18046765 L7.73138352,3.13783782 L7.69398963,3.07349051 L7.65659562,3.00914319 L7.63315109,2.92843011 L7.60970656,2.84771703 L7.60953911,2.69835615 L7.60937167,2.54899526 L7.63018579,2.41575047 L7.65099978,2.28250449 L7.83358895,2.27410658 L8.01617823,2.26570748 L8.69111697,2.26997453 L9.3660557,2.27424157 L9.38643459,2.18913124 C9.39764288,2.14232038 9.41477886,2.04555929 9.42451439,1.97410661 L9.44221542,1.84419231 L9.44258913,1.73490963 L9.44296284,1.62562694 L9.42374501,1.54404301 L9.40452717,1.46245909 L9.37275132,1.40843654 C9.35527451,1.37872491 9.32448062,1.33566504 9.3043205,1.31274938 C9.28416037,1.28983373 9.24816377,1.25752509 9.22432794,1.24095266 C9.20049222,1.22438023 9.15368992,1.19652977 9.12032288,1.17906499 L9.05965554,1.14730824 L8.95365525,1.12215633 L8.84765497,1.09700442 L8.71705262,1.08471099 L8.58645027,1.07241636 L8.46511559,1.08019547 L8.34378091,1.08797458 L8.19817929,1.11550012 L8.05257767,1.14302686 L7.96157665,1.17884877 C7.9115261,1.198551 7.83508525,1.23447922 7.7917081,1.2586898 C7.74833095,1.28290038 7.68827028,1.32231081 7.65823994,1.34626814 C7.62820961,1.37022427 7.57621515,1.4167998 7.54269681,1.44976786 C7.50917834,1.48273591 7.45959784,1.54196325 7.43251788,1.58138443 C7.40543792,1.62080561 7.36392374,1.69068862 7.34026433,1.73668 C7.31660479,1.78267138 7.28577559,1.84717876 7.27175488,1.88002975 C7.25773417,1.91288073 7.23225571,1.98007593 7.21513599,2.02935241 C7.1980164,2.07862889 7.17110667,2.17270216 7.15533656,2.23840413 C7.13956645,2.3041061 7.11795686,2.41225991 7.10731533,2.47874552 L7.08796742,2.59963476 L7.08814699,2.77739681 L7.08832657,2.95515887 L7.10676835,3.03280665 C7.11691132,3.07551293 7.13630473,3.14002032 7.14986473,3.1761564 C7.16342485,3.21229249 7.18849963,3.26604864 7.20558671,3.29561453 C7.22267367,3.32518042 7.2591652,3.37278329 7.28667905,3.40139948 C7.31419278,3.43001568 7.36400431,3.47343751 7.39737135,3.49789178 C7.43073838,3.52234606 7.49013972,3.55674044 7.52937438,3.57432587 L7.60070995,3.60629765 L7.70017273,3.62996947 C7.75487732,3.64298921 7.83743756,3.65841484 7.88363999,3.66425037 C7.92984242,3.6700847 8.02770503,3.67553319 8.10111251,3.67635864 L8.10111202,3.67635864 Z M8.32965888,1.99352094 C7.99374575,1.99352094 7.71890777,1.99115328 7.71890777,1.98826001 C7.71890777,1.98536673 7.73323995,1.94370571 7.75075703,1.89567996 C7.76827412,1.84765421 7.79903902,1.77617166 7.81912342,1.73682932 L7.85564031,1.66529779 L7.93590903,1.58670271 L8.01617775,1.50810762 L8.09504529,1.47097884 C8.13842244,1.45055747 8.19575308,1.42832273 8.22244671,1.42156738 C8.24914034,1.41481202 8.32558119,1.40585027 8.39231526,1.40165251 L8.51364995,1.39401794 L8.60682685,1.40580726 L8.70000364,1.41759659 L8.76771701,1.44811814 L8.8354305,1.4786385 L8.87257529,1.51806804 C8.89300502,1.53975447 8.9173507,1.5716916 8.92667697,1.58903811 L8.94363374,1.62057745 L8.95483159,1.69057752 L8.96602945,1.76057759 L8.95321966,1.87704927 L8.94040987,1.99352094 L8.32965888,1.99352094 Z M11.959629,3.67642315 L12.0931723,3.67788054 L12.2447655,3.66019237 C12.328143,3.6504637 12.4391291,3.63434164 12.4914025,3.62436569 C12.5436771,3.61438974 12.628308,3.59458597 12.6794712,3.58035851 C12.7306357,3.56612985 12.7769248,3.55074723 12.7823351,3.54617318 C12.7877455,3.54159912 12.8022037,3.48738425 12.8144634,3.42569488 C12.826723,3.3640055 12.8421665,3.28127956 12.8487817,3.24185837 C12.8553968,3.20243719 12.858816,3.16807267 12.8563809,3.16549477 C12.8539445,3.16291567 12.8449948,3.16624735 12.8364917,3.1728952 C12.8279885,3.17954304 12.7684545,3.20420995 12.7041944,3.22770736 L12.5873588,3.27043156 L12.420981,3.302168 L12.2546045,3.33390325 L12.1131465,3.32915121 L11.9716884,3.32439797 L11.8913406,3.29696441 L11.8109916,3.26953085 L11.7489046,3.21605781 L11.6868164,3.16258596 L11.6456318,3.08873695 L11.6044472,3.01488793 L11.5848322,2.91609248 L11.5652172,2.81729702 L11.5653386,2.68912203 L11.5654599,2.56094705 L11.5892961,2.40565148 L11.6131335,2.25035592 L11.6383541,2.16673523 C11.6522263,2.12074385 11.6679222,2.06698769 11.6732342,2.0472771 C11.678545,2.02756651 11.7007978,1.97112254 11.722683,1.92184607 C11.7445681,1.87256959 11.7836087,1.79641025 11.8094409,1.75260257 L11.8564059,1.67295267 L11.9140896,1.61410998 L11.9717721,1.5552673 L12.0328581,1.51796531 L12.0939452,1.48066331 L12.172393,1.45687442 C12.2155396,1.44379137 12.2917924,1.42680322 12.3418429,1.41912326 L12.4328439,1.40516219 L12.5663121,1.41175628 L12.6997802,1.41835037 L12.8575153,1.44943457 L13.0152504,1.48051877 L13.0794061,1.50407591 C13.1146915,1.51703353 13.145104,1.52763425 13.1469871,1.52763425 C13.1488715,1.52763425 13.1573345,1.48328542 13.1657928,1.42908129 C13.1742522,1.37487717 13.1893087,1.28569809 13.1992508,1.23090743 C13.209193,1.17611557 13.2149333,1.12892841 13.2120067,1.12604708 C13.2090789,1.12316575 13.1616662,1.11575337 13.1066446,1.109575 C13.0516217,1.10339663 12.9020779,1.09242679 12.7743246,1.08519718 L12.5420452,1.0720532 L12.3782433,1.08442906 L12.2144415,1.09680493 L12.0931068,1.12190786 L11.9717721,1.14701198 L11.8936314,1.17778201 C11.8506546,1.19470683 11.787705,1.2252463 11.7537446,1.24564856 C11.7197843,1.26605201 11.6765552,1.29349632 11.6576803,1.30663671 C11.6388043,1.3197771 11.5815404,1.37104495 11.5304257,1.42056632 L11.4374894,1.5106043 L11.3856128,1.58542809 C11.3570809,1.62658022 11.3077232,1.71239058 11.2759299,1.77611671 L11.2181236,1.89198153 L11.1738182,2.01741257 C11.1494494,2.08639964 11.1154271,2.19928757 11.098211,2.26827464 L11.0669102,2.39370567 L11.0555485,2.50719089 L11.0441879,2.62067611 L11.0443092,2.76999877 L11.0444306,2.91932143 L11.0558894,3.0061878 L11.0673483,3.09305536 L11.1036916,3.18241243 L11.1400338,3.27176949 L11.1820095,3.33637364 L11.2239841,3.4009766 L11.2907327,3.46565123 L11.3574813,3.53032586 L11.4280836,3.56706401 L11.4986858,3.60380216 L11.591451,3.6291691 C11.642471,3.64312061 11.7161818,3.65913278 11.7552528,3.6647509 C11.7943226,3.67037021 11.8863841,3.67562278 11.9598316,3.67642315 L11.959629,3.67642315 Z M13.9555105,3.67201037 L14.1193123,3.66738973 L14.2224468,3.64140161 L14.3255813,3.6154123 L14.3923154,3.5843508 C14.4290191,3.56726709 14.4890798,3.53354287 14.5257835,3.50940874 C14.5624872,3.48527462 14.6192998,3.43939314 14.6520322,3.40745004 C14.6847659,3.37550574 14.7333071,3.32100536 14.7599012,3.28633861 C14.7864953,3.25167066 14.8098571,3.22488337 14.8118155,3.22681143 C14.8137726,3.22873948 14.8076537,3.2839817 14.7982163,3.34957257 C14.7887801,3.41516345 14.7809516,3.50242641 14.7808217,3.54349015 L14.7805912,3.61815148 L15.003278,3.61815148 L15.2259647,3.61815148 L15.2327728,3.44792364 L15.2395797,3.27769581 L15.2713548,3.05669828 C15.2888318,2.93514963 15.3170592,2.75506651 15.3340824,2.65651355 C15.3511044,2.55796059 15.3806943,2.39131651 15.3998373,2.28619336 C15.4189803,2.1810702 15.4493055,2.01711392 15.4672278,1.92184607 L15.4998135,1.74863178 L15.5009055,1.59901287 L15.5019975,1.44939515 L15.4676343,1.38024561 L15.4332723,1.31109728 L15.3866749,1.26705665 L15.3400776,1.22301602 L15.2635748,1.18484915 L15.1870721,1.14668347 L15.0730551,1.12171553 L14.9590393,1.09674639 L14.8020602,1.08498574 L14.645081,1.07322389 L14.4428707,1.08554122 C14.3316553,1.09231569 14.1751408,1.10569261 14.0950599,1.11526718 L13.9494583,1.13267701 L13.8502272,1.13304733 L13.750996,1.13341765 L13.7365584,1.20210607 C13.7286171,1.2398847 13.7065499,1.32964076 13.687521,1.40156411 C13.6684909,1.47348627 13.6546854,1.53406946 13.6568415,1.53619223 C13.6589976,1.538315 13.7120682,1.52645639 13.7747764,1.50983976 C13.8374846,1.49322194 13.9706919,1.4658947 14.070793,1.44911203 L14.252795,1.41859765 L14.4165969,1.411951 L14.5803987,1.40530435 L14.6859089,1.42351335 L14.7914191,1.44172116 L14.8618442,1.47594352 L14.9322693,1.51016469 L14.971703,1.56803021 L15.0111368,1.62589572 L15.0105787,1.7171259 L15.0100205,1.80835607 L14.989117,1.90846915 L14.9682134,2.00858342 L14.5316331,2.01013398 L14.0950539,2.01168455 L13.9521677,2.05025639 C13.8735792,2.07147095 13.786558,2.09963679 13.7587857,2.11284647 C13.7310146,2.12605735 13.7032351,2.13686592 13.6970543,2.13686592 C13.6908735,2.13686592 13.6441232,2.16238934 13.5931651,2.19358344 L13.5005139,2.25030097 L13.4275457,2.32200093 C13.387413,2.36143645 13.3361406,2.42057897 13.3136063,2.45342996 C13.2910733,2.48628094 13.2544617,2.55490844 13.232249,2.60593498 L13.1918603,2.69871094 L13.173324,2.80304089 L13.1547877,2.90737084 L13.1547877,3.01681838 L13.1547877,3.12626711 L13.1724965,3.21739215 L13.1902065,3.3085184 L13.2230615,3.3679524 C13.2411331,3.40064092 13.2742951,3.44852332 13.2967566,3.47435973 L13.3375954,3.52133305 L13.4101681,3.56473577 L13.4827396,3.60813849 L13.5658078,3.63128231 C13.6114963,3.64401177 13.6810332,3.65942187 13.720336,3.66552618 L13.7917948,3.67662623 L13.9555966,3.67200559 L13.9555105,3.67201037 Z M14.1071788,3.33797677 L14.0101111,3.34295937 L13.9458219,3.32683969 C13.9104626,3.31797351 13.8568096,3.2982008 13.8265924,3.2829006 L13.771652,3.25508 L13.7416666,3.21999634 C13.7251748,3.20069908 13.6999809,3.16278307 13.6856804,3.13573655 L13.6596808,3.08656281 L13.6545823,2.97172771 L13.649485,2.85689381 L13.6700525,2.78723658 C13.6813657,2.74892516 13.7079052,2.68244671 13.7290308,2.6395051 L13.7674417,2.56143085 L13.840996,2.48951348 L13.9145503,2.4175973 L13.9926644,2.38056886 L14.0707784,2.34354042 L14.1678462,2.3208398 L14.2649139,2.29813917 L14.5682506,2.29813917 L14.8715874,2.29813917 L14.8907789,2.30595173 L14.9099692,2.31376429 L14.8938183,2.40749114 C14.8849342,2.4590409 14.8637479,2.55228633 14.8467356,2.61470321 C14.8297232,2.67712008 14.7996905,2.76887348 14.7799954,2.81860031 C14.7603004,2.86832714 14.7441859,2.91229012 14.7441859,2.91629675 C14.7441859,2.92030338 14.7242458,2.95653742 14.6998745,2.99681631 L14.6555643,3.07005131 L14.5828035,3.14102257 C14.5427861,3.18005671 14.5056371,3.21199384 14.5002523,3.21199384 C14.4948674,3.21199384 14.4703372,3.22543885 14.4457427,3.24187151 L14.4010235,3.27174799 L14.3026357,3.30237108 L14.2042466,3.33299417 L14.1071788,3.33797677 Z M18.0566228,3.67628099 L18.1718907,3.67771091 L18.281092,3.66026166 C18.3411526,3.65066439 18.4175935,3.63520412 18.4509605,3.6259067 C18.4843276,3.61660808 18.5443882,3.59247515 18.5844287,3.57227836 L18.6572295,3.53555693 L18.7198576,3.48128471 L18.7824857,3.4270125 L18.8484444,3.34040775 C18.8847223,3.29277621 18.9175725,3.24574076 18.9214467,3.23588547 L18.9284889,3.21796675 L18.922364,3.27769581 C18.9189945,3.3105468 18.9114402,3.36430295 18.9055761,3.39715394 C18.8997132,3.43000492 18.8913059,3.49316841 18.8868942,3.53751724 L18.8788715,3.61815148 L19.1168877,3.61815148 L19.3549039,3.61815148 L19.3549039,3.53751724 L19.3549039,3.456883 L19.391166,3.15226478 C19.411111,2.98472475 19.4406038,2.7616367 19.4567061,2.65651355 C19.4728085,2.5513904 19.4976627,2.40087316 19.5119389,2.32203079 C19.5262139,2.24318843 19.5514964,2.10073461 19.5681205,2.00546676 C19.5847433,1.9101989 19.6147725,1.74355481 19.6348497,1.63514656 C19.654927,1.52673831 19.68706,1.35471861 19.7062552,1.25288055 C19.7254515,1.1510425 19.7552865,0.992461836 19.7725549,0.900479078 C19.7898244,0.80849632 19.8207636,0.647227848 19.841308,0.542104696 C19.8618536,0.436981544 19.8918657,0.289152111 19.9080008,0.213594845 C19.9241371,0.13803758 19.9373165,0.0721862871 19.9372885,0.0672586394 L19.9372886,0.0582992798 L19.6776105,0.0582992798 L19.4179324,0.0582992798 L19.4102629,0.132960609 C19.4060453,0.174024341 19.386167,0.309758638 19.3660873,0.434592381 C19.3460089,0.559426124 19.3132764,0.758323906 19.2933496,0.876587452 C19.2734228,0.994850998 19.2542119,1.109532 19.2506592,1.13143345 L19.2442006,1.17125601 L19.2237071,1.16267653 C19.2124364,1.15795674 19.1513431,1.14127321 19.0879458,1.12560031 L18.9726778,1.09710477 L18.8149427,1.08501083 L18.6572076,1.07291569 L18.5237395,1.08516015 L18.3902713,1.09740461 L18.2689366,1.12760004 L18.147602,1.15779547 L18.032334,1.21314639 L17.9170661,1.26849731 L17.8321318,1.33040529 L17.7471975,1.39231447 L17.6738471,1.46974245 C17.6335045,1.51232808 17.5752238,1.58276537 17.5443344,1.62626963 L17.488171,1.70537002 L17.4222183,1.84048553 C17.3859453,1.91479923 17.3418026,2.01323153 17.3241241,2.05922291 C17.3064456,2.10521429 17.2752675,2.20716464 17.2548384,2.28577884 L17.2176966,2.42871287 L17.1993969,2.61428869 L17.1810984,2.7998633 L17.1948396,2.94918596 L17.2085795,3.09850862 L17.224825,3.15226478 C17.2337589,3.18183067 17.2525985,3.23450692 17.2666891,3.26932419 L17.2923089,3.33262744 L17.3390179,3.39487707 L17.3857281,3.45712789 L17.4390608,3.5001364 L17.4923947,3.54314491 L17.5651955,3.57873388 C17.6052359,3.59830709 17.6724044,3.62360354 17.714459,3.63494729 C17.7565136,3.64629103 17.8247643,3.65990926 17.8661273,3.66521081 C17.9074903,3.67051236 17.9932036,3.67549377 18.056601,3.67628099 L18.0566228,3.67628099 Z M18.2635057,3.33735678 L18.1718907,3.34214706 L18.1100549,3.33118916 C18.0760448,3.3251625 18.0216226,3.30900698 17.989117,3.29528841 L17.9300149,3.27034555 L17.8802835,3.23022554 L17.830552,3.19010433 L17.7935947,3.12041485 L17.7566361,3.05072537 L17.7397949,2.97307759 L17.7229524,2.8954298 L17.7243805,2.74013424 L17.7258074,2.58483867 L17.7453666,2.44746183 L17.7649257,2.31008498 L17.7953249,2.21451848 C17.8120436,2.1619569 17.8258042,2.11236625 17.8259049,2.10431836 C17.8260262,2.09627046 17.8425132,2.05326554 17.8625892,2.00875185 C17.8826665,1.96423817 17.9162082,1.89556528 17.9371288,1.8561441 C17.9580481,1.81672291 17.9971506,1.75526768 18.0240226,1.71957718 C18.0508934,1.68388667 18.0987648,1.63013051 18.1304016,1.60011905 C18.1620384,1.57010758 18.2123656,1.53074374 18.2422382,1.51264345 L18.2965536,1.47973512 L18.3919567,1.44723295 L18.4873609,1.41473079 L18.6875631,1.41461133 L18.8877654,1.41461133 L19.0030333,1.44609571 C19.0664307,1.46341117 19.1337447,1.48349327 19.1526184,1.49072169 L19.1869367,1.50386327 L19.1802341,1.53665453 C19.176548,1.55468912 19.1621274,1.63395198 19.1481884,1.71279434 C19.1342495,1.79163671 19.1067842,1.94215395 19.0871522,2.0472771 C19.0675203,2.15240025 19.0373589,2.31098092 19.0201245,2.39967858 C19.0028914,2.48837624 18.9779292,2.60126417 18.9646527,2.65054064 C18.9513763,2.69981712 18.9326471,2.76806952 18.9230301,2.80221304 C18.9134143,2.83635657 18.890516,2.89548834 18.872146,2.93361698 C18.8537759,2.97174563 18.8216307,3.02713239 18.8007126,3.05669828 C18.7797957,3.08626416 18.7444145,3.12722038 18.7220889,3.14771103 C18.6997633,3.16820288 18.6514661,3.2046173 18.6147623,3.22863316 L18.5480283,3.2722975 L18.4515745,3.30243201 L18.3551207,3.33256771 L18.2635057,3.33735798 L18.2635057,3.33735678 Z M0.406035224,3.61815148 L0.700846957,3.61815148 L0.721999232,3.48973399 C0.733631588,3.41910437 0.756352721,3.28337007 0.772489021,3.18810222 C0.78862532,3.09283436 0.818658081,2.91543904 0.839229163,2.7938904 C0.859799032,2.67234175 0.890636242,2.49225862 0.907755352,2.39370567 C0.924874463,2.29515271 0.952074059,2.14227379 0.968198225,2.05397392 C0.984323604,1.96567525 1.00057639,1.89041663 1.00431713,1.88673254 L1.01111794,1.88003572 L1.80383747,1.88003572 L2.596557,1.88003572 L2.60535861,1.88869883 L2.61416145,1.89736193 L2.60041544,1.96634661 C2.59285507,2.0042877 2.57049188,2.12134114 2.55072039,2.22646429 C2.53094769,2.33158744 2.49770806,2.50898276 2.47685426,2.62067611 C2.45600047,2.73236946 2.42584638,2.89095012 2.40984597,2.97307759 C2.39384435,3.05520505 2.36146377,3.22722475 2.33788965,3.3553436 C2.31431432,3.48346244 2.29507549,3.59500646 2.29513616,3.60321921 L2.2952575,3.61815148 L2.59128136,3.61815148 L2.88730644,3.61815148 L2.90040452,3.54349015 C2.90760938,3.50242641 2.91920048,3.4285117 2.92616388,3.37923522 C2.93312606,3.32995874 2.9499115,3.22513424 2.96346337,3.14629187 C2.97701646,3.06744951 3.00409472,2.91155665 3.02363688,2.7998633 C3.04317905,2.68816995 3.07588966,2.4973356 3.09632728,2.37578695 C3.11676368,2.25423831 3.14708242,2.07684299 3.16370127,1.98157513 C3.18032,1.88630727 3.2099327,1.7250388 3.22950738,1.62320075 C3.24908194,1.52136269 3.28168651,1.34934299 3.30196202,1.24093474 C3.32223741,1.13252649 3.3526127,0.96857021 3.36946269,0.876587452 C3.3863128,0.784604694 3.41703596,0.617960606 3.43773662,0.506267257 C3.45843729,0.394573908 3.48457667,0.264215227 3.49582403,0.216581299 L3.5162739,0.129974156 L3.21654665,0.129974156 L2.91681989,0.129974156 L2.90866742,0.186716767 C2.9041841,0.217925202 2.88970402,0.305278958 2.87649067,0.380836224 C2.86327611,0.456393489 2.83924092,0.590783883 2.82307672,0.679481542 C2.80691251,0.768179202 2.77737358,0.937511097 2.75743465,1.05577464 C2.73749451,1.17403819 2.7120846,1.33059045 2.7009667,1.40366896 L2.68075113,1.53653985 L2.24076366,1.54530688 L1.80077498,1.55407391 L1.43224272,1.54546337 C1.22954949,1.54072805 1.0625869,1.53591269 1.06121339,1.53476231 C1.05983988,1.53361551 1.06674383,1.4871905 1.07655495,1.43160066 C1.08636486,1.37601082 1.10492543,1.27945999 1.11780025,1.21704312 C1.13067507,1.15462624 1.15508154,1.03098708 1.17203685,0.942289422 C1.18899095,0.853591763 1.20819702,0.74339164 1.21471511,0.697400261 C1.22123321,0.651408882 1.23489429,0.574806358 1.24507305,0.52717243 C1.25525061,0.479538501 1.27456709,0.379202037 1.28799762,0.304203835 C1.30142816,0.229204439 1.31573716,0.159321434 1.3197958,0.148908269 L1.32717538,0.129974156 L1.02986779,0.129974156 L0.732560203,0.129974156 L0.713517938,0.234500018 C0.703043115,0.291989241 0.689078706,0.373967381 0.682484166,0.416673662 C0.675889626,0.459379942 0.653744833,0.596458144 0.633273245,0.721291887 C0.612802871,0.84612563 0.582582041,1.03158437 0.566118138,1.13342243 C0.549653021,1.23526048 0.519668795,1.42071922 0.499487197,1.54555297 C0.479305599,1.67038671 0.446005295,1.86390887 0.4254876,1.97560222 C0.404969905,2.08729557 0.375264748,2.24587624 0.359476679,2.3280037 C0.343687397,2.41013116 0.313600035,2.56602402 0.292613988,2.67443227 C0.271629155,2.78284052 0.241013987,2.93604557 0.224581631,3.01488793 C0.208148062,3.0937303 0.189981833,3.18511576 0.184209942,3.21796675 C0.178439265,3.25081773 0.159657869,3.34556595 0.142475664,3.42851887 C0.125292247,3.51147178 0.111233197,3.58807431 0.111233197,3.5987467 L0.111233197,3.61815148 L0.40604493,3.61815148 L0.406035224,3.61815148 Z M3.6696828,3.61815148 L3.93066933,3.61815148 L3.93803423,3.59925559 C3.94208498,3.58886273 3.94539912,3.56160239 3.94539912,3.53867598 C3.94539912,3.51574958 3.96181061,3.39658174 3.98186905,3.27385882 C4.00192749,3.1511347 4.03506982,2.95127648 4.0555186,2.82972783 C4.07596737,2.70817919 4.10616636,2.53078387 4.12262747,2.43551601 C4.13908859,2.34024816 4.16836313,2.18166749 4.18768216,2.08311454 C4.20700119,1.98456158 4.23665805,1.83135654 4.2535863,1.74265888 C4.27051468,1.65396122 4.3038043,1.48521228 4.32756345,1.3676607 C4.3513226,1.25010912 4.37372499,1.14921121 4.37734671,1.14344138 L4.38393166,1.13295176 L4.1200058,1.13617355 L3.85607993,1.13939533 L3.83409918,1.2946909 C3.82200988,1.38010346 3.79557869,1.54943535 3.77536324,1.670984 C3.75514791,1.79253264 3.72457012,1.97799139 3.70741291,2.08311454 C3.69025558,2.18823769 3.66033444,2.35756959 3.64092138,2.45940764 C3.62150844,2.56124569 3.59175924,2.71713855 3.57481193,2.80583621 C3.55786476,2.89453387 3.52745513,3.05042672 3.50723495,3.15226478 C3.48701476,3.25410283 3.45988239,3.38849323 3.44694071,3.4509101 C3.43399891,3.51332697 3.42009966,3.57649045 3.41605327,3.5912734 L3.40869626,3.61815148 L3.6696828,3.61815148 Z M9.77371379,3.61815148 L10.0327662,3.61815148 L10.0405474,3.5102342 C10.0448257,3.45088023 10.0594866,3.33127278 10.0731246,3.24443986 C10.0867638,3.15760695 10.1146878,2.98442611 10.1351788,2.85959237 C10.155671,2.73475862 10.1937543,2.52697555 10.2198085,2.39785326 C10.2458627,2.26872977 10.2753155,2.14038396 10.2852589,2.11263742 C10.295201,2.08489208 10.3033365,2.05482685 10.3033365,2.04582568 C10.3033365,2.03682332 10.3228132,1.98777501 10.346619,1.9368285 C10.3704237,1.885882 10.4147873,1.80786868 10.4452047,1.76346729 L10.5005078,1.6827351 L10.5745377,1.61525798 L10.6485665,1.54777966 L10.7398538,1.50485597 L10.8311424,1.46193228 L10.9706773,1.46264903 L11.1102122,1.46336577 L11.1788136,1.48354942 C11.216545,1.49465186 11.2506704,1.50373426 11.2546478,1.50373426 C11.2586263,1.50373426 11.2618805,1.49103467 11.2618805,1.47551228 C11.2618805,1.45999108 11.2755307,1.38130521 11.2922142,1.30065544 C11.3088977,1.22000687 11.3225479,1.15061842 11.3225479,1.14646009 C11.3225479,1.14230175 11.2829624,1.12704814 11.2345802,1.11256384 C11.186198,1.09807954 11.1193123,1.08290836 11.0859452,1.07885156 L11.0252779,1.07147502 L10.9464103,1.08520913 C10.9030332,1.09276246 10.8385341,1.10943762 10.8030789,1.12226504 C10.7676249,1.13509245 10.7090846,1.16418528 10.6729899,1.18691816 C10.6368953,1.20964985 10.5807489,1.25394851 10.5482203,1.28535763 C10.5156916,1.31676676 10.4609794,1.3800951 10.4266368,1.42608648 C10.392293,1.47207786 10.356378,1.5204584 10.3468229,1.53359879 L10.3294514,1.55749042 L10.339999,1.50970717 C10.3458012,1.48342638 10.3619594,1.39741653 10.375908,1.31857416 C10.3898566,1.2397318 10.4041729,1.16581708 10.4077208,1.15431924 L10.4141733,1.13341406 L10.1828196,1.13341406 L9.95146594,1.13341406 L9.95146594,1.16220945 C9.95146594,1.1780472 9.93781118,1.27346438 9.92112208,1.37424762 C9.90443298,1.47503205 9.87691282,1.64350027 9.85996613,1.74862342 C9.84301943,1.85374657 9.8129425,2.03651751 9.79312843,2.15478105 C9.77331448,2.2730446 9.74322906,2.44237649 9.72627205,2.53107415 C9.70931504,2.61977181 9.67920475,2.77566467 9.65936022,2.87750272 C9.63951569,2.97934078 9.60656725,3.14598486 9.58614129,3.24782292 C9.56571544,3.34966097 9.54127633,3.46992783 9.53183225,3.515083 C9.52238804,3.56023818 9.51466108,3.6018992 9.51466108,3.60766305 L9.51466108,3.61815148 L9.77371379,3.61814311 L9.77371379,3.61815148 Z M15.9231926,3.61815148 L16.1880687,3.61815148 L16.1880687,3.53834508 L16.1880687,3.4585375 L16.2185916,3.26060494 C16.2353807,3.15174036 16.2630766,2.97934914 16.2801399,2.87751109 C16.2972031,2.77567303 16.3184719,2.64665825 16.3274021,2.59081158 C16.3363336,2.53496491 16.3600011,2.41401355 16.3799983,2.32203079 C16.3999955,2.23004804 16.4249722,2.13059914 16.4355041,2.10103326 C16.4460347,2.07146737 16.4547308,2.04044768 16.4548278,2.03210114 C16.4549492,2.0237546 16.4775041,1.97007848 16.5050034,1.9128222 L16.555003,1.80871922 L16.6209641,1.72243342 L16.6869253,1.63614762 L16.7591146,1.58271997 C16.7988189,1.55333566 16.862664,1.51433975 16.9009912,1.49606385 L16.9706774,1.46283419 L17.1223457,1.46386153 L17.2740141,1.46488886 L17.3337192,1.48376564 L17.3934244,1.50264122 L17.4034867,1.49651779 L17.413549,1.49039556 L17.4140586,1.45227648 C17.4143376,1.43131157 17.4273241,1.35330183 17.4429192,1.27892123 L17.4712752,1.14368388 L17.4393799,1.13139044 C17.4218386,1.12462911 17.3801856,1.1106334 17.3468185,1.10028833 L17.2861512,1.08147964 L17.17695,1.0817544 L17.0677488,1.08202915 L16.9787546,1.11285532 L16.8897605,1.1436803 L16.8229391,1.18334995 L16.7561176,1.22301961 L16.669242,1.3126132 L16.5823676,1.4022068 L16.5356913,1.47170873 C16.5100193,1.50993414 16.4874171,1.53950002 16.4854648,1.5374107 C16.4835113,1.53532018 16.4974648,1.45566431 16.5164719,1.36039645 C16.535479,1.2651286 16.5512658,1.17508703 16.5515534,1.16030409 L16.5520751,1.1334272 L16.327606,1.1334272 L16.1031368,1.1334272 L16.1031368,1.14103908 C16.1031368,1.14522489 16.0919461,1.22182741 16.0782681,1.31126691 C16.0645912,1.40070521 16.0371283,1.57333176 16.0172416,1.6948804 C15.9973536,1.81642905 15.9647218,2.01263902 15.9447271,2.13090257 C15.9247312,2.24916611 15.894588,2.41849801 15.8777419,2.50719567 C15.8608958,2.59589333 15.8309746,2.75178618 15.8112517,2.85362424 C15.7915287,2.95546229 15.7591214,3.11941857 15.7392359,3.21797153 C15.7193504,3.31652448 15.6930086,3.44688316 15.6806992,3.50765749 L15.6583178,3.61815625 L15.9231951,3.61815625 L15.9231926,3.61815148 Z M4.18287366,0.70311036 L4.25654638,0.703373168 L4.31510626,0.683728279 L4.37366602,0.664083389 L4.42549425,0.612324572 L4.47732236,0.56056456 L4.50462182,0.491606161 L4.53192127,0.422646568 L4.5328968,0.32110716 L4.53387233,0.219567752 L4.5096054,0.179918405 L4.48533846,0.140270252 L4.4430896,0.114516275 L4.40084074,0.0887622969 L4.30962145,0.0887622969 L4.21840216,0.0887611023 L4.15629991,0.116134932 L4.09419767,0.143508762 L4.05814865,0.181538257 L4.0220995,0.219567752 L3.99378945,0.285269722 L3.96547928,0.350971692 L3.96012782,0.453313859 L3.95477635,0.555656026 L3.98113328,0.606521296 L4.00749008,0.657385372 L4.05834557,0.680117059 L4.10920094,0.702848746 L4.18287366,0.703111554 L4.18287366,0.70311036 Z",
	  id: "path2997"
	}))));

	var index$1 = {
	  amex: amex,
	  dinersclub: dinersclub,
	  discover: discover,
	  hipercard: hipercard,
	  jcb: jcb,
	  unionpay: unionpay,
	  mastercard: mastercard,
	  placeholder: placeholder,
	  visa: visa
	};

	const useStyles$8 = makeStyles$1((theme) => ({
	    form: {
	        paddingTop: theme.spacing(2),
	        paddingBottom: theme.spacing(2),
	    },
	}));
	const PaymentForm = ({ width, height, payment, setPayment, setFormAwait, checkout, back, next, termsUrl, isActive, isLoading, paymentIcon, paymentTitle, }) => {
	    const classes = useStyles$8();
	    const { meta, getCardImageProps, getCardNumberProps, getExpiryDateProps, getCVCProps, } = usePaymentCard();
	    const { erroredInputs, touchedInputs } = meta;
	    const { setName, setNumber, setCvc, setMonth, setYear, setTerms, err, run, } = useMidstream({
	        name: [isRequired],
	        number: [isRequired],
	        cvc: [isRequired],
	        month: [isRequired],
	        year: [isRequired],
	    }, {
	        dst: (k, v) => {
	            if (k == 'terms') {
	                return;
	            }
	            setPayment(k, v);
	        },
	    });
	    let { ...cardNumberProps } = getCardNumberProps({
	        onBlur: (e) => {
	            setNumber(e.target.value);
	        },
	        onChange: (e) => {
	            setNumber(e.target.value);
	        },
	    });
	    let cardNumberPropsRef = cardNumberProps.ref;
	    delete cardNumberProps.ref;
	    let { ...cvcProps } = getCVCProps({
	        onBlur: (e) => {
	            setCvc(e.target.value);
	        },
	        onChange: (e) => {
	            setCvc(e.target.value);
	        },
	    });
	    let cvcPropsRef = cvcProps.ref;
	    delete cvcProps.ref;
	    let { ...expiryDateProps } = getExpiryDateProps({
	        onBlur: (e) => {
	            var _a;
	            let v = (_a = e.target.value) !== null && _a !== void 0 ? _a : '';
	            let [month, year] = v.replace(/\s+/g, '').split('/');
	            setMonth(`${parseInt(month, 10)}`);
	            setYear(`20${year}`);
	        },
	        onChange: (e) => {
	            var _a;
	            let v = (_a = e.target.value) !== null && _a !== void 0 ? _a : '';
	            let [month, year] = v.replace(/\s+/g, '').split('/');
	            setMonth(`${parseInt(month, 10)}`);
	            setYear(`20${year}`);
	        },
	    });
	    let expiryDatePropsRef = expiryDateProps.ref;
	    delete expiryDateProps.ref;
	    const submit = React.useMemo(() => async () => {
	        let ret = await run();
	        if (ret instanceof Error) {
	            console.log('payment form error', ret);
	            throw ret;
	        }
	    }, []);
	    if (isActive) {
	        raf_1(() => {
	            setFormAwait(submit);
	        });
	    }
	    return (React__default.createElement("div", { className: 'payment' },
	        React__default.createElement(StyledGrid, { container: true },
	            React__default.createElement(StyledGrid, { item: true, xs: 12, className: 'payment-header' },
	                React__default.createElement(StyledGrid, { container: true, spacing: 1, alignItems: 'center' },
	                    React__default.createElement(StyledGrid, { item: true, className: 'payment-icon' }, paymentIcon || React__default.createElement(LockIcon, { style: { fontSize: '2rem' } })),
	                    React__default.createElement(StyledGrid, { item: true, className: 'payment-title' }, paymentTitle || (React__default.createElement(Typography$1, { variant: 'h6' }, "Payment Information")))))),
	        React__default.createElement(StyledGrid, { container: true, className: classnames(classes.form, 'payment-body'), spacing: 3 },
	            React__default.createElement(StyledGrid, { item: true, xs: 12, className: 'payment-card-name' },
	                React__default.createElement(MUIText, { fullWidth: true, label: 'Name on Card', variant: undefined, size: 'medium', value: payment.name, setValue: setName, error: err.name })),
	            React__default.createElement(StyledGrid, { item: true, xs: 12, className: 'payment-card-numbers' },
	                React__default.createElement(TextField$1, Object.assign({}, cardNumberProps, { inputRef: cardNumberPropsRef, fullWidth: true, label: 'Number', placeholder: '0000 0000 0000 0000', size: 'medium', error: touchedInputs.cardNumber && erroredInputs.cardNumber || err.number, helperText: touchedInputs.cardNumber && erroredInputs.cardNumber || err.number && err.number.message, InputProps: {
	                        startAdornment: (React__default.createElement(InputAdornment$1, { position: 'start' },
	                            React__default.createElement("svg", Object.assign({}, getCardImageProps({ images: index$1 }))))),
	                    } }))),
	            React__default.createElement(StyledGrid, { item: true, xs: 6, className: 'payment-card-expiry' },
	                React__default.createElement(TextField$1, Object.assign({}, expiryDateProps, { inputRef: expiryDatePropsRef, fullWidth: true, label: 'Expiry Date', placeholder: 'MM/YY', size: 'medium', error: touchedInputs.expiryDate && erroredInputs.expiryDate || err.month || err.year, helperText: touchedInputs.expiryDate && erroredInputs.expiryDate || err.month && err.month.message || err.year && err.year.message }))),
	            React__default.createElement(StyledGrid, { item: true, xs: 6, className: 'payment-card-cvc' },
	                React__default.createElement(TextField$1, Object.assign({}, cvcProps, { inputRef: cvcPropsRef, fullWidth: true, label: 'CVC', placeholder: '123', size: 'medium', error: touchedInputs.cvc && erroredInputs.cvc || err.cvc, helperText: touchedInputs.cvc && erroredInputs.cvc || err.cvc && err.cvc.message }))))));
	};

	var Person = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _react = interopRequireDefault(React__default);

	var _createSvgIcon = interopRequireDefault(createSvgIcon_1);

	var _default = (0, _createSvgIcon.default)(_react.default.createElement("path", {
	  d: "M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v2h16v-2c0-2.66-5.33-4-8-4z"
	}), 'Person');

	exports.default = _default;
	});

	var PersonIcon = unwrapExports(Person);

	var ExpandMore = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _react = interopRequireDefault(React__default);

	var _createSvgIcon = interopRequireDefault(createSvgIcon_1);

	var _default = (0, _createSvgIcon.default)(_react.default.createElement("path", {
	  d: "M16.59 8.59L12 13.17 7.41 8.59 6 10l6 6 6-6z"
	}), 'ExpandMore');

	exports.default = _default;
	});

	var ExpandMoreIcon = unwrapExports(ExpandMore);

	/** MobX - (c) Michel Weststrate 2015 - 2020 - MIT Licensed */
	/*! *****************************************************************************
	Copyright (c) Microsoft Corporation. All rights reserved.
	Licensed under the Apache License, Version 2.0 (the "License"); you may not use
	this file except in compliance with the License. You may obtain a copy of the
	License at http://www.apache.org/licenses/LICENSE-2.0

	THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
	WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
	MERCHANTABLITY OR NON-INFRINGEMENT.

	See the Apache Version 2.0 License for specific language governing permissions
	and limitations under the License.
	***************************************************************************** */
	/* global Reflect, Promise */

	var extendStatics = function(d, b) {
	    extendStatics = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return extendStatics(d, b);
	};

	function __extends(d, b) {
	    extendStatics(d, b);
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	}

	var __assign = function() {
	    __assign = Object.assign || function __assign(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign.apply(this, arguments);
	};

	function __values(o) {
	    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
	    if (m) return m.call(o);
	    return {
	        next: function () {
	            if (o && i >= o.length) o = void 0;
	            return { value: o && o[i++], done: !o };
	        }
	    };
	}

	function __read(o, n) {
	    var m = typeof Symbol === "function" && o[Symbol.iterator];
	    if (!m) return o;
	    var i = m.call(o), r, ar = [], e;
	    try {
	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
	    }
	    catch (error) { e = { error: error }; }
	    finally {
	        try {
	            if (r && !r.done && (m = i["return"])) m.call(i);
	        }
	        finally { if (e) throw e.error; }
	    }
	    return ar;
	}

	function __spread() {
	    for (var ar = [], i = 0; i < arguments.length; i++)
	        ar = ar.concat(__read(arguments[i]));
	    return ar;
	}

	var OBFUSCATED_ERROR = "An invariant failed, however the error is obfuscated because this is a production build.";
	var EMPTY_ARRAY = [];
	Object.freeze(EMPTY_ARRAY);
	var EMPTY_OBJECT = {};
	Object.freeze(EMPTY_OBJECT);
	function getNextId() {
	    return ++globalState.mobxGuid;
	}
	function fail(message) {
	    invariant(false, message);
	    throw "X"; // unreachable
	}
	function invariant(check, message) {
	    if (!check)
	        throw new Error("[mobx] " + (message || OBFUSCATED_ERROR));
	}
	/**
	 * Makes sure that the provided function is invoked at most once.
	 */
	function once(func) {
	    var invoked = false;
	    return function () {
	        if (invoked)
	            return;
	        invoked = true;
	        return func.apply(this, arguments);
	    };
	}
	var noop$2 = function () { };
	function unique(list) {
	    var res = [];
	    list.forEach(function (item) {
	        if (res.indexOf(item) === -1)
	            res.push(item);
	    });
	    return res;
	}
	function isObject$1(value) {
	    return value !== null && typeof value === "object";
	}
	function isPlainObject$2(value) {
	    if (value === null || typeof value !== "object")
	        return false;
	    var proto = Object.getPrototypeOf(value);
	    return proto === Object.prototype || proto === null;
	}
	function addHiddenProp(object, propName, value) {
	    Object.defineProperty(object, propName, {
	        enumerable: false,
	        writable: true,
	        configurable: true,
	        value: value
	    });
	}
	function addHiddenFinalProp(object, propName, value) {
	    Object.defineProperty(object, propName, {
	        enumerable: false,
	        writable: false,
	        configurable: true,
	        value: value
	    });
	}
	function isPropertyConfigurable(object, prop) {
	    var descriptor = Object.getOwnPropertyDescriptor(object, prop);
	    return !descriptor || (descriptor.configurable !== false && descriptor.writable !== false);
	}
	function assertPropertyConfigurable(object, prop) {
	    if (process.env.NODE_ENV !== "production" && !isPropertyConfigurable(object, prop))
	        fail("Cannot make property '" + prop.toString() + "' observable, it is not configurable and writable in the target object");
	}
	function createInstanceofPredicate(name, clazz) {
	    var propName = "isMobX" + name;
	    clazz.prototype[propName] = true;
	    return function (x) {
	        return isObject$1(x) && x[propName] === true;
	    };
	}
	function isES6Map(thing) {
	    return thing instanceof Map;
	}
	function isES6Set(thing) {
	    return thing instanceof Set;
	}
	/**
	 * Returns the following: own keys, prototype keys & own symbol keys, if they are enumerable.
	 */
	function getPlainObjectKeys(object) {
	    var enumerables = new Set();
	    for (var key in object)
	        enumerables.add(key); // *all* enumerables
	    Object.getOwnPropertySymbols(object).forEach(function (k) {
	        if (Object.getOwnPropertyDescriptor(object, k).enumerable)
	            enumerables.add(k);
	    }); // *own* symbols
	    // Note: this implementation is missing enumerable, inherited, symbolic property names! That would however pretty expensive to add,
	    // as there is no efficient iterator that returns *all* properties
	    return Array.from(enumerables);
	}
	function stringifyKey(key) {
	    if (key && key.toString)
	        return key.toString();
	    else
	        return new String(key).toString();
	}
	function getMapLikeKeys(map) {
	    if (isPlainObject$2(map))
	        return Object.keys(map);
	    if (Array.isArray(map))
	        return map.map(function (_a) {
	            var _b = __read(_a, 1), key = _b[0];
	            return key;
	        });
	    if (isES6Map(map) || isObservableMap(map))
	        return Array.from(map.keys());
	    return fail("Cannot get keys from '" + map + "'");
	}
	function toPrimitive(value) {
	    return value === null ? null : typeof value === "object" ? "" + value : value;
	}

	var $mobx = Symbol("mobx administration");
	var Atom = /** @class */ (function () {
	    /**
	     * Create a new atom. For debugging purposes it is recommended to give it a name.
	     * The onBecomeObserved and onBecomeUnobserved callbacks can be used for resource management.
	     */
	    function Atom(name) {
	        if (name === void 0) { name = "Atom@" + getNextId(); }
	        this.name = name;
	        this.isPendingUnobservation = false; // for effective unobserving. BaseAtom has true, for extra optimization, so its onBecomeUnobserved never gets called, because it's not needed
	        this.isBeingObserved = false;
	        this.observers = new Set();
	        this.diffValue = 0;
	        this.lastAccessedBy = 0;
	        this.lowestObserverState = IDerivationState.NOT_TRACKING;
	    }
	    Atom.prototype.onBecomeObserved = function () {
	        if (this.onBecomeObservedListeners) {
	            this.onBecomeObservedListeners.forEach(function (listener) { return listener(); });
	        }
	    };
	    Atom.prototype.onBecomeUnobserved = function () {
	        if (this.onBecomeUnobservedListeners) {
	            this.onBecomeUnobservedListeners.forEach(function (listener) { return listener(); });
	        }
	    };
	    /**
	     * Invoke this method to notify mobx that your atom has been used somehow.
	     * Returns true if there is currently a reactive context.
	     */
	    Atom.prototype.reportObserved = function () {
	        return reportObserved(this);
	    };
	    /**
	     * Invoke this method _after_ this method has changed to signal mobx that all its observers should invalidate.
	     */
	    Atom.prototype.reportChanged = function () {
	        startBatch();
	        propagateChanged(this);
	        endBatch();
	    };
	    Atom.prototype.toString = function () {
	        return this.name;
	    };
	    return Atom;
	}());
	var isAtom = createInstanceofPredicate("Atom", Atom);
	function createAtom(name, onBecomeObservedHandler, onBecomeUnobservedHandler) {
	    if (onBecomeObservedHandler === void 0) { onBecomeObservedHandler = noop$2; }
	    if (onBecomeUnobservedHandler === void 0) { onBecomeUnobservedHandler = noop$2; }
	    var atom = new Atom(name);
	    // default `noop` listener will not initialize the hook Set
	    if (onBecomeObservedHandler !== noop$2) {
	        onBecomeObserved(atom, onBecomeObservedHandler);
	    }
	    if (onBecomeUnobservedHandler !== noop$2) {
	        onBecomeUnobserved(atom, onBecomeUnobservedHandler);
	    }
	    return atom;
	}

	function identityComparer(a, b) {
	    return a === b;
	}
	function structuralComparer(a, b) {
	    return deepEqual(a, b);
	}
	function shallowComparer(a, b) {
	    return deepEqual(a, b, 1);
	}
	function defaultComparer(a, b) {
	    return Object.is(a, b);
	}
	var comparer = {
	    identity: identityComparer,
	    structural: structuralComparer,
	    default: defaultComparer,
	    shallow: shallowComparer
	};

	var mobxDidRunLazyInitializersSymbol = Symbol("mobx did run lazy initializers");
	var mobxPendingDecorators = Symbol("mobx pending decorators");
	var enumerableDescriptorCache = {};
	var nonEnumerableDescriptorCache = {};
	function createPropertyInitializerDescriptor(prop, enumerable) {
	    var cache = enumerable ? enumerableDescriptorCache : nonEnumerableDescriptorCache;
	    return (cache[prop] ||
	        (cache[prop] = {
	            configurable: true,
	            enumerable: enumerable,
	            get: function () {
	                initializeInstance(this);
	                return this[prop];
	            },
	            set: function (value) {
	                initializeInstance(this);
	                this[prop] = value;
	            }
	        }));
	}
	function initializeInstance(target) {
	    var e_1, _a;
	    if (target[mobxDidRunLazyInitializersSymbol] === true)
	        return;
	    var decorators = target[mobxPendingDecorators];
	    if (decorators) {
	        addHiddenProp(target, mobxDidRunLazyInitializersSymbol, true);
	        // Build property key array from both strings and symbols
	        var keys = __spread(Object.getOwnPropertySymbols(decorators), Object.keys(decorators));
	        try {
	            for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
	                var key = keys_1_1.value;
	                var d = decorators[key];
	                d.propertyCreator(target, d.prop, d.descriptor, d.decoratorTarget, d.decoratorArguments);
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	    }
	}
	function createPropDecorator(propertyInitiallyEnumerable, propertyCreator) {
	    return function decoratorFactory() {
	        var decoratorArguments;
	        var decorator = function decorate(target, prop, descriptor, applyImmediately
	        // This is a special parameter to signal the direct application of a decorator, allow extendObservable to skip the entire type decoration part,
	        // as the instance to apply the decorator to equals the target
	        ) {
	            if (applyImmediately === true) {
	                propertyCreator(target, prop, descriptor, target, decoratorArguments);
	                return null;
	            }
	            if (process.env.NODE_ENV !== "production" && !quacksLikeADecorator(arguments))
	                fail("This function is a decorator, but it wasn't invoked like a decorator");
	            if (!Object.prototype.hasOwnProperty.call(target, mobxPendingDecorators)) {
	                var inheritedDecorators = target[mobxPendingDecorators];
	                addHiddenProp(target, mobxPendingDecorators, __assign({}, inheritedDecorators));
	            }
	            target[mobxPendingDecorators][prop] = {
	                prop: prop,
	                propertyCreator: propertyCreator,
	                descriptor: descriptor,
	                decoratorTarget: target,
	                decoratorArguments: decoratorArguments
	            };
	            return createPropertyInitializerDescriptor(prop, propertyInitiallyEnumerable);
	        };
	        if (quacksLikeADecorator(arguments)) {
	            // @decorator
	            decoratorArguments = EMPTY_ARRAY;
	            return decorator.apply(null, arguments);
	        }
	        else {
	            // @decorator(args)
	            decoratorArguments = Array.prototype.slice.call(arguments);
	            return decorator;
	        }
	    };
	}
	function quacksLikeADecorator(args) {
	    return (((args.length === 2 || args.length === 3) &&
	        (typeof args[1] === "string" || typeof args[1] === "symbol")) ||
	        (args.length === 4 && args[3] === true));
	}

	function deepEnhancer(v, _, name) {
	    // it is an observable already, done
	    if (isObservable(v))
	        return v;
	    // something that can be converted and mutated?
	    if (Array.isArray(v))
	        return observable.array(v, { name: name });
	    if (isPlainObject$2(v))
	        return observable.object(v, undefined, { name: name });
	    if (isES6Map(v))
	        return observable.map(v, { name: name });
	    if (isES6Set(v))
	        return observable.set(v, { name: name });
	    return v;
	}
	function shallowEnhancer(v, _, name) {
	    if (v === undefined || v === null)
	        return v;
	    if (isObservableObject(v) || isObservableArray(v) || isObservableMap(v) || isObservableSet(v))
	        return v;
	    if (Array.isArray(v))
	        return observable.array(v, { name: name, deep: false });
	    if (isPlainObject$2(v))
	        return observable.object(v, undefined, { name: name, deep: false });
	    if (isES6Map(v))
	        return observable.map(v, { name: name, deep: false });
	    if (isES6Set(v))
	        return observable.set(v, { name: name, deep: false });
	    return fail(process.env.NODE_ENV !== "production" &&
	        "The shallow modifier / decorator can only used in combination with arrays, objects, maps and sets");
	}
	function referenceEnhancer(newValue) {
	    // never turn into an observable
	    return newValue;
	}
	function refStructEnhancer(v, oldValue, name) {
	    if (process.env.NODE_ENV !== "production" && isObservable(v))
	        throw "observable.struct should not be used with observable values";
	    if (deepEqual(v, oldValue))
	        return oldValue;
	    return v;
	}

	function createDecoratorForEnhancer(enhancer) {
	    invariant(enhancer);
	    var decorator = createPropDecorator(true, function (target, propertyName, descriptor, _decoratorTarget, decoratorArgs) {
	        if (process.env.NODE_ENV !== "production") {
	            invariant(!descriptor || !descriptor.get, "@observable cannot be used on getter (property \"" + stringifyKey(propertyName) + "\"), use @computed instead.");
	        }
	        var initialValue = descriptor
	            ? descriptor.initializer
	                ? descriptor.initializer.call(target)
	                : descriptor.value
	            : undefined;
	        asObservableObject(target).addObservableProp(propertyName, initialValue, enhancer);
	    });
	    var res = 
	    // Extra process checks, as this happens during module initialization
	    typeof process !== "undefined" && process.env && process.env.NODE_ENV !== "production"
	        ? function observableDecorator() {
	            // This wrapper function is just to detect illegal decorator invocations, deprecate in a next version
	            // and simply return the created prop decorator
	            if (arguments.length < 2)
	                return fail("Incorrect decorator invocation. @observable decorator doesn't expect any arguments");
	            return decorator.apply(null, arguments);
	        }
	        : decorator;
	    res.enhancer = enhancer;
	    return res;
	}

	// Predefined bags of create observable options, to avoid allocating temporarily option objects
	// in the majority of cases
	var defaultCreateObservableOptions = {
	    deep: true,
	    name: undefined,
	    defaultDecorator: undefined,
	    proxy: true
	};
	Object.freeze(defaultCreateObservableOptions);
	function assertValidOption(key) {
	    if (!/^(deep|name|equals|defaultDecorator|proxy)$/.test(key))
	        fail("invalid option for (extend)observable: " + key);
	}
	function asCreateObservableOptions(thing) {
	    if (thing === null || thing === undefined)
	        return defaultCreateObservableOptions;
	    if (typeof thing === "string")
	        return { name: thing, deep: true, proxy: true };
	    if (process.env.NODE_ENV !== "production") {
	        if (typeof thing !== "object")
	            return fail("expected options object");
	        Object.keys(thing).forEach(assertValidOption);
	    }
	    return thing;
	}
	var deepDecorator = createDecoratorForEnhancer(deepEnhancer);
	var shallowDecorator = createDecoratorForEnhancer(shallowEnhancer);
	var refDecorator = createDecoratorForEnhancer(referenceEnhancer);
	var refStructDecorator = createDecoratorForEnhancer(refStructEnhancer);
	function getEnhancerFromOptions(options) {
	    return options.defaultDecorator
	        ? options.defaultDecorator.enhancer
	        : options.deep === false
	            ? referenceEnhancer
	            : deepEnhancer;
	}
	/**
	 * Turns an object, array or function into a reactive structure.
	 * @param v the value which should become observable.
	 */
	function createObservable(v, arg2, arg3) {
	    // @observable someProp;
	    if (typeof arguments[1] === "string" || typeof arguments[1] === "symbol") {
	        return deepDecorator.apply(null, arguments);
	    }
	    // it is an observable already, done
	    if (isObservable(v))
	        return v;
	    // something that can be converted and mutated?
	    var res = isPlainObject$2(v)
	        ? observable.object(v, arg2, arg3)
	        : Array.isArray(v)
	            ? observable.array(v, arg2)
	            : isES6Map(v)
	                ? observable.map(v, arg2)
	                : isES6Set(v)
	                    ? observable.set(v, arg2)
	                    : v;
	    // this value could be converted to a new observable data structure, return it
	    if (res !== v)
	        return res;
	    // otherwise, just box it
	    fail(process.env.NODE_ENV !== "production" &&
	        "The provided value could not be converted into an observable. If you want just create an observable reference to the object use 'observable.box(value)'");
	}
	var observableFactories = {
	    box: function (value, options) {
	        if (arguments.length > 2)
	            incorrectlyUsedAsDecorator("box");
	        var o = asCreateObservableOptions(options);
	        return new ObservableValue(value, getEnhancerFromOptions(o), o.name, true, o.equals);
	    },
	    array: function (initialValues, options) {
	        if (arguments.length > 2)
	            incorrectlyUsedAsDecorator("array");
	        var o = asCreateObservableOptions(options);
	        return createObservableArray(initialValues, getEnhancerFromOptions(o), o.name);
	    },
	    map: function (initialValues, options) {
	        if (arguments.length > 2)
	            incorrectlyUsedAsDecorator("map");
	        var o = asCreateObservableOptions(options);
	        return new ObservableMap(initialValues, getEnhancerFromOptions(o), o.name);
	    },
	    set: function (initialValues, options) {
	        if (arguments.length > 2)
	            incorrectlyUsedAsDecorator("set");
	        var o = asCreateObservableOptions(options);
	        return new ObservableSet(initialValues, getEnhancerFromOptions(o), o.name);
	    },
	    object: function (props, decorators, options) {
	        if (typeof arguments[1] === "string")
	            incorrectlyUsedAsDecorator("object");
	        var o = asCreateObservableOptions(options);
	        if (o.proxy === false) {
	            return extendObservable({}, props, decorators, o);
	        }
	        else {
	            var defaultDecorator = getDefaultDecoratorFromObjectOptions(o);
	            var base = extendObservable({}, undefined, undefined, o);
	            var proxy = createDynamicObservableObject(base);
	            extendObservableObjectWithProperties(proxy, props, decorators, defaultDecorator);
	            return proxy;
	        }
	    },
	    ref: refDecorator,
	    shallow: shallowDecorator,
	    deep: deepDecorator,
	    struct: refStructDecorator
	};
	var observable = createObservable;
	// weird trick to keep our typings nicely with our funcs, and still extend the observable function
	Object.keys(observableFactories).forEach(function (name) { return (observable[name] = observableFactories[name]); });
	function incorrectlyUsedAsDecorator(methodName) {
	    fail(
	    // process.env.NODE_ENV !== "production" &&
	    "Expected one or two arguments to observable." + methodName + ". Did you accidentally try to use observable." + methodName + " as decorator?");
	}

	var computedDecorator = createPropDecorator(false, function (instance, propertyName, descriptor, decoratorTarget, decoratorArgs) {
	    var get = descriptor.get, set = descriptor.set; // initialValue is the descriptor for get / set props
	    // Optimization: faster on decorator target or instance? Assuming target
	    // Optimization: find out if declaring on instance isn't just faster. (also makes the property descriptor simpler). But, more memory usage..
	    // Forcing instance now, fixes hot reloadig issues on React Native:
	    var options = decoratorArgs[0] || {};
	    asObservableObject(instance).addComputedProp(instance, propertyName, __assign({ get: get,
	        set: set, context: instance }, options));
	});
	var computedStructDecorator = computedDecorator({ equals: comparer.structural });
	/**
	 * Decorator for class properties: @computed get value() { return expr; }.
	 * For legacy purposes also invokable as ES5 observable created: `computed(() => expr)`;
	 */
	var computed$1 = function computed(arg1, arg2, arg3) {
	    if (typeof arg2 === "string") {
	        // @computed
	        return computedDecorator.apply(null, arguments);
	    }
	    if (arg1 !== null && typeof arg1 === "object" && arguments.length === 1) {
	        // @computed({ options })
	        return computedDecorator.apply(null, arguments);
	    }
	    // computed(expr, options?)
	    if (process.env.NODE_ENV !== "production") {
	        invariant(typeof arg1 === "function", "First argument to `computed` should be an expression.");
	        invariant(arguments.length < 3, "Computed takes one or two arguments if used as function");
	    }
	    var opts = typeof arg2 === "object" ? arg2 : {};
	    opts.get = arg1;
	    opts.set = typeof arg2 === "function" ? arg2 : opts.set;
	    opts.name = opts.name || arg1.name || ""; /* for generated name */
	    return new ComputedValue(opts);
	};
	computed$1.struct = computedStructDecorator;

	var IDerivationState;
	(function (IDerivationState) {
	    // before being run or (outside batch and not being observed)
	    // at this point derivation is not holding any data about dependency tree
	    IDerivationState[IDerivationState["NOT_TRACKING"] = -1] = "NOT_TRACKING";
	    // no shallow dependency changed since last computation
	    // won't recalculate derivation
	    // this is what makes mobx fast
	    IDerivationState[IDerivationState["UP_TO_DATE"] = 0] = "UP_TO_DATE";
	    // some deep dependency changed, but don't know if shallow dependency changed
	    // will require to check first if UP_TO_DATE or POSSIBLY_STALE
	    // currently only ComputedValue will propagate POSSIBLY_STALE
	    //
	    // having this state is second big optimization:
	    // don't have to recompute on every dependency change, but only when it's needed
	    IDerivationState[IDerivationState["POSSIBLY_STALE"] = 1] = "POSSIBLY_STALE";
	    // A shallow dependency has changed since last computation and the derivation
	    // will need to recompute when it's needed next.
	    IDerivationState[IDerivationState["STALE"] = 2] = "STALE";
	})(IDerivationState || (IDerivationState = {}));
	var TraceMode;
	(function (TraceMode) {
	    TraceMode[TraceMode["NONE"] = 0] = "NONE";
	    TraceMode[TraceMode["LOG"] = 1] = "LOG";
	    TraceMode[TraceMode["BREAK"] = 2] = "BREAK";
	})(TraceMode || (TraceMode = {}));
	var CaughtException = /** @class */ (function () {
	    function CaughtException(cause) {
	        this.cause = cause;
	        // Empty
	    }
	    return CaughtException;
	}());
	function isCaughtException(e) {
	    return e instanceof CaughtException;
	}
	/**
	 * Finds out whether any dependency of the derivation has actually changed.
	 * If dependenciesState is 1 then it will recalculate dependencies,
	 * if any dependency changed it will propagate it by changing dependenciesState to 2.
	 *
	 * By iterating over the dependencies in the same order that they were reported and
	 * stopping on the first change, all the recalculations are only called for ComputedValues
	 * that will be tracked by derivation. That is because we assume that if the first x
	 * dependencies of the derivation doesn't change then the derivation should run the same way
	 * up until accessing x-th dependency.
	 */
	function shouldCompute(derivation) {
	    switch (derivation.dependenciesState) {
	        case IDerivationState.UP_TO_DATE:
	            return false;
	        case IDerivationState.NOT_TRACKING:
	        case IDerivationState.STALE:
	            return true;
	        case IDerivationState.POSSIBLY_STALE: {
	            // state propagation can occur outside of action/reactive context #2195
	            var prevAllowStateReads = allowStateReadsStart(true);
	            var prevUntracked = untrackedStart(); // no need for those computeds to be reported, they will be picked up in trackDerivedFunction.
	            var obs = derivation.observing, l = obs.length;
	            for (var i = 0; i < l; i++) {
	                var obj = obs[i];
	                if (isComputedValue(obj)) {
	                    if (globalState.disableErrorBoundaries) {
	                        obj.get();
	                    }
	                    else {
	                        try {
	                            obj.get();
	                        }
	                        catch (e) {
	                            // we are not interested in the value *or* exception at this moment, but if there is one, notify all
	                            untrackedEnd(prevUntracked);
	                            allowStateReadsEnd(prevAllowStateReads);
	                            return true;
	                        }
	                    }
	                    // if ComputedValue `obj` actually changed it will be computed and propagated to its observers.
	                    // and `derivation` is an observer of `obj`
	                    // invariantShouldCompute(derivation)
	                    if (derivation.dependenciesState === IDerivationState.STALE) {
	                        untrackedEnd(prevUntracked);
	                        allowStateReadsEnd(prevAllowStateReads);
	                        return true;
	                    }
	                }
	            }
	            changeDependenciesStateTo0(derivation);
	            untrackedEnd(prevUntracked);
	            allowStateReadsEnd(prevAllowStateReads);
	            return false;
	        }
	    }
	}
	function checkIfStateModificationsAreAllowed(atom) {
	    var hasObservers = atom.observers.size > 0;
	    // Should never be possible to change an observed observable from inside computed, see #798
	    if (globalState.computationDepth > 0 && hasObservers)
	        fail(process.env.NODE_ENV !== "production" &&
	            "Computed values are not allowed to cause side effects by changing observables that are already being observed. Tried to modify: " + atom.name);
	    // Should not be possible to change observed state outside strict mode, except during initialization, see #563
	    if (!globalState.allowStateChanges && (hasObservers || globalState.enforceActions === "strict"))
	        fail(process.env.NODE_ENV !== "production" &&
	            (globalState.enforceActions
	                ? "Since strict-mode is enabled, changing observed observable values outside actions is not allowed. Please wrap the code in an `action` if this change is intended. Tried to modify: "
	                : "Side effects like changing state are not allowed at this point. Are you trying to modify state from, for example, the render function of a React component? Tried to modify: ") +
	                atom.name);
	}
	function checkIfStateReadsAreAllowed(observable) {
	    if (process.env.NODE_ENV !== "production" &&
	        !globalState.allowStateReads &&
	        globalState.observableRequiresReaction) {
	        console.warn("[mobx] Observable " + observable.name + " being read outside a reactive context");
	    }
	}
	/**
	 * Executes the provided function `f` and tracks which observables are being accessed.
	 * The tracking information is stored on the `derivation` object and the derivation is registered
	 * as observer of any of the accessed observables.
	 */
	function trackDerivedFunction(derivation, f, context) {
	    var prevAllowStateReads = allowStateReadsStart(true);
	    // pre allocate array allocation + room for variation in deps
	    // array will be trimmed by bindDependencies
	    changeDependenciesStateTo0(derivation);
	    derivation.newObserving = new Array(derivation.observing.length + 100);
	    derivation.unboundDepsCount = 0;
	    derivation.runId = ++globalState.runId;
	    var prevTracking = globalState.trackingDerivation;
	    globalState.trackingDerivation = derivation;
	    var result;
	    if (globalState.disableErrorBoundaries === true) {
	        result = f.call(context);
	    }
	    else {
	        try {
	            result = f.call(context);
	        }
	        catch (e) {
	            result = new CaughtException(e);
	        }
	    }
	    globalState.trackingDerivation = prevTracking;
	    bindDependencies(derivation);
	    warnAboutDerivationWithoutDependencies(derivation);
	    allowStateReadsEnd(prevAllowStateReads);
	    return result;
	}
	function warnAboutDerivationWithoutDependencies(derivation) {
	    if (process.env.NODE_ENV === "production")
	        return;
	    if (derivation.observing.length !== 0)
	        return;
	    if (globalState.reactionRequiresObservable || derivation.requiresObservable) {
	        console.warn("[mobx] Derivation " + derivation.name + " is created/updated without reading any observable value");
	    }
	}
	/**
	 * diffs newObserving with observing.
	 * update observing to be newObserving with unique observables
	 * notify observers that become observed/unobserved
	 */
	function bindDependencies(derivation) {
	    // invariant(derivation.dependenciesState !== IDerivationState.NOT_TRACKING, "INTERNAL ERROR bindDependencies expects derivation.dependenciesState !== -1");
	    var prevObserving = derivation.observing;
	    var observing = (derivation.observing = derivation.newObserving);
	    var lowestNewObservingDerivationState = IDerivationState.UP_TO_DATE;
	    // Go through all new observables and check diffValue: (this list can contain duplicates):
	    //   0: first occurrence, change to 1 and keep it
	    //   1: extra occurrence, drop it
	    var i0 = 0, l = derivation.unboundDepsCount;
	    for (var i = 0; i < l; i++) {
	        var dep = observing[i];
	        if (dep.diffValue === 0) {
	            dep.diffValue = 1;
	            if (i0 !== i)
	                observing[i0] = dep;
	            i0++;
	        }
	        // Upcast is 'safe' here, because if dep is IObservable, `dependenciesState` will be undefined,
	        // not hitting the condition
	        if (dep.dependenciesState > lowestNewObservingDerivationState) {
	            lowestNewObservingDerivationState = dep.dependenciesState;
	        }
	    }
	    observing.length = i0;
	    derivation.newObserving = null; // newObserving shouldn't be needed outside tracking (statement moved down to work around FF bug, see #614)
	    // Go through all old observables and check diffValue: (it is unique after last bindDependencies)
	    //   0: it's not in new observables, unobserve it
	    //   1: it keeps being observed, don't want to notify it. change to 0
	    l = prevObserving.length;
	    while (l--) {
	        var dep = prevObserving[l];
	        if (dep.diffValue === 0) {
	            removeObserver(dep, derivation);
	        }
	        dep.diffValue = 0;
	    }
	    // Go through all new observables and check diffValue: (now it should be unique)
	    //   0: it was set to 0 in last loop. don't need to do anything.
	    //   1: it wasn't observed, let's observe it. set back to 0
	    while (i0--) {
	        var dep = observing[i0];
	        if (dep.diffValue === 1) {
	            dep.diffValue = 0;
	            addObserver(dep, derivation);
	        }
	    }
	    // Some new observed derivations may become stale during this derivation computation
	    // so they have had no chance to propagate staleness (#916)
	    if (lowestNewObservingDerivationState !== IDerivationState.UP_TO_DATE) {
	        derivation.dependenciesState = lowestNewObservingDerivationState;
	        derivation.onBecomeStale();
	    }
	}
	function clearObserving(derivation) {
	    // invariant(globalState.inBatch > 0, "INTERNAL ERROR clearObserving should be called only inside batch");
	    var obs = derivation.observing;
	    derivation.observing = [];
	    var i = obs.length;
	    while (i--)
	        removeObserver(obs[i], derivation);
	    derivation.dependenciesState = IDerivationState.NOT_TRACKING;
	}
	function untracked(action) {
	    var prev = untrackedStart();
	    try {
	        return action();
	    }
	    finally {
	        untrackedEnd(prev);
	    }
	}
	function untrackedStart() {
	    var prev = globalState.trackingDerivation;
	    globalState.trackingDerivation = null;
	    return prev;
	}
	function untrackedEnd(prev) {
	    globalState.trackingDerivation = prev;
	}
	function allowStateReadsStart(allowStateReads) {
	    var prev = globalState.allowStateReads;
	    globalState.allowStateReads = allowStateReads;
	    return prev;
	}
	function allowStateReadsEnd(prev) {
	    globalState.allowStateReads = prev;
	}
	/**
	 * needed to keep `lowestObserverState` correct. when changing from (2 or 1) to 0
	 *
	 */
	function changeDependenciesStateTo0(derivation) {
	    if (derivation.dependenciesState === IDerivationState.UP_TO_DATE)
	        return;
	    derivation.dependenciesState = IDerivationState.UP_TO_DATE;
	    var obs = derivation.observing;
	    var i = obs.length;
	    while (i--)
	        obs[i].lowestObserverState = IDerivationState.UP_TO_DATE;
	}

	// we don't use globalState for these in order to avoid possible issues with multiple
	// mobx versions
	var currentActionId = 0;
	var nextActionId = 1;
	var functionNameDescriptor = Object.getOwnPropertyDescriptor(function () { }, "name");
	var isFunctionNameConfigurable = functionNameDescriptor && functionNameDescriptor.configurable;
	function createAction(actionName, fn, ref) {
	    if (process.env.NODE_ENV !== "production") {
	        invariant(typeof fn === "function", "`action` can only be invoked on functions");
	        if (typeof actionName !== "string" || !actionName)
	            fail("actions should have valid names, got: '" + actionName + "'");
	    }
	    var res = function () {
	        return executeAction(actionName, fn, ref || this, arguments);
	    };
	    res.isMobxAction = true;
	    if (process.env.NODE_ENV !== "production") {
	        if (isFunctionNameConfigurable) {
	            Object.defineProperty(res, "name", { value: actionName });
	        }
	    }
	    return res;
	}
	function executeAction(actionName, fn, scope, args) {
	    var runInfo = _startAction(actionName, scope, args);
	    try {
	        return fn.apply(scope, args);
	    }
	    catch (err) {
	        runInfo.error = err;
	        throw err;
	    }
	    finally {
	        _endAction(runInfo);
	    }
	}
	function _startAction(actionName, scope, args) {
	    var notifySpy = isSpyEnabled() && !!actionName;
	    var startTime = 0;
	    if (notifySpy && process.env.NODE_ENV !== "production") {
	        startTime = Date.now();
	        var l = (args && args.length) || 0;
	        var flattendArgs = new Array(l);
	        if (l > 0)
	            for (var i = 0; i < l; i++)
	                flattendArgs[i] = args[i];
	        spyReportStart({
	            type: "action",
	            name: actionName,
	            object: scope,
	            arguments: flattendArgs
	        });
	    }
	    var prevDerivation = untrackedStart();
	    startBatch();
	    var prevAllowStateChanges = allowStateChangesStart(true);
	    var prevAllowStateReads = allowStateReadsStart(true);
	    var runInfo = {
	        prevDerivation: prevDerivation,
	        prevAllowStateChanges: prevAllowStateChanges,
	        prevAllowStateReads: prevAllowStateReads,
	        notifySpy: notifySpy,
	        startTime: startTime,
	        actionId: nextActionId++,
	        parentActionId: currentActionId
	    };
	    currentActionId = runInfo.actionId;
	    return runInfo;
	}
	function _endAction(runInfo) {
	    if (currentActionId !== runInfo.actionId) {
	        fail("invalid action stack. did you forget to finish an action?");
	    }
	    currentActionId = runInfo.parentActionId;
	    if (runInfo.error !== undefined) {
	        globalState.suppressReactionErrors = true;
	    }
	    allowStateChangesEnd(runInfo.prevAllowStateChanges);
	    allowStateReadsEnd(runInfo.prevAllowStateReads);
	    endBatch();
	    untrackedEnd(runInfo.prevDerivation);
	    if (runInfo.notifySpy && process.env.NODE_ENV !== "production") {
	        spyReportEnd({ time: Date.now() - runInfo.startTime });
	    }
	    globalState.suppressReactionErrors = false;
	}
	function allowStateChanges(allowStateChanges, func) {
	    var prev = allowStateChangesStart(allowStateChanges);
	    var res;
	    try {
	        res = func();
	    }
	    finally {
	        allowStateChangesEnd(prev);
	    }
	    return res;
	}
	function allowStateChangesStart(allowStateChanges) {
	    var prev = globalState.allowStateChanges;
	    globalState.allowStateChanges = allowStateChanges;
	    return prev;
	}
	function allowStateChangesEnd(prev) {
	    globalState.allowStateChanges = prev;
	}

	var ObservableValue = /** @class */ (function (_super) {
	    __extends(ObservableValue, _super);
	    function ObservableValue(value, enhancer, name, notifySpy, equals) {
	        if (name === void 0) { name = "ObservableValue@" + getNextId(); }
	        if (notifySpy === void 0) { notifySpy = true; }
	        if (equals === void 0) { equals = comparer.default; }
	        var _this = _super.call(this, name) || this;
	        _this.enhancer = enhancer;
	        _this.name = name;
	        _this.equals = equals;
	        _this.hasUnreportedChange = false;
	        _this.value = enhancer(value, undefined, name);
	        if (notifySpy && isSpyEnabled() && process.env.NODE_ENV !== "production") {
	            // only notify spy if this is a stand-alone observable
	            spyReport({ type: "create", name: _this.name, newValue: "" + _this.value });
	        }
	        return _this;
	    }
	    ObservableValue.prototype.dehanceValue = function (value) {
	        if (this.dehancer !== undefined)
	            return this.dehancer(value);
	        return value;
	    };
	    ObservableValue.prototype.set = function (newValue) {
	        var oldValue = this.value;
	        newValue = this.prepareNewValue(newValue);
	        if (newValue !== globalState.UNCHANGED) {
	            var notifySpy = isSpyEnabled();
	            if (notifySpy && process.env.NODE_ENV !== "production") {
	                spyReportStart({
	                    type: "update",
	                    name: this.name,
	                    newValue: newValue,
	                    oldValue: oldValue
	                });
	            }
	            this.setNewValue(newValue);
	            if (notifySpy && process.env.NODE_ENV !== "production")
	                spyReportEnd();
	        }
	    };
	    ObservableValue.prototype.prepareNewValue = function (newValue) {
	        checkIfStateModificationsAreAllowed(this);
	        if (hasInterceptors(this)) {
	            var change = interceptChange(this, {
	                object: this,
	                type: "update",
	                newValue: newValue
	            });
	            if (!change)
	                return globalState.UNCHANGED;
	            newValue = change.newValue;
	        }
	        // apply modifier
	        newValue = this.enhancer(newValue, this.value, this.name);
	        return this.equals(this.value, newValue) ? globalState.UNCHANGED : newValue;
	    };
	    ObservableValue.prototype.setNewValue = function (newValue) {
	        var oldValue = this.value;
	        this.value = newValue;
	        this.reportChanged();
	        if (hasListeners(this)) {
	            notifyListeners(this, {
	                type: "update",
	                object: this,
	                newValue: newValue,
	                oldValue: oldValue
	            });
	        }
	    };
	    ObservableValue.prototype.get = function () {
	        this.reportObserved();
	        return this.dehanceValue(this.value);
	    };
	    ObservableValue.prototype.intercept = function (handler) {
	        return registerInterceptor(this, handler);
	    };
	    ObservableValue.prototype.observe = function (listener, fireImmediately) {
	        if (fireImmediately)
	            listener({
	                object: this,
	                type: "update",
	                newValue: this.value,
	                oldValue: undefined
	            });
	        return registerListener(this, listener);
	    };
	    ObservableValue.prototype.toJSON = function () {
	        return this.get();
	    };
	    ObservableValue.prototype.toString = function () {
	        return this.name + "[" + this.value + "]";
	    };
	    ObservableValue.prototype.valueOf = function () {
	        return toPrimitive(this.get());
	    };
	    ObservableValue.prototype[Symbol.toPrimitive] = function () {
	        return this.valueOf();
	    };
	    return ObservableValue;
	}(Atom));
	var isObservableValue = createInstanceofPredicate("ObservableValue", ObservableValue);

	/**
	 * A node in the state dependency root that observes other nodes, and can be observed itself.
	 *
	 * ComputedValue will remember the result of the computation for the duration of the batch, or
	 * while being observed.
	 *
	 * During this time it will recompute only when one of its direct dependencies changed,
	 * but only when it is being accessed with `ComputedValue.get()`.
	 *
	 * Implementation description:
	 * 1. First time it's being accessed it will compute and remember result
	 *    give back remembered result until 2. happens
	 * 2. First time any deep dependency change, propagate POSSIBLY_STALE to all observers, wait for 3.
	 * 3. When it's being accessed, recompute if any shallow dependency changed.
	 *    if result changed: propagate STALE to all observers, that were POSSIBLY_STALE from the last step.
	 *    go to step 2. either way
	 *
	 * If at any point it's outside batch and it isn't observed: reset everything and go to 1.
	 */
	var ComputedValue = /** @class */ (function () {
	    /**
	     * Create a new computed value based on a function expression.
	     *
	     * The `name` property is for debug purposes only.
	     *
	     * The `equals` property specifies the comparer function to use to determine if a newly produced
	     * value differs from the previous value. Two comparers are provided in the library; `defaultComparer`
	     * compares based on identity comparison (===), and `structualComparer` deeply compares the structure.
	     * Structural comparison can be convenient if you always produce a new aggregated object and
	     * don't want to notify observers if it is structurally the same.
	     * This is useful for working with vectors, mouse coordinates etc.
	     */
	    function ComputedValue(options) {
	        this.dependenciesState = IDerivationState.NOT_TRACKING;
	        this.observing = []; // nodes we are looking at. Our value depends on these nodes
	        this.newObserving = null; // during tracking it's an array with new observed observers
	        this.isBeingObserved = false;
	        this.isPendingUnobservation = false;
	        this.observers = new Set();
	        this.diffValue = 0;
	        this.runId = 0;
	        this.lastAccessedBy = 0;
	        this.lowestObserverState = IDerivationState.UP_TO_DATE;
	        this.unboundDepsCount = 0;
	        this.__mapid = "#" + getNextId();
	        this.value = new CaughtException(null);
	        this.isComputing = false; // to check for cycles
	        this.isRunningSetter = false;
	        this.isTracing = TraceMode.NONE;
	        invariant(options.get, "missing option for computed: get");
	        this.derivation = options.get;
	        this.name = options.name || "ComputedValue@" + getNextId();
	        if (options.set)
	            this.setter = createAction(this.name + "-setter", options.set);
	        this.equals =
	            options.equals ||
	                (options.compareStructural || options.struct
	                    ? comparer.structural
	                    : comparer.default);
	        this.scope = options.context;
	        this.requiresReaction = !!options.requiresReaction;
	        this.keepAlive = !!options.keepAlive;
	    }
	    ComputedValue.prototype.onBecomeStale = function () {
	        propagateMaybeChanged(this);
	    };
	    ComputedValue.prototype.onBecomeObserved = function () {
	        if (this.onBecomeObservedListeners) {
	            this.onBecomeObservedListeners.forEach(function (listener) { return listener(); });
	        }
	    };
	    ComputedValue.prototype.onBecomeUnobserved = function () {
	        if (this.onBecomeUnobservedListeners) {
	            this.onBecomeUnobservedListeners.forEach(function (listener) { return listener(); });
	        }
	    };
	    /**
	     * Returns the current value of this computed value.
	     * Will evaluate its computation first if needed.
	     */
	    ComputedValue.prototype.get = function () {
	        if (this.isComputing)
	            fail("Cycle detected in computation " + this.name + ": " + this.derivation);
	        if (globalState.inBatch === 0 && this.observers.size === 0 && !this.keepAlive) {
	            if (shouldCompute(this)) {
	                this.warnAboutUntrackedRead();
	                startBatch(); // See perf test 'computed memoization'
	                this.value = this.computeValue(false);
	                endBatch();
	            }
	        }
	        else {
	            reportObserved(this);
	            if (shouldCompute(this))
	                if (this.trackAndCompute())
	                    propagateChangeConfirmed(this);
	        }
	        var result = this.value;
	        if (isCaughtException(result))
	            throw result.cause;
	        return result;
	    };
	    ComputedValue.prototype.peek = function () {
	        var res = this.computeValue(false);
	        if (isCaughtException(res))
	            throw res.cause;
	        return res;
	    };
	    ComputedValue.prototype.set = function (value) {
	        if (this.setter) {
	            invariant(!this.isRunningSetter, "The setter of computed value '" + this.name + "' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?");
	            this.isRunningSetter = true;
	            try {
	                this.setter.call(this.scope, value);
	            }
	            finally {
	                this.isRunningSetter = false;
	            }
	        }
	        else
	            invariant(false, process.env.NODE_ENV !== "production" &&
	                "[ComputedValue '" + this.name + "'] It is not possible to assign a new value to a computed value.");
	    };
	    ComputedValue.prototype.trackAndCompute = function () {
	        if (isSpyEnabled() && process.env.NODE_ENV !== "production") {
	            spyReport({
	                object: this.scope,
	                type: "compute",
	                name: this.name
	            });
	        }
	        var oldValue = this.value;
	        var wasSuspended = 
	        /* see #1208 */ this.dependenciesState === IDerivationState.NOT_TRACKING;
	        var newValue = this.computeValue(true);
	        var changed = wasSuspended ||
	            isCaughtException(oldValue) ||
	            isCaughtException(newValue) ||
	            !this.equals(oldValue, newValue);
	        if (changed) {
	            this.value = newValue;
	        }
	        return changed;
	    };
	    ComputedValue.prototype.computeValue = function (track) {
	        this.isComputing = true;
	        globalState.computationDepth++;
	        var res;
	        if (track) {
	            res = trackDerivedFunction(this, this.derivation, this.scope);
	        }
	        else {
	            if (globalState.disableErrorBoundaries === true) {
	                res = this.derivation.call(this.scope);
	            }
	            else {
	                try {
	                    res = this.derivation.call(this.scope);
	                }
	                catch (e) {
	                    res = new CaughtException(e);
	                }
	            }
	        }
	        globalState.computationDepth--;
	        this.isComputing = false;
	        return res;
	    };
	    ComputedValue.prototype.suspend = function () {
	        if (!this.keepAlive) {
	            clearObserving(this);
	            this.value = undefined; // don't hold on to computed value!
	        }
	    };
	    ComputedValue.prototype.observe = function (listener, fireImmediately) {
	        var _this = this;
	        var firstTime = true;
	        var prevValue = undefined;
	        return autorun(function () {
	            var newValue = _this.get();
	            if (!firstTime || fireImmediately) {
	                var prevU = untrackedStart();
	                listener({
	                    type: "update",
	                    object: _this,
	                    newValue: newValue,
	                    oldValue: prevValue
	                });
	                untrackedEnd(prevU);
	            }
	            firstTime = false;
	            prevValue = newValue;
	        });
	    };
	    ComputedValue.prototype.warnAboutUntrackedRead = function () {
	        if (process.env.NODE_ENV === "production")
	            return;
	        if (this.requiresReaction === true) {
	            fail("[mobx] Computed value " + this.name + " is read outside a reactive context");
	        }
	        if (this.isTracing !== TraceMode.NONE) {
	            console.log("[mobx.trace] '" + this.name + "' is being read outside a reactive context. Doing a full recompute");
	        }
	        if (globalState.computedRequiresReaction) {
	            console.warn("[mobx] Computed value " + this.name + " is being read outside a reactive context. Doing a full recompute");
	        }
	    };
	    ComputedValue.prototype.toJSON = function () {
	        return this.get();
	    };
	    ComputedValue.prototype.toString = function () {
	        return this.name + "[" + this.derivation.toString() + "]";
	    };
	    ComputedValue.prototype.valueOf = function () {
	        return toPrimitive(this.get());
	    };
	    ComputedValue.prototype[Symbol.toPrimitive] = function () {
	        return this.valueOf();
	    };
	    return ComputedValue;
	}());
	var isComputedValue = createInstanceofPredicate("ComputedValue", ComputedValue);
	var MobXGlobals = /** @class */ (function () {
	    function MobXGlobals() {
	        /**
	         * MobXGlobals version.
	         * MobX compatiblity with other versions loaded in memory as long as this version matches.
	         * It indicates that the global state still stores similar information
	         *
	         * N.B: this version is unrelated to the package version of MobX, and is only the version of the
	         * internal state storage of MobX, and can be the same across many different package versions
	         */
	        this.version = 5;
	        /**
	         * globally unique token to signal unchanged
	         */
	        this.UNCHANGED = {};
	        /**
	         * Currently running derivation
	         */
	        this.trackingDerivation = null;
	        /**
	         * Are we running a computation currently? (not a reaction)
	         */
	        this.computationDepth = 0;
	        /**
	         * Each time a derivation is tracked, it is assigned a unique run-id
	         */
	        this.runId = 0;
	        /**
	         * 'guid' for general purpose. Will be persisted amongst resets.
	         */
	        this.mobxGuid = 0;
	        /**
	         * Are we in a batch block? (and how many of them)
	         */
	        this.inBatch = 0;
	        /**
	         * Observables that don't have observers anymore, and are about to be
	         * suspended, unless somebody else accesses it in the same batch
	         *
	         * @type {IObservable[]}
	         */
	        this.pendingUnobservations = [];
	        /**
	         * List of scheduled, not yet executed, reactions.
	         */
	        this.pendingReactions = [];
	        /**
	         * Are we currently processing reactions?
	         */
	        this.isRunningReactions = false;
	        /**
	         * Is it allowed to change observables at this point?
	         * In general, MobX doesn't allow that when running computations and React.render.
	         * To ensure that those functions stay pure.
	         */
	        this.allowStateChanges = true;
	        /**
	         * Is it allowed to read observables at this point?
	         * Used to hold the state needed for `observableRequiresReaction`
	         */
	        this.allowStateReads = true;
	        /**
	         * If strict mode is enabled, state changes are by default not allowed
	         */
	        this.enforceActions = false;
	        /**
	         * Spy callbacks
	         */
	        this.spyListeners = [];
	        /**
	         * Globally attached error handlers that react specifically to errors in reactions
	         */
	        this.globalReactionErrorHandlers = [];
	        /**
	         * Warn if computed values are accessed outside a reactive context
	         */
	        this.computedRequiresReaction = false;
	        /**
	         * (Experimental)
	         * Warn if you try to create to derivation / reactive context without accessing any observable.
	         */
	        this.reactionRequiresObservable = false;
	        /**
	         * (Experimental)
	         * Warn if observables are accessed outside a reactive context
	         */
	        this.observableRequiresReaction = false;
	        /**
	         * Allows overwriting of computed properties, useful in tests but not prod as it can cause
	         * memory leaks. See https://github.com/mobxjs/mobx/issues/1867
	         */
	        this.computedConfigurable = false;
	        /*
	         * Don't catch and rethrow exceptions. This is useful for inspecting the state of
	         * the stack when an exception occurs while debugging.
	         */
	        this.disableErrorBoundaries = false;
	        /*
	         * If true, we are already handling an exception in an action. Any errors in reactions should be suppressed, as
	         * they are not the cause, see: https://github.com/mobxjs/mobx/issues/1836
	         */
	        this.suppressReactionErrors = false;
	    }
	    return MobXGlobals;
	}());
	var mockGlobal = {};
	function getGlobal() {
	    if (typeof window !== "undefined") {
	        return window;
	    }
	    if (typeof global !== "undefined") {
	        return global;
	    }
	    if (typeof self !== "undefined") {
	        return self;
	    }
	    return mockGlobal;
	}
	var canMergeGlobalState = true;
	var globalState = (function () {
	    var global = getGlobal();
	    if (global.__mobxInstanceCount > 0 && !global.__mobxGlobals)
	        canMergeGlobalState = false;
	    if (global.__mobxGlobals && global.__mobxGlobals.version !== new MobXGlobals().version)
	        canMergeGlobalState = false;
	    if (!canMergeGlobalState) {
	        setTimeout(function () {
	            {
	                fail("There are multiple, different versions of MobX active. Make sure MobX is loaded only once or use `configure({ isolateGlobalState: true })`");
	            }
	        }, 1);
	        return new MobXGlobals();
	    }
	    else if (global.__mobxGlobals) {
	        global.__mobxInstanceCount += 1;
	        if (!global.__mobxGlobals.UNCHANGED)
	            global.__mobxGlobals.UNCHANGED = {}; // make merge backward compatible
	        return global.__mobxGlobals;
	    }
	    else {
	        global.__mobxInstanceCount = 1;
	        return (global.__mobxGlobals = new MobXGlobals());
	    }
	})();
	// function invariantObservers(observable: IObservable) {
	//     const list = observable.observers
	//     const map = observable.observersIndexes
	//     const l = list.length
	//     for (let i = 0; i < l; i++) {
	//         const id = list[i].__mapid
	//         if (i) {
	//             invariant(map[id] === i, "INTERNAL ERROR maps derivation.__mapid to index in list") // for performance
	//         } else {
	//             invariant(!(id in map), "INTERNAL ERROR observer on index 0 shouldn't be held in map.") // for performance
	//         }
	//     }
	//     invariant(
	//         list.length === 0 || Object.keys(map).length === list.length - 1,
	//         "INTERNAL ERROR there is no junk in map"
	//     )
	// }
	function addObserver(observable, node) {
	    // invariant(node.dependenciesState !== -1, "INTERNAL ERROR, can add only dependenciesState !== -1");
	    // invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR add already added node");
	    // invariantObservers(observable);
	    observable.observers.add(node);
	    if (observable.lowestObserverState > node.dependenciesState)
	        observable.lowestObserverState = node.dependenciesState;
	    // invariantObservers(observable);
	    // invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR didn't add node");
	}
	function removeObserver(observable, node) {
	    // invariant(globalState.inBatch > 0, "INTERNAL ERROR, remove should be called only inside batch");
	    // invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR remove already removed node");
	    // invariantObservers(observable);
	    observable.observers.delete(node);
	    if (observable.observers.size === 0) {
	        // deleting last observer
	        queueForUnobservation(observable);
	    }
	    // invariantObservers(observable);
	    // invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR remove already removed node2");
	}
	function queueForUnobservation(observable) {
	    if (observable.isPendingUnobservation === false) {
	        // invariant(observable._observers.length === 0, "INTERNAL ERROR, should only queue for unobservation unobserved observables");
	        observable.isPendingUnobservation = true;
	        globalState.pendingUnobservations.push(observable);
	    }
	}
	/**
	 * Batch starts a transaction, at least for purposes of memoizing ComputedValues when nothing else does.
	 * During a batch `onBecomeUnobserved` will be called at most once per observable.
	 * Avoids unnecessary recalculations.
	 */
	function startBatch() {
	    globalState.inBatch++;
	}
	function endBatch() {
	    if (--globalState.inBatch === 0) {
	        runReactions();
	        // the batch is actually about to finish, all unobserving should happen here.
	        var list = globalState.pendingUnobservations;
	        for (var i = 0; i < list.length; i++) {
	            var observable = list[i];
	            observable.isPendingUnobservation = false;
	            if (observable.observers.size === 0) {
	                if (observable.isBeingObserved) {
	                    // if this observable had reactive observers, trigger the hooks
	                    observable.isBeingObserved = false;
	                    observable.onBecomeUnobserved();
	                }
	                if (observable instanceof ComputedValue) {
	                    // computed values are automatically teared down when the last observer leaves
	                    // this process happens recursively, this computed might be the last observabe of another, etc..
	                    observable.suspend();
	                }
	            }
	        }
	        globalState.pendingUnobservations = [];
	    }
	}
	function reportObserved(observable) {
	    checkIfStateReadsAreAllowed(observable);
	    var derivation = globalState.trackingDerivation;
	    if (derivation !== null) {
	        /**
	         * Simple optimization, give each derivation run an unique id (runId)
	         * Check if last time this observable was accessed the same runId is used
	         * if this is the case, the relation is already known
	         */
	        if (derivation.runId !== observable.lastAccessedBy) {
	            observable.lastAccessedBy = derivation.runId;
	            // Tried storing newObserving, or observing, or both as Set, but performance didn't come close...
	            derivation.newObserving[derivation.unboundDepsCount++] = observable;
	            if (!observable.isBeingObserved) {
	                observable.isBeingObserved = true;
	                observable.onBecomeObserved();
	            }
	        }
	        return true;
	    }
	    else if (observable.observers.size === 0 && globalState.inBatch > 0) {
	        queueForUnobservation(observable);
	    }
	    return false;
	}
	// function invariantLOS(observable: IObservable, msg: string) {
	//     // it's expensive so better not run it in produciton. but temporarily helpful for testing
	//     const min = getObservers(observable).reduce((a, b) => Math.min(a, b.dependenciesState), 2)
	//     if (min >= observable.lowestObserverState) return // <- the only assumption about `lowestObserverState`
	//     throw new Error(
	//         "lowestObserverState is wrong for " +
	//             msg +
	//             " because " +
	//             min +
	//             " < " +
	//             observable.lowestObserverState
	//     )
	// }
	/**
	 * NOTE: current propagation mechanism will in case of self reruning autoruns behave unexpectedly
	 * It will propagate changes to observers from previous run
	 * It's hard or maybe impossible (with reasonable perf) to get it right with current approach
	 * Hopefully self reruning autoruns aren't a feature people should depend on
	 * Also most basic use cases should be ok
	 */
	// Called by Atom when its value changes
	function propagateChanged(observable) {
	    // invariantLOS(observable, "changed start");
	    if (observable.lowestObserverState === IDerivationState.STALE)
	        return;
	    observable.lowestObserverState = IDerivationState.STALE;
	    // Ideally we use for..of here, but the downcompiled version is really slow...
	    observable.observers.forEach(function (d) {
	        if (d.dependenciesState === IDerivationState.UP_TO_DATE) {
	            if (d.isTracing !== TraceMode.NONE) {
	                logTraceInfo(d, observable);
	            }
	            d.onBecomeStale();
	        }
	        d.dependenciesState = IDerivationState.STALE;
	    });
	    // invariantLOS(observable, "changed end");
	}
	// Called by ComputedValue when it recalculate and its value changed
	function propagateChangeConfirmed(observable) {
	    // invariantLOS(observable, "confirmed start");
	    if (observable.lowestObserverState === IDerivationState.STALE)
	        return;
	    observable.lowestObserverState = IDerivationState.STALE;
	    observable.observers.forEach(function (d) {
	        if (d.dependenciesState === IDerivationState.POSSIBLY_STALE)
	            d.dependenciesState = IDerivationState.STALE;
	        else if (d.dependenciesState === IDerivationState.UP_TO_DATE // this happens during computing of `d`, just keep lowestObserverState up to date.
	        )
	            observable.lowestObserverState = IDerivationState.UP_TO_DATE;
	    });
	    // invariantLOS(observable, "confirmed end");
	}
	// Used by computed when its dependency changed, but we don't wan't to immediately recompute.
	function propagateMaybeChanged(observable) {
	    // invariantLOS(observable, "maybe start");
	    if (observable.lowestObserverState !== IDerivationState.UP_TO_DATE)
	        return;
	    observable.lowestObserverState = IDerivationState.POSSIBLY_STALE;
	    observable.observers.forEach(function (d) {
	        if (d.dependenciesState === IDerivationState.UP_TO_DATE) {
	            d.dependenciesState = IDerivationState.POSSIBLY_STALE;
	            if (d.isTracing !== TraceMode.NONE) {
	                logTraceInfo(d, observable);
	            }
	            d.onBecomeStale();
	        }
	    });
	    // invariantLOS(observable, "maybe end");
	}
	function logTraceInfo(derivation, observable) {
	    console.log("[mobx.trace] '" + derivation.name + "' is invalidated due to a change in: '" + observable.name + "'");
	    if (derivation.isTracing === TraceMode.BREAK) {
	        var lines = [];
	        printDepTree(getDependencyTree(derivation), lines, 1);
	        // prettier-ignore
	        new Function("debugger;\n/*\nTracing '" + derivation.name + "'\n\nYou are entering this break point because derivation '" + derivation.name + "' is being traced and '" + observable.name + "' is now forcing it to update.\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\n\n" + (derivation instanceof ComputedValue ? derivation.derivation.toString().replace(/[*]\//g, "/") : "") + "\n\nThe dependencies for this derivation are:\n\n" + lines.join("\n") + "\n*/\n    ")();
	    }
	}
	function printDepTree(tree, lines, depth) {
	    if (lines.length >= 1000) {
	        lines.push("(and many more)");
	        return;
	    }
	    lines.push("" + new Array(depth).join("\t") + tree.name); // MWE: not the fastest, but the easiest way :)
	    if (tree.dependencies)
	        tree.dependencies.forEach(function (child) { return printDepTree(child, lines, depth + 1); });
	}

	var Reaction = /** @class */ (function () {
	    function Reaction(name, onInvalidate, errorHandler, requiresObservable) {
	        if (name === void 0) { name = "Reaction@" + getNextId(); }
	        if (requiresObservable === void 0) { requiresObservable = false; }
	        this.name = name;
	        this.onInvalidate = onInvalidate;
	        this.errorHandler = errorHandler;
	        this.requiresObservable = requiresObservable;
	        this.observing = []; // nodes we are looking at. Our value depends on these nodes
	        this.newObserving = [];
	        this.dependenciesState = IDerivationState.NOT_TRACKING;
	        this.diffValue = 0;
	        this.runId = 0;
	        this.unboundDepsCount = 0;
	        this.__mapid = "#" + getNextId();
	        this.isDisposed = false;
	        this._isScheduled = false;
	        this._isTrackPending = false;
	        this._isRunning = false;
	        this.isTracing = TraceMode.NONE;
	    }
	    Reaction.prototype.onBecomeStale = function () {
	        this.schedule();
	    };
	    Reaction.prototype.schedule = function () {
	        if (!this._isScheduled) {
	            this._isScheduled = true;
	            globalState.pendingReactions.push(this);
	            runReactions();
	        }
	    };
	    Reaction.prototype.isScheduled = function () {
	        return this._isScheduled;
	    };
	    /**
	     * internal, use schedule() if you intend to kick off a reaction
	     */
	    Reaction.prototype.runReaction = function () {
	        if (!this.isDisposed) {
	            startBatch();
	            this._isScheduled = false;
	            if (shouldCompute(this)) {
	                this._isTrackPending = true;
	                try {
	                    this.onInvalidate();
	                    if (this._isTrackPending &&
	                        isSpyEnabled() &&
	                        process.env.NODE_ENV !== "production") {
	                        // onInvalidate didn't trigger track right away..
	                        spyReport({
	                            name: this.name,
	                            type: "scheduled-reaction"
	                        });
	                    }
	                }
	                catch (e) {
	                    this.reportExceptionInDerivation(e);
	                }
	            }
	            endBatch();
	        }
	    };
	    Reaction.prototype.track = function (fn) {
	        if (this.isDisposed) {
	            return;
	            // console.warn("Reaction already disposed") // Note: Not a warning / error in mobx 4 either
	        }
	        startBatch();
	        var notify = isSpyEnabled();
	        var startTime;
	        if (notify && process.env.NODE_ENV !== "production") {
	            startTime = Date.now();
	            spyReportStart({
	                name: this.name,
	                type: "reaction"
	            });
	        }
	        this._isRunning = true;
	        var result = trackDerivedFunction(this, fn, undefined);
	        this._isRunning = false;
	        this._isTrackPending = false;
	        if (this.isDisposed) {
	            // disposed during last run. Clean up everything that was bound after the dispose call.
	            clearObserving(this);
	        }
	        if (isCaughtException(result))
	            this.reportExceptionInDerivation(result.cause);
	        if (notify && process.env.NODE_ENV !== "production") {
	            spyReportEnd({
	                time: Date.now() - startTime
	            });
	        }
	        endBatch();
	    };
	    Reaction.prototype.reportExceptionInDerivation = function (error) {
	        var _this = this;
	        if (this.errorHandler) {
	            this.errorHandler(error, this);
	            return;
	        }
	        if (globalState.disableErrorBoundaries)
	            throw error;
	        var message = "[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '" + this + "'";
	        if (globalState.suppressReactionErrors) {
	            console.warn("[mobx] (error in reaction '" + this.name + "' suppressed, fix error of causing action below)"); // prettier-ignore
	        }
	        else {
	            console.error(message, error);
	            /** If debugging brought you here, please, read the above message :-). Tnx! */
	        }
	        if (isSpyEnabled()) {
	            spyReport({
	                type: "error",
	                name: this.name,
	                message: message,
	                error: "" + error
	            });
	        }
	        globalState.globalReactionErrorHandlers.forEach(function (f) { return f(error, _this); });
	    };
	    Reaction.prototype.dispose = function () {
	        if (!this.isDisposed) {
	            this.isDisposed = true;
	            if (!this._isRunning) {
	                // if disposed while running, clean up later. Maybe not optimal, but rare case
	                startBatch();
	                clearObserving(this);
	                endBatch();
	            }
	        }
	    };
	    Reaction.prototype.getDisposer = function () {
	        var r = this.dispose.bind(this);
	        r[$mobx] = this;
	        return r;
	    };
	    Reaction.prototype.toString = function () {
	        return "Reaction[" + this.name + "]";
	    };
	    Reaction.prototype.trace = function (enterBreakPoint) {
	        if (enterBreakPoint === void 0) { enterBreakPoint = false; }
	        trace(this, enterBreakPoint);
	    };
	    return Reaction;
	}());
	/**
	 * Magic number alert!
	 * Defines within how many times a reaction is allowed to re-trigger itself
	 * until it is assumed that this is gonna be a never ending loop...
	 */
	var MAX_REACTION_ITERATIONS = 100;
	var reactionScheduler = function (f) { return f(); };
	function runReactions() {
	    // Trampolining, if runReactions are already running, new reactions will be picked up
	    if (globalState.inBatch > 0 || globalState.isRunningReactions)
	        return;
	    reactionScheduler(runReactionsHelper);
	}
	function runReactionsHelper() {
	    globalState.isRunningReactions = true;
	    var allReactions = globalState.pendingReactions;
	    var iterations = 0;
	    // While running reactions, new reactions might be triggered.
	    // Hence we work with two variables and check whether
	    // we converge to no remaining reactions after a while.
	    while (allReactions.length > 0) {
	        if (++iterations === MAX_REACTION_ITERATIONS) {
	            console.error("Reaction doesn't converge to a stable state after " + MAX_REACTION_ITERATIONS + " iterations." +
	                (" Probably there is a cycle in the reactive function: " + allReactions[0]));
	            allReactions.splice(0); // clear reactions
	        }
	        var remainingReactions = allReactions.splice(0);
	        for (var i = 0, l = remainingReactions.length; i < l; i++)
	            remainingReactions[i].runReaction();
	    }
	    globalState.isRunningReactions = false;
	}
	var isReaction = createInstanceofPredicate("Reaction", Reaction);

	function isSpyEnabled() {
	    return process.env.NODE_ENV !== "production" && !!globalState.spyListeners.length;
	}
	function spyReport(event) {
	    if (process.env.NODE_ENV === "production")
	        return; // dead code elimination can do the rest
	    if (!globalState.spyListeners.length)
	        return;
	    var listeners = globalState.spyListeners;
	    for (var i = 0, l = listeners.length; i < l; i++)
	        listeners[i](event);
	}
	function spyReportStart(event) {
	    if (process.env.NODE_ENV === "production")
	        return;
	    var change = __assign(__assign({}, event), { spyReportStart: true });
	    spyReport(change);
	}
	var END_EVENT = { spyReportEnd: true };
	function spyReportEnd(change) {
	    if (process.env.NODE_ENV === "production")
	        return;
	    if (change)
	        spyReport(__assign(__assign({}, change), { spyReportEnd: true }));
	    else
	        spyReport(END_EVENT);
	}
	function spy(listener) {
	    if (process.env.NODE_ENV === "production") {
	        console.warn("[mobx.spy] Is a no-op in production builds");
	        return function () { };
	    }
	    else {
	        globalState.spyListeners.push(listener);
	        return once(function () {
	            globalState.spyListeners = globalState.spyListeners.filter(function (l) { return l !== listener; });
	        });
	    }
	}

	function dontReassignFields() {
	    fail(process.env.NODE_ENV !== "production" && "@action fields are not reassignable");
	}
	function namedActionDecorator(name) {
	    return function (target, prop, descriptor) {
	        if (descriptor) {
	            if (process.env.NODE_ENV !== "production" && descriptor.get !== undefined) {
	                return fail("@action cannot be used with getters");
	            }
	            // babel / typescript
	            // @action method() { }
	            if (descriptor.value) {
	                // typescript
	                return {
	                    value: createAction(name, descriptor.value),
	                    enumerable: false,
	                    configurable: true,
	                    writable: true // for typescript, this must be writable, otherwise it cannot inherit :/ (see inheritable actions test)
	                };
	            }
	            // babel only: @action method = () => {}
	            var initializer_1 = descriptor.initializer;
	            return {
	                enumerable: false,
	                configurable: true,
	                writable: true,
	                initializer: function () {
	                    // N.B: we can't immediately invoke initializer; this would be wrong
	                    return createAction(name, initializer_1.call(this));
	                }
	            };
	        }
	        // bound instance methods
	        return actionFieldDecorator(name).apply(this, arguments);
	    };
	}
	function actionFieldDecorator(name) {
	    // Simple property that writes on first invocation to the current instance
	    return function (target, prop, descriptor) {
	        Object.defineProperty(target, prop, {
	            configurable: true,
	            enumerable: false,
	            get: function () {
	                return undefined;
	            },
	            set: function (value) {
	                addHiddenProp(this, prop, action(name, value));
	            }
	        });
	    };
	}
	function boundActionDecorator(target, propertyName, descriptor, applyToInstance) {
	    if (applyToInstance === true) {
	        defineBoundAction(target, propertyName, descriptor.value);
	        return null;
	    }
	    if (descriptor) {
	        // if (descriptor.value)
	        // Typescript / Babel: @action.bound method() { }
	        // also: babel @action.bound method = () => {}
	        return {
	            configurable: true,
	            enumerable: false,
	            get: function () {
	                defineBoundAction(this, propertyName, descriptor.value || descriptor.initializer.call(this));
	                return this[propertyName];
	            },
	            set: dontReassignFields
	        };
	    }
	    // field decorator Typescript @action.bound method = () => {}
	    return {
	        enumerable: false,
	        configurable: true,
	        set: function (v) {
	            defineBoundAction(this, propertyName, v);
	        },
	        get: function () {
	            return undefined;
	        }
	    };
	}

	var action = function action(arg1, arg2, arg3, arg4) {
	    // action(fn() {})
	    if (arguments.length === 1 && typeof arg1 === "function")
	        return createAction(arg1.name || "<unnamed action>", arg1);
	    // action("name", fn() {})
	    if (arguments.length === 2 && typeof arg2 === "function")
	        return createAction(arg1, arg2);
	    // @action("name") fn() {}
	    if (arguments.length === 1 && typeof arg1 === "string")
	        return namedActionDecorator(arg1);
	    // @action fn() {}
	    if (arg4 === true) {
	        // apply to instance immediately
	        addHiddenProp(arg1, arg2, createAction(arg1.name || arg2, arg3.value, this));
	    }
	    else {
	        return namedActionDecorator(arg2).apply(null, arguments);
	    }
	};
	action.bound = boundActionDecorator;
	function runInAction(arg1, arg2) {
	    var actionName = typeof arg1 === "string" ? arg1 : arg1.name || "<unnamed action>";
	    var fn = typeof arg1 === "function" ? arg1 : arg2;
	    if (process.env.NODE_ENV !== "production") {
	        invariant(typeof fn === "function" && fn.length === 0, "`runInAction` expects a function without arguments");
	        if (typeof actionName !== "string" || !actionName)
	            fail("actions should have valid names, got: '" + actionName + "'");
	    }
	    return executeAction(actionName, fn, this, undefined);
	}
	function isAction(thing) {
	    return typeof thing === "function" && thing.isMobxAction === true;
	}
	function defineBoundAction(target, propertyName, fn) {
	    addHiddenProp(target, propertyName, createAction(propertyName, fn.bind(target)));
	}

	/**
	 * Creates a named reactive view and keeps it alive, so that the view is always
	 * updated if one of the dependencies changes, even when the view is not further used by something else.
	 * @param view The reactive view
	 * @returns disposer function, which can be used to stop the view from being updated in the future.
	 */
	function autorun(view, opts) {
	    if (opts === void 0) { opts = EMPTY_OBJECT; }
	    if (process.env.NODE_ENV !== "production") {
	        invariant(typeof view === "function", "Autorun expects a function as first argument");
	        invariant(isAction(view) === false, "Autorun does not accept actions since actions are untrackable");
	    }
	    var name = (opts && opts.name) || view.name || "Autorun@" + getNextId();
	    var runSync = !opts.scheduler && !opts.delay;
	    var reaction;
	    if (runSync) {
	        // normal autorun
	        reaction = new Reaction(name, function () {
	            this.track(reactionRunner);
	        }, opts.onError, opts.requiresObservable);
	    }
	    else {
	        var scheduler_1 = createSchedulerFromOptions(opts);
	        // debounced autorun
	        var isScheduled_1 = false;
	        reaction = new Reaction(name, function () {
	            if (!isScheduled_1) {
	                isScheduled_1 = true;
	                scheduler_1(function () {
	                    isScheduled_1 = false;
	                    if (!reaction.isDisposed)
	                        reaction.track(reactionRunner);
	                });
	            }
	        }, opts.onError, opts.requiresObservable);
	    }
	    function reactionRunner() {
	        view(reaction);
	    }
	    reaction.schedule();
	    return reaction.getDisposer();
	}
	var run = function (f) { return f(); };
	function createSchedulerFromOptions(opts) {
	    return opts.scheduler
	        ? opts.scheduler
	        : opts.delay
	            ? function (f) { return setTimeout(f, opts.delay); }
	            : run;
	}

	function onBecomeObserved(thing, arg2, arg3) {
	    return interceptHook("onBecomeObserved", thing, arg2, arg3);
	}
	function onBecomeUnobserved(thing, arg2, arg3) {
	    return interceptHook("onBecomeUnobserved", thing, arg2, arg3);
	}
	function interceptHook(hook, thing, arg2, arg3) {
	    var atom = typeof arg3 === "function" ? getAtom(thing, arg2) : getAtom(thing);
	    var cb = typeof arg3 === "function" ? arg3 : arg2;
	    var listenersKey = hook + "Listeners";
	    if (atom[listenersKey]) {
	        atom[listenersKey].add(cb);
	    }
	    else {
	        atom[listenersKey] = new Set([cb]);
	    }
	    var orig = atom[hook];
	    if (typeof orig !== "function")
	        return fail(process.env.NODE_ENV !== "production" && "Not an atom that can be (un)observed");
	    return function () {
	        var hookListeners = atom[listenersKey];
	        if (hookListeners) {
	            hookListeners.delete(cb);
	            if (hookListeners.size === 0) {
	                delete atom[listenersKey];
	            }
	        }
	    };
	}

	function extendObservable(target, properties, decorators, options) {
	    if (process.env.NODE_ENV !== "production") {
	        invariant(arguments.length >= 2 && arguments.length <= 4, "'extendObservable' expected 2-4 arguments");
	        invariant(typeof target === "object", "'extendObservable' expects an object as first argument");
	        invariant(!isObservableMap(target), "'extendObservable' should not be used on maps, use map.merge instead");
	    }
	    options = asCreateObservableOptions(options);
	    var defaultDecorator = getDefaultDecoratorFromObjectOptions(options);
	    initializeInstance(target); // Fixes #1740
	    asObservableObject(target, options.name, defaultDecorator.enhancer); // make sure object is observable, even without initial props
	    if (properties)
	        extendObservableObjectWithProperties(target, properties, decorators, defaultDecorator);
	    return target;
	}
	function getDefaultDecoratorFromObjectOptions(options) {
	    return options.defaultDecorator || (options.deep === false ? refDecorator : deepDecorator);
	}
	function extendObservableObjectWithProperties(target, properties, decorators, defaultDecorator) {
	    var e_1, _a, e_2, _b;
	    if (process.env.NODE_ENV !== "production") {
	        invariant(!isObservable(properties), "Extending an object with another observable (object) is not supported. Please construct an explicit propertymap, using `toJS` if need. See issue #540");
	        if (decorators) {
	            var keys = getPlainObjectKeys(decorators);
	            try {
	                for (var keys_1 = __values(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
	                    var key = keys_1_1.value;
	                    if (!(key in properties))
	                        fail("Trying to declare a decorator for unspecified property '" + stringifyKey(key) + "'");
	                }
	            }
	            catch (e_1_1) { e_1 = { error: e_1_1 }; }
	            finally {
	                try {
	                    if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
	                }
	                finally { if (e_1) throw e_1.error; }
	            }
	        }
	    }
	    startBatch();
	    try {
	        var keys = getPlainObjectKeys(properties);
	        try {
	            for (var keys_2 = __values(keys), keys_2_1 = keys_2.next(); !keys_2_1.done; keys_2_1 = keys_2.next()) {
	                var key = keys_2_1.value;
	                var descriptor = Object.getOwnPropertyDescriptor(properties, key);
	                if (process.env.NODE_ENV !== "production") {
	                    if (!isPlainObject$2(properties))
	                        fail("'extendObservabe' only accepts plain objects as second argument");
	                    if (isComputed(descriptor.value))
	                        fail("Passing a 'computed' as initial property value is no longer supported by extendObservable. Use a getter or decorator instead");
	                }
	                var decorator = decorators && key in decorators
	                    ? decorators[key]
	                    : descriptor.get
	                        ? computedDecorator
	                        : defaultDecorator;
	                if (process.env.NODE_ENV !== "production" && typeof decorator !== "function")
	                    fail("Not a valid decorator for '" + stringifyKey(key) + "', got: " + decorator);
	                var resultDescriptor = decorator(target, key, descriptor, true);
	                if (resultDescriptor // otherwise, assume already applied, due to `applyToInstance`
	                )
	                    Object.defineProperty(target, key, resultDescriptor);
	            }
	        }
	        catch (e_2_1) { e_2 = { error: e_2_1 }; }
	        finally {
	            try {
	                if (keys_2_1 && !keys_2_1.done && (_b = keys_2.return)) _b.call(keys_2);
	            }
	            finally { if (e_2) throw e_2.error; }
	        }
	    }
	    finally {
	        endBatch();
	    }
	}

	function getDependencyTree(thing, property) {
	    return nodeToDependencyTree(getAtom(thing, property));
	}
	function nodeToDependencyTree(node) {
	    var result = {
	        name: node.name
	    };
	    if (node.observing && node.observing.length > 0)
	        result.dependencies = unique(node.observing).map(nodeToDependencyTree);
	    return result;
	}

	function _isComputed(value, property) {
	    if (value === null || value === undefined)
	        return false;
	    if (property !== undefined) {
	        if (isObservableObject(value) === false)
	            return false;
	        if (!value[$mobx].values.has(property))
	            return false;
	        var atom = getAtom(value, property);
	        return isComputedValue(atom);
	    }
	    return isComputedValue(value);
	}
	function isComputed(value) {
	    if (arguments.length > 1)
	        return fail(process.env.NODE_ENV !== "production" &&
	            "isComputed expects only 1 argument. Use isObservableProp to inspect the observability of a property");
	    return _isComputed(value);
	}

	function _isObservable(value, property) {
	    if (value === null || value === undefined)
	        return false;
	    if (property !== undefined) {
	        if (process.env.NODE_ENV !== "production" &&
	            (isObservableMap(value) || isObservableArray(value)))
	            return fail("isObservable(object, propertyName) is not supported for arrays and maps. Use map.has or array.length instead.");
	        if (isObservableObject(value)) {
	            return value[$mobx].values.has(property);
	        }
	        return false;
	    }
	    // For first check, see #701
	    return (isObservableObject(value) ||
	        !!value[$mobx] ||
	        isAtom(value) ||
	        isReaction(value) ||
	        isComputedValue(value));
	}
	function isObservable(value) {
	    if (arguments.length !== 1)
	        fail(process.env.NODE_ENV !== "production" &&
	            "isObservable expects only 1 argument. Use isObservableProp to inspect the observability of a property");
	    return _isObservable(value);
	}
	function set(obj, key, value) {
	    if (arguments.length === 2 && !isObservableSet(obj)) {
	        startBatch();
	        var values_1 = key;
	        try {
	            for (var key_1 in values_1)
	                set(obj, key_1, values_1[key_1]);
	        }
	        finally {
	            endBatch();
	        }
	        return;
	    }
	    if (isObservableObject(obj)) {
	        var adm = obj[$mobx];
	        var existingObservable = adm.values.get(key);
	        if (existingObservable) {
	            adm.write(key, value);
	        }
	        else {
	            adm.addObservableProp(key, value, adm.defaultEnhancer);
	        }
	    }
	    else if (isObservableMap(obj)) {
	        obj.set(key, value);
	    }
	    else if (isObservableSet(obj)) {
	        obj.add(key);
	    }
	    else if (isObservableArray(obj)) {
	        if (typeof key !== "number")
	            key = parseInt(key, 10);
	        invariant(key >= 0, "Not a valid index: '" + key + "'");
	        startBatch();
	        if (key >= obj.length)
	            obj.length = key + 1;
	        obj[key] = value;
	        endBatch();
	    }
	    else {
	        return fail(process.env.NODE_ENV !== "production" &&
	            "'set()' can only be used on observable objects, arrays and maps");
	    }
	}

	function trace() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    var enterBreakPoint = false;
	    if (typeof args[args.length - 1] === "boolean")
	        enterBreakPoint = args.pop();
	    var derivation = getAtomFromArgs(args);
	    if (!derivation) {
	        return fail(process.env.NODE_ENV !== "production" &&
	            "'trace(break?)' can only be used inside a tracked computed value or a Reaction. Consider passing in the computed value or reaction explicitly");
	    }
	    if (derivation.isTracing === TraceMode.NONE) {
	        console.log("[mobx.trace] '" + derivation.name + "' tracing enabled");
	    }
	    derivation.isTracing = enterBreakPoint ? TraceMode.BREAK : TraceMode.LOG;
	}
	function getAtomFromArgs(args) {
	    switch (args.length) {
	        case 0:
	            return globalState.trackingDerivation;
	        case 1:
	            return getAtom(args[0]);
	        case 2:
	            return getAtom(args[0], args[1]);
	    }
	}

	/**
	 * During a transaction no views are updated until the end of the transaction.
	 * The transaction will be run synchronously nonetheless.
	 *
	 * @param action a function that updates some reactive state
	 * @returns any value that was returned by the 'action' parameter.
	 */
	function transaction(action, thisArg) {
	    if (thisArg === void 0) { thisArg = undefined; }
	    startBatch();
	    try {
	        return action.apply(thisArg);
	    }
	    finally {
	        endBatch();
	    }
	}

	function getAdm(target) {
	    return target[$mobx];
	}
	function isPropertyKey(val) {
	    return typeof val === "string" || typeof val === "number" || typeof val === "symbol";
	}
	// Optimization: we don't need the intermediate objects and could have a completely custom administration for DynamicObjects,
	// and skip either the internal values map, or the base object with its property descriptors!
	var objectProxyTraps = {
	    has: function (target, name) {
	        if (name === $mobx || name === "constructor" || name === mobxDidRunLazyInitializersSymbol)
	            return true;
	        var adm = getAdm(target);
	        // MWE: should `in` operator be reactive? If not, below code path will be faster / more memory efficient
	        // TODO: check performance stats!
	        // if (adm.values.get(name as string)) return true
	        if (isPropertyKey(name))
	            return adm.has(name);
	        return name in target;
	    },
	    get: function (target, name) {
	        if (name === $mobx || name === "constructor" || name === mobxDidRunLazyInitializersSymbol)
	            return target[name];
	        var adm = getAdm(target);
	        var observable = adm.values.get(name);
	        if (observable instanceof Atom) {
	            var result = observable.get();
	            if (result === undefined) {
	                // This fixes #1796, because deleting a prop that has an
	                // undefined value won't retrigger a observer (no visible effect),
	                // the autorun wouldn't subscribe to future key changes (see also next comment)
	                adm.has(name);
	            }
	            return result;
	        }
	        // make sure we start listening to future keys
	        // note that we only do this here for optimization
	        if (isPropertyKey(name))
	            adm.has(name);
	        return target[name];
	    },
	    set: function (target, name, value) {
	        if (!isPropertyKey(name))
	            return false;
	        set(target, name, value);
	        return true;
	    },
	    deleteProperty: function (target, name) {
	        if (!isPropertyKey(name))
	            return false;
	        var adm = getAdm(target);
	        adm.remove(name);
	        return true;
	    },
	    ownKeys: function (target) {
	        var adm = getAdm(target);
	        adm.keysAtom.reportObserved();
	        return Reflect.ownKeys(target);
	    },
	    preventExtensions: function (target) {
	        fail("Dynamic observable objects cannot be frozen");
	        return false;
	    }
	};
	function createDynamicObservableObject(base) {
	    var proxy = new Proxy(base, objectProxyTraps);
	    base[$mobx].proxy = proxy;
	    return proxy;
	}

	function hasInterceptors(interceptable) {
	    return interceptable.interceptors !== undefined && interceptable.interceptors.length > 0;
	}
	function registerInterceptor(interceptable, handler) {
	    var interceptors = interceptable.interceptors || (interceptable.interceptors = []);
	    interceptors.push(handler);
	    return once(function () {
	        var idx = interceptors.indexOf(handler);
	        if (idx !== -1)
	            interceptors.splice(idx, 1);
	    });
	}
	function interceptChange(interceptable, change) {
	    var prevU = untrackedStart();
	    try {
	        // Interceptor can modify the array, copy it to avoid concurrent modification, see #1950
	        var interceptors = __spread((interceptable.interceptors || []));
	        for (var i = 0, l = interceptors.length; i < l; i++) {
	            change = interceptors[i](change);
	            invariant(!change || change.type, "Intercept handlers should return nothing or a change object");
	            if (!change)
	                break;
	        }
	        return change;
	    }
	    finally {
	        untrackedEnd(prevU);
	    }
	}

	function hasListeners(listenable) {
	    return listenable.changeListeners !== undefined && listenable.changeListeners.length > 0;
	}
	function registerListener(listenable, handler) {
	    var listeners = listenable.changeListeners || (listenable.changeListeners = []);
	    listeners.push(handler);
	    return once(function () {
	        var idx = listeners.indexOf(handler);
	        if (idx !== -1)
	            listeners.splice(idx, 1);
	    });
	}
	function notifyListeners(listenable, change) {
	    var prevU = untrackedStart();
	    var listeners = listenable.changeListeners;
	    if (!listeners)
	        return;
	    listeners = listeners.slice();
	    for (var i = 0, l = listeners.length; i < l; i++) {
	        listeners[i](change);
	    }
	    untrackedEnd(prevU);
	}

	var MAX_SPLICE_SIZE = 10000; // See e.g. https://github.com/mobxjs/mobx/issues/859
	var arrayTraps = {
	    get: function (target, name) {
	        if (name === $mobx)
	            return target[$mobx];
	        if (name === "length")
	            return target[$mobx].getArrayLength();
	        if (typeof name === "number") {
	            return arrayExtensions.get.call(target, name);
	        }
	        if (typeof name === "string" && !isNaN(name)) {
	            return arrayExtensions.get.call(target, parseInt(name));
	        }
	        if (arrayExtensions.hasOwnProperty(name)) {
	            return arrayExtensions[name];
	        }
	        return target[name];
	    },
	    set: function (target, name, value) {
	        if (name === "length") {
	            target[$mobx].setArrayLength(value);
	        }
	        if (typeof name === "number") {
	            arrayExtensions.set.call(target, name, value);
	        }
	        if (typeof name === "symbol" || isNaN(name)) {
	            target[name] = value;
	        }
	        else {
	            // numeric string
	            arrayExtensions.set.call(target, parseInt(name), value);
	        }
	        return true;
	    },
	    preventExtensions: function (target) {
	        fail("Observable arrays cannot be frozen");
	        return false;
	    }
	};
	function createObservableArray(initialValues, enhancer, name, owned) {
	    if (name === void 0) { name = "ObservableArray@" + getNextId(); }
	    if (owned === void 0) { owned = false; }
	    var adm = new ObservableArrayAdministration(name, enhancer, owned);
	    addHiddenFinalProp(adm.values, $mobx, adm);
	    var proxy = new Proxy(adm.values, arrayTraps);
	    adm.proxy = proxy;
	    if (initialValues && initialValues.length) {
	        var prev = allowStateChangesStart(true);
	        adm.spliceWithArray(0, 0, initialValues);
	        allowStateChangesEnd(prev);
	    }
	    return proxy;
	}
	var ObservableArrayAdministration = /** @class */ (function () {
	    function ObservableArrayAdministration(name, enhancer, owned) {
	        this.owned = owned;
	        this.values = [];
	        this.proxy = undefined;
	        this.lastKnownLength = 0;
	        this.atom = new Atom(name || "ObservableArray@" + getNextId());
	        this.enhancer = function (newV, oldV) { return enhancer(newV, oldV, name + "[..]"); };
	    }
	    ObservableArrayAdministration.prototype.dehanceValue = function (value) {
	        if (this.dehancer !== undefined)
	            return this.dehancer(value);
	        return value;
	    };
	    ObservableArrayAdministration.prototype.dehanceValues = function (values) {
	        if (this.dehancer !== undefined && values.length > 0)
	            return values.map(this.dehancer);
	        return values;
	    };
	    ObservableArrayAdministration.prototype.intercept = function (handler) {
	        return registerInterceptor(this, handler);
	    };
	    ObservableArrayAdministration.prototype.observe = function (listener, fireImmediately) {
	        if (fireImmediately === void 0) { fireImmediately = false; }
	        if (fireImmediately) {
	            listener({
	                object: this.proxy,
	                type: "splice",
	                index: 0,
	                added: this.values.slice(),
	                addedCount: this.values.length,
	                removed: [],
	                removedCount: 0
	            });
	        }
	        return registerListener(this, listener);
	    };
	    ObservableArrayAdministration.prototype.getArrayLength = function () {
	        this.atom.reportObserved();
	        return this.values.length;
	    };
	    ObservableArrayAdministration.prototype.setArrayLength = function (newLength) {
	        if (typeof newLength !== "number" || newLength < 0)
	            throw new Error("[mobx.array] Out of range: " + newLength);
	        var currentLength = this.values.length;
	        if (newLength === currentLength)
	            return;
	        else if (newLength > currentLength) {
	            var newItems = new Array(newLength - currentLength);
	            for (var i = 0; i < newLength - currentLength; i++)
	                newItems[i] = undefined; // No Array.fill everywhere...
	            this.spliceWithArray(currentLength, 0, newItems);
	        }
	        else
	            this.spliceWithArray(newLength, currentLength - newLength);
	    };
	    ObservableArrayAdministration.prototype.updateArrayLength = function (oldLength, delta) {
	        if (oldLength !== this.lastKnownLength)
	            throw new Error("[mobx] Modification exception: the internal structure of an observable array was changed.");
	        this.lastKnownLength += delta;
	    };
	    ObservableArrayAdministration.prototype.spliceWithArray = function (index, deleteCount, newItems) {
	        var _this = this;
	        checkIfStateModificationsAreAllowed(this.atom);
	        var length = this.values.length;
	        if (index === undefined)
	            index = 0;
	        else if (index > length)
	            index = length;
	        else if (index < 0)
	            index = Math.max(0, length + index);
	        if (arguments.length === 1)
	            deleteCount = length - index;
	        else if (deleteCount === undefined || deleteCount === null)
	            deleteCount = 0;
	        else
	            deleteCount = Math.max(0, Math.min(deleteCount, length - index));
	        if (newItems === undefined)
	            newItems = EMPTY_ARRAY;
	        if (hasInterceptors(this)) {
	            var change = interceptChange(this, {
	                object: this.proxy,
	                type: "splice",
	                index: index,
	                removedCount: deleteCount,
	                added: newItems
	            });
	            if (!change)
	                return EMPTY_ARRAY;
	            deleteCount = change.removedCount;
	            newItems = change.added;
	        }
	        newItems = newItems.length === 0 ? newItems : newItems.map(function (v) { return _this.enhancer(v, undefined); });
	        if (process.env.NODE_ENV !== "production") {
	            var lengthDelta = newItems.length - deleteCount;
	            this.updateArrayLength(length, lengthDelta); // checks if internal array wasn't modified
	        }
	        var res = this.spliceItemsIntoValues(index, deleteCount, newItems);
	        if (deleteCount !== 0 || newItems.length !== 0)
	            this.notifyArraySplice(index, newItems, res);
	        return this.dehanceValues(res);
	    };
	    ObservableArrayAdministration.prototype.spliceItemsIntoValues = function (index, deleteCount, newItems) {
	        var _a;
	        if (newItems.length < MAX_SPLICE_SIZE) {
	            return (_a = this.values).splice.apply(_a, __spread([index, deleteCount], newItems));
	        }
	        else {
	            var res = this.values.slice(index, index + deleteCount);
	            this.values = this.values
	                .slice(0, index)
	                .concat(newItems, this.values.slice(index + deleteCount));
	            return res;
	        }
	    };
	    ObservableArrayAdministration.prototype.notifyArrayChildUpdate = function (index, newValue, oldValue) {
	        var notifySpy = !this.owned && isSpyEnabled();
	        var notify = hasListeners(this);
	        var change = notify || notifySpy
	            ? {
	                object: this.proxy,
	                type: "update",
	                index: index,
	                newValue: newValue,
	                oldValue: oldValue
	            }
	            : null;
	        // The reason why this is on right hand side here (and not above), is this way the uglifier will drop it, but it won't
	        // cause any runtime overhead in development mode without NODE_ENV set, unless spying is enabled
	        if (notifySpy && process.env.NODE_ENV !== "production")
	            spyReportStart(__assign(__assign({}, change), { name: this.atom.name }));
	        this.atom.reportChanged();
	        if (notify)
	            notifyListeners(this, change);
	        if (notifySpy && process.env.NODE_ENV !== "production")
	            spyReportEnd();
	    };
	    ObservableArrayAdministration.prototype.notifyArraySplice = function (index, added, removed) {
	        var notifySpy = !this.owned && isSpyEnabled();
	        var notify = hasListeners(this);
	        var change = notify || notifySpy
	            ? {
	                object: this.proxy,
	                type: "splice",
	                index: index,
	                removed: removed,
	                added: added,
	                removedCount: removed.length,
	                addedCount: added.length
	            }
	            : null;
	        if (notifySpy && process.env.NODE_ENV !== "production")
	            spyReportStart(__assign(__assign({}, change), { name: this.atom.name }));
	        this.atom.reportChanged();
	        // conform: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/observe
	        if (notify)
	            notifyListeners(this, change);
	        if (notifySpy && process.env.NODE_ENV !== "production")
	            spyReportEnd();
	    };
	    return ObservableArrayAdministration;
	}());
	var arrayExtensions = {
	    intercept: function (handler) {
	        return this[$mobx].intercept(handler);
	    },
	    observe: function (listener, fireImmediately) {
	        if (fireImmediately === void 0) { fireImmediately = false; }
	        var adm = this[$mobx];
	        return adm.observe(listener, fireImmediately);
	    },
	    clear: function () {
	        return this.splice(0);
	    },
	    replace: function (newItems) {
	        var adm = this[$mobx];
	        return adm.spliceWithArray(0, adm.values.length, newItems);
	    },
	    /**
	     * Converts this array back to a (shallow) javascript structure.
	     * For a deep clone use mobx.toJS
	     */
	    toJS: function () {
	        return this.slice();
	    },
	    toJSON: function () {
	        // Used by JSON.stringify
	        return this.toJS();
	    },
	    /*
	     * functions that do alter the internal structure of the array, (based on lib.es6.d.ts)
	     * since these functions alter the inner structure of the array, the have side effects.
	     * Because the have side effects, they should not be used in computed function,
	     * and for that reason the do not call dependencyState.notifyObserved
	     */
	    splice: function (index, deleteCount) {
	        var newItems = [];
	        for (var _i = 2; _i < arguments.length; _i++) {
	            newItems[_i - 2] = arguments[_i];
	        }
	        var adm = this[$mobx];
	        switch (arguments.length) {
	            case 0:
	                return [];
	            case 1:
	                return adm.spliceWithArray(index);
	            case 2:
	                return adm.spliceWithArray(index, deleteCount);
	        }
	        return adm.spliceWithArray(index, deleteCount, newItems);
	    },
	    spliceWithArray: function (index, deleteCount, newItems) {
	        var adm = this[$mobx];
	        return adm.spliceWithArray(index, deleteCount, newItems);
	    },
	    push: function () {
	        var items = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            items[_i] = arguments[_i];
	        }
	        var adm = this[$mobx];
	        adm.spliceWithArray(adm.values.length, 0, items);
	        return adm.values.length;
	    },
	    pop: function () {
	        return this.splice(Math.max(this[$mobx].values.length - 1, 0), 1)[0];
	    },
	    shift: function () {
	        return this.splice(0, 1)[0];
	    },
	    unshift: function () {
	        var items = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            items[_i] = arguments[_i];
	        }
	        var adm = this[$mobx];
	        adm.spliceWithArray(0, 0, items);
	        return adm.values.length;
	    },
	    reverse: function () {
	        // reverse by default mutates in place before returning the result
	        // which makes it both a 'derivation' and a 'mutation'.
	        // so we deviate from the default and just make it an dervitation
	        if (process.env.NODE_ENV !== "production") {
	            console.warn("[mobx] `observableArray.reverse()` will not update the array in place. Use `observableArray.slice().reverse()` to suppress this warning and perform the operation on a copy, or `observableArray.replace(observableArray.slice().reverse())` to reverse & update in place");
	        }
	        var clone = this.slice();
	        return clone.reverse.apply(clone, arguments);
	    },
	    sort: function (compareFn) {
	        // sort by default mutates in place before returning the result
	        // which goes against all good practices. Let's not change the array in place!
	        if (process.env.NODE_ENV !== "production") {
	            console.warn("[mobx] `observableArray.sort()` will not update the array in place. Use `observableArray.slice().sort()` to suppress this warning and perform the operation on a copy, or `observableArray.replace(observableArray.slice().sort())` to sort & update in place");
	        }
	        var clone = this.slice();
	        return clone.sort.apply(clone, arguments);
	    },
	    remove: function (value) {
	        var adm = this[$mobx];
	        var idx = adm.dehanceValues(adm.values).indexOf(value);
	        if (idx > -1) {
	            this.splice(idx, 1);
	            return true;
	        }
	        return false;
	    },
	    get: function (index) {
	        var adm = this[$mobx];
	        if (adm) {
	            if (index < adm.values.length) {
	                adm.atom.reportObserved();
	                return adm.dehanceValue(adm.values[index]);
	            }
	            console.warn("[mobx.array] Attempt to read an array index (" + index + ") that is out of bounds (" + adm.values.length + "). Please check length first. Out of bound indices will not be tracked by MobX");
	        }
	        return undefined;
	    },
	    set: function (index, newValue) {
	        var adm = this[$mobx];
	        var values = adm.values;
	        if (index < values.length) {
	            // update at index in range
	            checkIfStateModificationsAreAllowed(adm.atom);
	            var oldValue = values[index];
	            if (hasInterceptors(adm)) {
	                var change = interceptChange(adm, {
	                    type: "update",
	                    object: adm.proxy,
	                    index: index,
	                    newValue: newValue
	                });
	                if (!change)
	                    return;
	                newValue = change.newValue;
	            }
	            newValue = adm.enhancer(newValue, oldValue);
	            var changed = newValue !== oldValue;
	            if (changed) {
	                values[index] = newValue;
	                adm.notifyArrayChildUpdate(index, newValue, oldValue);
	            }
	        }
	        else if (index === values.length) {
	            // add a new item
	            adm.spliceWithArray(index, 0, [newValue]);
	        }
	        else {
	            // out of bounds
	            throw new Error("[mobx.array] Index out of bounds, " + index + " is larger than " + values.length);
	        }
	    }
	};
	[
	    "concat",
	    "every",
	    "filter",
	    "forEach",
	    "indexOf",
	    "join",
	    "lastIndexOf",
	    "map",
	    "reduce",
	    "reduceRight",
	    "slice",
	    "some",
	    "toString",
	    "toLocaleString"
	].forEach(function (funcName) {
	    arrayExtensions[funcName] = function () {
	        var adm = this[$mobx];
	        adm.atom.reportObserved();
	        var res = adm.dehanceValues(adm.values);
	        return res[funcName].apply(res, arguments);
	    };
	});
	var isObservableArrayAdministration = createInstanceofPredicate("ObservableArrayAdministration", ObservableArrayAdministration);
	function isObservableArray(thing) {
	    return isObject$1(thing) && isObservableArrayAdministration(thing[$mobx]);
	}

	var _a;
	var ObservableMapMarker = {};
	// just extend Map? See also https://gist.github.com/nestharus/13b4d74f2ef4a2f4357dbd3fc23c1e54
	// But: https://github.com/mobxjs/mobx/issues/1556
	var ObservableMap = /** @class */ (function () {
	    function ObservableMap(initialData, enhancer, name) {
	        if (enhancer === void 0) { enhancer = deepEnhancer; }
	        if (name === void 0) { name = "ObservableMap@" + getNextId(); }
	        this.enhancer = enhancer;
	        this.name = name;
	        this[_a] = ObservableMapMarker;
	        this._keysAtom = createAtom(this.name + ".keys()");
	        this[Symbol.toStringTag] = "Map";
	        if (typeof Map !== "function") {
	            throw new Error("mobx.map requires Map polyfill for the current browser. Check babel-polyfill or core-js/es6/map.js");
	        }
	        this._data = new Map();
	        this._hasMap = new Map();
	        this.merge(initialData);
	    }
	    ObservableMap.prototype._has = function (key) {
	        return this._data.has(key);
	    };
	    ObservableMap.prototype.has = function (key) {
	        var _this = this;
	        if (!globalState.trackingDerivation)
	            return this._has(key);
	        var entry = this._hasMap.get(key);
	        if (!entry) {
	            // todo: replace with atom (breaking change)
	            var newEntry = (entry = new ObservableValue(this._has(key), referenceEnhancer, this.name + "." + stringifyKey(key) + "?", false));
	            this._hasMap.set(key, newEntry);
	            onBecomeUnobserved(newEntry, function () { return _this._hasMap.delete(key); });
	        }
	        return entry.get();
	    };
	    ObservableMap.prototype.set = function (key, value) {
	        var hasKey = this._has(key);
	        if (hasInterceptors(this)) {
	            var change = interceptChange(this, {
	                type: hasKey ? "update" : "add",
	                object: this,
	                newValue: value,
	                name: key
	            });
	            if (!change)
	                return this;
	            value = change.newValue;
	        }
	        if (hasKey) {
	            this._updateValue(key, value);
	        }
	        else {
	            this._addValue(key, value);
	        }
	        return this;
	    };
	    ObservableMap.prototype.delete = function (key) {
	        var _this = this;
	        if (hasInterceptors(this)) {
	            var change = interceptChange(this, {
	                type: "delete",
	                object: this,
	                name: key
	            });
	            if (!change)
	                return false;
	        }
	        if (this._has(key)) {
	            var notifySpy = isSpyEnabled();
	            var notify = hasListeners(this);
	            var change = notify || notifySpy
	                ? {
	                    type: "delete",
	                    object: this,
	                    oldValue: this._data.get(key).value,
	                    name: key
	                }
	                : null;
	            if (notifySpy && process.env.NODE_ENV !== "production")
	                spyReportStart(__assign(__assign({}, change), { name: this.name, key: key }));
	            transaction(function () {
	                _this._keysAtom.reportChanged();
	                _this._updateHasMapEntry(key, false);
	                var observable = _this._data.get(key);
	                observable.setNewValue(undefined);
	                _this._data.delete(key);
	            });
	            if (notify)
	                notifyListeners(this, change);
	            if (notifySpy && process.env.NODE_ENV !== "production")
	                spyReportEnd();
	            return true;
	        }
	        return false;
	    };
	    ObservableMap.prototype._updateHasMapEntry = function (key, value) {
	        var entry = this._hasMap.get(key);
	        if (entry) {
	            entry.setNewValue(value);
	        }
	    };
	    ObservableMap.prototype._updateValue = function (key, newValue) {
	        var observable = this._data.get(key);
	        newValue = observable.prepareNewValue(newValue);
	        if (newValue !== globalState.UNCHANGED) {
	            var notifySpy = isSpyEnabled();
	            var notify = hasListeners(this);
	            var change = notify || notifySpy
	                ? {
	                    type: "update",
	                    object: this,
	                    oldValue: observable.value,
	                    name: key,
	                    newValue: newValue
	                }
	                : null;
	            if (notifySpy && process.env.NODE_ENV !== "production")
	                spyReportStart(__assign(__assign({}, change), { name: this.name, key: key }));
	            observable.setNewValue(newValue);
	            if (notify)
	                notifyListeners(this, change);
	            if (notifySpy && process.env.NODE_ENV !== "production")
	                spyReportEnd();
	        }
	    };
	    ObservableMap.prototype._addValue = function (key, newValue) {
	        var _this = this;
	        checkIfStateModificationsAreAllowed(this._keysAtom);
	        transaction(function () {
	            var observable = new ObservableValue(newValue, _this.enhancer, _this.name + "." + stringifyKey(key), false);
	            _this._data.set(key, observable);
	            newValue = observable.value; // value might have been changed
	            _this._updateHasMapEntry(key, true);
	            _this._keysAtom.reportChanged();
	        });
	        var notifySpy = isSpyEnabled();
	        var notify = hasListeners(this);
	        var change = notify || notifySpy
	            ? {
	                type: "add",
	                object: this,
	                name: key,
	                newValue: newValue
	            }
	            : null;
	        if (notifySpy && process.env.NODE_ENV !== "production")
	            spyReportStart(__assign(__assign({}, change), { name: this.name, key: key }));
	        if (notify)
	            notifyListeners(this, change);
	        if (notifySpy && process.env.NODE_ENV !== "production")
	            spyReportEnd();
	    };
	    ObservableMap.prototype.get = function (key) {
	        if (this.has(key))
	            return this.dehanceValue(this._data.get(key).get());
	        return this.dehanceValue(undefined);
	    };
	    ObservableMap.prototype.dehanceValue = function (value) {
	        if (this.dehancer !== undefined) {
	            return this.dehancer(value);
	        }
	        return value;
	    };
	    ObservableMap.prototype.keys = function () {
	        this._keysAtom.reportObserved();
	        return this._data.keys();
	    };
	    ObservableMap.prototype.values = function () {
	        var self = this;
	        var nextIndex = 0;
	        var keys = Array.from(this.keys());
	        return makeIterable({
	            next: function () {
	                return nextIndex < keys.length
	                    ? { value: self.get(keys[nextIndex++]), done: false }
	                    : { done: true };
	            }
	        });
	    };
	    ObservableMap.prototype.entries = function () {
	        var self = this;
	        var nextIndex = 0;
	        var keys = Array.from(this.keys());
	        return makeIterable({
	            next: function () {
	                if (nextIndex < keys.length) {
	                    var key = keys[nextIndex++];
	                    return {
	                        value: [key, self.get(key)],
	                        done: false
	                    };
	                }
	                return { done: true };
	            }
	        });
	    };
	    ObservableMap.prototype[(_a = $mobx, Symbol.iterator)] = function () {
	        return this.entries();
	    };
	    ObservableMap.prototype.forEach = function (callback, thisArg) {
	        var e_1, _b;
	        try {
	            for (var _c = __values(this), _d = _c.next(); !_d.done; _d = _c.next()) {
	                var _e = __read(_d.value, 2), key = _e[0], value = _e[1];
	                callback.call(thisArg, value, key, this);
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	    };
	    /** Merge another object into this object, returns this. */
	    ObservableMap.prototype.merge = function (other) {
	        var _this = this;
	        if (isObservableMap(other)) {
	            other = other.toJS();
	        }
	        transaction(function () {
	            if (isPlainObject$2(other))
	                getPlainObjectKeys(other).forEach(function (key) { return _this.set(key, other[key]); });
	            else if (Array.isArray(other))
	                other.forEach(function (_b) {
	                    var _c = __read(_b, 2), key = _c[0], value = _c[1];
	                    return _this.set(key, value);
	                });
	            else if (isES6Map(other)) {
	                if (other.constructor !== Map)
	                    fail("Cannot initialize from classes that inherit from Map: " + other.constructor.name); // prettier-ignore
	                other.forEach(function (value, key) { return _this.set(key, value); });
	            }
	            else if (other !== null && other !== undefined)
	                fail("Cannot initialize map from " + other);
	        });
	        return this;
	    };
	    ObservableMap.prototype.clear = function () {
	        var _this = this;
	        transaction(function () {
	            untracked(function () {
	                var e_2, _b;
	                try {
	                    for (var _c = __values(_this.keys()), _d = _c.next(); !_d.done; _d = _c.next()) {
	                        var key = _d.value;
	                        _this.delete(key);
	                    }
	                }
	                catch (e_2_1) { e_2 = { error: e_2_1 }; }
	                finally {
	                    try {
	                        if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
	                    }
	                    finally { if (e_2) throw e_2.error; }
	                }
	            });
	        });
	    };
	    ObservableMap.prototype.replace = function (values) {
	        var _this = this;
	        transaction(function () {
	            // grab all the keys that are present in the new map but not present in the current map
	            // and delete them from the map, then merge the new map
	            // this will cause reactions only on changed values
	            var newKeys = getMapLikeKeys(values);
	            var oldKeys = Array.from(_this.keys());
	            var missingKeys = oldKeys.filter(function (k) { return newKeys.indexOf(k) === -1; });
	            missingKeys.forEach(function (k) { return _this.delete(k); });
	            _this.merge(values);
	        });
	        return this;
	    };
	    Object.defineProperty(ObservableMap.prototype, "size", {
	        get: function () {
	            this._keysAtom.reportObserved();
	            return this._data.size;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Returns a plain object that represents this map.
	     * Note that all the keys being stringified.
	     * If there are duplicating keys after converting them to strings, behaviour is undetermined.
	     */
	    ObservableMap.prototype.toPOJO = function () {
	        var e_3, _b;
	        var res = {};
	        try {
	            for (var _c = __values(this), _d = _c.next(); !_d.done; _d = _c.next()) {
	                var _e = __read(_d.value, 2), key = _e[0], value = _e[1];
	                // We lie about symbol key types due to https://github.com/Microsoft/TypeScript/issues/1863
	                res[typeof key === "symbol" ? key : stringifyKey(key)] = value;
	            }
	        }
	        catch (e_3_1) { e_3 = { error: e_3_1 }; }
	        finally {
	            try {
	                if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
	            }
	            finally { if (e_3) throw e_3.error; }
	        }
	        return res;
	    };
	    /**
	     * Returns a shallow non observable object clone of this map.
	     * Note that the values migth still be observable. For a deep clone use mobx.toJS.
	     */
	    ObservableMap.prototype.toJS = function () {
	        return new Map(this);
	    };
	    ObservableMap.prototype.toJSON = function () {
	        // Used by JSON.stringify
	        return this.toPOJO();
	    };
	    ObservableMap.prototype.toString = function () {
	        var _this = this;
	        return (this.name +
	            "[{ " +
	            Array.from(this.keys())
	                .map(function (key) { return stringifyKey(key) + ": " + ("" + _this.get(key)); })
	                .join(", ") +
	            " }]");
	    };
	    /**
	     * Observes this object. Triggers for the events 'add', 'update' and 'delete'.
	     * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe
	     * for callback details
	     */
	    ObservableMap.prototype.observe = function (listener, fireImmediately) {
	        process.env.NODE_ENV !== "production" &&
	            invariant(fireImmediately !== true, "`observe` doesn't support fireImmediately=true in combination with maps.");
	        return registerListener(this, listener);
	    };
	    ObservableMap.prototype.intercept = function (handler) {
	        return registerInterceptor(this, handler);
	    };
	    return ObservableMap;
	}());
	/* 'var' fixes small-build issue */
	var isObservableMap = createInstanceofPredicate("ObservableMap", ObservableMap);

	var _a$1;
	var ObservableSetMarker = {};
	var ObservableSet = /** @class */ (function () {
	    function ObservableSet(initialData, enhancer, name) {
	        if (enhancer === void 0) { enhancer = deepEnhancer; }
	        if (name === void 0) { name = "ObservableSet@" + getNextId(); }
	        this.name = name;
	        this[_a$1] = ObservableSetMarker;
	        this._data = new Set();
	        this._atom = createAtom(this.name);
	        this[Symbol.toStringTag] = "Set";
	        if (typeof Set !== "function") {
	            throw new Error("mobx.set requires Set polyfill for the current browser. Check babel-polyfill or core-js/es6/set.js");
	        }
	        this.enhancer = function (newV, oldV) { return enhancer(newV, oldV, name); };
	        if (initialData) {
	            this.replace(initialData);
	        }
	    }
	    ObservableSet.prototype.dehanceValue = function (value) {
	        if (this.dehancer !== undefined) {
	            return this.dehancer(value);
	        }
	        return value;
	    };
	    ObservableSet.prototype.clear = function () {
	        var _this = this;
	        transaction(function () {
	            untracked(function () {
	                var e_1, _b;
	                try {
	                    for (var _c = __values(_this._data.values()), _d = _c.next(); !_d.done; _d = _c.next()) {
	                        var value = _d.value;
	                        _this.delete(value);
	                    }
	                }
	                catch (e_1_1) { e_1 = { error: e_1_1 }; }
	                finally {
	                    try {
	                        if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
	                    }
	                    finally { if (e_1) throw e_1.error; }
	                }
	            });
	        });
	    };
	    ObservableSet.prototype.forEach = function (callbackFn, thisArg) {
	        var e_2, _b;
	        try {
	            for (var _c = __values(this), _d = _c.next(); !_d.done; _d = _c.next()) {
	                var value = _d.value;
	                callbackFn.call(thisArg, value, value, this);
	            }
	        }
	        catch (e_2_1) { e_2 = { error: e_2_1 }; }
	        finally {
	            try {
	                if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
	            }
	            finally { if (e_2) throw e_2.error; }
	        }
	    };
	    Object.defineProperty(ObservableSet.prototype, "size", {
	        get: function () {
	            this._atom.reportObserved();
	            return this._data.size;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ObservableSet.prototype.add = function (value) {
	        var _this = this;
	        checkIfStateModificationsAreAllowed(this._atom);
	        if (hasInterceptors(this)) {
	            var change = interceptChange(this, {
	                type: "add",
	                object: this,
	                newValue: value
	            });
	            if (!change)
	                return this;
	            // TODO: ideally, value = change.value would be done here, so that values can be
	            // changed by interceptor. Same applies for other Set and Map api's.
	        }
	        if (!this.has(value)) {
	            transaction(function () {
	                _this._data.add(_this.enhancer(value, undefined));
	                _this._atom.reportChanged();
	            });
	            var notifySpy = isSpyEnabled();
	            var notify = hasListeners(this);
	            var change = notify || notifySpy
	                ? {
	                    type: "add",
	                    object: this,
	                    newValue: value
	                }
	                : null;
	            if (notifySpy && process.env.NODE_ENV !== "production")
	                spyReportStart(change);
	            if (notify)
	                notifyListeners(this, change);
	            if (notifySpy && process.env.NODE_ENV !== "production")
	                spyReportEnd();
	        }
	        return this;
	    };
	    ObservableSet.prototype.delete = function (value) {
	        var _this = this;
	        if (hasInterceptors(this)) {
	            var change = interceptChange(this, {
	                type: "delete",
	                object: this,
	                oldValue: value
	            });
	            if (!change)
	                return false;
	        }
	        if (this.has(value)) {
	            var notifySpy = isSpyEnabled();
	            var notify = hasListeners(this);
	            var change = notify || notifySpy
	                ? {
	                    type: "delete",
	                    object: this,
	                    oldValue: value
	                }
	                : null;
	            if (notifySpy && process.env.NODE_ENV !== "production")
	                spyReportStart(__assign(__assign({}, change), { name: this.name }));
	            transaction(function () {
	                _this._atom.reportChanged();
	                _this._data.delete(value);
	            });
	            if (notify)
	                notifyListeners(this, change);
	            if (notifySpy && process.env.NODE_ENV !== "production")
	                spyReportEnd();
	            return true;
	        }
	        return false;
	    };
	    ObservableSet.prototype.has = function (value) {
	        this._atom.reportObserved();
	        return this._data.has(this.dehanceValue(value));
	    };
	    ObservableSet.prototype.entries = function () {
	        var nextIndex = 0;
	        var keys = Array.from(this.keys());
	        var values = Array.from(this.values());
	        return makeIterable({
	            next: function () {
	                var index = nextIndex;
	                nextIndex += 1;
	                return index < values.length
	                    ? { value: [keys[index], values[index]], done: false }
	                    : { done: true };
	            }
	        });
	    };
	    ObservableSet.prototype.keys = function () {
	        return this.values();
	    };
	    ObservableSet.prototype.values = function () {
	        this._atom.reportObserved();
	        var self = this;
	        var nextIndex = 0;
	        var observableValues = Array.from(this._data.values());
	        return makeIterable({
	            next: function () {
	                return nextIndex < observableValues.length
	                    ? { value: self.dehanceValue(observableValues[nextIndex++]), done: false }
	                    : { done: true };
	            }
	        });
	    };
	    ObservableSet.prototype.replace = function (other) {
	        var _this = this;
	        if (isObservableSet(other)) {
	            other = other.toJS();
	        }
	        transaction(function () {
	            if (Array.isArray(other)) {
	                _this.clear();
	                other.forEach(function (value) { return _this.add(value); });
	            }
	            else if (isES6Set(other)) {
	                _this.clear();
	                other.forEach(function (value) { return _this.add(value); });
	            }
	            else if (other !== null && other !== undefined) {
	                fail("Cannot initialize set from " + other);
	            }
	        });
	        return this;
	    };
	    ObservableSet.prototype.observe = function (listener, fireImmediately) {
	        // TODO 'fireImmediately' can be true?
	        process.env.NODE_ENV !== "production" &&
	            invariant(fireImmediately !== true, "`observe` doesn't support fireImmediately=true in combination with sets.");
	        return registerListener(this, listener);
	    };
	    ObservableSet.prototype.intercept = function (handler) {
	        return registerInterceptor(this, handler);
	    };
	    ObservableSet.prototype.toJS = function () {
	        return new Set(this);
	    };
	    ObservableSet.prototype.toString = function () {
	        return this.name + "[ " + Array.from(this).join(", ") + " ]";
	    };
	    ObservableSet.prototype[(_a$1 = $mobx, Symbol.iterator)] = function () {
	        return this.values();
	    };
	    return ObservableSet;
	}());
	var isObservableSet = createInstanceofPredicate("ObservableSet", ObservableSet);

	var ObservableObjectAdministration = /** @class */ (function () {
	    function ObservableObjectAdministration(target, values, name, defaultEnhancer) {
	        if (values === void 0) { values = new Map(); }
	        this.target = target;
	        this.values = values;
	        this.name = name;
	        this.defaultEnhancer = defaultEnhancer;
	        this.keysAtom = new Atom(name + ".keys");
	    }
	    ObservableObjectAdministration.prototype.read = function (key) {
	        return this.values.get(key).get();
	    };
	    ObservableObjectAdministration.prototype.write = function (key, newValue) {
	        var instance = this.target;
	        var observable = this.values.get(key);
	        if (observable instanceof ComputedValue) {
	            observable.set(newValue);
	            return;
	        }
	        // intercept
	        if (hasInterceptors(this)) {
	            var change = interceptChange(this, {
	                type: "update",
	                object: this.proxy || instance,
	                name: key,
	                newValue: newValue
	            });
	            if (!change)
	                return;
	            newValue = change.newValue;
	        }
	        newValue = observable.prepareNewValue(newValue);
	        // notify spy & observers
	        if (newValue !== globalState.UNCHANGED) {
	            var notify = hasListeners(this);
	            var notifySpy = isSpyEnabled();
	            var change = notify || notifySpy
	                ? {
	                    type: "update",
	                    object: this.proxy || instance,
	                    oldValue: observable.value,
	                    name: key,
	                    newValue: newValue
	                }
	                : null;
	            if (notifySpy && process.env.NODE_ENV !== "production")
	                spyReportStart(__assign(__assign({}, change), { name: this.name, key: key }));
	            observable.setNewValue(newValue);
	            if (notify)
	                notifyListeners(this, change);
	            if (notifySpy && process.env.NODE_ENV !== "production")
	                spyReportEnd();
	        }
	    };
	    ObservableObjectAdministration.prototype.has = function (key) {
	        var map = this.pendingKeys || (this.pendingKeys = new Map());
	        var entry = map.get(key);
	        if (entry)
	            return entry.get();
	        else {
	            var exists = !!this.values.get(key);
	            // Possible optimization: Don't have a separate map for non existing keys,
	            // but store them in the values map instead, using a special symbol to denote "not existing"
	            entry = new ObservableValue(exists, referenceEnhancer, this.name + "." + stringifyKey(key) + "?", false);
	            map.set(key, entry);
	            return entry.get(); // read to subscribe
	        }
	    };
	    ObservableObjectAdministration.prototype.addObservableProp = function (propName, newValue, enhancer) {
	        if (enhancer === void 0) { enhancer = this.defaultEnhancer; }
	        var target = this.target;
	        assertPropertyConfigurable(target, propName);
	        if (hasInterceptors(this)) {
	            var change = interceptChange(this, {
	                object: this.proxy || target,
	                name: propName,
	                type: "add",
	                newValue: newValue
	            });
	            if (!change)
	                return;
	            newValue = change.newValue;
	        }
	        var observable = new ObservableValue(newValue, enhancer, this.name + "." + stringifyKey(propName), false);
	        this.values.set(propName, observable);
	        newValue = observable.value; // observableValue might have changed it
	        Object.defineProperty(target, propName, generateObservablePropConfig(propName));
	        this.notifyPropertyAddition(propName, newValue);
	    };
	    ObservableObjectAdministration.prototype.addComputedProp = function (propertyOwner, // where is the property declared?
	    propName, options) {
	        var target = this.target;
	        options.name = options.name || this.name + "." + stringifyKey(propName);
	        this.values.set(propName, new ComputedValue(options));
	        if (propertyOwner === target || isPropertyConfigurable(propertyOwner, propName))
	            Object.defineProperty(propertyOwner, propName, generateComputedPropConfig(propName));
	    };
	    ObservableObjectAdministration.prototype.remove = function (key) {
	        if (!this.values.has(key))
	            return;
	        var target = this.target;
	        if (hasInterceptors(this)) {
	            var change = interceptChange(this, {
	                object: this.proxy || target,
	                name: key,
	                type: "remove"
	            });
	            if (!change)
	                return;
	        }
	        try {
	            startBatch();
	            var notify = hasListeners(this);
	            var notifySpy = isSpyEnabled();
	            var oldObservable = this.values.get(key);
	            var oldValue = oldObservable && oldObservable.get();
	            oldObservable && oldObservable.set(undefined);
	            // notify key and keyset listeners
	            this.keysAtom.reportChanged();
	            this.values.delete(key);
	            if (this.pendingKeys) {
	                var entry = this.pendingKeys.get(key);
	                if (entry)
	                    entry.set(false);
	            }
	            // delete the prop
	            delete this.target[key];
	            var change = notify || notifySpy
	                ? {
	                    type: "remove",
	                    object: this.proxy || target,
	                    oldValue: oldValue,
	                    name: key
	                }
	                : null;
	            if (notifySpy && process.env.NODE_ENV !== "production")
	                spyReportStart(__assign(__assign({}, change), { name: this.name, key: key }));
	            if (notify)
	                notifyListeners(this, change);
	            if (notifySpy && process.env.NODE_ENV !== "production")
	                spyReportEnd();
	        }
	        finally {
	            endBatch();
	        }
	    };
	    ObservableObjectAdministration.prototype.illegalAccess = function (owner, propName) {
	        /**
	         * This happens if a property is accessed through the prototype chain, but the property was
	         * declared directly as own property on the prototype.
	         *
	         * E.g.:
	         * class A {
	         * }
	         * extendObservable(A.prototype, { x: 1 })
	         *
	         * classB extens A {
	         * }
	         * console.log(new B().x)
	         *
	         * It is unclear whether the property should be considered 'static' or inherited.
	         * Either use `console.log(A.x)`
	         * or: decorate(A, { x: observable })
	         *
	         * When using decorate, the property will always be redeclared as own property on the actual instance
	         */
	        console.warn("Property '" + propName + "' of '" + owner + "' was accessed through the prototype chain. Use 'decorate' instead to declare the prop or access it statically through it's owner");
	    };
	    /**
	     * Observes this object. Triggers for the events 'add', 'update' and 'delete'.
	     * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe
	     * for callback details
	     */
	    ObservableObjectAdministration.prototype.observe = function (callback, fireImmediately) {
	        process.env.NODE_ENV !== "production" &&
	            invariant(fireImmediately !== true, "`observe` doesn't support the fire immediately property for observable objects.");
	        return registerListener(this, callback);
	    };
	    ObservableObjectAdministration.prototype.intercept = function (handler) {
	        return registerInterceptor(this, handler);
	    };
	    ObservableObjectAdministration.prototype.notifyPropertyAddition = function (key, newValue) {
	        var notify = hasListeners(this);
	        var notifySpy = isSpyEnabled();
	        var change = notify || notifySpy
	            ? {
	                type: "add",
	                object: this.proxy || this.target,
	                name: key,
	                newValue: newValue
	            }
	            : null;
	        if (notifySpy && process.env.NODE_ENV !== "production")
	            spyReportStart(__assign(__assign({}, change), { name: this.name, key: key }));
	        if (notify)
	            notifyListeners(this, change);
	        if (notifySpy && process.env.NODE_ENV !== "production")
	            spyReportEnd();
	        if (this.pendingKeys) {
	            var entry = this.pendingKeys.get(key);
	            if (entry)
	                entry.set(true);
	        }
	        this.keysAtom.reportChanged();
	    };
	    ObservableObjectAdministration.prototype.getKeys = function () {
	        var e_1, _a;
	        this.keysAtom.reportObserved();
	        // return Reflect.ownKeys(this.values) as any
	        var res = [];
	        try {
	            for (var _b = __values(this.values), _c = _b.next(); !_c.done; _c = _b.next()) {
	                var _d = __read(_c.value, 2), key = _d[0], value = _d[1];
	                if (value instanceof ObservableValue)
	                    res.push(key);
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	        return res;
	    };
	    return ObservableObjectAdministration;
	}());
	function asObservableObject(target, name, defaultEnhancer) {
	    if (name === void 0) { name = ""; }
	    if (defaultEnhancer === void 0) { defaultEnhancer = deepEnhancer; }
	    if (Object.prototype.hasOwnProperty.call(target, $mobx))
	        return target[$mobx];
	    process.env.NODE_ENV !== "production" &&
	        invariant(Object.isExtensible(target), "Cannot make the designated object observable; it is not extensible");
	    if (!isPlainObject$2(target))
	        name = (target.constructor.name || "ObservableObject") + "@" + getNextId();
	    if (!name)
	        name = "ObservableObject@" + getNextId();
	    var adm = new ObservableObjectAdministration(target, new Map(), stringifyKey(name), defaultEnhancer);
	    addHiddenProp(target, $mobx, adm);
	    return adm;
	}
	var observablePropertyConfigs = Object.create(null);
	var computedPropertyConfigs = Object.create(null);
	function generateObservablePropConfig(propName) {
	    return (observablePropertyConfigs[propName] ||
	        (observablePropertyConfigs[propName] = {
	            configurable: true,
	            enumerable: true,
	            get: function () {
	                return this[$mobx].read(propName);
	            },
	            set: function (v) {
	                this[$mobx].write(propName, v);
	            }
	        }));
	}
	function getAdministrationForComputedPropOwner(owner) {
	    var adm = owner[$mobx];
	    if (!adm) {
	        // because computed props are declared on proty,
	        // the current instance might not have been initialized yet
	        initializeInstance(owner);
	        return owner[$mobx];
	    }
	    return adm;
	}
	function generateComputedPropConfig(propName) {
	    return (computedPropertyConfigs[propName] ||
	        (computedPropertyConfigs[propName] = {
	            configurable: globalState.computedConfigurable,
	            enumerable: false,
	            get: function () {
	                return getAdministrationForComputedPropOwner(this).read(propName);
	            },
	            set: function (v) {
	                getAdministrationForComputedPropOwner(this).write(propName, v);
	            }
	        }));
	}
	var isObservableObjectAdministration = createInstanceofPredicate("ObservableObjectAdministration", ObservableObjectAdministration);
	function isObservableObject(thing) {
	    if (isObject$1(thing)) {
	        // Initializers run lazily when transpiling to babel, so make sure they are run...
	        initializeInstance(thing);
	        return isObservableObjectAdministration(thing[$mobx]);
	    }
	    return false;
	}

	function getAtom(thing, property) {
	    if (typeof thing === "object" && thing !== null) {
	        if (isObservableArray(thing)) {
	            if (property !== undefined)
	                fail(process.env.NODE_ENV !== "production" &&
	                    "It is not possible to get index atoms from arrays");
	            return thing[$mobx].atom;
	        }
	        if (isObservableSet(thing)) {
	            return thing[$mobx];
	        }
	        if (isObservableMap(thing)) {
	            var anyThing = thing;
	            if (property === undefined)
	                return anyThing._keysAtom;
	            var observable = anyThing._data.get(property) || anyThing._hasMap.get(property);
	            if (!observable)
	                fail(process.env.NODE_ENV !== "production" &&
	                    "the entry '" + property + "' does not exist in the observable map '" + getDebugName(thing) + "'");
	            return observable;
	        }
	        // Initializers run lazily when transpiling to babel, so make sure they are run...
	        initializeInstance(thing);
	        if (property && !thing[$mobx])
	            thing[property]; // See #1072
	        if (isObservableObject(thing)) {
	            if (!property)
	                return fail(process.env.NODE_ENV !== "production" && "please specify a property");
	            var observable = thing[$mobx].values.get(property);
	            if (!observable)
	                fail(process.env.NODE_ENV !== "production" &&
	                    "no observable property '" + property + "' found on the observable object '" + getDebugName(thing) + "'");
	            return observable;
	        }
	        if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {
	            return thing;
	        }
	    }
	    else if (typeof thing === "function") {
	        if (isReaction(thing[$mobx])) {
	            // disposer function
	            return thing[$mobx];
	        }
	    }
	    return fail(process.env.NODE_ENV !== "production" && "Cannot obtain atom from " + thing);
	}
	function getAdministration(thing, property) {
	    if (!thing)
	        fail("Expecting some object");
	    if (property !== undefined)
	        return getAdministration(getAtom(thing, property));
	    if (isAtom(thing) || isComputedValue(thing) || isReaction(thing))
	        return thing;
	    if (isObservableMap(thing) || isObservableSet(thing))
	        return thing;
	    // Initializers run lazily when transpiling to babel, so make sure they are run...
	    initializeInstance(thing);
	    if (thing[$mobx])
	        return thing[$mobx];
	    fail(process.env.NODE_ENV !== "production" && "Cannot obtain administration from " + thing);
	}
	function getDebugName(thing, property) {
	    var named;
	    if (property !== undefined)
	        named = getAtom(thing, property);
	    else if (isObservableObject(thing) || isObservableMap(thing) || isObservableSet(thing))
	        named = getAdministration(thing);
	    else
	        named = getAtom(thing); // valid for arrays as well
	    return named.name;
	}

	var toString$1 = Object.prototype.toString;
	function deepEqual(a, b, depth) {
	    if (depth === void 0) { depth = -1; }
	    return eq(a, b, depth);
	}
	// Copied from https://github.com/jashkenas/underscore/blob/5c237a7c682fb68fd5378203f0bf22dce1624854/underscore.js#L1186-L1289
	// Internal recursive comparison function for `isEqual`.
	function eq(a, b, depth, aStack, bStack) {
	    // Identical objects are equal. `0 === -0`, but they aren't identical.
	    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
	    if (a === b)
	        return a !== 0 || 1 / a === 1 / b;
	    // `null` or `undefined` only equal to itself (strict comparison).
	    if (a == null || b == null)
	        return false;
	    // `NaN`s are equivalent, but non-reflexive.
	    if (a !== a)
	        return b !== b;
	    // Exhaust primitive checks
	    var type = typeof a;
	    if (type !== "function" && type !== "object" && typeof b != "object")
	        return false;
	    // Compare `[[Class]]` names.
	    var className = toString$1.call(a);
	    if (className !== toString$1.call(b))
	        return false;
	    switch (className) {
	        // Strings, numbers, regular expressions, dates, and booleans are compared by value.
	        case "[object RegExp]":
	        // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
	        case "[object String]":
	            // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
	            // equivalent to `new String("5")`.
	            return "" + a === "" + b;
	        case "[object Number]":
	            // `NaN`s are equivalent, but non-reflexive.
	            // Object(NaN) is equivalent to NaN.
	            if (+a !== +a)
	                return +b !== +b;
	            // An `egal` comparison is performed for other numeric values.
	            return +a === 0 ? 1 / +a === 1 / b : +a === +b;
	        case "[object Date]":
	        case "[object Boolean]":
	            // Coerce dates and booleans to numeric primitive values. Dates are compared by their
	            // millisecond representations. Note that invalid dates with millisecond representations
	            // of `NaN` are not equivalent.
	            return +a === +b;
	        case "[object Symbol]":
	            return (typeof Symbol !== "undefined" && Symbol.valueOf.call(a) === Symbol.valueOf.call(b));
	        case "[object Map]":
	        case "[object Set]":
	            // Maps and Sets are unwrapped to arrays of entry-pairs, adding an incidental level.
	            // Hide this extra level by increasing the depth.
	            if (depth >= 0) {
	                depth++;
	            }
	            break;
	    }
	    // Unwrap any wrapped objects.
	    a = unwrap(a);
	    b = unwrap(b);
	    var areArrays = className === "[object Array]";
	    if (!areArrays) {
	        if (typeof a != "object" || typeof b != "object")
	            return false;
	        // Objects with different constructors are not equivalent, but `Object`s or `Array`s
	        // from different frames are.
	        var aCtor = a.constructor, bCtor = b.constructor;
	        if (aCtor !== bCtor &&
	            !(typeof aCtor === "function" &&
	                aCtor instanceof aCtor &&
	                typeof bCtor === "function" &&
	                bCtor instanceof bCtor) &&
	            ("constructor" in a && "constructor" in b)) {
	            return false;
	        }
	    }
	    if (depth === 0) {
	        return false;
	    }
	    else if (depth < 0) {
	        depth = -1;
	    }
	    // Assume equality for cyclic structures. The algorithm for detecting cyclic
	    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
	    // Initializing stack of traversed objects.
	    // It's done here since we only need them for objects and arrays comparison.
	    aStack = aStack || [];
	    bStack = bStack || [];
	    var length = aStack.length;
	    while (length--) {
	        // Linear search. Performance is inversely proportional to the number of
	        // unique nested structures.
	        if (aStack[length] === a)
	            return bStack[length] === b;
	    }
	    // Add the first object to the stack of traversed objects.
	    aStack.push(a);
	    bStack.push(b);
	    // Recursively compare objects and arrays.
	    if (areArrays) {
	        // Compare array lengths to determine if a deep comparison is necessary.
	        length = a.length;
	        if (length !== b.length)
	            return false;
	        // Deep compare the contents, ignoring non-numeric properties.
	        while (length--) {
	            if (!eq(a[length], b[length], depth - 1, aStack, bStack))
	                return false;
	        }
	    }
	    else {
	        // Deep compare objects.
	        var keys = Object.keys(a);
	        var key = void 0;
	        length = keys.length;
	        // Ensure that both objects contain the same number of properties before comparing deep equality.
	        if (Object.keys(b).length !== length)
	            return false;
	        while (length--) {
	            // Deep compare each member
	            key = keys[length];
	            if (!(has$1$2(b, key) && eq(a[key], b[key], depth - 1, aStack, bStack)))
	                return false;
	        }
	    }
	    // Remove the first object from the stack of traversed objects.
	    aStack.pop();
	    bStack.pop();
	    return true;
	}
	function unwrap(a) {
	    if (isObservableArray(a))
	        return a.slice();
	    if (isES6Map(a) || isObservableMap(a))
	        return Array.from(a.entries());
	    if (isES6Set(a) || isObservableSet(a))
	        return Array.from(a.entries());
	    return a;
	}
	function has$1$2(a, key) {
	    return Object.prototype.hasOwnProperty.call(a, key);
	}

	function makeIterable(iterator) {
	    iterator[Symbol.iterator] = getSelf;
	    return iterator;
	}
	function getSelf() {
	    return this;
	}

	/*
	The only reason for this file to exist is pure horror:
	Without it rollup can make the bundling fail at any point in time; when it rolls up the files in the wrong order
	it will cause undefined errors (for example because super classes or local variables not being hoisted).
	With this file that will still happen,
	but at least in this file we can magically reorder the imports with trial and error until the build succeeds again.
	*/

	/**
	 * (c) Michel Weststrate 2015 - 2018
	 * MIT Licensed
	 *
	 * Welcome to the mobx sources! To get an global overview of how MobX internally works,
	 * this is a good place to start:
	 * https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.xvbh6qd74
	 *
	 * Source folders:
	 * ===============
	 *
	 * - api/     Most of the public static methods exposed by the module can be found here.
	 * - core/    Implementation of the MobX algorithm; atoms, derivations, reactions, dependency trees, optimizations. Cool stuff can be found here.
	 * - types/   All the magic that is need to have observable objects, arrays and values is in this folder. Including the modifiers like `asFlat`.
	 * - utils/   Utility stuff.
	 *
	 */
	if (typeof Proxy === "undefined" || typeof Symbol === "undefined") {
	    throw new Error("[mobx] MobX 5+ requires Proxy and Symbol objects. If your environment doesn't support Symbol or Proxy objects, please downgrade to MobX 4. For React Native Android, consider upgrading JSCore.");
	}
	try {
	    // define process.env if needed
	    // if this is not a production build in the first place
	    // (in which case the expression below would be substituted with 'production')
	    process.env.NODE_ENV;
	}
	catch (e) {
	    var g$1 = getGlobal();
	    if (typeof process === "undefined")
	        g$1.process = {};
	    g$1.process.env = {};
	}
	(function () {
	    function testCodeMinification() { }
	    if (testCodeMinification.name !== "testCodeMinification" &&
	        process.env.NODE_ENV !== "production" &&
	        typeof process !== 'undefined' && process.env.IGNORE_MOBX_MINIFY_WARNING !== "true") {
	        // trick so it doesn't get replaced
	        var varName = ["process", "env", "NODE_ENV"].join(".");
	        console.warn("[mobx] you are running a minified build, but '" + varName + "' was not set to 'production' in your bundler. This results in an unnecessarily large and slow bundle");
	    }
	})();
	if (typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === "object") {
	    // See: https://github.com/andykog/mobx-devtools/
	    __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({
	        spy: spy,
	        extras: {
	            getDebugName: getDebugName
	        },
	        $mobx: $mobx
	    });
	}

	if (!React.useState) {
	  throw new Error("mobx-react-lite requires React with Hooks support");
	}

	if (!spy) {
	  throw new Error("mobx-react-lite requires mobx at least version 4 to be available");
	}

	function _extends$3() {
	  _extends$3 = Object.assign || function (target) {
	    for (var i = 1; i < arguments.length; i++) {
	      var source = arguments[i];

	      for (var key in source) {
	        if (Object.prototype.hasOwnProperty.call(source, key)) {
	          target[key] = source[key];
	        }
	      }
	    }

	    return target;
	  };

	  return _extends$3.apply(this, arguments);
	}

	function useForceUpdate() {
	  var _useState = React.useState(0),
	      setTick = _useState[1];

	  var update = React.useCallback(function () {
	    setTick(function (tick) {
	      return tick + 1;
	    });
	  }, []);
	  return update;
	}
	function isPlainObject$3(value) {
	  if (!value || typeof value !== "object") {
	    return false;
	  }

	  var proto = Object.getPrototypeOf(value);
	  return !proto || proto === Object.prototype;
	}
	function getSymbol(name) {
	  if (typeof Symbol === "function") {
	    return Symbol.for(name);
	  }

	  return "__$mobx-react " + name + "__";
	}
	var mockGlobal$1 = {};
	function getGlobal$1() {
	  if (typeof window !== "undefined") {
	    return window;
	  }

	  if (typeof global !== "undefined") {
	    return global;
	  }

	  if (typeof self !== "undefined") {
	    return self;
	  }

	  return mockGlobal$1;
	}

	var observerBatchingConfiguredSymbol =
	/*#__PURE__*/
	getSymbol("observerBatching");
	var isObserverBatched = function isObserverBatched() {
	  return getGlobal$1()[observerBatchingConfiguredSymbol];
	};

	function printDebugValue(v) {
	  return getDependencyTree(v);
	}

	function createTrackingData(reaction) {
	  var trackingData = {
	    cleanAt: Date.now() + CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS,
	    reaction: reaction
	  };
	  return trackingData;
	}
	/**
	 * The minimum time before we'll clean up a Reaction created in a render
	 * for a component that hasn't managed to run its effects. This needs to
	 * be big enough to ensure that a component won't turn up and have its
	 * effects run without being re-rendered.
	 */

	var CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS = 10000;
	/**
	 * The frequency with which we'll check for leaked reactions.
	 */

	var CLEANUP_TIMER_LOOP_MILLIS = 10000;
	/**
	 * Reactions created by components that have yet to be fully mounted.
	 */

	var uncommittedReactionRefs =
	/*#__PURE__*/
	new Set();
	/**
	 * Latest 'uncommitted reactions' cleanup timer handle.
	 */

	var reactionCleanupHandle;

	function ensureCleanupTimerRunning() {
	  if (reactionCleanupHandle === undefined) {
	    reactionCleanupHandle = setTimeout(cleanUncommittedReactions, CLEANUP_TIMER_LOOP_MILLIS);
	  }
	}

	function scheduleCleanupOfReactionIfLeaked(ref) {
	  uncommittedReactionRefs.add(ref);
	  ensureCleanupTimerRunning();
	}
	function recordReactionAsCommitted(reactionRef) {
	  uncommittedReactionRefs.delete(reactionRef);
	}
	/**
	 * Run by the cleanup timer to dispose any outstanding reactions
	 */

	function cleanUncommittedReactions() {
	  reactionCleanupHandle = undefined; // Loop through all the candidate leaked reactions; those older
	  // than CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS get tidied.

	  var now = Date.now();
	  uncommittedReactionRefs.forEach(function (ref) {
	    var tracking = ref.current;

	    if (tracking) {
	      if (now >= tracking.cleanAt) {
	        // It's time to tidy up this leaked reaction.
	        tracking.reaction.dispose();
	        ref.current = null;
	        uncommittedReactionRefs.delete(ref);
	      }
	    }
	  });

	  if (uncommittedReactionRefs.size > 0) {
	    // We've just finished a round of cleanups but there are still
	    // some leak candidates outstanding.
	    ensureCleanupTimerRunning();
	  }
	}

	var EMPTY_OBJECT$1 = {};

	function observerComponentNameFor(baseComponentName) {
	  return "observer" + baseComponentName;
	}

	var warnedAboutBatching = false;
	function useObserver(fn, baseComponentName, options) {
	  if (baseComponentName === void 0) {
	    baseComponentName = "observed";
	  }

	  if (options === void 0) {
	    options = EMPTY_OBJECT$1;
	  }

	  if (process.env.NODE_ENV !== "production" && !warnedAboutBatching && !isObserverBatched()) {
	    console.warn("[MobX] You haven't configured observer batching which might result in unexpected behavior in some cases. See more at https://github.com/mobxjs/mobx-react-lite/#observer-batching");
	    warnedAboutBatching = true;
	  }

	  var wantedForceUpdateHook = options.useForceUpdate || useForceUpdate;
	  var forceUpdate = wantedForceUpdateHook(); // StrictMode/ConcurrentMode/Suspense may mean that our component is
	  // rendered and abandoned multiple times, so we need to track leaked
	  // Reactions.

	  var reactionTrackingRef = React__default.useRef(null);

	  if (!reactionTrackingRef.current) {
	    // First render for this component (or first time since a previous
	    // reaction from an abandoned render was disposed).
	    var newReaction = new Reaction(observerComponentNameFor(baseComponentName), function () {
	      // Observable has changed, meaning we want to re-render
	      // BUT if we're a component that hasn't yet got to the useEffect()
	      // stage, we might be a component that _started_ to render, but
	      // got dropped, and we don't want to make state changes then.
	      // (It triggers warnings in StrictMode, for a start.)
	      if (trackingData.mounted) {
	        // We have reached useEffect(), so we're mounted, and can trigger an update
	        forceUpdate();
	      } else {
	        // We haven't yet reached useEffect(), so we'll need to trigger a re-render
	        // when (and if) useEffect() arrives.  The easiest way to do that is just to
	        // drop our current reaction and allow useEffect() to recreate it.
	        newReaction.dispose();
	        reactionTrackingRef.current = null;
	      }
	    });
	    var trackingData = createTrackingData(newReaction);
	    reactionTrackingRef.current = trackingData;
	    scheduleCleanupOfReactionIfLeaked(reactionTrackingRef);
	  }

	  var reaction = reactionTrackingRef.current.reaction;
	  React__default.useDebugValue(reaction, printDebugValue);
	  React__default.useEffect(function () {
	    // Called on first mount only
	    recordReactionAsCommitted(reactionTrackingRef);

	    if (reactionTrackingRef.current) {
	      // Great. We've already got our reaction from our render;
	      // all we need to do is to record that it's now mounted,
	      // to allow future observable changes to trigger re-renders
	      reactionTrackingRef.current.mounted = true;
	    } else {
	      // The reaction we set up in our render has been disposed.
	      // This is either due to bad timings of renderings, e.g. our
	      // component was paused for a _very_ long time, and our
	      // reaction got cleaned up, or we got a observable change
	      // between render and useEffect
	      // Re-create the reaction
	      reactionTrackingRef.current = {
	        reaction: new Reaction(observerComponentNameFor(baseComponentName), function () {
	          // We've definitely already been mounted at this point
	          forceUpdate();
	        }),
	        cleanAt: Infinity
	      };
	      forceUpdate();
	    }

	    return function () {
	      reactionTrackingRef.current.reaction.dispose();
	      reactionTrackingRef.current = null;
	    };
	  }, []); // render the original component, but have the
	  // reaction track the observables, so that rendering
	  // can be invalidated (see above) once a dependency changes

	  var rendering;
	  var exception;
	  reaction.track(function () {
	    try {
	      rendering = fn();
	    } catch (e) {
	      exception = e;
	    }
	  });

	  if (exception) {
	    throw exception; // re-throw any exceptions catched during rendering
	  }

	  return rendering;
	}

	function observer(baseComponent, options) {

	  var realOptions = _extends$3({
	    forwardRef: false
	  }, options);

	  var baseComponentName = baseComponent.displayName || baseComponent.name;

	  var wrappedComponent = function wrappedComponent(props, ref) {
	    return useObserver(function () {
	      return baseComponent(props, ref);
	    }, baseComponentName);
	  };

	  wrappedComponent.displayName = baseComponentName; // memo; we are not interested in deep updates
	  // in props; we assume that if deep objects are changed,
	  // this is in observables, which would have been tracked anyway

	  var memoComponent;

	  if (realOptions.forwardRef) {
	    // we have to use forwardRef here because:
	    // 1. it cannot go before memo, only after it
	    // 2. forwardRef converts the function into an actual component, so we can't let the baseComponent do it
	    //    since it wouldn't be a callable function anymore
	    memoComponent = React.memo(React.forwardRef(wrappedComponent));
	  } else {
	    memoComponent = React.memo(wrappedComponent);
	  }

	  copyStaticProperties(baseComponent, memoComponent);
	  memoComponent.displayName = baseComponentName;
	  return memoComponent;
	} // based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js

	var hoistBlackList = {
	  $$typeof: true,
	  render: true,
	  compare: true,
	  type: true
	};

	function copyStaticProperties(base, target) {
	  Object.keys(base).forEach(function (key) {
	    if (!hoistBlackList[key]) {
	      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key));
	    }
	  });
	}

	function ObserverComponent(_ref) {
	  var children = _ref.children,
	      render = _ref.render;
	  var component = children || render;

	  if (typeof component !== "function") {
	    return null;
	  }

	  return useObserver(component);
	}

	ObserverComponent.propTypes = {
	  children: ObserverPropsCheck,
	  render: ObserverPropsCheck
	};
	ObserverComponent.displayName = "Observer";

	function ObserverPropsCheck(props, key, componentName, location, propFullName) {
	  var extraKey = key === "children" ? "render" : "children";
	  var hasProp = typeof props[key] === "function";
	  var hasExtraProp = typeof props[extraKey] === "function";

	  if (hasProp && hasExtraProp) {
	    return new Error("MobX Observer: Do not use children and render in the same time in`" + componentName);
	  }

	  if (hasProp || hasExtraProp) {
	    return null;
	  }

	  return new Error("Invalid prop `" + propFullName + "` of type `" + typeof props[key] + "` supplied to" + " `" + componentName + "`, expected `function`.");
	}

	function useAsObservableSourceInternal(current, usedByLocalStore) {
	  var culprit = usedByLocalStore ? "useLocalStore" : "useAsObservableSource";

	  if (process.env.NODE_ENV !== "production" && usedByLocalStore) {
	    var _React$useState = React__default.useState(current),
	        initialSource = _React$useState[0];

	    if (initialSource !== undefined && current === undefined || initialSource === undefined && current !== undefined) {
	      throw new Error("make sure you never pass `undefined` to " + culprit);
	    }
	  }

	  if (usedByLocalStore && current === undefined) {
	    return undefined;
	  }

	  if (process.env.NODE_ENV !== "production" && !isPlainObject$3(current)) {
	    throw new Error(culprit + " expects a plain object as " + (usedByLocalStore ? "second" : "first") + " argument");
	  }

	  var _React$useState2 = React__default.useState(function () {
	    return observable(current, {}, {
	      deep: false
	    });
	  }),
	      res = _React$useState2[0];

	  if (process.env.NODE_ENV !== "production" && Object.keys(res).length !== Object.keys(current).length) {
	    throw new Error("the shape of objects passed to " + culprit + " should be stable");
	  }

	  runInAction(function () {
	    Object.assign(res, current);
	  });
	  return res;
	}

	function useLocalStore(initializer, current) {
	  var source = useAsObservableSourceInternal(current, true);
	  return React__default.useState(function () {
	    var local = observable(initializer(source));

	    if (isPlainObject$3(local)) {
	      runInAction(function () {
	        Object.keys(local).forEach(function (key) {
	          var value = local[key];

	          if (typeof value === "function") {
	            // @ts-ignore No idea why ts2536 is popping out here
	            local[key] = wrapInTransaction(value, local);
	          }
	        });
	      });
	    }

	    return local;
	  })[0];
	} // tslint:disable-next-line: ban-types

	function wrapInTransaction(fn, context) {
	  return function () {
	    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return transaction(function () {
	      return fn.apply(context, args);
	    });
	  };
	}
	//# sourceMappingURL=mobxreactlite.esm.js.map

	var symbolId = 0;

	function createSymbol(name) {
	  if (typeof Symbol === "function") {
	    return Symbol(name);
	  }

	  var symbol = "__$mobx-react " + name + " (" + symbolId + ")";
	  symbolId++;
	  return symbol;
	}

	var createdSymbols = {};
	function newSymbol(name) {
	  if (!createdSymbols[name]) {
	    createdSymbols[name] = createSymbol(name);
	  }

	  return createdSymbols[name];
	}
	function shallowEqual(objA, objB) {
	  //From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js
	  if (is(objA, objB)) return true;

	  if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
	    return false;
	  }

	  var keysA = Object.keys(objA);
	  var keysB = Object.keys(objB);
	  if (keysA.length !== keysB.length) return false;

	  for (var i = 0; i < keysA.length; i++) {
	    if (!Object.hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
	      return false;
	    }
	  }

	  return true;
	}

	function is(x, y) {
	  // From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js
	  if (x === y) {
	    return x !== 0 || 1 / x === 1 / y;
	  } else {
	    return x !== x && y !== y;
	  }
	} // based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js
	/**
	 * Helper to set `prop` to `this` as non-enumerable (hidden prop)
	 * @param target
	 * @param prop
	 * @param value
	 */

	function setHiddenProp(target, prop, value) {
	  if (!Object.hasOwnProperty.call(target, prop)) {
	    Object.defineProperty(target, prop, {
	      enumerable: false,
	      configurable: true,
	      writable: true,
	      value: value
	    });
	  } else {
	    target[prop] = value;
	  }
	}
	/**
	 * Utilities for patching componentWillUnmount, to make sure @disposeOnUnmount works correctly icm with user defined hooks
	 * and the handler provided by mobx-react
	 */

	var mobxMixins =
	/*#__PURE__*/
	newSymbol("patchMixins");
	var mobxPatchedDefinition =
	/*#__PURE__*/
	newSymbol("patchedDefinition");

	function getMixins(target, methodName) {
	  var mixins = target[mobxMixins] = target[mobxMixins] || {};
	  var methodMixins = mixins[methodName] = mixins[methodName] || {};
	  methodMixins.locks = methodMixins.locks || 0;
	  methodMixins.methods = methodMixins.methods || [];
	  return methodMixins;
	}

	function wrapper(realMethod, mixins) {
	  var _this = this;

	  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	    args[_key - 2] = arguments[_key];
	  }

	  // locks are used to ensure that mixins are invoked only once per invocation, even on recursive calls
	  mixins.locks++;

	  try {
	    var retVal;

	    if (realMethod !== undefined && realMethod !== null) {
	      retVal = realMethod.apply(this, args);
	    }

	    return retVal;
	  } finally {
	    mixins.locks--;

	    if (mixins.locks === 0) {
	      mixins.methods.forEach(function (mx) {
	        mx.apply(_this, args);
	      });
	    }
	  }
	}

	function wrapFunction(realMethod, mixins) {
	  var fn = function fn() {
	    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	      args[_key2] = arguments[_key2];
	    }

	    wrapper.call.apply(wrapper, [this, realMethod, mixins].concat(args));
	  };

	  return fn;
	}

	function patch(target, methodName, mixinMethod) {
	  var mixins = getMixins(target, methodName);

	  if (mixins.methods.indexOf(mixinMethod) < 0) {
	    mixins.methods.push(mixinMethod);
	  }

	  var oldDefinition = Object.getOwnPropertyDescriptor(target, methodName);

	  if (oldDefinition && oldDefinition[mobxPatchedDefinition]) {
	    // already patched definition, do not repatch
	    return;
	  }

	  var originalMethod = target[methodName];
	  var newDefinition = createDefinition(target, methodName, oldDefinition ? oldDefinition.enumerable : undefined, mixins, originalMethod);
	  Object.defineProperty(target, methodName, newDefinition);
	}

	function createDefinition(target, methodName, enumerable, mixins, originalMethod) {
	  var _ref;

	  var wrappedFunc = wrapFunction(originalMethod, mixins);
	  return _ref = {}, _ref[mobxPatchedDefinition] = true, _ref.get = function get() {
	    return wrappedFunc;
	  }, _ref.set = function set(value) {
	    if (this === target) {
	      wrappedFunc = wrapFunction(value, mixins);
	    } else {
	      // when it is an instance of the prototype/a child prototype patch that particular case again separately
	      // since we need to store separate values depending on wether it is the actual instance, the prototype, etc
	      // e.g. the method for super might not be the same as the method for the prototype which might be not the same
	      // as the method for the instance
	      var newDefinition = createDefinition(this, methodName, enumerable, mixins, value);
	      Object.defineProperty(this, methodName, newDefinition);
	    }
	  }, _ref.configurable = true, _ref.enumerable = enumerable, _ref;
	}

	var mobxAdminProperty = $mobx || "$mobx";
	var mobxIsUnmounted =
	/*#__PURE__*/
	newSymbol("isUnmounted");
	var skipRenderKey =
	/*#__PURE__*/
	newSymbol("skipRender");
	var isForcingUpdateKey =
	/*#__PURE__*/
	newSymbol("isForcingUpdate");
	function makeClassComponentObserver(componentClass) {
	  var target = componentClass.prototype;
	  if (target.componentWillReact) throw new Error("The componentWillReact life-cycle event is no longer supported");

	  if (componentClass["__proto__"] !== React.PureComponent) {
	    if (!target.shouldComponentUpdate) target.shouldComponentUpdate = observerSCU;else if (target.shouldComponentUpdate !== observerSCU) // n.b. unequal check, instead of existence check, as @observer might be on superclass as well
	      throw new Error("It is not allowed to use shouldComponentUpdate in observer based components.");
	  } // this.props and this.state are made observable, just to make sure @computed fields that
	  // are defined inside the component, and which rely on state or props, re-compute if state or props change
	  // (otherwise the computed wouldn't update and become stale on props change, since props are not observable)
	  // However, this solution is not without it's own problems: https://github.com/mobxjs/mobx-react/issues?utf8=%E2%9C%93&q=is%3Aissue+label%3Aobservable-props-or-not+


	  makeObservableProp(target, "props");
	  makeObservableProp(target, "state");
	  var baseRender = target.render;

	  target.render = function () {
	    return makeComponentReactive.call(this, baseRender);
	  };

	  patch(target, "componentWillUnmount", function () {

	    if (this.render[mobxAdminProperty]) {
	      this.render[mobxAdminProperty].dispose();
	    } else if (process.env.NODE_ENV !== "production") {
	      var displayName = getDisplayName$2(this);
	      console.warn("The render function for an observer component (" + displayName + ") was modified after MobX attached. This is not supported, since the new function can't be triggered by MobX.");
	    }

	    this[mobxIsUnmounted] = true;
	  });
	  return componentClass;
	} // Generates a friendly name for debugging

	function getDisplayName$2(comp) {
	  return comp.displayName || comp.name || comp.constructor && (comp.constructor.displayName || comp.constructor.name) || "<component>";
	}

	function makeComponentReactive(render) {
	  var _this = this;
	  /**
	   * If props are shallowly modified, react will render anyway,
	   * so atom.reportChanged() should not result in yet another re-render
	   */

	  setHiddenProp(this, skipRenderKey, false);
	  /**
	   * forceUpdate will re-assign this.props. We don't want that to cause a loop,
	   * so detect these changes
	   */

	  setHiddenProp(this, isForcingUpdateKey, false);
	  var initialName = getDisplayName$2(this);
	  var baseRender = render.bind(this);
	  var isRenderingPending = false;
	  var reaction = new Reaction(initialName + ".render()", function () {
	    if (!isRenderingPending) {
	      // N.B. Getting here *before mounting* means that a component constructor has side effects (see the relevant test in misc.js)
	      // This unidiomatic React usage but React will correctly warn about this so we continue as usual
	      // See #85 / Pull #44
	      isRenderingPending = true;

	      if (_this[mobxIsUnmounted] !== true) {
	        var hasError = true;

	        try {
	          setHiddenProp(_this, isForcingUpdateKey, true);
	          if (!_this[skipRenderKey]) React.Component.prototype.forceUpdate.call(_this);
	          hasError = false;
	        } finally {
	          setHiddenProp(_this, isForcingUpdateKey, false);
	          if (hasError) reaction.dispose();
	        }
	      }
	    }
	  });
	  reaction["reactComponent"] = this;
	  reactiveRender[mobxAdminProperty] = reaction;
	  this.render = reactiveRender;

	  function reactiveRender() {
	    isRenderingPending = false;
	    var exception = undefined;
	    var rendering = undefined;
	    reaction.track(function () {
	      try {
	        rendering = allowStateChanges(false, baseRender);
	      } catch (e) {
	        exception = e;
	      }
	    });

	    if (exception) {
	      throw exception;
	    }

	    return rendering;
	  }

	  return reactiveRender.call(this);
	}

	function observerSCU(nextProps, nextState) {


	  if (this.state !== nextState) {
	    return true;
	  } // update if props are shallowly not equal, inspired by PureRenderMixin
	  // we could return just 'false' here, and avoid the `skipRender` checks etc
	  // however, it is nicer if lifecycle events are triggered like usually,
	  // so we return true here if props are shallowly modified.


	  return !shallowEqual(this.props, nextProps);
	}

	function makeObservableProp(target, propName) {
	  var valueHolderKey = newSymbol("reactProp_" + propName + "_valueHolder");
	  var atomHolderKey = newSymbol("reactProp_" + propName + "_atomHolder");

	  function getAtom() {
	    if (!this[atomHolderKey]) {
	      setHiddenProp(this, atomHolderKey, createAtom("reactive " + propName));
	    }

	    return this[atomHolderKey];
	  }

	  Object.defineProperty(target, propName, {
	    configurable: true,
	    enumerable: true,
	    get: function get() {
	      var prevReadState = false;

	      if (allowStateReadsStart && allowStateReadsEnd) {
	        prevReadState = allowStateReadsStart(true);
	      }

	      getAtom.call(this).reportObserved();

	      if (allowStateReadsStart && allowStateReadsEnd) {
	        allowStateReadsEnd(prevReadState);
	      }

	      return this[valueHolderKey];
	    },
	    set: function set(v) {
	      if (!this[isForcingUpdateKey] && !shallowEqual(this[valueHolderKey], v)) {
	        setHiddenProp(this, valueHolderKey, v);
	        setHiddenProp(this, skipRenderKey, true);
	        getAtom.call(this).reportChanged();
	        setHiddenProp(this, skipRenderKey, false);
	      } else {
	        setHiddenProp(this, valueHolderKey, v);
	      }
	    }
	  });
	}

	var hasSymbol$1 = typeof Symbol === "function" && Symbol.for; // Using react-is had some issues (and operates on elements, not on types), see #608 / #609

	var ReactForwardRefSymbol = hasSymbol$1 ?
	/*#__PURE__*/
	Symbol.for("react.forward_ref") : typeof React.forwardRef === "function" &&
	/*#__PURE__*/
	React.forwardRef(function (props) {
	  return null;
	})["$$typeof"];
	var ReactMemoSymbol = hasSymbol$1 ?
	/*#__PURE__*/
	Symbol.for("react.memo") : typeof React.memo === "function" &&
	/*#__PURE__*/
	React.memo(function (props) {
	  return null;
	})["$$typeof"];
	/**
	 * Observer function / decorator
	 */

	function observer$1(component) {
	  if (component["isMobxInjector"] === true) {
	    console.warn("Mobx observer: You are trying to use 'observer' on a component that already has 'inject'. Please apply 'observer' before applying 'inject'");
	  }

	  if (ReactMemoSymbol && component["$$typeof"] === ReactMemoSymbol) {
	    throw new Error("Mobx observer: You are trying to use 'observer' on a function component wrapped in either another observer or 'React.memo'. The observer already applies 'React.memo' for you.");
	  } // Unwrap forward refs into `<Observer>` component
	  // we need to unwrap the render, because it is the inner render that needs to be tracked,
	  // not the ForwardRef HoC


	  if (ReactForwardRefSymbol && component["$$typeof"] === ReactForwardRefSymbol) {
	    var baseRender = component["render"];
	    if (typeof baseRender !== "function") throw new Error("render property of ForwardRef was not a function");
	    return React.forwardRef(function ObserverForwardRef() {
	      var args = arguments;
	      return React.createElement(ObserverComponent, null, function () {
	        return baseRender.apply(undefined, args);
	      });
	    });
	  } // Function component


	  if (typeof component === "function" && (!component.prototype || !component.prototype.render) && !component["isReactClass"] && !Object.prototype.isPrototypeOf.call(React.Component, component)) {
	    return observer(component);
	  }

	  return makeClassComponentObserver(component);
	}

	if (!React.Component) throw new Error("mobx-react requires React to be available");
	if (!observable) throw new Error("mobx-react requires mobx to be available");
	//# sourceMappingURL=mobxreact.esm.js.map

	var ShoppingCart = createCommonjsModule(function (module, exports) {



	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.default = void 0;

	var _react = interopRequireDefault(React__default);

	var _createSvgIcon = interopRequireDefault(createSvgIcon_1);

	var _default = (0, _createSvgIcon.default)(_react.default.createElement("path", {
	  d: "M7 18c-1.1 0-1.99.9-1.99 2S5.9 22 7 22s2-.9 2-2-.9-2-2-2zM1 2v2h2l3.6 7.59-1.35 2.45c-.16.28-.25.61-.25.96 0 1.1.9 2 2 2h12v-2H7.42c-.14 0-.25-.11-.25-.25l.03-.12.9-1.63h7.45c.75 0 1.41-.41 1.75-1.03l3.58-6.49c.08-.14.12-.31.12-.48 0-.55-.45-1-1-1H5.21l-.94-2H1zm16 16c-1.1 0-1.99.9-1.99 2s.89 2 1.99 2 2-.9 2-2-.9-2-2-2z"
	}), 'ShoppingCart');

	exports.default = _default;
	});

	var ShoppingCartIcon = unwrapExports(ShoppingCart);

	const useStyles$9 = makeStyles$1((theme) => ({
	    right: {
	        textAlign: 'right',
	    },
	    bold: {
	        fontWeight: 700,
	    },
	    coupon: {
	        paddingBottom: theme.spacing(2),
	    },
	    lineSpacing: {
	        paddingBottom: theme.spacing(1),
	    },
	    total: {
	        paddingTop: theme.spacing(2),
	        paddingBottom: theme.spacing(2),
	        '& > *': {
	            fontWeight: 800,
	        },
	    },
	    couponInput: {
	        '& .MuiInputBase-root': {
	            borderTopRightRadius: 0,
	            borderBottomRightRadius: 0,
	        },
	        '& .MuiOutlinedInput-notchedOutline': {
	            borderRight: 0,
	        },
	    },
	    couponButton: {
	        borderTopLeftRadius: 0,
	        borderBottomLeftRadius: 0,
	        border: '1px solid',
	        borderColor: 'rgba(0, 0, 0, 0.23)',
	        paddingTop: 7,
	        paddingBottom: 7,
	    },
	    cartItems: {
	        paddingTop: theme.spacing(2),
	    },
	    cartItem: {
	        paddingBottom: theme.spacing(2),
	    },
	    cartItemPrice: {
	        transform: 'translate(0, 4px)',
	    },
	    cartItemImg: {
	        width: 120,
	        maxWidth: '33%',
	    },
	    cartImg: {
	        width: '100%',
	    },
	    cartDescription: {
	        '& *': {
	            margin: 0,
	        },
	    },
	    summaryNumber: {
	        width: 120,
	        maxWidth: '40%',
	    },
	    checkoutButton: {
	        marginTop: theme.spacing(2),
	    },
	}));
	const quantityOpts = {};
	for (let i = 0; i < 10; i++) {
	    quantityOpts[i] = i;
	}
	const Cart = ({ order, setCoupon, setItem, locked, cartIcon, cartTitle, showDescription, showTotals, cartCheckoutUrl, nativeSelects, }) => {
	    const classes = useStyles$9();
	    return (React__default.createElement(Box, { p: [2, 3, 4], className: 'cart', onMouseDown: (event) => {
	            event.stopPropagation();
	        } },
	        React__default.createElement(StyledGrid, { container: true },
	            React__default.createElement(StyledGrid, { item: true, xs: 12, className: 'cart-header' },
	                React__default.createElement(StyledGrid, { container: true, spacing: 1, alignItems: 'center' },
	                    React__default.createElement(StyledGrid, { item: true, className: 'cart-icon' }, cartIcon || React__default.createElement(ShoppingCartIcon, { style: { fontSize: '2rem' } })),
	                    React__default.createElement(StyledGrid, { item: true, className: 'cart-title' }, !!(order.items && order.items.length && order.items.length > 0)
	                        ? cartTitle || (React__default.createElement(Typography$1, { variant: 'h6', className: 'cart-your-items-title' }, "Your Items"))
	                        : React__default.createElement(Typography$1, { variant: 'h6', className: 'cart-is-empty-title' }, "Your Cart Is Empty.")))),
	            !!(order.items && order.items.length && order.items.length > 0)
	                && React__default.createElement(StyledGrid, { item: true, xs: 12 },
	                    React__default.createElement("div", { className: classnames(classes.cartItems, 'cart-items') }, order.items.map((item) => {
	                        return (React__default.createElement(StyledGrid, { container: true, alignItems: 'center', key: item.name, className: classnames('cart-item', classes.cartItem) }, item.imageURL
	                            ? (React__default.createElement(React__default.Fragment, null,
	                                React__default.createElement(StyledGrid, { container: true, spacing: 2 },
	                                    React__default.createElement(StyledGrid, { item: true, className: classnames('cart-item-image', classes.cartItemImg) },
	                                        React__default.createElement("img", { src: item.imageURL, alt: item.name, className: classes.cartImg })),
	                                    React__default.createElement(StyledGrid, { item: true, xs: true, className: 'cart-item-text' },
	                                        React__default.createElement(Typography$1, { className: 'cart-item-name', variant: 'body1' },
	                                            React__default.createElement("strong", null, item.name)),
	                                        showDescription !== false && React__default.createElement(Typography$1, { className: classnames('cart-item-description', classes.cartDescription), variant: 'body2', dangerouslySetInnerHTML: { __html: item.description } }),
	                                        React__default.createElement("br", null))),
	                                React__default.createElement(StyledGrid, { container: true, spacing: 2 },
	                                    React__default.createElement(StyledGrid, { item: true, xs: true, className: 'cart-item-spacer' }),
	                                    React__default.createElement(StyledGrid, { item: true, className: classnames(classes.cartItemPrice, classes.right, 'cart-item-price') },
	                                        React__default.createElement(Typography$1, { variant: 'body1' },
	                                            renderUICurrencyFromJSON(order.currency, item.price),
	                                            "\u00A0x")),
	                                    React__default.createElement(StyledGrid, { item: true, className: classnames(classes.right, 'cart-item-quantity') },
	                                        React__default.createElement(MUIText, { select: true, disabled: item.locked || locked, options: quantityOpts, value: item.quantity, setValue: (quantity) => {
	                                                setItem(item.id, parseInt(quantity, 10));
	                                            }, SelectProps: { native: !!nativeSelects } }))),
	                                React__default.createElement("br", null))) : (React__default.createElement(React__default.Fragment, null,
	                            React__default.createElement(StyledGrid, { container: true, spacing: 2 },
	                                React__default.createElement(StyledGrid, { item: true, xs: 12, sm: 8, className: 'cart-item-name' },
	                                    React__default.createElement(Typography$1, { variant: 'body1' }, item.name),
	                                    React__default.createElement(Typography$1, { variant: 'body2' }, item.description),
	                                    React__default.createElement("br", null)),
	                                React__default.createElement(StyledGrid, { item: true, xs: 8, sm: 2, className: classnames(classes.right, 'cart-item-price') },
	                                    React__default.createElement(Typography$1, { variant: 'body1' },
	                                        renderUICurrencyFromJSON(order.currency, item.price),
	                                        "\u00A0x")),
	                                React__default.createElement(StyledGrid, { item: true, xs: 4, sm: 2, className: classnames(classes.right, 'cart-item-quantity') },
	                                    React__default.createElement(MUIText, { select: true, disabled: item.locked || locked, options: quantityOpts, value: item.quantity, setValue: (quantity) => {
	                                            setItem(item.id, parseInt(quantity, 10));
	                                        } }))),
	                            React__default.createElement("br", null)))));
	                    }))),
	            !!(order.items && order.items.length && order.items.length > 0)
	                && React__default.createElement(React__default.Fragment, null,
	                    React__default.createElement(StyledGrid, { item: true, xs: 12, className: classnames(classes.coupon, 'cart-coupon') },
	                        React__default.createElement("div", null,
	                            React__default.createElement(StyledGrid, { container: true },
	                                React__default.createElement(StyledGrid, { item: true, xs: 8, sm: 10, md: 9 },
	                                    React__default.createElement(MUIText, { className: classes.couponInput, fullWidth: true, disableAutoChange: true, variant: 'outlined', size: 'small', placeholder: 'Coupon Code', defaultValue: order.couponCodes[0], setValue: (code) => setCoupon(code), disabled: locked })),
	                                React__default.createElement(StyledGrid, { item: true, xs: 4, sm: 2, md: 3 },
	                                    React__default.createElement(Button$1, { className: classes.couponButton, fullWidth: true, disableElevation: true, size: 'medium', variant: 'contained', disabled: locked }, "Apply"))))),
	                    React__default.createElement(StyledGrid, { item: true, xs: 12, className: 'cart-summary' },
	                        React__default.createElement("div", null,
	                            React__default.createElement(StyledGrid, { container: true, className: classnames(classes.lineSpacing, 'cart-summary-subtotal') },
	                                React__default.createElement(StyledGrid, { item: true, xs: true, className: classes.right },
	                                    React__default.createElement(Typography$1, { variant: 'body1' }, "Subtotal")),
	                                React__default.createElement(StyledGrid, { item: true, className: classnames(classes.right, classes.summaryNumber) },
	                                    React__default.createElement(Typography$1, { variant: 'body1' }, renderUICurrencyFromJSON(order.currency, order.subtotal)))),
	                            order.discount > 0 && (React__default.createElement(StyledGrid, { container: true, className: classnames(classes.lineSpacing, 'cart-summary-discount') },
	                                React__default.createElement(StyledGrid, { item: true, xs: true, className: classes.right },
	                                    React__default.createElement(Typography$1, { variant: 'body1' }, "You Saved")),
	                                React__default.createElement(StyledGrid, { item: true, className: classnames(classes.right, classes.summaryNumber) },
	                                    React__default.createElement(Typography$1, { variant: 'body1' }, renderUICurrencyFromJSON(order.currency, order.discount))))),
	                            showTotals !== false && (React__default.createElement(React__default.Fragment, null,
	                                React__default.createElement(StyledGrid, { container: true, className: classnames(classes.lineSpacing, 'cart-summary-shipping') },
	                                    React__default.createElement(StyledGrid, { item: true, xs: true, className: classes.right },
	                                        React__default.createElement(Typography$1, { variant: 'body1' }, "Shipping")),
	                                    React__default.createElement(StyledGrid, { item: true, className: classnames(classes.right, classes.summaryNumber) },
	                                        React__default.createElement(Typography$1, { variant: 'body1' }, order.shipping ? renderUICurrencyFromJSON(order.currency, order.shipping) : 'Free'))),
	                                React__default.createElement(StyledGrid, { container: true, className: 'cart-summary-tax' },
	                                    React__default.createElement(StyledGrid, { item: true, xs: true, className: classes.right },
	                                        React__default.createElement(Typography$1, { variant: 'body1' }, "Tax")),
	                                    React__default.createElement(StyledGrid, { item: true, className: classnames(classes.right, classes.summaryNumber) },
	                                        React__default.createElement(Typography$1, { variant: 'body1' }, renderUICurrencyFromJSON(order.currency, order.tax)))),
	                                React__default.createElement(StyledGrid, { container: true, className: classnames(classes.total, 'cart-summary-total') },
	                                    React__default.createElement(StyledGrid, { item: true, xs: true, className: classes.right },
	                                        React__default.createElement(Typography$1, { variant: 'body1' }, "Total")),
	                                    React__default.createElement(StyledGrid, { item: true, className: classnames(classes.right, classes.summaryNumber) },
	                                        React__default.createElement(Typography$1, { variant: 'body1' }, renderUICurrencyFromJSON(order.currency, order.total)))))),
	                            cartCheckoutUrl && (React__default.createElement(StyledGrid, { container: true, className: classnames(classes.checkoutButton, 'cart-summary-checkout-button') },
	                                React__default.createElement(StyledGrid, { item: true, xs: true },
	                                    React__default.createElement(Link$1, { href: cartCheckoutUrl },
	                                        React__default.createElement(Button$1, { variant: 'contained', size: 'large', color: 'primary', fullWidth: true }, "Checkout")))))))))));
	};
	var Cart$1 = observer$1(Cart);

	const ThankYou = ({ width, height, order, }) => {
	    return (React__default.createElement(Box, { p: [2, 3, 4], className: 'thank-you' },
	        React__default.createElement(StyledGrid, { container: true },
	            React__default.createElement(StyledGrid, { item: true, xs: 12 },
	                React__default.createElement(Typography$1, { variant: 'h5' }, "Thank you for you purchase."),
	                React__default.createElement("br", null),
	                React__default.createElement(Typography$1, { variant: 'body1' },
	                    "Your order confirmation number is ",
	                    React__default.createElement("strong", null, order.number),
	                    "."),
	                React__default.createElement("br", null),
	                React__default.createElement(Typography$1, { variant: 'body1' }, "You will also receive an email confirmation as well shipping related updates.")))));
	};

	const useStyles$a = makeStyles$1(theme => ({
	    root: {
	        width: '100%',
	    },
	    stepper: {
	        paddingLeft: 0,
	        paddingRight: 0,
	    },
	    backButton: {
	        marginRight: theme.spacing(1),
	    },
	    instructions: {
	        marginTop: theme.spacing(1),
	        marginBottom: theme.spacing(1),
	    },
	}));
	const getSteps = () => {
	    return ['Your Info', 'Payment Info', 'Confirm Order'];
	};
	const HorizontalLabelPositionBelowStepper = ({ activeStep, steps, }) => {
	    const classes = useStyles$a();
	    if (!steps || !steps.length) {
	        steps = getSteps();
	    }
	    else if (steps.length < 3) {
	        steps = getSteps();
	    }
	    return (React__default.createElement("div", { className: classnames(classes.root, 'steps') },
	        React__default.createElement(Stepper$1, { activeStep: activeStep, alternativeLabel: true, className: classes.stepper }, steps.map(label => (React__default.createElement(Step$1, { key: label, className: 'step' },
	            React__default.createElement(StepLabel$1, null, label)))))));
	};

	// 7.2.1 RequireObjectCoercible(argument)
	var _defined = function (it) {
	  if (it == undefined) throw TypeError("Can't call method on  " + it);
	  return it;
	};

	// 7.1.13 ToObject(argument)

	var _toObject = function (it) {
	  return Object(_defined(it));
	};

	var hasOwnProperty$2 = {}.hasOwnProperty;
	var _has = function (it, key) {
	  return hasOwnProperty$2.call(it, key);
	};

	var _core = createCommonjsModule(function (module) {
	var core = module.exports = { version: '2.6.11' };
	if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef
	});
	var _core_1 = _core.version;

	var _global = createCommonjsModule(function (module) {
	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self
	  // eslint-disable-next-line no-new-func
	  : Function('return this')();
	if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef
	});

	var _library = true;

	var _shared = createCommonjsModule(function (module) {
	var SHARED = '__core-js_shared__';
	var store = _global[SHARED] || (_global[SHARED] = {});

	(module.exports = function (key, value) {
	  return store[key] || (store[key] = value !== undefined ? value : {});
	})('versions', []).push({
	  version: _core.version,
	  mode:  'pure' ,
	  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'
	});
	});

	var id$1 = 0;
	var px$1 = Math.random();
	var _uid = function (key) {
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id$1 + px$1).toString(36));
	};

	var shared = _shared('keys');

	var _sharedKey = function (key) {
	  return shared[key] || (shared[key] = _uid(key));
	};

	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)


	var IE_PROTO = _sharedKey('IE_PROTO');
	var ObjectProto = Object.prototype;

	var _objectGpo = Object.getPrototypeOf || function (O) {
	  O = _toObject(O);
	  if (_has(O, IE_PROTO)) return O[IE_PROTO];
	  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectProto : null;
	};

	var _aFunction = function (it) {
	  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
	  return it;
	};

	// optional / simple context binding

	var _ctx = function (fn, that, length) {
	  _aFunction(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 1: return function (a) {
	      return fn.call(that, a);
	    };
	    case 2: return function (a, b) {
	      return fn.call(that, a, b);
	    };
	    case 3: return function (a, b, c) {
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function (/* ...args */) {
	    return fn.apply(that, arguments);
	  };
	};

	var _isObject = function (it) {
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

	var _anObject = function (it) {
	  if (!_isObject(it)) throw TypeError(it + ' is not an object!');
	  return it;
	};

	var _fails = function (exec) {
	  try {
	    return !!exec();
	  } catch (e) {
	    return true;
	  }
	};

	// Thank's IE8 for his funny defineProperty
	var _descriptors = !_fails(function () {
	  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;
	});

	var document$1 = _global.document;
	// typeof document.createElement is 'object' in old IE
	var is$1 = _isObject(document$1) && _isObject(document$1.createElement);
	var _domCreate = function (it) {
	  return is$1 ? document$1.createElement(it) : {};
	};

	var _ie8DomDefine = !_descriptors && !_fails(function () {
	  return Object.defineProperty(_domCreate('div'), 'a', { get: function () { return 7; } }).a != 7;
	});

	// 7.1.1 ToPrimitive(input [, PreferredType])

	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	var _toPrimitive = function (it, S) {
	  if (!_isObject(it)) return it;
	  var fn, val;
	  if (S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
	  if (typeof (fn = it.valueOf) == 'function' && !_isObject(val = fn.call(it))) return val;
	  if (!S && typeof (fn = it.toString) == 'function' && !_isObject(val = fn.call(it))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};

	var dP = Object.defineProperty;

	var f$1 = _descriptors ? Object.defineProperty : function defineProperty(O, P, Attributes) {
	  _anObject(O);
	  P = _toPrimitive(P, true);
	  _anObject(Attributes);
	  if (_ie8DomDefine) try {
	    return dP(O, P, Attributes);
	  } catch (e) { /* empty */ }
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};

	var _objectDp = {
		f: f$1
	};

	var _propertyDesc = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};

	var _hide = _descriptors ? function (object, key, value) {
	  return _objectDp.f(object, key, _propertyDesc(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};

	var PROTOTYPE = 'prototype';

	var $export = function (type, name, source) {
	  var IS_FORCED = type & $export.F;
	  var IS_GLOBAL = type & $export.G;
	  var IS_STATIC = type & $export.S;
	  var IS_PROTO = type & $export.P;
	  var IS_BIND = type & $export.B;
	  var IS_WRAP = type & $export.W;
	  var exports = IS_GLOBAL ? _core : _core[name] || (_core[name] = {});
	  var expProto = exports[PROTOTYPE];
	  var target = IS_GLOBAL ? _global : IS_STATIC ? _global[name] : (_global[name] || {})[PROTOTYPE];
	  var key, own, out;
	  if (IS_GLOBAL) source = name;
	  for (key in source) {
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    if (own && _has(exports, key)) continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? _ctx(out, _global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function (C) {
	      var F = function (a, b, c) {
	        if (this instanceof C) {
	          switch (arguments.length) {
	            case 0: return new C();
	            case 1: return new C(a);
	            case 2: return new C(a, b);
	          } return new C(a, b, c);
	        } return C.apply(this, arguments);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? _ctx(Function.call, out) : out;
	    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
	    if (IS_PROTO) {
	      (exports.virtual || (exports.virtual = {}))[key] = out;
	      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
	      if (type & $export.R && expProto && !expProto[key]) _hide(expProto, key, out);
	    }
	  }
	};
	// type bitmap
	$export.F = 1;   // forced
	$export.G = 2;   // global
	$export.S = 4;   // static
	$export.P = 8;   // proto
	$export.B = 16;  // bind
	$export.W = 32;  // wrap
	$export.U = 64;  // safe
	$export.R = 128; // real proto method for `library`
	var _export = $export;

	// most Object methods by ES6 should accept primitives



	var _objectSap = function (KEY, exec) {
	  var fn = (_core.Object || {})[KEY] || Object[KEY];
	  var exp = {};
	  exp[KEY] = exec(fn);
	  _export(_export.S + _export.F * _fails(function () { fn(1); }), 'Object', exp);
	};

	// 19.1.2.9 Object.getPrototypeOf(O)



	_objectSap('getPrototypeOf', function () {
	  return function getPrototypeOf(it) {
	    return _objectGpo(_toObject(it));
	  };
	});

	var getPrototypeOf$1 = _core.Object.getPrototypeOf;

	var getPrototypeOf$2 = createCommonjsModule(function (module) {
	module.exports = { "default": getPrototypeOf$1, __esModule: true };
	});

	var _Object$getPrototypeOf = unwrapExports(getPrototypeOf$2);

	var classCallCheck = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;

	exports.default = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};
	});

	var _classCallCheck$8 = unwrapExports(classCallCheck);

	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	_export(_export.S + _export.F * !_descriptors, 'Object', { defineProperty: _objectDp.f });

	var $Object = _core.Object;
	var defineProperty$2 = function defineProperty(it, key, desc) {
	  return $Object.defineProperty(it, key, desc);
	};

	var defineProperty$3 = createCommonjsModule(function (module) {
	module.exports = { "default": defineProperty$2, __esModule: true };
	});

	unwrapExports(defineProperty$3);

	var createClass = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;



	var _defineProperty2 = _interopRequireDefault(defineProperty$3);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
	    }
	  }

	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();
	});

	var _createClass$7 = unwrapExports(createClass);

	// 7.1.4 ToInteger
	var ceil = Math.ceil;
	var floor = Math.floor;
	var _toInteger = function (it) {
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

	// true  -> String#at
	// false -> String#codePointAt
	var _stringAt = function (TO_STRING) {
	  return function (that, pos) {
	    var s = String(_defined(that));
	    var i = _toInteger(pos);
	    var l = s.length;
	    var a, b;
	    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

	var _redefine = _hide;

	var _iterators = {};

	var toString$2 = {}.toString;

	var _cof = function (it) {
	  return toString$2.call(it).slice(8, -1);
	};

	// fallback for non-array-like ES3 and non-enumerable old V8 strings

	// eslint-disable-next-line no-prototype-builtins
	var _iobject = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
	  return _cof(it) == 'String' ? it.split('') : Object(it);
	};

	// to indexed object, toObject with fallback for non-array-like ES3 strings


	var _toIobject = function (it) {
	  return _iobject(_defined(it));
	};

	// 7.1.15 ToLength

	var min = Math.min;
	var _toLength = function (it) {
	  return it > 0 ? min(_toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};

	var max = Math.max;
	var min$1 = Math.min;
	var _toAbsoluteIndex = function (index, length) {
	  index = _toInteger(index);
	  return index < 0 ? max(index + length, 0) : min$1(index, length);
	};

	// false -> Array#indexOf
	// true  -> Array#includes



	var _arrayIncludes = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = _toIobject($this);
	    var length = _toLength(O.length);
	    var index = _toAbsoluteIndex(fromIndex, length);
	    var value;
	    // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      // eslint-disable-next-line no-self-compare
	      if (value != value) return true;
	    // Array#indexOf ignores holes, Array#includes - not
	    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {
	      if (O[index] === el) return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

	var arrayIndexOf = _arrayIncludes(false);
	var IE_PROTO$1 = _sharedKey('IE_PROTO');

	var _objectKeysInternal = function (object, names) {
	  var O = _toIobject(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) if (key != IE_PROTO$1) _has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while (names.length > i) if (_has(O, key = names[i++])) {
	    ~arrayIndexOf(result, key) || result.push(key);
	  }
	  return result;
	};

	// IE 8- don't enum bug keys
	var _enumBugKeys = (
	  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'
	).split(',');

	// 19.1.2.14 / 15.2.3.14 Object.keys(O)



	var _objectKeys = Object.keys || function keys(O) {
	  return _objectKeysInternal(O, _enumBugKeys);
	};

	var _objectDps = _descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
	  _anObject(O);
	  var keys = _objectKeys(Properties);
	  var length = keys.length;
	  var i = 0;
	  var P;
	  while (length > i) _objectDp.f(O, P = keys[i++], Properties[P]);
	  return O;
	};

	var document$2 = _global.document;
	var _html = document$2 && document$2.documentElement;

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])



	var IE_PROTO$2 = _sharedKey('IE_PROTO');
	var Empty = function () { /* empty */ };
	var PROTOTYPE$1 = 'prototype';

	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var createDict = function () {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = _domCreate('iframe');
	  var i = _enumBugKeys.length;
	  var lt = '<';
	  var gt = '>';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  _html.appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  createDict = iframeDocument.F;
	  while (i--) delete createDict[PROTOTYPE$1][_enumBugKeys[i]];
	  return createDict();
	};

	var _objectCreate = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    Empty[PROTOTYPE$1] = _anObject(O);
	    result = new Empty();
	    Empty[PROTOTYPE$1] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO$2] = O;
	  } else result = createDict();
	  return Properties === undefined ? result : _objectDps(result, Properties);
	};

	var _wks = createCommonjsModule(function (module) {
	var store = _shared('wks');

	var Symbol = _global.Symbol;
	var USE_SYMBOL = typeof Symbol == 'function';

	var $exports = module.exports = function (name) {
	  return store[name] || (store[name] =
	    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : _uid)('Symbol.' + name));
	};

	$exports.store = store;
	});

	var def = _objectDp.f;

	var TAG = _wks('toStringTag');

	var _setToStringTag = function (it, tag, stat) {
	  if (it && !_has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
	};

	var IteratorPrototype = {};

	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	_hide(IteratorPrototype, _wks('iterator'), function () { return this; });

	var _iterCreate = function (Constructor, NAME, next) {
	  Constructor.prototype = _objectCreate(IteratorPrototype, { next: _propertyDesc(1, next) });
	  _setToStringTag(Constructor, NAME + ' Iterator');
	};

	var ITERATOR = _wks('iterator');
	var BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`
	var FF_ITERATOR = '@@iterator';
	var KEYS = 'keys';
	var VALUES = 'values';

	var returnThis = function () { return this; };

	var _iterDefine = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
	  _iterCreate(Constructor, NAME, next);
	  var getMethod = function (kind) {
	    if (!BUGGY && kind in proto) return proto[kind];
	    switch (kind) {
	      case KEYS: return function keys() { return new Constructor(this, kind); };
	      case VALUES: return function values() { return new Constructor(this, kind); };
	    } return function entries() { return new Constructor(this, kind); };
	  };
	  var TAG = NAME + ' Iterator';
	  var DEF_VALUES = DEFAULT == VALUES;
	  var VALUES_BUG = false;
	  var proto = Base.prototype;
	  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];
	  var $default = $native || getMethod(DEFAULT);
	  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;
	  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;
	  var methods, key, IteratorPrototype;
	  // Fix native
	  if ($anyNative) {
	    IteratorPrototype = _objectGpo($anyNative.call(new Base()));
	    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {
	      // Set @@toStringTag to native iterators
	      _setToStringTag(IteratorPrototype, TAG, true);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if (DEF_VALUES && $native && $native.name !== VALUES) {
	    VALUES_BUG = true;
	    $default = function values() { return $native.call(this); };
	  }
	  // Define iterator
	  if (( FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
	    _hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  _iterators[NAME] = $default;
	  _iterators[TAG] = returnThis;
	  if (DEFAULT) {
	    methods = {
	      values: DEF_VALUES ? $default : getMethod(VALUES),
	      keys: IS_SET ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if (FORCED) for (key in methods) {
	      if (!(key in proto)) _redefine(proto, key, methods[key]);
	    } else _export(_export.P + _export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};

	var $at = _stringAt(true);

	// 21.1.3.27 String.prototype[@@iterator]()
	_iterDefine(String, 'String', function (iterated) {
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var index = this._i;
	  var point;
	  if (index >= O.length) return { value: undefined, done: true };
	  point = $at(O, index);
	  this._i += point.length;
	  return { value: point, done: false };
	});

	var _iterStep = function (done, value) {
	  return { value: value, done: !!done };
	};

	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	var es6_array_iterator = _iterDefine(Array, 'Array', function (iterated, kind) {
	  this._t = _toIobject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function () {
	  var O = this._t;
	  var kind = this._k;
	  var index = this._i++;
	  if (!O || index >= O.length) {
	    this._t = undefined;
	    return _iterStep(1);
	  }
	  if (kind == 'keys') return _iterStep(0, index);
	  if (kind == 'values') return _iterStep(0, O[index]);
	  return _iterStep(0, [index, O[index]]);
	}, 'values');

	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	_iterators.Arguments = _iterators.Array;

	var TO_STRING_TAG = _wks('toStringTag');

	var DOMIterables = ('CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,' +
	  'DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,' +
	  'MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,' +
	  'SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,' +
	  'TextTrackList,TouchList').split(',');

	for (var i$1 = 0; i$1 < DOMIterables.length; i$1++) {
	  var NAME = DOMIterables[i$1];
	  var Collection = _global[NAME];
	  var proto = Collection && Collection.prototype;
	  if (proto && !proto[TO_STRING_TAG]) _hide(proto, TO_STRING_TAG, NAME);
	  _iterators[NAME] = _iterators.Array;
	}

	var f$2 = _wks;

	var _wksExt = {
		f: f$2
	};

	var iterator = _wksExt.f('iterator');

	var iterator$1 = createCommonjsModule(function (module) {
	module.exports = { "default": iterator, __esModule: true };
	});

	unwrapExports(iterator$1);

	var _meta = createCommonjsModule(function (module) {
	var META = _uid('meta');


	var setDesc = _objectDp.f;
	var id = 0;
	var isExtensible = Object.isExtensible || function () {
	  return true;
	};
	var FREEZE = !_fails(function () {
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function (it) {
	  setDesc(it, META, { value: {
	    i: 'O' + ++id, // object ID
	    w: {}          // weak collections IDs
	  } });
	};
	var fastKey = function (it, create) {
	  // return primitive with prefix
	  if (!_isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if (!_has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return 'F';
	    // not necessary to add metadata
	    if (!create) return 'E';
	    // add missing metadata
	    setMeta(it);
	  // return object ID
	  } return it[META].i;
	};
	var getWeak = function (it, create) {
	  if (!_has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return true;
	    // not necessary to add metadata
	    if (!create) return false;
	    // add missing metadata
	    setMeta(it);
	  // return hash weak collections IDs
	  } return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function (it) {
	  if (FREEZE && meta.NEED && isExtensible(it) && !_has(it, META)) setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY: META,
	  NEED: false,
	  fastKey: fastKey,
	  getWeak: getWeak,
	  onFreeze: onFreeze
	};
	});
	var _meta_1 = _meta.KEY;
	var _meta_2 = _meta.NEED;
	var _meta_3 = _meta.fastKey;
	var _meta_4 = _meta.getWeak;
	var _meta_5 = _meta.onFreeze;

	var defineProperty$4 = _objectDp.f;
	var _wksDefine = function (name) {
	  var $Symbol = _core.Symbol || (_core.Symbol =  {} );
	  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty$4($Symbol, name, { value: _wksExt.f(name) });
	};

	var f$3 = Object.getOwnPropertySymbols;

	var _objectGops = {
		f: f$3
	};

	var f$4 = {}.propertyIsEnumerable;

	var _objectPie = {
		f: f$4
	};

	// all enumerable object keys, includes symbols



	var _enumKeys = function (it) {
	  var result = _objectKeys(it);
	  var getSymbols = _objectGops.f;
	  if (getSymbols) {
	    var symbols = getSymbols(it);
	    var isEnum = _objectPie.f;
	    var i = 0;
	    var key;
	    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
	  } return result;
	};

	// 7.2.2 IsArray(argument)

	var _isArray = Array.isArray || function isArray(arg) {
	  return _cof(arg) == 'Array';
	};

	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)

	var hiddenKeys = _enumBugKeys.concat('length', 'prototype');

	var f$5 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return _objectKeysInternal(O, hiddenKeys);
	};

	var _objectGopn = {
		f: f$5
	};

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window

	var gOPN = _objectGopn.f;
	var toString$3 = {}.toString;

	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];

	var getWindowNames = function (it) {
	  try {
	    return gOPN(it);
	  } catch (e) {
	    return windowNames.slice();
	  }
	};

	var f$6 = function getOwnPropertyNames(it) {
	  return windowNames && toString$3.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(_toIobject(it));
	};

	var _objectGopnExt = {
		f: f$6
	};

	var gOPD = Object.getOwnPropertyDescriptor;

	var f$7 = _descriptors ? gOPD : function getOwnPropertyDescriptor(O, P) {
	  O = _toIobject(O);
	  P = _toPrimitive(P, true);
	  if (_ie8DomDefine) try {
	    return gOPD(O, P);
	  } catch (e) { /* empty */ }
	  if (_has(O, P)) return _propertyDesc(!_objectPie.f.call(O, P), O[P]);
	};

	var _objectGopd = {
		f: f$7
	};

	// ECMAScript 6 symbols shim





	var META = _meta.KEY;





















	var gOPD$1 = _objectGopd.f;
	var dP$1 = _objectDp.f;
	var gOPN$1 = _objectGopnExt.f;
	var $Symbol = _global.Symbol;
	var $JSON = _global.JSON;
	var _stringify = $JSON && $JSON.stringify;
	var PROTOTYPE$2 = 'prototype';
	var HIDDEN = _wks('_hidden');
	var TO_PRIMITIVE = _wks('toPrimitive');
	var isEnum = {}.propertyIsEnumerable;
	var SymbolRegistry = _shared('symbol-registry');
	var AllSymbols = _shared('symbols');
	var OPSymbols = _shared('op-symbols');
	var ObjectProto$1 = Object[PROTOTYPE$2];
	var USE_NATIVE = typeof $Symbol == 'function' && !!_objectGops.f;
	var QObject = _global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE$2] || !QObject[PROTOTYPE$2].findChild;

	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = _descriptors && _fails(function () {
	  return _objectCreate(dP$1({}, 'a', {
	    get: function () { return dP$1(this, 'a', { value: 7 }).a; }
	  })).a != 7;
	}) ? function (it, key, D) {
	  var protoDesc = gOPD$1(ObjectProto$1, key);
	  if (protoDesc) delete ObjectProto$1[key];
	  dP$1(it, key, D);
	  if (protoDesc && it !== ObjectProto$1) dP$1(ObjectProto$1, key, protoDesc);
	} : dP$1;

	var wrap = function (tag) {
	  var sym = AllSymbols[tag] = _objectCreate($Symbol[PROTOTYPE$2]);
	  sym._k = tag;
	  return sym;
	};

	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
	  return typeof it == 'symbol';
	} : function (it) {
	  return it instanceof $Symbol;
	};

	var $defineProperty = function defineProperty(it, key, D) {
	  if (it === ObjectProto$1) $defineProperty(OPSymbols, key, D);
	  _anObject(it);
	  key = _toPrimitive(key, true);
	  _anObject(D);
	  if (_has(AllSymbols, key)) {
	    if (!D.enumerable) {
	      if (!_has(it, HIDDEN)) dP$1(it, HIDDEN, _propertyDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if (_has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
	      D = _objectCreate(D, { enumerable: _propertyDesc(0, false) });
	    } return setSymbolDesc(it, key, D);
	  } return dP$1(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P) {
	  _anObject(it);
	  var keys = _enumKeys(P = _toIobject(P));
	  var i = 0;
	  var l = keys.length;
	  var key;
	  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P) {
	  return P === undefined ? _objectCreate(it) : $defineProperties(_objectCreate(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key) {
	  var E = isEnum.call(this, key = _toPrimitive(key, true));
	  if (this === ObjectProto$1 && _has(AllSymbols, key) && !_has(OPSymbols, key)) return false;
	  return E || !_has(this, key) || !_has(AllSymbols, key) || _has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
	  it = _toIobject(it);
	  key = _toPrimitive(key, true);
	  if (it === ObjectProto$1 && _has(AllSymbols, key) && !_has(OPSymbols, key)) return;
	  var D = gOPD$1(it, key);
	  if (D && _has(AllSymbols, key) && !(_has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it) {
	  var names = gOPN$1(_toIobject(it));
	  var result = [];
	  var i = 0;
	  var key;
	  while (names.length > i) {
	    if (!_has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
	  } return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
	  var IS_OP = it === ObjectProto$1;
	  var names = gOPN$1(IS_OP ? OPSymbols : _toIobject(it));
	  var result = [];
	  var i = 0;
	  var key;
	  while (names.length > i) {
	    if (_has(AllSymbols, key = names[i++]) && (IS_OP ? _has(ObjectProto$1, key) : true)) result.push(AllSymbols[key]);
	  } return result;
	};

	// 19.4.1.1 Symbol([description])
	if (!USE_NATIVE) {
	  $Symbol = function Symbol() {
	    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
	    var tag = _uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function (value) {
	      if (this === ObjectProto$1) $set.call(OPSymbols, value);
	      if (_has(this, HIDDEN) && _has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, _propertyDesc(1, value));
	    };
	    if (_descriptors && setter) setSymbolDesc(ObjectProto$1, tag, { configurable: true, set: $set });
	    return wrap(tag);
	  };
	  _redefine($Symbol[PROTOTYPE$2], 'toString', function toString() {
	    return this._k;
	  });

	  _objectGopd.f = $getOwnPropertyDescriptor;
	  _objectDp.f = $defineProperty;
	  _objectGopn.f = _objectGopnExt.f = $getOwnPropertyNames;
	  _objectPie.f = $propertyIsEnumerable;
	  _objectGops.f = $getOwnPropertySymbols;

	  if (_descriptors && !_library) {
	    _redefine(ObjectProto$1, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }

	  _wksExt.f = function (name) {
	    return wrap(_wks(name));
	  };
	}

	_export(_export.G + _export.W + _export.F * !USE_NATIVE, { Symbol: $Symbol });

	for (var es6Symbols = (
	  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
	).split(','), j = 0; es6Symbols.length > j;)_wks(es6Symbols[j++]);

	for (var wellKnownSymbols = _objectKeys(_wks.store), k$2 = 0; wellKnownSymbols.length > k$2;) _wksDefine(wellKnownSymbols[k$2++]);

	_export(_export.S + _export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function (key) {
	    return _has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(sym) {
	    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
	    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
	  },
	  useSetter: function () { setter = true; },
	  useSimple: function () { setter = false; }
	});

	_export(_export.S + _export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});

	// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
	// https://bugs.chromium.org/p/v8/issues/detail?id=3443
	var FAILS_ON_PRIMITIVES = _fails(function () { _objectGops.f(1); });

	_export(_export.S + _export.F * FAILS_ON_PRIMITIVES, 'Object', {
	  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
	    return _objectGops.f(_toObject(it));
	  }
	});

	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && _export(_export.S + _export.F * (!USE_NATIVE || _fails(function () {
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it) {
	    var args = [it];
	    var i = 1;
	    var replacer, $replacer;
	    while (arguments.length > i) args.push(arguments[i++]);
	    $replacer = replacer = args[1];
	    if (!_isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
	    if (!_isArray(replacer)) replacer = function (key, value) {
	      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
	      if (!isSymbol(value)) return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});

	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE$2][TO_PRIMITIVE] || _hide($Symbol[PROTOTYPE$2], TO_PRIMITIVE, $Symbol[PROTOTYPE$2].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	_setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	_setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	_setToStringTag(_global.JSON, 'JSON', true);

	_wksDefine('asyncIterator');

	_wksDefine('observable');

	var symbol = _core.Symbol;

	var symbol$1 = createCommonjsModule(function (module) {
	module.exports = { "default": symbol, __esModule: true };
	});

	unwrapExports(symbol$1);

	var _typeof_1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;



	var _iterator2 = _interopRequireDefault(iterator$1);



	var _symbol2 = _interopRequireDefault(symbol$1);

	var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
	} : function (obj) {
	  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
	};
	});

	unwrapExports(_typeof_1);

	var possibleConstructorReturn = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;



	var _typeof3 = _interopRequireDefault(_typeof_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function (self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }

	  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
	};
	});

	var _possibleConstructorReturn$3 = unwrapExports(possibleConstructorReturn);

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */


	var check = function (O, proto) {
	  _anObject(O);
	  if (!_isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
	};
	var _setProto = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function (test, buggy, set) {
	      try {
	        set = _ctx(Function.call, _objectGopd.f(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch (e) { buggy = true; }
	      return function setPrototypeOf(O, proto) {
	        check(O, proto);
	        if (buggy) O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};

	// 19.1.3.19 Object.setPrototypeOf(O, proto)

	_export(_export.S, 'Object', { setPrototypeOf: _setProto.set });

	var setPrototypeOf = _core.Object.setPrototypeOf;

	var setPrototypeOf$1 = createCommonjsModule(function (module) {
	module.exports = { "default": setPrototypeOf, __esModule: true };
	});

	unwrapExports(setPrototypeOf$1);

	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	_export(_export.S, 'Object', { create: _objectCreate });

	var $Object$1 = _core.Object;
	var create$1 = function create(P, D) {
	  return $Object$1.create(P, D);
	};

	var create$2 = createCommonjsModule(function (module) {
	module.exports = { "default": create$1, __esModule: true };
	});

	unwrapExports(create$2);

	var inherits = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;



	var _setPrototypeOf2 = _interopRequireDefault(setPrototypeOf$1);



	var _create2 = _interopRequireDefault(create$2);



	var _typeof3 = _interopRequireDefault(_typeof_1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
	  }

	  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
	};
	});

	var _inherits$3 = unwrapExports(inherits);

	/**
	 * Copyright (c) 2013-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	function componentWillMount() {
	  // Call this.constructor.gDSFP to support sub-classes.
	  var state = this.constructor.getDerivedStateFromProps(this.props, this.state);
	  if (state !== null && state !== undefined) {
	    this.setState(state);
	  }
	}

	function componentWillReceiveProps(nextProps) {
	  // Call this.constructor.gDSFP to support sub-classes.
	  // Use the setState() updater to ensure state isn't stale in certain edge cases.
	  function updater(prevState) {
	    var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);
	    return state !== null && state !== undefined ? state : null;
	  }
	  // Binding "this" is important for shallow renderer support.
	  this.setState(updater.bind(this));
	}

	function componentWillUpdate(nextProps, nextState) {
	  try {
	    var prevProps = this.props;
	    var prevState = this.state;
	    this.props = nextProps;
	    this.state = nextState;
	    this.__reactInternalSnapshotFlag = true;
	    this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(
	      prevProps,
	      prevState
	    );
	  } finally {
	    this.props = prevProps;
	    this.state = prevState;
	  }
	}

	// React may warn about cWM/cWRP/cWU methods being deprecated.
	// Add a flag to suppress these warnings for this special case.
	componentWillMount.__suppressDeprecationWarning = true;
	componentWillReceiveProps.__suppressDeprecationWarning = true;
	componentWillUpdate.__suppressDeprecationWarning = true;

	function polyfill$1(Component) {
	  var prototype = Component.prototype;

	  if (!prototype || !prototype.isReactComponent) {
	    throw new Error('Can only polyfill class components');
	  }

	  if (
	    typeof Component.getDerivedStateFromProps !== 'function' &&
	    typeof prototype.getSnapshotBeforeUpdate !== 'function'
	  ) {
	    return Component;
	  }

	  // If new component APIs are defined, "unsafe" lifecycles won't be called.
	  // Error if any of these lifecycles are present,
	  // Because they would work differently between older and newer (16.3+) versions of React.
	  var foundWillMountName = null;
	  var foundWillReceivePropsName = null;
	  var foundWillUpdateName = null;
	  if (typeof prototype.componentWillMount === 'function') {
	    foundWillMountName = 'componentWillMount';
	  } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {
	    foundWillMountName = 'UNSAFE_componentWillMount';
	  }
	  if (typeof prototype.componentWillReceiveProps === 'function') {
	    foundWillReceivePropsName = 'componentWillReceiveProps';
	  } else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {
	    foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
	  }
	  if (typeof prototype.componentWillUpdate === 'function') {
	    foundWillUpdateName = 'componentWillUpdate';
	  } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {
	    foundWillUpdateName = 'UNSAFE_componentWillUpdate';
	  }
	  if (
	    foundWillMountName !== null ||
	    foundWillReceivePropsName !== null ||
	    foundWillUpdateName !== null
	  ) {
	    var componentName = Component.displayName || Component.name;
	    var newApiName =
	      typeof Component.getDerivedStateFromProps === 'function'
	        ? 'getDerivedStateFromProps()'
	        : 'getSnapshotBeforeUpdate()';

	    throw Error(
	      'Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' +
	        componentName +
	        ' uses ' +
	        newApiName +
	        ' but also contains the following legacy lifecycles:' +
	        (foundWillMountName !== null ? '\n  ' + foundWillMountName : '') +
	        (foundWillReceivePropsName !== null
	          ? '\n  ' + foundWillReceivePropsName
	          : '') +
	        (foundWillUpdateName !== null ? '\n  ' + foundWillUpdateName : '') +
	        '\n\nThe above lifecycles should be removed. Learn more about this warning here:\n' +
	        'https://fb.me/react-async-component-lifecycle-hooks'
	    );
	  }

	  // React <= 16.2 does not support static getDerivedStateFromProps.
	  // As a workaround, use cWM and cWRP to invoke the new static lifecycle.
	  // Newer versions of React will ignore these lifecycles if gDSFP exists.
	  if (typeof Component.getDerivedStateFromProps === 'function') {
	    prototype.componentWillMount = componentWillMount;
	    prototype.componentWillReceiveProps = componentWillReceiveProps;
	  }

	  // React <= 16.2 does not support getSnapshotBeforeUpdate.
	  // As a workaround, use cWU to invoke the new lifecycle.
	  // Newer versions of React will ignore that lifecycle if gSBU exists.
	  if (typeof prototype.getSnapshotBeforeUpdate === 'function') {
	    if (typeof prototype.componentDidUpdate !== 'function') {
	      throw new Error(
	        'Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype'
	      );
	    }

	    prototype.componentWillUpdate = componentWillUpdate;

	    var componentDidUpdate = prototype.componentDidUpdate;

	    prototype.componentDidUpdate = function componentDidUpdatePolyfill(
	      prevProps,
	      prevState,
	      maybeSnapshot
	    ) {
	      // 16.3+ will not execute our will-update method;
	      // It will pass a snapshot value to did-update though.
	      // Older versions will require our polyfilled will-update value.
	      // We need to handle both cases, but can't just check for the presence of "maybeSnapshot",
	      // Because for <= 15.x versions this might be a "prevContext" object.
	      // We also can't just check "__reactInternalSnapshot",
	      // Because get-snapshot might return a falsy value.
	      // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.
	      var snapshot = this.__reactInternalSnapshotFlag
	        ? this.__reactInternalSnapshot
	        : maybeSnapshot;

	      componentDidUpdate.call(this, prevProps, prevState, snapshot);
	    };
	  }

	  return Component;
	}

	// 19.1.2.1 Object.assign(target, source, ...)






	var $assign = Object.assign;

	// should work with symbols and should have deterministic property order (V8 bug)
	var _objectAssign = !$assign || _fails(function () {
	  var A = {};
	  var B = {};
	  // eslint-disable-next-line no-undef
	  var S = Symbol();
	  var K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function (k) { B[k] = k; });
	  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;
	}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
	  var T = _toObject(target);
	  var aLen = arguments.length;
	  var index = 1;
	  var getSymbols = _objectGops.f;
	  var isEnum = _objectPie.f;
	  while (aLen > index) {
	    var S = _iobject(arguments[index++]);
	    var keys = getSymbols ? _objectKeys(S).concat(getSymbols(S)) : _objectKeys(S);
	    var length = keys.length;
	    var j = 0;
	    var key;
	    while (length > j) {
	      key = keys[j++];
	      if (!_descriptors || isEnum.call(S, key)) T[key] = S[key];
	    }
	  } return T;
	} : $assign;

	// 19.1.3.1 Object.assign(target, source)


	_export(_export.S + _export.F, 'Object', { assign: _objectAssign });

	var assign = _core.Object.assign;

	var assign$1 = createCommonjsModule(function (module) {
	module.exports = { "default": assign, __esModule: true };
	});

	var _Object$assign = unwrapExports(assign$1);

	var _extends$4 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;



	var _assign2 = _interopRequireDefault(assign$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = _assign2.default || function (target) {
	  for (var i = 1; i < arguments.length; i++) {
	    var source = arguments[i];

	    for (var key in source) {
	      if (Object.prototype.hasOwnProperty.call(source, key)) {
	        target[key] = source[key];
	      }
	    }
	  }

	  return target;
	};
	});

	var _extends$5 = unwrapExports(_extends$4);

	function calculateSizeAndPositionDataAndUpdateScrollOffset(_ref) {
	  var cellCount = _ref.cellCount,
	      cellSize = _ref.cellSize,
	      computeMetadataCallback = _ref.computeMetadataCallback,
	      computeMetadataCallbackProps = _ref.computeMetadataCallbackProps,
	      nextCellsCount = _ref.nextCellsCount,
	      nextCellSize = _ref.nextCellSize,
	      nextScrollToIndex = _ref.nextScrollToIndex,
	      scrollToIndex = _ref.scrollToIndex,
	      updateScrollOffsetForScrollToIndex = _ref.updateScrollOffsetForScrollToIndex;

	  // Don't compare cell sizes if they are functions because inline functions would cause infinite loops.
	  // In that event users should use the manual recompute methods to inform of changes.
	  if (cellCount !== nextCellsCount || (typeof cellSize === 'number' || typeof nextCellSize === 'number') && cellSize !== nextCellSize) {
	    computeMetadataCallback(computeMetadataCallbackProps);

	    // Updated cell metadata may have hidden the previous scrolled-to item.
	    // In this case we should also update the scrollTop to ensure it stays visible.
	    if (scrollToIndex >= 0 && scrollToIndex === nextScrollToIndex) {
	      updateScrollOffsetForScrollToIndex();
	    }
	  }
	}

	/**
	 * Helper method that determines when to recalculate row or column metadata.
	 */

	var objectWithoutProperties$1 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;

	exports.default = function (obj, keys) {
	  var target = {};

	  for (var i in obj) {
	    if (keys.indexOf(i) >= 0) continue;
	    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;
	    target[i] = obj[i];
	  }

	  return target;
	};
	});

	var _objectWithoutProperties$4 = unwrapExports(objectWithoutProperties$1);

	var bpfrpt_proptype_CellPosition = process.env.NODE_ENV === 'production' ? null : {
	  columnIndex: propTypes.number.isRequired,
	  rowIndex: propTypes.number.isRequired
	};
	var bpfrpt_proptype_CellRendererParams = process.env.NODE_ENV === 'production' ? null : {
	  columnIndex: propTypes.number.isRequired,
	  isScrolling: propTypes.bool.isRequired,
	  isVisible: propTypes.bool.isRequired,
	  key: propTypes.string.isRequired,
	  parent: propTypes.object.isRequired,
	  rowIndex: propTypes.number.isRequired,
	  style: propTypes.object.isRequired
	};
	var bpfrpt_proptype_CellRenderer = process.env.NODE_ENV === 'production' ? null : propTypes.func;
	var bpfrpt_proptype_CellCache = process.env.NODE_ENV === 'production' ? null : propTypes.objectOf(propTypes.node.isRequired);
	var bpfrpt_proptype_StyleCache = process.env.NODE_ENV === 'production' ? null : propTypes.objectOf(propTypes.object.isRequired);
	var bpfrpt_proptype_CellRangeRendererParams = process.env.NODE_ENV === 'production' ? null : {
	  cellCache: propTypes.objectOf(propTypes.node.isRequired).isRequired,
	  cellRenderer: propTypes.func.isRequired,
	  columnSizeAndPositionManager: function columnSizeAndPositionManager() {
	    return (typeof ScalingCellSizeAndPositionManager === 'function' ? propTypes.instanceOf(ScalingCellSizeAndPositionManager).isRequired : propTypes.any.isRequired).apply(this, arguments);
	  },
	  columnStartIndex: propTypes.number.isRequired,
	  columnStopIndex: propTypes.number.isRequired,
	  deferredMeasurementCache: propTypes.object,
	  horizontalOffsetAdjustment: propTypes.number.isRequired,
	  isScrolling: propTypes.bool.isRequired,
	  isScrollingOptOut: propTypes.bool.isRequired,
	  parent: propTypes.object.isRequired,
	  rowSizeAndPositionManager: function rowSizeAndPositionManager() {
	    return (typeof ScalingCellSizeAndPositionManager === 'function' ? propTypes.instanceOf(ScalingCellSizeAndPositionManager).isRequired : propTypes.any.isRequired).apply(this, arguments);
	  },
	  rowStartIndex: propTypes.number.isRequired,
	  rowStopIndex: propTypes.number.isRequired,
	  scrollLeft: propTypes.number.isRequired,
	  scrollTop: propTypes.number.isRequired,
	  styleCache: propTypes.objectOf(propTypes.object.isRequired).isRequired,
	  verticalOffsetAdjustment: propTypes.number.isRequired,
	  visibleColumnIndices: propTypes.object.isRequired,
	  visibleRowIndices: propTypes.object.isRequired
	};
	var bpfrpt_proptype_CellRangeRenderer = process.env.NODE_ENV === 'production' ? null : propTypes.func;
	var bpfrpt_proptype_CellSizeGetter = process.env.NODE_ENV === 'production' ? null : propTypes.func;
	var bpfrpt_proptype_CellSize = process.env.NODE_ENV === 'production' ? null : propTypes.oneOfType([propTypes.func, propTypes.number]);
	var bpfrpt_proptype_NoContentRenderer = process.env.NODE_ENV === 'production' ? null : propTypes.func;
	var bpfrpt_proptype_Scroll = process.env.NODE_ENV === 'production' ? null : {
	  clientHeight: propTypes.number.isRequired,
	  clientWidth: propTypes.number.isRequired,
	  scrollHeight: propTypes.number.isRequired,
	  scrollLeft: propTypes.number.isRequired,
	  scrollTop: propTypes.number.isRequired,
	  scrollWidth: propTypes.number.isRequired
	};
	var bpfrpt_proptype_ScrollbarPresenceChange = process.env.NODE_ENV === 'production' ? null : {
	  horizontal: propTypes.bool.isRequired,
	  vertical: propTypes.bool.isRequired,
	  size: propTypes.number.isRequired
	};
	var bpfrpt_proptype_RenderedSection = process.env.NODE_ENV === 'production' ? null : {
	  columnOverscanStartIndex: propTypes.number.isRequired,
	  columnOverscanStopIndex: propTypes.number.isRequired,
	  columnStartIndex: propTypes.number.isRequired,
	  columnStopIndex: propTypes.number.isRequired,
	  rowOverscanStartIndex: propTypes.number.isRequired,
	  rowOverscanStopIndex: propTypes.number.isRequired,
	  rowStartIndex: propTypes.number.isRequired,
	  rowStopIndex: propTypes.number.isRequired
	};
	var bpfrpt_proptype_OverscanIndicesGetterParams = process.env.NODE_ENV === 'production' ? null : {
	  // One of SCROLL_DIRECTION_HORIZONTAL or SCROLL_DIRECTION_VERTICAL
	  direction: propTypes.oneOf(['horizontal', 'vertical']).isRequired,


	  // One of SCROLL_DIRECTION_BACKWARD or SCROLL_DIRECTION_FORWARD
	  scrollDirection: propTypes.oneOf([-1, 1]).isRequired,


	  // Number of rows or columns in the current axis
	  cellCount: propTypes.number.isRequired,


	  // Maximum number of cells to over-render in either direction
	  overscanCellsCount: propTypes.number.isRequired,


	  // Begin of range of visible cells
	  startIndex: propTypes.number.isRequired,


	  // End of range of visible cells
	  stopIndex: propTypes.number.isRequired
	};
	var bpfrpt_proptype_OverscanIndices = process.env.NODE_ENV === 'production' ? null : {
	  overscanStartIndex: propTypes.number.isRequired,
	  overscanStopIndex: propTypes.number.isRequired
	};
	var bpfrpt_proptype_OverscanIndicesGetter = process.env.NODE_ENV === 'production' ? null : propTypes.func;
	var bpfrpt_proptype_Alignment = process.env.NODE_ENV === 'production' ? null : propTypes.oneOf(['auto', 'end', 'start', 'center']);
	var bpfrpt_proptype_VisibleCellRange = process.env.NODE_ENV === 'production' ? null : {
	  start: propTypes.number,
	  stop: propTypes.number
	};

	/**
	 * Just-in-time calculates and caches size and position information for a collection of cells.
	 */

	var CellSizeAndPositionManager = function () {

	  // Used in deferred mode to track which cells have been queued for measurement.

	  // Cache of size and position data for cells, mapped by cell index.
	  // Note that invalid values may exist in this map so only rely on cells up to this._lastMeasuredIndex
	  function CellSizeAndPositionManager(_ref) {
	    var cellCount = _ref.cellCount,
	        cellSizeGetter = _ref.cellSizeGetter,
	        estimatedCellSize = _ref.estimatedCellSize;

	    _classCallCheck$8(this, CellSizeAndPositionManager);

	    this._cellSizeAndPositionData = {};
	    this._lastMeasuredIndex = -1;
	    this._lastBatchedIndex = -1;

	    this._cellSizeGetter = cellSizeGetter;
	    this._cellCount = cellCount;
	    this._estimatedCellSize = estimatedCellSize;
	  }

	  // Measurements for cells up to this index can be trusted; cells afterward should be estimated.


	  _createClass$7(CellSizeAndPositionManager, [{
	    key: 'areOffsetsAdjusted',
	    value: function areOffsetsAdjusted() {
	      return false;
	    }
	  }, {
	    key: 'configure',
	    value: function configure(_ref2) {
	      var cellCount = _ref2.cellCount,
	          estimatedCellSize = _ref2.estimatedCellSize,
	          cellSizeGetter = _ref2.cellSizeGetter;

	      this._cellCount = cellCount;
	      this._estimatedCellSize = estimatedCellSize;
	      this._cellSizeGetter = cellSizeGetter;
	    }
	  }, {
	    key: 'getCellCount',
	    value: function getCellCount() {
	      return this._cellCount;
	    }
	  }, {
	    key: 'getEstimatedCellSize',
	    value: function getEstimatedCellSize() {
	      return this._estimatedCellSize;
	    }
	  }, {
	    key: 'getLastMeasuredIndex',
	    value: function getLastMeasuredIndex() {
	      return this._lastMeasuredIndex;
	    }
	  }, {
	    key: 'getOffsetAdjustment',
	    value: function getOffsetAdjustment() {
	      return 0;
	    }

	    /**
	     * This method returns the size and position for the cell at the specified index.
	     * It just-in-time calculates (or used cached values) for cells leading up to the index.
	     */

	  }, {
	    key: 'getSizeAndPositionOfCell',
	    value: function getSizeAndPositionOfCell(index) {
	      if (index < 0 || index >= this._cellCount) {
	        throw Error('Requested index ' + index + ' is outside of range 0..' + this._cellCount);
	      }

	      if (index > this._lastMeasuredIndex) {
	        var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();
	        var _offset = lastMeasuredCellSizeAndPosition.offset + lastMeasuredCellSizeAndPosition.size;

	        for (var i = this._lastMeasuredIndex + 1; i <= index; i++) {
	          var _size = this._cellSizeGetter({ index: i });

	          // undefined or NaN probably means a logic error in the size getter.
	          // null means we're using CellMeasurer and haven't yet measured a given index.
	          if (_size === undefined || isNaN(_size)) {
	            throw Error('Invalid size returned for cell ' + i + ' of value ' + _size);
	          } else if (_size === null) {
	            this._cellSizeAndPositionData[i] = {
	              offset: _offset,
	              size: 0
	            };

	            this._lastBatchedIndex = index;
	          } else {
	            this._cellSizeAndPositionData[i] = {
	              offset: _offset,
	              size: _size
	            };

	            _offset += _size;

	            this._lastMeasuredIndex = index;
	          }
	        }
	      }

	      return this._cellSizeAndPositionData[index];
	    }
	  }, {
	    key: 'getSizeAndPositionOfLastMeasuredCell',
	    value: function getSizeAndPositionOfLastMeasuredCell() {
	      return this._lastMeasuredIndex >= 0 ? this._cellSizeAndPositionData[this._lastMeasuredIndex] : {
	        offset: 0,
	        size: 0
	      };
	    }

	    /**
	     * Total size of all cells being measured.
	     * This value will be completely estimated initially.
	     * As cells are measured, the estimate will be updated.
	     */

	  }, {
	    key: 'getTotalSize',
	    value: function getTotalSize() {
	      var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();
	      var totalSizeOfMeasuredCells = lastMeasuredCellSizeAndPosition.offset + lastMeasuredCellSizeAndPosition.size;
	      var numUnmeasuredCells = this._cellCount - this._lastMeasuredIndex - 1;
	      var totalSizeOfUnmeasuredCells = numUnmeasuredCells * this._estimatedCellSize;
	      return totalSizeOfMeasuredCells + totalSizeOfUnmeasuredCells;
	    }

	    /**
	     * Determines a new offset that ensures a certain cell is visible, given the current offset.
	     * If the cell is already visible then the current offset will be returned.
	     * If the current offset is too great or small, it will be adjusted just enough to ensure the specified index is visible.
	     *
	     * @param align Desired alignment within container; one of "auto" (default), "start", or "end"
	     * @param containerSize Size (width or height) of the container viewport
	     * @param currentOffset Container's current (x or y) offset
	     * @param totalSize Total size (width or height) of all cells
	     * @return Offset to use to ensure the specified cell is visible
	     */

	  }, {
	    key: 'getUpdatedOffsetForIndex',
	    value: function getUpdatedOffsetForIndex(_ref3) {
	      var _ref3$align = _ref3.align,
	          align = _ref3$align === undefined ? 'auto' : _ref3$align,
	          containerSize = _ref3.containerSize,
	          currentOffset = _ref3.currentOffset,
	          targetIndex = _ref3.targetIndex;

	      if (containerSize <= 0) {
	        return 0;
	      }

	      var datum = this.getSizeAndPositionOfCell(targetIndex);
	      var maxOffset = datum.offset;
	      var minOffset = maxOffset - containerSize + datum.size;

	      var idealOffset = void 0;

	      switch (align) {
	        case 'start':
	          idealOffset = maxOffset;
	          break;
	        case 'end':
	          idealOffset = minOffset;
	          break;
	        case 'center':
	          idealOffset = maxOffset - (containerSize - datum.size) / 2;
	          break;
	        default:
	          idealOffset = Math.max(minOffset, Math.min(maxOffset, currentOffset));
	          break;
	      }

	      var totalSize = this.getTotalSize();

	      return Math.max(0, Math.min(totalSize - containerSize, idealOffset));
	    }
	  }, {
	    key: 'getVisibleCellRange',
	    value: function getVisibleCellRange(params) {
	      var containerSize = params.containerSize,
	          offset = params.offset;


	      var totalSize = this.getTotalSize();

	      if (totalSize === 0) {
	        return {};
	      }

	      var maxOffset = offset + containerSize;
	      var start = this._findNearestCell(offset);

	      var datum = this.getSizeAndPositionOfCell(start);
	      offset = datum.offset + datum.size;

	      var stop = start;

	      while (offset < maxOffset && stop < this._cellCount - 1) {
	        stop++;

	        offset += this.getSizeAndPositionOfCell(stop).size;
	      }

	      return {
	        start: start,
	        stop: stop
	      };
	    }

	    /**
	     * Clear all cached values for cells after the specified index.
	     * This method should be called for any cell that has changed its size.
	     * It will not immediately perform any calculations; they'll be performed the next time getSizeAndPositionOfCell() is called.
	     */

	  }, {
	    key: 'resetCell',
	    value: function resetCell(index) {
	      this._lastMeasuredIndex = Math.min(this._lastMeasuredIndex, index - 1);
	    }
	  }, {
	    key: '_binarySearch',
	    value: function _binarySearch(high, low, offset) {
	      while (low <= high) {
	        var middle = low + Math.floor((high - low) / 2);
	        var _currentOffset = this.getSizeAndPositionOfCell(middle).offset;

	        if (_currentOffset === offset) {
	          return middle;
	        } else if (_currentOffset < offset) {
	          low = middle + 1;
	        } else if (_currentOffset > offset) {
	          high = middle - 1;
	        }
	      }

	      if (low > 0) {
	        return low - 1;
	      } else {
	        return 0;
	      }
	    }
	  }, {
	    key: '_exponentialSearch',
	    value: function _exponentialSearch(index, offset) {
	      var interval = 1;

	      while (index < this._cellCount && this.getSizeAndPositionOfCell(index).offset < offset) {
	        index += interval;
	        interval *= 2;
	      }

	      return this._binarySearch(Math.min(index, this._cellCount - 1), Math.floor(index / 2), offset);
	    }

	    /**
	     * Searches for the cell (index) nearest the specified offset.
	     *
	     * If no exact match is found the next lowest cell index will be returned.
	     * This allows partially visible cells (with offsets just before/above the fold) to be visible.
	     */

	  }, {
	    key: '_findNearestCell',
	    value: function _findNearestCell(offset) {
	      if (isNaN(offset)) {
	        throw Error('Invalid offset ' + offset + ' specified');
	      }

	      // Our search algorithms find the nearest match at or below the specified offset.
	      // So make sure the offset is at least 0 or no match will be found.
	      offset = Math.max(0, offset);

	      var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();
	      var lastMeasuredIndex = Math.max(0, this._lastMeasuredIndex);

	      if (lastMeasuredCellSizeAndPosition.offset >= offset) {
	        // If we've already measured cells within this range just use a binary search as it's faster.
	        return this._binarySearch(lastMeasuredIndex, 0, offset);
	      } else {
	        // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.
	        // The exponential search avoids pre-computing sizes for the full set of cells as a binary search would.
	        // The overall complexity for this approach is O(log n).
	        return this._exponentialSearch(lastMeasuredIndex, offset);
	      }
	    }
	  }]);

	  return CellSizeAndPositionManager;
	}();

	var DEFAULT_MAX_ELEMENT_SIZE = 1500000;
	var CHROME_MAX_ELEMENT_SIZE = 1.67771e7;

	var isBrowser$1 = function isBrowser() {
	  return typeof window !== 'undefined';
	};

	var isChrome = function isChrome() {
	  return !!window.chrome;
	};

	var getMaxElementSize = function getMaxElementSize() {
	  if (isBrowser$1()) {
	    if (isChrome()) {
	      return CHROME_MAX_ELEMENT_SIZE;
	    }
	  }
	  return DEFAULT_MAX_ELEMENT_SIZE;
	};

	/**
	 * Browsers have scroll offset limitations (eg Chrome stops scrolling at ~33.5M pixels where as Edge tops out at ~1.5M pixels).
	 * After a certain position, the browser won't allow the user to scroll further (even via JavaScript scroll offset adjustments).
	 * This util picks a lower ceiling for max size and artificially adjusts positions within to make it transparent for users.
	 */

	/**
	 * Extends CellSizeAndPositionManager and adds scaling behavior for lists that are too large to fit within a browser's native limits.
	 */
	var ScalingCellSizeAndPositionManager = function () {
	  function ScalingCellSizeAndPositionManager(_ref) {
	    var _ref$maxScrollSize = _ref.maxScrollSize,
	        maxScrollSize = _ref$maxScrollSize === undefined ? getMaxElementSize() : _ref$maxScrollSize,
	        params = _objectWithoutProperties$4(_ref, ['maxScrollSize']);

	    _classCallCheck$8(this, ScalingCellSizeAndPositionManager);

	    // Favor composition over inheritance to simplify IE10 support
	    this._cellSizeAndPositionManager = new CellSizeAndPositionManager(params);
	    this._maxScrollSize = maxScrollSize;
	  }

	  _createClass$7(ScalingCellSizeAndPositionManager, [{
	    key: 'areOffsetsAdjusted',
	    value: function areOffsetsAdjusted() {
	      return this._cellSizeAndPositionManager.getTotalSize() > this._maxScrollSize;
	    }
	  }, {
	    key: 'configure',
	    value: function configure(params) {
	      this._cellSizeAndPositionManager.configure(params);
	    }
	  }, {
	    key: 'getCellCount',
	    value: function getCellCount() {
	      return this._cellSizeAndPositionManager.getCellCount();
	    }
	  }, {
	    key: 'getEstimatedCellSize',
	    value: function getEstimatedCellSize() {
	      return this._cellSizeAndPositionManager.getEstimatedCellSize();
	    }
	  }, {
	    key: 'getLastMeasuredIndex',
	    value: function getLastMeasuredIndex() {
	      return this._cellSizeAndPositionManager.getLastMeasuredIndex();
	    }

	    /**
	     * Number of pixels a cell at the given position (offset) should be shifted in order to fit within the scaled container.
	     * The offset passed to this function is scaled (safe) as well.
	     */

	  }, {
	    key: 'getOffsetAdjustment',
	    value: function getOffsetAdjustment(_ref2) {
	      var containerSize = _ref2.containerSize,
	          offset = _ref2.offset;

	      var totalSize = this._cellSizeAndPositionManager.getTotalSize();
	      var safeTotalSize = this.getTotalSize();
	      var offsetPercentage = this._getOffsetPercentage({
	        containerSize: containerSize,
	        offset: offset,
	        totalSize: safeTotalSize
	      });

	      return Math.round(offsetPercentage * (safeTotalSize - totalSize));
	    }
	  }, {
	    key: 'getSizeAndPositionOfCell',
	    value: function getSizeAndPositionOfCell(index) {
	      return this._cellSizeAndPositionManager.getSizeAndPositionOfCell(index);
	    }
	  }, {
	    key: 'getSizeAndPositionOfLastMeasuredCell',
	    value: function getSizeAndPositionOfLastMeasuredCell() {
	      return this._cellSizeAndPositionManager.getSizeAndPositionOfLastMeasuredCell();
	    }

	    /** See CellSizeAndPositionManager#getTotalSize */

	  }, {
	    key: 'getTotalSize',
	    value: function getTotalSize() {
	      return Math.min(this._maxScrollSize, this._cellSizeAndPositionManager.getTotalSize());
	    }

	    /** See CellSizeAndPositionManager#getUpdatedOffsetForIndex */

	  }, {
	    key: 'getUpdatedOffsetForIndex',
	    value: function getUpdatedOffsetForIndex(_ref3) {
	      var _ref3$align = _ref3.align,
	          align = _ref3$align === undefined ? 'auto' : _ref3$align,
	          containerSize = _ref3.containerSize,
	          currentOffset = _ref3.currentOffset,
	          targetIndex = _ref3.targetIndex;

	      currentOffset = this._safeOffsetToOffset({
	        containerSize: containerSize,
	        offset: currentOffset
	      });

	      var offset = this._cellSizeAndPositionManager.getUpdatedOffsetForIndex({
	        align: align,
	        containerSize: containerSize,
	        currentOffset: currentOffset,
	        targetIndex: targetIndex
	      });

	      return this._offsetToSafeOffset({
	        containerSize: containerSize,
	        offset: offset
	      });
	    }

	    /** See CellSizeAndPositionManager#getVisibleCellRange */

	  }, {
	    key: 'getVisibleCellRange',
	    value: function getVisibleCellRange(_ref4) {
	      var containerSize = _ref4.containerSize,
	          offset = _ref4.offset;

	      offset = this._safeOffsetToOffset({
	        containerSize: containerSize,
	        offset: offset
	      });

	      return this._cellSizeAndPositionManager.getVisibleCellRange({
	        containerSize: containerSize,
	        offset: offset
	      });
	    }
	  }, {
	    key: 'resetCell',
	    value: function resetCell(index) {
	      this._cellSizeAndPositionManager.resetCell(index);
	    }
	  }, {
	    key: '_getOffsetPercentage',
	    value: function _getOffsetPercentage(_ref5) {
	      var containerSize = _ref5.containerSize,
	          offset = _ref5.offset,
	          totalSize = _ref5.totalSize;

	      return totalSize <= containerSize ? 0 : offset / (totalSize - containerSize);
	    }
	  }, {
	    key: '_offsetToSafeOffset',
	    value: function _offsetToSafeOffset(_ref6) {
	      var containerSize = _ref6.containerSize,
	          offset = _ref6.offset;

	      var totalSize = this._cellSizeAndPositionManager.getTotalSize();
	      var safeTotalSize = this.getTotalSize();

	      if (totalSize === safeTotalSize) {
	        return offset;
	      } else {
	        var offsetPercentage = this._getOffsetPercentage({
	          containerSize: containerSize,
	          offset: offset,
	          totalSize: totalSize
	        });

	        return Math.round(offsetPercentage * (safeTotalSize - containerSize));
	      }
	    }
	  }, {
	    key: '_safeOffsetToOffset',
	    value: function _safeOffsetToOffset(_ref7) {
	      var containerSize = _ref7.containerSize,
	          offset = _ref7.offset;

	      var totalSize = this._cellSizeAndPositionManager.getTotalSize();
	      var safeTotalSize = this.getTotalSize();

	      if (totalSize === safeTotalSize) {
	        return offset;
	      } else {
	        var offsetPercentage = this._getOffsetPercentage({
	          containerSize: containerSize,
	          offset: offset,
	          totalSize: safeTotalSize
	        });

	        return Math.round(offsetPercentage * (totalSize - containerSize));
	      }
	    }
	  }]);

	  return ScalingCellSizeAndPositionManager;
	}();

	// 19.1.2.14 Object.keys(O)



	_objectSap('keys', function () {
	  return function keys(it) {
	    return _objectKeys(_toObject(it));
	  };
	});

	var keys$1 = _core.Object.keys;

	var keys$2 = createCommonjsModule(function (module) {
	module.exports = { "default": keys$1, __esModule: true };
	});

	var _Object$keys = unwrapExports(keys$2);

	/**
	 * Helper utility that updates the specified callback whenever any of the specified indices have changed.
	 */
	function createCallbackMemoizer() {
	  var requireAllKeys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

	  var cachedIndices = {};

	  return function (_ref) {
	    var callback = _ref.callback,
	        indices = _ref.indices;

	    var keys = _Object$keys(indices);
	    var allInitialized = !requireAllKeys || keys.every(function (key) {
	      var value = indices[key];
	      return Array.isArray(value) ? value.length > 0 : value >= 0;
	    });
	    var indexChanged = keys.length !== _Object$keys(cachedIndices).length || keys.some(function (key) {
	      var cachedValue = cachedIndices[key];
	      var value = indices[key];

	      return Array.isArray(value) ? cachedValue.join(',') !== value.join(',') : cachedValue !== value;
	    });

	    cachedIndices = indices;

	    if (allInitialized && indexChanged) {
	      callback(indices);
	    }
	  };
	}

	var SCROLL_DIRECTION_BACKWARD = -1;

	var SCROLL_DIRECTION_FORWARD = 1;

	/**
	 * Calculates the number of cells to overscan before and after a specified range.
	 * This function ensures that overscanning doesn't exceed the available cells.
	 */

	function defaultOverscanIndicesGetter(_ref) {
	  var cellCount = _ref.cellCount,
	      overscanCellsCount = _ref.overscanCellsCount,
	      scrollDirection = _ref.scrollDirection,
	      startIndex = _ref.startIndex,
	      stopIndex = _ref.stopIndex;

	  if (scrollDirection === SCROLL_DIRECTION_FORWARD) {
	    return {
	      overscanStartIndex: Math.max(0, startIndex),
	      overscanStopIndex: Math.min(cellCount - 1, stopIndex + overscanCellsCount)
	    };
	  } else {
	    return {
	      overscanStartIndex: Math.max(0, startIndex - overscanCellsCount),
	      overscanStopIndex: Math.min(cellCount - 1, stopIndex)
	    };
	  }
	}

	/**
	 * Helper function that determines when to update scroll offsets to ensure that a scroll-to-index remains visible.
	 * This function also ensures that the scroll ofset isn't past the last column/row of cells.
	 */

	function updateScrollIndexHelper(_ref) {
	  var cellSize = _ref.cellSize,
	      cellSizeAndPositionManager = _ref.cellSizeAndPositionManager,
	      previousCellsCount = _ref.previousCellsCount,
	      previousCellSize = _ref.previousCellSize,
	      previousScrollToAlignment = _ref.previousScrollToAlignment,
	      previousScrollToIndex = _ref.previousScrollToIndex,
	      previousSize = _ref.previousSize,
	      scrollOffset = _ref.scrollOffset,
	      scrollToAlignment = _ref.scrollToAlignment,
	      scrollToIndex = _ref.scrollToIndex,
	      size = _ref.size,
	      sizeJustIncreasedFromZero = _ref.sizeJustIncreasedFromZero,
	      updateScrollIndexCallback = _ref.updateScrollIndexCallback;

	  var cellCount = cellSizeAndPositionManager.getCellCount();
	  var hasScrollToIndex = scrollToIndex >= 0 && scrollToIndex < cellCount;
	  var sizeHasChanged = size !== previousSize || sizeJustIncreasedFromZero || !previousCellSize || typeof cellSize === 'number' && cellSize !== previousCellSize;

	  // If we have a new scroll target OR if height/row-height has changed,
	  // We should ensure that the scroll target is visible.
	  if (hasScrollToIndex && (sizeHasChanged || scrollToAlignment !== previousScrollToAlignment || scrollToIndex !== previousScrollToIndex)) {
	    updateScrollIndexCallback(scrollToIndex);

	    // If we don't have a selected item but list size or number of children have decreased,
	    // Make sure we aren't scrolled too far past the current content.
	  } else if (!hasScrollToIndex && cellCount > 0 && (size < previousSize || cellCount < previousCellsCount)) {
	    // We need to ensure that the current scroll offset is still within the collection's range.
	    // To do this, we don't need to measure everything; CellMeasurer would perform poorly.
	    // Just check to make sure we're still okay.
	    // Only adjust the scroll position if we've scrolled below the last set of rows.
	    if (scrollOffset > cellSizeAndPositionManager.getTotalSize() - size) {
	      updateScrollIndexCallback(cellCount - 1);
	    }
	  }
	}

	/**
	 * Default implementation of cellRangeRenderer used by Grid.
	 * This renderer supports cell-caching while the user is scrolling.
	 */

	function defaultCellRangeRenderer(_ref) {
	  var cellCache = _ref.cellCache,
	      cellRenderer = _ref.cellRenderer,
	      columnSizeAndPositionManager = _ref.columnSizeAndPositionManager,
	      columnStartIndex = _ref.columnStartIndex,
	      columnStopIndex = _ref.columnStopIndex,
	      deferredMeasurementCache = _ref.deferredMeasurementCache,
	      horizontalOffsetAdjustment = _ref.horizontalOffsetAdjustment,
	      isScrolling = _ref.isScrolling,
	      isScrollingOptOut = _ref.isScrollingOptOut,
	      parent = _ref.parent,
	      rowSizeAndPositionManager = _ref.rowSizeAndPositionManager,
	      rowStartIndex = _ref.rowStartIndex,
	      rowStopIndex = _ref.rowStopIndex,
	      styleCache = _ref.styleCache,
	      verticalOffsetAdjustment = _ref.verticalOffsetAdjustment,
	      visibleColumnIndices = _ref.visibleColumnIndices,
	      visibleRowIndices = _ref.visibleRowIndices;

	  var renderedCells = [];

	  // Browsers have native size limits for elements (eg Chrome 33M pixels, IE 1.5M pixes).
	  // User cannot scroll beyond these size limitations.
	  // In order to work around this, ScalingCellSizeAndPositionManager compresses offsets.
	  // We should never cache styles for compressed offsets though as this can lead to bugs.
	  // See issue #576 for more.
	  var areOffsetsAdjusted = columnSizeAndPositionManager.areOffsetsAdjusted() || rowSizeAndPositionManager.areOffsetsAdjusted();

	  var canCacheStyle = !isScrolling && !areOffsetsAdjusted;

	  for (var rowIndex = rowStartIndex; rowIndex <= rowStopIndex; rowIndex++) {
	    var rowDatum = rowSizeAndPositionManager.getSizeAndPositionOfCell(rowIndex);

	    for (var columnIndex = columnStartIndex; columnIndex <= columnStopIndex; columnIndex++) {
	      var columnDatum = columnSizeAndPositionManager.getSizeAndPositionOfCell(columnIndex);
	      var isVisible = columnIndex >= visibleColumnIndices.start && columnIndex <= visibleColumnIndices.stop && rowIndex >= visibleRowIndices.start && rowIndex <= visibleRowIndices.stop;
	      var key = rowIndex + '-' + columnIndex;
	      var style = void 0;

	      // Cache style objects so shallow-compare doesn't re-render unnecessarily.
	      if (canCacheStyle && styleCache[key]) {
	        style = styleCache[key];
	      } else {
	        // In deferred mode, cells will be initially rendered before we know their size.
	        // Don't interfere with CellMeasurer's measurements by setting an invalid size.
	        if (deferredMeasurementCache && !deferredMeasurementCache.has(rowIndex, columnIndex)) {
	          // Position not-yet-measured cells at top/left 0,0,
	          // And give them width/height of 'auto' so they can grow larger than the parent Grid if necessary.
	          // Positioning them further to the right/bottom influences their measured size.
	          style = {
	            height: 'auto',
	            left: 0,
	            position: 'absolute',
	            top: 0,
	            width: 'auto'
	          };
	        } else {
	          style = {
	            height: rowDatum.size,
	            left: columnDatum.offset + horizontalOffsetAdjustment,
	            position: 'absolute',
	            top: rowDatum.offset + verticalOffsetAdjustment,
	            width: columnDatum.size
	          };

	          styleCache[key] = style;
	        }
	      }

	      var cellRendererParams = {
	        columnIndex: columnIndex,
	        isScrolling: isScrolling,
	        isVisible: isVisible,
	        key: key,
	        parent: parent,
	        rowIndex: rowIndex,
	        style: style
	      };

	      var renderedCell = void 0;

	      // Avoid re-creating cells while scrolling.
	      // This can lead to the same cell being created many times and can cause performance issues for "heavy" cells.
	      // If a scroll is in progress- cache and reuse cells.
	      // This cache will be thrown away once scrolling completes.
	      // However if we are scaling scroll positions and sizes, we should also avoid caching.
	      // This is because the offset changes slightly as scroll position changes and caching leads to stale values.
	      // For more info refer to issue #395
	      //
	      // If isScrollingOptOut is specified, we always cache cells.
	      // For more info refer to issue #1028
	      if ((isScrollingOptOut || isScrolling) && !horizontalOffsetAdjustment && !verticalOffsetAdjustment) {
	        if (!cellCache[key]) {
	          cellCache[key] = cellRenderer(cellRendererParams);
	        }

	        renderedCell = cellCache[key];

	        // If the user is no longer scrolling, don't cache cells.
	        // This makes dynamic cell content difficult for users and would also lead to a heavier memory footprint.
	      } else {
	        renderedCell = cellRenderer(cellRendererParams);
	      }

	      if (renderedCell == null || renderedCell === false) {
	        continue;
	      }

	      if (process.env.NODE_ENV !== 'production') {
	        warnAboutMissingStyle(parent, renderedCell);
	      }

	      renderedCells.push(renderedCell);
	    }
	  }

	  return renderedCells;
	}

	function warnAboutMissingStyle(parent, renderedCell) {
	  if (process.env.NODE_ENV !== 'production') {
	    if (renderedCell) {
	      // If the direct child is a CellMeasurer, then we should check its child
	      // See issue #611
	      if (renderedCell.type && renderedCell.type.__internalCellMeasurerFlag) {
	        renderedCell = renderedCell.props.children;
	      }

	      if (renderedCell && renderedCell.props && renderedCell.props.style === undefined && parent.__warnedAboutMissingStyle !== true) {
	        parent.__warnedAboutMissingStyle = true;

	        console.warn('Rendered cell should include style property for positioning.');
	      }
	    }
	  }
	}

	var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

	var size;
	function scrollbarSize(recalc) {
	  if (!size && size !== 0 || recalc) {
	    if (canUseDOM) {
	      var scrollDiv = document.createElement('div');
	      scrollDiv.style.position = 'absolute';
	      scrollDiv.style.top = '-9999px';
	      scrollDiv.style.width = '50px';
	      scrollDiv.style.height = '50px';
	      scrollDiv.style.overflow = 'scroll';
	      document.body.appendChild(scrollDiv);
	      size = scrollDiv.offsetWidth - scrollDiv.clientWidth;
	      document.body.removeChild(scrollDiv);
	    }
	  }

	  return size;
	}

	// getting tag from 19.1.3.6 Object.prototype.toString()

	var TAG$1 = _wks('toStringTag');
	// ES3 wrong here
	var ARG = _cof(function () { return arguments; }()) == 'Arguments';

	// fallback for IE11 Script Access Denied error
	var tryGet = function (it, key) {
	  try {
	    return it[key];
	  } catch (e) { /* empty */ }
	};

	var _classof = function (it) {
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = tryGet(O = Object(it), TAG$1)) == 'string' ? T
	    // builtinTag case
	    : ARG ? _cof(O)
	    // ES3 arguments fallback
	    : (B = _cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};

	var _anInstance = function (it, Constructor, name, forbiddenField) {
	  if (!(it instanceof Constructor) || (forbiddenField !== undefined && forbiddenField in it)) {
	    throw TypeError(name + ': incorrect invocation!');
	  } return it;
	};

	// call something on iterator step with safe closing on error

	var _iterCall = function (iterator, fn, value, entries) {
	  try {
	    return entries ? fn(_anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch (e) {
	    var ret = iterator['return'];
	    if (ret !== undefined) _anObject(ret.call(iterator));
	    throw e;
	  }
	};

	// check on default Array iterator

	var ITERATOR$1 = _wks('iterator');
	var ArrayProto = Array.prototype;

	var _isArrayIter = function (it) {
	  return it !== undefined && (_iterators.Array === it || ArrayProto[ITERATOR$1] === it);
	};

	var ITERATOR$2 = _wks('iterator');

	var core_getIteratorMethod = _core.getIteratorMethod = function (it) {
	  if (it != undefined) return it[ITERATOR$2]
	    || it['@@iterator']
	    || _iterators[_classof(it)];
	};

	var _forOf = createCommonjsModule(function (module) {
	var BREAK = {};
	var RETURN = {};
	var exports = module.exports = function (iterable, entries, fn, that, ITERATOR) {
	  var iterFn = ITERATOR ? function () { return iterable; } : core_getIteratorMethod(iterable);
	  var f = _ctx(fn, that, entries ? 2 : 1);
	  var index = 0;
	  var length, step, iterator, result;
	  if (typeof iterFn != 'function') throw TypeError(iterable + ' is not iterable!');
	  // fast case for arrays with default iterator
	  if (_isArrayIter(iterFn)) for (length = _toLength(iterable.length); length > index; index++) {
	    result = entries ? f(_anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
	    if (result === BREAK || result === RETURN) return result;
	  } else for (iterator = iterFn.call(iterable); !(step = iterator.next()).done;) {
	    result = _iterCall(iterator, f, step.value, entries);
	    if (result === BREAK || result === RETURN) return result;
	  }
	};
	exports.BREAK = BREAK;
	exports.RETURN = RETURN;
	});

	// 7.3.20 SpeciesConstructor(O, defaultConstructor)


	var SPECIES = _wks('species');
	var _speciesConstructor = function (O, D) {
	  var C = _anObject(O).constructor;
	  var S;
	  return C === undefined || (S = _anObject(C)[SPECIES]) == undefined ? D : _aFunction(S);
	};

	// fast apply, http://jsperf.lnkit.com/fast-apply/5
	var _invoke = function (fn, args, that) {
	  var un = that === undefined;
	  switch (args.length) {
	    case 0: return un ? fn()
	                      : fn.call(that);
	    case 1: return un ? fn(args[0])
	                      : fn.call(that, args[0]);
	    case 2: return un ? fn(args[0], args[1])
	                      : fn.call(that, args[0], args[1]);
	    case 3: return un ? fn(args[0], args[1], args[2])
	                      : fn.call(that, args[0], args[1], args[2]);
	    case 4: return un ? fn(args[0], args[1], args[2], args[3])
	                      : fn.call(that, args[0], args[1], args[2], args[3]);
	  } return fn.apply(that, args);
	};

	var process$1 = _global.process;
	var setTask = _global.setImmediate;
	var clearTask = _global.clearImmediate;
	var MessageChannel = _global.MessageChannel;
	var Dispatch = _global.Dispatch;
	var counter = 0;
	var queue$1 = {};
	var ONREADYSTATECHANGE = 'onreadystatechange';
	var defer, channel, port;
	var run$1 = function () {
	  var id = +this;
	  // eslint-disable-next-line no-prototype-builtins
	  if (queue$1.hasOwnProperty(id)) {
	    var fn = queue$1[id];
	    delete queue$1[id];
	    fn();
	  }
	};
	var listener = function (event) {
	  run$1.call(event.data);
	};
	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if (!setTask || !clearTask) {
	  setTask = function setImmediate(fn) {
	    var args = [];
	    var i = 1;
	    while (arguments.length > i) args.push(arguments[i++]);
	    queue$1[++counter] = function () {
	      // eslint-disable-next-line no-new-func
	      _invoke(typeof fn == 'function' ? fn : Function(fn), args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clearTask = function clearImmediate(id) {
	    delete queue$1[id];
	  };
	  // Node.js 0.8-
	  if (_cof(process$1) == 'process') {
	    defer = function (id) {
	      process$1.nextTick(_ctx(run$1, id, 1));
	    };
	  // Sphere (JS game engine) Dispatch API
	  } else if (Dispatch && Dispatch.now) {
	    defer = function (id) {
	      Dispatch.now(_ctx(run$1, id, 1));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  } else if (MessageChannel) {
	    channel = new MessageChannel();
	    port = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = _ctx(port.postMessage, port, 1);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if (_global.addEventListener && typeof postMessage == 'function' && !_global.importScripts) {
	    defer = function (id) {
	      _global.postMessage(id + '', '*');
	    };
	    _global.addEventListener('message', listener, false);
	  // IE8-
	  } else if (ONREADYSTATECHANGE in _domCreate('script')) {
	    defer = function (id) {
	      _html.appendChild(_domCreate('script'))[ONREADYSTATECHANGE] = function () {
	        _html.removeChild(this);
	        run$1.call(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function (id) {
	      setTimeout(_ctx(run$1, id, 1), 0);
	    };
	  }
	}
	var _task = {
	  set: setTask,
	  clear: clearTask
	};

	var macrotask = _task.set;
	var Observer = _global.MutationObserver || _global.WebKitMutationObserver;
	var process$2 = _global.process;
	var Promise$1 = _global.Promise;
	var isNode = _cof(process$2) == 'process';

	var _microtask = function () {
	  var head, last, notify;

	  var flush = function () {
	    var parent, fn;
	    if (isNode && (parent = process$2.domain)) parent.exit();
	    while (head) {
	      fn = head.fn;
	      head = head.next;
	      try {
	        fn();
	      } catch (e) {
	        if (head) notify();
	        else last = undefined;
	        throw e;
	      }
	    } last = undefined;
	    if (parent) parent.enter();
	  };

	  // Node.js
	  if (isNode) {
	    notify = function () {
	      process$2.nextTick(flush);
	    };
	  // browsers with MutationObserver, except iOS Safari - https://github.com/zloirock/core-js/issues/339
	  } else if (Observer && !(_global.navigator && _global.navigator.standalone)) {
	    var toggle = true;
	    var node = document.createTextNode('');
	    new Observer(flush).observe(node, { characterData: true }); // eslint-disable-line no-new
	    notify = function () {
	      node.data = toggle = !toggle;
	    };
	  // environments with maybe non-completely correct, but existent Promise
	  } else if (Promise$1 && Promise$1.resolve) {
	    // Promise.resolve without an argument throws an error in LG WebOS 2
	    var promise = Promise$1.resolve(undefined);
	    notify = function () {
	      promise.then(flush);
	    };
	  // for other environments - macrotask based on:
	  // - setImmediate
	  // - MessageChannel
	  // - window.postMessag
	  // - onreadystatechange
	  // - setTimeout
	  } else {
	    notify = function () {
	      // strange IE + webpack dev server bug - use .call(global)
	      macrotask.call(_global, flush);
	    };
	  }

	  return function (fn) {
	    var task = { fn: fn, next: undefined };
	    if (last) last.next = task;
	    if (!head) {
	      head = task;
	      notify();
	    } last = task;
	  };
	};

	// 25.4.1.5 NewPromiseCapability(C)


	function PromiseCapability(C) {
	  var resolve, reject;
	  this.promise = new C(function ($$resolve, $$reject) {
	    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject = $$reject;
	  });
	  this.resolve = _aFunction(resolve);
	  this.reject = _aFunction(reject);
	}

	var f$8 = function (C) {
	  return new PromiseCapability(C);
	};

	var _newPromiseCapability = {
		f: f$8
	};

	var _perform = function (exec) {
	  try {
	    return { e: false, v: exec() };
	  } catch (e) {
	    return { e: true, v: e };
	  }
	};

	var navigator = _global.navigator;

	var _userAgent = navigator && navigator.userAgent || '';

	var _promiseResolve = function (C, x) {
	  _anObject(C);
	  if (_isObject(x) && x.constructor === C) return x;
	  var promiseCapability = _newPromiseCapability.f(C);
	  var resolve = promiseCapability.resolve;
	  resolve(x);
	  return promiseCapability.promise;
	};

	var _redefineAll = function (target, src, safe) {
	  for (var key in src) {
	    if (safe && target[key]) target[key] = src[key];
	    else _hide(target, key, src[key]);
	  } return target;
	};

	var SPECIES$1 = _wks('species');

	var _setSpecies = function (KEY) {
	  var C = typeof _core[KEY] == 'function' ? _core[KEY] : _global[KEY];
	  if (_descriptors && C && !C[SPECIES$1]) _objectDp.f(C, SPECIES$1, {
	    configurable: true,
	    get: function () { return this; }
	  });
	};

	var ITERATOR$3 = _wks('iterator');
	var SAFE_CLOSING = false;

	try {
	  var riter = [7][ITERATOR$3]();
	  riter['return'] = function () { SAFE_CLOSING = true; };
	  // eslint-disable-next-line no-throw-literal
	  Array.from(riter, function () { throw 2; });
	} catch (e) { /* empty */ }

	var _iterDetect = function (exec, skipClosing) {
	  if (!skipClosing && !SAFE_CLOSING) return false;
	  var safe = false;
	  try {
	    var arr = [7];
	    var iter = arr[ITERATOR$3]();
	    iter.next = function () { return { done: safe = true }; };
	    arr[ITERATOR$3] = function () { return iter; };
	    exec(arr);
	  } catch (e) { /* empty */ }
	  return safe;
	};

	var task = _task.set;
	var microtask = _microtask();




	var PROMISE = 'Promise';
	var TypeError$1 = _global.TypeError;
	var process$3 = _global.process;
	var versions = process$3 && process$3.versions;
	var v8 = versions && versions.v8 || '';
	var $Promise = _global[PROMISE];
	var isNode$1 = _classof(process$3) == 'process';
	var empty = function () { /* empty */ };
	var Internal, newGenericPromiseCapability, OwnPromiseCapability, Wrapper$1;
	var newPromiseCapability = newGenericPromiseCapability = _newPromiseCapability.f;

	var USE_NATIVE$1 = !!function () {
	  try {
	    // correct subclassing with @@species support
	    var promise = $Promise.resolve(1);
	    var FakePromise = (promise.constructor = {})[_wks('species')] = function (exec) {
	      exec(empty, empty);
	    };
	    // unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	    return (isNode$1 || typeof PromiseRejectionEvent == 'function')
	      && promise.then(empty) instanceof FakePromise
	      // v8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
	      // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
	      // we can't detect it synchronously, so just check versions
	      && v8.indexOf('6.6') !== 0
	      && _userAgent.indexOf('Chrome/66') === -1;
	  } catch (e) { /* empty */ }
	}();

	// helpers
	var isThenable = function (it) {
	  var then;
	  return _isObject(it) && typeof (then = it.then) == 'function' ? then : false;
	};
	var notify = function (promise, isReject) {
	  if (promise._n) return;
	  promise._n = true;
	  var chain = promise._c;
	  microtask(function () {
	    var value = promise._v;
	    var ok = promise._s == 1;
	    var i = 0;
	    var run = function (reaction) {
	      var handler = ok ? reaction.ok : reaction.fail;
	      var resolve = reaction.resolve;
	      var reject = reaction.reject;
	      var domain = reaction.domain;
	      var result, then, exited;
	      try {
	        if (handler) {
	          if (!ok) {
	            if (promise._h == 2) onHandleUnhandled(promise);
	            promise._h = 1;
	          }
	          if (handler === true) result = value;
	          else {
	            if (domain) domain.enter();
	            result = handler(value); // may throw
	            if (domain) {
	              domain.exit();
	              exited = true;
	            }
	          }
	          if (result === reaction.promise) {
	            reject(TypeError$1('Promise-chain cycle'));
	          } else if (then = isThenable(result)) {
	            then.call(result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch (e) {
	        if (domain && !exited) domain.exit();
	        reject(e);
	      }
	    };
	    while (chain.length > i) run(chain[i++]); // variable length - can't use forEach
	    promise._c = [];
	    promise._n = false;
	    if (isReject && !promise._h) onUnhandled(promise);
	  });
	};
	var onUnhandled = function (promise) {
	  task.call(_global, function () {
	    var value = promise._v;
	    var unhandled = isUnhandled(promise);
	    var result, handler, console;
	    if (unhandled) {
	      result = _perform(function () {
	        if (isNode$1) {
	          process$3.emit('unhandledRejection', value, promise);
	        } else if (handler = _global.onunhandledrejection) {
	          handler({ promise: promise, reason: value });
	        } else if ((console = _global.console) && console.error) {
	          console.error('Unhandled promise rejection', value);
	        }
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      promise._h = isNode$1 || isUnhandled(promise) ? 2 : 1;
	    } promise._a = undefined;
	    if (unhandled && result.e) throw result.v;
	  });
	};
	var isUnhandled = function (promise) {
	  return promise._h !== 1 && (promise._a || promise._c).length === 0;
	};
	var onHandleUnhandled = function (promise) {
	  task.call(_global, function () {
	    var handler;
	    if (isNode$1) {
	      process$3.emit('rejectionHandled', promise);
	    } else if (handler = _global.onrejectionhandled) {
	      handler({ promise: promise, reason: promise._v });
	    }
	  });
	};
	var $reject = function (value) {
	  var promise = this;
	  if (promise._d) return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  promise._v = value;
	  promise._s = 2;
	  if (!promise._a) promise._a = promise._c.slice();
	  notify(promise, true);
	};
	var $resolve = function (value) {
	  var promise = this;
	  var then;
	  if (promise._d) return;
	  promise._d = true;
	  promise = promise._w || promise; // unwrap
	  try {
	    if (promise === value) throw TypeError$1("Promise can't be resolved itself");
	    if (then = isThenable(value)) {
	      microtask(function () {
	        var wrapper = { _w: promise, _d: false }; // wrap
	        try {
	          then.call(value, _ctx($resolve, wrapper, 1), _ctx($reject, wrapper, 1));
	        } catch (e) {
	          $reject.call(wrapper, e);
	        }
	      });
	    } else {
	      promise._v = value;
	      promise._s = 1;
	      notify(promise, false);
	    }
	  } catch (e) {
	    $reject.call({ _w: promise, _d: false }, e); // wrap
	  }
	};

	// constructor polyfill
	if (!USE_NATIVE$1) {
	  // 25.4.3.1 Promise(executor)
	  $Promise = function Promise(executor) {
	    _anInstance(this, $Promise, PROMISE, '_h');
	    _aFunction(executor);
	    Internal.call(this);
	    try {
	      executor(_ctx($resolve, this, 1), _ctx($reject, this, 1));
	    } catch (err) {
	      $reject.call(this, err);
	    }
	  };
	  // eslint-disable-next-line no-unused-vars
	  Internal = function Promise(executor) {
	    this._c = [];             // <- awaiting reactions
	    this._a = undefined;      // <- checked in isUnhandled reactions
	    this._s = 0;              // <- state
	    this._d = false;          // <- done
	    this._v = undefined;      // <- value
	    this._h = 0;              // <- rejection state, 0 - default, 1 - handled, 2 - unhandled
	    this._n = false;          // <- notify
	  };
	  Internal.prototype = _redefineAll($Promise.prototype, {
	    // 25.4.5.3 Promise.prototype.then(onFulfilled, onRejected)
	    then: function then(onFulfilled, onRejected) {
	      var reaction = newPromiseCapability(_speciesConstructor(this, $Promise));
	      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
	      reaction.fail = typeof onRejected == 'function' && onRejected;
	      reaction.domain = isNode$1 ? process$3.domain : undefined;
	      this._c.push(reaction);
	      if (this._a) this._a.push(reaction);
	      if (this._s) notify(this, false);
	      return reaction.promise;
	    },
	    // 25.4.5.1 Promise.prototype.catch(onRejected)
	    'catch': function (onRejected) {
	      return this.then(undefined, onRejected);
	    }
	  });
	  OwnPromiseCapability = function () {
	    var promise = new Internal();
	    this.promise = promise;
	    this.resolve = _ctx($resolve, promise, 1);
	    this.reject = _ctx($reject, promise, 1);
	  };
	  _newPromiseCapability.f = newPromiseCapability = function (C) {
	    return C === $Promise || C === Wrapper$1
	      ? new OwnPromiseCapability(C)
	      : newGenericPromiseCapability(C);
	  };
	}

	_export(_export.G + _export.W + _export.F * !USE_NATIVE$1, { Promise: $Promise });
	_setToStringTag($Promise, PROMISE);
	_setSpecies(PROMISE);
	Wrapper$1 = _core[PROMISE];

	// statics
	_export(_export.S + _export.F * !USE_NATIVE$1, PROMISE, {
	  // 25.4.4.5 Promise.reject(r)
	  reject: function reject(r) {
	    var capability = newPromiseCapability(this);
	    var $$reject = capability.reject;
	    $$reject(r);
	    return capability.promise;
	  }
	});
	_export(_export.S + _export.F * (_library ), PROMISE, {
	  // 25.4.4.6 Promise.resolve(x)
	  resolve: function resolve(x) {
	    return _promiseResolve( this === Wrapper$1 ? $Promise : this, x);
	  }
	});
	_export(_export.S + _export.F * !(USE_NATIVE$1 && _iterDetect(function (iter) {
	  $Promise.all(iter)['catch'](empty);
	})), PROMISE, {
	  // 25.4.4.1 Promise.all(iterable)
	  all: function all(iterable) {
	    var C = this;
	    var capability = newPromiseCapability(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = _perform(function () {
	      var values = [];
	      var index = 0;
	      var remaining = 1;
	      _forOf(iterable, false, function (promise) {
	        var $index = index++;
	        var alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        C.resolve(promise).then(function (value) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[$index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if (result.e) reject(result.v);
	    return capability.promise;
	  },
	  // 25.4.4.4 Promise.race(iterable)
	  race: function race(iterable) {
	    var C = this;
	    var capability = newPromiseCapability(C);
	    var reject = capability.reject;
	    var result = _perform(function () {
	      _forOf(iterable, false, function (promise) {
	        C.resolve(promise).then(capability.resolve, reject);
	      });
	    });
	    if (result.e) reject(result.v);
	    return capability.promise;
	  }
	});

	_export(_export.P + _export.R, 'Promise', { 'finally': function (onFinally) {
	  var C = _speciesConstructor(this, _core.Promise || _global.Promise);
	  var isFunction = typeof onFinally == 'function';
	  return this.then(
	    isFunction ? function (x) {
	      return _promiseResolve(C, onFinally()).then(function () { return x; });
	    } : onFinally,
	    isFunction ? function (e) {
	      return _promiseResolve(C, onFinally()).then(function () { throw e; });
	    } : onFinally
	  );
	} });

	// https://github.com/tc39/proposal-promise-try




	_export(_export.S, 'Promise', { 'try': function (callbackfn) {
	  var promiseCapability = _newPromiseCapability.f(this);
	  var result = _perform(callbackfn);
	  (result.e ? promiseCapability.reject : promiseCapability.resolve)(result.v);
	  return promiseCapability.promise;
	} });

	var promise = _core.Promise;

	var promise$1 = createCommonjsModule(function (module) {
	module.exports = { "default": promise, __esModule: true };
	});

	var _Promise = unwrapExports(promise$1);

	// Properly handle server-side rendering.
	var win = void 0;

	if (typeof window !== 'undefined') {
	  win = window;
	} else if (typeof self !== 'undefined') {
	  win = self;
	} else {
	  win = {};
	}

	// requestAnimationFrame() shim by Paul Irish
	// http://paulirish.com/2011/requestanimationframe-for-smart-animating/
	var request = win.requestAnimationFrame || win.webkitRequestAnimationFrame || win.mozRequestAnimationFrame || win.oRequestAnimationFrame || win.msRequestAnimationFrame || function (callback) {
	  return win.setTimeout(callback, 1000 / 60);
	};

	var cancel$1 = win.cancelAnimationFrame || win.webkitCancelAnimationFrame || win.mozCancelAnimationFrame || win.oCancelAnimationFrame || win.msCancelAnimationFrame || function (id) {
	  win.clearTimeout(id);
	};

	var raf$1 = request;
	var caf$1 = cancel$1;

	var bpfrpt_proptype_AnimationTimeoutId = process.env.NODE_ENV === 'production' ? null : {
	  id: propTypes.number.isRequired
	};


	var cancelAnimationTimeout = function cancelAnimationTimeout(frame) {
	  return caf$1(frame.id);
	};

	/**
	 * Recursively calls requestAnimationFrame until a specified delay has been met or exceeded.
	 * When the delay time has been reached the function you're timing out will be called.
	 *
	 * Credit: Joe Lambert (https://gist.github.com/joelambert/1002116#file-requesttimeout-js)
	 */
	var requestAnimationTimeout = function requestAnimationTimeout(callback, delay) {
	  var start = void 0;
	  // wait for end of processing current event handler, because event handler may be long
	  _Promise.resolve().then(function () {
	    start = Date.now();
	  });

	  var timeout = function timeout() {
	    if (Date.now() - start >= delay) {
	      callback.call();
	    } else {
	      frame.id = raf$1(timeout);
	    }
	  };

	  var frame = {
	    id: raf$1(timeout)
	  };

	  return frame;
	};

	/**
	 * Specifies the number of milliseconds during which to disable pointer events while a scroll is in progress.
	 * This improves performance and makes scrolling smoother.
	 */
	var DEFAULT_SCROLLING_RESET_TIME_INTERVAL = 150;

	/**
	 * Controls whether the Grid updates the DOM element's scrollLeft/scrollTop based on the current state or just observes it.
	 * This prevents Grid from interrupting mouse-wheel animations (see issue #2).
	 */
	var SCROLL_POSITION_CHANGE_REASONS = {
	  OBSERVED: 'observed',
	  REQUESTED: 'requested'
	};

	var renderNull = function renderNull() {
	  return null;
	};

	/**
	 * Renders tabular data with virtualization along the vertical and horizontal axes.
	 * Row heights and column widths must be known ahead of time and specified as properties.
	 */
	var Grid$1 = function (_React$PureComponent) {
	  _inherits$3(Grid, _React$PureComponent);

	  // Invokes onSectionRendered callback only when start/stop row or column indices change
	  function Grid(props) {
	    _classCallCheck$8(this, Grid);

	    var _this = _possibleConstructorReturn$3(this, (Grid.__proto__ || _Object$getPrototypeOf(Grid)).call(this, props));

	    _this._onGridRenderedMemoizer = createCallbackMemoizer();
	    _this._onScrollMemoizer = createCallbackMemoizer(false);
	    _this._deferredInvalidateColumnIndex = null;
	    _this._deferredInvalidateRowIndex = null;
	    _this._recomputeScrollLeftFlag = false;
	    _this._recomputeScrollTopFlag = false;
	    _this._horizontalScrollBarSize = 0;
	    _this._verticalScrollBarSize = 0;
	    _this._scrollbarPresenceChanged = false;
	    _this._renderedColumnStartIndex = 0;
	    _this._renderedColumnStopIndex = 0;
	    _this._renderedRowStartIndex = 0;
	    _this._renderedRowStopIndex = 0;
	    _this._styleCache = {};
	    _this._cellCache = {};

	    _this._debounceScrollEndedCallback = function () {
	      _this._disablePointerEventsTimeoutId = null;
	      // isScrolling is used to determine if we reset styleCache
	      _this.setState({
	        isScrolling: false,
	        needToResetStyleCache: false
	      });
	    };

	    _this._invokeOnGridRenderedHelper = function () {
	      var onSectionRendered = _this.props.onSectionRendered;


	      _this._onGridRenderedMemoizer({
	        callback: onSectionRendered,
	        indices: {
	          columnOverscanStartIndex: _this._columnStartIndex,
	          columnOverscanStopIndex: _this._columnStopIndex,
	          columnStartIndex: _this._renderedColumnStartIndex,
	          columnStopIndex: _this._renderedColumnStopIndex,
	          rowOverscanStartIndex: _this._rowStartIndex,
	          rowOverscanStopIndex: _this._rowStopIndex,
	          rowStartIndex: _this._renderedRowStartIndex,
	          rowStopIndex: _this._renderedRowStopIndex
	        }
	      });
	    };

	    _this._setScrollingContainerRef = function (ref) {
	      _this._scrollingContainer = ref;
	    };

	    _this._onScroll = function (event) {
	      // In certain edge-cases React dispatches an onScroll event with an invalid target.scrollLeft / target.scrollTop.
	      // This invalid event can be detected by comparing event.target to this component's scrollable DOM element.
	      // See issue #404 for more information.
	      if (event.target === _this._scrollingContainer) {
	        _this.handleScrollEvent(event.target);
	      }
	    };

	    var columnSizeAndPositionManager = new ScalingCellSizeAndPositionManager({
	      cellCount: props.columnCount,
	      cellSizeGetter: function cellSizeGetter(params) {
	        return Grid._wrapSizeGetter(props.columnWidth)(params);
	      },
	      estimatedCellSize: Grid._getEstimatedColumnSize(props)
	    });
	    var rowSizeAndPositionManager = new ScalingCellSizeAndPositionManager({
	      cellCount: props.rowCount,
	      cellSizeGetter: function cellSizeGetter(params) {
	        return Grid._wrapSizeGetter(props.rowHeight)(params);
	      },
	      estimatedCellSize: Grid._getEstimatedRowSize(props)
	    });

	    _this.state = {
	      instanceProps: {
	        columnSizeAndPositionManager: columnSizeAndPositionManager,
	        rowSizeAndPositionManager: rowSizeAndPositionManager,

	        prevColumnWidth: props.columnWidth,
	        prevRowHeight: props.rowHeight,
	        prevColumnCount: props.columnCount,
	        prevRowCount: props.rowCount,
	        prevIsScrolling: props.isScrolling === true,
	        prevScrollToColumn: props.scrollToColumn,
	        prevScrollToRow: props.scrollToRow,

	        scrollbarSize: 0,
	        scrollbarSizeMeasured: false
	      },
	      isScrolling: false,
	      scrollDirectionHorizontal: SCROLL_DIRECTION_FORWARD,
	      scrollDirectionVertical: SCROLL_DIRECTION_FORWARD,
	      scrollLeft: 0,
	      scrollTop: 0,
	      scrollPositionChangeReason: null,

	      needToResetStyleCache: false
	    };

	    if (props.scrollToRow > 0) {
	      _this._initialScrollTop = _this._getCalculatedScrollTop(props, _this.state);
	    }
	    if (props.scrollToColumn > 0) {
	      _this._initialScrollLeft = _this._getCalculatedScrollLeft(props, _this.state);
	    }
	    return _this;
	  }

	  /**
	   * Gets offsets for a given cell and alignment.
	   */


	  _createClass$7(Grid, [{
	    key: 'getOffsetForCell',
	    value: function getOffsetForCell() {
	      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	          _ref$alignment = _ref.alignment,
	          alignment = _ref$alignment === undefined ? this.props.scrollToAlignment : _ref$alignment,
	          _ref$columnIndex = _ref.columnIndex,
	          columnIndex = _ref$columnIndex === undefined ? this.props.scrollToColumn : _ref$columnIndex,
	          _ref$rowIndex = _ref.rowIndex,
	          rowIndex = _ref$rowIndex === undefined ? this.props.scrollToRow : _ref$rowIndex;

	      var offsetProps = _extends$5({}, this.props, {
	        scrollToAlignment: alignment,
	        scrollToColumn: columnIndex,
	        scrollToRow: rowIndex
	      });

	      return {
	        scrollLeft: this._getCalculatedScrollLeft(offsetProps),
	        scrollTop: this._getCalculatedScrollTop(offsetProps)
	      };
	    }

	    /**
	     * Gets estimated total rows' height.
	     */

	  }, {
	    key: 'getTotalRowsHeight',
	    value: function getTotalRowsHeight() {
	      return this.state.instanceProps.rowSizeAndPositionManager.getTotalSize();
	    }

	    /**
	     * Gets estimated total columns' width.
	     */

	  }, {
	    key: 'getTotalColumnsWidth',
	    value: function getTotalColumnsWidth() {
	      return this.state.instanceProps.columnSizeAndPositionManager.getTotalSize();
	    }

	    /**
	     * This method handles a scroll event originating from an external scroll control.
	     * It's an advanced method and should probably not be used unless you're implementing a custom scroll-bar solution.
	     */

	  }, {
	    key: 'handleScrollEvent',
	    value: function handleScrollEvent(_ref2) {
	      var _ref2$scrollLeft = _ref2.scrollLeft,
	          scrollLeftParam = _ref2$scrollLeft === undefined ? 0 : _ref2$scrollLeft,
	          _ref2$scrollTop = _ref2.scrollTop,
	          scrollTopParam = _ref2$scrollTop === undefined ? 0 : _ref2$scrollTop;

	      // On iOS, we can arrive at negative offsets by swiping past the start.
	      // To prevent flicker here, we make playing in the negative offset zone cause nothing to happen.
	      if (scrollTopParam < 0) {
	        return;
	      }

	      // Prevent pointer events from interrupting a smooth scroll
	      this._debounceScrollEnded();

	      var _props = this.props,
	          autoHeight = _props.autoHeight,
	          autoWidth = _props.autoWidth,
	          height = _props.height,
	          width = _props.width;
	      var instanceProps = this.state.instanceProps;

	      // When this component is shrunk drastically, React dispatches a series of back-to-back scroll events,
	      // Gradually converging on a scrollTop that is within the bounds of the new, smaller height.
	      // This causes a series of rapid renders that is slow for long lists.
	      // We can avoid that by doing some simple bounds checking to ensure that scroll offsets never exceed their bounds.

	      var scrollbarSize = instanceProps.scrollbarSize;
	      var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();
	      var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();
	      var scrollLeft = Math.min(Math.max(0, totalColumnsWidth - width + scrollbarSize), scrollLeftParam);
	      var scrollTop = Math.min(Math.max(0, totalRowsHeight - height + scrollbarSize), scrollTopParam);

	      // Certain devices (like Apple touchpad) rapid-fire duplicate events.
	      // Don't force a re-render if this is the case.
	      // The mouse may move faster then the animation frame does.
	      // Use requestAnimationFrame to avoid over-updating.
	      if (this.state.scrollLeft !== scrollLeft || this.state.scrollTop !== scrollTop) {
	        // Track scrolling direction so we can more efficiently overscan rows to reduce empty space around the edges while scrolling.
	        // Don't change direction for an axis unless scroll offset has changed.
	        var _scrollDirectionHorizontal = scrollLeft !== this.state.scrollLeft ? scrollLeft > this.state.scrollLeft ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD : this.state.scrollDirectionHorizontal;
	        var _scrollDirectionVertical = scrollTop !== this.state.scrollTop ? scrollTop > this.state.scrollTop ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD : this.state.scrollDirectionVertical;

	        var newState = {
	          isScrolling: true,
	          scrollDirectionHorizontal: _scrollDirectionHorizontal,
	          scrollDirectionVertical: _scrollDirectionVertical,
	          scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.OBSERVED
	        };

	        if (!autoHeight) {
	          newState.scrollTop = scrollTop;
	        }

	        if (!autoWidth) {
	          newState.scrollLeft = scrollLeft;
	        }

	        newState.needToResetStyleCache = false;
	        this.setState(newState);
	      }

	      this._invokeOnScrollMemoizer({
	        scrollLeft: scrollLeft,
	        scrollTop: scrollTop,
	        totalColumnsWidth: totalColumnsWidth,
	        totalRowsHeight: totalRowsHeight
	      });
	    }

	    /**
	     * Invalidate Grid size and recompute visible cells.
	     * This is a deferred wrapper for recomputeGridSize().
	     * It sets a flag to be evaluated on cDM/cDU to avoid unnecessary renders.
	     * This method is intended for advanced use-cases like CellMeasurer.
	     */
	    // @TODO (bvaughn) Add automated test coverage for this.

	  }, {
	    key: 'invalidateCellSizeAfterRender',
	    value: function invalidateCellSizeAfterRender(_ref3) {
	      var columnIndex = _ref3.columnIndex,
	          rowIndex = _ref3.rowIndex;

	      this._deferredInvalidateColumnIndex = typeof this._deferredInvalidateColumnIndex === 'number' ? Math.min(this._deferredInvalidateColumnIndex, columnIndex) : columnIndex;
	      this._deferredInvalidateRowIndex = typeof this._deferredInvalidateRowIndex === 'number' ? Math.min(this._deferredInvalidateRowIndex, rowIndex) : rowIndex;
	    }

	    /**
	     * Pre-measure all columns and rows in a Grid.
	     * Typically cells are only measured as needed and estimated sizes are used for cells that have not yet been measured.
	     * This method ensures that the next call to getTotalSize() returns an exact size (as opposed to just an estimated one).
	     */

	  }, {
	    key: 'measureAllCells',
	    value: function measureAllCells() {
	      var _props2 = this.props,
	          columnCount = _props2.columnCount,
	          rowCount = _props2.rowCount;
	      var instanceProps = this.state.instanceProps;

	      instanceProps.columnSizeAndPositionManager.getSizeAndPositionOfCell(columnCount - 1);
	      instanceProps.rowSizeAndPositionManager.getSizeAndPositionOfCell(rowCount - 1);
	    }

	    /**
	     * Forced recompute of row heights and column widths.
	     * This function should be called if dynamic column or row sizes have changed but nothing else has.
	     * Since Grid only receives :columnCount and :rowCount it has no way of detecting when the underlying data changes.
	     */

	  }, {
	    key: 'recomputeGridSize',
	    value: function recomputeGridSize() {
	      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	          _ref4$columnIndex = _ref4.columnIndex,
	          columnIndex = _ref4$columnIndex === undefined ? 0 : _ref4$columnIndex,
	          _ref4$rowIndex = _ref4.rowIndex,
	          rowIndex = _ref4$rowIndex === undefined ? 0 : _ref4$rowIndex;

	      var _props3 = this.props,
	          scrollToColumn = _props3.scrollToColumn,
	          scrollToRow = _props3.scrollToRow;
	      var instanceProps = this.state.instanceProps;


	      instanceProps.columnSizeAndPositionManager.resetCell(columnIndex);
	      instanceProps.rowSizeAndPositionManager.resetCell(rowIndex);

	      // Cell sizes may be determined by a function property.
	      // In this case the cDU handler can't know if they changed.
	      // Store this flag to let the next cDU pass know it needs to recompute the scroll offset.
	      this._recomputeScrollLeftFlag = scrollToColumn >= 0 && (this.state.scrollDirectionHorizontal === SCROLL_DIRECTION_FORWARD ? columnIndex <= scrollToColumn : columnIndex >= scrollToColumn);
	      this._recomputeScrollTopFlag = scrollToRow >= 0 && (this.state.scrollDirectionVertical === SCROLL_DIRECTION_FORWARD ? rowIndex <= scrollToRow : rowIndex >= scrollToRow);

	      // Clear cell cache in case we are scrolling;
	      // Invalid row heights likely mean invalid cached content as well.
	      this._styleCache = {};
	      this._cellCache = {};

	      this.forceUpdate();
	    }

	    /**
	     * Ensure column and row are visible.
	     */

	  }, {
	    key: 'scrollToCell',
	    value: function scrollToCell(_ref5) {
	      var columnIndex = _ref5.columnIndex,
	          rowIndex = _ref5.rowIndex;
	      var columnCount = this.props.columnCount;


	      var props = this.props;

	      // Don't adjust scroll offset for single-column grids (eg List, Table).
	      // This can cause a funky scroll offset because of the vertical scrollbar width.
	      if (columnCount > 1 && columnIndex !== undefined) {
	        this._updateScrollLeftForScrollToColumn(_extends$5({}, props, {
	          scrollToColumn: columnIndex
	        }));
	      }

	      if (rowIndex !== undefined) {
	        this._updateScrollTopForScrollToRow(_extends$5({}, props, {
	          scrollToRow: rowIndex
	        }));
	      }
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var _props4 = this.props,
	          getScrollbarSize = _props4.getScrollbarSize,
	          height = _props4.height,
	          scrollLeft = _props4.scrollLeft,
	          scrollToColumn = _props4.scrollToColumn,
	          scrollTop = _props4.scrollTop,
	          scrollToRow = _props4.scrollToRow,
	          width = _props4.width;
	      var instanceProps = this.state.instanceProps;

	      // Reset initial offsets to be ignored in browser

	      this._initialScrollTop = 0;
	      this._initialScrollLeft = 0;

	      // If cell sizes have been invalidated (eg we are using CellMeasurer) then reset cached positions.
	      // We must do this at the start of the method as we may calculate and update scroll position below.
	      this._handleInvalidatedGridSize();

	      // If this component was first rendered server-side, scrollbar size will be undefined.
	      // In that event we need to remeasure.
	      if (!instanceProps.scrollbarSizeMeasured) {
	        this.setState(function (prevState) {
	          var stateUpdate = _extends$5({}, prevState, { needToResetStyleCache: false });
	          stateUpdate.instanceProps.scrollbarSize = getScrollbarSize();
	          stateUpdate.instanceProps.scrollbarSizeMeasured = true;
	          return stateUpdate;
	        });
	      }

	      if (typeof scrollLeft === 'number' && scrollLeft >= 0 || typeof scrollTop === 'number' && scrollTop >= 0) {
	        var stateUpdate = Grid._getScrollToPositionStateUpdate({
	          prevState: this.state,
	          scrollLeft: scrollLeft,
	          scrollTop: scrollTop
	        });
	        if (stateUpdate) {
	          stateUpdate.needToResetStyleCache = false;
	          this.setState(stateUpdate);
	        }
	      }

	      // refs don't work in `react-test-renderer`
	      if (this._scrollingContainer) {
	        // setting the ref's scrollLeft and scrollTop.
	        // Somehow in MultiGrid the main grid doesn't trigger a update on mount.
	        if (this._scrollingContainer.scrollLeft !== this.state.scrollLeft) {
	          this._scrollingContainer.scrollLeft = this.state.scrollLeft;
	        }
	        if (this._scrollingContainer.scrollTop !== this.state.scrollTop) {
	          this._scrollingContainer.scrollTop = this.state.scrollTop;
	        }
	      }

	      // Don't update scroll offset if the size is 0; we don't render any cells in this case.
	      // Setting a state may cause us to later thing we've updated the offce when we haven't.
	      var sizeIsBiggerThanZero = height > 0 && width > 0;
	      if (scrollToColumn >= 0 && sizeIsBiggerThanZero) {
	        this._updateScrollLeftForScrollToColumn();
	      }
	      if (scrollToRow >= 0 && sizeIsBiggerThanZero) {
	        this._updateScrollTopForScrollToRow();
	      }

	      // Update onRowsRendered callback
	      this._invokeOnGridRenderedHelper();

	      // Initialize onScroll callback
	      this._invokeOnScrollMemoizer({
	        scrollLeft: scrollLeft || 0,
	        scrollTop: scrollTop || 0,
	        totalColumnsWidth: instanceProps.columnSizeAndPositionManager.getTotalSize(),
	        totalRowsHeight: instanceProps.rowSizeAndPositionManager.getTotalSize()
	      });

	      this._maybeCallOnScrollbarPresenceChange();
	    }

	    /**
	     * @private
	     * This method updates scrollLeft/scrollTop in state for the following conditions:
	     * 1) New scroll-to-cell props have been set
	     */

	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {
	      var _this2 = this;

	      var _props5 = this.props,
	          autoHeight = _props5.autoHeight,
	          autoWidth = _props5.autoWidth,
	          columnCount = _props5.columnCount,
	          height = _props5.height,
	          rowCount = _props5.rowCount,
	          scrollToAlignment = _props5.scrollToAlignment,
	          scrollToColumn = _props5.scrollToColumn,
	          scrollToRow = _props5.scrollToRow,
	          width = _props5.width;
	      var _state = this.state,
	          scrollLeft = _state.scrollLeft,
	          scrollPositionChangeReason = _state.scrollPositionChangeReason,
	          scrollTop = _state.scrollTop,
	          instanceProps = _state.instanceProps;
	      // If cell sizes have been invalidated (eg we are using CellMeasurer) then reset cached positions.
	      // We must do this at the start of the method as we may calculate and update scroll position below.

	      this._handleInvalidatedGridSize();

	      // Handle edge case where column or row count has only just increased over 0.
	      // In this case we may have to restore a previously-specified scroll offset.
	      // For more info see bvaughn/react-virtualized/issues/218
	      var columnOrRowCountJustIncreasedFromZero = columnCount > 0 && prevProps.columnCount === 0 || rowCount > 0 && prevProps.rowCount === 0;

	      // Make sure requested changes to :scrollLeft or :scrollTop get applied.
	      // Assigning to scrollLeft/scrollTop tells the browser to interrupt any running scroll animations,
	      // And to discard any pending async changes to the scroll position that may have happened in the meantime (e.g. on a separate scrolling thread).
	      // So we only set these when we require an adjustment of the scroll position.
	      // See issue #2 for more information.
	      if (scrollPositionChangeReason === SCROLL_POSITION_CHANGE_REASONS.REQUESTED) {
	        // @TRICKY :autoHeight and :autoWidth properties instructs Grid to leave :scrollTop and :scrollLeft management to an external HOC (eg WindowScroller).
	        // In this case we should avoid checking scrollingContainer.scrollTop and scrollingContainer.scrollLeft since it forces layout/flow.
	        if (!autoWidth && scrollLeft >= 0 && (scrollLeft !== this._scrollingContainer.scrollLeft || columnOrRowCountJustIncreasedFromZero)) {
	          this._scrollingContainer.scrollLeft = scrollLeft;
	        }
	        if (!autoHeight && scrollTop >= 0 && (scrollTop !== this._scrollingContainer.scrollTop || columnOrRowCountJustIncreasedFromZero)) {
	          this._scrollingContainer.scrollTop = scrollTop;
	        }
	      }

	      // Special case where the previous size was 0:
	      // In this case we don't show any windowed cells at all.
	      // So we should always recalculate offset afterwards.
	      var sizeJustIncreasedFromZero = (prevProps.width === 0 || prevProps.height === 0) && height > 0 && width > 0;

	      // Update scroll offsets if the current :scrollToColumn or :scrollToRow values requires it
	      // @TODO Do we also need this check or can the one in componentWillUpdate() suffice?
	      if (this._recomputeScrollLeftFlag) {
	        this._recomputeScrollLeftFlag = false;
	        this._updateScrollLeftForScrollToColumn(this.props);
	      } else {
	        updateScrollIndexHelper({
	          cellSizeAndPositionManager: instanceProps.columnSizeAndPositionManager,
	          previousCellsCount: prevProps.columnCount,
	          previousCellSize: prevProps.columnWidth,
	          previousScrollToAlignment: prevProps.scrollToAlignment,
	          previousScrollToIndex: prevProps.scrollToColumn,
	          previousSize: prevProps.width,
	          scrollOffset: scrollLeft,
	          scrollToAlignment: scrollToAlignment,
	          scrollToIndex: scrollToColumn,
	          size: width,
	          sizeJustIncreasedFromZero: sizeJustIncreasedFromZero,
	          updateScrollIndexCallback: function updateScrollIndexCallback() {
	            return _this2._updateScrollLeftForScrollToColumn(_this2.props);
	          }
	        });
	      }

	      if (this._recomputeScrollTopFlag) {
	        this._recomputeScrollTopFlag = false;
	        this._updateScrollTopForScrollToRow(this.props);
	      } else {
	        updateScrollIndexHelper({
	          cellSizeAndPositionManager: instanceProps.rowSizeAndPositionManager,
	          previousCellsCount: prevProps.rowCount,
	          previousCellSize: prevProps.rowHeight,
	          previousScrollToAlignment: prevProps.scrollToAlignment,
	          previousScrollToIndex: prevProps.scrollToRow,
	          previousSize: prevProps.height,
	          scrollOffset: scrollTop,
	          scrollToAlignment: scrollToAlignment,
	          scrollToIndex: scrollToRow,
	          size: height,
	          sizeJustIncreasedFromZero: sizeJustIncreasedFromZero,
	          updateScrollIndexCallback: function updateScrollIndexCallback() {
	            return _this2._updateScrollTopForScrollToRow(_this2.props);
	          }
	        });
	      }

	      // Update onRowsRendered callback if start/stop indices have changed
	      this._invokeOnGridRenderedHelper();

	      // Changes to :scrollLeft or :scrollTop should also notify :onScroll listeners
	      if (scrollLeft !== prevState.scrollLeft || scrollTop !== prevState.scrollTop) {
	        var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();
	        var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();

	        this._invokeOnScrollMemoizer({
	          scrollLeft: scrollLeft,
	          scrollTop: scrollTop,
	          totalColumnsWidth: totalColumnsWidth,
	          totalRowsHeight: totalRowsHeight
	        });
	      }

	      this._maybeCallOnScrollbarPresenceChange();
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      if (this._disablePointerEventsTimeoutId) {
	        cancelAnimationTimeout(this._disablePointerEventsTimeoutId);
	      }
	    }

	    /**
	     * This method updates scrollLeft/scrollTop in state for the following conditions:
	     * 1) Empty content (0 rows or columns)
	     * 2) New scroll props overriding the current state
	     * 3) Cells-count or cells-size has changed, making previous scroll offsets invalid
	     */

	  }, {
	    key: 'render',
	    value: function render() {
	      var _props6 = this.props,
	          autoContainerWidth = _props6.autoContainerWidth,
	          autoHeight = _props6.autoHeight,
	          autoWidth = _props6.autoWidth,
	          className = _props6.className,
	          containerProps = _props6.containerProps,
	          containerRole = _props6.containerRole,
	          containerStyle = _props6.containerStyle,
	          height = _props6.height,
	          id = _props6.id,
	          noContentRenderer = _props6.noContentRenderer,
	          role = _props6.role,
	          style = _props6.style,
	          tabIndex = _props6.tabIndex,
	          width = _props6.width;
	      var _state2 = this.state,
	          instanceProps = _state2.instanceProps,
	          needToResetStyleCache = _state2.needToResetStyleCache;


	      var isScrolling = this._isScrolling();

	      var gridStyle = {
	        boxSizing: 'border-box',
	        direction: 'ltr',
	        height: autoHeight ? 'auto' : height,
	        position: 'relative',
	        width: autoWidth ? 'auto' : width,
	        WebkitOverflowScrolling: 'touch',
	        willChange: 'transform'
	      };

	      if (needToResetStyleCache) {
	        this._styleCache = {};
	      }

	      // calculate _styleCache here
	      // if state.isScrolling (not from _isScrolling) then reset
	      if (!this.state.isScrolling) {
	        this._resetStyleCache();
	      }

	      // calculate children to render here
	      this._calculateChildrenToRender(this.props, this.state);

	      var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();
	      var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();

	      // Force browser to hide scrollbars when we know they aren't necessary.
	      // Otherwise once scrollbars appear they may not disappear again.
	      // For more info see issue #116
	      var verticalScrollBarSize = totalRowsHeight > height ? instanceProps.scrollbarSize : 0;
	      var horizontalScrollBarSize = totalColumnsWidth > width ? instanceProps.scrollbarSize : 0;

	      if (horizontalScrollBarSize !== this._horizontalScrollBarSize || verticalScrollBarSize !== this._verticalScrollBarSize) {
	        this._horizontalScrollBarSize = horizontalScrollBarSize;
	        this._verticalScrollBarSize = verticalScrollBarSize;
	        this._scrollbarPresenceChanged = true;
	      }

	      // Also explicitly init styles to 'auto' if scrollbars are required.
	      // This works around an obscure edge case where external CSS styles have not yet been loaded,
	      // But an initial scroll index of offset is set as an external prop.
	      // Without this style, Grid would render the correct range of cells but would NOT update its internal offset.
	      // This was originally reported via clauderic/react-infinite-calendar/issues/23
	      gridStyle.overflowX = totalColumnsWidth + verticalScrollBarSize <= width ? 'hidden' : 'auto';
	      gridStyle.overflowY = totalRowsHeight + horizontalScrollBarSize <= height ? 'hidden' : 'auto';

	      var childrenToDisplay = this._childrenToDisplay;

	      var showNoContentRenderer = childrenToDisplay.length === 0 && height > 0 && width > 0;

	      return React.createElement(
	        'div',
	        _extends$5({
	          ref: this._setScrollingContainerRef
	        }, containerProps, {
	          'aria-label': this.props['aria-label'],
	          'aria-readonly': this.props['aria-readonly'],
	          className: clsx('ReactVirtualized__Grid', className),
	          id: id,
	          onScroll: this._onScroll,
	          role: role,
	          style: _extends$5({}, gridStyle, style),
	          tabIndex: tabIndex }),
	        childrenToDisplay.length > 0 && React.createElement(
	          'div',
	          {
	            className: 'ReactVirtualized__Grid__innerScrollContainer',
	            role: containerRole,
	            style: _extends$5({
	              width: autoContainerWidth ? 'auto' : totalColumnsWidth,
	              height: totalRowsHeight,
	              maxWidth: totalColumnsWidth,
	              maxHeight: totalRowsHeight,
	              overflow: 'hidden',
	              pointerEvents: isScrolling ? 'none' : '',
	              position: 'relative'
	            }, containerStyle) },
	          childrenToDisplay
	        ),
	        showNoContentRenderer && noContentRenderer()
	      );
	    }

	    /* ---------------------------- Helper methods ---------------------------- */

	  }, {
	    key: '_calculateChildrenToRender',
	    value: function _calculateChildrenToRender() {
	      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
	      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;
	      var cellRenderer = props.cellRenderer,
	          cellRangeRenderer = props.cellRangeRenderer,
	          columnCount = props.columnCount,
	          deferredMeasurementCache = props.deferredMeasurementCache,
	          height = props.height,
	          overscanColumnCount = props.overscanColumnCount,
	          overscanIndicesGetter = props.overscanIndicesGetter,
	          overscanRowCount = props.overscanRowCount,
	          rowCount = props.rowCount,
	          width = props.width,
	          isScrollingOptOut = props.isScrollingOptOut;
	      var scrollDirectionHorizontal = state.scrollDirectionHorizontal,
	          scrollDirectionVertical = state.scrollDirectionVertical,
	          instanceProps = state.instanceProps;


	      var scrollTop = this._initialScrollTop > 0 ? this._initialScrollTop : state.scrollTop;
	      var scrollLeft = this._initialScrollLeft > 0 ? this._initialScrollLeft : state.scrollLeft;

	      var isScrolling = this._isScrolling(props, state);

	      this._childrenToDisplay = [];

	      // Render only enough columns and rows to cover the visible area of the grid.
	      if (height > 0 && width > 0) {
	        var visibleColumnIndices = instanceProps.columnSizeAndPositionManager.getVisibleCellRange({
	          containerSize: width,
	          offset: scrollLeft
	        });
	        var visibleRowIndices = instanceProps.rowSizeAndPositionManager.getVisibleCellRange({
	          containerSize: height,
	          offset: scrollTop
	        });

	        var horizontalOffsetAdjustment = instanceProps.columnSizeAndPositionManager.getOffsetAdjustment({
	          containerSize: width,
	          offset: scrollLeft
	        });
	        var verticalOffsetAdjustment = instanceProps.rowSizeAndPositionManager.getOffsetAdjustment({
	          containerSize: height,
	          offset: scrollTop
	        });

	        // Store for _invokeOnGridRenderedHelper()
	        this._renderedColumnStartIndex = visibleColumnIndices.start;
	        this._renderedColumnStopIndex = visibleColumnIndices.stop;
	        this._renderedRowStartIndex = visibleRowIndices.start;
	        this._renderedRowStopIndex = visibleRowIndices.stop;

	        var overscanColumnIndices = overscanIndicesGetter({
	          direction: 'horizontal',
	          cellCount: columnCount,
	          overscanCellsCount: overscanColumnCount,
	          scrollDirection: scrollDirectionHorizontal,
	          startIndex: typeof visibleColumnIndices.start === 'number' ? visibleColumnIndices.start : 0,
	          stopIndex: typeof visibleColumnIndices.stop === 'number' ? visibleColumnIndices.stop : -1
	        });

	        var overscanRowIndices = overscanIndicesGetter({
	          direction: 'vertical',
	          cellCount: rowCount,
	          overscanCellsCount: overscanRowCount,
	          scrollDirection: scrollDirectionVertical,
	          startIndex: typeof visibleRowIndices.start === 'number' ? visibleRowIndices.start : 0,
	          stopIndex: typeof visibleRowIndices.stop === 'number' ? visibleRowIndices.stop : -1
	        });

	        // Store for _invokeOnGridRenderedHelper()
	        var columnStartIndex = overscanColumnIndices.overscanStartIndex;
	        var columnStopIndex = overscanColumnIndices.overscanStopIndex;
	        var rowStartIndex = overscanRowIndices.overscanStartIndex;
	        var rowStopIndex = overscanRowIndices.overscanStopIndex;

	        // Advanced use-cases (eg CellMeasurer) require batched measurements to determine accurate sizes.
	        if (deferredMeasurementCache) {
	          // If rows have a dynamic height, scan the rows we are about to render.
	          // If any have not yet been measured, then we need to render all columns initially,
	          // Because the height of the row is equal to the tallest cell within that row,
	          // (And so we can't know the height without measuring all column-cells first).
	          if (!deferredMeasurementCache.hasFixedHeight()) {
	            for (var rowIndex = rowStartIndex; rowIndex <= rowStopIndex; rowIndex++) {
	              if (!deferredMeasurementCache.has(rowIndex, 0)) {
	                columnStartIndex = 0;
	                columnStopIndex = columnCount - 1;
	                break;
	              }
	            }
	          }

	          // If columns have a dynamic width, scan the columns we are about to render.
	          // If any have not yet been measured, then we need to render all rows initially,
	          // Because the width of the column is equal to the widest cell within that column,
	          // (And so we can't know the width without measuring all row-cells first).
	          if (!deferredMeasurementCache.hasFixedWidth()) {
	            for (var columnIndex = columnStartIndex; columnIndex <= columnStopIndex; columnIndex++) {
	              if (!deferredMeasurementCache.has(0, columnIndex)) {
	                rowStartIndex = 0;
	                rowStopIndex = rowCount - 1;
	                break;
	              }
	            }
	          }
	        }

	        this._childrenToDisplay = cellRangeRenderer({
	          cellCache: this._cellCache,
	          cellRenderer: cellRenderer,
	          columnSizeAndPositionManager: instanceProps.columnSizeAndPositionManager,
	          columnStartIndex: columnStartIndex,
	          columnStopIndex: columnStopIndex,
	          deferredMeasurementCache: deferredMeasurementCache,
	          horizontalOffsetAdjustment: horizontalOffsetAdjustment,
	          isScrolling: isScrolling,
	          isScrollingOptOut: isScrollingOptOut,
	          parent: this,
	          rowSizeAndPositionManager: instanceProps.rowSizeAndPositionManager,
	          rowStartIndex: rowStartIndex,
	          rowStopIndex: rowStopIndex,
	          scrollLeft: scrollLeft,
	          scrollTop: scrollTop,
	          styleCache: this._styleCache,
	          verticalOffsetAdjustment: verticalOffsetAdjustment,
	          visibleColumnIndices: visibleColumnIndices,
	          visibleRowIndices: visibleRowIndices
	        });

	        // update the indices
	        this._columnStartIndex = columnStartIndex;
	        this._columnStopIndex = columnStopIndex;
	        this._rowStartIndex = rowStartIndex;
	        this._rowStopIndex = rowStopIndex;
	      }
	    }

	    /**
	     * Sets an :isScrolling flag for a small window of time.
	     * This flag is used to disable pointer events on the scrollable portion of the Grid.
	     * This prevents jerky/stuttery mouse-wheel scrolling.
	     */

	  }, {
	    key: '_debounceScrollEnded',
	    value: function _debounceScrollEnded() {
	      var scrollingResetTimeInterval = this.props.scrollingResetTimeInterval;


	      if (this._disablePointerEventsTimeoutId) {
	        cancelAnimationTimeout(this._disablePointerEventsTimeoutId);
	      }

	      this._disablePointerEventsTimeoutId = requestAnimationTimeout(this._debounceScrollEndedCallback, scrollingResetTimeInterval);
	    }
	  }, {
	    key: '_handleInvalidatedGridSize',


	    /**
	     * Check for batched CellMeasurer size invalidations.
	     * This will occur the first time one or more previously unmeasured cells are rendered.
	     */
	    value: function _handleInvalidatedGridSize() {
	      if (typeof this._deferredInvalidateColumnIndex === 'number' && typeof this._deferredInvalidateRowIndex === 'number') {
	        var columnIndex = this._deferredInvalidateColumnIndex;
	        var rowIndex = this._deferredInvalidateRowIndex;

	        this._deferredInvalidateColumnIndex = null;
	        this._deferredInvalidateRowIndex = null;

	        this.recomputeGridSize({ columnIndex: columnIndex, rowIndex: rowIndex });
	      }
	    }
	  }, {
	    key: '_invokeOnScrollMemoizer',
	    value: function _invokeOnScrollMemoizer(_ref6) {
	      var _this3 = this;

	      var scrollLeft = _ref6.scrollLeft,
	          scrollTop = _ref6.scrollTop,
	          totalColumnsWidth = _ref6.totalColumnsWidth,
	          totalRowsHeight = _ref6.totalRowsHeight;

	      this._onScrollMemoizer({
	        callback: function callback(_ref7) {
	          var scrollLeft = _ref7.scrollLeft,
	              scrollTop = _ref7.scrollTop;
	          var _props7 = _this3.props,
	              height = _props7.height,
	              onScroll = _props7.onScroll,
	              width = _props7.width;


	          onScroll({
	            clientHeight: height,
	            clientWidth: width,
	            scrollHeight: totalRowsHeight,
	            scrollLeft: scrollLeft,
	            scrollTop: scrollTop,
	            scrollWidth: totalColumnsWidth
	          });
	        },
	        indices: {
	          scrollLeft: scrollLeft,
	          scrollTop: scrollTop
	        }
	      });
	    }
	  }, {
	    key: '_isScrolling',
	    value: function _isScrolling() {
	      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
	      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;

	      // If isScrolling is defined in props, use it to override the value in state
	      // This is a performance optimization for WindowScroller + Grid
	      return Object.hasOwnProperty.call(props, 'isScrolling') ? Boolean(props.isScrolling) : Boolean(state.isScrolling);
	    }
	  }, {
	    key: '_maybeCallOnScrollbarPresenceChange',
	    value: function _maybeCallOnScrollbarPresenceChange() {
	      if (this._scrollbarPresenceChanged) {
	        var _onScrollbarPresenceChange = this.props.onScrollbarPresenceChange;


	        this._scrollbarPresenceChanged = false;

	        _onScrollbarPresenceChange({
	          horizontal: this._horizontalScrollBarSize > 0,
	          size: this.state.instanceProps.scrollbarSize,
	          vertical: this._verticalScrollBarSize > 0
	        });
	      }
	    }
	  }, {
	    key: 'scrollToPosition',


	    /**
	     * Scroll to the specified offset(s).
	     * Useful for animating position changes.
	     */
	    value: function scrollToPosition(_ref8) {
	      var scrollLeft = _ref8.scrollLeft,
	          scrollTop = _ref8.scrollTop;

	      var stateUpdate = Grid._getScrollToPositionStateUpdate({
	        prevState: this.state,
	        scrollLeft: scrollLeft,
	        scrollTop: scrollTop
	      });

	      if (stateUpdate) {
	        stateUpdate.needToResetStyleCache = false;
	        this.setState(stateUpdate);
	      }
	    }
	  }, {
	    key: '_getCalculatedScrollLeft',
	    value: function _getCalculatedScrollLeft() {
	      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
	      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;

	      return Grid._getCalculatedScrollLeft(props, state);
	    }
	  }, {
	    key: '_updateScrollLeftForScrollToColumn',
	    value: function _updateScrollLeftForScrollToColumn() {
	      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
	      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;

	      var stateUpdate = Grid._getScrollLeftForScrollToColumnStateUpdate(props, state);
	      if (stateUpdate) {
	        stateUpdate.needToResetStyleCache = false;
	        this.setState(stateUpdate);
	      }
	    }
	  }, {
	    key: '_getCalculatedScrollTop',
	    value: function _getCalculatedScrollTop() {
	      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
	      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;

	      return Grid._getCalculatedScrollTop(props, state);
	    }
	  }, {
	    key: '_resetStyleCache',
	    value: function _resetStyleCache() {
	      var styleCache = this._styleCache;
	      var cellCache = this._cellCache;
	      var isScrollingOptOut = this.props.isScrollingOptOut;

	      // Reset cell and style caches once scrolling stops.
	      // This makes Grid simpler to use (since cells commonly change).
	      // And it keeps the caches from growing too large.
	      // Performance is most sensitive when a user is scrolling.
	      // Don't clear visible cells from cellCache if isScrollingOptOut is specified.
	      // This keeps the cellCache to a resonable size.

	      this._cellCache = {};
	      this._styleCache = {};

	      // Copy over the visible cell styles so avoid unnecessary re-render.
	      for (var rowIndex = this._rowStartIndex; rowIndex <= this._rowStopIndex; rowIndex++) {
	        for (var columnIndex = this._columnStartIndex; columnIndex <= this._columnStopIndex; columnIndex++) {
	          var key = rowIndex + '-' + columnIndex;
	          this._styleCache[key] = styleCache[key];

	          if (isScrollingOptOut) {
	            this._cellCache[key] = cellCache[key];
	          }
	        }
	      }
	    }
	  }, {
	    key: '_updateScrollTopForScrollToRow',
	    value: function _updateScrollTopForScrollToRow() {
	      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;
	      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;

	      var stateUpdate = Grid._getScrollTopForScrollToRowStateUpdate(props, state);
	      if (stateUpdate) {
	        stateUpdate.needToResetStyleCache = false;
	        this.setState(stateUpdate);
	      }
	    }
	  }], [{
	    key: 'getDerivedStateFromProps',
	    value: function getDerivedStateFromProps(nextProps, prevState) {
	      var newState = {};

	      if (nextProps.columnCount === 0 && prevState.scrollLeft !== 0 || nextProps.rowCount === 0 && prevState.scrollTop !== 0) {
	        newState.scrollLeft = 0;
	        newState.scrollTop = 0;

	        // only use scroll{Left,Top} from props if scrollTo{Column,Row} isn't specified
	        // scrollTo{Column,Row} should override scroll{Left,Top}
	      } else if (nextProps.scrollLeft !== prevState.scrollLeft && nextProps.scrollToColumn < 0 || nextProps.scrollTop !== prevState.scrollTop && nextProps.scrollToRow < 0) {
	        _Object$assign(newState, Grid._getScrollToPositionStateUpdate({
	          prevState: prevState,
	          scrollLeft: nextProps.scrollLeft,
	          scrollTop: nextProps.scrollTop
	        }));
	      }

	      var instanceProps = prevState.instanceProps;

	      // Initially we should not clearStyleCache

	      newState.needToResetStyleCache = false;
	      if (nextProps.columnWidth !== instanceProps.prevColumnWidth || nextProps.rowHeight !== instanceProps.prevRowHeight) {
	        // Reset cache. set it to {} in render
	        newState.needToResetStyleCache = true;
	      }

	      instanceProps.columnSizeAndPositionManager.configure({
	        cellCount: nextProps.columnCount,
	        estimatedCellSize: Grid._getEstimatedColumnSize(nextProps),
	        cellSizeGetter: Grid._wrapSizeGetter(nextProps.columnWidth)
	      });

	      instanceProps.rowSizeAndPositionManager.configure({
	        cellCount: nextProps.rowCount,
	        estimatedCellSize: Grid._getEstimatedRowSize(nextProps),
	        cellSizeGetter: Grid._wrapSizeGetter(nextProps.rowHeight)
	      });

	      if (instanceProps.prevColumnCount === 0 || instanceProps.prevRowCount === 0) {
	        instanceProps.prevColumnCount = 0;
	        instanceProps.prevRowCount = 0;
	      }

	      // If scrolling is controlled outside this component, clear cache when scrolling stops
	      if (nextProps.autoHeight && nextProps.isScrolling === false && instanceProps.prevIsScrolling === true) {
	        _Object$assign(newState, {
	          isScrolling: false
	        });
	      }

	      var maybeStateA = void 0;
	      var maybeStateB = void 0;

	      calculateSizeAndPositionDataAndUpdateScrollOffset({
	        cellCount: instanceProps.prevColumnCount,
	        cellSize: typeof instanceProps.prevColumnWidth === 'number' ? instanceProps.prevColumnWidth : null,
	        computeMetadataCallback: function computeMetadataCallback() {
	          return instanceProps.columnSizeAndPositionManager.resetCell(0);
	        },
	        computeMetadataCallbackProps: nextProps,
	        nextCellsCount: nextProps.columnCount,
	        nextCellSize: typeof nextProps.columnWidth === 'number' ? nextProps.columnWidth : null,
	        nextScrollToIndex: nextProps.scrollToColumn,
	        scrollToIndex: instanceProps.prevScrollToColumn,
	        updateScrollOffsetForScrollToIndex: function updateScrollOffsetForScrollToIndex() {
	          maybeStateA = Grid._getScrollLeftForScrollToColumnStateUpdate(nextProps, prevState);
	        }
	      });
	      calculateSizeAndPositionDataAndUpdateScrollOffset({
	        cellCount: instanceProps.prevRowCount,
	        cellSize: typeof instanceProps.prevRowHeight === 'number' ? instanceProps.prevRowHeight : null,
	        computeMetadataCallback: function computeMetadataCallback() {
	          return instanceProps.rowSizeAndPositionManager.resetCell(0);
	        },
	        computeMetadataCallbackProps: nextProps,
	        nextCellsCount: nextProps.rowCount,
	        nextCellSize: typeof nextProps.rowHeight === 'number' ? nextProps.rowHeight : null,
	        nextScrollToIndex: nextProps.scrollToRow,
	        scrollToIndex: instanceProps.prevScrollToRow,
	        updateScrollOffsetForScrollToIndex: function updateScrollOffsetForScrollToIndex() {
	          maybeStateB = Grid._getScrollTopForScrollToRowStateUpdate(nextProps, prevState);
	        }
	      });

	      instanceProps.prevColumnCount = nextProps.columnCount;
	      instanceProps.prevColumnWidth = nextProps.columnWidth;
	      instanceProps.prevIsScrolling = nextProps.isScrolling === true;
	      instanceProps.prevRowCount = nextProps.rowCount;
	      instanceProps.prevRowHeight = nextProps.rowHeight;
	      instanceProps.prevScrollToColumn = nextProps.scrollToColumn;
	      instanceProps.prevScrollToRow = nextProps.scrollToRow;

	      // getting scrollBarSize (moved from componentWillMount)
	      instanceProps.scrollbarSize = nextProps.getScrollbarSize();
	      if (instanceProps.scrollbarSize === undefined) {
	        instanceProps.scrollbarSizeMeasured = false;
	        instanceProps.scrollbarSize = 0;
	      } else {
	        instanceProps.scrollbarSizeMeasured = true;
	      }

	      newState.instanceProps = instanceProps;

	      return _extends$5({}, newState, maybeStateA, maybeStateB);
	    }
	  }, {
	    key: '_getEstimatedColumnSize',
	    value: function _getEstimatedColumnSize(props) {
	      return typeof props.columnWidth === 'number' ? props.columnWidth : props.estimatedColumnSize;
	    }
	  }, {
	    key: '_getEstimatedRowSize',
	    value: function _getEstimatedRowSize(props) {
	      return typeof props.rowHeight === 'number' ? props.rowHeight : props.estimatedRowSize;
	    }
	  }, {
	    key: '_getScrollToPositionStateUpdate',


	    /**
	     * Get the updated state after scrolling to
	     * scrollLeft and scrollTop
	     */
	    value: function _getScrollToPositionStateUpdate(_ref9) {
	      var prevState = _ref9.prevState,
	          scrollLeft = _ref9.scrollLeft,
	          scrollTop = _ref9.scrollTop;

	      var newState = {
	        scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.REQUESTED
	      };

	      if (typeof scrollLeft === 'number' && scrollLeft >= 0) {
	        newState.scrollDirectionHorizontal = scrollLeft > prevState.scrollLeft ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD;
	        newState.scrollLeft = scrollLeft;
	      }

	      if (typeof scrollTop === 'number' && scrollTop >= 0) {
	        newState.scrollDirectionVertical = scrollTop > prevState.scrollTop ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD;
	        newState.scrollTop = scrollTop;
	      }

	      if (typeof scrollLeft === 'number' && scrollLeft >= 0 && scrollLeft !== prevState.scrollLeft || typeof scrollTop === 'number' && scrollTop >= 0 && scrollTop !== prevState.scrollTop) {
	        return newState;
	      }
	      return null;
	    }
	  }, {
	    key: '_wrapSizeGetter',
	    value: function _wrapSizeGetter(value) {
	      return typeof value === 'function' ? value : function () {
	        return value;
	      };
	    }
	  }, {
	    key: '_getCalculatedScrollLeft',
	    value: function _getCalculatedScrollLeft(nextProps, prevState) {
	      var columnCount = nextProps.columnCount,
	          height = nextProps.height,
	          scrollToAlignment = nextProps.scrollToAlignment,
	          scrollToColumn = nextProps.scrollToColumn,
	          width = nextProps.width;
	      var scrollLeft = prevState.scrollLeft,
	          instanceProps = prevState.instanceProps;


	      if (columnCount > 0) {
	        var finalColumn = columnCount - 1;
	        var targetIndex = scrollToColumn < 0 ? finalColumn : Math.min(finalColumn, scrollToColumn);
	        var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();
	        var scrollBarSize = instanceProps.scrollbarSizeMeasured && totalRowsHeight > height ? instanceProps.scrollbarSize : 0;

	        return instanceProps.columnSizeAndPositionManager.getUpdatedOffsetForIndex({
	          align: scrollToAlignment,
	          containerSize: width - scrollBarSize,
	          currentOffset: scrollLeft,
	          targetIndex: targetIndex
	        });
	      }
	      return 0;
	    }
	  }, {
	    key: '_getScrollLeftForScrollToColumnStateUpdate',
	    value: function _getScrollLeftForScrollToColumnStateUpdate(nextProps, prevState) {
	      var scrollLeft = prevState.scrollLeft;

	      var calculatedScrollLeft = Grid._getCalculatedScrollLeft(nextProps, prevState);

	      if (typeof calculatedScrollLeft === 'number' && calculatedScrollLeft >= 0 && scrollLeft !== calculatedScrollLeft) {
	        return Grid._getScrollToPositionStateUpdate({
	          prevState: prevState,
	          scrollLeft: calculatedScrollLeft,
	          scrollTop: -1
	        });
	      }
	      return null;
	    }
	  }, {
	    key: '_getCalculatedScrollTop',
	    value: function _getCalculatedScrollTop(nextProps, prevState) {
	      var height = nextProps.height,
	          rowCount = nextProps.rowCount,
	          scrollToAlignment = nextProps.scrollToAlignment,
	          scrollToRow = nextProps.scrollToRow,
	          width = nextProps.width;
	      var scrollTop = prevState.scrollTop,
	          instanceProps = prevState.instanceProps;


	      if (rowCount > 0) {
	        var finalRow = rowCount - 1;
	        var targetIndex = scrollToRow < 0 ? finalRow : Math.min(finalRow, scrollToRow);
	        var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();
	        var scrollBarSize = instanceProps.scrollbarSizeMeasured && totalColumnsWidth > width ? instanceProps.scrollbarSize : 0;

	        return instanceProps.rowSizeAndPositionManager.getUpdatedOffsetForIndex({
	          align: scrollToAlignment,
	          containerSize: height - scrollBarSize,
	          currentOffset: scrollTop,
	          targetIndex: targetIndex
	        });
	      }
	      return 0;
	    }
	  }, {
	    key: '_getScrollTopForScrollToRowStateUpdate',
	    value: function _getScrollTopForScrollToRowStateUpdate(nextProps, prevState) {
	      var scrollTop = prevState.scrollTop;

	      var calculatedScrollTop = Grid._getCalculatedScrollTop(nextProps, prevState);

	      if (typeof calculatedScrollTop === 'number' && calculatedScrollTop >= 0 && scrollTop !== calculatedScrollTop) {
	        return Grid._getScrollToPositionStateUpdate({
	          prevState: prevState,
	          scrollLeft: -1,
	          scrollTop: calculatedScrollTop
	        });
	      }
	      return null;
	    }
	  }]);

	  return Grid;
	}(React.PureComponent);

	Grid$1.defaultProps = {
	  'aria-label': 'grid',
	  'aria-readonly': true,
	  autoContainerWidth: false,
	  autoHeight: false,
	  autoWidth: false,
	  cellRangeRenderer: defaultCellRangeRenderer,
	  containerRole: 'rowgroup',
	  containerStyle: {},
	  estimatedColumnSize: 100,
	  estimatedRowSize: 30,
	  getScrollbarSize: scrollbarSize,
	  noContentRenderer: renderNull,
	  onScroll: function onScroll() {},
	  onScrollbarPresenceChange: function onScrollbarPresenceChange() {},
	  onSectionRendered: function onSectionRendered() {},
	  overscanColumnCount: 0,
	  overscanIndicesGetter: defaultOverscanIndicesGetter,
	  overscanRowCount: 10,
	  role: 'grid',
	  scrollingResetTimeInterval: DEFAULT_SCROLLING_RESET_TIME_INTERVAL,
	  scrollToAlignment: 'auto',
	  scrollToColumn: -1,
	  scrollToRow: -1,
	  style: {},
	  tabIndex: 0,
	  isScrollingOptOut: false
	};
	Grid$1.propTypes = process.env.NODE_ENV === 'production' ? null : {
	  "aria-label": propTypes.string.isRequired,
	  "aria-readonly": propTypes.bool,


	  /**
	   * Set the width of the inner scrollable container to 'auto'.
	   * This is useful for single-column Grids to ensure that the column doesn't extend below a vertical scrollbar.
	   */
	  autoContainerWidth: propTypes.bool.isRequired,


	  /**
	   * Removes fixed height from the scrollingContainer so that the total height of rows can stretch the window.
	   * Intended for use with WindowScroller
	   */
	  autoHeight: propTypes.bool.isRequired,


	  /**
	   * Removes fixed width from the scrollingContainer so that the total width of rows can stretch the window.
	   * Intended for use with WindowScroller
	   */
	  autoWidth: propTypes.bool.isRequired,


	  /** Responsible for rendering a cell given an row and column index.  */
	  cellRenderer: function cellRenderer() {
	    return (typeof bpfrpt_proptype_CellRenderer === 'function' ? bpfrpt_proptype_CellRenderer.isRequired ? bpfrpt_proptype_CellRenderer.isRequired : bpfrpt_proptype_CellRenderer : propTypes.shape(bpfrpt_proptype_CellRenderer).isRequired).apply(this, arguments);
	  },


	  /** Responsible for rendering a group of cells given their index ranges.  */
	  cellRangeRenderer: function cellRangeRenderer() {
	    return (typeof bpfrpt_proptype_CellRangeRenderer === 'function' ? bpfrpt_proptype_CellRangeRenderer.isRequired ? bpfrpt_proptype_CellRangeRenderer.isRequired : bpfrpt_proptype_CellRangeRenderer : propTypes.shape(bpfrpt_proptype_CellRangeRenderer).isRequired).apply(this, arguments);
	  },


	  /** Optional custom CSS class name to attach to root Grid element.  */
	  className: propTypes.string,


	  /** Number of columns in grid.  */
	  columnCount: propTypes.number.isRequired,


	  /** Either a fixed column width (number) or a function that returns the width of a column given its index.  */
	  columnWidth: function columnWidth() {
	    return (typeof bpfrpt_proptype_CellSize === 'function' ? bpfrpt_proptype_CellSize.isRequired ? bpfrpt_proptype_CellSize.isRequired : bpfrpt_proptype_CellSize : propTypes.shape(bpfrpt_proptype_CellSize).isRequired).apply(this, arguments);
	  },


	  /** Unfiltered props for the Grid container. */
	  containerProps: propTypes.object,


	  /** ARIA role for the cell-container.  */
	  containerRole: propTypes.string.isRequired,


	  /** Optional inline style applied to inner cell-container */
	  containerStyle: propTypes.object.isRequired,


	  /**
	   * If CellMeasurer is used to measure this Grid's children, this should be a pointer to its CellMeasurerCache.
	   * A shared CellMeasurerCache reference enables Grid and CellMeasurer to share measurement data.
	   */
	  deferredMeasurementCache: propTypes.object,


	  /**
	   * Used to estimate the total width of a Grid before all of its columns have actually been measured.
	   * The estimated total width is adjusted as columns are rendered.
	   */
	  estimatedColumnSize: propTypes.number.isRequired,


	  /**
	   * Used to estimate the total height of a Grid before all of its rows have actually been measured.
	   * The estimated total height is adjusted as rows are rendered.
	   */
	  estimatedRowSize: propTypes.number.isRequired,


	  /** Exposed for testing purposes only.  */
	  getScrollbarSize: propTypes.func.isRequired,


	  /** Height of Grid; this property determines the number of visible (vs virtualized) rows.  */
	  height: propTypes.number.isRequired,


	  /** Optional custom id to attach to root Grid element.  */
	  id: propTypes.string,


	  /**
	   * Override internal is-scrolling state tracking.
	   * This property is primarily intended for use with the WindowScroller component.
	   */
	  isScrolling: propTypes.bool,


	  /**
	   * Opt-out of isScrolling param passed to cellRangeRenderer.
	   * To avoid the extra render when scroll stops.
	   */
	  isScrollingOptOut: propTypes.bool.isRequired,


	  /** Optional renderer to be used in place of rows when either :rowCount or :columnCount is 0.  */
	  noContentRenderer: function noContentRenderer() {
	    return (typeof bpfrpt_proptype_NoContentRenderer === 'function' ? bpfrpt_proptype_NoContentRenderer.isRequired ? bpfrpt_proptype_NoContentRenderer.isRequired : bpfrpt_proptype_NoContentRenderer : propTypes.shape(bpfrpt_proptype_NoContentRenderer).isRequired).apply(this, arguments);
	  },


	  /**
	   * Callback invoked whenever the scroll offset changes within the inner scrollable region.
	   * This callback can be used to sync scrolling between lists, tables, or grids.
	   */
	  onScroll: propTypes.func.isRequired,


	  /**
	   * Called whenever a horizontal or vertical scrollbar is added or removed.
	   * This prop is not intended for end-user use;
	   * It is used by MultiGrid to support fixed-row/fixed-column scroll syncing.
	   */
	  onScrollbarPresenceChange: propTypes.func.isRequired,


	  /** Callback invoked with information about the section of the Grid that was just rendered.  */
	  onSectionRendered: propTypes.func.isRequired,


	  /**
	   * Number of columns to render before/after the visible section of the grid.
	   * These columns can help for smoother scrolling on touch devices or browsers that send scroll events infrequently.
	   */
	  overscanColumnCount: propTypes.number.isRequired,


	  /**
	   * Calculates the number of cells to overscan before and after a specified range.
	   * This function ensures that overscanning doesn't exceed the available cells.
	   */
	  overscanIndicesGetter: function overscanIndicesGetter() {
	    return (typeof bpfrpt_proptype_OverscanIndicesGetter === 'function' ? bpfrpt_proptype_OverscanIndicesGetter.isRequired ? bpfrpt_proptype_OverscanIndicesGetter.isRequired : bpfrpt_proptype_OverscanIndicesGetter : propTypes.shape(bpfrpt_proptype_OverscanIndicesGetter).isRequired).apply(this, arguments);
	  },


	  /**
	   * Number of rows to render above/below the visible section of the grid.
	   * These rows can help for smoother scrolling on touch devices or browsers that send scroll events infrequently.
	   */
	  overscanRowCount: propTypes.number.isRequired,


	  /** ARIA role for the grid element.  */
	  role: propTypes.string.isRequired,


	  /**
	   * Either a fixed row height (number) or a function that returns the height of a row given its index.
	   * Should implement the following interface: ({ index: number }): number
	   */
	  rowHeight: function rowHeight() {
	    return (typeof bpfrpt_proptype_CellSize === 'function' ? bpfrpt_proptype_CellSize.isRequired ? bpfrpt_proptype_CellSize.isRequired : bpfrpt_proptype_CellSize : propTypes.shape(bpfrpt_proptype_CellSize).isRequired).apply(this, arguments);
	  },


	  /** Number of rows in grid.  */
	  rowCount: propTypes.number.isRequired,


	  /** Wait this amount of time after the last scroll event before resetting Grid `pointer-events`. */
	  scrollingResetTimeInterval: propTypes.number.isRequired,


	  /** Horizontal offset. */
	  scrollLeft: propTypes.number,


	  /**
	   * Controls scroll-to-cell behavior of the Grid.
	   * The default ("auto") scrolls the least amount possible to ensure that the specified cell is fully visible.
	   * Use "start" to align cells to the top/left of the Grid and "end" to align bottom/right.
	   */
	  scrollToAlignment: function scrollToAlignment() {
	    return (typeof bpfrpt_proptype_Alignment === 'function' ? bpfrpt_proptype_Alignment.isRequired ? bpfrpt_proptype_Alignment.isRequired : bpfrpt_proptype_Alignment : propTypes.shape(bpfrpt_proptype_Alignment).isRequired).apply(this, arguments);
	  },


	  /** Column index to ensure visible (by forcefully scrolling if necessary) */
	  scrollToColumn: propTypes.number.isRequired,


	  /** Vertical offset. */
	  scrollTop: propTypes.number,


	  /** Row index to ensure visible (by forcefully scrolling if necessary) */
	  scrollToRow: propTypes.number.isRequired,


	  /** Optional inline style */
	  style: propTypes.object.isRequired,


	  /** Tab index for focus */
	  tabIndex: propTypes.number,


	  /** Width of Grid; this property determines the number of visible (vs virtualized) columns.  */
	  width: propTypes.number.isRequired
	};


	polyfill$1(Grid$1);

	var SCROLL_DIRECTION_FORWARD$1 = 1;

	/**
	 * Calculates the number of cells to overscan before and after a specified range.
	 * This function ensures that overscanning doesn't exceed the available cells.
	 */

	function defaultOverscanIndicesGetter$1(_ref) {
	  var cellCount = _ref.cellCount,
	      overscanCellsCount = _ref.overscanCellsCount,
	      scrollDirection = _ref.scrollDirection,
	      startIndex = _ref.startIndex,
	      stopIndex = _ref.stopIndex;

	  // Make sure we render at least 1 cell extra before and after (except near boundaries)
	  // This is necessary in order to support keyboard navigation (TAB/SHIFT+TAB) in some cases
	  // For more info see issues #625
	  overscanCellsCount = Math.max(1, overscanCellsCount);

	  if (scrollDirection === SCROLL_DIRECTION_FORWARD$1) {
	    return {
	      overscanStartIndex: Math.max(0, startIndex - 1),
	      overscanStopIndex: Math.min(cellCount - 1, stopIndex + overscanCellsCount)
	    };
	  } else {
	    return {
	      overscanStartIndex: Math.max(0, startIndex - overscanCellsCount),
	      overscanStopIndex: Math.min(cellCount - 1, stopIndex + 1)
	    };
	  }
	}

	var bpfrpt_proptype_ScrollIndices = process.env.NODE_ENV === 'production' ? null : {
	  scrollToColumn: propTypes.number.isRequired,
	  scrollToRow: propTypes.number.isRequired
	};

	/**
	 * This HOC decorates a virtualized component and responds to arrow-key events by scrolling one row or column at a time.
	 */

	var ArrowKeyStepper = function (_React$PureComponent) {
	  _inherits$3(ArrowKeyStepper, _React$PureComponent);

	  function ArrowKeyStepper() {
	    var _ref;

	    var _temp, _this, _ret;

	    _classCallCheck$8(this, ArrowKeyStepper);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn$3(this, (_ref = ArrowKeyStepper.__proto__ || _Object$getPrototypeOf(ArrowKeyStepper)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      scrollToColumn: 0,
	      scrollToRow: 0
	    }, _this._columnStartIndex = 0, _this._columnStopIndex = 0, _this._rowStartIndex = 0, _this._rowStopIndex = 0, _this._onKeyDown = function (event) {
	      var _this$props = _this.props,
	          columnCount = _this$props.columnCount,
	          disabled = _this$props.disabled,
	          mode = _this$props.mode,
	          rowCount = _this$props.rowCount;


	      if (disabled) {
	        return;
	      }

	      var _this$_getScrollState = _this._getScrollState(),
	          scrollToColumnPrevious = _this$_getScrollState.scrollToColumn,
	          scrollToRowPrevious = _this$_getScrollState.scrollToRow;

	      var _this$_getScrollState2 = _this._getScrollState(),
	          scrollToColumn = _this$_getScrollState2.scrollToColumn,
	          scrollToRow = _this$_getScrollState2.scrollToRow;

	      // The above cases all prevent default event event behavior.
	      // This is to keep the grid from scrolling after the snap-to update.


	      switch (event.key) {
	        case 'ArrowDown':
	          scrollToRow = mode === 'cells' ? Math.min(scrollToRow + 1, rowCount - 1) : Math.min(_this._rowStopIndex + 1, rowCount - 1);
	          break;
	        case 'ArrowLeft':
	          scrollToColumn = mode === 'cells' ? Math.max(scrollToColumn - 1, 0) : Math.max(_this._columnStartIndex - 1, 0);
	          break;
	        case 'ArrowRight':
	          scrollToColumn = mode === 'cells' ? Math.min(scrollToColumn + 1, columnCount - 1) : Math.min(_this._columnStopIndex + 1, columnCount - 1);
	          break;
	        case 'ArrowUp':
	          scrollToRow = mode === 'cells' ? Math.max(scrollToRow - 1, 0) : Math.max(_this._rowStartIndex - 1, 0);
	          break;
	      }

	      if (scrollToColumn !== scrollToColumnPrevious || scrollToRow !== scrollToRowPrevious) {
	        event.preventDefault();

	        _this._updateScrollState({ scrollToColumn: scrollToColumn, scrollToRow: scrollToRow });
	      }
	    }, _this._onSectionRendered = function (_ref2) {
	      var columnStartIndex = _ref2.columnStartIndex,
	          columnStopIndex = _ref2.columnStopIndex,
	          rowStartIndex = _ref2.rowStartIndex,
	          rowStopIndex = _ref2.rowStopIndex;

	      _this._columnStartIndex = columnStartIndex;
	      _this._columnStopIndex = columnStopIndex;
	      _this._rowStartIndex = rowStartIndex;
	      _this._rowStopIndex = rowStopIndex;
	    }, _temp), _possibleConstructorReturn$3(_this, _ret);
	  }

	  _createClass$7(ArrowKeyStepper, [{
	    key: 'setScrollIndexes',
	    value: function setScrollIndexes(_ref3) {
	      var scrollToColumn = _ref3.scrollToColumn,
	          scrollToRow = _ref3.scrollToRow;

	      this.setState({
	        scrollToRow: scrollToRow,
	        scrollToColumn: scrollToColumn
	      });
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          className = _props.className,
	          children = _props.children;

	      var _getScrollState2 = this._getScrollState(),
	          scrollToColumn = _getScrollState2.scrollToColumn,
	          scrollToRow = _getScrollState2.scrollToRow;

	      return React.createElement(
	        'div',
	        { className: className, onKeyDown: this._onKeyDown },
	        children({
	          onSectionRendered: this._onSectionRendered,
	          scrollToColumn: scrollToColumn,
	          scrollToRow: scrollToRow
	        })
	      );
	    }
	  }, {
	    key: '_getScrollState',
	    value: function _getScrollState() {
	      return this.props.isControlled ? this.props : this.state;
	    }
	  }, {
	    key: '_updateScrollState',
	    value: function _updateScrollState(_ref4) {
	      var scrollToColumn = _ref4.scrollToColumn,
	          scrollToRow = _ref4.scrollToRow;
	      var _props2 = this.props,
	          isControlled = _props2.isControlled,
	          onScrollToChange = _props2.onScrollToChange;


	      if (typeof onScrollToChange === 'function') {
	        onScrollToChange({ scrollToColumn: scrollToColumn, scrollToRow: scrollToRow });
	      }

	      if (!isControlled) {
	        this.setState({ scrollToColumn: scrollToColumn, scrollToRow: scrollToRow });
	      }
	    }
	  }], [{
	    key: 'getDerivedStateFromProps',
	    value: function getDerivedStateFromProps(nextProps, prevState) {
	      if (nextProps.isControlled) {
	        return null;
	      }

	      if (nextProps.scrollToColumn !== prevState.scrollToColumn || nextProps.scrollToRow !== prevState.scrollToRow) {
	        return {
	          scrollToColumn: nextProps.scrollToColumn,
	          scrollToRow: nextProps.scrollToRow
	        };
	      }

	      return null;
	    }
	  }]);

	  return ArrowKeyStepper;
	}(React.PureComponent);

	ArrowKeyStepper.defaultProps = {
	  disabled: false,
	  isControlled: false,
	  mode: 'edges',
	  scrollToColumn: 0,
	  scrollToRow: 0
	};
	ArrowKeyStepper.propTypes = process.env.NODE_ENV === 'production' ? null : {
	  children: propTypes.func.isRequired,
	  className: propTypes.string,
	  columnCount: propTypes.number.isRequired,
	  disabled: propTypes.bool.isRequired,
	  isControlled: propTypes.bool.isRequired,
	  mode: propTypes.oneOf(['cells', 'edges']).isRequired,
	  onScrollToChange: propTypes.func,
	  rowCount: propTypes.number.isRequired,
	  scrollToColumn: propTypes.number.isRequired,
	  scrollToRow: propTypes.number.isRequired
	};


	polyfill$1(ArrowKeyStepper);

	/**
	 * Detect Element Resize.
	 * https://github.com/sdecima/javascript-detect-element-resize
	 * Sebastian Decima
	 *
	 * Forked from version 0.5.3; includes the following modifications:
	 * 1) Guard against unsafe 'window' and 'document' references (to support SSR).
	 * 2) Defer initialization code via a top-level function wrapper (to support SSR).
	 * 3) Avoid unnecessary reflows by not measuring size for scroll events bubbling from children.
	 * 4) Add nonce for style element.
	 * 5) Added support for injecting custom window object
	 **/

	function createDetectElementResize(nonce, hostWindow) {
	  // Check `document` and `window` in case of server-side rendering
	  var _window;
	  if (typeof hostWindow !== 'undefined') {
	    _window = hostWindow;
	  } else if (typeof window !== 'undefined') {
	    _window = window;
	  } else if (typeof self !== 'undefined') {
	    _window = self;
	  } else {
	    _window = global;
	  }

	  var attachEvent = typeof _window.document !== 'undefined' && _window.document.attachEvent;

	  if (!attachEvent) {
	    var requestFrame = function () {
	      var raf = _window.requestAnimationFrame || _window.mozRequestAnimationFrame || _window.webkitRequestAnimationFrame || function (fn) {
	        return _window.setTimeout(fn, 20);
	      };
	      return function (fn) {
	        return raf(fn);
	      };
	    }();

	    var cancelFrame = function () {
	      var cancel = _window.cancelAnimationFrame || _window.mozCancelAnimationFrame || _window.webkitCancelAnimationFrame || _window.clearTimeout;
	      return function (id) {
	        return cancel(id);
	      };
	    }();

	    var resetTriggers = function resetTriggers(element) {
	      var triggers = element.__resizeTriggers__,
	          expand = triggers.firstElementChild,
	          contract = triggers.lastElementChild,
	          expandChild = expand.firstElementChild;
	      contract.scrollLeft = contract.scrollWidth;
	      contract.scrollTop = contract.scrollHeight;
	      expandChild.style.width = expand.offsetWidth + 1 + 'px';
	      expandChild.style.height = expand.offsetHeight + 1 + 'px';
	      expand.scrollLeft = expand.scrollWidth;
	      expand.scrollTop = expand.scrollHeight;
	    };

	    var checkTriggers = function checkTriggers(element) {
	      return element.offsetWidth != element.__resizeLast__.width || element.offsetHeight != element.__resizeLast__.height;
	    };

	    var scrollListener = function scrollListener(e) {
	      // Don't measure (which forces) reflow for scrolls that happen inside of children!
	      if (e.target.className && typeof e.target.className.indexOf === 'function' && e.target.className.indexOf('contract-trigger') < 0 && e.target.className.indexOf('expand-trigger') < 0) {
	        return;
	      }

	      var element = this;
	      resetTriggers(this);
	      if (this.__resizeRAF__) {
	        cancelFrame(this.__resizeRAF__);
	      }
	      this.__resizeRAF__ = requestFrame(function () {
	        if (checkTriggers(element)) {
	          element.__resizeLast__.width = element.offsetWidth;
	          element.__resizeLast__.height = element.offsetHeight;
	          element.__resizeListeners__.forEach(function (fn) {
	            fn.call(element, e);
	          });
	        }
	      });
	    };

	    /* Detect CSS Animations support to detect element display/re-attach */
	    var animation = false,
	        keyframeprefix = '',
	        animationstartevent = 'animationstart',
	        domPrefixes = 'Webkit Moz O ms'.split(' '),
	        startEvents = 'webkitAnimationStart animationstart oAnimationStart MSAnimationStart'.split(' '),
	        pfx = '';
	    {
	      var elm = _window.document.createElement('fakeelement');
	      if (elm.style.animationName !== undefined) {
	        animation = true;
	      }

	      if (animation === false) {
	        for (var i = 0; i < domPrefixes.length; i++) {
	          if (elm.style[domPrefixes[i] + 'AnimationName'] !== undefined) {
	            pfx = domPrefixes[i];
	            keyframeprefix = '-' + pfx.toLowerCase() + '-';
	            animationstartevent = startEvents[i];
	            animation = true;
	            break;
	          }
	        }
	      }
	    }

	    var animationName = 'resizeanim';
	    var animationKeyframes = '@' + keyframeprefix + 'keyframes ' + animationName + ' { from { opacity: 0; } to { opacity: 0; } } ';
	    var animationStyle = keyframeprefix + 'animation: 1ms ' + animationName + '; ';
	  }

	  var createStyles = function createStyles(doc) {
	    if (!doc.getElementById('detectElementResize')) {
	      //opacity:0 works around a chrome bug https://code.google.com/p/chromium/issues/detail?id=286360
	      var css = (animationKeyframes ? animationKeyframes : '') + '.resize-triggers { ' + (animationStyle ? animationStyle : '') + 'visibility: hidden; opacity: 0; } ' + '.resize-triggers, .resize-triggers > div, .contract-trigger:before { content: " "; display: block; position: absolute; top: 0; left: 0; height: 100%; width: 100%; overflow: hidden; z-index: -1; } .resize-triggers > div { background: #eee; overflow: auto; } .contract-trigger:before { width: 200%; height: 200%; }',
	          head = doc.head || doc.getElementsByTagName('head')[0],
	          style = doc.createElement('style');

	      style.id = 'detectElementResize';
	      style.type = 'text/css';

	      if (nonce != null) {
	        style.setAttribute('nonce', nonce);
	      }

	      if (style.styleSheet) {
	        style.styleSheet.cssText = css;
	      } else {
	        style.appendChild(doc.createTextNode(css));
	      }

	      head.appendChild(style);
	    }
	  };

	  var addResizeListener = function addResizeListener(element, fn) {
	    if (attachEvent) {
	      element.attachEvent('onresize', fn);
	    } else {
	      if (!element.__resizeTriggers__) {
	        var doc = element.ownerDocument;
	        var elementStyle = _window.getComputedStyle(element);
	        if (elementStyle && elementStyle.position == 'static') {
	          element.style.position = 'relative';
	        }
	        createStyles(doc);
	        element.__resizeLast__ = {};
	        element.__resizeListeners__ = [];
	        (element.__resizeTriggers__ = doc.createElement('div')).className = 'resize-triggers';
	        element.__resizeTriggers__.innerHTML = '<div class="expand-trigger"><div></div></div>' + '<div class="contract-trigger"></div>';
	        element.appendChild(element.__resizeTriggers__);
	        resetTriggers(element);
	        element.addEventListener('scroll', scrollListener, true);

	        /* Listen for a css animation to detect element display/re-attach */
	        if (animationstartevent) {
	          element.__resizeTriggers__.__animationListener__ = function animationListener(e) {
	            if (e.animationName == animationName) {
	              resetTriggers(element);
	            }
	          };
	          element.__resizeTriggers__.addEventListener(animationstartevent, element.__resizeTriggers__.__animationListener__);
	        }
	      }
	      element.__resizeListeners__.push(fn);
	    }
	  };

	  var removeResizeListener = function removeResizeListener(element, fn) {
	    if (attachEvent) {
	      element.detachEvent('onresize', fn);
	    } else {
	      element.__resizeListeners__.splice(element.__resizeListeners__.indexOf(fn), 1);
	      if (!element.__resizeListeners__.length) {
	        element.removeEventListener('scroll', scrollListener, true);
	        if (element.__resizeTriggers__.__animationListener__) {
	          element.__resizeTriggers__.removeEventListener(animationstartevent, element.__resizeTriggers__.__animationListener__);
	          element.__resizeTriggers__.__animationListener__ = null;
	        }
	        try {
	          element.__resizeTriggers__ = !element.removeChild(element.__resizeTriggers__);
	        } catch (e) {
	          // Preact compat; see developit/preact-compat/issues/228
	        }
	      }
	    }
	  };

	  return {
	    addResizeListener: addResizeListener,
	    removeResizeListener: removeResizeListener
	  };
	}

	var AutoSizer = function (_React$PureComponent) {
	  _inherits$3(AutoSizer, _React$PureComponent);

	  function AutoSizer() {
	    var _ref;

	    var _temp, _this, _ret;

	    _classCallCheck$8(this, AutoSizer);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn$3(this, (_ref = AutoSizer.__proto__ || _Object$getPrototypeOf(AutoSizer)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      height: _this.props.defaultHeight || 0,
	      width: _this.props.defaultWidth || 0
	    }, _this._onResize = function () {
	      var _this$props = _this.props,
	          disableHeight = _this$props.disableHeight,
	          disableWidth = _this$props.disableWidth,
	          onResize = _this$props.onResize;


	      if (_this._parentNode) {
	        // Guard against AutoSizer component being removed from the DOM immediately after being added.
	        // This can result in invalid style values which can result in NaN values if we don't handle them.
	        // See issue #150 for more context.

	        var _height = _this._parentNode.offsetHeight || 0;
	        var _width = _this._parentNode.offsetWidth || 0;

	        var win = _this._window || window;
	        var _style = win.getComputedStyle(_this._parentNode) || {};
	        var paddingLeft = parseInt(_style.paddingLeft, 10) || 0;
	        var paddingRight = parseInt(_style.paddingRight, 10) || 0;
	        var paddingTop = parseInt(_style.paddingTop, 10) || 0;
	        var paddingBottom = parseInt(_style.paddingBottom, 10) || 0;

	        var newHeight = _height - paddingTop - paddingBottom;
	        var newWidth = _width - paddingLeft - paddingRight;

	        if (!disableHeight && _this.state.height !== newHeight || !disableWidth && _this.state.width !== newWidth) {
	          _this.setState({
	            height: _height - paddingTop - paddingBottom,
	            width: _width - paddingLeft - paddingRight
	          });

	          onResize({ height: _height, width: _width });
	        }
	      }
	    }, _this._setRef = function (autoSizer) {
	      _this._autoSizer = autoSizer;
	    }, _temp), _possibleConstructorReturn$3(_this, _ret);
	  } // uses any instead of Window because Flow doesn't have window type


	  _createClass$7(AutoSizer, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var nonce = this.props.nonce;

	      if (this._autoSizer && this._autoSizer.parentNode && this._autoSizer.parentNode.ownerDocument && this._autoSizer.parentNode.ownerDocument.defaultView && this._autoSizer.parentNode instanceof this._autoSizer.parentNode.ownerDocument.defaultView.HTMLElement) {
	        // Delay access of parentNode until mount.
	        // This handles edge-cases where the component has already been unmounted before its ref has been set,
	        // As well as libraries like react-lite which have a slightly different lifecycle.
	        this._parentNode = this._autoSizer.parentNode;
	        this._window = this._autoSizer.parentNode.ownerDocument.defaultView;

	        // Defer requiring resize handler in order to support server-side rendering.
	        // See issue #41
	        this._detectElementResize = createDetectElementResize(nonce, this._window);
	        this._detectElementResize.addResizeListener(this._parentNode, this._onResize);

	        this._onResize();
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      if (this._detectElementResize && this._parentNode) {
	        this._detectElementResize.removeResizeListener(this._parentNode, this._onResize);
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          children = _props.children,
	          className = _props.className,
	          disableHeight = _props.disableHeight,
	          disableWidth = _props.disableWidth,
	          style = _props.style;
	      var _state = this.state,
	          height = _state.height,
	          width = _state.width;

	      // Outer div should not force width/height since that may prevent containers from shrinking.
	      // Inner component should overflow and use calculated width/height.
	      // See issue #68 for more information.

	      var outerStyle = { overflow: 'visible' };
	      var childParams = {};

	      if (!disableHeight) {
	        outerStyle.height = 0;
	        childParams.height = height;
	      }

	      if (!disableWidth) {
	        outerStyle.width = 0;
	        childParams.width = width;
	      }

	      /**
	       * TODO: Avoid rendering children before the initial measurements have been collected.
	       * At best this would just be wasting cycles.
	       * Add this check into version 10 though as it could break too many ref callbacks in version 9.
	       * Note that if default width/height props were provided this would still work with SSR.
	      if (
	        height !== 0 &&
	        width !== 0
	      ) {
	        child = children({ height, width })
	      }
	      */

	      return React.createElement(
	        'div',
	        {
	          className: className,
	          ref: this._setRef,
	          style: _extends$5({}, outerStyle, style) },
	        children(childParams)
	      );
	    }
	  }]);

	  return AutoSizer;
	}(React.PureComponent);

	AutoSizer.defaultProps = {
	  onResize: function onResize() {},
	  disableHeight: false,
	  disableWidth: false,
	  style: {}
	};
	AutoSizer.propTypes = process.env.NODE_ENV === 'production' ? null : {
	  /** Function responsible for rendering children.*/
	  children: propTypes.func.isRequired,


	  /** Optional custom CSS class name to attach to root AutoSizer element.  */
	  className: propTypes.string,


	  /** Default height to use for initial render; useful for SSR */
	  defaultHeight: propTypes.number,


	  /** Default width to use for initial render; useful for SSR */
	  defaultWidth: propTypes.number,


	  /** Disable dynamic :height property */
	  disableHeight: propTypes.bool.isRequired,


	  /** Disable dynamic :width property */
	  disableWidth: propTypes.bool.isRequired,


	  /** Nonce of the inlined stylesheet for Content Security Policy */
	  nonce: propTypes.string,


	  /** Callback to be invoked on-resize */
	  onResize: propTypes.func.isRequired,


	  /** Optional inline style */
	  style: propTypes.object
	};

	var bpfrpt_proptype_CellMeasureCache = process.env.NODE_ENV === 'production' ? null : {
	  hasFixedWidth: propTypes.func.isRequired,
	  hasFixedHeight: propTypes.func.isRequired,
	  has: propTypes.func.isRequired,
	  set: propTypes.func.isRequired,
	  getHeight: propTypes.func.isRequired,
	  getWidth: propTypes.func.isRequired
	};

	/**
	 * Wraps a cell and measures its rendered content.
	 * Measurements are stored in a per-cell cache.
	 * Cached-content is not be re-measured.
	 */
	var CellMeasurer = function (_React$PureComponent) {
	  _inherits$3(CellMeasurer, _React$PureComponent);

	  function CellMeasurer() {
	    var _ref;

	    var _temp, _this, _ret;

	    _classCallCheck$8(this, CellMeasurer);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn$3(this, (_ref = CellMeasurer.__proto__ || _Object$getPrototypeOf(CellMeasurer)).call.apply(_ref, [this].concat(args))), _this), _this._measure = function () {
	      var _this$props = _this.props,
	          cache = _this$props.cache,
	          _this$props$columnInd = _this$props.columnIndex,
	          columnIndex = _this$props$columnInd === undefined ? 0 : _this$props$columnInd,
	          parent = _this$props.parent,
	          _this$props$rowIndex = _this$props.rowIndex,
	          rowIndex = _this$props$rowIndex === undefined ? _this.props.index || 0 : _this$props$rowIndex;

	      var _this$_getCellMeasure = _this._getCellMeasurements(),
	          height = _this$_getCellMeasure.height,
	          width = _this$_getCellMeasure.width;

	      if (height !== cache.getHeight(rowIndex, columnIndex) || width !== cache.getWidth(rowIndex, columnIndex)) {
	        cache.set(rowIndex, columnIndex, width, height);

	        if (parent && typeof parent.recomputeGridSize === 'function') {
	          parent.recomputeGridSize({
	            columnIndex: columnIndex,
	            rowIndex: rowIndex
	          });
	        }
	      }
	    }, _temp), _possibleConstructorReturn$3(_this, _ret);
	  }

	  _createClass$7(CellMeasurer, [{
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this._maybeMeasureCell();
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      this._maybeMeasureCell();
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var children = this.props.children;


	      return typeof children === 'function' ? children({ measure: this._measure }) : children;
	    }
	  }, {
	    key: '_getCellMeasurements',
	    value: function _getCellMeasurements() {
	      var cache = this.props.cache;


	      var node = ReactDOM.findDOMNode(this);

	      // TODO Check for a bad combination of fixedWidth and missing numeric width or vice versa with height

	      if (node && node.ownerDocument && node.ownerDocument.defaultView && node instanceof node.ownerDocument.defaultView.HTMLElement) {
	        var styleWidth = node.style.width;
	        var styleHeight = node.style.height;

	        // If we are re-measuring a cell that has already been measured,
	        // It will have a hard-coded width/height from the previous measurement.
	        // The fact that we are measuring indicates this measurement is probably stale,
	        // So explicitly clear it out (eg set to "auto") so we can recalculate.
	        // See issue #593 for more info.
	        // Even if we are measuring initially- if we're inside of a MultiGrid component,
	        // Explicitly clear width/height before measuring to avoid being tainted by another Grid.
	        // eg top/left Grid renders before bottom/right Grid
	        // Since the CellMeasurerCache is shared between them this taints derived cell size values.
	        if (!cache.hasFixedWidth()) {
	          node.style.width = 'auto';
	        }
	        if (!cache.hasFixedHeight()) {
	          node.style.height = 'auto';
	        }

	        var height = Math.ceil(node.offsetHeight);
	        var width = Math.ceil(node.offsetWidth);

	        // Reset after measuring to avoid breaking styles; see #660
	        if (styleWidth) {
	          node.style.width = styleWidth;
	        }
	        if (styleHeight) {
	          node.style.height = styleHeight;
	        }

	        return { height: height, width: width };
	      } else {
	        return { height: 0, width: 0 };
	      }
	    }
	  }, {
	    key: '_maybeMeasureCell',
	    value: function _maybeMeasureCell() {
	      var _props = this.props,
	          cache = _props.cache,
	          _props$columnIndex = _props.columnIndex,
	          columnIndex = _props$columnIndex === undefined ? 0 : _props$columnIndex,
	          parent = _props.parent,
	          _props$rowIndex = _props.rowIndex,
	          rowIndex = _props$rowIndex === undefined ? this.props.index || 0 : _props$rowIndex;


	      if (!cache.has(rowIndex, columnIndex)) {
	        var _getCellMeasurements2 = this._getCellMeasurements(),
	            height = _getCellMeasurements2.height,
	            width = _getCellMeasurements2.width;

	        cache.set(rowIndex, columnIndex, width, height);

	        // If size has changed, let Grid know to re-render.
	        if (parent && typeof parent.invalidateCellSizeAfterRender === 'function') {
	          parent.invalidateCellSizeAfterRender({
	            columnIndex: columnIndex,
	            rowIndex: rowIndex
	          });
	        }
	      }
	    }
	  }]);

	  return CellMeasurer;
	}(React.PureComponent);

	// Used for DEV mode warning check


	CellMeasurer.__internalCellMeasurerFlag = false;
	CellMeasurer.propTypes = process.env.NODE_ENV === 'production' ? null : {
	  cache: function cache() {
	    return (typeof bpfrpt_proptype_CellMeasureCache === 'function' ? bpfrpt_proptype_CellMeasureCache.isRequired ? bpfrpt_proptype_CellMeasureCache.isRequired : bpfrpt_proptype_CellMeasureCache : propTypes.shape(bpfrpt_proptype_CellMeasureCache).isRequired).apply(this, arguments);
	  },
	  children: propTypes.oneOfType([propTypes.func, propTypes.node]).isRequired,
	  columnIndex: propTypes.number,
	  index: propTypes.number,
	  parent: propTypes.shape({
	    invalidateCellSizeAfterRender: propTypes.func,
	    recomputeGridSize: propTypes.func
	  }).isRequired,
	  rowIndex: propTypes.number
	};
	if (process.env.NODE_ENV !== 'production') {
	  CellMeasurer.__internalCellMeasurerFlag = true;
	}

	var DEFAULT_HEIGHT = 30;

	var DEFAULT_WIDTH = 100;

	// Enables more intelligent mapping of a given column and row index to an item ID.
	// This prevents a cell cache from being invalidated when its parent collection is modified.

	/**
	 * Caches measurements for a given cell.
	 */
	var CellMeasurerCache$1 = function () {
	  function CellMeasurerCache() {
	    var _this = this;

	    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    _classCallCheck$8(this, CellMeasurerCache);

	    this._cellHeightCache = {};
	    this._cellWidthCache = {};
	    this._columnWidthCache = {};
	    this._rowHeightCache = {};
	    this._columnCount = 0;
	    this._rowCount = 0;

	    this.columnWidth = function (_ref) {
	      var index = _ref.index;

	      var key = _this._keyMapper(0, index);

	      return _this._columnWidthCache.hasOwnProperty(key) ? _this._columnWidthCache[key] : _this._defaultWidth;
	    };

	    this.rowHeight = function (_ref2) {
	      var index = _ref2.index;

	      var key = _this._keyMapper(index, 0);

	      return _this._rowHeightCache.hasOwnProperty(key) ? _this._rowHeightCache[key] : _this._defaultHeight;
	    };

	    var defaultHeight = params.defaultHeight,
	        defaultWidth = params.defaultWidth,
	        fixedHeight = params.fixedHeight,
	        fixedWidth = params.fixedWidth,
	        keyMapper = params.keyMapper,
	        minHeight = params.minHeight,
	        minWidth = params.minWidth;


	    this._hasFixedHeight = fixedHeight === true;
	    this._hasFixedWidth = fixedWidth === true;
	    this._minHeight = minHeight || 0;
	    this._minWidth = minWidth || 0;
	    this._keyMapper = keyMapper || defaultKeyMapper;

	    this._defaultHeight = Math.max(this._minHeight, typeof defaultHeight === 'number' ? defaultHeight : DEFAULT_HEIGHT);
	    this._defaultWidth = Math.max(this._minWidth, typeof defaultWidth === 'number' ? defaultWidth : DEFAULT_WIDTH);

	    if (process.env.NODE_ENV !== 'production') {
	      if (this._hasFixedHeight === false && this._hasFixedWidth === false) {
	        console.warn("CellMeasurerCache should only measure a cell's width or height. " + 'You have configured CellMeasurerCache to measure both. ' + 'This will result in poor performance.');
	      }

	      if (this._hasFixedHeight === false && this._defaultHeight === 0) {
	        console.warn('Fixed height CellMeasurerCache should specify a :defaultHeight greater than 0. ' + 'Failing to do so will lead to unnecessary layout and poor performance.');
	      }

	      if (this._hasFixedWidth === false && this._defaultWidth === 0) {
	        console.warn('Fixed width CellMeasurerCache should specify a :defaultWidth greater than 0. ' + 'Failing to do so will lead to unnecessary layout and poor performance.');
	      }
	    }
	  }

	  _createClass$7(CellMeasurerCache, [{
	    key: 'clear',
	    value: function clear(rowIndex) {
	      var columnIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

	      var key = this._keyMapper(rowIndex, columnIndex);

	      delete this._cellHeightCache[key];
	      delete this._cellWidthCache[key];

	      this._updateCachedColumnAndRowSizes(rowIndex, columnIndex);
	    }
	  }, {
	    key: 'clearAll',
	    value: function clearAll() {
	      this._cellHeightCache = {};
	      this._cellWidthCache = {};
	      this._columnWidthCache = {};
	      this._rowHeightCache = {};
	      this._rowCount = 0;
	      this._columnCount = 0;
	    }
	  }, {
	    key: 'hasFixedHeight',
	    value: function hasFixedHeight() {
	      return this._hasFixedHeight;
	    }
	  }, {
	    key: 'hasFixedWidth',
	    value: function hasFixedWidth() {
	      return this._hasFixedWidth;
	    }
	  }, {
	    key: 'getHeight',
	    value: function getHeight(rowIndex) {
	      var columnIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

	      if (this._hasFixedHeight) {
	        return this._defaultHeight;
	      } else {
	        var _key = this._keyMapper(rowIndex, columnIndex);

	        return this._cellHeightCache.hasOwnProperty(_key) ? Math.max(this._minHeight, this._cellHeightCache[_key]) : this._defaultHeight;
	      }
	    }
	  }, {
	    key: 'getWidth',
	    value: function getWidth(rowIndex) {
	      var columnIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

	      if (this._hasFixedWidth) {
	        return this._defaultWidth;
	      } else {
	        var _key2 = this._keyMapper(rowIndex, columnIndex);

	        return this._cellWidthCache.hasOwnProperty(_key2) ? Math.max(this._minWidth, this._cellWidthCache[_key2]) : this._defaultWidth;
	      }
	    }
	  }, {
	    key: 'has',
	    value: function has(rowIndex) {
	      var columnIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

	      var key = this._keyMapper(rowIndex, columnIndex);

	      return this._cellHeightCache.hasOwnProperty(key);
	    }
	  }, {
	    key: 'set',
	    value: function set(rowIndex, columnIndex, width, height) {
	      var key = this._keyMapper(rowIndex, columnIndex);

	      if (columnIndex >= this._columnCount) {
	        this._columnCount = columnIndex + 1;
	      }
	      if (rowIndex >= this._rowCount) {
	        this._rowCount = rowIndex + 1;
	      }

	      // Size is cached per cell so we don't have to re-measure if cells are re-ordered.
	      this._cellHeightCache[key] = height;
	      this._cellWidthCache[key] = width;

	      this._updateCachedColumnAndRowSizes(rowIndex, columnIndex);
	    }
	  }, {
	    key: '_updateCachedColumnAndRowSizes',
	    value: function _updateCachedColumnAndRowSizes(rowIndex, columnIndex) {
	      // :columnWidth and :rowHeight are derived based on all cells in a column/row.
	      // Pre-cache these derived values for faster lookup later.
	      // Reads are expected to occur more frequently than writes in this case.
	      // Only update non-fixed dimensions though to avoid doing unnecessary work.
	      if (!this._hasFixedWidth) {
	        var columnWidth = 0;
	        for (var i = 0; i < this._rowCount; i++) {
	          columnWidth = Math.max(columnWidth, this.getWidth(i, columnIndex));
	        }
	        var columnKey = this._keyMapper(0, columnIndex);
	        this._columnWidthCache[columnKey] = columnWidth;
	      }
	      if (!this._hasFixedHeight) {
	        var rowHeight = 0;
	        for (var _i = 0; _i < this._columnCount; _i++) {
	          rowHeight = Math.max(rowHeight, this.getHeight(rowIndex, _i));
	        }
	        var rowKey = this._keyMapper(rowIndex, 0);
	        this._rowHeightCache[rowKey] = rowHeight;
	      }
	    }
	  }, {
	    key: 'defaultHeight',
	    get: function get() {
	      return this._defaultHeight;
	    }
	  }, {
	    key: 'defaultWidth',
	    get: function get() {
	      return this._defaultWidth;
	    }
	  }]);

	  return CellMeasurerCache;
	}();


	function defaultKeyMapper(rowIndex, columnIndex) {
	  return rowIndex + '-' + columnIndex;
	}

	// @TODO Merge Collection and CollectionView

	/**
	 * Specifies the number of milliseconds during which to disable pointer events while a scroll is in progress.
	 * This improves performance and makes scrolling smoother.
	 */
	var IS_SCROLLING_TIMEOUT = 150;

	/**
	 * Controls whether the Grid updates the DOM element's scrollLeft/scrollTop based on the current state or just observes it.
	 * This prevents Grid from interrupting mouse-wheel animations (see issue #2).
	 */
	var SCROLL_POSITION_CHANGE_REASONS$1 = {
	  OBSERVED: 'observed',
	  REQUESTED: 'requested'
	};

	/**
	 * Monitors changes in properties (eg. cellCount) and state (eg. scroll offsets) to determine when rendering needs to occur.
	 * This component does not render any visible content itself; it defers to the specified :cellLayoutManager.
	 */

	var CollectionView = function (_React$PureComponent) {
	  _inherits$3(CollectionView, _React$PureComponent);

	  // Invokes callbacks only when their values have changed.
	  function CollectionView() {
	    var _ref;

	    _classCallCheck$8(this, CollectionView);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    // If this component is being rendered server-side, getScrollbarSize() will return undefined.
	    // We handle this case in componentDidMount()
	    var _this = _possibleConstructorReturn$3(this, (_ref = CollectionView.__proto__ || _Object$getPrototypeOf(CollectionView)).call.apply(_ref, [this].concat(args)));

	    _this.state = {
	      isScrolling: false,
	      scrollLeft: 0,
	      scrollTop: 0
	    };
	    _this._calculateSizeAndPositionDataOnNextUpdate = false;
	    _this._onSectionRenderedMemoizer = createCallbackMemoizer();
	    _this._onScrollMemoizer = createCallbackMemoizer(false);

	    _this._invokeOnSectionRenderedHelper = function () {
	      var _this$props = _this.props,
	          cellLayoutManager = _this$props.cellLayoutManager,
	          onSectionRendered = _this$props.onSectionRendered;


	      _this._onSectionRenderedMemoizer({
	        callback: onSectionRendered,
	        indices: {
	          indices: cellLayoutManager.getLastRenderedIndices()
	        }
	      });
	    };

	    _this._setScrollingContainerRef = function (ref) {
	      _this._scrollingContainer = ref;
	    };

	    _this._updateScrollPositionForScrollToCell = function () {
	      var _this$props2 = _this.props,
	          cellLayoutManager = _this$props2.cellLayoutManager,
	          height = _this$props2.height,
	          scrollToAlignment = _this$props2.scrollToAlignment,
	          scrollToCell = _this$props2.scrollToCell,
	          width = _this$props2.width;
	      var _this$state = _this.state,
	          scrollLeft = _this$state.scrollLeft,
	          scrollTop = _this$state.scrollTop;


	      if (scrollToCell >= 0) {
	        var scrollPosition = cellLayoutManager.getScrollPositionForCell({
	          align: scrollToAlignment,
	          cellIndex: scrollToCell,
	          height: height,
	          scrollLeft: scrollLeft,
	          scrollTop: scrollTop,
	          width: width
	        });

	        if (scrollPosition.scrollLeft !== scrollLeft || scrollPosition.scrollTop !== scrollTop) {
	          _this._setScrollPosition(scrollPosition);
	        }
	      }
	    };

	    _this._onScroll = function (event) {
	      // In certain edge-cases React dispatches an onScroll event with an invalid target.scrollLeft / target.scrollTop.
	      // This invalid event can be detected by comparing event.target to this component's scrollable DOM element.
	      // See issue #404 for more information.
	      if (event.target !== _this._scrollingContainer) {
	        return;
	      }

	      // Prevent pointer events from interrupting a smooth scroll
	      _this._enablePointerEventsAfterDelay();

	      // When this component is shrunk drastically, React dispatches a series of back-to-back scroll events,
	      // Gradually converging on a scrollTop that is within the bounds of the new, smaller height.
	      // This causes a series of rapid renders that is slow for long lists.
	      // We can avoid that by doing some simple bounds checking to ensure that scrollTop never exceeds the total height.
	      var _this$props3 = _this.props,
	          cellLayoutManager = _this$props3.cellLayoutManager,
	          height = _this$props3.height,
	          isScrollingChange = _this$props3.isScrollingChange,
	          width = _this$props3.width;

	      var scrollbarSize = _this._scrollbarSize;

	      var _cellLayoutManager$ge = cellLayoutManager.getTotalSize(),
	          totalHeight = _cellLayoutManager$ge.height,
	          totalWidth = _cellLayoutManager$ge.width;

	      var scrollLeft = Math.max(0, Math.min(totalWidth - width + scrollbarSize, event.target.scrollLeft));
	      var scrollTop = Math.max(0, Math.min(totalHeight - height + scrollbarSize, event.target.scrollTop));

	      // Certain devices (like Apple touchpad) rapid-fire duplicate events.
	      // Don't force a re-render if this is the case.
	      // The mouse may move faster then the animation frame does.
	      // Use requestAnimationFrame to avoid over-updating.
	      if (_this.state.scrollLeft !== scrollLeft || _this.state.scrollTop !== scrollTop) {
	        // Browsers with cancelable scroll events (eg. Firefox) interrupt scrolling animations if scrollTop/scrollLeft is set.
	        // Other browsers (eg. Safari) don't scroll as well without the help under certain conditions (DOM or style changes during scrolling).
	        // All things considered, this seems to be the best current work around that I'm aware of.
	        // For more information see https://github.com/bvaughn/react-virtualized/pull/124
	        var scrollPositionChangeReason = event.cancelable ? SCROLL_POSITION_CHANGE_REASONS$1.OBSERVED : SCROLL_POSITION_CHANGE_REASONS$1.REQUESTED;

	        // Synchronously set :isScrolling the first time (since _setNextState will reschedule its animation frame each time it's called)
	        if (!_this.state.isScrolling) {
	          isScrollingChange(true);
	        }

	        _this.setState({
	          isScrolling: true,
	          scrollLeft: scrollLeft,
	          scrollPositionChangeReason: scrollPositionChangeReason,
	          scrollTop: scrollTop
	        });
	      }

	      _this._invokeOnScrollMemoizer({
	        scrollLeft: scrollLeft,
	        scrollTop: scrollTop,
	        totalWidth: totalWidth,
	        totalHeight: totalHeight
	      });
	    };

	    _this._scrollbarSize = scrollbarSize();
	    if (_this._scrollbarSize === undefined) {
	      _this._scrollbarSizeMeasured = false;
	      _this._scrollbarSize = 0;
	    } else {
	      _this._scrollbarSizeMeasured = true;
	    }
	    return _this;
	  }

	  /**
	   * Forced recompute of cell sizes and positions.
	   * This function should be called if cell sizes have changed but nothing else has.
	   * Since cell positions are calculated by callbacks, the collection view has no way of detecting when the underlying data has changed.
	   */


	  _createClass$7(CollectionView, [{
	    key: 'recomputeCellSizesAndPositions',
	    value: function recomputeCellSizesAndPositions() {
	      this._calculateSizeAndPositionDataOnNextUpdate = true;
	      this.forceUpdate();
	    }

	    /* ---------------------------- Component lifecycle methods ---------------------------- */

	    /**
	     * @private
	     * This method updates scrollLeft/scrollTop in state for the following conditions:
	     * 1) Empty content (0 rows or columns)
	     * 2) New scroll props overriding the current state
	     * 3) Cells-count or cells-size has changed, making previous scroll offsets invalid
	     */

	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var _props = this.props,
	          cellLayoutManager = _props.cellLayoutManager,
	          scrollLeft = _props.scrollLeft,
	          scrollToCell = _props.scrollToCell,
	          scrollTop = _props.scrollTop;

	      // If this component was first rendered server-side, scrollbar size will be undefined.
	      // In that event we need to remeasure.

	      if (!this._scrollbarSizeMeasured) {
	        this._scrollbarSize = scrollbarSize();
	        this._scrollbarSizeMeasured = true;
	        this.setState({});
	      }

	      if (scrollToCell >= 0) {
	        this._updateScrollPositionForScrollToCell();
	      } else if (scrollLeft >= 0 || scrollTop >= 0) {
	        this._setScrollPosition({ scrollLeft: scrollLeft, scrollTop: scrollTop });
	      }

	      // Update onSectionRendered callback.
	      this._invokeOnSectionRenderedHelper();

	      var _cellLayoutManager$ge2 = cellLayoutManager.getTotalSize(),
	          totalHeight = _cellLayoutManager$ge2.height,
	          totalWidth = _cellLayoutManager$ge2.width;

	      // Initialize onScroll callback.


	      this._invokeOnScrollMemoizer({
	        scrollLeft: scrollLeft || 0,
	        scrollTop: scrollTop || 0,
	        totalHeight: totalHeight,
	        totalWidth: totalWidth
	      });
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {
	      var _props2 = this.props,
	          height = _props2.height,
	          scrollToAlignment = _props2.scrollToAlignment,
	          scrollToCell = _props2.scrollToCell,
	          width = _props2.width;
	      var _state = this.state,
	          scrollLeft = _state.scrollLeft,
	          scrollPositionChangeReason = _state.scrollPositionChangeReason,
	          scrollTop = _state.scrollTop;

	      // Make sure requested changes to :scrollLeft or :scrollTop get applied.
	      // Assigning to scrollLeft/scrollTop tells the browser to interrupt any running scroll animations,
	      // And to discard any pending async changes to the scroll position that may have happened in the meantime (e.g. on a separate scrolling thread).
	      // So we only set these when we require an adjustment of the scroll position.
	      // See issue #2 for more information.

	      if (scrollPositionChangeReason === SCROLL_POSITION_CHANGE_REASONS$1.REQUESTED) {
	        if (scrollLeft >= 0 && scrollLeft !== prevState.scrollLeft && scrollLeft !== this._scrollingContainer.scrollLeft) {
	          this._scrollingContainer.scrollLeft = scrollLeft;
	        }
	        if (scrollTop >= 0 && scrollTop !== prevState.scrollTop && scrollTop !== this._scrollingContainer.scrollTop) {
	          this._scrollingContainer.scrollTop = scrollTop;
	        }
	      }

	      // Update scroll offsets if the current :scrollToCell values requires it
	      if (height !== prevProps.height || scrollToAlignment !== prevProps.scrollToAlignment || scrollToCell !== prevProps.scrollToCell || width !== prevProps.width) {
	        this._updateScrollPositionForScrollToCell();
	      }

	      // Update onRowsRendered callback if start/stop indices have changed
	      this._invokeOnSectionRenderedHelper();
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      if (this._disablePointerEventsTimeoutId) {
	        clearTimeout(this._disablePointerEventsTimeoutId);
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props3 = this.props,
	          autoHeight = _props3.autoHeight,
	          cellCount = _props3.cellCount,
	          cellLayoutManager = _props3.cellLayoutManager,
	          className = _props3.className,
	          height = _props3.height,
	          horizontalOverscanSize = _props3.horizontalOverscanSize,
	          id = _props3.id,
	          noContentRenderer = _props3.noContentRenderer,
	          style = _props3.style,
	          verticalOverscanSize = _props3.verticalOverscanSize,
	          width = _props3.width;
	      var _state2 = this.state,
	          isScrolling = _state2.isScrolling,
	          scrollLeft = _state2.scrollLeft,
	          scrollTop = _state2.scrollTop;

	      // Memoization reset

	      if (this._lastRenderedCellCount !== cellCount || this._lastRenderedCellLayoutManager !== cellLayoutManager || this._calculateSizeAndPositionDataOnNextUpdate) {
	        this._lastRenderedCellCount = cellCount;
	        this._lastRenderedCellLayoutManager = cellLayoutManager;
	        this._calculateSizeAndPositionDataOnNextUpdate = false;

	        cellLayoutManager.calculateSizeAndPositionData();
	      }

	      var _cellLayoutManager$ge3 = cellLayoutManager.getTotalSize(),
	          totalHeight = _cellLayoutManager$ge3.height,
	          totalWidth = _cellLayoutManager$ge3.width;

	      // Safely expand the rendered area by the specified overscan amount


	      var left = Math.max(0, scrollLeft - horizontalOverscanSize);
	      var top = Math.max(0, scrollTop - verticalOverscanSize);
	      var right = Math.min(totalWidth, scrollLeft + width + horizontalOverscanSize);
	      var bottom = Math.min(totalHeight, scrollTop + height + verticalOverscanSize);

	      var childrenToDisplay = height > 0 && width > 0 ? cellLayoutManager.cellRenderers({
	        height: bottom - top,
	        isScrolling: isScrolling,
	        width: right - left,
	        x: left,
	        y: top
	      }) : [];

	      var collectionStyle = {
	        boxSizing: 'border-box',
	        direction: 'ltr',
	        height: autoHeight ? 'auto' : height,
	        position: 'relative',
	        WebkitOverflowScrolling: 'touch',
	        width: width,
	        willChange: 'transform'
	      };

	      // Force browser to hide scrollbars when we know they aren't necessary.
	      // Otherwise once scrollbars appear they may not disappear again.
	      // For more info see issue #116
	      var verticalScrollBarSize = totalHeight > height ? this._scrollbarSize : 0;
	      var horizontalScrollBarSize = totalWidth > width ? this._scrollbarSize : 0;

	      // Also explicitly init styles to 'auto' if scrollbars are required.
	      // This works around an obscure edge case where external CSS styles have not yet been loaded,
	      // But an initial scroll index of offset is set as an external prop.
	      // Without this style, Grid would render the correct range of cells but would NOT update its internal offset.
	      // This was originally reported via clauderic/react-infinite-calendar/issues/23
	      collectionStyle.overflowX = totalWidth + verticalScrollBarSize <= width ? 'hidden' : 'auto';
	      collectionStyle.overflowY = totalHeight + horizontalScrollBarSize <= height ? 'hidden' : 'auto';

	      return React.createElement(
	        'div',
	        {
	          ref: this._setScrollingContainerRef,
	          'aria-label': this.props['aria-label'],
	          className: clsx('ReactVirtualized__Collection', className),
	          id: id,
	          onScroll: this._onScroll,
	          role: 'grid',
	          style: _extends$5({}, collectionStyle, style),
	          tabIndex: 0 },
	        cellCount > 0 && React.createElement(
	          'div',
	          {
	            className: 'ReactVirtualized__Collection__innerScrollContainer',
	            style: {
	              height: totalHeight,
	              maxHeight: totalHeight,
	              maxWidth: totalWidth,
	              overflow: 'hidden',
	              pointerEvents: isScrolling ? 'none' : '',
	              width: totalWidth
	            } },
	          childrenToDisplay
	        ),
	        cellCount === 0 && noContentRenderer()
	      );
	    }

	    /* ---------------------------- Helper methods ---------------------------- */

	    /**
	     * Sets an :isScrolling flag for a small window of time.
	     * This flag is used to disable pointer events on the scrollable portion of the Collection.
	     * This prevents jerky/stuttery mouse-wheel scrolling.
	     */

	  }, {
	    key: '_enablePointerEventsAfterDelay',
	    value: function _enablePointerEventsAfterDelay() {
	      var _this2 = this;

	      if (this._disablePointerEventsTimeoutId) {
	        clearTimeout(this._disablePointerEventsTimeoutId);
	      }

	      this._disablePointerEventsTimeoutId = setTimeout(function () {
	        var isScrollingChange = _this2.props.isScrollingChange;


	        isScrollingChange(false);

	        _this2._disablePointerEventsTimeoutId = null;
	        _this2.setState({
	          isScrolling: false
	        });
	      }, IS_SCROLLING_TIMEOUT);
	    }
	  }, {
	    key: '_invokeOnScrollMemoizer',
	    value: function _invokeOnScrollMemoizer(_ref2) {
	      var _this3 = this;

	      var scrollLeft = _ref2.scrollLeft,
	          scrollTop = _ref2.scrollTop,
	          totalHeight = _ref2.totalHeight,
	          totalWidth = _ref2.totalWidth;

	      this._onScrollMemoizer({
	        callback: function callback(_ref3) {
	          var scrollLeft = _ref3.scrollLeft,
	              scrollTop = _ref3.scrollTop;
	          var _props4 = _this3.props,
	              height = _props4.height,
	              onScroll = _props4.onScroll,
	              width = _props4.width;


	          onScroll({
	            clientHeight: height,
	            clientWidth: width,
	            scrollHeight: totalHeight,
	            scrollLeft: scrollLeft,
	            scrollTop: scrollTop,
	            scrollWidth: totalWidth
	          });
	        },
	        indices: {
	          scrollLeft: scrollLeft,
	          scrollTop: scrollTop
	        }
	      });
	    }
	  }, {
	    key: '_setScrollPosition',
	    value: function _setScrollPosition(_ref4) {
	      var scrollLeft = _ref4.scrollLeft,
	          scrollTop = _ref4.scrollTop;

	      var newState = {
	        scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS$1.REQUESTED
	      };

	      if (scrollLeft >= 0) {
	        newState.scrollLeft = scrollLeft;
	      }

	      if (scrollTop >= 0) {
	        newState.scrollTop = scrollTop;
	      }

	      if (scrollLeft >= 0 && scrollLeft !== this.state.scrollLeft || scrollTop >= 0 && scrollTop !== this.state.scrollTop) {
	        this.setState(newState);
	      }
	    }
	  }], [{
	    key: 'getDerivedStateFromProps',
	    value: function getDerivedStateFromProps(nextProps, prevState) {
	      if (nextProps.cellCount === 0 && (prevState.scrollLeft !== 0 || prevState.scrollTop !== 0)) {
	        return {
	          scrollLeft: 0,
	          scrollTop: 0
	        };
	      } else if (nextProps.scrollLeft !== prevState.scrollLeft || nextProps.scrollTop !== prevState.scrollTop) {
	        return {
	          scrollLeft: nextProps.scrollLeft != null ? nextProps.scrollLeft : prevState.scrollLeft,
	          scrollTop: nextProps.scrollTop != null ? nextProps.scrollTop : prevState.scrollTop
	        };
	      }

	      return null;
	    }
	  }]);

	  return CollectionView;
	}(React.PureComponent);

	CollectionView.defaultProps = {
	  'aria-label': 'grid',
	  horizontalOverscanSize: 0,
	  noContentRenderer: function noContentRenderer() {
	    return null;
	  },
	  onScroll: function onScroll() {
	    return null;
	  },
	  onSectionRendered: function onSectionRendered() {
	    return null;
	  },
	  scrollToAlignment: 'auto',
	  scrollToCell: -1,
	  style: {},
	  verticalOverscanSize: 0
	};
	CollectionView.propTypes = process.env.NODE_ENV !== "production" ? {
	  'aria-label': propTypes.string,

	  /**
	   * Removes fixed height from the scrollingContainer so that the total height
	   * of rows can stretch the window. Intended for use with WindowScroller
	   */
	  autoHeight: propTypes.bool,

	  /**
	   * Number of cells in collection.
	   */
	  cellCount: propTypes.number.isRequired,

	  /**
	   * Calculates cell sizes and positions and manages rendering the appropriate cells given a specified window.
	   */
	  cellLayoutManager: propTypes.object.isRequired,

	  /**
	   * Optional custom CSS class name to attach to root Collection element.
	   */
	  className: propTypes.string,

	  /**
	   * Height of Collection; this property determines the number of visible (vs virtualized) rows.
	   */
	  height: propTypes.number.isRequired,

	  /**
	   * Optional custom id to attach to root Collection element.
	   */
	  id: propTypes.string,

	  /**
	   * Enables the `Collection` to horiontally "overscan" its content similar to how `Grid` does.
	   * This can reduce flicker around the edges when a user scrolls quickly.
	   */
	  horizontalOverscanSize: propTypes.number.isRequired,

	  isScrollingChange: propTypes.func,

	  /**
	   * Optional renderer to be used in place of rows when either :rowCount or :cellCount is 0.
	   */
	  noContentRenderer: propTypes.func.isRequired,

	  /**
	   * Callback invoked whenever the scroll offset changes within the inner scrollable region.
	   * This callback can be used to sync scrolling between lists, tables, or grids.
	   * ({ clientHeight, clientWidth, scrollHeight, scrollLeft, scrollTop, scrollWidth }): void
	   */
	  onScroll: propTypes.func.isRequired,

	  /**
	   * Callback invoked with information about the section of the Collection that was just rendered.
	   * This callback is passed a named :indices parameter which is an Array of the most recently rendered section indices.
	   */
	  onSectionRendered: propTypes.func.isRequired,

	  /**
	   * Horizontal offset.
	   */
	  scrollLeft: propTypes.number,

	  /**
	   * Controls scroll-to-cell behavior of the Grid.
	   * The default ("auto") scrolls the least amount possible to ensure that the specified cell is fully visible.
	   * Use "start" to align cells to the top/left of the Grid and "end" to align bottom/right.
	   */
	  scrollToAlignment: propTypes.oneOf(['auto', 'end', 'start', 'center']).isRequired,

	  /**
	   * Cell index to ensure visible (by forcefully scrolling if necessary).
	   */
	  scrollToCell: propTypes.number.isRequired,

	  /**
	   * Vertical offset.
	   */
	  scrollTop: propTypes.number,

	  /**
	   * Optional custom inline style to attach to root Collection element.
	   */
	  style: propTypes.object,

	  /**
	   * Enables the `Collection` to vertically "overscan" its content similar to how `Grid` does.
	   * This can reduce flicker around the edges when a user scrolls quickly.
	   */
	  verticalOverscanSize: propTypes.number.isRequired,

	  /**
	   * Width of Collection; this property determines the number of visible (vs virtualized) columns.
	   */
	  width: propTypes.number.isRequired
	} : {};


	polyfill$1(CollectionView);

	var bpfrpt_proptype_Index = process.env.NODE_ENV === 'production' ? null : {
	  index: propTypes.number.isRequired
	};
	var bpfrpt_proptype_PositionInfo = process.env.NODE_ENV === 'production' ? null : {
	  x: propTypes.number.isRequired,
	  y: propTypes.number.isRequired
	};
	var bpfrpt_proptype_ScrollPosition = process.env.NODE_ENV === 'production' ? null : {
	  scrollLeft: propTypes.number.isRequired,
	  scrollTop: propTypes.number.isRequired
	};
	var bpfrpt_proptype_SizeAndPositionInfo = process.env.NODE_ENV === 'production' ? null : {
	  height: propTypes.number.isRequired,
	  width: propTypes.number.isRequired,
	  x: propTypes.number.isRequired,
	  y: propTypes.number.isRequired
	};
	var bpfrpt_proptype_SizeInfo = process.env.NODE_ENV === 'production' ? null : {
	  height: propTypes.number.isRequired,
	  width: propTypes.number.isRequired
	};

	/**
	 * A section of the Window.
	 * Window Sections are used to group nearby cells.
	 * This enables us to more quickly determine which cells to display in a given region of the Window.
	 * Sections have a fixed size and contain 0 to many cells (tracked by their indices).
	 */
	var Section = function () {
	  function Section(_ref) {
	    var height = _ref.height,
	        width = _ref.width,
	        x = _ref.x,
	        y = _ref.y;

	    _classCallCheck$8(this, Section);

	    this.height = height;
	    this.width = width;
	    this.x = x;
	    this.y = y;

	    this._indexMap = {};
	    this._indices = [];
	  }

	  /** Add a cell to this section. */


	  _createClass$7(Section, [{
	    key: 'addCellIndex',
	    value: function addCellIndex(_ref2) {
	      var index = _ref2.index;

	      if (!this._indexMap[index]) {
	        this._indexMap[index] = true;
	        this._indices.push(index);
	      }
	    }

	    /** Get all cell indices that have been added to this section. */

	  }, {
	    key: 'getCellIndices',
	    value: function getCellIndices() {
	      return this._indices;
	    }

	    /** Intended for debugger/test purposes only */

	  }, {
	    key: 'toString',
	    value: function toString() {
	      return this.x + ',' + this.y + ' ' + this.width + 'x' + this.height;
	    }
	  }]);

	  return Section;
	}();

	var SECTION_SIZE = 100;

	/**
	 * Contains 0 to many Sections.
	 * Grows (and adds Sections) dynamically as cells are registered.
	 * Automatically adds cells to the appropriate Section(s).
	 */
	var SectionManager = function () {
	  function SectionManager() {
	    var sectionSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : SECTION_SIZE;

	    _classCallCheck$8(this, SectionManager);

	    this._sectionSize = sectionSize;

	    this._cellMetadata = [];
	    this._sections = {};
	  }

	  /**
	   * Gets all cell indices contained in the specified region.
	   * A region may encompass 1 or more Sections.
	   */


	  _createClass$7(SectionManager, [{
	    key: 'getCellIndices',
	    value: function getCellIndices(_ref) {
	      var height = _ref.height,
	          width = _ref.width,
	          x = _ref.x,
	          y = _ref.y;

	      var indices = {};

	      this.getSections({ height: height, width: width, x: x, y: y }).forEach(function (section) {
	        return section.getCellIndices().forEach(function (index) {
	          indices[index] = index;
	        });
	      });

	      // Object keys are strings; this function returns numbers
	      return _Object$keys(indices).map(function (index) {
	        return indices[index];
	      });
	    }

	    /** Get size and position information for the cell specified. */

	  }, {
	    key: 'getCellMetadata',
	    value: function getCellMetadata(_ref2) {
	      var index = _ref2.index;

	      return this._cellMetadata[index];
	    }

	    /** Get all Sections overlapping the specified region. */

	  }, {
	    key: 'getSections',
	    value: function getSections(_ref3) {
	      var height = _ref3.height,
	          width = _ref3.width,
	          x = _ref3.x,
	          y = _ref3.y;

	      var sectionXStart = Math.floor(x / this._sectionSize);
	      var sectionXStop = Math.floor((x + width - 1) / this._sectionSize);
	      var sectionYStart = Math.floor(y / this._sectionSize);
	      var sectionYStop = Math.floor((y + height - 1) / this._sectionSize);

	      var sections = [];

	      for (var sectionX = sectionXStart; sectionX <= sectionXStop; sectionX++) {
	        for (var sectionY = sectionYStart; sectionY <= sectionYStop; sectionY++) {
	          var key = sectionX + '.' + sectionY;

	          if (!this._sections[key]) {
	            this._sections[key] = new Section({
	              height: this._sectionSize,
	              width: this._sectionSize,
	              x: sectionX * this._sectionSize,
	              y: sectionY * this._sectionSize
	            });
	          }

	          sections.push(this._sections[key]);
	        }
	      }

	      return sections;
	    }

	    /** Total number of Sections based on the currently registered cells. */

	  }, {
	    key: 'getTotalSectionCount',
	    value: function getTotalSectionCount() {
	      return _Object$keys(this._sections).length;
	    }

	    /** Intended for debugger/test purposes only */

	  }, {
	    key: 'toString',
	    value: function toString() {
	      var _this = this;

	      return _Object$keys(this._sections).map(function (index) {
	        return _this._sections[index].toString();
	      });
	    }

	    /** Adds a cell to the appropriate Sections and registers it metadata for later retrievable. */

	  }, {
	    key: 'registerCell',
	    value: function registerCell(_ref4) {
	      var cellMetadatum = _ref4.cellMetadatum,
	          index = _ref4.index;

	      this._cellMetadata[index] = cellMetadatum;

	      this.getSections(cellMetadatum).forEach(function (section) {
	        return section.addCellIndex({ index: index });
	      });
	    }
	  }]);

	  return SectionManager;
	}();

	function calculateSizeAndPositionData(_ref) {
	  var cellCount = _ref.cellCount,
	      cellSizeAndPositionGetter = _ref.cellSizeAndPositionGetter,
	      sectionSize = _ref.sectionSize;

	  var cellMetadata = [];
	  var sectionManager = new SectionManager(sectionSize);
	  var height = 0;
	  var width = 0;

	  for (var index = 0; index < cellCount; index++) {
	    var cellMetadatum = cellSizeAndPositionGetter({ index: index });

	    if (cellMetadatum.height == null || isNaN(cellMetadatum.height) || cellMetadatum.width == null || isNaN(cellMetadatum.width) || cellMetadatum.x == null || isNaN(cellMetadatum.x) || cellMetadatum.y == null || isNaN(cellMetadatum.y)) {
	      throw Error('Invalid metadata returned for cell ' + index + ':\n        x:' + cellMetadatum.x + ', y:' + cellMetadatum.y + ', width:' + cellMetadatum.width + ', height:' + cellMetadatum.height);
	    }

	    height = Math.max(height, cellMetadatum.y + cellMetadatum.height);
	    width = Math.max(width, cellMetadatum.x + cellMetadatum.width);

	    cellMetadata[index] = cellMetadatum;
	    sectionManager.registerCell({
	      cellMetadatum: cellMetadatum,
	      index: index
	    });
	  }

	  return {
	    cellMetadata: cellMetadata,
	    height: height,
	    sectionManager: sectionManager,
	    width: width
	  };
	}

	/**
	 * Determines a new offset that ensures a certain cell is visible, given the current offset.
	 * If the cell is already visible then the current offset will be returned.
	 * If the current offset is too great or small, it will be adjusted just enough to ensure the specified index is visible.
	 *
	 * @param align Desired alignment within container; one of "auto" (default), "start", or "end"
	 * @param cellOffset Offset (x or y) position for cell
	 * @param cellSize Size (width or height) of cell
	 * @param containerSize Total size (width or height) of the container
	 * @param currentOffset Container's current (x or y) offset
	 * @return Offset to use to ensure the specified cell is visible
	 */
	function getUpdatedOffsetForIndex(_ref) {
	  var _ref$align = _ref.align,
	      align = _ref$align === undefined ? 'auto' : _ref$align,
	      cellOffset = _ref.cellOffset,
	      cellSize = _ref.cellSize,
	      containerSize = _ref.containerSize,
	      currentOffset = _ref.currentOffset;

	  var maxOffset = cellOffset;
	  var minOffset = maxOffset - containerSize + cellSize;

	  switch (align) {
	    case 'start':
	      return maxOffset;
	    case 'end':
	      return minOffset;
	    case 'center':
	      return maxOffset - (containerSize - cellSize) / 2;
	    default:
	      return Math.max(minOffset, Math.min(maxOffset, currentOffset));
	  }
	}

	/**
	 * Renders scattered or non-linear data.
	 * Unlike Grid, which renders checkerboard data, Collection can render arbitrarily positioned- even overlapping- data.
	 */
	var Collection$1 = function (_React$PureComponent) {
	  _inherits$3(Collection, _React$PureComponent);

	  function Collection(props, context) {
	    _classCallCheck$8(this, Collection);

	    var _this = _possibleConstructorReturn$3(this, (Collection.__proto__ || _Object$getPrototypeOf(Collection)).call(this, props, context));

	    _this._cellMetadata = [];
	    _this._lastRenderedCellIndices = [];

	    // Cell cache during scroll (for perforamnce)
	    _this._cellCache = [];

	    _this._isScrollingChange = _this._isScrollingChange.bind(_this);
	    _this._setCollectionViewRef = _this._setCollectionViewRef.bind(_this);
	    return _this;
	  }

	  _createClass$7(Collection, [{
	    key: 'forceUpdate',
	    value: function forceUpdate() {
	      if (this._collectionView !== undefined) {
	        this._collectionView.forceUpdate();
	      }
	    }

	    /** See Collection#recomputeCellSizesAndPositions */

	  }, {
	    key: 'recomputeCellSizesAndPositions',
	    value: function recomputeCellSizesAndPositions() {
	      this._cellCache = [];
	      this._collectionView.recomputeCellSizesAndPositions();
	    }

	    /** React lifecycle methods */

	  }, {
	    key: 'render',
	    value: function render() {
	      var props = _objectWithoutProperties$4(this.props, []);

	      return React.createElement(CollectionView, _extends$5({
	        cellLayoutManager: this,
	        isScrollingChange: this._isScrollingChange,
	        ref: this._setCollectionViewRef
	      }, props));
	    }

	    /** CellLayoutManager interface */

	  }, {
	    key: 'calculateSizeAndPositionData',
	    value: function calculateSizeAndPositionData$1() {
	      var _props = this.props,
	          cellCount = _props.cellCount,
	          cellSizeAndPositionGetter = _props.cellSizeAndPositionGetter,
	          sectionSize = _props.sectionSize;


	      var data = calculateSizeAndPositionData({
	        cellCount: cellCount,
	        cellSizeAndPositionGetter: cellSizeAndPositionGetter,
	        sectionSize: sectionSize
	      });

	      this._cellMetadata = data.cellMetadata;
	      this._sectionManager = data.sectionManager;
	      this._height = data.height;
	      this._width = data.width;
	    }

	    /**
	     * Returns the most recently rendered set of cell indices.
	     */

	  }, {
	    key: 'getLastRenderedIndices',
	    value: function getLastRenderedIndices() {
	      return this._lastRenderedCellIndices;
	    }

	    /**
	     * Calculates the minimum amount of change from the current scroll position to ensure the specified cell is (fully) visible.
	     */

	  }, {
	    key: 'getScrollPositionForCell',
	    value: function getScrollPositionForCell(_ref) {
	      var align = _ref.align,
	          cellIndex = _ref.cellIndex,
	          height = _ref.height,
	          scrollLeft = _ref.scrollLeft,
	          scrollTop = _ref.scrollTop,
	          width = _ref.width;
	      var cellCount = this.props.cellCount;


	      if (cellIndex >= 0 && cellIndex < cellCount) {
	        var cellMetadata = this._cellMetadata[cellIndex];

	        scrollLeft = getUpdatedOffsetForIndex({
	          align: align,
	          cellOffset: cellMetadata.x,
	          cellSize: cellMetadata.width,
	          containerSize: width,
	          currentOffset: scrollLeft,
	          targetIndex: cellIndex
	        });

	        scrollTop = getUpdatedOffsetForIndex({
	          align: align,
	          cellOffset: cellMetadata.y,
	          cellSize: cellMetadata.height,
	          containerSize: height,
	          currentOffset: scrollTop,
	          targetIndex: cellIndex
	        });
	      }

	      return {
	        scrollLeft: scrollLeft,
	        scrollTop: scrollTop
	      };
	    }
	  }, {
	    key: 'getTotalSize',
	    value: function getTotalSize() {
	      return {
	        height: this._height,
	        width: this._width
	      };
	    }
	  }, {
	    key: 'cellRenderers',
	    value: function cellRenderers(_ref2) {
	      var _this2 = this;

	      var height = _ref2.height,
	          isScrolling = _ref2.isScrolling,
	          width = _ref2.width,
	          x = _ref2.x,
	          y = _ref2.y;
	      var _props2 = this.props,
	          cellGroupRenderer = _props2.cellGroupRenderer,
	          cellRenderer = _props2.cellRenderer;

	      // Store for later calls to getLastRenderedIndices()

	      this._lastRenderedCellIndices = this._sectionManager.getCellIndices({
	        height: height,
	        width: width,
	        x: x,
	        y: y
	      });

	      return cellGroupRenderer({
	        cellCache: this._cellCache,
	        cellRenderer: cellRenderer,
	        cellSizeAndPositionGetter: function cellSizeAndPositionGetter(_ref3) {
	          var index = _ref3.index;
	          return _this2._sectionManager.getCellMetadata({ index: index });
	        },
	        indices: this._lastRenderedCellIndices,
	        isScrolling: isScrolling
	      });
	    }
	  }, {
	    key: '_isScrollingChange',
	    value: function _isScrollingChange(isScrolling) {
	      if (!isScrolling) {
	        this._cellCache = [];
	      }
	    }
	  }, {
	    key: '_setCollectionViewRef',
	    value: function _setCollectionViewRef(ref) {
	      this._collectionView = ref;
	    }
	  }]);

	  return Collection;
	}(React.PureComponent);

	Collection$1.defaultProps = {
	  'aria-label': 'grid',
	  cellGroupRenderer: defaultCellGroupRenderer
	};
	Collection$1.propTypes = process.env.NODE_ENV !== "production" ? {
	  'aria-label': propTypes.string,

	  /**
	   * Number of cells in Collection.
	   */
	  cellCount: propTypes.number.isRequired,

	  /**
	   * Responsible for rendering a group of cells given their indices.
	   * Should implement the following interface: ({
	   *   cellSizeAndPositionGetter:Function,
	   *   indices: Array<number>,
	   *   cellRenderer: Function
	   * }): Array<PropTypes.node>
	   */
	  cellGroupRenderer: propTypes.func.isRequired,

	  /**
	   * Responsible for rendering a cell given an row and column index.
	   * Should implement the following interface: ({ index: number, key: string, style: object }): PropTypes.element
	   */
	  cellRenderer: propTypes.func.isRequired,

	  /**
	   * Callback responsible for returning size and offset/position information for a given cell (index).
	   * ({ index: number }): { height: number, width: number, x: number, y: number }
	   */
	  cellSizeAndPositionGetter: propTypes.func.isRequired,

	  /**
	   * Optionally override the size of the sections a Collection's cells are split into.
	   */
	  sectionSize: propTypes.number
	} : {};


	function defaultCellGroupRenderer(_ref4) {
	  var cellCache = _ref4.cellCache,
	      cellRenderer = _ref4.cellRenderer,
	      cellSizeAndPositionGetter = _ref4.cellSizeAndPositionGetter,
	      indices = _ref4.indices,
	      isScrolling = _ref4.isScrolling;

	  return indices.map(function (index) {
	    var cellMetadata = cellSizeAndPositionGetter({ index: index });

	    var cellRendererProps = {
	      index: index,
	      isScrolling: isScrolling,
	      key: index,
	      style: {
	        height: cellMetadata.height,
	        left: cellMetadata.x,
	        position: 'absolute',
	        top: cellMetadata.y,
	        width: cellMetadata.width
	      }
	    };

	    // Avoid re-creating cells while scrolling.
	    // This can lead to the same cell being created many times and can cause performance issues for "heavy" cells.
	    // If a scroll is in progress- cache and reuse cells.
	    // This cache will be thrown away once scrolling complets.
	    if (isScrolling) {
	      if (!(index in cellCache)) {
	        cellCache[index] = cellRenderer(cellRendererProps);
	      }

	      return cellCache[index];
	    } else {
	      return cellRenderer(cellRendererProps);
	    }
	  }).filter(function (renderedCell) {
	    return !!renderedCell;
	  });
	}

	/**
	 * High-order component that auto-calculates column-widths for `Grid` cells.
	 */

	var ColumnSizer = function (_React$PureComponent) {
	  _inherits$3(ColumnSizer, _React$PureComponent);

	  function ColumnSizer(props, context) {
	    _classCallCheck$8(this, ColumnSizer);

	    var _this = _possibleConstructorReturn$3(this, (ColumnSizer.__proto__ || _Object$getPrototypeOf(ColumnSizer)).call(this, props, context));

	    _this._registerChild = _this._registerChild.bind(_this);
	    return _this;
	  }

	  _createClass$7(ColumnSizer, [{
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps) {
	      var _props = this.props,
	          columnMaxWidth = _props.columnMaxWidth,
	          columnMinWidth = _props.columnMinWidth,
	          columnCount = _props.columnCount,
	          width = _props.width;


	      if (columnMaxWidth !== prevProps.columnMaxWidth || columnMinWidth !== prevProps.columnMinWidth || columnCount !== prevProps.columnCount || width !== prevProps.width) {
	        if (this._registeredChild) {
	          this._registeredChild.recomputeGridSize();
	        }
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props2 = this.props,
	          children = _props2.children,
	          columnMaxWidth = _props2.columnMaxWidth,
	          columnMinWidth = _props2.columnMinWidth,
	          columnCount = _props2.columnCount,
	          width = _props2.width;


	      var safeColumnMinWidth = columnMinWidth || 1;

	      var safeColumnMaxWidth = columnMaxWidth ? Math.min(columnMaxWidth, width) : width;

	      var columnWidth = width / columnCount;
	      columnWidth = Math.max(safeColumnMinWidth, columnWidth);
	      columnWidth = Math.min(safeColumnMaxWidth, columnWidth);
	      columnWidth = Math.floor(columnWidth);

	      var adjustedWidth = Math.min(width, columnWidth * columnCount);

	      return children({
	        adjustedWidth: adjustedWidth,
	        columnWidth: columnWidth,
	        getColumnWidth: function getColumnWidth() {
	          return columnWidth;
	        },
	        registerChild: this._registerChild
	      });
	    }
	  }, {
	    key: '_registerChild',
	    value: function _registerChild(child) {
	      if (child && typeof child.recomputeGridSize !== 'function') {
	        throw Error('Unexpected child type registered; only Grid/MultiGrid children are supported.');
	      }

	      this._registeredChild = child;

	      if (this._registeredChild) {
	        this._registeredChild.recomputeGridSize();
	      }
	    }
	  }]);

	  return ColumnSizer;
	}(React.PureComponent);
	ColumnSizer.propTypes = process.env.NODE_ENV !== "production" ? {
	  /**
	   * Function responsible for rendering a virtualized Grid.
	   * This function should implement the following signature:
	   * ({ adjustedWidth, getColumnWidth, registerChild }) => PropTypes.element
	   *
	   * The specified :getColumnWidth function should be passed to the Grid's :columnWidth property.
	   * The :registerChild should be passed to the Grid's :ref property.
	   * The :adjustedWidth property is optional; it reflects the lesser of the overall width or the width of all columns.
	   */
	  children: propTypes.func.isRequired,

	  /** Optional maximum allowed column width */
	  columnMaxWidth: propTypes.number,

	  /** Optional minimum allowed column width */
	  columnMinWidth: propTypes.number,

	  /** Number of columns in Grid or Table child */
	  columnCount: propTypes.number.isRequired,

	  /** Width of Grid or Table child */
	  width: propTypes.number.isRequired
	} : {};

	var _createProperty = function (object, index, value) {
	  if (index in object) _objectDp.f(object, index, _propertyDesc(0, value));
	  else object[index] = value;
	};

	_export(_export.S + _export.F * !_iterDetect(function (iter) { Array.from(iter); }), 'Array', {
	  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)
	  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
	    var O = _toObject(arrayLike);
	    var C = typeof this == 'function' ? this : Array;
	    var aLen = arguments.length;
	    var mapfn = aLen > 1 ? arguments[1] : undefined;
	    var mapping = mapfn !== undefined;
	    var index = 0;
	    var iterFn = core_getIteratorMethod(O);
	    var length, result, step, iterator;
	    if (mapping) mapfn = _ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);
	    // if object isn't iterable or it's array with default iterator - use simple case
	    if (iterFn != undefined && !(C == Array && _isArrayIter(iterFn))) {
	      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {
	        _createProperty(result, index, mapping ? _iterCall(iterator, mapfn, [step.value, index], true) : step.value);
	      }
	    } else {
	      length = _toLength(O.length);
	      for (result = new C(length); length > index; index++) {
	        _createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);
	      }
	    }
	    result.length = index;
	    return result;
	  }
	});

	var from_1 = _core.Array.from;

	var from_1$1 = createCommonjsModule(function (module) {
	module.exports = { "default": from_1, __esModule: true };
	});

	unwrapExports(from_1$1);

	var toConsumableArray = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;



	var _from2 = _interopRequireDefault(from_1$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function (arr) {
	  if (Array.isArray(arr)) {
	    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
	      arr2[i] = arr[i];
	    }

	    return arr2;
	  } else {
	    return (0, _from2.default)(arr);
	  }
	};
	});

	var _toConsumableArray$2 = unwrapExports(toConsumableArray);

	/**
	 * Higher-order component that manages lazy-loading for "infinite" data.
	 * This component decorates a virtual component and just-in-time prefetches rows as a user scrolls.
	 * It is intended as a convenience component; fork it if you'd like finer-grained control over data-loading.
	 */

	var InfiniteLoader = function (_React$PureComponent) {
	  _inherits$3(InfiniteLoader, _React$PureComponent);

	  function InfiniteLoader(props, context) {
	    _classCallCheck$8(this, InfiniteLoader);

	    var _this = _possibleConstructorReturn$3(this, (InfiniteLoader.__proto__ || _Object$getPrototypeOf(InfiniteLoader)).call(this, props, context));

	    _this._loadMoreRowsMemoizer = createCallbackMemoizer();

	    _this._onRowsRendered = _this._onRowsRendered.bind(_this);
	    _this._registerChild = _this._registerChild.bind(_this);
	    return _this;
	  }

	  _createClass$7(InfiniteLoader, [{
	    key: 'resetLoadMoreRowsCache',
	    value: function resetLoadMoreRowsCache(autoReload) {
	      this._loadMoreRowsMemoizer = createCallbackMemoizer();

	      if (autoReload) {
	        this._doStuff(this._lastRenderedStartIndex, this._lastRenderedStopIndex);
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var children = this.props.children;


	      return children({
	        onRowsRendered: this._onRowsRendered,
	        registerChild: this._registerChild
	      });
	    }
	  }, {
	    key: '_loadUnloadedRanges',
	    value: function _loadUnloadedRanges(unloadedRanges) {
	      var _this2 = this;

	      var loadMoreRows = this.props.loadMoreRows;


	      unloadedRanges.forEach(function (unloadedRange) {
	        var promise = loadMoreRows(unloadedRange);
	        if (promise) {
	          promise.then(function () {
	            // Refresh the visible rows if any of them have just been loaded.
	            // Otherwise they will remain in their unloaded visual state.
	            if (isRangeVisible({
	              lastRenderedStartIndex: _this2._lastRenderedStartIndex,
	              lastRenderedStopIndex: _this2._lastRenderedStopIndex,
	              startIndex: unloadedRange.startIndex,
	              stopIndex: unloadedRange.stopIndex
	            })) {
	              if (_this2._registeredChild) {
	                forceUpdateReactVirtualizedComponent(_this2._registeredChild, _this2._lastRenderedStartIndex);
	              }
	            }
	          });
	        }
	      });
	    }
	  }, {
	    key: '_onRowsRendered',
	    value: function _onRowsRendered(_ref) {
	      var startIndex = _ref.startIndex,
	          stopIndex = _ref.stopIndex;

	      this._lastRenderedStartIndex = startIndex;
	      this._lastRenderedStopIndex = stopIndex;

	      this._doStuff(startIndex, stopIndex);
	    }
	  }, {
	    key: '_doStuff',
	    value: function _doStuff(startIndex, stopIndex) {
	      var _ref2,
	          _this3 = this;

	      var _props = this.props,
	          isRowLoaded = _props.isRowLoaded,
	          minimumBatchSize = _props.minimumBatchSize,
	          rowCount = _props.rowCount,
	          threshold = _props.threshold;


	      var unloadedRanges = scanForUnloadedRanges({
	        isRowLoaded: isRowLoaded,
	        minimumBatchSize: minimumBatchSize,
	        rowCount: rowCount,
	        startIndex: Math.max(0, startIndex - threshold),
	        stopIndex: Math.min(rowCount - 1, stopIndex + threshold)
	      });

	      // For memoize comparison
	      var squashedUnloadedRanges = (_ref2 = []).concat.apply(_ref2, _toConsumableArray$2(unloadedRanges.map(function (_ref3) {
	        var startIndex = _ref3.startIndex,
	            stopIndex = _ref3.stopIndex;
	        return [startIndex, stopIndex];
	      })));

	      this._loadMoreRowsMemoizer({
	        callback: function callback() {
	          _this3._loadUnloadedRanges(unloadedRanges);
	        },
	        indices: { squashedUnloadedRanges: squashedUnloadedRanges }
	      });
	    }
	  }, {
	    key: '_registerChild',
	    value: function _registerChild(registeredChild) {
	      this._registeredChild = registeredChild;
	    }
	  }]);

	  return InfiniteLoader;
	}(React.PureComponent);

	/**
	 * Determines if the specified start/stop range is visible based on the most recently rendered range.
	 */


	InfiniteLoader.defaultProps = {
	  minimumBatchSize: 10,
	  rowCount: 0,
	  threshold: 15
	};
	InfiniteLoader.propTypes = process.env.NODE_ENV !== "production" ? {
	  /**
	   * Function responsible for rendering a virtualized component.
	   * This function should implement the following signature:
	   * ({ onRowsRendered, registerChild }) => PropTypes.element
	   *
	   * The specified :onRowsRendered function should be passed through to the child's :onRowsRendered property.
	   * The :registerChild callback should be set as the virtualized component's :ref.
	   */
	  children: propTypes.func.isRequired,

	  /**
	   * Function responsible for tracking the loaded state of each row.
	   * It should implement the following signature: ({ index: number }): boolean
	   */
	  isRowLoaded: propTypes.func.isRequired,

	  /**
	   * Callback to be invoked when more rows must be loaded.
	   * It should implement the following signature: ({ startIndex, stopIndex }): Promise
	   * The returned Promise should be resolved once row data has finished loading.
	   * It will be used to determine when to refresh the list with the newly-loaded data.
	   * This callback may be called multiple times in reaction to a single scroll event.
	   */
	  loadMoreRows: propTypes.func.isRequired,

	  /**
	   * Minimum number of rows to be loaded at a time.
	   * This property can be used to batch requests to reduce HTTP requests.
	   */
	  minimumBatchSize: propTypes.number.isRequired,

	  /**
	   * Number of rows in list; can be arbitrary high number if actual number is unknown.
	   */
	  rowCount: propTypes.number.isRequired,

	  /**
	   * Threshold at which to pre-fetch data.
	   * A threshold X means that data will start loading when a user scrolls within X rows.
	   * This value defaults to 15.
	   */
	  threshold: propTypes.number.isRequired
	} : {};
	function isRangeVisible(_ref4) {
	  var lastRenderedStartIndex = _ref4.lastRenderedStartIndex,
	      lastRenderedStopIndex = _ref4.lastRenderedStopIndex,
	      startIndex = _ref4.startIndex,
	      stopIndex = _ref4.stopIndex;

	  return !(startIndex > lastRenderedStopIndex || stopIndex < lastRenderedStartIndex);
	}

	/**
	 * Returns all of the ranges within a larger range that contain unloaded rows.
	 */
	function scanForUnloadedRanges(_ref5) {
	  var isRowLoaded = _ref5.isRowLoaded,
	      minimumBatchSize = _ref5.minimumBatchSize,
	      rowCount = _ref5.rowCount,
	      startIndex = _ref5.startIndex,
	      stopIndex = _ref5.stopIndex;

	  var unloadedRanges = [];

	  var rangeStartIndex = null;
	  var rangeStopIndex = null;

	  for (var index = startIndex; index <= stopIndex; index++) {
	    var loaded = isRowLoaded({ index: index });

	    if (!loaded) {
	      rangeStopIndex = index;
	      if (rangeStartIndex === null) {
	        rangeStartIndex = index;
	      }
	    } else if (rangeStopIndex !== null) {
	      unloadedRanges.push({
	        startIndex: rangeStartIndex,
	        stopIndex: rangeStopIndex
	      });

	      rangeStartIndex = rangeStopIndex = null;
	    }
	  }

	  // If :rangeStopIndex is not null it means we haven't ran out of unloaded rows.
	  // Scan forward to try filling our :minimumBatchSize.
	  if (rangeStopIndex !== null) {
	    var potentialStopIndex = Math.min(Math.max(rangeStopIndex, rangeStartIndex + minimumBatchSize - 1), rowCount - 1);

	    for (var _index = rangeStopIndex + 1; _index <= potentialStopIndex; _index++) {
	      if (!isRowLoaded({ index: _index })) {
	        rangeStopIndex = _index;
	      } else {
	        break;
	      }
	    }

	    unloadedRanges.push({
	      startIndex: rangeStartIndex,
	      stopIndex: rangeStopIndex
	    });
	  }

	  // Check to see if our first range ended prematurely.
	  // In this case we should scan backwards to try filling our :minimumBatchSize.
	  if (unloadedRanges.length) {
	    var firstUnloadedRange = unloadedRanges[0];

	    while (firstUnloadedRange.stopIndex - firstUnloadedRange.startIndex + 1 < minimumBatchSize && firstUnloadedRange.startIndex > 0) {
	      var _index2 = firstUnloadedRange.startIndex - 1;

	      if (!isRowLoaded({ index: _index2 })) {
	        firstUnloadedRange.startIndex = _index2;
	      } else {
	        break;
	      }
	    }
	  }

	  return unloadedRanges;
	}

	/**
	 * Since RV components use shallowCompare we need to force a render (even though props haven't changed).
	 * However InfiniteLoader may wrap a Grid or it may wrap a Table or List.
	 * In the first case the built-in React forceUpdate() method is sufficient to force a re-render,
	 * But in the latter cases we need to use the RV-specific forceUpdateGrid() method.
	 * Else the inner Grid will not be re-rendered and visuals may be stale.
	 *
	 * Additionally, while a Grid is scrolling the cells can be cached,
	 * So it's important to invalidate that cache by recalculating sizes
	 * before forcing a rerender.
	 */
	function forceUpdateReactVirtualizedComponent(component) {
	  var currentIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

	  var recomputeSize = typeof component.recomputeGridSize === 'function' ? component.recomputeGridSize : component.recomputeRowHeights;

	  if (recomputeSize) {
	    recomputeSize.call(component, currentIndex);
	  } else {
	    component.forceUpdate();
	  }
	}

	// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)

	var $getOwnPropertyDescriptor$1 = _objectGopd.f;

	_objectSap('getOwnPropertyDescriptor', function () {
	  return function getOwnPropertyDescriptor(it, key) {
	    return $getOwnPropertyDescriptor$1(_toIobject(it), key);
	  };
	});

	var $Object$2 = _core.Object;
	var getOwnPropertyDescriptor$1 = function getOwnPropertyDescriptor(it, key) {
	  return $Object$2.getOwnPropertyDescriptor(it, key);
	};

	var getOwnPropertyDescriptor$2 = createCommonjsModule(function (module) {
	module.exports = { "default": getOwnPropertyDescriptor$1, __esModule: true };
	});

	var _Object$getOwnPropertyDescriptor = unwrapExports(getOwnPropertyDescriptor$2);

	var bpfrpt_proptype_RowRendererParams = process.env.NODE_ENV === 'production' ? null : {
	  index: propTypes.number.isRequired,
	  isScrolling: propTypes.bool.isRequired,
	  isVisible: propTypes.bool.isRequired,
	  key: propTypes.string.isRequired,
	  parent: propTypes.object.isRequired,
	  style: propTypes.object.isRequired
	};
	var bpfrpt_proptype_RowRenderer = process.env.NODE_ENV === 'production' ? null : propTypes.func;
	var bpfrpt_proptype_RenderedRows = process.env.NODE_ENV === 'production' ? null : {
	  overscanStartIndex: propTypes.number.isRequired,
	  overscanStopIndex: propTypes.number.isRequired,
	  startIndex: propTypes.number.isRequired,
	  stopIndex: propTypes.number.isRequired
	};
	var bpfrpt_proptype_Scroll$1 = process.env.NODE_ENV === 'production' ? null : {
	  clientHeight: propTypes.number.isRequired,
	  scrollHeight: propTypes.number.isRequired,
	  scrollTop: propTypes.number.isRequired
	};

	/**
	 * It is inefficient to create and manage a large list of DOM elements within a scrolling container
	 * if only a few of those elements are visible. The primary purpose of this component is to improve
	 * performance by only rendering the DOM nodes that a user is able to see based on their current
	 * scroll position.
	 *
	 * This component renders a virtualized list of elements with either fixed or dynamic heights.
	 */

	var List$2 = function (_React$PureComponent) {
	  _inherits$3(List, _React$PureComponent);

	  function List() {
	    var _ref;

	    var _temp, _this, _ret;

	    _classCallCheck$8(this, List);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn$3(this, (_ref = List.__proto__ || _Object$getPrototypeOf(List)).call.apply(_ref, [this].concat(args))), _this), _this._cellRenderer = function (_ref2) {
	      var parent = _ref2.parent,
	          rowIndex = _ref2.rowIndex,
	          style = _ref2.style,
	          isScrolling = _ref2.isScrolling,
	          isVisible = _ref2.isVisible,
	          key = _ref2.key;
	      var rowRenderer = _this.props.rowRenderer;

	      // TRICKY The style object is sometimes cached by Grid.
	      // This prevents new style objects from bypassing shallowCompare().
	      // However as of React 16, style props are auto-frozen (at least in dev mode)
	      // Check to make sure we can still modify the style before proceeding.
	      // https://github.com/facebook/react/commit/977357765b44af8ff0cfea327866861073095c12#commitcomment-20648713

	      var _Object$getOwnPropert = _Object$getOwnPropertyDescriptor(style, 'width'),
	          writable = _Object$getOwnPropert.writable;

	      if (writable) {
	        // By default, List cells should be 100% width.
	        // This prevents them from flowing under a scrollbar (if present).
	        style.width = '100%';
	      }

	      return rowRenderer({
	        index: rowIndex,
	        style: style,
	        isScrolling: isScrolling,
	        isVisible: isVisible,
	        key: key,
	        parent: parent
	      });
	    }, _this._setRef = function (ref) {
	      _this.Grid = ref;
	    }, _this._onScroll = function (_ref3) {
	      var clientHeight = _ref3.clientHeight,
	          scrollHeight = _ref3.scrollHeight,
	          scrollTop = _ref3.scrollTop;
	      var onScroll = _this.props.onScroll;


	      onScroll({ clientHeight: clientHeight, scrollHeight: scrollHeight, scrollTop: scrollTop });
	    }, _this._onSectionRendered = function (_ref4) {
	      var rowOverscanStartIndex = _ref4.rowOverscanStartIndex,
	          rowOverscanStopIndex = _ref4.rowOverscanStopIndex,
	          rowStartIndex = _ref4.rowStartIndex,
	          rowStopIndex = _ref4.rowStopIndex;
	      var onRowsRendered = _this.props.onRowsRendered;


	      onRowsRendered({
	        overscanStartIndex: rowOverscanStartIndex,
	        overscanStopIndex: rowOverscanStopIndex,
	        startIndex: rowStartIndex,
	        stopIndex: rowStopIndex
	      });
	    }, _temp), _possibleConstructorReturn$3(_this, _ret);
	  }

	  _createClass$7(List, [{
	    key: 'forceUpdateGrid',
	    value: function forceUpdateGrid() {
	      if (this.Grid) {
	        this.Grid.forceUpdate();
	      }
	    }

	    /** See Grid#getOffsetForCell */

	  }, {
	    key: 'getOffsetForRow',
	    value: function getOffsetForRow(_ref5) {
	      var alignment = _ref5.alignment,
	          index = _ref5.index;

	      if (this.Grid) {
	        var _Grid$getOffsetForCel = this.Grid.getOffsetForCell({
	          alignment: alignment,
	          rowIndex: index,
	          columnIndex: 0
	        }),
	            _scrollTop = _Grid$getOffsetForCel.scrollTop;

	        return _scrollTop;
	      }
	      return 0;
	    }

	    /** CellMeasurer compatibility */

	  }, {
	    key: 'invalidateCellSizeAfterRender',
	    value: function invalidateCellSizeAfterRender(_ref6) {
	      var columnIndex = _ref6.columnIndex,
	          rowIndex = _ref6.rowIndex;

	      if (this.Grid) {
	        this.Grid.invalidateCellSizeAfterRender({
	          rowIndex: rowIndex,
	          columnIndex: columnIndex
	        });
	      }
	    }

	    /** See Grid#measureAllCells */

	  }, {
	    key: 'measureAllRows',
	    value: function measureAllRows() {
	      if (this.Grid) {
	        this.Grid.measureAllCells();
	      }
	    }

	    /** CellMeasurer compatibility */

	  }, {
	    key: 'recomputeGridSize',
	    value: function recomputeGridSize() {
	      var _ref7 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	          _ref7$columnIndex = _ref7.columnIndex,
	          columnIndex = _ref7$columnIndex === undefined ? 0 : _ref7$columnIndex,
	          _ref7$rowIndex = _ref7.rowIndex,
	          rowIndex = _ref7$rowIndex === undefined ? 0 : _ref7$rowIndex;

	      if (this.Grid) {
	        this.Grid.recomputeGridSize({
	          rowIndex: rowIndex,
	          columnIndex: columnIndex
	        });
	      }
	    }

	    /** See Grid#recomputeGridSize */

	  }, {
	    key: 'recomputeRowHeights',
	    value: function recomputeRowHeights() {
	      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

	      if (this.Grid) {
	        this.Grid.recomputeGridSize({
	          rowIndex: index,
	          columnIndex: 0
	        });
	      }
	    }

	    /** See Grid#scrollToPosition */

	  }, {
	    key: 'scrollToPosition',
	    value: function scrollToPosition() {
	      var scrollTop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

	      if (this.Grid) {
	        this.Grid.scrollToPosition({ scrollTop: scrollTop });
	      }
	    }

	    /** See Grid#scrollToCell */

	  }, {
	    key: 'scrollToRow',
	    value: function scrollToRow() {
	      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

	      if (this.Grid) {
	        this.Grid.scrollToCell({
	          columnIndex: 0,
	          rowIndex: index
	        });
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props = this.props,
	          className = _props.className,
	          noRowsRenderer = _props.noRowsRenderer,
	          scrollToIndex = _props.scrollToIndex,
	          width = _props.width;


	      var classNames = clsx('ReactVirtualized__List', className);

	      return React.createElement(Grid$1, _extends$5({}, this.props, {
	        autoContainerWidth: true,
	        cellRenderer: this._cellRenderer,
	        className: classNames,
	        columnWidth: width,
	        columnCount: 1,
	        noContentRenderer: noRowsRenderer,
	        onScroll: this._onScroll,
	        onSectionRendered: this._onSectionRendered,
	        ref: this._setRef,
	        scrollToRow: scrollToIndex
	      }));
	    }
	  }]);

	  return List;
	}(React.PureComponent);

	List$2.defaultProps = {
	  autoHeight: false,
	  estimatedRowSize: 30,
	  onScroll: function onScroll() {},
	  noRowsRenderer: function noRowsRenderer() {
	    return null;
	  },
	  onRowsRendered: function onRowsRendered() {},
	  overscanIndicesGetter: defaultOverscanIndicesGetter$1,
	  overscanRowCount: 10,
	  scrollToAlignment: 'auto',
	  scrollToIndex: -1,
	  style: {}
	};
	List$2.propTypes = process.env.NODE_ENV === 'production' ? null : {
	  "aria-label": propTypes.string,


	  /**
	   * Removes fixed height from the scrollingContainer so that the total height
	   * of rows can stretch the window. Intended for use with WindowScroller
	   */
	  autoHeight: propTypes.bool.isRequired,


	  /** Optional CSS class name */
	  className: propTypes.string,


	  /**
	   * Used to estimate the total height of a List before all of its rows have actually been measured.
	   * The estimated total height is adjusted as rows are rendered.
	   */
	  estimatedRowSize: propTypes.number.isRequired,


	  /** Height constraint for list (determines how many actual rows are rendered) */
	  height: propTypes.number.isRequired,


	  /** Optional renderer to be used in place of rows when rowCount is 0 */
	  noRowsRenderer: function noRowsRenderer() {
	    return (typeof bpfrpt_proptype_NoContentRenderer === 'function' ? bpfrpt_proptype_NoContentRenderer.isRequired ? bpfrpt_proptype_NoContentRenderer.isRequired : bpfrpt_proptype_NoContentRenderer : propTypes.shape(bpfrpt_proptype_NoContentRenderer).isRequired).apply(this, arguments);
	  },


	  /** Callback invoked with information about the slice of rows that were just rendered.  */

	  onRowsRendered: propTypes.func.isRequired,


	  /**
	   * Callback invoked whenever the scroll offset changes within the inner scrollable region.
	   * This callback can be used to sync scrolling between lists, tables, or grids.
	   */
	  onScroll: propTypes.func.isRequired,


	  /** See Grid#overscanIndicesGetter */
	  overscanIndicesGetter: function overscanIndicesGetter() {
	    return (typeof bpfrpt_proptype_OverscanIndicesGetter === 'function' ? bpfrpt_proptype_OverscanIndicesGetter.isRequired ? bpfrpt_proptype_OverscanIndicesGetter.isRequired : bpfrpt_proptype_OverscanIndicesGetter : propTypes.shape(bpfrpt_proptype_OverscanIndicesGetter).isRequired).apply(this, arguments);
	  },


	  /**
	   * Number of rows to render above/below the visible bounds of the list.
	   * These rows can help for smoother scrolling on touch devices.
	   */
	  overscanRowCount: propTypes.number.isRequired,


	  /** Either a fixed row height (number) or a function that returns the height of a row given its index.  */
	  rowHeight: function rowHeight() {
	    return (typeof bpfrpt_proptype_CellSize === 'function' ? bpfrpt_proptype_CellSize.isRequired ? bpfrpt_proptype_CellSize.isRequired : bpfrpt_proptype_CellSize : propTypes.shape(bpfrpt_proptype_CellSize).isRequired).apply(this, arguments);
	  },


	  /** Responsible for rendering a row given an index; ({ index: number }): node */
	  rowRenderer: function rowRenderer() {
	    return (typeof bpfrpt_proptype_RowRenderer === 'function' ? bpfrpt_proptype_RowRenderer.isRequired ? bpfrpt_proptype_RowRenderer.isRequired : bpfrpt_proptype_RowRenderer : propTypes.shape(bpfrpt_proptype_RowRenderer).isRequired).apply(this, arguments);
	  },


	  /** Number of rows in list. */
	  rowCount: propTypes.number.isRequired,


	  /** See Grid#scrollToAlignment */
	  scrollToAlignment: function scrollToAlignment() {
	    return (typeof bpfrpt_proptype_Alignment === 'function' ? bpfrpt_proptype_Alignment.isRequired ? bpfrpt_proptype_Alignment.isRequired : bpfrpt_proptype_Alignment : propTypes.shape(bpfrpt_proptype_Alignment).isRequired).apply(this, arguments);
	  },


	  /** Row index to ensure visible (by forcefully scrolling if necessary) */
	  scrollToIndex: propTypes.number.isRequired,


	  /** Vertical offset. */
	  scrollTop: propTypes.number,


	  /** Optional inline style */
	  style: propTypes.object.isRequired,


	  /** Tab index for focus */
	  tabIndex: propTypes.number,


	  /** Width of list */
	  width: propTypes.number.isRequired
	};

	var defineProperty$5 = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;



	var _defineProperty2 = _interopRequireDefault(defineProperty$3);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function (obj, key, value) {
	  if (key in obj) {
	    (0, _defineProperty2.default)(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	};
	});

	var _defineProperty$8 = unwrapExports(defineProperty$5);

	var ITERATOR$4 = _wks('iterator');

	var core_isIterable = _core.isIterable = function (it) {
	  var O = Object(it);
	  return O[ITERATOR$4] !== undefined
	    || '@@iterator' in O
	    // eslint-disable-next-line no-prototype-builtins
	    || _iterators.hasOwnProperty(_classof(O));
	};

	var isIterable = core_isIterable;

	var isIterable$1 = createCommonjsModule(function (module) {
	module.exports = { "default": isIterable, __esModule: true };
	});

	unwrapExports(isIterable$1);

	var core_getIterator = _core.getIterator = function (it) {
	  var iterFn = core_getIteratorMethod(it);
	  if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');
	  return _anObject(iterFn.call(it));
	};

	var getIterator = core_getIterator;

	var getIterator$1 = createCommonjsModule(function (module) {
	module.exports = { "default": getIterator, __esModule: true };
	});

	unwrapExports(getIterator$1);

	var slicedToArray = createCommonjsModule(function (module, exports) {

	exports.__esModule = true;



	var _isIterable3 = _interopRequireDefault(isIterable$1);



	var _getIterator3 = _interopRequireDefault(getIterator$1);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	exports.default = function () {
	  function sliceIterator(arr, i) {
	    var _arr = [];
	    var _n = true;
	    var _d = false;
	    var _e = undefined;

	    try {
	      for (var _i = (0, _getIterator3.default)(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {
	        _arr.push(_s.value);

	        if (i && _arr.length === i) break;
	      }
	    } catch (err) {
	      _d = true;
	      _e = err;
	    } finally {
	      try {
	        if (!_n && _i["return"]) _i["return"]();
	      } finally {
	        if (_d) throw _e;
	      }
	    }

	    return _arr;
	  }

	  return function (arr, i) {
	    if (Array.isArray(arr)) {
	      return arr;
	    } else if ((0, _isIterable3.default)(Object(arr))) {
	      return sliceIterator(arr, i);
	    } else {
	      throw new TypeError("Invalid attempt to destructure non-iterable instance");
	    }
	  };
	}();
	});

	var _slicedToArray$4 = unwrapExports(slicedToArray);

	/**
	 * Binary Search Bounds
	 * https://github.com/mikolalysenko/binary-search-bounds
	 * Mikola Lysenko
	 *
	 * Inlined because of Content Security Policy issue caused by the use of `new Function(...)` syntax.
	 * Issue reported here: https://github.com/mikolalysenko/binary-search-bounds/issues/5
	 **/

	function _GEA(a, l, h, y) {
	  var i = h + 1;
	  while (l <= h) {
	    var m = l + h >>> 1,
	        x = a[m];
	    if (x >= y) {
	      i = m;
	      h = m - 1;
	    } else {
	      l = m + 1;
	    }
	  }
	  return i;
	}
	function _GEP(a, l, h, y, c) {
	  var i = h + 1;
	  while (l <= h) {
	    var m = l + h >>> 1,
	        x = a[m];
	    if (c(x, y) >= 0) {
	      i = m;
	      h = m - 1;
	    } else {
	      l = m + 1;
	    }
	  }
	  return i;
	}
	function dispatchBsearchGE(a, y, c, l, h) {
	  if (typeof c === 'function') {
	    return _GEP(a, l === void 0 ? 0 : l | 0, h === void 0 ? a.length - 1 : h | 0, y, c);
	  } else {
	    return _GEA(a, c === void 0 ? 0 : c | 0, l === void 0 ? a.length - 1 : l | 0, y);
	  }
	}

	function _GTA(a, l, h, y) {
	  var i = h + 1;
	  while (l <= h) {
	    var m = l + h >>> 1,
	        x = a[m];
	    if (x > y) {
	      i = m;
	      h = m - 1;
	    } else {
	      l = m + 1;
	    }
	  }
	  return i;
	}
	function _GTP(a, l, h, y, c) {
	  var i = h + 1;
	  while (l <= h) {
	    var m = l + h >>> 1,
	        x = a[m];
	    if (c(x, y) > 0) {
	      i = m;
	      h = m - 1;
	    } else {
	      l = m + 1;
	    }
	  }
	  return i;
	}
	function dispatchBsearchGT(a, y, c, l, h) {
	  if (typeof c === 'function') {
	    return _GTP(a, l === void 0 ? 0 : l | 0, h === void 0 ? a.length - 1 : h | 0, y, c);
	  } else {
	    return _GTA(a, c === void 0 ? 0 : c | 0, l === void 0 ? a.length - 1 : l | 0, y);
	  }
	}

	function _LTA(a, l, h, y) {
	  var i = l - 1;
	  while (l <= h) {
	    var m = l + h >>> 1,
	        x = a[m];
	    if (x < y) {
	      i = m;
	      l = m + 1;
	    } else {
	      h = m - 1;
	    }
	  }
	  return i;
	}
	function _LTP(a, l, h, y, c) {
	  var i = l - 1;
	  while (l <= h) {
	    var m = l + h >>> 1,
	        x = a[m];
	    if (c(x, y) < 0) {
	      i = m;
	      l = m + 1;
	    } else {
	      h = m - 1;
	    }
	  }
	  return i;
	}
	function dispatchBsearchLT(a, y, c, l, h) {
	  if (typeof c === 'function') {
	    return _LTP(a, l === void 0 ? 0 : l | 0, h === void 0 ? a.length - 1 : h | 0, y, c);
	  } else {
	    return _LTA(a, c === void 0 ? 0 : c | 0, l === void 0 ? a.length - 1 : l | 0, y);
	  }
	}

	function _LEA(a, l, h, y) {
	  var i = l - 1;
	  while (l <= h) {
	    var m = l + h >>> 1,
	        x = a[m];
	    if (x <= y) {
	      i = m;
	      l = m + 1;
	    } else {
	      h = m - 1;
	    }
	  }
	  return i;
	}
	function _LEP(a, l, h, y, c) {
	  var i = l - 1;
	  while (l <= h) {
	    var m = l + h >>> 1,
	        x = a[m];
	    if (c(x, y) <= 0) {
	      i = m;
	      l = m + 1;
	    } else {
	      h = m - 1;
	    }
	  }
	  return i;
	}
	function dispatchBsearchLE(a, y, c, l, h) {
	  if (typeof c === 'function') {
	    return _LEP(a, l === void 0 ? 0 : l | 0, h === void 0 ? a.length - 1 : h | 0, y, c);
	  } else {
	    return _LEA(a, c === void 0 ? 0 : c | 0, l === void 0 ? a.length - 1 : l | 0, y);
	  }
	}

	function _EQA(a, l, h, y) {
	  while (l <= h) {
	    var m = l + h >>> 1,
	        x = a[m];
	    if (x === y) {
	      return m;
	    } else if (x <= y) {
	      l = m + 1;
	    } else {
	      h = m - 1;
	    }
	  }
	  return -1;
	}
	function _EQP(a, l, h, y, c) {
	  while (l <= h) {
	    var m = l + h >>> 1,
	        x = a[m];
	    var p = c(x, y);
	    if (p === 0) {
	      return m;
	    } else if (p <= 0) {
	      l = m + 1;
	    } else {
	      h = m - 1;
	    }
	  }
	  return -1;
	}
	function dispatchBsearchEQ(a, y, c, l, h) {
	  if (typeof c === 'function') {
	    return _EQP(a, l === void 0 ? 0 : l | 0, h === void 0 ? a.length - 1 : h | 0, y, c);
	  } else {
	    return _EQA(a, c === void 0 ? 0 : c | 0, l === void 0 ? a.length - 1 : l | 0, y);
	  }
	}

	var bounds = {
	  ge: dispatchBsearchGE,
	  gt: dispatchBsearchGT,
	  lt: dispatchBsearchLT,
	  le: dispatchBsearchLE,
	  eq: dispatchBsearchEQ
	};

	/**
	 * Binary Search Bounds
	 * https://github.com/mikolalysenko/interval-tree-1d
	 * Mikola Lysenko
	 *
	 * Inlined because of Content Security Policy issue caused by the use of `new Function(...)` syntax in an upstream dependency.
	 * Issue reported here: https://github.com/mikolalysenko/binary-search-bounds/issues/5
	 **/

	var NOT_FOUND = 0;
	var SUCCESS = 1;
	var EMPTY = 2;

	function IntervalTreeNode(mid, left, right, leftPoints, rightPoints) {
	  this.mid = mid;
	  this.left = left;
	  this.right = right;
	  this.leftPoints = leftPoints;
	  this.rightPoints = rightPoints;
	  this.count = (left ? left.count : 0) + (right ? right.count : 0) + leftPoints.length;
	}

	var proto$1 = IntervalTreeNode.prototype;

	function copy(a, b) {
	  a.mid = b.mid;
	  a.left = b.left;
	  a.right = b.right;
	  a.leftPoints = b.leftPoints;
	  a.rightPoints = b.rightPoints;
	  a.count = b.count;
	}

	function rebuild(node, intervals) {
	  var ntree = createIntervalTree(intervals);
	  node.mid = ntree.mid;
	  node.left = ntree.left;
	  node.right = ntree.right;
	  node.leftPoints = ntree.leftPoints;
	  node.rightPoints = ntree.rightPoints;
	  node.count = ntree.count;
	}

	function rebuildWithInterval(node, interval) {
	  var intervals = node.intervals([]);
	  intervals.push(interval);
	  rebuild(node, intervals);
	}

	function rebuildWithoutInterval(node, interval) {
	  var intervals = node.intervals([]);
	  var idx = intervals.indexOf(interval);
	  if (idx < 0) {
	    return NOT_FOUND;
	  }
	  intervals.splice(idx, 1);
	  rebuild(node, intervals);
	  return SUCCESS;
	}

	proto$1.intervals = function (result) {
	  result.push.apply(result, this.leftPoints);
	  if (this.left) {
	    this.left.intervals(result);
	  }
	  if (this.right) {
	    this.right.intervals(result);
	  }
	  return result;
	};

	proto$1.insert = function (interval) {
	  var weight = this.count - this.leftPoints.length;
	  this.count += 1;
	  if (interval[1] < this.mid) {
	    if (this.left) {
	      if (4 * (this.left.count + 1) > 3 * (weight + 1)) {
	        rebuildWithInterval(this, interval);
	      } else {
	        this.left.insert(interval);
	      }
	    } else {
	      this.left = createIntervalTree([interval]);
	    }
	  } else if (interval[0] > this.mid) {
	    if (this.right) {
	      if (4 * (this.right.count + 1) > 3 * (weight + 1)) {
	        rebuildWithInterval(this, interval);
	      } else {
	        this.right.insert(interval);
	      }
	    } else {
	      this.right = createIntervalTree([interval]);
	    }
	  } else {
	    var l = bounds.ge(this.leftPoints, interval, compareBegin);
	    var r = bounds.ge(this.rightPoints, interval, compareEnd);
	    this.leftPoints.splice(l, 0, interval);
	    this.rightPoints.splice(r, 0, interval);
	  }
	};

	proto$1.remove = function (interval) {
	  var weight = this.count - this.leftPoints;
	  if (interval[1] < this.mid) {
	    if (!this.left) {
	      return NOT_FOUND;
	    }
	    var rw = this.right ? this.right.count : 0;
	    if (4 * rw > 3 * (weight - 1)) {
	      return rebuildWithoutInterval(this, interval);
	    }
	    var r = this.left.remove(interval);
	    if (r === EMPTY) {
	      this.left = null;
	      this.count -= 1;
	      return SUCCESS;
	    } else if (r === SUCCESS) {
	      this.count -= 1;
	    }
	    return r;
	  } else if (interval[0] > this.mid) {
	    if (!this.right) {
	      return NOT_FOUND;
	    }
	    var lw = this.left ? this.left.count : 0;
	    if (4 * lw > 3 * (weight - 1)) {
	      return rebuildWithoutInterval(this, interval);
	    }
	    var r = this.right.remove(interval);
	    if (r === EMPTY) {
	      this.right = null;
	      this.count -= 1;
	      return SUCCESS;
	    } else if (r === SUCCESS) {
	      this.count -= 1;
	    }
	    return r;
	  } else {
	    if (this.count === 1) {
	      if (this.leftPoints[0] === interval) {
	        return EMPTY;
	      } else {
	        return NOT_FOUND;
	      }
	    }
	    if (this.leftPoints.length === 1 && this.leftPoints[0] === interval) {
	      if (this.left && this.right) {
	        var p = this;
	        var n = this.left;
	        while (n.right) {
	          p = n;
	          n = n.right;
	        }
	        if (p === this) {
	          n.right = this.right;
	        } else {
	          var l = this.left;
	          var r = this.right;
	          p.count -= n.count;
	          p.right = n.left;
	          n.left = l;
	          n.right = r;
	        }
	        copy(this, n);
	        this.count = (this.left ? this.left.count : 0) + (this.right ? this.right.count : 0) + this.leftPoints.length;
	      } else if (this.left) {
	        copy(this, this.left);
	      } else {
	        copy(this, this.right);
	      }
	      return SUCCESS;
	    }
	    for (var l = bounds.ge(this.leftPoints, interval, compareBegin); l < this.leftPoints.length; ++l) {
	      if (this.leftPoints[l][0] !== interval[0]) {
	        break;
	      }
	      if (this.leftPoints[l] === interval) {
	        this.count -= 1;
	        this.leftPoints.splice(l, 1);
	        for (var r = bounds.ge(this.rightPoints, interval, compareEnd); r < this.rightPoints.length; ++r) {
	          if (this.rightPoints[r][1] !== interval[1]) {
	            break;
	          } else if (this.rightPoints[r] === interval) {
	            this.rightPoints.splice(r, 1);
	            return SUCCESS;
	          }
	        }
	      }
	    }
	    return NOT_FOUND;
	  }
	};

	function reportLeftRange(arr, hi, cb) {
	  for (var i = 0; i < arr.length && arr[i][0] <= hi; ++i) {
	    var r = cb(arr[i]);
	    if (r) {
	      return r;
	    }
	  }
	}

	function reportRightRange(arr, lo, cb) {
	  for (var i = arr.length - 1; i >= 0 && arr[i][1] >= lo; --i) {
	    var r = cb(arr[i]);
	    if (r) {
	      return r;
	    }
	  }
	}

	function reportRange(arr, cb) {
	  for (var i = 0; i < arr.length; ++i) {
	    var r = cb(arr[i]);
	    if (r) {
	      return r;
	    }
	  }
	}

	proto$1.queryPoint = function (x, cb) {
	  if (x < this.mid) {
	    if (this.left) {
	      var r = this.left.queryPoint(x, cb);
	      if (r) {
	        return r;
	      }
	    }
	    return reportLeftRange(this.leftPoints, x, cb);
	  } else if (x > this.mid) {
	    if (this.right) {
	      var r = this.right.queryPoint(x, cb);
	      if (r) {
	        return r;
	      }
	    }
	    return reportRightRange(this.rightPoints, x, cb);
	  } else {
	    return reportRange(this.leftPoints, cb);
	  }
	};

	proto$1.queryInterval = function (lo, hi, cb) {
	  if (lo < this.mid && this.left) {
	    var r = this.left.queryInterval(lo, hi, cb);
	    if (r) {
	      return r;
	    }
	  }
	  if (hi > this.mid && this.right) {
	    var r = this.right.queryInterval(lo, hi, cb);
	    if (r) {
	      return r;
	    }
	  }
	  if (hi < this.mid) {
	    return reportLeftRange(this.leftPoints, hi, cb);
	  } else if (lo > this.mid) {
	    return reportRightRange(this.rightPoints, lo, cb);
	  } else {
	    return reportRange(this.leftPoints, cb);
	  }
	};

	function compareNumbers(a, b) {
	  return a - b;
	}

	function compareBegin(a, b) {
	  var d = a[0] - b[0];
	  if (d) {
	    return d;
	  }
	  return a[1] - b[1];
	}

	function compareEnd(a, b) {
	  var d = a[1] - b[1];
	  if (d) {
	    return d;
	  }
	  return a[0] - b[0];
	}

	function createIntervalTree(intervals) {
	  if (intervals.length === 0) {
	    return null;
	  }
	  var pts = [];
	  for (var i = 0; i < intervals.length; ++i) {
	    pts.push(intervals[i][0], intervals[i][1]);
	  }
	  pts.sort(compareNumbers);

	  var mid = pts[pts.length >> 1];

	  var leftIntervals = [];
	  var rightIntervals = [];
	  var centerIntervals = [];
	  for (var i = 0; i < intervals.length; ++i) {
	    var s = intervals[i];
	    if (s[1] < mid) {
	      leftIntervals.push(s);
	    } else if (mid < s[0]) {
	      rightIntervals.push(s);
	    } else {
	      centerIntervals.push(s);
	    }
	  }

	  //Split center intervals
	  var leftPoints = centerIntervals;
	  var rightPoints = centerIntervals.slice();
	  leftPoints.sort(compareBegin);
	  rightPoints.sort(compareEnd);

	  return new IntervalTreeNode(mid, createIntervalTree(leftIntervals), createIntervalTree(rightIntervals), leftPoints, rightPoints);
	}

	//User friendly wrapper that makes it possible to support empty trees
	function IntervalTree(root) {
	  this.root = root;
	}

	var tproto = IntervalTree.prototype;

	tproto.insert = function (interval) {
	  if (this.root) {
	    this.root.insert(interval);
	  } else {
	    this.root = new IntervalTreeNode(interval[0], null, null, [interval], [interval]);
	  }
	};

	tproto.remove = function (interval) {
	  if (this.root) {
	    var r = this.root.remove(interval);
	    if (r === EMPTY) {
	      this.root = null;
	    }
	    return r !== NOT_FOUND;
	  }
	  return false;
	};

	tproto.queryPoint = function (p, cb) {
	  if (this.root) {
	    return this.root.queryPoint(p, cb);
	  }
	};

	tproto.queryInterval = function (lo, hi, cb) {
	  if (lo <= hi && this.root) {
	    return this.root.queryInterval(lo, hi, cb);
	  }
	};

	Object.defineProperty(tproto, 'count', {
	  get: function get() {
	    if (this.root) {
	      return this.root.count;
	    }
	    return 0;
	  }
	});

	Object.defineProperty(tproto, 'intervals', {
	  get: function get() {
	    if (this.root) {
	      return this.root.intervals([]);
	    }
	    return [];
	  }
	});

	function createWrapper(intervals) {
	  if (!intervals || intervals.length === 0) {
	    return new IntervalTree(null);
	  }
	  return new IntervalTree(createIntervalTree(intervals));
	}

	// Position cache requirements:
	//   O(log(n)) lookup of cells to render for a given viewport size
	//   O(1) lookup of shortest measured column (so we know when to enter phase 1)
	var PositionCache = function () {
	  function PositionCache() {
	    _classCallCheck$8(this, PositionCache);

	    this._columnSizeMap = {};
	    this._intervalTree = createWrapper();
	    this._leftMap = {};
	  }
	  // Tracks the height of each column


	  // Store tops and bottoms of each cell for fast intersection lookup.


	  // Maps cell index to x coordinates for quick lookup.


	  _createClass$7(PositionCache, [{
	    key: 'estimateTotalHeight',
	    value: function estimateTotalHeight(cellCount, columnCount, defaultCellHeight) {
	      var unmeasuredCellCount = cellCount - this.count;
	      return this.tallestColumnSize + Math.ceil(unmeasuredCellCount / columnCount) * defaultCellHeight;
	    }

	    // Render all cells visible within the viewport range defined.

	  }, {
	    key: 'range',
	    value: function range(scrollTop, clientHeight, renderCallback) {
	      var _this = this;

	      this._intervalTree.queryInterval(scrollTop, scrollTop + clientHeight, function (_ref) {
	        var _ref2 = _slicedToArray$4(_ref, 3),
	            top = _ref2[0],
	            _ = _ref2[1],
	            index = _ref2[2];

	        return renderCallback(index, _this._leftMap[index], top);
	      });
	    }
	  }, {
	    key: 'setPosition',
	    value: function setPosition(index, left, top, height) {
	      this._intervalTree.insert([top, top + height, index]);
	      this._leftMap[index] = left;

	      var columnSizeMap = this._columnSizeMap;
	      var columnHeight = columnSizeMap[left];
	      if (columnHeight === undefined) {
	        columnSizeMap[left] = top + height;
	      } else {
	        columnSizeMap[left] = Math.max(columnHeight, top + height);
	      }
	    }
	  }, {
	    key: 'count',
	    get: function get() {
	      return this._intervalTree.count;
	    }
	  }, {
	    key: 'shortestColumnSize',
	    get: function get() {
	      var columnSizeMap = this._columnSizeMap;

	      var size = 0;

	      for (var i in columnSizeMap) {
	        var height = columnSizeMap[i];
	        size = size === 0 ? height : Math.min(size, height);
	      }

	      return size;
	    }
	  }, {
	    key: 'tallestColumnSize',
	    get: function get() {
	      var columnSizeMap = this._columnSizeMap;

	      var size = 0;

	      for (var i in columnSizeMap) {
	        var height = columnSizeMap[i];
	        size = Math.max(size, height);
	      }

	      return size;
	    }
	  }]);

	  return PositionCache;
	}();

	var emptyObject = {};

	/**
	 * Specifies the number of miliseconds during which to disable pointer events while a scroll is in progress.
	 * This improves performance and makes scrolling smoother.
	 */
	var DEFAULT_SCROLLING_RESET_TIME_INTERVAL$1 = 150;

	/**
	 * This component efficiently displays arbitrarily positioned cells using windowing techniques.
	 * Cell position is determined by an injected `cellPositioner` property.
	 * Windowing is vertical; this component does not support horizontal scrolling.
	 *
	 * Rendering occurs in two phases:
	 * 1) First pass uses estimated cell sizes (provided by the cache) to determine how many cells to measure in a batch.
	 *    Batch size is chosen using a fast, naive layout algorithm that stacks images in order until the viewport has been filled.
	 *    After measurement is complete (componentDidMount or componentDidUpdate) this component evaluates positioned cells
	 *    in order to determine if another measurement pass is required (eg if actual cell sizes were less than estimated sizes).
	 *    All measurements are permanently cached (keyed by `keyMapper`) for performance purposes.
	 * 2) Second pass uses the external `cellPositioner` to layout cells.
	 *    At this time the positioner has access to cached size measurements for all cells.
	 *    The positions it returns are cached by Masonry for fast access later.
	 *    Phase one is repeated if the user scrolls beyond the current layout's bounds.
	 *    If the layout is invalidated due to eg a resize, cached positions can be cleared using `recomputeCellPositions()`.
	 *
	 * Animation constraints:
	 *   Simple animations are supported (eg translate/slide into place on initial reveal).
	 *   More complex animations are not (eg flying from one position to another on resize).
	 *
	 * Layout constraints:
	 *   This component supports multi-column layout.
	 *   The height of each item may vary.
	 *   The width of each item must not exceed the width of the column it is "in".
	 *   The left position of all items within a column must align.
	 *   (Items may not span multiple columns.)
	 */

	var Masonry = function (_React$PureComponent) {
	  _inherits$3(Masonry, _React$PureComponent);

	  function Masonry() {
	    var _ref;

	    var _temp, _this, _ret;

	    _classCallCheck$8(this, Masonry);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn$3(this, (_ref = Masonry.__proto__ || _Object$getPrototypeOf(Masonry)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
	      isScrolling: false,
	      scrollTop: 0
	    }, _this._invalidateOnUpdateStartIndex = null, _this._invalidateOnUpdateStopIndex = null, _this._positionCache = new PositionCache(), _this._startIndex = null, _this._startIndexMemoized = null, _this._stopIndex = null, _this._stopIndexMemoized = null, _this._debounceResetIsScrollingCallback = function () {
	      _this.setState({
	        isScrolling: false
	      });
	    }, _this._setScrollingContainerRef = function (ref) {
	      _this._scrollingContainer = ref;
	    }, _this._onScroll = function (event) {
	      var height = _this.props.height;


	      var eventScrollTop = event.currentTarget.scrollTop;

	      // When this component is shrunk drastically, React dispatches a series of back-to-back scroll events,
	      // Gradually converging on a scrollTop that is within the bounds of the new, smaller height.
	      // This causes a series of rapid renders that is slow for long lists.
	      // We can avoid that by doing some simple bounds checking to ensure that scroll offsets never exceed their bounds.
	      var scrollTop = Math.min(Math.max(0, _this._getEstimatedTotalHeight() - height), eventScrollTop);

	      // On iOS, we can arrive at negative offsets by swiping past the start or end.
	      // Avoid re-rendering in this case as it can cause problems; see #532 for more.
	      if (eventScrollTop !== scrollTop) {
	        return;
	      }

	      // Prevent pointer events from interrupting a smooth scroll
	      _this._debounceResetIsScrolling();

	      // Certain devices (like Apple touchpad) rapid-fire duplicate events.
	      // Don't force a re-render if this is the case.
	      // The mouse may move faster then the animation frame does.
	      // Use requestAnimationFrame to avoid over-updating.
	      if (_this.state.scrollTop !== scrollTop) {
	        _this.setState({
	          isScrolling: true,
	          scrollTop: scrollTop
	        });
	      }
	    }, _temp), _possibleConstructorReturn$3(_this, _ret);
	  }

	  _createClass$7(Masonry, [{
	    key: 'clearCellPositions',
	    value: function clearCellPositions() {
	      this._positionCache = new PositionCache();
	      this.forceUpdate();
	    }

	    // HACK This method signature was intended for Grid

	  }, {
	    key: 'invalidateCellSizeAfterRender',
	    value: function invalidateCellSizeAfterRender(_ref2) {
	      var index = _ref2.rowIndex;

	      if (this._invalidateOnUpdateStartIndex === null) {
	        this._invalidateOnUpdateStartIndex = index;
	        this._invalidateOnUpdateStopIndex = index;
	      } else {
	        this._invalidateOnUpdateStartIndex = Math.min(this._invalidateOnUpdateStartIndex, index);
	        this._invalidateOnUpdateStopIndex = Math.max(this._invalidateOnUpdateStopIndex, index);
	      }
	    }
	  }, {
	    key: 'recomputeCellPositions',
	    value: function recomputeCellPositions() {
	      var stopIndex = this._positionCache.count - 1;

	      this._positionCache = new PositionCache();
	      this._populatePositionCache(0, stopIndex);

	      this.forceUpdate();
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this._checkInvalidateOnUpdate();
	      this._invokeOnScrollCallback();
	      this._invokeOnCellsRenderedCallback();
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {
	      this._checkInvalidateOnUpdate();
	      this._invokeOnScrollCallback();
	      this._invokeOnCellsRenderedCallback();

	      if (this.props.scrollTop !== prevProps.scrollTop) {
	        this._debounceResetIsScrolling();
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      if (this._debounceResetIsScrollingId) {
	        cancelAnimationTimeout(this._debounceResetIsScrollingId);
	      }
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;

	      var _props = this.props,
	          autoHeight = _props.autoHeight,
	          cellCount = _props.cellCount,
	          cellMeasurerCache = _props.cellMeasurerCache,
	          cellRenderer = _props.cellRenderer,
	          className = _props.className,
	          height = _props.height,
	          id = _props.id,
	          keyMapper = _props.keyMapper,
	          overscanByPixels = _props.overscanByPixels,
	          role = _props.role,
	          style = _props.style,
	          tabIndex = _props.tabIndex,
	          width = _props.width,
	          rowDirection = _props.rowDirection;
	      var _state = this.state,
	          isScrolling = _state.isScrolling,
	          scrollTop = _state.scrollTop;


	      var children = [];

	      var estimateTotalHeight = this._getEstimatedTotalHeight();

	      var shortestColumnSize = this._positionCache.shortestColumnSize;
	      var measuredCellCount = this._positionCache.count;

	      var startIndex = 0;
	      var stopIndex = void 0;

	      this._positionCache.range(Math.max(0, scrollTop - overscanByPixels), height + overscanByPixels * 2, function (index, left, top) {
	        var _style;

	        if (typeof stopIndex === 'undefined') {
	          startIndex = index;
	          stopIndex = index;
	        } else {
	          startIndex = Math.min(startIndex, index);
	          stopIndex = Math.max(stopIndex, index);
	        }

	        children.push(cellRenderer({
	          index: index,
	          isScrolling: isScrolling,
	          key: keyMapper(index),
	          parent: _this2,
	          style: (_style = {
	            height: cellMeasurerCache.getHeight(index)
	          }, _defineProperty$8(_style, rowDirection === 'ltr' ? 'left' : 'right', left), _defineProperty$8(_style, 'position', 'absolute'), _defineProperty$8(_style, 'top', top), _defineProperty$8(_style, 'width', cellMeasurerCache.getWidth(index)), _style)
	        }));
	      });

	      // We need to measure additional cells for this layout
	      if (shortestColumnSize < scrollTop + height + overscanByPixels && measuredCellCount < cellCount) {
	        var batchSize = Math.min(cellCount - measuredCellCount, Math.ceil((scrollTop + height + overscanByPixels - shortestColumnSize) / cellMeasurerCache.defaultHeight * width / cellMeasurerCache.defaultWidth));

	        for (var _index = measuredCellCount; _index < measuredCellCount + batchSize; _index++) {
	          stopIndex = _index;

	          children.push(cellRenderer({
	            index: _index,
	            isScrolling: isScrolling,
	            key: keyMapper(_index),
	            parent: this,
	            style: {
	              width: cellMeasurerCache.getWidth(_index)
	            }
	          }));
	        }
	      }

	      this._startIndex = startIndex;
	      this._stopIndex = stopIndex;

	      return React.createElement(
	        'div',
	        {
	          ref: this._setScrollingContainerRef,
	          'aria-label': this.props['aria-label'],
	          className: clsx('ReactVirtualized__Masonry', className),
	          id: id,
	          onScroll: this._onScroll,
	          role: role,
	          style: _extends$5({
	            boxSizing: 'border-box',
	            direction: 'ltr',
	            height: autoHeight ? 'auto' : height,
	            overflowX: 'hidden',
	            overflowY: estimateTotalHeight < height ? 'hidden' : 'auto',
	            position: 'relative',
	            width: width,
	            WebkitOverflowScrolling: 'touch',
	            willChange: 'transform'
	          }, style),
	          tabIndex: tabIndex },
	        React.createElement(
	          'div',
	          {
	            className: 'ReactVirtualized__Masonry__innerScrollContainer',
	            style: {
	              width: '100%',
	              height: estimateTotalHeight,
	              maxWidth: '100%',
	              maxHeight: estimateTotalHeight,
	              overflow: 'hidden',
	              pointerEvents: isScrolling ? 'none' : '',
	              position: 'relative'
	            } },
	          children
	        )
	      );
	    }
	  }, {
	    key: '_checkInvalidateOnUpdate',
	    value: function _checkInvalidateOnUpdate() {
	      if (typeof this._invalidateOnUpdateStartIndex === 'number') {
	        var _startIndex = this._invalidateOnUpdateStartIndex;
	        var _stopIndex = this._invalidateOnUpdateStopIndex;

	        this._invalidateOnUpdateStartIndex = null;
	        this._invalidateOnUpdateStopIndex = null;

	        // Query external layout logic for position of newly-measured cells
	        this._populatePositionCache(_startIndex, _stopIndex);

	        this.forceUpdate();
	      }
	    }
	  }, {
	    key: '_debounceResetIsScrolling',
	    value: function _debounceResetIsScrolling() {
	      var scrollingResetTimeInterval = this.props.scrollingResetTimeInterval;


	      if (this._debounceResetIsScrollingId) {
	        cancelAnimationTimeout(this._debounceResetIsScrollingId);
	      }

	      this._debounceResetIsScrollingId = requestAnimationTimeout(this._debounceResetIsScrollingCallback, scrollingResetTimeInterval);
	    }
	  }, {
	    key: '_getEstimatedTotalHeight',
	    value: function _getEstimatedTotalHeight() {
	      var _props2 = this.props,
	          cellCount = _props2.cellCount,
	          cellMeasurerCache = _props2.cellMeasurerCache,
	          width = _props2.width;


	      var estimatedColumnCount = Math.max(1, Math.floor(width / cellMeasurerCache.defaultWidth));

	      return this._positionCache.estimateTotalHeight(cellCount, estimatedColumnCount, cellMeasurerCache.defaultHeight);
	    }
	  }, {
	    key: '_invokeOnScrollCallback',
	    value: function _invokeOnScrollCallback() {
	      var _props3 = this.props,
	          height = _props3.height,
	          onScroll = _props3.onScroll;
	      var scrollTop = this.state.scrollTop;


	      if (this._onScrollMemoized !== scrollTop) {
	        onScroll({
	          clientHeight: height,
	          scrollHeight: this._getEstimatedTotalHeight(),
	          scrollTop: scrollTop
	        });

	        this._onScrollMemoized = scrollTop;
	      }
	    }
	  }, {
	    key: '_invokeOnCellsRenderedCallback',
	    value: function _invokeOnCellsRenderedCallback() {
	      if (this._startIndexMemoized !== this._startIndex || this._stopIndexMemoized !== this._stopIndex) {
	        var _onCellsRendered = this.props.onCellsRendered;


	        _onCellsRendered({
	          startIndex: this._startIndex,
	          stopIndex: this._stopIndex
	        });

	        this._startIndexMemoized = this._startIndex;
	        this._stopIndexMemoized = this._stopIndex;
	      }
	    }
	  }, {
	    key: '_populatePositionCache',
	    value: function _populatePositionCache(startIndex, stopIndex) {
	      var _props4 = this.props,
	          cellMeasurerCache = _props4.cellMeasurerCache,
	          cellPositioner = _props4.cellPositioner;


	      for (var _index2 = startIndex; _index2 <= stopIndex; _index2++) {
	        var _cellPositioner = cellPositioner(_index2),
	            _left = _cellPositioner.left,
	            _top = _cellPositioner.top;

	        this._positionCache.setPosition(_index2, _left, _top, cellMeasurerCache.getHeight(_index2));
	      }
	    }
	  }], [{
	    key: 'getDerivedStateFromProps',
	    value: function getDerivedStateFromProps(nextProps, prevState) {
	      if (nextProps.scrollTop !== undefined && prevState.scrollTop !== nextProps.scrollTop) {
	        return {
	          isScrolling: true,
	          scrollTop: nextProps.scrollTop
	        };
	      }

	      return null;
	    }
	  }]);

	  return Masonry;
	}(React.PureComponent);

	Masonry.defaultProps = {
	  autoHeight: false,
	  keyMapper: identity,
	  onCellsRendered: noop$3,
	  onScroll: noop$3,
	  overscanByPixels: 20,
	  role: 'grid',
	  scrollingResetTimeInterval: DEFAULT_SCROLLING_RESET_TIME_INTERVAL$1,
	  style: emptyObject,
	  tabIndex: 0,
	  rowDirection: 'ltr'
	};
	Masonry.propTypes = process.env.NODE_ENV === 'production' ? null : {
	  autoHeight: propTypes.bool.isRequired,
	  cellCount: propTypes.number.isRequired,
	  cellMeasurerCache: function cellMeasurerCache() {
	    return (typeof CellMeasurerCache === 'function' ? propTypes.instanceOf(CellMeasurerCache).isRequired : propTypes.any.isRequired).apply(this, arguments);
	  },
	  cellPositioner: function cellPositioner() {
	    return (typeof Positioner === 'function' ? propTypes.instanceOf(Positioner).isRequired : propTypes.any.isRequired).apply(this, arguments);
	  },
	  cellRenderer: function cellRenderer() {
	    return (typeof CellRenderer === 'function' ? propTypes.instanceOf(CellRenderer).isRequired : propTypes.any.isRequired).apply(this, arguments);
	  },
	  className: propTypes.string,
	  height: propTypes.number.isRequired,
	  id: propTypes.string,
	  keyMapper: function keyMapper() {
	    return (typeof KeyMapper === 'function' ? propTypes.instanceOf(KeyMapper).isRequired : propTypes.any.isRequired).apply(this, arguments);
	  },
	  onCellsRendered: function onCellsRendered() {
	    return (typeof OnCellsRenderedCallback === 'function' ? propTypes.instanceOf(OnCellsRenderedCallback) : propTypes.any).apply(this, arguments);
	  },
	  onScroll: function onScroll() {
	    return (typeof OnScrollCallback === 'function' ? propTypes.instanceOf(OnScrollCallback) : propTypes.any).apply(this, arguments);
	  },
	  overscanByPixels: propTypes.number.isRequired,
	  role: propTypes.string.isRequired,
	  scrollingResetTimeInterval: propTypes.number.isRequired,
	  style: function style(props, propName, componentName) {
	    if (!Object.prototype.hasOwnProperty.call(props, propName)) {
	      throw new Error('Prop `' + propName + '` has type \'any\' or \'mixed\', but was not provided to `' + componentName + '`. Pass undefined or any other value.');
	    }
	  },
	  tabIndex: propTypes.number.isRequired,
	  width: propTypes.number.isRequired,
	  rowDirection: propTypes.string.isRequired
	};


	function identity(value) {
	  return value;
	}

	function noop$3() {}

	var bpfrpt_proptype_CellMeasurerCache = process.env.NODE_ENV === 'production' ? null : {
	  defaultHeight: propTypes.number.isRequired,
	  defaultWidth: propTypes.number.isRequired,
	  getHeight: propTypes.func.isRequired,
	  getWidth: propTypes.func.isRequired
	};


	polyfill$1(Masonry);

	var bpfrpt_proptype_Positioner = process.env.NODE_ENV === 'production' ? null : propTypes.func;

	/**
	 * Caches measurements for a given cell.
	 */
	var CellMeasurerCacheDecorator = function () {
	  function CellMeasurerCacheDecorator() {
	    var _this = this;

	    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    _classCallCheck$8(this, CellMeasurerCacheDecorator);

	    this.columnWidth = function (_ref) {
	      var index = _ref.index;

	      _this._cellMeasurerCache.columnWidth({
	        index: index + _this._columnIndexOffset
	      });
	    };

	    this.rowHeight = function (_ref2) {
	      var index = _ref2.index;

	      _this._cellMeasurerCache.rowHeight({
	        index: index + _this._rowIndexOffset
	      });
	    };

	    var cellMeasurerCache = params.cellMeasurerCache,
	        _params$columnIndexOf = params.columnIndexOffset,
	        columnIndexOffset = _params$columnIndexOf === undefined ? 0 : _params$columnIndexOf,
	        _params$rowIndexOffse = params.rowIndexOffset,
	        rowIndexOffset = _params$rowIndexOffse === undefined ? 0 : _params$rowIndexOffse;


	    this._cellMeasurerCache = cellMeasurerCache;
	    this._columnIndexOffset = columnIndexOffset;
	    this._rowIndexOffset = rowIndexOffset;
	  }

	  _createClass$7(CellMeasurerCacheDecorator, [{
	    key: 'clear',
	    value: function clear(rowIndex, columnIndex) {
	      this._cellMeasurerCache.clear(rowIndex + this._rowIndexOffset, columnIndex + this._columnIndexOffset);
	    }
	  }, {
	    key: 'clearAll',
	    value: function clearAll() {
	      this._cellMeasurerCache.clearAll();
	    }
	  }, {
	    key: 'hasFixedHeight',
	    value: function hasFixedHeight() {
	      return this._cellMeasurerCache.hasFixedHeight();
	    }
	  }, {
	    key: 'hasFixedWidth',
	    value: function hasFixedWidth() {
	      return this._cellMeasurerCache.hasFixedWidth();
	    }
	  }, {
	    key: 'getHeight',
	    value: function getHeight(rowIndex) {
	      var columnIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

	      return this._cellMeasurerCache.getHeight(rowIndex + this._rowIndexOffset, columnIndex + this._columnIndexOffset);
	    }
	  }, {
	    key: 'getWidth',
	    value: function getWidth(rowIndex) {
	      var columnIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

	      return this._cellMeasurerCache.getWidth(rowIndex + this._rowIndexOffset, columnIndex + this._columnIndexOffset);
	    }
	  }, {
	    key: 'has',
	    value: function has(rowIndex) {
	      var columnIndex = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

	      return this._cellMeasurerCache.has(rowIndex + this._rowIndexOffset, columnIndex + this._columnIndexOffset);
	    }
	  }, {
	    key: 'set',
	    value: function set(rowIndex, columnIndex, width, height) {
	      this._cellMeasurerCache.set(rowIndex + this._rowIndexOffset, columnIndex + this._columnIndexOffset, width, height);
	    }
	  }, {
	    key: 'defaultHeight',
	    get: function get() {
	      return this._cellMeasurerCache.defaultHeight;
	    }
	  }, {
	    key: 'defaultWidth',
	    get: function get() {
	      return this._cellMeasurerCache.defaultWidth;
	    }
	  }]);

	  return CellMeasurerCacheDecorator;
	}();

	var SCROLLBAR_SIZE_BUFFER = 20;

	/**
	 * Renders 1, 2, or 4 Grids depending on configuration.
	 * A main (body) Grid will always be rendered.
	 * Optionally, 1-2 Grids for sticky header rows will also be rendered.
	 * If no sticky columns, only 1 sticky header Grid will be rendered.
	 * If sticky columns, 2 sticky header Grids will be rendered.
	 */

	var MultiGrid = function (_React$PureComponent) {
	  _inherits$3(MultiGrid, _React$PureComponent);

	  function MultiGrid(props, context) {
	    _classCallCheck$8(this, MultiGrid);

	    var _this = _possibleConstructorReturn$3(this, (MultiGrid.__proto__ || _Object$getPrototypeOf(MultiGrid)).call(this, props, context));

	    _initialiseProps.call(_this);

	    var deferredMeasurementCache = props.deferredMeasurementCache,
	        fixedColumnCount = props.fixedColumnCount,
	        fixedRowCount = props.fixedRowCount;


	    _this._maybeCalculateCachedStyles(true);

	    if (deferredMeasurementCache) {
	      _this._deferredMeasurementCacheBottomLeftGrid = fixedRowCount > 0 ? new CellMeasurerCacheDecorator({
	        cellMeasurerCache: deferredMeasurementCache,
	        columnIndexOffset: 0,
	        rowIndexOffset: fixedRowCount
	      }) : deferredMeasurementCache;

	      _this._deferredMeasurementCacheBottomRightGrid = fixedColumnCount > 0 || fixedRowCount > 0 ? new CellMeasurerCacheDecorator({
	        cellMeasurerCache: deferredMeasurementCache,
	        columnIndexOffset: fixedColumnCount,
	        rowIndexOffset: fixedRowCount
	      }) : deferredMeasurementCache;

	      _this._deferredMeasurementCacheTopRightGrid = fixedColumnCount > 0 ? new CellMeasurerCacheDecorator({
	        cellMeasurerCache: deferredMeasurementCache,
	        columnIndexOffset: fixedColumnCount,
	        rowIndexOffset: 0
	      }) : deferredMeasurementCache;
	    }
	    return _this;
	  }

	  _createClass$7(MultiGrid, [{
	    key: 'forceUpdateGrids',
	    value: function forceUpdateGrids() {
	      this._bottomLeftGrid && this._bottomLeftGrid.forceUpdate();
	      this._bottomRightGrid && this._bottomRightGrid.forceUpdate();
	      this._topLeftGrid && this._topLeftGrid.forceUpdate();
	      this._topRightGrid && this._topRightGrid.forceUpdate();
	    }

	    /** See Grid#invalidateCellSizeAfterRender */

	  }, {
	    key: 'invalidateCellSizeAfterRender',
	    value: function invalidateCellSizeAfterRender() {
	      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	          _ref$columnIndex = _ref.columnIndex,
	          columnIndex = _ref$columnIndex === undefined ? 0 : _ref$columnIndex,
	          _ref$rowIndex = _ref.rowIndex,
	          rowIndex = _ref$rowIndex === undefined ? 0 : _ref$rowIndex;

	      this._deferredInvalidateColumnIndex = typeof this._deferredInvalidateColumnIndex === 'number' ? Math.min(this._deferredInvalidateColumnIndex, columnIndex) : columnIndex;
	      this._deferredInvalidateRowIndex = typeof this._deferredInvalidateRowIndex === 'number' ? Math.min(this._deferredInvalidateRowIndex, rowIndex) : rowIndex;
	    }

	    /** See Grid#measureAllCells */

	  }, {
	    key: 'measureAllCells',
	    value: function measureAllCells() {
	      this._bottomLeftGrid && this._bottomLeftGrid.measureAllCells();
	      this._bottomRightGrid && this._bottomRightGrid.measureAllCells();
	      this._topLeftGrid && this._topLeftGrid.measureAllCells();
	      this._topRightGrid && this._topRightGrid.measureAllCells();
	    }

	    /** See Grid#recomputeGridSize */

	  }, {
	    key: 'recomputeGridSize',
	    value: function recomputeGridSize() {
	      var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	          _ref2$columnIndex = _ref2.columnIndex,
	          columnIndex = _ref2$columnIndex === undefined ? 0 : _ref2$columnIndex,
	          _ref2$rowIndex = _ref2.rowIndex,
	          rowIndex = _ref2$rowIndex === undefined ? 0 : _ref2$rowIndex;

	      var _props = this.props,
	          fixedColumnCount = _props.fixedColumnCount,
	          fixedRowCount = _props.fixedRowCount;


	      var adjustedColumnIndex = Math.max(0, columnIndex - fixedColumnCount);
	      var adjustedRowIndex = Math.max(0, rowIndex - fixedRowCount);

	      this._bottomLeftGrid && this._bottomLeftGrid.recomputeGridSize({
	        columnIndex: columnIndex,
	        rowIndex: adjustedRowIndex
	      });
	      this._bottomRightGrid && this._bottomRightGrid.recomputeGridSize({
	        columnIndex: adjustedColumnIndex,
	        rowIndex: adjustedRowIndex
	      });
	      this._topLeftGrid && this._topLeftGrid.recomputeGridSize({
	        columnIndex: columnIndex,
	        rowIndex: rowIndex
	      });
	      this._topRightGrid && this._topRightGrid.recomputeGridSize({
	        columnIndex: adjustedColumnIndex,
	        rowIndex: rowIndex
	      });

	      this._leftGridWidth = null;
	      this._topGridHeight = null;
	      this._maybeCalculateCachedStyles(true);
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var _props2 = this.props,
	          scrollLeft = _props2.scrollLeft,
	          scrollTop = _props2.scrollTop;


	      if (scrollLeft > 0 || scrollTop > 0) {
	        var newState = {};

	        if (scrollLeft > 0) {
	          newState.scrollLeft = scrollLeft;
	        }

	        if (scrollTop > 0) {
	          newState.scrollTop = scrollTop;
	        }

	        this.setState(newState);
	      }
	      this._handleInvalidatedGridSize();
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      this._handleInvalidatedGridSize();
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _props3 = this.props,
	          onScroll = _props3.onScroll,
	          onSectionRendered = _props3.onSectionRendered,
	          onScrollbarPresenceChange = _props3.onScrollbarPresenceChange,
	          scrollLeftProp = _props3.scrollLeft,
	          scrollToColumn = _props3.scrollToColumn,
	          scrollTopProp = _props3.scrollTop,
	          scrollToRow = _props3.scrollToRow,
	          rest = _objectWithoutProperties$4(_props3, ['onScroll', 'onSectionRendered', 'onScrollbarPresenceChange', 'scrollLeft', 'scrollToColumn', 'scrollTop', 'scrollToRow']);

	      this._prepareForRender();

	      // Don't render any of our Grids if there are no cells.
	      // This mirrors what Grid does,
	      // And prevents us from recording inaccurage measurements when used with CellMeasurer.
	      if (this.props.width === 0 || this.props.height === 0) {
	        return null;
	      }

	      // scrollTop and scrollLeft props are explicitly filtered out and ignored

	      var _state = this.state,
	          scrollLeft = _state.scrollLeft,
	          scrollTop = _state.scrollTop;


	      return React.createElement(
	        'div',
	        { style: this._containerOuterStyle },
	        React.createElement(
	          'div',
	          { style: this._containerTopStyle },
	          this._renderTopLeftGrid(rest),
	          this._renderTopRightGrid(_extends$5({}, rest, {
	            onScroll: onScroll,
	            scrollLeft: scrollLeft
	          }))
	        ),
	        React.createElement(
	          'div',
	          { style: this._containerBottomStyle },
	          this._renderBottomLeftGrid(_extends$5({}, rest, {
	            onScroll: onScroll,
	            scrollTop: scrollTop
	          })),
	          this._renderBottomRightGrid(_extends$5({}, rest, {
	            onScroll: onScroll,
	            onSectionRendered: onSectionRendered,
	            scrollLeft: scrollLeft,
	            scrollToColumn: scrollToColumn,
	            scrollToRow: scrollToRow,
	            scrollTop: scrollTop
	          }))
	        )
	      );
	    }
	  }, {
	    key: '_getBottomGridHeight',
	    value: function _getBottomGridHeight(props) {
	      var height = props.height;


	      var topGridHeight = this._getTopGridHeight(props);

	      return height - topGridHeight;
	    }
	  }, {
	    key: '_getLeftGridWidth',
	    value: function _getLeftGridWidth(props) {
	      var fixedColumnCount = props.fixedColumnCount,
	          columnWidth = props.columnWidth;


	      if (this._leftGridWidth == null) {
	        if (typeof columnWidth === 'function') {
	          var leftGridWidth = 0;

	          for (var index = 0; index < fixedColumnCount; index++) {
	            leftGridWidth += columnWidth({ index: index });
	          }

	          this._leftGridWidth = leftGridWidth;
	        } else {
	          this._leftGridWidth = columnWidth * fixedColumnCount;
	        }
	      }

	      return this._leftGridWidth;
	    }
	  }, {
	    key: '_getRightGridWidth',
	    value: function _getRightGridWidth(props) {
	      var width = props.width;


	      var leftGridWidth = this._getLeftGridWidth(props);

	      return width - leftGridWidth;
	    }
	  }, {
	    key: '_getTopGridHeight',
	    value: function _getTopGridHeight(props) {
	      var fixedRowCount = props.fixedRowCount,
	          rowHeight = props.rowHeight;


	      if (this._topGridHeight == null) {
	        if (typeof rowHeight === 'function') {
	          var topGridHeight = 0;

	          for (var index = 0; index < fixedRowCount; index++) {
	            topGridHeight += rowHeight({ index: index });
	          }

	          this._topGridHeight = topGridHeight;
	        } else {
	          this._topGridHeight = rowHeight * fixedRowCount;
	        }
	      }

	      return this._topGridHeight;
	    }
	  }, {
	    key: '_handleInvalidatedGridSize',
	    value: function _handleInvalidatedGridSize() {
	      if (typeof this._deferredInvalidateColumnIndex === 'number') {
	        var columnIndex = this._deferredInvalidateColumnIndex;
	        var rowIndex = this._deferredInvalidateRowIndex;

	        this._deferredInvalidateColumnIndex = null;
	        this._deferredInvalidateRowIndex = null;

	        this.recomputeGridSize({
	          columnIndex: columnIndex,
	          rowIndex: rowIndex
	        });
	        this.forceUpdate();
	      }
	    }

	    /**
	     * Avoid recreating inline styles each render; this bypasses Grid's shallowCompare.
	     * This method recalculates styles only when specific props change.
	     */

	  }, {
	    key: '_maybeCalculateCachedStyles',
	    value: function _maybeCalculateCachedStyles(resetAll) {
	      var _props4 = this.props,
	          columnWidth = _props4.columnWidth,
	          enableFixedColumnScroll = _props4.enableFixedColumnScroll,
	          enableFixedRowScroll = _props4.enableFixedRowScroll,
	          height = _props4.height,
	          fixedColumnCount = _props4.fixedColumnCount,
	          fixedRowCount = _props4.fixedRowCount,
	          rowHeight = _props4.rowHeight,
	          style = _props4.style,
	          styleBottomLeftGrid = _props4.styleBottomLeftGrid,
	          styleBottomRightGrid = _props4.styleBottomRightGrid,
	          styleTopLeftGrid = _props4.styleTopLeftGrid,
	          styleTopRightGrid = _props4.styleTopRightGrid,
	          width = _props4.width;


	      var sizeChange = resetAll || height !== this._lastRenderedHeight || width !== this._lastRenderedWidth;
	      var leftSizeChange = resetAll || columnWidth !== this._lastRenderedColumnWidth || fixedColumnCount !== this._lastRenderedFixedColumnCount;
	      var topSizeChange = resetAll || fixedRowCount !== this._lastRenderedFixedRowCount || rowHeight !== this._lastRenderedRowHeight;

	      if (resetAll || sizeChange || style !== this._lastRenderedStyle) {
	        this._containerOuterStyle = _extends$5({
	          height: height,
	          overflow: 'visible', // Let :focus outline show through
	          width: width
	        }, style);
	      }

	      if (resetAll || sizeChange || topSizeChange) {
	        this._containerTopStyle = {
	          height: this._getTopGridHeight(this.props),
	          position: 'relative',
	          width: width
	        };

	        this._containerBottomStyle = {
	          height: height - this._getTopGridHeight(this.props),
	          overflow: 'visible', // Let :focus outline show through
	          position: 'relative',
	          width: width
	        };
	      }

	      if (resetAll || styleBottomLeftGrid !== this._lastRenderedStyleBottomLeftGrid) {
	        this._bottomLeftGridStyle = _extends$5({
	          left: 0,
	          overflowX: 'hidden',
	          overflowY: enableFixedColumnScroll ? 'auto' : 'hidden',
	          position: 'absolute'
	        }, styleBottomLeftGrid);
	      }

	      if (resetAll || leftSizeChange || styleBottomRightGrid !== this._lastRenderedStyleBottomRightGrid) {
	        this._bottomRightGridStyle = _extends$5({
	          left: this._getLeftGridWidth(this.props),
	          position: 'absolute'
	        }, styleBottomRightGrid);
	      }

	      if (resetAll || styleTopLeftGrid !== this._lastRenderedStyleTopLeftGrid) {
	        this._topLeftGridStyle = _extends$5({
	          left: 0,
	          overflowX: 'hidden',
	          overflowY: 'hidden',
	          position: 'absolute',
	          top: 0
	        }, styleTopLeftGrid);
	      }

	      if (resetAll || leftSizeChange || styleTopRightGrid !== this._lastRenderedStyleTopRightGrid) {
	        this._topRightGridStyle = _extends$5({
	          left: this._getLeftGridWidth(this.props),
	          overflowX: enableFixedRowScroll ? 'auto' : 'hidden',
	          overflowY: 'hidden',
	          position: 'absolute',
	          top: 0
	        }, styleTopRightGrid);
	      }

	      this._lastRenderedColumnWidth = columnWidth;
	      this._lastRenderedFixedColumnCount = fixedColumnCount;
	      this._lastRenderedFixedRowCount = fixedRowCount;
	      this._lastRenderedHeight = height;
	      this._lastRenderedRowHeight = rowHeight;
	      this._lastRenderedStyle = style;
	      this._lastRenderedStyleBottomLeftGrid = styleBottomLeftGrid;
	      this._lastRenderedStyleBottomRightGrid = styleBottomRightGrid;
	      this._lastRenderedStyleTopLeftGrid = styleTopLeftGrid;
	      this._lastRenderedStyleTopRightGrid = styleTopRightGrid;
	      this._lastRenderedWidth = width;
	    }
	  }, {
	    key: '_prepareForRender',
	    value: function _prepareForRender() {
	      if (this._lastRenderedColumnWidth !== this.props.columnWidth || this._lastRenderedFixedColumnCount !== this.props.fixedColumnCount) {
	        this._leftGridWidth = null;
	      }

	      if (this._lastRenderedFixedRowCount !== this.props.fixedRowCount || this._lastRenderedRowHeight !== this.props.rowHeight) {
	        this._topGridHeight = null;
	      }

	      this._maybeCalculateCachedStyles();

	      this._lastRenderedColumnWidth = this.props.columnWidth;
	      this._lastRenderedFixedColumnCount = this.props.fixedColumnCount;
	      this._lastRenderedFixedRowCount = this.props.fixedRowCount;
	      this._lastRenderedRowHeight = this.props.rowHeight;
	    }
	  }, {
	    key: '_renderBottomLeftGrid',
	    value: function _renderBottomLeftGrid(props) {
	      var enableFixedColumnScroll = props.enableFixedColumnScroll,
	          fixedColumnCount = props.fixedColumnCount,
	          fixedRowCount = props.fixedRowCount,
	          rowCount = props.rowCount,
	          hideBottomLeftGridScrollbar = props.hideBottomLeftGridScrollbar;
	      var showVerticalScrollbar = this.state.showVerticalScrollbar;


	      if (!fixedColumnCount) {
	        return null;
	      }

	      var additionalRowCount = showVerticalScrollbar ? 1 : 0,
	          height = this._getBottomGridHeight(props),
	          width = this._getLeftGridWidth(props),
	          scrollbarSize = this.state.showVerticalScrollbar ? this.state.scrollbarSize : 0,
	          gridWidth = hideBottomLeftGridScrollbar ? width + scrollbarSize : width;

	      var bottomLeftGrid = React.createElement(Grid$1, _extends$5({}, props, {
	        cellRenderer: this._cellRendererBottomLeftGrid,
	        className: this.props.classNameBottomLeftGrid,
	        columnCount: fixedColumnCount,
	        deferredMeasurementCache: this._deferredMeasurementCacheBottomLeftGrid,
	        height: height,
	        onScroll: enableFixedColumnScroll ? this._onScrollTop : undefined,
	        ref: this._bottomLeftGridRef,
	        rowCount: Math.max(0, rowCount - fixedRowCount) + additionalRowCount,
	        rowHeight: this._rowHeightBottomGrid,
	        style: this._bottomLeftGridStyle,
	        tabIndex: null,
	        width: gridWidth
	      }));

	      if (hideBottomLeftGridScrollbar) {
	        return React.createElement(
	          'div',
	          {
	            className: 'BottomLeftGrid_ScrollWrapper',
	            style: _extends$5({}, this._bottomLeftGridStyle, {
	              height: height,
	              width: width,
	              overflowY: 'hidden'
	            }) },
	          bottomLeftGrid
	        );
	      }
	      return bottomLeftGrid;
	    }
	  }, {
	    key: '_renderBottomRightGrid',
	    value: function _renderBottomRightGrid(props) {
	      var columnCount = props.columnCount,
	          fixedColumnCount = props.fixedColumnCount,
	          fixedRowCount = props.fixedRowCount,
	          rowCount = props.rowCount,
	          scrollToColumn = props.scrollToColumn,
	          scrollToRow = props.scrollToRow;


	      return React.createElement(Grid$1, _extends$5({}, props, {
	        cellRenderer: this._cellRendererBottomRightGrid,
	        className: this.props.classNameBottomRightGrid,
	        columnCount: Math.max(0, columnCount - fixedColumnCount),
	        columnWidth: this._columnWidthRightGrid,
	        deferredMeasurementCache: this._deferredMeasurementCacheBottomRightGrid,
	        height: this._getBottomGridHeight(props),
	        onScroll: this._onScroll,
	        onScrollbarPresenceChange: this._onScrollbarPresenceChange,
	        ref: this._bottomRightGridRef,
	        rowCount: Math.max(0, rowCount - fixedRowCount),
	        rowHeight: this._rowHeightBottomGrid,
	        scrollToColumn: scrollToColumn - fixedColumnCount,
	        scrollToRow: scrollToRow - fixedRowCount,
	        style: this._bottomRightGridStyle,
	        width: this._getRightGridWidth(props)
	      }));
	    }
	  }, {
	    key: '_renderTopLeftGrid',
	    value: function _renderTopLeftGrid(props) {
	      var fixedColumnCount = props.fixedColumnCount,
	          fixedRowCount = props.fixedRowCount;


	      if (!fixedColumnCount || !fixedRowCount) {
	        return null;
	      }

	      return React.createElement(Grid$1, _extends$5({}, props, {
	        className: this.props.classNameTopLeftGrid,
	        columnCount: fixedColumnCount,
	        height: this._getTopGridHeight(props),
	        ref: this._topLeftGridRef,
	        rowCount: fixedRowCount,
	        style: this._topLeftGridStyle,
	        tabIndex: null,
	        width: this._getLeftGridWidth(props)
	      }));
	    }
	  }, {
	    key: '_renderTopRightGrid',
	    value: function _renderTopRightGrid(props) {
	      var columnCount = props.columnCount,
	          enableFixedRowScroll = props.enableFixedRowScroll,
	          fixedColumnCount = props.fixedColumnCount,
	          fixedRowCount = props.fixedRowCount,
	          scrollLeft = props.scrollLeft,
	          hideTopRightGridScrollbar = props.hideTopRightGridScrollbar;
	      var _state2 = this.state,
	          showHorizontalScrollbar = _state2.showHorizontalScrollbar,
	          scrollbarSize = _state2.scrollbarSize;


	      if (!fixedRowCount) {
	        return null;
	      }

	      var additionalColumnCount = showHorizontalScrollbar ? 1 : 0,
	          height = this._getTopGridHeight(props),
	          width = this._getRightGridWidth(props),
	          additionalHeight = showHorizontalScrollbar ? scrollbarSize : 0;

	      var gridHeight = height,
	          style = this._topRightGridStyle;

	      if (hideTopRightGridScrollbar) {
	        gridHeight = height + additionalHeight;
	        style = _extends$5({}, this._topRightGridStyle, {
	          left: 0
	        });
	      }

	      var topRightGrid = React.createElement(Grid$1, _extends$5({}, props, {
	        cellRenderer: this._cellRendererTopRightGrid,
	        className: this.props.classNameTopRightGrid,
	        columnCount: Math.max(0, columnCount - fixedColumnCount) + additionalColumnCount,
	        columnWidth: this._columnWidthRightGrid,
	        deferredMeasurementCache: this._deferredMeasurementCacheTopRightGrid,
	        height: gridHeight,
	        onScroll: enableFixedRowScroll ? this._onScrollLeft : undefined,
	        ref: this._topRightGridRef,
	        rowCount: fixedRowCount,
	        scrollLeft: scrollLeft,
	        style: style,
	        tabIndex: null,
	        width: width
	      }));

	      if (hideTopRightGridScrollbar) {
	        return React.createElement(
	          'div',
	          {
	            className: 'TopRightGrid_ScrollWrapper',
	            style: _extends$5({}, this._topRightGridStyle, {
	              height: height,
	              width: width,
	              overflowX: 'hidden'
	            }) },
	          topRightGrid
	        );
	      }
	      return topRightGrid;
	    }
	  }], [{
	    key: 'getDerivedStateFromProps',
	    value: function getDerivedStateFromProps(nextProps, prevState) {
	      if (nextProps.scrollLeft !== prevState.scrollLeft || nextProps.scrollTop !== prevState.scrollTop) {
	        return {
	          scrollLeft: nextProps.scrollLeft != null && nextProps.scrollLeft >= 0 ? nextProps.scrollLeft : prevState.scrollLeft,
	          scrollTop: nextProps.scrollTop != null && nextProps.scrollTop >= 0 ? nextProps.scrollTop : prevState.scrollTop
	        };
	      }

	      return null;
	    }
	  }]);

	  return MultiGrid;
	}(React.PureComponent);

	MultiGrid.defaultProps = {
	  classNameBottomLeftGrid: '',
	  classNameBottomRightGrid: '',
	  classNameTopLeftGrid: '',
	  classNameTopRightGrid: '',
	  enableFixedColumnScroll: false,
	  enableFixedRowScroll: false,
	  fixedColumnCount: 0,
	  fixedRowCount: 0,
	  scrollToColumn: -1,
	  scrollToRow: -1,
	  style: {},
	  styleBottomLeftGrid: {},
	  styleBottomRightGrid: {},
	  styleTopLeftGrid: {},
	  styleTopRightGrid: {},
	  hideTopRightGridScrollbar: false,
	  hideBottomLeftGridScrollbar: false
	};

	var _initialiseProps = function _initialiseProps() {
	  var _this2 = this;

	  this.state = {
	    scrollLeft: 0,
	    scrollTop: 0,
	    scrollbarSize: 0,
	    showHorizontalScrollbar: false,
	    showVerticalScrollbar: false
	  };
	  this._deferredInvalidateColumnIndex = null;
	  this._deferredInvalidateRowIndex = null;

	  this._bottomLeftGridRef = function (ref) {
	    _this2._bottomLeftGrid = ref;
	  };

	  this._bottomRightGridRef = function (ref) {
	    _this2._bottomRightGrid = ref;
	  };

	  this._cellRendererBottomLeftGrid = function (_ref3) {
	    var rowIndex = _ref3.rowIndex,
	        rest = _objectWithoutProperties$4(_ref3, ['rowIndex']);

	    var _props5 = _this2.props,
	        cellRenderer = _props5.cellRenderer,
	        fixedRowCount = _props5.fixedRowCount,
	        rowCount = _props5.rowCount;


	    if (rowIndex === rowCount - fixedRowCount) {
	      return React.createElement('div', {
	        key: rest.key,
	        style: _extends$5({}, rest.style, {
	          height: SCROLLBAR_SIZE_BUFFER
	        })
	      });
	    } else {
	      return cellRenderer(_extends$5({}, rest, {
	        parent: _this2,
	        rowIndex: rowIndex + fixedRowCount
	      }));
	    }
	  };

	  this._cellRendererBottomRightGrid = function (_ref4) {
	    var columnIndex = _ref4.columnIndex,
	        rowIndex = _ref4.rowIndex,
	        rest = _objectWithoutProperties$4(_ref4, ['columnIndex', 'rowIndex']);

	    var _props6 = _this2.props,
	        cellRenderer = _props6.cellRenderer,
	        fixedColumnCount = _props6.fixedColumnCount,
	        fixedRowCount = _props6.fixedRowCount;


	    return cellRenderer(_extends$5({}, rest, {
	      columnIndex: columnIndex + fixedColumnCount,
	      parent: _this2,
	      rowIndex: rowIndex + fixedRowCount
	    }));
	  };

	  this._cellRendererTopRightGrid = function (_ref5) {
	    var columnIndex = _ref5.columnIndex,
	        rest = _objectWithoutProperties$4(_ref5, ['columnIndex']);

	    var _props7 = _this2.props,
	        cellRenderer = _props7.cellRenderer,
	        columnCount = _props7.columnCount,
	        fixedColumnCount = _props7.fixedColumnCount;


	    if (columnIndex === columnCount - fixedColumnCount) {
	      return React.createElement('div', {
	        key: rest.key,
	        style: _extends$5({}, rest.style, {
	          width: SCROLLBAR_SIZE_BUFFER
	        })
	      });
	    } else {
	      return cellRenderer(_extends$5({}, rest, {
	        columnIndex: columnIndex + fixedColumnCount,
	        parent: _this2
	      }));
	    }
	  };

	  this._columnWidthRightGrid = function (_ref6) {
	    var index = _ref6.index;
	    var _props8 = _this2.props,
	        columnCount = _props8.columnCount,
	        fixedColumnCount = _props8.fixedColumnCount,
	        columnWidth = _props8.columnWidth;
	    var _state3 = _this2.state,
	        scrollbarSize = _state3.scrollbarSize,
	        showHorizontalScrollbar = _state3.showHorizontalScrollbar;

	    // An extra cell is added to the count
	    // This gives the smaller Grid extra room for offset,
	    // In case the main (bottom right) Grid has a scrollbar
	    // If no scrollbar, the extra space is overflow:hidden anyway

	    if (showHorizontalScrollbar && index === columnCount - fixedColumnCount) {
	      return scrollbarSize;
	    }

	    return typeof columnWidth === 'function' ? columnWidth({ index: index + fixedColumnCount }) : columnWidth;
	  };

	  this._onScroll = function (scrollInfo) {
	    var scrollLeft = scrollInfo.scrollLeft,
	        scrollTop = scrollInfo.scrollTop;

	    _this2.setState({
	      scrollLeft: scrollLeft,
	      scrollTop: scrollTop
	    });
	    var onScroll = _this2.props.onScroll;
	    if (onScroll) {
	      onScroll(scrollInfo);
	    }
	  };

	  this._onScrollbarPresenceChange = function (_ref7) {
	    var horizontal = _ref7.horizontal,
	        size = _ref7.size,
	        vertical = _ref7.vertical;
	    var _state4 = _this2.state,
	        showHorizontalScrollbar = _state4.showHorizontalScrollbar,
	        showVerticalScrollbar = _state4.showVerticalScrollbar;


	    if (horizontal !== showHorizontalScrollbar || vertical !== showVerticalScrollbar) {
	      _this2.setState({
	        scrollbarSize: size,
	        showHorizontalScrollbar: horizontal,
	        showVerticalScrollbar: vertical
	      });

	      var onScrollbarPresenceChange = _this2.props.onScrollbarPresenceChange;

	      if (typeof onScrollbarPresenceChange === 'function') {
	        onScrollbarPresenceChange({
	          horizontal: horizontal,
	          size: size,
	          vertical: vertical
	        });
	      }
	    }
	  };

	  this._onScrollLeft = function (scrollInfo) {
	    var scrollLeft = scrollInfo.scrollLeft;

	    _this2._onScroll({
	      scrollLeft: scrollLeft,
	      scrollTop: _this2.state.scrollTop
	    });
	  };

	  this._onScrollTop = function (scrollInfo) {
	    var scrollTop = scrollInfo.scrollTop;

	    _this2._onScroll({
	      scrollTop: scrollTop,
	      scrollLeft: _this2.state.scrollLeft
	    });
	  };

	  this._rowHeightBottomGrid = function (_ref8) {
	    var index = _ref8.index;
	    var _props9 = _this2.props,
	        fixedRowCount = _props9.fixedRowCount,
	        rowCount = _props9.rowCount,
	        rowHeight = _props9.rowHeight;
	    var _state5 = _this2.state,
	        scrollbarSize = _state5.scrollbarSize,
	        showVerticalScrollbar = _state5.showVerticalScrollbar;

	    // An extra cell is added to the count
	    // This gives the smaller Grid extra room for offset,
	    // In case the main (bottom right) Grid has a scrollbar
	    // If no scrollbar, the extra space is overflow:hidden anyway

	    if (showVerticalScrollbar && index === rowCount - fixedRowCount) {
	      return scrollbarSize;
	    }

	    return typeof rowHeight === 'function' ? rowHeight({ index: index + fixedRowCount }) : rowHeight;
	  };

	  this._topLeftGridRef = function (ref) {
	    _this2._topLeftGrid = ref;
	  };

	  this._topRightGridRef = function (ref) {
	    _this2._topRightGrid = ref;
	  };
	};

	MultiGrid.propTypes = process.env.NODE_ENV !== "production" ? {
	  classNameBottomLeftGrid: propTypes.string.isRequired,
	  classNameBottomRightGrid: propTypes.string.isRequired,
	  classNameTopLeftGrid: propTypes.string.isRequired,
	  classNameTopRightGrid: propTypes.string.isRequired,
	  enableFixedColumnScroll: propTypes.bool.isRequired,
	  enableFixedRowScroll: propTypes.bool.isRequired,
	  fixedColumnCount: propTypes.number.isRequired,
	  fixedRowCount: propTypes.number.isRequired,
	  onScrollbarPresenceChange: propTypes.func,
	  style: propTypes.object.isRequired,
	  styleBottomLeftGrid: propTypes.object.isRequired,
	  styleBottomRightGrid: propTypes.object.isRequired,
	  styleTopLeftGrid: propTypes.object.isRequired,
	  styleTopRightGrid: propTypes.object.isRequired,
	  hideTopRightGridScrollbar: propTypes.bool,
	  hideBottomLeftGridScrollbar: propTypes.bool
	} : {};


	polyfill$1(MultiGrid);

	/**
	 * HOC that simplifies the process of synchronizing scrolling between two or more virtualized components.
	 */

	var ScrollSync = function (_React$PureComponent) {
	  _inherits$3(ScrollSync, _React$PureComponent);

	  function ScrollSync(props, context) {
	    _classCallCheck$8(this, ScrollSync);

	    var _this = _possibleConstructorReturn$3(this, (ScrollSync.__proto__ || _Object$getPrototypeOf(ScrollSync)).call(this, props, context));

	    _this.state = {
	      clientHeight: 0,
	      clientWidth: 0,
	      scrollHeight: 0,
	      scrollLeft: 0,
	      scrollTop: 0,
	      scrollWidth: 0
	    };

	    _this._onScroll = _this._onScroll.bind(_this);
	    return _this;
	  }

	  _createClass$7(ScrollSync, [{
	    key: 'render',
	    value: function render() {
	      var children = this.props.children;
	      var _state = this.state,
	          clientHeight = _state.clientHeight,
	          clientWidth = _state.clientWidth,
	          scrollHeight = _state.scrollHeight,
	          scrollLeft = _state.scrollLeft,
	          scrollTop = _state.scrollTop,
	          scrollWidth = _state.scrollWidth;


	      return children({
	        clientHeight: clientHeight,
	        clientWidth: clientWidth,
	        onScroll: this._onScroll,
	        scrollHeight: scrollHeight,
	        scrollLeft: scrollLeft,
	        scrollTop: scrollTop,
	        scrollWidth: scrollWidth
	      });
	    }
	  }, {
	    key: '_onScroll',
	    value: function _onScroll(_ref) {
	      var clientHeight = _ref.clientHeight,
	          clientWidth = _ref.clientWidth,
	          scrollHeight = _ref.scrollHeight,
	          scrollLeft = _ref.scrollLeft,
	          scrollTop = _ref.scrollTop,
	          scrollWidth = _ref.scrollWidth;

	      this.setState({
	        clientHeight: clientHeight,
	        clientWidth: clientWidth,
	        scrollHeight: scrollHeight,
	        scrollLeft: scrollLeft,
	        scrollTop: scrollTop,
	        scrollWidth: scrollWidth
	      });
	    }
	  }]);

	  return ScrollSync;
	}(React.PureComponent);
	ScrollSync.propTypes = process.env.NODE_ENV !== "production" ? {
	  /**
	   * Function responsible for rendering 2 or more virtualized components.
	   * This function should implement the following signature:
	   * ({ onScroll, scrollLeft, scrollTop }) => PropTypes.element
	   */
	  children: propTypes.func.isRequired
	} : {};

	var bpfrpt_proptype_CellDataGetterParams = process.env.NODE_ENV === 'production' ? null : {
	  columnData: propTypes.any,
	  dataKey: propTypes.string.isRequired,
	  rowData: function rowData(props, propName, componentName) {
	    if (!Object.prototype.hasOwnProperty.call(props, propName)) {
	      throw new Error("Prop `" + propName + "` has type 'any' or 'mixed', but was not provided to `" + componentName + "`. Pass undefined or any other value.");
	    }
	  }
	};
	var bpfrpt_proptype_CellRendererParams$1 = process.env.NODE_ENV === 'production' ? null : {
	  cellData: propTypes.any,
	  columnData: propTypes.any,
	  dataKey: propTypes.string.isRequired,
	  rowData: function rowData(props, propName, componentName) {
	    if (!Object.prototype.hasOwnProperty.call(props, propName)) {
	      throw new Error("Prop `" + propName + "` has type 'any' or 'mixed', but was not provided to `" + componentName + "`. Pass undefined or any other value.");
	    }
	  },
	  rowIndex: propTypes.number.isRequired
	};
	var bpfrpt_proptype_HeaderRowRendererParams = process.env.NODE_ENV === 'production' ? null : {
	  className: propTypes.string.isRequired,
	  columns: propTypes.arrayOf(function (props, propName, componentName) {
	    if (!Object.prototype.hasOwnProperty.call(props, propName)) {
	      throw new Error("Prop `" + propName + "` has type 'any' or 'mixed', but was not provided to `" + componentName + "`. Pass undefined or any other value.");
	    }
	  }).isRequired,
	  style: function style(props, propName, componentName) {
	    if (!Object.prototype.hasOwnProperty.call(props, propName)) {
	      throw new Error("Prop `" + propName + "` has type 'any' or 'mixed', but was not provided to `" + componentName + "`. Pass undefined or any other value.");
	    }
	  }
	};
	var bpfrpt_proptype_HeaderRendererParams = process.env.NODE_ENV === 'production' ? null : {
	  columnData: propTypes.any,
	  dataKey: propTypes.string.isRequired,
	  disableSort: propTypes.bool,
	  label: propTypes.any,
	  sortBy: propTypes.string,
	  sortDirection: propTypes.string
	};
	var bpfrpt_proptype_RowRendererParams$1 = process.env.NODE_ENV === 'production' ? null : {
	  className: propTypes.string.isRequired,
	  columns: propTypes.arrayOf(function (props, propName, componentName) {
	    if (!Object.prototype.hasOwnProperty.call(props, propName)) {
	      throw new Error("Prop `" + propName + "` has type 'any' or 'mixed', but was not provided to `" + componentName + "`. Pass undefined or any other value.");
	    }
	  }).isRequired,
	  index: propTypes.number.isRequired,
	  isScrolling: propTypes.bool.isRequired,
	  onRowClick: propTypes.func,
	  onRowDoubleClick: propTypes.func,
	  onRowMouseOver: propTypes.func,
	  onRowMouseOut: propTypes.func,
	  rowData: function rowData(props, propName, componentName) {
	    if (!Object.prototype.hasOwnProperty.call(props, propName)) {
	      throw new Error("Prop `" + propName + "` has type 'any' or 'mixed', but was not provided to `" + componentName + "`. Pass undefined or any other value.");
	    }
	  },
	  style: function style(props, propName, componentName) {
	    if (!Object.prototype.hasOwnProperty.call(props, propName)) {
	      throw new Error("Prop `" + propName + "` has type 'any' or 'mixed', but was not provided to `" + componentName + "`. Pass undefined or any other value.");
	    }
	  }
	};

	/**
	 * Default accessor for returning a cell value for a given attribute.
	 * This function expects to operate on either a vanilla Object or an Immutable Map.
	 * You should override the column's cellDataGetter if your data is some other type of object.
	 */
	function defaultCellDataGetter(_ref) {
	  var dataKey = _ref.dataKey,
	      rowData = _ref.rowData;

	  if (typeof rowData.get === 'function') {
	    return rowData.get(dataKey);
	  } else {
	    return rowData[dataKey];
	  }
	}

	/**
	 * Default cell renderer that displays an attribute as a simple string
	 * You should override the column's cellRenderer if your data is some other type of object.
	 */
	function defaultCellRenderer(_ref) {
	  var cellData = _ref.cellData;

	  if (cellData == null) {
	    return '';
	  } else {
	    return String(cellData);
	  }
	}

	function defaultHeaderRowRenderer(_ref) {
	  var className = _ref.className,
	      columns = _ref.columns,
	      style = _ref.style;

	  return React.createElement(
	    'div',
	    { className: className, role: 'row', style: style },
	    columns
	  );
	}
	defaultHeaderRowRenderer.propTypes = process.env.NODE_ENV === 'production' ? null : bpfrpt_proptype_HeaderRowRendererParams === propTypes.any ? {} : bpfrpt_proptype_HeaderRowRendererParams;

	var SortDirection = {
	  /**
	   * Sort items in ascending order.
	   * This means arranging from the lowest value to the highest (e.g. a-z, 0-9).
	   */
	  ASC: 'ASC',

	  /**
	   * Sort items in descending order.
	   * This means arranging from the highest value to the lowest (e.g. z-a, 9-0).
	   */
	  DESC: 'DESC'
	};

	/**
	 * Displayed beside a header to indicate that a Table is currently sorted by this column.
	 */
	function SortIndicator(_ref) {
	  var sortDirection = _ref.sortDirection;

	  var classNames = clsx('ReactVirtualized__Table__sortableHeaderIcon', {
	    'ReactVirtualized__Table__sortableHeaderIcon--ASC': sortDirection === SortDirection.ASC,
	    'ReactVirtualized__Table__sortableHeaderIcon--DESC': sortDirection === SortDirection.DESC
	  });

	  return React.createElement(
	    'svg',
	    { className: classNames, width: 18, height: 18, viewBox: '0 0 24 24' },
	    sortDirection === SortDirection.ASC ? React.createElement('path', { d: 'M7 14l5-5 5 5z' }) : React.createElement('path', { d: 'M7 10l5 5 5-5z' }),
	    React.createElement('path', { d: 'M0 0h24v24H0z', fill: 'none' })
	  );
	}

	SortIndicator.propTypes = process.env.NODE_ENV !== "production" ? {
	  sortDirection: propTypes.oneOf([SortDirection.ASC, SortDirection.DESC])
	} : {};

	/**
	 * Default table header renderer.
	 */
	function defaultHeaderRenderer(_ref) {
	  var dataKey = _ref.dataKey,
	      label = _ref.label,
	      sortBy = _ref.sortBy,
	      sortDirection = _ref.sortDirection;

	  var showSortIndicator = sortBy === dataKey;
	  var children = [React.createElement(
	    'span',
	    {
	      className: 'ReactVirtualized__Table__headerTruncatedText',
	      key: 'label',
	      title: typeof label === 'string' ? label : null },
	    label
	  )];

	  if (showSortIndicator) {
	    children.push(React.createElement(SortIndicator, { key: 'SortIndicator', sortDirection: sortDirection }));
	  }

	  return children;
	}
	defaultHeaderRenderer.propTypes = process.env.NODE_ENV === 'production' ? null : bpfrpt_proptype_HeaderRendererParams === propTypes.any ? {} : bpfrpt_proptype_HeaderRendererParams;

	/**
	 * Default row renderer for Table.
	 */
	function defaultRowRenderer(_ref) {
	  var className = _ref.className,
	      columns = _ref.columns,
	      index = _ref.index,
	      key = _ref.key,
	      onRowClick = _ref.onRowClick,
	      onRowDoubleClick = _ref.onRowDoubleClick,
	      onRowMouseOut = _ref.onRowMouseOut,
	      onRowMouseOver = _ref.onRowMouseOver,
	      onRowRightClick = _ref.onRowRightClick,
	      rowData = _ref.rowData,
	      style = _ref.style;

	  var a11yProps = { 'aria-rowindex': index + 1 };

	  if (onRowClick || onRowDoubleClick || onRowMouseOut || onRowMouseOver || onRowRightClick) {
	    a11yProps['aria-label'] = 'row';
	    a11yProps.tabIndex = 0;

	    if (onRowClick) {
	      a11yProps.onClick = function (event) {
	        return onRowClick({ event: event, index: index, rowData: rowData });
	      };
	    }
	    if (onRowDoubleClick) {
	      a11yProps.onDoubleClick = function (event) {
	        return onRowDoubleClick({ event: event, index: index, rowData: rowData });
	      };
	    }
	    if (onRowMouseOut) {
	      a11yProps.onMouseOut = function (event) {
	        return onRowMouseOut({ event: event, index: index, rowData: rowData });
	      };
	    }
	    if (onRowMouseOver) {
	      a11yProps.onMouseOver = function (event) {
	        return onRowMouseOver({ event: event, index: index, rowData: rowData });
	      };
	    }
	    if (onRowRightClick) {
	      a11yProps.onContextMenu = function (event) {
	        return onRowRightClick({ event: event, index: index, rowData: rowData });
	      };
	    }
	  }

	  return React.createElement(
	    'div',
	    _extends$5({}, a11yProps, {
	      className: className,
	      key: key,
	      role: 'row',
	      style: style }),
	    columns
	  );
	}
	defaultRowRenderer.propTypes = process.env.NODE_ENV === 'production' ? null : bpfrpt_proptype_RowRendererParams$1 === propTypes.any ? {} : bpfrpt_proptype_RowRendererParams$1;

	/**
	 * Describes the header and cell contents of a table column.
	 */

	var Column = function (_React$Component) {
	  _inherits$3(Column, _React$Component);

	  function Column() {
	    _classCallCheck$8(this, Column);

	    return _possibleConstructorReturn$3(this, (Column.__proto__ || _Object$getPrototypeOf(Column)).apply(this, arguments));
	  }

	  return Column;
	}(React.Component);

	Column.defaultProps = {
	  cellDataGetter: defaultCellDataGetter,
	  cellRenderer: defaultCellRenderer,
	  defaultSortDirection: SortDirection.ASC,
	  flexGrow: 0,
	  flexShrink: 1,
	  headerRenderer: defaultHeaderRenderer,
	  style: {}
	};
	Column.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** Optional aria-label value to set on the column header */
	  'aria-label': propTypes.string,

	  /**
	   * Callback responsible for returning a cell's data, given its :dataKey
	   * ({ columnData: any, dataKey: string, rowData: any }): any
	   */
	  cellDataGetter: propTypes.func,

	  /**
	   * Callback responsible for rendering a cell's contents.
	   * ({ cellData: any, columnData: any, dataKey: string, rowData: any, rowIndex: number }): node
	   */
	  cellRenderer: propTypes.func,

	  /** Optional CSS class to apply to cell */
	  className: propTypes.string,

	  /** Optional additional data passed to this column's :cellDataGetter */
	  columnData: propTypes.object,

	  /** Uniquely identifies the row-data attribute corresponding to this cell */
	  dataKey: propTypes.any.isRequired,

	  /** Optional direction to be used when clicked the first time */
	  defaultSortDirection: propTypes.oneOf([SortDirection.ASC, SortDirection.DESC]),

	  /** If sort is enabled for the table at large, disable it for this column */
	  disableSort: propTypes.bool,

	  /** Flex grow style; defaults to 0 */
	  flexGrow: propTypes.number,

	  /** Flex shrink style; defaults to 1 */
	  flexShrink: propTypes.number,

	  /** Optional CSS class to apply to this column's header */
	  headerClassName: propTypes.string,

	  /**
	   * Optional callback responsible for rendering a column header contents.
	   * ({ columnData: object, dataKey: string, disableSort: boolean, label: node, sortBy: string, sortDirection: string }): PropTypes.node
	   */
	  headerRenderer: propTypes.func.isRequired,

	  /** Optional inline style to apply to this column's header */
	  headerStyle: propTypes.object,

	  /** Optional id to set on the column header */
	  id: propTypes.string,

	  /** Header label for this column */
	  label: propTypes.node,

	  /** Maximum width of column; this property will only be used if :flexGrow is > 0. */
	  maxWidth: propTypes.number,

	  /** Minimum width of column. */
	  minWidth: propTypes.number,

	  /** Optional inline style to apply to cell */
	  style: propTypes.object,

	  /** Flex basis (width) for this column; This value can grow or shrink based on :flexGrow and :flexShrink properties. */
	  width: propTypes.number.isRequired
	} : {};

	/**
	 * Table component with fixed headers and virtualized rows for improved performance with large data sets.
	 * This component expects explicit width, height, and padding parameters.
	 */

	var Table = function (_React$PureComponent) {
	  _inherits$3(Table, _React$PureComponent);

	  function Table(props) {
	    _classCallCheck$8(this, Table);

	    var _this = _possibleConstructorReturn$3(this, (Table.__proto__ || _Object$getPrototypeOf(Table)).call(this, props));

	    _this.state = {
	      scrollbarWidth: 0
	    };

	    _this._createColumn = _this._createColumn.bind(_this);
	    _this._createRow = _this._createRow.bind(_this);
	    _this._onScroll = _this._onScroll.bind(_this);
	    _this._onSectionRendered = _this._onSectionRendered.bind(_this);
	    _this._setRef = _this._setRef.bind(_this);
	    return _this;
	  }

	  _createClass$7(Table, [{
	    key: 'forceUpdateGrid',
	    value: function forceUpdateGrid() {
	      if (this.Grid) {
	        this.Grid.forceUpdate();
	      }
	    }

	    /** See Grid#getOffsetForCell */

	  }, {
	    key: 'getOffsetForRow',
	    value: function getOffsetForRow(_ref) {
	      var alignment = _ref.alignment,
	          index = _ref.index;

	      if (this.Grid) {
	        var _Grid$getOffsetForCel = this.Grid.getOffsetForCell({
	          alignment: alignment,
	          rowIndex: index
	        }),
	            scrollTop = _Grid$getOffsetForCel.scrollTop;

	        return scrollTop;
	      }
	      return 0;
	    }

	    /** CellMeasurer compatibility */

	  }, {
	    key: 'invalidateCellSizeAfterRender',
	    value: function invalidateCellSizeAfterRender(_ref2) {
	      var columnIndex = _ref2.columnIndex,
	          rowIndex = _ref2.rowIndex;

	      if (this.Grid) {
	        this.Grid.invalidateCellSizeAfterRender({
	          rowIndex: rowIndex,
	          columnIndex: columnIndex
	        });
	      }
	    }

	    /** See Grid#measureAllCells */

	  }, {
	    key: 'measureAllRows',
	    value: function measureAllRows() {
	      if (this.Grid) {
	        this.Grid.measureAllCells();
	      }
	    }

	    /** CellMeasurer compatibility */

	  }, {
	    key: 'recomputeGridSize',
	    value: function recomputeGridSize() {
	      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
	          _ref3$columnIndex = _ref3.columnIndex,
	          columnIndex = _ref3$columnIndex === undefined ? 0 : _ref3$columnIndex,
	          _ref3$rowIndex = _ref3.rowIndex,
	          rowIndex = _ref3$rowIndex === undefined ? 0 : _ref3$rowIndex;

	      if (this.Grid) {
	        this.Grid.recomputeGridSize({
	          rowIndex: rowIndex,
	          columnIndex: columnIndex
	        });
	      }
	    }

	    /** See Grid#recomputeGridSize */

	  }, {
	    key: 'recomputeRowHeights',
	    value: function recomputeRowHeights() {
	      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

	      if (this.Grid) {
	        this.Grid.recomputeGridSize({
	          rowIndex: index
	        });
	      }
	    }

	    /** See Grid#scrollToPosition */

	  }, {
	    key: 'scrollToPosition',
	    value: function scrollToPosition() {
	      var scrollTop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

	      if (this.Grid) {
	        this.Grid.scrollToPosition({ scrollTop: scrollTop });
	      }
	    }

	    /** See Grid#scrollToCell */

	  }, {
	    key: 'scrollToRow',
	    value: function scrollToRow() {
	      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

	      if (this.Grid) {
	        this.Grid.scrollToCell({
	          columnIndex: 0,
	          rowIndex: index
	        });
	      }
	    }
	  }, {
	    key: 'getScrollbarWidth',
	    value: function getScrollbarWidth() {
	      if (this.Grid) {
	        var _Grid = ReactDOM.findDOMNode(this.Grid);
	        var clientWidth = _Grid.clientWidth || 0;
	        var offsetWidth = _Grid.offsetWidth || 0;
	        return offsetWidth - clientWidth;
	      }

	      return 0;
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      this._setScrollbarWidth();
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate() {
	      this._setScrollbarWidth();
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var _this2 = this;

	      var _props = this.props,
	          children = _props.children,
	          className = _props.className,
	          disableHeader = _props.disableHeader,
	          gridClassName = _props.gridClassName,
	          gridStyle = _props.gridStyle,
	          headerHeight = _props.headerHeight,
	          headerRowRenderer = _props.headerRowRenderer,
	          height = _props.height,
	          id = _props.id,
	          noRowsRenderer = _props.noRowsRenderer,
	          rowClassName = _props.rowClassName,
	          rowStyle = _props.rowStyle,
	          scrollToIndex = _props.scrollToIndex,
	          style = _props.style,
	          width = _props.width;
	      var scrollbarWidth = this.state.scrollbarWidth;


	      var availableRowsHeight = disableHeader ? height : height - headerHeight;

	      var rowClass = typeof rowClassName === 'function' ? rowClassName({ index: -1 }) : rowClassName;
	      var rowStyleObject = typeof rowStyle === 'function' ? rowStyle({ index: -1 }) : rowStyle;

	      // Precompute and cache column styles before rendering rows and columns to speed things up
	      this._cachedColumnStyles = [];
	      React.Children.toArray(children).forEach(function (column, index) {
	        var flexStyles = _this2._getFlexStyleForColumn(column, column.props.style);

	        _this2._cachedColumnStyles[index] = _extends$5({
	          overflow: 'hidden'
	        }, flexStyles);
	      });

	      // Note that we specify :rowCount, :scrollbarWidth, :sortBy, and :sortDirection as properties on Grid even though these have nothing to do with Grid.
	      // This is done because Grid is a pure component and won't update unless its properties or state has changed.
	      // Any property that should trigger a re-render of Grid then is specified here to avoid a stale display.
	      return React.createElement(
	        'div',
	        {
	          'aria-label': this.props['aria-label'],
	          'aria-labelledby': this.props['aria-labelledby'],
	          'aria-colcount': React.Children.toArray(children).length,
	          'aria-rowcount': this.props.rowCount,
	          className: clsx('ReactVirtualized__Table', className),
	          id: id,
	          role: 'grid',
	          style: style },
	        !disableHeader && headerRowRenderer({
	          className: clsx('ReactVirtualized__Table__headerRow', rowClass),
	          columns: this._getHeaderColumns(),
	          style: _extends$5({
	            height: headerHeight,
	            overflow: 'hidden',
	            paddingRight: scrollbarWidth,
	            width: width
	          }, rowStyleObject)
	        }),
	        React.createElement(Grid$1, _extends$5({}, this.props, {
	          'aria-readonly': null,
	          autoContainerWidth: true,
	          className: clsx('ReactVirtualized__Table__Grid', gridClassName),
	          cellRenderer: this._createRow,
	          columnWidth: width,
	          columnCount: 1,
	          height: availableRowsHeight,
	          id: undefined,
	          noContentRenderer: noRowsRenderer,
	          onScroll: this._onScroll,
	          onSectionRendered: this._onSectionRendered,
	          ref: this._setRef,
	          role: 'rowgroup',
	          scrollbarWidth: scrollbarWidth,
	          scrollToRow: scrollToIndex,
	          style: _extends$5({}, gridStyle, {
	            overflowX: 'hidden'
	          })
	        }))
	      );
	    }
	  }, {
	    key: '_createColumn',
	    value: function _createColumn(_ref4) {
	      var column = _ref4.column,
	          columnIndex = _ref4.columnIndex,
	          isScrolling = _ref4.isScrolling,
	          parent = _ref4.parent,
	          rowData = _ref4.rowData,
	          rowIndex = _ref4.rowIndex;
	      var onColumnClick = this.props.onColumnClick;
	      var _column$props = column.props,
	          cellDataGetter = _column$props.cellDataGetter,
	          cellRenderer = _column$props.cellRenderer,
	          className = _column$props.className,
	          columnData = _column$props.columnData,
	          dataKey = _column$props.dataKey,
	          id = _column$props.id;


	      var cellData = cellDataGetter({ columnData: columnData, dataKey: dataKey, rowData: rowData });
	      var renderedCell = cellRenderer({
	        cellData: cellData,
	        columnData: columnData,
	        columnIndex: columnIndex,
	        dataKey: dataKey,
	        isScrolling: isScrolling,
	        parent: parent,
	        rowData: rowData,
	        rowIndex: rowIndex
	      });

	      var onClick = function onClick(event) {
	        onColumnClick && onColumnClick({ columnData: columnData, dataKey: dataKey, event: event });
	      };

	      var style = this._cachedColumnStyles[columnIndex];

	      var title = typeof renderedCell === 'string' ? renderedCell : null;

	      // Avoid using object-spread syntax with multiple objects here,
	      // Since it results in an extra method call to 'babel-runtime/helpers/extends'
	      // See PR https://github.com/bvaughn/react-virtualized/pull/942
	      return React.createElement(
	        'div',
	        {
	          'aria-colindex': columnIndex + 1,
	          'aria-describedby': id,
	          className: clsx('ReactVirtualized__Table__rowColumn', className),
	          key: 'Row' + rowIndex + '-' + 'Col' + columnIndex,
	          onClick: onClick,
	          role: 'gridcell',
	          style: style,
	          title: title },
	        renderedCell
	      );
	    }
	  }, {
	    key: '_createHeader',
	    value: function _createHeader(_ref5) {
	      var column = _ref5.column,
	          index = _ref5.index;
	      var _props2 = this.props,
	          headerClassName = _props2.headerClassName,
	          headerStyle = _props2.headerStyle,
	          onHeaderClick = _props2.onHeaderClick,
	          sort = _props2.sort,
	          sortBy = _props2.sortBy,
	          sortDirection = _props2.sortDirection;
	      var _column$props2 = column.props,
	          columnData = _column$props2.columnData,
	          dataKey = _column$props2.dataKey,
	          defaultSortDirection = _column$props2.defaultSortDirection,
	          disableSort = _column$props2.disableSort,
	          headerRenderer = _column$props2.headerRenderer,
	          id = _column$props2.id,
	          label = _column$props2.label;

	      var sortEnabled = !disableSort && sort;

	      var classNames = clsx('ReactVirtualized__Table__headerColumn', headerClassName, column.props.headerClassName, {
	        ReactVirtualized__Table__sortableHeaderColumn: sortEnabled
	      });
	      var style = this._getFlexStyleForColumn(column, _extends$5({}, headerStyle, column.props.headerStyle));

	      var renderedHeader = headerRenderer({
	        columnData: columnData,
	        dataKey: dataKey,
	        disableSort: disableSort,
	        label: label,
	        sortBy: sortBy,
	        sortDirection: sortDirection
	      });

	      var headerOnClick = void 0,
	          headerOnKeyDown = void 0,
	          headerTabIndex = void 0,
	          headerAriaSort = void 0,
	          headerAriaLabel = void 0;

	      if (sortEnabled || onHeaderClick) {
	        // If this is a sortable header, clicking it should update the table data's sorting.
	        var isFirstTimeSort = sortBy !== dataKey;

	        // If this is the firstTime sort of this column, use the column default sort order.
	        // Otherwise, invert the direction of the sort.
	        var newSortDirection = isFirstTimeSort ? defaultSortDirection : sortDirection === SortDirection.DESC ? SortDirection.ASC : SortDirection.DESC;

	        var onClick = function onClick(event) {
	          sortEnabled && sort({
	            defaultSortDirection: defaultSortDirection,
	            event: event,
	            sortBy: dataKey,
	            sortDirection: newSortDirection
	          });
	          onHeaderClick && onHeaderClick({ columnData: columnData, dataKey: dataKey, event: event });
	        };

	        var onKeyDown = function onKeyDown(event) {
	          if (event.key === 'Enter' || event.key === ' ') {
	            onClick(event);
	          }
	        };

	        headerAriaLabel = column.props['aria-label'] || label || dataKey;
	        headerAriaSort = 'none';
	        headerTabIndex = 0;
	        headerOnClick = onClick;
	        headerOnKeyDown = onKeyDown;
	      }

	      if (sortBy === dataKey) {
	        headerAriaSort = sortDirection === SortDirection.ASC ? 'ascending' : 'descending';
	      }

	      // Avoid using object-spread syntax with multiple objects here,
	      // Since it results in an extra method call to 'babel-runtime/helpers/extends'
	      // See PR https://github.com/bvaughn/react-virtualized/pull/942
	      return React.createElement(
	        'div',
	        {
	          'aria-label': headerAriaLabel,
	          'aria-sort': headerAriaSort,
	          className: classNames,
	          id: id,
	          key: 'Header-Col' + index,
	          onClick: headerOnClick,
	          onKeyDown: headerOnKeyDown,
	          role: 'columnheader',
	          style: style,
	          tabIndex: headerTabIndex },
	        renderedHeader
	      );
	    }
	  }, {
	    key: '_createRow',
	    value: function _createRow(_ref6) {
	      var _this3 = this;

	      var index = _ref6.rowIndex,
	          isScrolling = _ref6.isScrolling,
	          key = _ref6.key,
	          parent = _ref6.parent,
	          style = _ref6.style;
	      var _props3 = this.props,
	          children = _props3.children,
	          onRowClick = _props3.onRowClick,
	          onRowDoubleClick = _props3.onRowDoubleClick,
	          onRowRightClick = _props3.onRowRightClick,
	          onRowMouseOver = _props3.onRowMouseOver,
	          onRowMouseOut = _props3.onRowMouseOut,
	          rowClassName = _props3.rowClassName,
	          rowGetter = _props3.rowGetter,
	          rowRenderer = _props3.rowRenderer,
	          rowStyle = _props3.rowStyle;
	      var scrollbarWidth = this.state.scrollbarWidth;


	      var rowClass = typeof rowClassName === 'function' ? rowClassName({ index: index }) : rowClassName;
	      var rowStyleObject = typeof rowStyle === 'function' ? rowStyle({ index: index }) : rowStyle;
	      var rowData = rowGetter({ index: index });

	      var columns = React.Children.toArray(children).map(function (column, columnIndex) {
	        return _this3._createColumn({
	          column: column,
	          columnIndex: columnIndex,
	          isScrolling: isScrolling,
	          parent: parent,
	          rowData: rowData,
	          rowIndex: index,
	          scrollbarWidth: scrollbarWidth
	        });
	      });

	      var className = clsx('ReactVirtualized__Table__row', rowClass);
	      var flattenedStyle = _extends$5({}, style, {
	        height: this._getRowHeight(index),
	        overflow: 'hidden',
	        paddingRight: scrollbarWidth
	      }, rowStyleObject);

	      return rowRenderer({
	        className: className,
	        columns: columns,
	        index: index,
	        isScrolling: isScrolling,
	        key: key,
	        onRowClick: onRowClick,
	        onRowDoubleClick: onRowDoubleClick,
	        onRowRightClick: onRowRightClick,
	        onRowMouseOver: onRowMouseOver,
	        onRowMouseOut: onRowMouseOut,
	        rowData: rowData,
	        style: flattenedStyle
	      });
	    }

	    /**
	     * Determines the flex-shrink, flex-grow, and width values for a cell (header or column).
	     */

	  }, {
	    key: '_getFlexStyleForColumn',
	    value: function _getFlexStyleForColumn(column) {
	      var customStyle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	      var flexValue = column.props.flexGrow + ' ' + column.props.flexShrink + ' ' + column.props.width + 'px';

	      var style = _extends$5({}, customStyle, {
	        flex: flexValue,
	        msFlex: flexValue,
	        WebkitFlex: flexValue
	      });

	      if (column.props.maxWidth) {
	        style.maxWidth = column.props.maxWidth;
	      }

	      if (column.props.minWidth) {
	        style.minWidth = column.props.minWidth;
	      }

	      return style;
	    }
	  }, {
	    key: '_getHeaderColumns',
	    value: function _getHeaderColumns() {
	      var _this4 = this;

	      var _props4 = this.props,
	          children = _props4.children,
	          disableHeader = _props4.disableHeader;

	      var items = disableHeader ? [] : React.Children.toArray(children);

	      return items.map(function (column, index) {
	        return _this4._createHeader({ column: column, index: index });
	      });
	    }
	  }, {
	    key: '_getRowHeight',
	    value: function _getRowHeight(rowIndex) {
	      var rowHeight = this.props.rowHeight;


	      return typeof rowHeight === 'function' ? rowHeight({ index: rowIndex }) : rowHeight;
	    }
	  }, {
	    key: '_onScroll',
	    value: function _onScroll(_ref7) {
	      var clientHeight = _ref7.clientHeight,
	          scrollHeight = _ref7.scrollHeight,
	          scrollTop = _ref7.scrollTop;
	      var onScroll = this.props.onScroll;


	      onScroll({ clientHeight: clientHeight, scrollHeight: scrollHeight, scrollTop: scrollTop });
	    }
	  }, {
	    key: '_onSectionRendered',
	    value: function _onSectionRendered(_ref8) {
	      var rowOverscanStartIndex = _ref8.rowOverscanStartIndex,
	          rowOverscanStopIndex = _ref8.rowOverscanStopIndex,
	          rowStartIndex = _ref8.rowStartIndex,
	          rowStopIndex = _ref8.rowStopIndex;
	      var onRowsRendered = this.props.onRowsRendered;


	      onRowsRendered({
	        overscanStartIndex: rowOverscanStartIndex,
	        overscanStopIndex: rowOverscanStopIndex,
	        startIndex: rowStartIndex,
	        stopIndex: rowStopIndex
	      });
	    }
	  }, {
	    key: '_setRef',
	    value: function _setRef(ref) {
	      this.Grid = ref;
	    }
	  }, {
	    key: '_setScrollbarWidth',
	    value: function _setScrollbarWidth() {
	      var scrollbarWidth = this.getScrollbarWidth();

	      this.setState({ scrollbarWidth: scrollbarWidth });
	    }
	  }]);

	  return Table;
	}(React.PureComponent);

	Table.defaultProps = {
	  disableHeader: false,
	  estimatedRowSize: 30,
	  headerHeight: 0,
	  headerStyle: {},
	  noRowsRenderer: function noRowsRenderer() {
	    return null;
	  },
	  onRowsRendered: function onRowsRendered() {
	    return null;
	  },
	  onScroll: function onScroll() {
	    return null;
	  },
	  overscanIndicesGetter: defaultOverscanIndicesGetter$1,
	  overscanRowCount: 10,
	  rowRenderer: defaultRowRenderer,
	  headerRowRenderer: defaultHeaderRowRenderer,
	  rowStyle: {},
	  scrollToAlignment: 'auto',
	  scrollToIndex: -1,
	  style: {}
	};
	Table.propTypes = process.env.NODE_ENV !== "production" ? {
	  /** This is just set on the grid top element. */
	  'aria-label': propTypes.string,

	  /** This is just set on the grid top element. */
	  'aria-labelledby': propTypes.string,

	  /**
	   * Removes fixed height from the scrollingContainer so that the total height
	   * of rows can stretch the window. Intended for use with WindowScroller
	   */
	  autoHeight: propTypes.bool,

	  /** One or more Columns describing the data displayed in this row */
	  children: function children(props) {
	    var children = React.Children.toArray(props.children);
	    for (var i = 0; i < children.length; i++) {
	      var childType = children[i].type;
	      if (childType !== Column && !(childType.prototype instanceof Column)) {
	        return new Error('Table only accepts children of type Column');
	      }
	    }
	  },

	  /** Optional CSS class name */
	  className: propTypes.string,

	  /** Disable rendering the header at all */
	  disableHeader: propTypes.bool,

	  /**
	   * Used to estimate the total height of a Table before all of its rows have actually been measured.
	   * The estimated total height is adjusted as rows are rendered.
	   */
	  estimatedRowSize: propTypes.number.isRequired,

	  /** Optional custom CSS class name to attach to inner Grid element. */
	  gridClassName: propTypes.string,

	  /** Optional inline style to attach to inner Grid element. */
	  gridStyle: propTypes.object,

	  /** Optional CSS class to apply to all column headers */
	  headerClassName: propTypes.string,

	  /** Fixed height of header row */
	  headerHeight: propTypes.number.isRequired,

	  /**
	   * Responsible for rendering a table row given an array of columns:
	   * Should implement the following interface: ({
	   *   className: string,
	   *   columns: any[],
	   *   style: any
	   * }): PropTypes.node
	   */
	  headerRowRenderer: propTypes.func,

	  /** Optional custom inline style to attach to table header columns. */
	  headerStyle: propTypes.object,

	  /** Fixed/available height for out DOM element */
	  height: propTypes.number.isRequired,

	  /** Optional id */
	  id: propTypes.string,

	  /** Optional renderer to be used in place of table body rows when rowCount is 0 */
	  noRowsRenderer: propTypes.func,

	  /**
	   * Optional callback when a column is clicked.
	   * ({ columnData: any, dataKey: string }): void
	   */
	  onColumnClick: propTypes.func,

	  /**
	   * Optional callback when a column's header is clicked.
	   * ({ columnData: any, dataKey: string }): void
	   */
	  onHeaderClick: propTypes.func,

	  /**
	   * Callback invoked when a user clicks on a table row.
	   * ({ index: number }): void
	   */
	  onRowClick: propTypes.func,

	  /**
	   * Callback invoked when a user double-clicks on a table row.
	   * ({ index: number }): void
	   */
	  onRowDoubleClick: propTypes.func,

	  /**
	   * Callback invoked when the mouse leaves a table row.
	   * ({ index: number }): void
	   */
	  onRowMouseOut: propTypes.func,

	  /**
	   * Callback invoked when a user moves the mouse over a table row.
	   * ({ index: number }): void
	   */
	  onRowMouseOver: propTypes.func,

	  /**
	   * Callback invoked when a user right-clicks on a table row.
	   * ({ index: number }): void
	   */
	  onRowRightClick: propTypes.func,

	  /**
	   * Callback invoked with information about the slice of rows that were just rendered.
	   * ({ startIndex, stopIndex }): void
	   */
	  onRowsRendered: propTypes.func,

	  /**
	   * Callback invoked whenever the scroll offset changes within the inner scrollable region.
	   * This callback can be used to sync scrolling between lists, tables, or grids.
	   * ({ clientHeight, scrollHeight, scrollTop }): void
	   */
	  onScroll: propTypes.func.isRequired,

	  /** See Grid#overscanIndicesGetter */
	  overscanIndicesGetter: propTypes.func.isRequired,

	  /**
	   * Number of rows to render above/below the visible bounds of the list.
	   * These rows can help for smoother scrolling on touch devices.
	   */
	  overscanRowCount: propTypes.number.isRequired,

	  /**
	   * Optional CSS class to apply to all table rows (including the header row).
	   * This property can be a CSS class name (string) or a function that returns a class name.
	   * If a function is provided its signature should be: ({ index: number }): string
	   */
	  rowClassName: propTypes.oneOfType([propTypes.string, propTypes.func]),

	  /**
	   * Callback responsible for returning a data row given an index.
	   * ({ index: number }): any
	   */
	  rowGetter: propTypes.func.isRequired,

	  /**
	   * Either a fixed row height (number) or a function that returns the height of a row given its index.
	   * ({ index: number }): number
	   */
	  rowHeight: propTypes.oneOfType([propTypes.number, propTypes.func]).isRequired,

	  /** Number of rows in table. */
	  rowCount: propTypes.number.isRequired,

	  /**
	   * Responsible for rendering a table row given an array of columns:
	   * Should implement the following interface: ({
	   *   className: string,
	   *   columns: Array,
	   *   index: number,
	   *   isScrolling: boolean,
	   *   onRowClick: ?Function,
	   *   onRowDoubleClick: ?Function,
	   *   onRowMouseOver: ?Function,
	   *   onRowMouseOut: ?Function,
	   *   rowData: any,
	   *   style: any
	   * }): PropTypes.node
	   */
	  rowRenderer: propTypes.func,

	  /** Optional custom inline style to attach to table rows. */
	  rowStyle: propTypes.oneOfType([propTypes.object, propTypes.func]).isRequired,

	  /** See Grid#scrollToAlignment */
	  scrollToAlignment: propTypes.oneOf(['auto', 'end', 'start', 'center']).isRequired,

	  /** Row index to ensure visible (by forcefully scrolling if necessary) */
	  scrollToIndex: propTypes.number.isRequired,

	  /** Vertical offset. */
	  scrollTop: propTypes.number,

	  /**
	   * Sort function to be called if a sortable header is clicked.
	   * Should implement the following interface: ({
	   *   defaultSortDirection: 'ASC' | 'DESC',
	   *   event: MouseEvent,
	   *   sortBy: string,
	   *   sortDirection: SortDirection
	   * }): void
	   */
	  sort: propTypes.func,

	  /** Table data is currently sorted by this :dataKey (if it is sorted at all) */
	  sortBy: propTypes.string,

	  /** Table data is currently sorted in this direction (if it is sorted at all) */
	  sortDirection: propTypes.oneOf([SortDirection.ASC, SortDirection.DESC]),

	  /** Optional inline style */
	  style: propTypes.object,

	  /** Tab index for focus */
	  tabIndex: propTypes.number,

	  /** Width of list */
	  width: propTypes.number.isRequired
	} : {};

	var mountedInstances = [];
	var originalBodyPointerEvents = null;
	var disablePointerEventsTimeoutId = null;

	function enablePointerEventsIfDisabled() {
	  if (disablePointerEventsTimeoutId) {
	    disablePointerEventsTimeoutId = null;

	    if (document.body && originalBodyPointerEvents != null) {
	      document.body.style.pointerEvents = originalBodyPointerEvents;
	    }

	    originalBodyPointerEvents = null;
	  }
	}

	function enablePointerEventsAfterDelayCallback() {
	  enablePointerEventsIfDisabled();
	  mountedInstances.forEach(function (instance) {
	    return instance.__resetIsScrolling();
	  });
	}

	function enablePointerEventsAfterDelay() {
	  if (disablePointerEventsTimeoutId) {
	    cancelAnimationTimeout(disablePointerEventsTimeoutId);
	  }

	  var maximumTimeout = 0;
	  mountedInstances.forEach(function (instance) {
	    maximumTimeout = Math.max(maximumTimeout, instance.props.scrollingResetTimeInterval);
	  });

	  disablePointerEventsTimeoutId = requestAnimationTimeout(enablePointerEventsAfterDelayCallback, maximumTimeout);
	}

	function onScrollWindow(event) {
	  if (event.currentTarget === window && originalBodyPointerEvents == null && document.body) {
	    originalBodyPointerEvents = document.body.style.pointerEvents;

	    document.body.style.pointerEvents = 'none';
	  }
	  enablePointerEventsAfterDelay();
	  mountedInstances.forEach(function (instance) {
	    if (instance.props.scrollElement === event.currentTarget) {
	      instance.__handleWindowScrollEvent();
	    }
	  });
	}

	function registerScrollListener(component, element) {
	  if (!mountedInstances.some(function (instance) {
	    return instance.props.scrollElement === element;
	  })) {
	    element.addEventListener('scroll', onScrollWindow);
	  }
	  mountedInstances.push(component);
	}

	function unregisterScrollListener(component, element) {
	  mountedInstances = mountedInstances.filter(function (instance) {
	    return instance !== component;
	  });
	  if (!mountedInstances.length) {
	    element.removeEventListener('scroll', onScrollWindow);
	    if (disablePointerEventsTimeoutId) {
	      cancelAnimationTimeout(disablePointerEventsTimeoutId);
	      enablePointerEventsIfDisabled();
	    }
	  }
	}

	/**
	 * Gets the dimensions of the element, accounting for API differences between
	 * `window` and other DOM elements.
	 */

	var isWindow = function isWindow(element) {
	  return element === window;
	};

	// TODO Move this into WindowScroller and import from there


	var getBoundingBox = function getBoundingBox(element) {
	  return element.getBoundingClientRect();
	};

	function getDimensions(scrollElement, props) {
	  if (!scrollElement) {
	    return {
	      height: props.serverHeight,
	      width: props.serverWidth
	    };
	  } else if (isWindow(scrollElement)) {
	    var _window = window,
	        innerHeight = _window.innerHeight,
	        innerWidth = _window.innerWidth;

	    return {
	      height: typeof innerHeight === 'number' ? innerHeight : 0,
	      width: typeof innerWidth === 'number' ? innerWidth : 0
	    };
	  } else {
	    return getBoundingBox(scrollElement);
	  }
	}

	/**
	 * Gets the vertical and horizontal position of an element within its scroll container.
	 * Elements that have been “scrolled past” return negative values.
	 * Handles edge-case where a user is navigating back (history) from an already-scrolled page.
	 * In this case the body’s top or left position will be a negative number and this element’s top or left will be increased (by that amount).
	 */
	function getPositionOffset(element, container) {
	  if (isWindow(container) && document.documentElement) {
	    var containerElement = document.documentElement;
	    var elementRect = getBoundingBox(element);
	    var containerRect = getBoundingBox(containerElement);
	    return {
	      top: elementRect.top - containerRect.top,
	      left: elementRect.left - containerRect.left
	    };
	  } else {
	    var scrollOffset = getScrollOffset(container);
	    var _elementRect = getBoundingBox(element);
	    var _containerRect = getBoundingBox(container);
	    return {
	      top: _elementRect.top + scrollOffset.top - _containerRect.top,
	      left: _elementRect.left + scrollOffset.left - _containerRect.left
	    };
	  }
	}

	/**
	 * Gets the vertical and horizontal scroll amount of the element, accounting for IE compatibility
	 * and API differences between `window` and other DOM elements.
	 */
	function getScrollOffset(element) {
	  if (isWindow(element) && document.documentElement) {
	    return {
	      top: 'scrollY' in window ? window.scrollY : document.documentElement.scrollTop,
	      left: 'scrollX' in window ? window.scrollX : document.documentElement.scrollLeft
	    };
	  } else {
	    return {
	      top: element.scrollTop,
	      left: element.scrollLeft
	    };
	  }
	}

	/**
	 * Specifies the number of miliseconds during which to disable pointer events while a scroll is in progress.
	 * This improves performance and makes scrolling smoother.
	 */
	var IS_SCROLLING_TIMEOUT$1 = 150;

	var getWindow = function getWindow() {
	  return typeof window !== 'undefined' ? window : undefined;
	};

	var WindowScroller = function (_React$PureComponent) {
	  _inherits$3(WindowScroller, _React$PureComponent);

	  function WindowScroller() {
	    var _ref;

	    var _temp, _this, _ret;

	    _classCallCheck$8(this, WindowScroller);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return _ret = (_temp = (_this = _possibleConstructorReturn$3(this, (_ref = WindowScroller.__proto__ || _Object$getPrototypeOf(WindowScroller)).call.apply(_ref, [this].concat(args))), _this), _this._window = getWindow(), _this._isMounted = false, _this._positionFromTop = 0, _this._positionFromLeft = 0, _this.state = _extends$5({}, getDimensions(_this.props.scrollElement, _this.props), {
	      isScrolling: false,
	      scrollLeft: 0,
	      scrollTop: 0
	    }), _this._registerChild = function (element) {
	      if (element && !(element instanceof Element)) {
	        console.warn('WindowScroller registerChild expects to be passed Element or null');
	      }
	      _this._child = element;
	      _this.updatePosition();
	    }, _this._onChildScroll = function (_ref2) {
	      var scrollTop = _ref2.scrollTop;

	      if (_this.state.scrollTop === scrollTop) {
	        return;
	      }

	      var scrollElement = _this.props.scrollElement;
	      if (scrollElement) {
	        if (typeof scrollElement.scrollTo === 'function') {
	          scrollElement.scrollTo(0, scrollTop + _this._positionFromTop);
	        } else {
	          scrollElement.scrollTop = scrollTop + _this._positionFromTop;
	        }
	      }
	    }, _this._registerResizeListener = function (element) {
	      if (element === window) {
	        window.addEventListener('resize', _this._onResize, false);
	      } else {
	        _this._detectElementResize.addResizeListener(element, _this._onResize);
	      }
	    }, _this._unregisterResizeListener = function (element) {
	      if (element === window) {
	        window.removeEventListener('resize', _this._onResize, false);
	      } else if (element) {
	        _this._detectElementResize.removeResizeListener(element, _this._onResize);
	      }
	    }, _this._onResize = function () {
	      _this.updatePosition();
	    }, _this.__handleWindowScrollEvent = function () {
	      if (!_this._isMounted) {
	        return;
	      }

	      var onScroll = _this.props.onScroll;


	      var scrollElement = _this.props.scrollElement;
	      if (scrollElement) {
	        var scrollOffset = getScrollOffset(scrollElement);
	        var _scrollLeft = Math.max(0, scrollOffset.left - _this._positionFromLeft);
	        var _scrollTop = Math.max(0, scrollOffset.top - _this._positionFromTop);

	        _this.setState({
	          isScrolling: true,
	          scrollLeft: _scrollLeft,
	          scrollTop: _scrollTop
	        });

	        onScroll({
	          scrollLeft: _scrollLeft,
	          scrollTop: _scrollTop
	        });
	      }
	    }, _this.__resetIsScrolling = function () {
	      _this.setState({
	        isScrolling: false
	      });
	    }, _temp), _possibleConstructorReturn$3(_this, _ret);
	  }

	  _createClass$7(WindowScroller, [{
	    key: 'updatePosition',
	    value: function updatePosition() {
	      var scrollElement = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.scrollElement;
	      var onResize = this.props.onResize;
	      var _state = this.state,
	          height = _state.height,
	          width = _state.width;


	      var thisNode = this._child || ReactDOM.findDOMNode(this);
	      if (thisNode instanceof Element && scrollElement) {
	        var offset = getPositionOffset(thisNode, scrollElement);
	        this._positionFromTop = offset.top;
	        this._positionFromLeft = offset.left;
	      }

	      var dimensions = getDimensions(scrollElement, this.props);
	      if (height !== dimensions.height || width !== dimensions.width) {
	        this.setState({
	          height: dimensions.height,
	          width: dimensions.width
	        });
	        onResize({
	          height: dimensions.height,
	          width: dimensions.width
	        });
	      }
	    }
	  }, {
	    key: 'componentDidMount',
	    value: function componentDidMount() {
	      var scrollElement = this.props.scrollElement;

	      this._detectElementResize = createDetectElementResize();

	      this.updatePosition(scrollElement);

	      if (scrollElement) {
	        registerScrollListener(this, scrollElement);
	        this._registerResizeListener(scrollElement);
	      }

	      this._isMounted = true;
	    }
	  }, {
	    key: 'componentDidUpdate',
	    value: function componentDidUpdate(prevProps, prevState) {
	      var scrollElement = this.props.scrollElement;
	      var prevScrollElement = prevProps.scrollElement;


	      if (prevScrollElement !== scrollElement && prevScrollElement != null && scrollElement != null) {
	        this.updatePosition(scrollElement);

	        unregisterScrollListener(this, prevScrollElement);
	        registerScrollListener(this, scrollElement);

	        this._unregisterResizeListener(prevScrollElement);
	        this._registerResizeListener(scrollElement);
	      }
	    }
	  }, {
	    key: 'componentWillUnmount',
	    value: function componentWillUnmount() {
	      var scrollElement = this.props.scrollElement;
	      if (scrollElement) {
	        unregisterScrollListener(this, scrollElement);
	        this._unregisterResizeListener(scrollElement);
	      }

	      this._isMounted = false;
	    }
	  }, {
	    key: 'render',
	    value: function render() {
	      var children = this.props.children;
	      var _state2 = this.state,
	          isScrolling = _state2.isScrolling,
	          scrollTop = _state2.scrollTop,
	          scrollLeft = _state2.scrollLeft,
	          height = _state2.height,
	          width = _state2.width;


	      return children({
	        onChildScroll: this._onChildScroll,
	        registerChild: this._registerChild,
	        height: height,
	        isScrolling: isScrolling,
	        scrollLeft: scrollLeft,
	        scrollTop: scrollTop,
	        width: width
	      });
	    }

	    // Referenced by utils/onScroll


	    // Referenced by utils/onScroll

	  }]);

	  return WindowScroller;
	}(React.PureComponent);

	WindowScroller.defaultProps = {
	  onResize: function onResize() {},
	  onScroll: function onScroll() {},
	  scrollingResetTimeInterval: IS_SCROLLING_TIMEOUT$1,
	  scrollElement: getWindow(),
	  serverHeight: 0,
	  serverWidth: 0
	};
	WindowScroller.propTypes = process.env.NODE_ENV === 'production' ? null : {
	  /**
	   * Function responsible for rendering children.
	   * This function should implement the following signature:
	   * ({ height, isScrolling, scrollLeft, scrollTop, width }) => PropTypes.element
	   */
	  children: propTypes.func.isRequired,


	  /** Callback to be invoked on-resize: ({ height, width }) */
	  onResize: propTypes.func.isRequired,


	  /** Callback to be invoked on-scroll: ({ scrollLeft, scrollTop }) */
	  onScroll: propTypes.func.isRequired,


	  /** Element to attach scroll event listeners. Defaults to window. */
	  scrollElement: propTypes.oneOfType([propTypes.any, function () {
	    return (typeof Element === 'function' ? propTypes.instanceOf(Element) : propTypes.any).apply(this, arguments);
	  }]),

	  /**
	   * Wait this amount of time after the last scroll event before resetting child `pointer-events`.
	   */
	  scrollingResetTimeInterval: propTypes.number.isRequired,


	  /** Height used for server-side rendering */
	  serverHeight: propTypes.number.isRequired,


	  /** Width used for server-side rendering */
	  serverWidth: propTypes.number.isRequired
	};

	const useStyles$b = makeStyles$1((theme) => ({
	    notFirstPage: {
	        position: 'absolute',
	        top: 0,
	        left: 0,
	    },
	    formGrid: {
	        position: 'relative',
	    },
	    buttons: {
	        '& button': {
	            marginRight: theme.spacing(2),
	        },
	    },
	    error: {
	        color: red[500],
	        paddingTop: theme.spacing(1),
	    },
	    checkoutGrid: {
	        [theme.breakpoints.down('sm')]: {
	            flexDirection: 'column-reverse',
	        },
	    },
	}));
	const agreed = (v) => {
	    if (!v) {
	        throw new Error('Agree to our terms and conditions.');
	    }
	    return v;
	};
	const Checkout = ({ forms, address, setAddress, order, setOrder, payment, setPayment, user, setUser, setCoupon, checkout, setItem, countryOptions, stateOptions, isLoading, termsUrl, track, stepLabels, contactIcon, contactTitle, shippingIcon, shippingTitle, paymentIcon, paymentTitle, cartIcon, cartTitle, showDescription, showTotals, cartCheckoutUrl, nativeSelects, }) => {
	    const theme = useTheme$1();
	    const isBelowMD = useMediaQuery(theme.breakpoints.down('md'));
	    const classes = useStyles$b();
	    const splitName = (v) => {
	        let [firstName, lastName] = v.split(/\s+/);
	        setUser('firstName', firstName);
	        setUser('lastName', lastName);
	        return v;
	    };
	    const setPaymentName = (v) => {
	        setPayment('name', v);
	        return v;
	    };
	    const [error, setError] = React.useState('');
	    const [activeStep, setActiveStep] = React.useState(0);
	    const [formAwait, _setFormAwait] = React.useState(null);
	    const userMS = useMidstream({
	        email: [isRequired, isEmail],
	        name: [isRequired, splitName, setPaymentName],
	    }, {
	        dst: setUser,
	    });
	    const { setEmail, setName, } = userMS;
	    const userErr = userMS.err;
	    const userRun = userMS.runAll;
	    const termsMS = useMidstream({
	        terms: [agreed],
	    }, {
	        dst: (k, v) => {
	            if (k == 'terms') {
	                return;
	            }
	        },
	    });
	    const { setTerms, err, src, } = termsMS;
	    const termsRun = termsMS.run;
	    React.useEffect(() => {
	        track('Viewed Checkout Step', { step: 2 });
	    }, []);
	    const setFormAwait = React.useMemo(() => (x) => {
	        if (x != formAwait) {
	            _setFormAwait(() => x);
	        }
	    }, []);
	    const handleNext = async () => {
	        const fn = formAwait;
	        if (fn) {
	            try {
	                await fn();
	            }
	            catch (e) {
	                console.log('checkout form error', e);
	                return;
	            }
	        }
	        if (activeStep === 0) {
	            let ret = await userRun();
	            if (ret instanceof Error) {
	                console.log('contact form error', ret);
	                return;
	            }
	        }
	        setActiveStep((prevActiveStep) => {
	            if (prevActiveStep === 0) {
	                track('Completed Checkout Step', { step: 2 });
	                track('Viewed Checkout Step', { step: 3 });
	            }
	            return prevActiveStep + 1;
	        });
	    };
	    const handleBack = () => {
	        setActiveStep((prevActiveStep) => {
	            return prevActiveStep - 1;
	        });
	    };
	    const handleSubmit = async () => {
	        try {
	            const fn = formAwait;
	            if (fn) {
	                try {
	                    await fn();
	                }
	                catch (e) {
	                    console.log('checkout form error', e);
	                    return;
	                }
	            }
	            let ret = await termsRun();
	            if (ret instanceof Error) {
	                return;
	            }
	            await checkout();
	            setFormAwait(null);
	            track('Completed Checkout Step', { step: 3 });
	            setActiveStep((prevActiveStep) => prevActiveStep + 1);
	        }
	        catch (e) {
	            console.log('payment form error', e);
	            setError(e.message);
	        }
	    };
	    let Forms;
	    if (!forms || !forms.length) {
	        Forms = [ShippingForm, PaymentForm];
	    }
	    else if (forms.length == 1) {
	        Forms = [forms[0], PaymentForm];
	    }
	    else {
	        Forms = [forms[0], forms[1]];
	    }
	    return (React__default.createElement(Container$1, { maxWidth: 'md', style: { width: '100%' }, onMouseDown: (event) => {
	            event.stopPropagation();
	        } },
	        React__default.createElement(AutoSizer, { disableHeight: true }, ({ width, height }) => {
	            const halfWidth = Math.floor(width / 2);
	            return (React__default.createElement("div", { style: { width: halfWidth * 2 }, className: 'checkout' },
	                React__default.createElement(StyledGrid, { container: true, spacing: 3 },
	                    React__default.createElement(StyledGrid, { item: true, xs: 12, className: 'checkout-steps' },
	                        React__default.createElement(HorizontalLabelPositionBelowStepper, { activeStep: activeStep, steps: stepLabels }))),
	                React__default.createElement(StyledGrid, { container: true, spacing: 3, className: classnames(classes.checkoutGrid, 'checkout-layout') },
	                    React__default.createElement(StyledGrid, { item: true, xs: 12, md: 6, className: classnames(classes.formGrid, 'checkout-forms') },
	                        Forms.map((Form, i) => (React__default.createElement(Grow, { in: activeStep === i, key: Form },
	                            React__default.createElement("div", { style: {
	                                    height: activeStep === i ? 'inherit' : 0
	                                }, className: 'checkout-form' },
	                                React__default.createElement(Box, { p: [2, 3, 4] },
	                                    React__default.createElement(StyledGrid, { container: true, spacing: 3 },
	                                        activeStep == 0 && (React__default.createElement(React__default.Fragment, null,
	                                            React__default.createElement(StyledGrid, { item: true, xs: 12, className: 'contact-header' },
	                                                React__default.createElement(StyledGrid, { container: true, spacing: 1, alignItems: 'center' },
	                                                    React__default.createElement(StyledGrid, { item: true, className: 'contact-icon' }, contactIcon || React__default.createElement(PersonIcon, { style: { fontSize: '2rem' } })),
	                                                    React__default.createElement(StyledGrid, { item: true, className: 'contact-title' }, contactTitle || (React__default.createElement(Typography$1, { variant: 'h6' }, "Contact Details"))))),
	                                            React__default.createElement(StyledGrid, { item: true, xs: 12, sm: 6, className: 'contact-name' },
	                                                React__default.createElement(MUIText, { fullWidth: true, label: 'Name', variant: undefined, size: 'medium', value: user.name, setValue: setName, error: userErr.name })),
	                                            React__default.createElement(StyledGrid, { item: true, xs: 12, sm: 6, className: 'contact-email' },
	                                                React__default.createElement(MUIText, { fullWidth: true, label: 'Email', variant: undefined, size: 'medium', value: user.email, setValue: setEmail, error: userErr.email })))),
	                                        React__default.createElement(StyledGrid, { item: true, xs: 12 },
	                                            React__default.createElement(Form, { isActive: activeStep === i, shippingIcon: shippingIcon, shippingTitle: shippingTitle, paymentIcon: paymentIcon, paymentTitle: paymentTitle, width: halfWidth, height: height, order: order, payment: payment, user: user, setUser: setUser, setAddress: setAddress, setPayment: setPayment, setFormAwait: setFormAwait, countryOptions: countryOptions, stateOptions: stateOptions, isLoading: isLoading, termsUrl: termsUrl, nativeSelects: nativeSelects })),
	                                        activeStep == 1 && (React__default.createElement(StyledGrid, { item: true, xs: 12, className: 'checkout-terms' },
	                                            React__default.createElement(MUICheckbox, { label: React__default.createElement(Link$1, { href: termsUrl, target: '_blank' }, "Please agree to our terms and conditions."), placeholder: '123', size: 'medium', value: src.terms, error: err.terms, setValue: setTerms }))),
	                                        React__default.createElement(StyledGrid, { item: true, xs: 12, className: 'checkout-buttons' },
	                                            activeStep == 0 && (React__default.createElement("div", { className: classnames(classes.buttons, 'checkout-buttons') },
	                                                React__default.createElement(Button$1, { variant: 'contained', color: 'primary', size: 'large', onClick: handleNext, disabled: isLoading || !(order.items && order.items.length && order.items.length > 0) }, "Continue"),
	                                                error && (React__default.createElement("div", { className: classnames(classes.error, 'checkout-errors') }, error)))),
	                                            activeStep == 1 && (React__default.createElement("div", { className: classnames(classes.buttons, 'checkout-buttons') },
	                                                React__default.createElement(Button$1, { variant: 'contained', color: 'primary', size: 'large', onClick: handleSubmit, disabled: isLoading || !(order.items && order.items.length && order.items.length > 0) }, "Complete"),
	                                                React__default.createElement(Button$1, { size: 'large', onClick: handleBack, disabled: isLoading || !(order.items && order.items.length && order.items.length > 0) }, "Back"),
	                                                error && (React__default.createElement("div", { className: classnames(classes.error, 'checkout-errors') }, error))))))))))),
	                        React__default.createElement(Grow, { in: activeStep == 2 },
	                            React__default.createElement("div", { style: {
	                                    height: activeStep == 2 ? 'inherit' : 0,
	                                }, className: 'checkout-form' }, activeStep == 2 && (React__default.createElement(ThankYou, { width: halfWidth, height: height, order: order }))))),
	                    React__default.createElement(StyledGrid, { item: true, xs: 12, md: 6, className: 'checkout-cart' }, isBelowMD ? (React__default.createElement(ExpansionPanel$1, null,
	                        React__default.createElement(ExpansionPanelSummary$1, { expandIcon: React__default.createElement(ExpandMoreIcon, null), "aria-controls": 'cart-items-content', id: 'cart-items-header' },
	                            React__default.createElement(StyledGrid, { container: true, alignItems: 'center', spacing: 2 },
	                                React__default.createElement(StyledGrid, { item: true, xs: true },
	                                    React__default.createElement(Typography$1, { variant: 'body1', className: 'cart-show-more-summary-text' }, "Show Order")),
	                                React__default.createElement(StyledGrid, { item: true },
	                                    React__default.createElement(Typography$1, { variant: 'h6', className: 'cart-show-more-summary-price' }, renderUICurrencyFromJSON(order.currency, order.total))))),
	                        React__default.createElement(ExpansionPanelDetails$1, null,
	                            React__default.createElement(Cart$1, { cartIcon: cartIcon, cartTitle: cartTitle, order: order, setCoupon: setCoupon, setItem: setItem, locked: isLoading || activeStep === 2, showDescription: showDescription, showTotals: showTotals, cartCheckoutUrl: undefined, nativeSelects: nativeSelects })))) : (React__default.createElement(Paper$1, null,
	                        React__default.createElement(Cart$1, { cartIcon: cartIcon, cartTitle: cartTitle, order: order, setCoupon: setCoupon, setItem: setItem, locked: isLoading || activeStep === 2, showDescription: showDescription, showTotals: showTotals, cartCheckoutUrl: undefined, nativeSelects: nativeSelects })))))));
	        })));
	};

	var CartCount = ({ count, }) => {
	    return (React__default.createElement("div", null, count));
	};

	/*! *****************************************************************************
	Copyright (c) Microsoft Corporation.

	Permission to use, copy, modify, and/or distribute this software for any
	purpose with or without fee is hereby granted.

	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
	REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
	AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
	INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
	LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
	OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
	PERFORMANCE OF THIS SOFTWARE.
	***************************************************************************** */

	function __decorate(decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	}

	function __metadata(metadataKey, metadataValue) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
	}

	/*! *****************************************************************************
	Copyright (c) Microsoft Corporation.

	Permission to use, copy, modify, and/or distribute this software for any
	purpose with or without fee is hereby granted.

	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
	REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
	AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
	INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
	LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
	OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
	PERFORMANCE OF THIS SOFTWARE.
	***************************************************************************** */

	function __decorate$1(decorators, target, key, desc) {
	    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
	    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
	    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
	    return c > 3 && r && Object.defineProperty(target, key, r), r;
	}

	function __metadata$1(metadataKey, metadataValue) {
	    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
	}

	/** MobX - (c) Michel Weststrate 2015 - 2020 - MIT Licensed */
	/*! *****************************************************************************
	Copyright (c) Microsoft Corporation. All rights reserved.
	Licensed under the Apache License, Version 2.0 (the "License"); you may not use
	this file except in compliance with the License. You may obtain a copy of the
	License at http://www.apache.org/licenses/LICENSE-2.0

	THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
	KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
	WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
	MERCHANTABLITY OR NON-INFRINGEMENT.

	See the Apache Version 2.0 License for specific language governing permissions
	and limitations under the License.
	***************************************************************************** */
	/* global Reflect, Promise */

	var extendStatics$1 = function(d, b) {
	    extendStatics$1 = Object.setPrototypeOf ||
	        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
	        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
	    return extendStatics$1(d, b);
	};

	function __extends$1(d, b) {
	    extendStatics$1(d, b);
	    function __() { this.constructor = d; }
	    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
	}

	var __assign$1 = function() {
	    __assign$1 = Object.assign || function __assign(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign$1.apply(this, arguments);
	};

	function __values$1(o) {
	    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
	    if (m) return m.call(o);
	    return {
	        next: function () {
	            if (o && i >= o.length) o = void 0;
	            return { value: o && o[i++], done: !o };
	        }
	    };
	}

	function __read$1(o, n) {
	    var m = typeof Symbol === "function" && o[Symbol.iterator];
	    if (!m) return o;
	    var i = m.call(o), r, ar = [], e;
	    try {
	        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
	    }
	    catch (error) { e = { error: error }; }
	    finally {
	        try {
	            if (r && !r.done && (m = i["return"])) m.call(i);
	        }
	        finally { if (e) throw e.error; }
	    }
	    return ar;
	}

	function __spread$1() {
	    for (var ar = [], i = 0; i < arguments.length; i++)
	        ar = ar.concat(__read$1(arguments[i]));
	    return ar;
	}

	var OBFUSCATED_ERROR$1 = "An invariant failed, however the error is obfuscated because this is a production build.";
	var EMPTY_ARRAY$1 = [];
	Object.freeze(EMPTY_ARRAY$1);
	var EMPTY_OBJECT$2 = {};
	Object.freeze(EMPTY_OBJECT$2);
	function getNextId$1() {
	    return ++globalState$1.mobxGuid;
	}
	function fail$1(message) {
	    invariant$1(false, message);
	    throw "X"; // unreachable
	}
	function invariant$1(check, message) {
	    if (!check)
	        throw new Error("[mobx] " + (message || OBFUSCATED_ERROR$1));
	}
	/**
	 * Makes sure that the provided function is invoked at most once.
	 */
	function once$1(func) {
	    var invoked = false;
	    return function () {
	        if (invoked)
	            return;
	        invoked = true;
	        return func.apply(this, arguments);
	    };
	}
	var noop$4 = function () { };
	function unique$1(list) {
	    var res = [];
	    list.forEach(function (item) {
	        if (res.indexOf(item) === -1)
	            res.push(item);
	    });
	    return res;
	}
	function isObject$2(value) {
	    return value !== null && typeof value === "object";
	}
	function isPlainObject$4(value) {
	    if (value === null || typeof value !== "object")
	        return false;
	    var proto = Object.getPrototypeOf(value);
	    return proto === Object.prototype || proto === null;
	}
	function addHiddenProp$1(object, propName, value) {
	    Object.defineProperty(object, propName, {
	        enumerable: false,
	        writable: true,
	        configurable: true,
	        value: value
	    });
	}
	function addHiddenFinalProp$1(object, propName, value) {
	    Object.defineProperty(object, propName, {
	        enumerable: false,
	        writable: false,
	        configurable: true,
	        value: value
	    });
	}
	function isPropertyConfigurable$1(object, prop) {
	    var descriptor = Object.getOwnPropertyDescriptor(object, prop);
	    return !descriptor || (descriptor.configurable !== false && descriptor.writable !== false);
	}
	function assertPropertyConfigurable$1(object, prop) {
	    if (process.env.NODE_ENV !== "production" && !isPropertyConfigurable$1(object, prop))
	        fail$1("Cannot make property '" + prop.toString() + "' observable, it is not configurable and writable in the target object");
	}
	function createInstanceofPredicate$1(name, clazz) {
	    var propName = "isMobX" + name;
	    clazz.prototype[propName] = true;
	    return function (x) {
	        return isObject$2(x) && x[propName] === true;
	    };
	}
	function isES6Map$1(thing) {
	    return thing instanceof Map;
	}
	function isES6Set$1(thing) {
	    return thing instanceof Set;
	}
	/**
	 * Returns the following: own keys, prototype keys & own symbol keys, if they are enumerable.
	 */
	function getPlainObjectKeys$1(object) {
	    var enumerables = new Set();
	    for (var key in object)
	        enumerables.add(key); // *all* enumerables
	    Object.getOwnPropertySymbols(object).forEach(function (k) {
	        if (Object.getOwnPropertyDescriptor(object, k).enumerable)
	            enumerables.add(k);
	    }); // *own* symbols
	    // Note: this implementation is missing enumerable, inherited, symbolic property names! That would however pretty expensive to add,
	    // as there is no efficient iterator that returns *all* properties
	    return Array.from(enumerables);
	}
	function stringifyKey$1(key) {
	    if (key && key.toString)
	        return key.toString();
	    else
	        return new String(key).toString();
	}
	function getMapLikeKeys$1(map) {
	    if (isPlainObject$4(map))
	        return Object.keys(map);
	    if (Array.isArray(map))
	        return map.map(function (_a) {
	            var _b = __read$1(_a, 1), key = _b[0];
	            return key;
	        });
	    if (isES6Map$1(map) || isObservableMap$1(map))
	        return Array.from(map.keys());
	    return fail$1("Cannot get keys from '" + map + "'");
	}
	function toPrimitive$1(value) {
	    return value === null ? null : typeof value === "object" ? "" + value : value;
	}

	var $mobx$1 = Symbol("mobx administration");
	var Atom$1 = /** @class */ (function () {
	    /**
	     * Create a new atom. For debugging purposes it is recommended to give it a name.
	     * The onBecomeObserved and onBecomeUnobserved callbacks can be used for resource management.
	     */
	    function Atom(name) {
	        if (name === void 0) { name = "Atom@" + getNextId$1(); }
	        this.name = name;
	        this.isPendingUnobservation = false; // for effective unobserving. BaseAtom has true, for extra optimization, so its onBecomeUnobserved never gets called, because it's not needed
	        this.isBeingObserved = false;
	        this.observers = new Set();
	        this.diffValue = 0;
	        this.lastAccessedBy = 0;
	        this.lowestObserverState = IDerivationState$1.NOT_TRACKING;
	    }
	    Atom.prototype.onBecomeObserved = function () {
	        if (this.onBecomeObservedListeners) {
	            this.onBecomeObservedListeners.forEach(function (listener) { return listener(); });
	        }
	    };
	    Atom.prototype.onBecomeUnobserved = function () {
	        if (this.onBecomeUnobservedListeners) {
	            this.onBecomeUnobservedListeners.forEach(function (listener) { return listener(); });
	        }
	    };
	    /**
	     * Invoke this method to notify mobx that your atom has been used somehow.
	     * Returns true if there is currently a reactive context.
	     */
	    Atom.prototype.reportObserved = function () {
	        return reportObserved$1(this);
	    };
	    /**
	     * Invoke this method _after_ this method has changed to signal mobx that all its observers should invalidate.
	     */
	    Atom.prototype.reportChanged = function () {
	        startBatch$1();
	        propagateChanged$1(this);
	        endBatch$1();
	    };
	    Atom.prototype.toString = function () {
	        return this.name;
	    };
	    return Atom;
	}());
	var isAtom$1 = createInstanceofPredicate$1("Atom", Atom$1);
	function createAtom$1(name, onBecomeObservedHandler, onBecomeUnobservedHandler) {
	    if (onBecomeObservedHandler === void 0) { onBecomeObservedHandler = noop$4; }
	    if (onBecomeUnobservedHandler === void 0) { onBecomeUnobservedHandler = noop$4; }
	    var atom = new Atom$1(name);
	    // default `noop` listener will not initialize the hook Set
	    if (onBecomeObservedHandler !== noop$4) {
	        onBecomeObserved$1(atom, onBecomeObservedHandler);
	    }
	    if (onBecomeUnobservedHandler !== noop$4) {
	        onBecomeUnobserved$1(atom, onBecomeUnobservedHandler);
	    }
	    return atom;
	}

	function identityComparer$1(a, b) {
	    return a === b;
	}
	function structuralComparer$1(a, b) {
	    return deepEqual$1(a, b);
	}
	function shallowComparer$1(a, b) {
	    return deepEqual$1(a, b, 1);
	}
	function defaultComparer$1(a, b) {
	    return Object.is(a, b);
	}
	var comparer$1 = {
	    identity: identityComparer$1,
	    structural: structuralComparer$1,
	    default: defaultComparer$1,
	    shallow: shallowComparer$1
	};

	var mobxDidRunLazyInitializersSymbol$1 = Symbol("mobx did run lazy initializers");
	var mobxPendingDecorators$1 = Symbol("mobx pending decorators");
	var enumerableDescriptorCache$1 = {};
	var nonEnumerableDescriptorCache$1 = {};
	function createPropertyInitializerDescriptor$1(prop, enumerable) {
	    var cache = enumerable ? enumerableDescriptorCache$1 : nonEnumerableDescriptorCache$1;
	    return (cache[prop] ||
	        (cache[prop] = {
	            configurable: true,
	            enumerable: enumerable,
	            get: function () {
	                initializeInstance$1(this);
	                return this[prop];
	            },
	            set: function (value) {
	                initializeInstance$1(this);
	                this[prop] = value;
	            }
	        }));
	}
	function initializeInstance$1(target) {
	    var e_1, _a;
	    if (target[mobxDidRunLazyInitializersSymbol$1] === true)
	        return;
	    var decorators = target[mobxPendingDecorators$1];
	    if (decorators) {
	        addHiddenProp$1(target, mobxDidRunLazyInitializersSymbol$1, true);
	        // Build property key array from both strings and symbols
	        var keys = __spread$1(Object.getOwnPropertySymbols(decorators), Object.keys(decorators));
	        try {
	            for (var keys_1 = __values$1(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
	                var key = keys_1_1.value;
	                var d = decorators[key];
	                d.propertyCreator(target, d.prop, d.descriptor, d.decoratorTarget, d.decoratorArguments);
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	    }
	}
	function createPropDecorator$1(propertyInitiallyEnumerable, propertyCreator) {
	    return function decoratorFactory() {
	        var decoratorArguments;
	        var decorator = function decorate(target, prop, descriptor, applyImmediately
	        // This is a special parameter to signal the direct application of a decorator, allow extendObservable to skip the entire type decoration part,
	        // as the instance to apply the decorator to equals the target
	        ) {
	            if (applyImmediately === true) {
	                propertyCreator(target, prop, descriptor, target, decoratorArguments);
	                return null;
	            }
	            if (process.env.NODE_ENV !== "production" && !quacksLikeADecorator$1(arguments))
	                fail$1("This function is a decorator, but it wasn't invoked like a decorator");
	            if (!Object.prototype.hasOwnProperty.call(target, mobxPendingDecorators$1)) {
	                var inheritedDecorators = target[mobxPendingDecorators$1];
	                addHiddenProp$1(target, mobxPendingDecorators$1, __assign$1({}, inheritedDecorators));
	            }
	            target[mobxPendingDecorators$1][prop] = {
	                prop: prop,
	                propertyCreator: propertyCreator,
	                descriptor: descriptor,
	                decoratorTarget: target,
	                decoratorArguments: decoratorArguments
	            };
	            return createPropertyInitializerDescriptor$1(prop, propertyInitiallyEnumerable);
	        };
	        if (quacksLikeADecorator$1(arguments)) {
	            // @decorator
	            decoratorArguments = EMPTY_ARRAY$1;
	            return decorator.apply(null, arguments);
	        }
	        else {
	            // @decorator(args)
	            decoratorArguments = Array.prototype.slice.call(arguments);
	            return decorator;
	        }
	    };
	}
	function quacksLikeADecorator$1(args) {
	    return (((args.length === 2 || args.length === 3) &&
	        (typeof args[1] === "string" || typeof args[1] === "symbol")) ||
	        (args.length === 4 && args[3] === true));
	}

	function deepEnhancer$1(v, _, name) {
	    // it is an observable already, done
	    if (isObservable$1(v))
	        return v;
	    // something that can be converted and mutated?
	    if (Array.isArray(v))
	        return observable$1.array(v, { name: name });
	    if (isPlainObject$4(v))
	        return observable$1.object(v, undefined, { name: name });
	    if (isES6Map$1(v))
	        return observable$1.map(v, { name: name });
	    if (isES6Set$1(v))
	        return observable$1.set(v, { name: name });
	    return v;
	}
	function shallowEnhancer$1(v, _, name) {
	    if (v === undefined || v === null)
	        return v;
	    if (isObservableObject$1(v) || isObservableArray$1(v) || isObservableMap$1(v) || isObservableSet$1(v))
	        return v;
	    if (Array.isArray(v))
	        return observable$1.array(v, { name: name, deep: false });
	    if (isPlainObject$4(v))
	        return observable$1.object(v, undefined, { name: name, deep: false });
	    if (isES6Map$1(v))
	        return observable$1.map(v, { name: name, deep: false });
	    if (isES6Set$1(v))
	        return observable$1.set(v, { name: name, deep: false });
	    return fail$1(process.env.NODE_ENV !== "production" &&
	        "The shallow modifier / decorator can only used in combination with arrays, objects, maps and sets");
	}
	function referenceEnhancer$1(newValue) {
	    // never turn into an observable
	    return newValue;
	}
	function refStructEnhancer$1(v, oldValue, name) {
	    if (process.env.NODE_ENV !== "production" && isObservable$1(v))
	        throw "observable.struct should not be used with observable values";
	    if (deepEqual$1(v, oldValue))
	        return oldValue;
	    return v;
	}

	function createDecoratorForEnhancer$1(enhancer) {
	    invariant$1(enhancer);
	    var decorator = createPropDecorator$1(true, function (target, propertyName, descriptor, _decoratorTarget, decoratorArgs) {
	        if (process.env.NODE_ENV !== "production") {
	            invariant$1(!descriptor || !descriptor.get, "@observable cannot be used on getter (property \"" + stringifyKey$1(propertyName) + "\"), use @computed instead.");
	        }
	        var initialValue = descriptor
	            ? descriptor.initializer
	                ? descriptor.initializer.call(target)
	                : descriptor.value
	            : undefined;
	        asObservableObject$1(target).addObservableProp(propertyName, initialValue, enhancer);
	    });
	    var res = 
	    // Extra process checks, as this happens during module initialization
	    typeof process !== "undefined" && process.env && process.env.NODE_ENV !== "production"
	        ? function observableDecorator() {
	            // This wrapper function is just to detect illegal decorator invocations, deprecate in a next version
	            // and simply return the created prop decorator
	            if (arguments.length < 2)
	                return fail$1("Incorrect decorator invocation. @observable decorator doesn't expect any arguments");
	            return decorator.apply(null, arguments);
	        }
	        : decorator;
	    res.enhancer = enhancer;
	    return res;
	}

	// Predefined bags of create observable options, to avoid allocating temporarily option objects
	// in the majority of cases
	var defaultCreateObservableOptions$1 = {
	    deep: true,
	    name: undefined,
	    defaultDecorator: undefined,
	    proxy: true
	};
	Object.freeze(defaultCreateObservableOptions$1);
	function assertValidOption$1(key) {
	    if (!/^(deep|name|equals|defaultDecorator|proxy)$/.test(key))
	        fail$1("invalid option for (extend)observable: " + key);
	}
	function asCreateObservableOptions$1(thing) {
	    if (thing === null || thing === undefined)
	        return defaultCreateObservableOptions$1;
	    if (typeof thing === "string")
	        return { name: thing, deep: true, proxy: true };
	    if (process.env.NODE_ENV !== "production") {
	        if (typeof thing !== "object")
	            return fail$1("expected options object");
	        Object.keys(thing).forEach(assertValidOption$1);
	    }
	    return thing;
	}
	var deepDecorator$1 = createDecoratorForEnhancer$1(deepEnhancer$1);
	var shallowDecorator$1 = createDecoratorForEnhancer$1(shallowEnhancer$1);
	var refDecorator$1 = createDecoratorForEnhancer$1(referenceEnhancer$1);
	var refStructDecorator$1 = createDecoratorForEnhancer$1(refStructEnhancer$1);
	function getEnhancerFromOptions$1(options) {
	    return options.defaultDecorator
	        ? options.defaultDecorator.enhancer
	        : options.deep === false
	            ? referenceEnhancer$1
	            : deepEnhancer$1;
	}
	/**
	 * Turns an object, array or function into a reactive structure.
	 * @param v the value which should become observable.
	 */
	function createObservable$1(v, arg2, arg3) {
	    // @observable someProp;
	    if (typeof arguments[1] === "string" || typeof arguments[1] === "symbol") {
	        return deepDecorator$1.apply(null, arguments);
	    }
	    // it is an observable already, done
	    if (isObservable$1(v))
	        return v;
	    // something that can be converted and mutated?
	    var res = isPlainObject$4(v)
	        ? observable$1.object(v, arg2, arg3)
	        : Array.isArray(v)
	            ? observable$1.array(v, arg2)
	            : isES6Map$1(v)
	                ? observable$1.map(v, arg2)
	                : isES6Set$1(v)
	                    ? observable$1.set(v, arg2)
	                    : v;
	    // this value could be converted to a new observable data structure, return it
	    if (res !== v)
	        return res;
	    // otherwise, just box it
	    fail$1(process.env.NODE_ENV !== "production" &&
	        "The provided value could not be converted into an observable. If you want just create an observable reference to the object use 'observable.box(value)'");
	}
	var observableFactories$1 = {
	    box: function (value, options) {
	        if (arguments.length > 2)
	            incorrectlyUsedAsDecorator$1("box");
	        var o = asCreateObservableOptions$1(options);
	        return new ObservableValue$1(value, getEnhancerFromOptions$1(o), o.name, true, o.equals);
	    },
	    array: function (initialValues, options) {
	        if (arguments.length > 2)
	            incorrectlyUsedAsDecorator$1("array");
	        var o = asCreateObservableOptions$1(options);
	        return createObservableArray$1(initialValues, getEnhancerFromOptions$1(o), o.name);
	    },
	    map: function (initialValues, options) {
	        if (arguments.length > 2)
	            incorrectlyUsedAsDecorator$1("map");
	        var o = asCreateObservableOptions$1(options);
	        return new ObservableMap$1(initialValues, getEnhancerFromOptions$1(o), o.name);
	    },
	    set: function (initialValues, options) {
	        if (arguments.length > 2)
	            incorrectlyUsedAsDecorator$1("set");
	        var o = asCreateObservableOptions$1(options);
	        return new ObservableSet$1(initialValues, getEnhancerFromOptions$1(o), o.name);
	    },
	    object: function (props, decorators, options) {
	        if (typeof arguments[1] === "string")
	            incorrectlyUsedAsDecorator$1("object");
	        var o = asCreateObservableOptions$1(options);
	        if (o.proxy === false) {
	            return extendObservable$1({}, props, decorators, o);
	        }
	        else {
	            var defaultDecorator = getDefaultDecoratorFromObjectOptions$1(o);
	            var base = extendObservable$1({}, undefined, undefined, o);
	            var proxy = createDynamicObservableObject$1(base);
	            extendObservableObjectWithProperties$1(proxy, props, decorators, defaultDecorator);
	            return proxy;
	        }
	    },
	    ref: refDecorator$1,
	    shallow: shallowDecorator$1,
	    deep: deepDecorator$1,
	    struct: refStructDecorator$1
	};
	var observable$1 = createObservable$1;
	// weird trick to keep our typings nicely with our funcs, and still extend the observable function
	Object.keys(observableFactories$1).forEach(function (name) { return (observable$1[name] = observableFactories$1[name]); });
	function incorrectlyUsedAsDecorator$1(methodName) {
	    fail$1(
	    // process.env.NODE_ENV !== "production" &&
	    "Expected one or two arguments to observable." + methodName + ". Did you accidentally try to use observable." + methodName + " as decorator?");
	}

	var computedDecorator$1 = createPropDecorator$1(false, function (instance, propertyName, descriptor, decoratorTarget, decoratorArgs) {
	    var get = descriptor.get, set = descriptor.set; // initialValue is the descriptor for get / set props
	    // Optimization: faster on decorator target or instance? Assuming target
	    // Optimization: find out if declaring on instance isn't just faster. (also makes the property descriptor simpler). But, more memory usage..
	    // Forcing instance now, fixes hot reloadig issues on React Native:
	    var options = decoratorArgs[0] || {};
	    asObservableObject$1(instance).addComputedProp(instance, propertyName, __assign$1({ get: get,
	        set: set, context: instance }, options));
	});
	var computedStructDecorator$1 = computedDecorator$1({ equals: comparer$1.structural });
	/**
	 * Decorator for class properties: @computed get value() { return expr; }.
	 * For legacy purposes also invokable as ES5 observable created: `computed(() => expr)`;
	 */
	var computed$2 = function computed(arg1, arg2, arg3) {
	    if (typeof arg2 === "string") {
	        // @computed
	        return computedDecorator$1.apply(null, arguments);
	    }
	    if (arg1 !== null && typeof arg1 === "object" && arguments.length === 1) {
	        // @computed({ options })
	        return computedDecorator$1.apply(null, arguments);
	    }
	    // computed(expr, options?)
	    if (process.env.NODE_ENV !== "production") {
	        invariant$1(typeof arg1 === "function", "First argument to `computed` should be an expression.");
	        invariant$1(arguments.length < 3, "Computed takes one or two arguments if used as function");
	    }
	    var opts = typeof arg2 === "object" ? arg2 : {};
	    opts.get = arg1;
	    opts.set = typeof arg2 === "function" ? arg2 : opts.set;
	    opts.name = opts.name || arg1.name || ""; /* for generated name */
	    return new ComputedValue$1(opts);
	};
	computed$2.struct = computedStructDecorator$1;

	var IDerivationState$1;
	(function (IDerivationState) {
	    // before being run or (outside batch and not being observed)
	    // at this point derivation is not holding any data about dependency tree
	    IDerivationState[IDerivationState["NOT_TRACKING"] = -1] = "NOT_TRACKING";
	    // no shallow dependency changed since last computation
	    // won't recalculate derivation
	    // this is what makes mobx fast
	    IDerivationState[IDerivationState["UP_TO_DATE"] = 0] = "UP_TO_DATE";
	    // some deep dependency changed, but don't know if shallow dependency changed
	    // will require to check first if UP_TO_DATE or POSSIBLY_STALE
	    // currently only ComputedValue will propagate POSSIBLY_STALE
	    //
	    // having this state is second big optimization:
	    // don't have to recompute on every dependency change, but only when it's needed
	    IDerivationState[IDerivationState["POSSIBLY_STALE"] = 1] = "POSSIBLY_STALE";
	    // A shallow dependency has changed since last computation and the derivation
	    // will need to recompute when it's needed next.
	    IDerivationState[IDerivationState["STALE"] = 2] = "STALE";
	})(IDerivationState$1 || (IDerivationState$1 = {}));
	var TraceMode$1;
	(function (TraceMode) {
	    TraceMode[TraceMode["NONE"] = 0] = "NONE";
	    TraceMode[TraceMode["LOG"] = 1] = "LOG";
	    TraceMode[TraceMode["BREAK"] = 2] = "BREAK";
	})(TraceMode$1 || (TraceMode$1 = {}));
	var CaughtException$1 = /** @class */ (function () {
	    function CaughtException(cause) {
	        this.cause = cause;
	        // Empty
	    }
	    return CaughtException;
	}());
	function isCaughtException$1(e) {
	    return e instanceof CaughtException$1;
	}
	/**
	 * Finds out whether any dependency of the derivation has actually changed.
	 * If dependenciesState is 1 then it will recalculate dependencies,
	 * if any dependency changed it will propagate it by changing dependenciesState to 2.
	 *
	 * By iterating over the dependencies in the same order that they were reported and
	 * stopping on the first change, all the recalculations are only called for ComputedValues
	 * that will be tracked by derivation. That is because we assume that if the first x
	 * dependencies of the derivation doesn't change then the derivation should run the same way
	 * up until accessing x-th dependency.
	 */
	function shouldCompute$1(derivation) {
	    switch (derivation.dependenciesState) {
	        case IDerivationState$1.UP_TO_DATE:
	            return false;
	        case IDerivationState$1.NOT_TRACKING:
	        case IDerivationState$1.STALE:
	            return true;
	        case IDerivationState$1.POSSIBLY_STALE: {
	            // state propagation can occur outside of action/reactive context #2195
	            var prevAllowStateReads = allowStateReadsStart$1(true);
	            var prevUntracked = untrackedStart$1(); // no need for those computeds to be reported, they will be picked up in trackDerivedFunction.
	            var obs = derivation.observing, l = obs.length;
	            for (var i = 0; i < l; i++) {
	                var obj = obs[i];
	                if (isComputedValue$1(obj)) {
	                    if (globalState$1.disableErrorBoundaries) {
	                        obj.get();
	                    }
	                    else {
	                        try {
	                            obj.get();
	                        }
	                        catch (e) {
	                            // we are not interested in the value *or* exception at this moment, but if there is one, notify all
	                            untrackedEnd$1(prevUntracked);
	                            allowStateReadsEnd$1(prevAllowStateReads);
	                            return true;
	                        }
	                    }
	                    // if ComputedValue `obj` actually changed it will be computed and propagated to its observers.
	                    // and `derivation` is an observer of `obj`
	                    // invariantShouldCompute(derivation)
	                    if (derivation.dependenciesState === IDerivationState$1.STALE) {
	                        untrackedEnd$1(prevUntracked);
	                        allowStateReadsEnd$1(prevAllowStateReads);
	                        return true;
	                    }
	                }
	            }
	            changeDependenciesStateTo0$1(derivation);
	            untrackedEnd$1(prevUntracked);
	            allowStateReadsEnd$1(prevAllowStateReads);
	            return false;
	        }
	    }
	}
	function checkIfStateModificationsAreAllowed$1(atom) {
	    var hasObservers = atom.observers.size > 0;
	    // Should never be possible to change an observed observable from inside computed, see #798
	    if (globalState$1.computationDepth > 0 && hasObservers)
	        fail$1(process.env.NODE_ENV !== "production" &&
	            "Computed values are not allowed to cause side effects by changing observables that are already being observed. Tried to modify: " + atom.name);
	    // Should not be possible to change observed state outside strict mode, except during initialization, see #563
	    if (!globalState$1.allowStateChanges && (hasObservers || globalState$1.enforceActions === "strict"))
	        fail$1(process.env.NODE_ENV !== "production" &&
	            (globalState$1.enforceActions
	                ? "Since strict-mode is enabled, changing observed observable values outside actions is not allowed. Please wrap the code in an `action` if this change is intended. Tried to modify: "
	                : "Side effects like changing state are not allowed at this point. Are you trying to modify state from, for example, the render function of a React component? Tried to modify: ") +
	                atom.name);
	}
	function checkIfStateReadsAreAllowed$1(observable) {
	    if (process.env.NODE_ENV !== "production" &&
	        !globalState$1.allowStateReads &&
	        globalState$1.observableRequiresReaction) {
	        console.warn("[mobx] Observable " + observable.name + " being read outside a reactive context");
	    }
	}
	/**
	 * Executes the provided function `f` and tracks which observables are being accessed.
	 * The tracking information is stored on the `derivation` object and the derivation is registered
	 * as observer of any of the accessed observables.
	 */
	function trackDerivedFunction$1(derivation, f, context) {
	    var prevAllowStateReads = allowStateReadsStart$1(true);
	    // pre allocate array allocation + room for variation in deps
	    // array will be trimmed by bindDependencies
	    changeDependenciesStateTo0$1(derivation);
	    derivation.newObserving = new Array(derivation.observing.length + 100);
	    derivation.unboundDepsCount = 0;
	    derivation.runId = ++globalState$1.runId;
	    var prevTracking = globalState$1.trackingDerivation;
	    globalState$1.trackingDerivation = derivation;
	    var result;
	    if (globalState$1.disableErrorBoundaries === true) {
	        result = f.call(context);
	    }
	    else {
	        try {
	            result = f.call(context);
	        }
	        catch (e) {
	            result = new CaughtException$1(e);
	        }
	    }
	    globalState$1.trackingDerivation = prevTracking;
	    bindDependencies$1(derivation);
	    warnAboutDerivationWithoutDependencies$1(derivation);
	    allowStateReadsEnd$1(prevAllowStateReads);
	    return result;
	}
	function warnAboutDerivationWithoutDependencies$1(derivation) {
	    if (process.env.NODE_ENV === "production")
	        return;
	    if (derivation.observing.length !== 0)
	        return;
	    if (globalState$1.reactionRequiresObservable || derivation.requiresObservable) {
	        console.warn("[mobx] Derivation " + derivation.name + " is created/updated without reading any observable value");
	    }
	}
	/**
	 * diffs newObserving with observing.
	 * update observing to be newObserving with unique observables
	 * notify observers that become observed/unobserved
	 */
	function bindDependencies$1(derivation) {
	    // invariant(derivation.dependenciesState !== IDerivationState.NOT_TRACKING, "INTERNAL ERROR bindDependencies expects derivation.dependenciesState !== -1");
	    var prevObserving = derivation.observing;
	    var observing = (derivation.observing = derivation.newObserving);
	    var lowestNewObservingDerivationState = IDerivationState$1.UP_TO_DATE;
	    // Go through all new observables and check diffValue: (this list can contain duplicates):
	    //   0: first occurrence, change to 1 and keep it
	    //   1: extra occurrence, drop it
	    var i0 = 0, l = derivation.unboundDepsCount;
	    for (var i = 0; i < l; i++) {
	        var dep = observing[i];
	        if (dep.diffValue === 0) {
	            dep.diffValue = 1;
	            if (i0 !== i)
	                observing[i0] = dep;
	            i0++;
	        }
	        // Upcast is 'safe' here, because if dep is IObservable, `dependenciesState` will be undefined,
	        // not hitting the condition
	        if (dep.dependenciesState > lowestNewObservingDerivationState) {
	            lowestNewObservingDerivationState = dep.dependenciesState;
	        }
	    }
	    observing.length = i0;
	    derivation.newObserving = null; // newObserving shouldn't be needed outside tracking (statement moved down to work around FF bug, see #614)
	    // Go through all old observables and check diffValue: (it is unique after last bindDependencies)
	    //   0: it's not in new observables, unobserve it
	    //   1: it keeps being observed, don't want to notify it. change to 0
	    l = prevObserving.length;
	    while (l--) {
	        var dep = prevObserving[l];
	        if (dep.diffValue === 0) {
	            removeObserver$1(dep, derivation);
	        }
	        dep.diffValue = 0;
	    }
	    // Go through all new observables and check diffValue: (now it should be unique)
	    //   0: it was set to 0 in last loop. don't need to do anything.
	    //   1: it wasn't observed, let's observe it. set back to 0
	    while (i0--) {
	        var dep = observing[i0];
	        if (dep.diffValue === 1) {
	            dep.diffValue = 0;
	            addObserver$1(dep, derivation);
	        }
	    }
	    // Some new observed derivations may become stale during this derivation computation
	    // so they have had no chance to propagate staleness (#916)
	    if (lowestNewObservingDerivationState !== IDerivationState$1.UP_TO_DATE) {
	        derivation.dependenciesState = lowestNewObservingDerivationState;
	        derivation.onBecomeStale();
	    }
	}
	function clearObserving$1(derivation) {
	    // invariant(globalState.inBatch > 0, "INTERNAL ERROR clearObserving should be called only inside batch");
	    var obs = derivation.observing;
	    derivation.observing = [];
	    var i = obs.length;
	    while (i--)
	        removeObserver$1(obs[i], derivation);
	    derivation.dependenciesState = IDerivationState$1.NOT_TRACKING;
	}
	function untracked$1(action) {
	    var prev = untrackedStart$1();
	    try {
	        return action();
	    }
	    finally {
	        untrackedEnd$1(prev);
	    }
	}
	function untrackedStart$1() {
	    var prev = globalState$1.trackingDerivation;
	    globalState$1.trackingDerivation = null;
	    return prev;
	}
	function untrackedEnd$1(prev) {
	    globalState$1.trackingDerivation = prev;
	}
	function allowStateReadsStart$1(allowStateReads) {
	    var prev = globalState$1.allowStateReads;
	    globalState$1.allowStateReads = allowStateReads;
	    return prev;
	}
	function allowStateReadsEnd$1(prev) {
	    globalState$1.allowStateReads = prev;
	}
	/**
	 * needed to keep `lowestObserverState` correct. when changing from (2 or 1) to 0
	 *
	 */
	function changeDependenciesStateTo0$1(derivation) {
	    if (derivation.dependenciesState === IDerivationState$1.UP_TO_DATE)
	        return;
	    derivation.dependenciesState = IDerivationState$1.UP_TO_DATE;
	    var obs = derivation.observing;
	    var i = obs.length;
	    while (i--)
	        obs[i].lowestObserverState = IDerivationState$1.UP_TO_DATE;
	}

	// we don't use globalState for these in order to avoid possible issues with multiple
	// mobx versions
	var currentActionId$1 = 0;
	var nextActionId$1 = 1;
	var functionNameDescriptor$1 = Object.getOwnPropertyDescriptor(function () { }, "name");
	var isFunctionNameConfigurable$1 = functionNameDescriptor$1 && functionNameDescriptor$1.configurable;
	function createAction$1(actionName, fn, ref) {
	    if (process.env.NODE_ENV !== "production") {
	        invariant$1(typeof fn === "function", "`action` can only be invoked on functions");
	        if (typeof actionName !== "string" || !actionName)
	            fail$1("actions should have valid names, got: '" + actionName + "'");
	    }
	    var res = function () {
	        return executeAction$1(actionName, fn, ref || this, arguments);
	    };
	    res.isMobxAction = true;
	    if (process.env.NODE_ENV !== "production") {
	        if (isFunctionNameConfigurable$1) {
	            Object.defineProperty(res, "name", { value: actionName });
	        }
	    }
	    return res;
	}
	function executeAction$1(actionName, fn, scope, args) {
	    var runInfo = _startAction$1(actionName, scope, args);
	    try {
	        return fn.apply(scope, args);
	    }
	    catch (err) {
	        runInfo.error = err;
	        throw err;
	    }
	    finally {
	        _endAction$1(runInfo);
	    }
	}
	function _startAction$1(actionName, scope, args) {
	    var notifySpy = isSpyEnabled$1() && !!actionName;
	    var startTime = 0;
	    if (notifySpy && process.env.NODE_ENV !== "production") {
	        startTime = Date.now();
	        var l = (args && args.length) || 0;
	        var flattendArgs = new Array(l);
	        if (l > 0)
	            for (var i = 0; i < l; i++)
	                flattendArgs[i] = args[i];
	        spyReportStart$1({
	            type: "action",
	            name: actionName,
	            object: scope,
	            arguments: flattendArgs
	        });
	    }
	    var prevDerivation = untrackedStart$1();
	    startBatch$1();
	    var prevAllowStateChanges = allowStateChangesStart$1(true);
	    var prevAllowStateReads = allowStateReadsStart$1(true);
	    var runInfo = {
	        prevDerivation: prevDerivation,
	        prevAllowStateChanges: prevAllowStateChanges,
	        prevAllowStateReads: prevAllowStateReads,
	        notifySpy: notifySpy,
	        startTime: startTime,
	        actionId: nextActionId$1++,
	        parentActionId: currentActionId$1
	    };
	    currentActionId$1 = runInfo.actionId;
	    return runInfo;
	}
	function _endAction$1(runInfo) {
	    if (currentActionId$1 !== runInfo.actionId) {
	        fail$1("invalid action stack. did you forget to finish an action?");
	    }
	    currentActionId$1 = runInfo.parentActionId;
	    if (runInfo.error !== undefined) {
	        globalState$1.suppressReactionErrors = true;
	    }
	    allowStateChangesEnd$1(runInfo.prevAllowStateChanges);
	    allowStateReadsEnd$1(runInfo.prevAllowStateReads);
	    endBatch$1();
	    untrackedEnd$1(runInfo.prevDerivation);
	    if (runInfo.notifySpy && process.env.NODE_ENV !== "production") {
	        spyReportEnd$1({ time: Date.now() - runInfo.startTime });
	    }
	    globalState$1.suppressReactionErrors = false;
	}
	function allowStateChangesStart$1(allowStateChanges) {
	    var prev = globalState$1.allowStateChanges;
	    globalState$1.allowStateChanges = allowStateChanges;
	    return prev;
	}
	function allowStateChangesEnd$1(prev) {
	    globalState$1.allowStateChanges = prev;
	}

	var ObservableValue$1 = /** @class */ (function (_super) {
	    __extends$1(ObservableValue, _super);
	    function ObservableValue(value, enhancer, name, notifySpy, equals) {
	        if (name === void 0) { name = "ObservableValue@" + getNextId$1(); }
	        if (notifySpy === void 0) { notifySpy = true; }
	        if (equals === void 0) { equals = comparer$1.default; }
	        var _this = _super.call(this, name) || this;
	        _this.enhancer = enhancer;
	        _this.name = name;
	        _this.equals = equals;
	        _this.hasUnreportedChange = false;
	        _this.value = enhancer(value, undefined, name);
	        if (notifySpy && isSpyEnabled$1() && process.env.NODE_ENV !== "production") {
	            // only notify spy if this is a stand-alone observable
	            spyReport$1({ type: "create", name: _this.name, newValue: "" + _this.value });
	        }
	        return _this;
	    }
	    ObservableValue.prototype.dehanceValue = function (value) {
	        if (this.dehancer !== undefined)
	            return this.dehancer(value);
	        return value;
	    };
	    ObservableValue.prototype.set = function (newValue) {
	        var oldValue = this.value;
	        newValue = this.prepareNewValue(newValue);
	        if (newValue !== globalState$1.UNCHANGED) {
	            var notifySpy = isSpyEnabled$1();
	            if (notifySpy && process.env.NODE_ENV !== "production") {
	                spyReportStart$1({
	                    type: "update",
	                    name: this.name,
	                    newValue: newValue,
	                    oldValue: oldValue
	                });
	            }
	            this.setNewValue(newValue);
	            if (notifySpy && process.env.NODE_ENV !== "production")
	                spyReportEnd$1();
	        }
	    };
	    ObservableValue.prototype.prepareNewValue = function (newValue) {
	        checkIfStateModificationsAreAllowed$1(this);
	        if (hasInterceptors$1(this)) {
	            var change = interceptChange$1(this, {
	                object: this,
	                type: "update",
	                newValue: newValue
	            });
	            if (!change)
	                return globalState$1.UNCHANGED;
	            newValue = change.newValue;
	        }
	        // apply modifier
	        newValue = this.enhancer(newValue, this.value, this.name);
	        return this.equals(this.value, newValue) ? globalState$1.UNCHANGED : newValue;
	    };
	    ObservableValue.prototype.setNewValue = function (newValue) {
	        var oldValue = this.value;
	        this.value = newValue;
	        this.reportChanged();
	        if (hasListeners$1(this)) {
	            notifyListeners$1(this, {
	                type: "update",
	                object: this,
	                newValue: newValue,
	                oldValue: oldValue
	            });
	        }
	    };
	    ObservableValue.prototype.get = function () {
	        this.reportObserved();
	        return this.dehanceValue(this.value);
	    };
	    ObservableValue.prototype.intercept = function (handler) {
	        return registerInterceptor$1(this, handler);
	    };
	    ObservableValue.prototype.observe = function (listener, fireImmediately) {
	        if (fireImmediately)
	            listener({
	                object: this,
	                type: "update",
	                newValue: this.value,
	                oldValue: undefined
	            });
	        return registerListener$1(this, listener);
	    };
	    ObservableValue.prototype.toJSON = function () {
	        return this.get();
	    };
	    ObservableValue.prototype.toString = function () {
	        return this.name + "[" + this.value + "]";
	    };
	    ObservableValue.prototype.valueOf = function () {
	        return toPrimitive$1(this.get());
	    };
	    ObservableValue.prototype[Symbol.toPrimitive] = function () {
	        return this.valueOf();
	    };
	    return ObservableValue;
	}(Atom$1));
	var isObservableValue$1 = createInstanceofPredicate$1("ObservableValue", ObservableValue$1);

	/**
	 * A node in the state dependency root that observes other nodes, and can be observed itself.
	 *
	 * ComputedValue will remember the result of the computation for the duration of the batch, or
	 * while being observed.
	 *
	 * During this time it will recompute only when one of its direct dependencies changed,
	 * but only when it is being accessed with `ComputedValue.get()`.
	 *
	 * Implementation description:
	 * 1. First time it's being accessed it will compute and remember result
	 *    give back remembered result until 2. happens
	 * 2. First time any deep dependency change, propagate POSSIBLY_STALE to all observers, wait for 3.
	 * 3. When it's being accessed, recompute if any shallow dependency changed.
	 *    if result changed: propagate STALE to all observers, that were POSSIBLY_STALE from the last step.
	 *    go to step 2. either way
	 *
	 * If at any point it's outside batch and it isn't observed: reset everything and go to 1.
	 */
	var ComputedValue$1 = /** @class */ (function () {
	    /**
	     * Create a new computed value based on a function expression.
	     *
	     * The `name` property is for debug purposes only.
	     *
	     * The `equals` property specifies the comparer function to use to determine if a newly produced
	     * value differs from the previous value. Two comparers are provided in the library; `defaultComparer`
	     * compares based on identity comparison (===), and `structualComparer` deeply compares the structure.
	     * Structural comparison can be convenient if you always produce a new aggregated object and
	     * don't want to notify observers if it is structurally the same.
	     * This is useful for working with vectors, mouse coordinates etc.
	     */
	    function ComputedValue(options) {
	        this.dependenciesState = IDerivationState$1.NOT_TRACKING;
	        this.observing = []; // nodes we are looking at. Our value depends on these nodes
	        this.newObserving = null; // during tracking it's an array with new observed observers
	        this.isBeingObserved = false;
	        this.isPendingUnobservation = false;
	        this.observers = new Set();
	        this.diffValue = 0;
	        this.runId = 0;
	        this.lastAccessedBy = 0;
	        this.lowestObserverState = IDerivationState$1.UP_TO_DATE;
	        this.unboundDepsCount = 0;
	        this.__mapid = "#" + getNextId$1();
	        this.value = new CaughtException$1(null);
	        this.isComputing = false; // to check for cycles
	        this.isRunningSetter = false;
	        this.isTracing = TraceMode$1.NONE;
	        invariant$1(options.get, "missing option for computed: get");
	        this.derivation = options.get;
	        this.name = options.name || "ComputedValue@" + getNextId$1();
	        if (options.set)
	            this.setter = createAction$1(this.name + "-setter", options.set);
	        this.equals =
	            options.equals ||
	                (options.compareStructural || options.struct
	                    ? comparer$1.structural
	                    : comparer$1.default);
	        this.scope = options.context;
	        this.requiresReaction = !!options.requiresReaction;
	        this.keepAlive = !!options.keepAlive;
	    }
	    ComputedValue.prototype.onBecomeStale = function () {
	        propagateMaybeChanged$1(this);
	    };
	    ComputedValue.prototype.onBecomeObserved = function () {
	        if (this.onBecomeObservedListeners) {
	            this.onBecomeObservedListeners.forEach(function (listener) { return listener(); });
	        }
	    };
	    ComputedValue.prototype.onBecomeUnobserved = function () {
	        if (this.onBecomeUnobservedListeners) {
	            this.onBecomeUnobservedListeners.forEach(function (listener) { return listener(); });
	        }
	    };
	    /**
	     * Returns the current value of this computed value.
	     * Will evaluate its computation first if needed.
	     */
	    ComputedValue.prototype.get = function () {
	        if (this.isComputing)
	            fail$1("Cycle detected in computation " + this.name + ": " + this.derivation);
	        if (globalState$1.inBatch === 0 && this.observers.size === 0 && !this.keepAlive) {
	            if (shouldCompute$1(this)) {
	                this.warnAboutUntrackedRead();
	                startBatch$1(); // See perf test 'computed memoization'
	                this.value = this.computeValue(false);
	                endBatch$1();
	            }
	        }
	        else {
	            reportObserved$1(this);
	            if (shouldCompute$1(this))
	                if (this.trackAndCompute())
	                    propagateChangeConfirmed$1(this);
	        }
	        var result = this.value;
	        if (isCaughtException$1(result))
	            throw result.cause;
	        return result;
	    };
	    ComputedValue.prototype.peek = function () {
	        var res = this.computeValue(false);
	        if (isCaughtException$1(res))
	            throw res.cause;
	        return res;
	    };
	    ComputedValue.prototype.set = function (value) {
	        if (this.setter) {
	            invariant$1(!this.isRunningSetter, "The setter of computed value '" + this.name + "' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?");
	            this.isRunningSetter = true;
	            try {
	                this.setter.call(this.scope, value);
	            }
	            finally {
	                this.isRunningSetter = false;
	            }
	        }
	        else
	            invariant$1(false, process.env.NODE_ENV !== "production" &&
	                "[ComputedValue '" + this.name + "'] It is not possible to assign a new value to a computed value.");
	    };
	    ComputedValue.prototype.trackAndCompute = function () {
	        if (isSpyEnabled$1() && process.env.NODE_ENV !== "production") {
	            spyReport$1({
	                object: this.scope,
	                type: "compute",
	                name: this.name
	            });
	        }
	        var oldValue = this.value;
	        var wasSuspended = 
	        /* see #1208 */ this.dependenciesState === IDerivationState$1.NOT_TRACKING;
	        var newValue = this.computeValue(true);
	        var changed = wasSuspended ||
	            isCaughtException$1(oldValue) ||
	            isCaughtException$1(newValue) ||
	            !this.equals(oldValue, newValue);
	        if (changed) {
	            this.value = newValue;
	        }
	        return changed;
	    };
	    ComputedValue.prototype.computeValue = function (track) {
	        this.isComputing = true;
	        globalState$1.computationDepth++;
	        var res;
	        if (track) {
	            res = trackDerivedFunction$1(this, this.derivation, this.scope);
	        }
	        else {
	            if (globalState$1.disableErrorBoundaries === true) {
	                res = this.derivation.call(this.scope);
	            }
	            else {
	                try {
	                    res = this.derivation.call(this.scope);
	                }
	                catch (e) {
	                    res = new CaughtException$1(e);
	                }
	            }
	        }
	        globalState$1.computationDepth--;
	        this.isComputing = false;
	        return res;
	    };
	    ComputedValue.prototype.suspend = function () {
	        if (!this.keepAlive) {
	            clearObserving$1(this);
	            this.value = undefined; // don't hold on to computed value!
	        }
	    };
	    ComputedValue.prototype.observe = function (listener, fireImmediately) {
	        var _this = this;
	        var firstTime = true;
	        var prevValue = undefined;
	        return autorun$1(function () {
	            var newValue = _this.get();
	            if (!firstTime || fireImmediately) {
	                var prevU = untrackedStart$1();
	                listener({
	                    type: "update",
	                    object: _this,
	                    newValue: newValue,
	                    oldValue: prevValue
	                });
	                untrackedEnd$1(prevU);
	            }
	            firstTime = false;
	            prevValue = newValue;
	        });
	    };
	    ComputedValue.prototype.warnAboutUntrackedRead = function () {
	        if (process.env.NODE_ENV === "production")
	            return;
	        if (this.requiresReaction === true) {
	            fail$1("[mobx] Computed value " + this.name + " is read outside a reactive context");
	        }
	        if (this.isTracing !== TraceMode$1.NONE) {
	            console.log("[mobx.trace] '" + this.name + "' is being read outside a reactive context. Doing a full recompute");
	        }
	        if (globalState$1.computedRequiresReaction) {
	            console.warn("[mobx] Computed value " + this.name + " is being read outside a reactive context. Doing a full recompute");
	        }
	    };
	    ComputedValue.prototype.toJSON = function () {
	        return this.get();
	    };
	    ComputedValue.prototype.toString = function () {
	        return this.name + "[" + this.derivation.toString() + "]";
	    };
	    ComputedValue.prototype.valueOf = function () {
	        return toPrimitive$1(this.get());
	    };
	    ComputedValue.prototype[Symbol.toPrimitive] = function () {
	        return this.valueOf();
	    };
	    return ComputedValue;
	}());
	var isComputedValue$1 = createInstanceofPredicate$1("ComputedValue", ComputedValue$1);
	var MobXGlobals$1 = /** @class */ (function () {
	    function MobXGlobals() {
	        /**
	         * MobXGlobals version.
	         * MobX compatiblity with other versions loaded in memory as long as this version matches.
	         * It indicates that the global state still stores similar information
	         *
	         * N.B: this version is unrelated to the package version of MobX, and is only the version of the
	         * internal state storage of MobX, and can be the same across many different package versions
	         */
	        this.version = 5;
	        /**
	         * globally unique token to signal unchanged
	         */
	        this.UNCHANGED = {};
	        /**
	         * Currently running derivation
	         */
	        this.trackingDerivation = null;
	        /**
	         * Are we running a computation currently? (not a reaction)
	         */
	        this.computationDepth = 0;
	        /**
	         * Each time a derivation is tracked, it is assigned a unique run-id
	         */
	        this.runId = 0;
	        /**
	         * 'guid' for general purpose. Will be persisted amongst resets.
	         */
	        this.mobxGuid = 0;
	        /**
	         * Are we in a batch block? (and how many of them)
	         */
	        this.inBatch = 0;
	        /**
	         * Observables that don't have observers anymore, and are about to be
	         * suspended, unless somebody else accesses it in the same batch
	         *
	         * @type {IObservable[]}
	         */
	        this.pendingUnobservations = [];
	        /**
	         * List of scheduled, not yet executed, reactions.
	         */
	        this.pendingReactions = [];
	        /**
	         * Are we currently processing reactions?
	         */
	        this.isRunningReactions = false;
	        /**
	         * Is it allowed to change observables at this point?
	         * In general, MobX doesn't allow that when running computations and React.render.
	         * To ensure that those functions stay pure.
	         */
	        this.allowStateChanges = true;
	        /**
	         * Is it allowed to read observables at this point?
	         * Used to hold the state needed for `observableRequiresReaction`
	         */
	        this.allowStateReads = true;
	        /**
	         * If strict mode is enabled, state changes are by default not allowed
	         */
	        this.enforceActions = false;
	        /**
	         * Spy callbacks
	         */
	        this.spyListeners = [];
	        /**
	         * Globally attached error handlers that react specifically to errors in reactions
	         */
	        this.globalReactionErrorHandlers = [];
	        /**
	         * Warn if computed values are accessed outside a reactive context
	         */
	        this.computedRequiresReaction = false;
	        /**
	         * (Experimental)
	         * Warn if you try to create to derivation / reactive context without accessing any observable.
	         */
	        this.reactionRequiresObservable = false;
	        /**
	         * (Experimental)
	         * Warn if observables are accessed outside a reactive context
	         */
	        this.observableRequiresReaction = false;
	        /**
	         * Allows overwriting of computed properties, useful in tests but not prod as it can cause
	         * memory leaks. See https://github.com/mobxjs/mobx/issues/1867
	         */
	        this.computedConfigurable = false;
	        /*
	         * Don't catch and rethrow exceptions. This is useful for inspecting the state of
	         * the stack when an exception occurs while debugging.
	         */
	        this.disableErrorBoundaries = false;
	        /*
	         * If true, we are already handling an exception in an action. Any errors in reactions should be suppressed, as
	         * they are not the cause, see: https://github.com/mobxjs/mobx/issues/1836
	         */
	        this.suppressReactionErrors = false;
	    }
	    return MobXGlobals;
	}());
	var mockGlobal$2 = {};
	function getGlobal$2() {
	    if (typeof window !== "undefined") {
	        return window;
	    }
	    if (typeof global !== "undefined") {
	        return global;
	    }
	    if (typeof self !== "undefined") {
	        return self;
	    }
	    return mockGlobal$2;
	}
	var canMergeGlobalState$1 = true;
	var globalState$1 = (function () {
	    var global = getGlobal$2();
	    if (global.__mobxInstanceCount > 0 && !global.__mobxGlobals)
	        canMergeGlobalState$1 = false;
	    if (global.__mobxGlobals && global.__mobxGlobals.version !== new MobXGlobals$1().version)
	        canMergeGlobalState$1 = false;
	    if (!canMergeGlobalState$1) {
	        setTimeout(function () {
	            {
	                fail$1("There are multiple, different versions of MobX active. Make sure MobX is loaded only once or use `configure({ isolateGlobalState: true })`");
	            }
	        }, 1);
	        return new MobXGlobals$1();
	    }
	    else if (global.__mobxGlobals) {
	        global.__mobxInstanceCount += 1;
	        if (!global.__mobxGlobals.UNCHANGED)
	            global.__mobxGlobals.UNCHANGED = {}; // make merge backward compatible
	        return global.__mobxGlobals;
	    }
	    else {
	        global.__mobxInstanceCount = 1;
	        return (global.__mobxGlobals = new MobXGlobals$1());
	    }
	})();
	// function invariantObservers(observable: IObservable) {
	//     const list = observable.observers
	//     const map = observable.observersIndexes
	//     const l = list.length
	//     for (let i = 0; i < l; i++) {
	//         const id = list[i].__mapid
	//         if (i) {
	//             invariant(map[id] === i, "INTERNAL ERROR maps derivation.__mapid to index in list") // for performance
	//         } else {
	//             invariant(!(id in map), "INTERNAL ERROR observer on index 0 shouldn't be held in map.") // for performance
	//         }
	//     }
	//     invariant(
	//         list.length === 0 || Object.keys(map).length === list.length - 1,
	//         "INTERNAL ERROR there is no junk in map"
	//     )
	// }
	function addObserver$1(observable, node) {
	    // invariant(node.dependenciesState !== -1, "INTERNAL ERROR, can add only dependenciesState !== -1");
	    // invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR add already added node");
	    // invariantObservers(observable);
	    observable.observers.add(node);
	    if (observable.lowestObserverState > node.dependenciesState)
	        observable.lowestObserverState = node.dependenciesState;
	    // invariantObservers(observable);
	    // invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR didn't add node");
	}
	function removeObserver$1(observable, node) {
	    // invariant(globalState.inBatch > 0, "INTERNAL ERROR, remove should be called only inside batch");
	    // invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR remove already removed node");
	    // invariantObservers(observable);
	    observable.observers.delete(node);
	    if (observable.observers.size === 0) {
	        // deleting last observer
	        queueForUnobservation$1(observable);
	    }
	    // invariantObservers(observable);
	    // invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR remove already removed node2");
	}
	function queueForUnobservation$1(observable) {
	    if (observable.isPendingUnobservation === false) {
	        // invariant(observable._observers.length === 0, "INTERNAL ERROR, should only queue for unobservation unobserved observables");
	        observable.isPendingUnobservation = true;
	        globalState$1.pendingUnobservations.push(observable);
	    }
	}
	/**
	 * Batch starts a transaction, at least for purposes of memoizing ComputedValues when nothing else does.
	 * During a batch `onBecomeUnobserved` will be called at most once per observable.
	 * Avoids unnecessary recalculations.
	 */
	function startBatch$1() {
	    globalState$1.inBatch++;
	}
	function endBatch$1() {
	    if (--globalState$1.inBatch === 0) {
	        runReactions$1();
	        // the batch is actually about to finish, all unobserving should happen here.
	        var list = globalState$1.pendingUnobservations;
	        for (var i = 0; i < list.length; i++) {
	            var observable = list[i];
	            observable.isPendingUnobservation = false;
	            if (observable.observers.size === 0) {
	                if (observable.isBeingObserved) {
	                    // if this observable had reactive observers, trigger the hooks
	                    observable.isBeingObserved = false;
	                    observable.onBecomeUnobserved();
	                }
	                if (observable instanceof ComputedValue$1) {
	                    // computed values are automatically teared down when the last observer leaves
	                    // this process happens recursively, this computed might be the last observabe of another, etc..
	                    observable.suspend();
	                }
	            }
	        }
	        globalState$1.pendingUnobservations = [];
	    }
	}
	function reportObserved$1(observable) {
	    checkIfStateReadsAreAllowed$1(observable);
	    var derivation = globalState$1.trackingDerivation;
	    if (derivation !== null) {
	        /**
	         * Simple optimization, give each derivation run an unique id (runId)
	         * Check if last time this observable was accessed the same runId is used
	         * if this is the case, the relation is already known
	         */
	        if (derivation.runId !== observable.lastAccessedBy) {
	            observable.lastAccessedBy = derivation.runId;
	            // Tried storing newObserving, or observing, or both as Set, but performance didn't come close...
	            derivation.newObserving[derivation.unboundDepsCount++] = observable;
	            if (!observable.isBeingObserved) {
	                observable.isBeingObserved = true;
	                observable.onBecomeObserved();
	            }
	        }
	        return true;
	    }
	    else if (observable.observers.size === 0 && globalState$1.inBatch > 0) {
	        queueForUnobservation$1(observable);
	    }
	    return false;
	}
	// function invariantLOS(observable: IObservable, msg: string) {
	//     // it's expensive so better not run it in produciton. but temporarily helpful for testing
	//     const min = getObservers(observable).reduce((a, b) => Math.min(a, b.dependenciesState), 2)
	//     if (min >= observable.lowestObserverState) return // <- the only assumption about `lowestObserverState`
	//     throw new Error(
	//         "lowestObserverState is wrong for " +
	//             msg +
	//             " because " +
	//             min +
	//             " < " +
	//             observable.lowestObserverState
	//     )
	// }
	/**
	 * NOTE: current propagation mechanism will in case of self reruning autoruns behave unexpectedly
	 * It will propagate changes to observers from previous run
	 * It's hard or maybe impossible (with reasonable perf) to get it right with current approach
	 * Hopefully self reruning autoruns aren't a feature people should depend on
	 * Also most basic use cases should be ok
	 */
	// Called by Atom when its value changes
	function propagateChanged$1(observable) {
	    // invariantLOS(observable, "changed start");
	    if (observable.lowestObserverState === IDerivationState$1.STALE)
	        return;
	    observable.lowestObserverState = IDerivationState$1.STALE;
	    // Ideally we use for..of here, but the downcompiled version is really slow...
	    observable.observers.forEach(function (d) {
	        if (d.dependenciesState === IDerivationState$1.UP_TO_DATE) {
	            if (d.isTracing !== TraceMode$1.NONE) {
	                logTraceInfo$1(d, observable);
	            }
	            d.onBecomeStale();
	        }
	        d.dependenciesState = IDerivationState$1.STALE;
	    });
	    // invariantLOS(observable, "changed end");
	}
	// Called by ComputedValue when it recalculate and its value changed
	function propagateChangeConfirmed$1(observable) {
	    // invariantLOS(observable, "confirmed start");
	    if (observable.lowestObserverState === IDerivationState$1.STALE)
	        return;
	    observable.lowestObserverState = IDerivationState$1.STALE;
	    observable.observers.forEach(function (d) {
	        if (d.dependenciesState === IDerivationState$1.POSSIBLY_STALE)
	            d.dependenciesState = IDerivationState$1.STALE;
	        else if (d.dependenciesState === IDerivationState$1.UP_TO_DATE // this happens during computing of `d`, just keep lowestObserverState up to date.
	        )
	            observable.lowestObserverState = IDerivationState$1.UP_TO_DATE;
	    });
	    // invariantLOS(observable, "confirmed end");
	}
	// Used by computed when its dependency changed, but we don't wan't to immediately recompute.
	function propagateMaybeChanged$1(observable) {
	    // invariantLOS(observable, "maybe start");
	    if (observable.lowestObserverState !== IDerivationState$1.UP_TO_DATE)
	        return;
	    observable.lowestObserverState = IDerivationState$1.POSSIBLY_STALE;
	    observable.observers.forEach(function (d) {
	        if (d.dependenciesState === IDerivationState$1.UP_TO_DATE) {
	            d.dependenciesState = IDerivationState$1.POSSIBLY_STALE;
	            if (d.isTracing !== TraceMode$1.NONE) {
	                logTraceInfo$1(d, observable);
	            }
	            d.onBecomeStale();
	        }
	    });
	    // invariantLOS(observable, "maybe end");
	}
	function logTraceInfo$1(derivation, observable) {
	    console.log("[mobx.trace] '" + derivation.name + "' is invalidated due to a change in: '" + observable.name + "'");
	    if (derivation.isTracing === TraceMode$1.BREAK) {
	        var lines = [];
	        printDepTree$1(getDependencyTree$1(derivation), lines, 1);
	        // prettier-ignore
	        new Function("debugger;\n/*\nTracing '" + derivation.name + "'\n\nYou are entering this break point because derivation '" + derivation.name + "' is being traced and '" + observable.name + "' is now forcing it to update.\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\n\n" + (derivation instanceof ComputedValue$1 ? derivation.derivation.toString().replace(/[*]\//g, "/") : "") + "\n\nThe dependencies for this derivation are:\n\n" + lines.join("\n") + "\n*/\n    ")();
	    }
	}
	function printDepTree$1(tree, lines, depth) {
	    if (lines.length >= 1000) {
	        lines.push("(and many more)");
	        return;
	    }
	    lines.push("" + new Array(depth).join("\t") + tree.name); // MWE: not the fastest, but the easiest way :)
	    if (tree.dependencies)
	        tree.dependencies.forEach(function (child) { return printDepTree$1(child, lines, depth + 1); });
	}

	var Reaction$1 = /** @class */ (function () {
	    function Reaction(name, onInvalidate, errorHandler, requiresObservable) {
	        if (name === void 0) { name = "Reaction@" + getNextId$1(); }
	        if (requiresObservable === void 0) { requiresObservable = false; }
	        this.name = name;
	        this.onInvalidate = onInvalidate;
	        this.errorHandler = errorHandler;
	        this.requiresObservable = requiresObservable;
	        this.observing = []; // nodes we are looking at. Our value depends on these nodes
	        this.newObserving = [];
	        this.dependenciesState = IDerivationState$1.NOT_TRACKING;
	        this.diffValue = 0;
	        this.runId = 0;
	        this.unboundDepsCount = 0;
	        this.__mapid = "#" + getNextId$1();
	        this.isDisposed = false;
	        this._isScheduled = false;
	        this._isTrackPending = false;
	        this._isRunning = false;
	        this.isTracing = TraceMode$1.NONE;
	    }
	    Reaction.prototype.onBecomeStale = function () {
	        this.schedule();
	    };
	    Reaction.prototype.schedule = function () {
	        if (!this._isScheduled) {
	            this._isScheduled = true;
	            globalState$1.pendingReactions.push(this);
	            runReactions$1();
	        }
	    };
	    Reaction.prototype.isScheduled = function () {
	        return this._isScheduled;
	    };
	    /**
	     * internal, use schedule() if you intend to kick off a reaction
	     */
	    Reaction.prototype.runReaction = function () {
	        if (!this.isDisposed) {
	            startBatch$1();
	            this._isScheduled = false;
	            if (shouldCompute$1(this)) {
	                this._isTrackPending = true;
	                try {
	                    this.onInvalidate();
	                    if (this._isTrackPending &&
	                        isSpyEnabled$1() &&
	                        process.env.NODE_ENV !== "production") {
	                        // onInvalidate didn't trigger track right away..
	                        spyReport$1({
	                            name: this.name,
	                            type: "scheduled-reaction"
	                        });
	                    }
	                }
	                catch (e) {
	                    this.reportExceptionInDerivation(e);
	                }
	            }
	            endBatch$1();
	        }
	    };
	    Reaction.prototype.track = function (fn) {
	        if (this.isDisposed) {
	            return;
	            // console.warn("Reaction already disposed") // Note: Not a warning / error in mobx 4 either
	        }
	        startBatch$1();
	        var notify = isSpyEnabled$1();
	        var startTime;
	        if (notify && process.env.NODE_ENV !== "production") {
	            startTime = Date.now();
	            spyReportStart$1({
	                name: this.name,
	                type: "reaction"
	            });
	        }
	        this._isRunning = true;
	        var result = trackDerivedFunction$1(this, fn, undefined);
	        this._isRunning = false;
	        this._isTrackPending = false;
	        if (this.isDisposed) {
	            // disposed during last run. Clean up everything that was bound after the dispose call.
	            clearObserving$1(this);
	        }
	        if (isCaughtException$1(result))
	            this.reportExceptionInDerivation(result.cause);
	        if (notify && process.env.NODE_ENV !== "production") {
	            spyReportEnd$1({
	                time: Date.now() - startTime
	            });
	        }
	        endBatch$1();
	    };
	    Reaction.prototype.reportExceptionInDerivation = function (error) {
	        var _this = this;
	        if (this.errorHandler) {
	            this.errorHandler(error, this);
	            return;
	        }
	        if (globalState$1.disableErrorBoundaries)
	            throw error;
	        var message = "[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '" + this + "'";
	        if (globalState$1.suppressReactionErrors) {
	            console.warn("[mobx] (error in reaction '" + this.name + "' suppressed, fix error of causing action below)"); // prettier-ignore
	        }
	        else {
	            console.error(message, error);
	            /** If debugging brought you here, please, read the above message :-). Tnx! */
	        }
	        if (isSpyEnabled$1()) {
	            spyReport$1({
	                type: "error",
	                name: this.name,
	                message: message,
	                error: "" + error
	            });
	        }
	        globalState$1.globalReactionErrorHandlers.forEach(function (f) { return f(error, _this); });
	    };
	    Reaction.prototype.dispose = function () {
	        if (!this.isDisposed) {
	            this.isDisposed = true;
	            if (!this._isRunning) {
	                // if disposed while running, clean up later. Maybe not optimal, but rare case
	                startBatch$1();
	                clearObserving$1(this);
	                endBatch$1();
	            }
	        }
	    };
	    Reaction.prototype.getDisposer = function () {
	        var r = this.dispose.bind(this);
	        r[$mobx$1] = this;
	        return r;
	    };
	    Reaction.prototype.toString = function () {
	        return "Reaction[" + this.name + "]";
	    };
	    Reaction.prototype.trace = function (enterBreakPoint) {
	        if (enterBreakPoint === void 0) { enterBreakPoint = false; }
	        trace$1(this, enterBreakPoint);
	    };
	    return Reaction;
	}());
	/**
	 * Magic number alert!
	 * Defines within how many times a reaction is allowed to re-trigger itself
	 * until it is assumed that this is gonna be a never ending loop...
	 */
	var MAX_REACTION_ITERATIONS$1 = 100;
	var reactionScheduler$1 = function (f) { return f(); };
	function runReactions$1() {
	    // Trampolining, if runReactions are already running, new reactions will be picked up
	    if (globalState$1.inBatch > 0 || globalState$1.isRunningReactions)
	        return;
	    reactionScheduler$1(runReactionsHelper$1);
	}
	function runReactionsHelper$1() {
	    globalState$1.isRunningReactions = true;
	    var allReactions = globalState$1.pendingReactions;
	    var iterations = 0;
	    // While running reactions, new reactions might be triggered.
	    // Hence we work with two variables and check whether
	    // we converge to no remaining reactions after a while.
	    while (allReactions.length > 0) {
	        if (++iterations === MAX_REACTION_ITERATIONS$1) {
	            console.error("Reaction doesn't converge to a stable state after " + MAX_REACTION_ITERATIONS$1 + " iterations." +
	                (" Probably there is a cycle in the reactive function: " + allReactions[0]));
	            allReactions.splice(0); // clear reactions
	        }
	        var remainingReactions = allReactions.splice(0);
	        for (var i = 0, l = remainingReactions.length; i < l; i++)
	            remainingReactions[i].runReaction();
	    }
	    globalState$1.isRunningReactions = false;
	}
	var isReaction$1 = createInstanceofPredicate$1("Reaction", Reaction$1);

	function isSpyEnabled$1() {
	    return process.env.NODE_ENV !== "production" && !!globalState$1.spyListeners.length;
	}
	function spyReport$1(event) {
	    if (process.env.NODE_ENV === "production")
	        return; // dead code elimination can do the rest
	    if (!globalState$1.spyListeners.length)
	        return;
	    var listeners = globalState$1.spyListeners;
	    for (var i = 0, l = listeners.length; i < l; i++)
	        listeners[i](event);
	}
	function spyReportStart$1(event) {
	    if (process.env.NODE_ENV === "production")
	        return;
	    var change = __assign$1(__assign$1({}, event), { spyReportStart: true });
	    spyReport$1(change);
	}
	var END_EVENT$1 = { spyReportEnd: true };
	function spyReportEnd$1(change) {
	    if (process.env.NODE_ENV === "production")
	        return;
	    if (change)
	        spyReport$1(__assign$1(__assign$1({}, change), { spyReportEnd: true }));
	    else
	        spyReport$1(END_EVENT$1);
	}
	function spy$1(listener) {
	    if (process.env.NODE_ENV === "production") {
	        console.warn("[mobx.spy] Is a no-op in production builds");
	        return function () { };
	    }
	    else {
	        globalState$1.spyListeners.push(listener);
	        return once$1(function () {
	            globalState$1.spyListeners = globalState$1.spyListeners.filter(function (l) { return l !== listener; });
	        });
	    }
	}

	function dontReassignFields$1() {
	    fail$1(process.env.NODE_ENV !== "production" && "@action fields are not reassignable");
	}
	function namedActionDecorator$1(name) {
	    return function (target, prop, descriptor) {
	        if (descriptor) {
	            if (process.env.NODE_ENV !== "production" && descriptor.get !== undefined) {
	                return fail$1("@action cannot be used with getters");
	            }
	            // babel / typescript
	            // @action method() { }
	            if (descriptor.value) {
	                // typescript
	                return {
	                    value: createAction$1(name, descriptor.value),
	                    enumerable: false,
	                    configurable: true,
	                    writable: true // for typescript, this must be writable, otherwise it cannot inherit :/ (see inheritable actions test)
	                };
	            }
	            // babel only: @action method = () => {}
	            var initializer_1 = descriptor.initializer;
	            return {
	                enumerable: false,
	                configurable: true,
	                writable: true,
	                initializer: function () {
	                    // N.B: we can't immediately invoke initializer; this would be wrong
	                    return createAction$1(name, initializer_1.call(this));
	                }
	            };
	        }
	        // bound instance methods
	        return actionFieldDecorator$1(name).apply(this, arguments);
	    };
	}
	function actionFieldDecorator$1(name) {
	    // Simple property that writes on first invocation to the current instance
	    return function (target, prop, descriptor) {
	        Object.defineProperty(target, prop, {
	            configurable: true,
	            enumerable: false,
	            get: function () {
	                return undefined;
	            },
	            set: function (value) {
	                addHiddenProp$1(this, prop, action$1(name, value));
	            }
	        });
	    };
	}
	function boundActionDecorator$1(target, propertyName, descriptor, applyToInstance) {
	    if (applyToInstance === true) {
	        defineBoundAction$1(target, propertyName, descriptor.value);
	        return null;
	    }
	    if (descriptor) {
	        // if (descriptor.value)
	        // Typescript / Babel: @action.bound method() { }
	        // also: babel @action.bound method = () => {}
	        return {
	            configurable: true,
	            enumerable: false,
	            get: function () {
	                defineBoundAction$1(this, propertyName, descriptor.value || descriptor.initializer.call(this));
	                return this[propertyName];
	            },
	            set: dontReassignFields$1
	        };
	    }
	    // field decorator Typescript @action.bound method = () => {}
	    return {
	        enumerable: false,
	        configurable: true,
	        set: function (v) {
	            defineBoundAction$1(this, propertyName, v);
	        },
	        get: function () {
	            return undefined;
	        }
	    };
	}

	var action$1 = function action(arg1, arg2, arg3, arg4) {
	    // action(fn() {})
	    if (arguments.length === 1 && typeof arg1 === "function")
	        return createAction$1(arg1.name || "<unnamed action>", arg1);
	    // action("name", fn() {})
	    if (arguments.length === 2 && typeof arg2 === "function")
	        return createAction$1(arg1, arg2);
	    // @action("name") fn() {}
	    if (arguments.length === 1 && typeof arg1 === "string")
	        return namedActionDecorator$1(arg1);
	    // @action fn() {}
	    if (arg4 === true) {
	        // apply to instance immediately
	        addHiddenProp$1(arg1, arg2, createAction$1(arg1.name || arg2, arg3.value, this));
	    }
	    else {
	        return namedActionDecorator$1(arg2).apply(null, arguments);
	    }
	};
	action$1.bound = boundActionDecorator$1;
	function runInAction$1(arg1, arg2) {
	    var actionName = typeof arg1 === "string" ? arg1 : arg1.name || "<unnamed action>";
	    var fn = typeof arg1 === "function" ? arg1 : arg2;
	    if (process.env.NODE_ENV !== "production") {
	        invariant$1(typeof fn === "function" && fn.length === 0, "`runInAction` expects a function without arguments");
	        if (typeof actionName !== "string" || !actionName)
	            fail$1("actions should have valid names, got: '" + actionName + "'");
	    }
	    return executeAction$1(actionName, fn, this, undefined);
	}
	function isAction$1(thing) {
	    return typeof thing === "function" && thing.isMobxAction === true;
	}
	function defineBoundAction$1(target, propertyName, fn) {
	    addHiddenProp$1(target, propertyName, createAction$1(propertyName, fn.bind(target)));
	}

	/**
	 * Creates a named reactive view and keeps it alive, so that the view is always
	 * updated if one of the dependencies changes, even when the view is not further used by something else.
	 * @param view The reactive view
	 * @returns disposer function, which can be used to stop the view from being updated in the future.
	 */
	function autorun$1(view, opts) {
	    if (opts === void 0) { opts = EMPTY_OBJECT$2; }
	    if (process.env.NODE_ENV !== "production") {
	        invariant$1(typeof view === "function", "Autorun expects a function as first argument");
	        invariant$1(isAction$1(view) === false, "Autorun does not accept actions since actions are untrackable");
	    }
	    var name = (opts && opts.name) || view.name || "Autorun@" + getNextId$1();
	    var runSync = !opts.scheduler && !opts.delay;
	    var reaction;
	    if (runSync) {
	        // normal autorun
	        reaction = new Reaction$1(name, function () {
	            this.track(reactionRunner);
	        }, opts.onError, opts.requiresObservable);
	    }
	    else {
	        var scheduler_1 = createSchedulerFromOptions$1(opts);
	        // debounced autorun
	        var isScheduled_1 = false;
	        reaction = new Reaction$1(name, function () {
	            if (!isScheduled_1) {
	                isScheduled_1 = true;
	                scheduler_1(function () {
	                    isScheduled_1 = false;
	                    if (!reaction.isDisposed)
	                        reaction.track(reactionRunner);
	                });
	            }
	        }, opts.onError, opts.requiresObservable);
	    }
	    function reactionRunner() {
	        view(reaction);
	    }
	    reaction.schedule();
	    return reaction.getDisposer();
	}
	var run$2 = function (f) { return f(); };
	function createSchedulerFromOptions$1(opts) {
	    return opts.scheduler
	        ? opts.scheduler
	        : opts.delay
	            ? function (f) { return setTimeout(f, opts.delay); }
	            : run$2;
	}
	function reaction(expression, effect, opts) {
	    if (opts === void 0) { opts = EMPTY_OBJECT$2; }
	    if (process.env.NODE_ENV !== "production") {
	        invariant$1(typeof expression === "function", "First argument to reaction should be a function");
	        invariant$1(typeof opts === "object", "Third argument of reactions should be an object");
	    }
	    var name = opts.name || "Reaction@" + getNextId$1();
	    var effectAction = action$1(name, opts.onError ? wrapErrorHandler(opts.onError, effect) : effect);
	    var runSync = !opts.scheduler && !opts.delay;
	    var scheduler = createSchedulerFromOptions$1(opts);
	    var firstTime = true;
	    var isScheduled = false;
	    var value;
	    var equals = opts.compareStructural
	        ? comparer$1.structural
	        : opts.equals || comparer$1.default;
	    var r = new Reaction$1(name, function () {
	        if (firstTime || runSync) {
	            reactionRunner();
	        }
	        else if (!isScheduled) {
	            isScheduled = true;
	            scheduler(reactionRunner);
	        }
	    }, opts.onError, opts.requiresObservable);
	    function reactionRunner() {
	        isScheduled = false; // Q: move into reaction runner?
	        if (r.isDisposed)
	            return;
	        var changed = false;
	        r.track(function () {
	            var nextValue = expression(r);
	            changed = firstTime || !equals(value, nextValue);
	            value = nextValue;
	        });
	        if (firstTime && opts.fireImmediately)
	            effectAction(value, r);
	        if (!firstTime && changed === true)
	            effectAction(value, r);
	        if (firstTime)
	            firstTime = false;
	    }
	    r.schedule();
	    return r.getDisposer();
	}
	function wrapErrorHandler(errorHandler, baseFn) {
	    return function () {
	        try {
	            return baseFn.apply(this, arguments);
	        }
	        catch (e) {
	            errorHandler.call(this, e);
	        }
	    };
	}

	function onBecomeObserved$1(thing, arg2, arg3) {
	    return interceptHook$1("onBecomeObserved", thing, arg2, arg3);
	}
	function onBecomeUnobserved$1(thing, arg2, arg3) {
	    return interceptHook$1("onBecomeUnobserved", thing, arg2, arg3);
	}
	function interceptHook$1(hook, thing, arg2, arg3) {
	    var atom = typeof arg3 === "function" ? getAtom$1(thing, arg2) : getAtom$1(thing);
	    var cb = typeof arg3 === "function" ? arg3 : arg2;
	    var listenersKey = hook + "Listeners";
	    if (atom[listenersKey]) {
	        atom[listenersKey].add(cb);
	    }
	    else {
	        atom[listenersKey] = new Set([cb]);
	    }
	    var orig = atom[hook];
	    if (typeof orig !== "function")
	        return fail$1(process.env.NODE_ENV !== "production" && "Not an atom that can be (un)observed");
	    return function () {
	        var hookListeners = atom[listenersKey];
	        if (hookListeners) {
	            hookListeners.delete(cb);
	            if (hookListeners.size === 0) {
	                delete atom[listenersKey];
	            }
	        }
	    };
	}

	function extendObservable$1(target, properties, decorators, options) {
	    if (process.env.NODE_ENV !== "production") {
	        invariant$1(arguments.length >= 2 && arguments.length <= 4, "'extendObservable' expected 2-4 arguments");
	        invariant$1(typeof target === "object", "'extendObservable' expects an object as first argument");
	        invariant$1(!isObservableMap$1(target), "'extendObservable' should not be used on maps, use map.merge instead");
	    }
	    options = asCreateObservableOptions$1(options);
	    var defaultDecorator = getDefaultDecoratorFromObjectOptions$1(options);
	    initializeInstance$1(target); // Fixes #1740
	    asObservableObject$1(target, options.name, defaultDecorator.enhancer); // make sure object is observable, even without initial props
	    if (properties)
	        extendObservableObjectWithProperties$1(target, properties, decorators, defaultDecorator);
	    return target;
	}
	function getDefaultDecoratorFromObjectOptions$1(options) {
	    return options.defaultDecorator || (options.deep === false ? refDecorator$1 : deepDecorator$1);
	}
	function extendObservableObjectWithProperties$1(target, properties, decorators, defaultDecorator) {
	    var e_1, _a, e_2, _b;
	    if (process.env.NODE_ENV !== "production") {
	        invariant$1(!isObservable$1(properties), "Extending an object with another observable (object) is not supported. Please construct an explicit propertymap, using `toJS` if need. See issue #540");
	        if (decorators) {
	            var keys = getPlainObjectKeys$1(decorators);
	            try {
	                for (var keys_1 = __values$1(keys), keys_1_1 = keys_1.next(); !keys_1_1.done; keys_1_1 = keys_1.next()) {
	                    var key = keys_1_1.value;
	                    if (!(key in properties))
	                        fail$1("Trying to declare a decorator for unspecified property '" + stringifyKey$1(key) + "'");
	                }
	            }
	            catch (e_1_1) { e_1 = { error: e_1_1 }; }
	            finally {
	                try {
	                    if (keys_1_1 && !keys_1_1.done && (_a = keys_1.return)) _a.call(keys_1);
	                }
	                finally { if (e_1) throw e_1.error; }
	            }
	        }
	    }
	    startBatch$1();
	    try {
	        var keys = getPlainObjectKeys$1(properties);
	        try {
	            for (var keys_2 = __values$1(keys), keys_2_1 = keys_2.next(); !keys_2_1.done; keys_2_1 = keys_2.next()) {
	                var key = keys_2_1.value;
	                var descriptor = Object.getOwnPropertyDescriptor(properties, key);
	                if (process.env.NODE_ENV !== "production") {
	                    if (!isPlainObject$4(properties))
	                        fail$1("'extendObservabe' only accepts plain objects as second argument");
	                    if (isComputed$1(descriptor.value))
	                        fail$1("Passing a 'computed' as initial property value is no longer supported by extendObservable. Use a getter or decorator instead");
	                }
	                var decorator = decorators && key in decorators
	                    ? decorators[key]
	                    : descriptor.get
	                        ? computedDecorator$1
	                        : defaultDecorator;
	                if (process.env.NODE_ENV !== "production" && typeof decorator !== "function")
	                    fail$1("Not a valid decorator for '" + stringifyKey$1(key) + "', got: " + decorator);
	                var resultDescriptor = decorator(target, key, descriptor, true);
	                if (resultDescriptor // otherwise, assume already applied, due to `applyToInstance`
	                )
	                    Object.defineProperty(target, key, resultDescriptor);
	            }
	        }
	        catch (e_2_1) { e_2 = { error: e_2_1 }; }
	        finally {
	            try {
	                if (keys_2_1 && !keys_2_1.done && (_b = keys_2.return)) _b.call(keys_2);
	            }
	            finally { if (e_2) throw e_2.error; }
	        }
	    }
	    finally {
	        endBatch$1();
	    }
	}

	function getDependencyTree$1(thing, property) {
	    return nodeToDependencyTree$1(getAtom$1(thing, property));
	}
	function nodeToDependencyTree$1(node) {
	    var result = {
	        name: node.name
	    };
	    if (node.observing && node.observing.length > 0)
	        result.dependencies = unique$1(node.observing).map(nodeToDependencyTree$1);
	    return result;
	}

	function _isComputed$1(value, property) {
	    if (value === null || value === undefined)
	        return false;
	    if (property !== undefined) {
	        if (isObservableObject$1(value) === false)
	            return false;
	        if (!value[$mobx$1].values.has(property))
	            return false;
	        var atom = getAtom$1(value, property);
	        return isComputedValue$1(atom);
	    }
	    return isComputedValue$1(value);
	}
	function isComputed$1(value) {
	    if (arguments.length > 1)
	        return fail$1(process.env.NODE_ENV !== "production" &&
	            "isComputed expects only 1 argument. Use isObservableProp to inspect the observability of a property");
	    return _isComputed$1(value);
	}

	function _isObservable$1(value, property) {
	    if (value === null || value === undefined)
	        return false;
	    if (property !== undefined) {
	        if (process.env.NODE_ENV !== "production" &&
	            (isObservableMap$1(value) || isObservableArray$1(value)))
	            return fail$1("isObservable(object, propertyName) is not supported for arrays and maps. Use map.has or array.length instead.");
	        if (isObservableObject$1(value)) {
	            return value[$mobx$1].values.has(property);
	        }
	        return false;
	    }
	    // For first check, see #701
	    return (isObservableObject$1(value) ||
	        !!value[$mobx$1] ||
	        isAtom$1(value) ||
	        isReaction$1(value) ||
	        isComputedValue$1(value));
	}
	function isObservable$1(value) {
	    if (arguments.length !== 1)
	        fail$1(process.env.NODE_ENV !== "production" &&
	            "isObservable expects only 1 argument. Use isObservableProp to inspect the observability of a property");
	    return _isObservable$1(value);
	}
	function set$1(obj, key, value) {
	    if (arguments.length === 2 && !isObservableSet$1(obj)) {
	        startBatch$1();
	        var values_1 = key;
	        try {
	            for (var key_1 in values_1)
	                set$1(obj, key_1, values_1[key_1]);
	        }
	        finally {
	            endBatch$1();
	        }
	        return;
	    }
	    if (isObservableObject$1(obj)) {
	        var adm = obj[$mobx$1];
	        var existingObservable = adm.values.get(key);
	        if (existingObservable) {
	            adm.write(key, value);
	        }
	        else {
	            adm.addObservableProp(key, value, adm.defaultEnhancer);
	        }
	    }
	    else if (isObservableMap$1(obj)) {
	        obj.set(key, value);
	    }
	    else if (isObservableSet$1(obj)) {
	        obj.add(key);
	    }
	    else if (isObservableArray$1(obj)) {
	        if (typeof key !== "number")
	            key = parseInt(key, 10);
	        invariant$1(key >= 0, "Not a valid index: '" + key + "'");
	        startBatch$1();
	        if (key >= obj.length)
	            obj.length = key + 1;
	        obj[key] = value;
	        endBatch$1();
	    }
	    else {
	        return fail$1(process.env.NODE_ENV !== "production" &&
	            "'set()' can only be used on observable objects, arrays and maps");
	    }
	}

	function trace$1() {
	    var args = [];
	    for (var _i = 0; _i < arguments.length; _i++) {
	        args[_i] = arguments[_i];
	    }
	    var enterBreakPoint = false;
	    if (typeof args[args.length - 1] === "boolean")
	        enterBreakPoint = args.pop();
	    var derivation = getAtomFromArgs$1(args);
	    if (!derivation) {
	        return fail$1(process.env.NODE_ENV !== "production" &&
	            "'trace(break?)' can only be used inside a tracked computed value or a Reaction. Consider passing in the computed value or reaction explicitly");
	    }
	    if (derivation.isTracing === TraceMode$1.NONE) {
	        console.log("[mobx.trace] '" + derivation.name + "' tracing enabled");
	    }
	    derivation.isTracing = enterBreakPoint ? TraceMode$1.BREAK : TraceMode$1.LOG;
	}
	function getAtomFromArgs$1(args) {
	    switch (args.length) {
	        case 0:
	            return globalState$1.trackingDerivation;
	        case 1:
	            return getAtom$1(args[0]);
	        case 2:
	            return getAtom$1(args[0], args[1]);
	    }
	}

	/**
	 * During a transaction no views are updated until the end of the transaction.
	 * The transaction will be run synchronously nonetheless.
	 *
	 * @param action a function that updates some reactive state
	 * @returns any value that was returned by the 'action' parameter.
	 */
	function transaction$1(action, thisArg) {
	    if (thisArg === void 0) { thisArg = undefined; }
	    startBatch$1();
	    try {
	        return action.apply(thisArg);
	    }
	    finally {
	        endBatch$1();
	    }
	}

	function getAdm$1(target) {
	    return target[$mobx$1];
	}
	function isPropertyKey$1(val) {
	    return typeof val === "string" || typeof val === "number" || typeof val === "symbol";
	}
	// Optimization: we don't need the intermediate objects and could have a completely custom administration for DynamicObjects,
	// and skip either the internal values map, or the base object with its property descriptors!
	var objectProxyTraps$1 = {
	    has: function (target, name) {
	        if (name === $mobx$1 || name === "constructor" || name === mobxDidRunLazyInitializersSymbol$1)
	            return true;
	        var adm = getAdm$1(target);
	        // MWE: should `in` operator be reactive? If not, below code path will be faster / more memory efficient
	        // TODO: check performance stats!
	        // if (adm.values.get(name as string)) return true
	        if (isPropertyKey$1(name))
	            return adm.has(name);
	        return name in target;
	    },
	    get: function (target, name) {
	        if (name === $mobx$1 || name === "constructor" || name === mobxDidRunLazyInitializersSymbol$1)
	            return target[name];
	        var adm = getAdm$1(target);
	        var observable = adm.values.get(name);
	        if (observable instanceof Atom$1) {
	            var result = observable.get();
	            if (result === undefined) {
	                // This fixes #1796, because deleting a prop that has an
	                // undefined value won't retrigger a observer (no visible effect),
	                // the autorun wouldn't subscribe to future key changes (see also next comment)
	                adm.has(name);
	            }
	            return result;
	        }
	        // make sure we start listening to future keys
	        // note that we only do this here for optimization
	        if (isPropertyKey$1(name))
	            adm.has(name);
	        return target[name];
	    },
	    set: function (target, name, value) {
	        if (!isPropertyKey$1(name))
	            return false;
	        set$1(target, name, value);
	        return true;
	    },
	    deleteProperty: function (target, name) {
	        if (!isPropertyKey$1(name))
	            return false;
	        var adm = getAdm$1(target);
	        adm.remove(name);
	        return true;
	    },
	    ownKeys: function (target) {
	        var adm = getAdm$1(target);
	        adm.keysAtom.reportObserved();
	        return Reflect.ownKeys(target);
	    },
	    preventExtensions: function (target) {
	        fail$1("Dynamic observable objects cannot be frozen");
	        return false;
	    }
	};
	function createDynamicObservableObject$1(base) {
	    var proxy = new Proxy(base, objectProxyTraps$1);
	    base[$mobx$1].proxy = proxy;
	    return proxy;
	}

	function hasInterceptors$1(interceptable) {
	    return interceptable.interceptors !== undefined && interceptable.interceptors.length > 0;
	}
	function registerInterceptor$1(interceptable, handler) {
	    var interceptors = interceptable.interceptors || (interceptable.interceptors = []);
	    interceptors.push(handler);
	    return once$1(function () {
	        var idx = interceptors.indexOf(handler);
	        if (idx !== -1)
	            interceptors.splice(idx, 1);
	    });
	}
	function interceptChange$1(interceptable, change) {
	    var prevU = untrackedStart$1();
	    try {
	        // Interceptor can modify the array, copy it to avoid concurrent modification, see #1950
	        var interceptors = __spread$1((interceptable.interceptors || []));
	        for (var i = 0, l = interceptors.length; i < l; i++) {
	            change = interceptors[i](change);
	            invariant$1(!change || change.type, "Intercept handlers should return nothing or a change object");
	            if (!change)
	                break;
	        }
	        return change;
	    }
	    finally {
	        untrackedEnd$1(prevU);
	    }
	}

	function hasListeners$1(listenable) {
	    return listenable.changeListeners !== undefined && listenable.changeListeners.length > 0;
	}
	function registerListener$1(listenable, handler) {
	    var listeners = listenable.changeListeners || (listenable.changeListeners = []);
	    listeners.push(handler);
	    return once$1(function () {
	        var idx = listeners.indexOf(handler);
	        if (idx !== -1)
	            listeners.splice(idx, 1);
	    });
	}
	function notifyListeners$1(listenable, change) {
	    var prevU = untrackedStart$1();
	    var listeners = listenable.changeListeners;
	    if (!listeners)
	        return;
	    listeners = listeners.slice();
	    for (var i = 0, l = listeners.length; i < l; i++) {
	        listeners[i](change);
	    }
	    untrackedEnd$1(prevU);
	}

	var MAX_SPLICE_SIZE$1 = 10000; // See e.g. https://github.com/mobxjs/mobx/issues/859
	var arrayTraps$1 = {
	    get: function (target, name) {
	        if (name === $mobx$1)
	            return target[$mobx$1];
	        if (name === "length")
	            return target[$mobx$1].getArrayLength();
	        if (typeof name === "number") {
	            return arrayExtensions$1.get.call(target, name);
	        }
	        if (typeof name === "string" && !isNaN(name)) {
	            return arrayExtensions$1.get.call(target, parseInt(name));
	        }
	        if (arrayExtensions$1.hasOwnProperty(name)) {
	            return arrayExtensions$1[name];
	        }
	        return target[name];
	    },
	    set: function (target, name, value) {
	        if (name === "length") {
	            target[$mobx$1].setArrayLength(value);
	        }
	        if (typeof name === "number") {
	            arrayExtensions$1.set.call(target, name, value);
	        }
	        if (typeof name === "symbol" || isNaN(name)) {
	            target[name] = value;
	        }
	        else {
	            // numeric string
	            arrayExtensions$1.set.call(target, parseInt(name), value);
	        }
	        return true;
	    },
	    preventExtensions: function (target) {
	        fail$1("Observable arrays cannot be frozen");
	        return false;
	    }
	};
	function createObservableArray$1(initialValues, enhancer, name, owned) {
	    if (name === void 0) { name = "ObservableArray@" + getNextId$1(); }
	    if (owned === void 0) { owned = false; }
	    var adm = new ObservableArrayAdministration$1(name, enhancer, owned);
	    addHiddenFinalProp$1(adm.values, $mobx$1, adm);
	    var proxy = new Proxy(adm.values, arrayTraps$1);
	    adm.proxy = proxy;
	    if (initialValues && initialValues.length) {
	        var prev = allowStateChangesStart$1(true);
	        adm.spliceWithArray(0, 0, initialValues);
	        allowStateChangesEnd$1(prev);
	    }
	    return proxy;
	}
	var ObservableArrayAdministration$1 = /** @class */ (function () {
	    function ObservableArrayAdministration(name, enhancer, owned) {
	        this.owned = owned;
	        this.values = [];
	        this.proxy = undefined;
	        this.lastKnownLength = 0;
	        this.atom = new Atom$1(name || "ObservableArray@" + getNextId$1());
	        this.enhancer = function (newV, oldV) { return enhancer(newV, oldV, name + "[..]"); };
	    }
	    ObservableArrayAdministration.prototype.dehanceValue = function (value) {
	        if (this.dehancer !== undefined)
	            return this.dehancer(value);
	        return value;
	    };
	    ObservableArrayAdministration.prototype.dehanceValues = function (values) {
	        if (this.dehancer !== undefined && values.length > 0)
	            return values.map(this.dehancer);
	        return values;
	    };
	    ObservableArrayAdministration.prototype.intercept = function (handler) {
	        return registerInterceptor$1(this, handler);
	    };
	    ObservableArrayAdministration.prototype.observe = function (listener, fireImmediately) {
	        if (fireImmediately === void 0) { fireImmediately = false; }
	        if (fireImmediately) {
	            listener({
	                object: this.proxy,
	                type: "splice",
	                index: 0,
	                added: this.values.slice(),
	                addedCount: this.values.length,
	                removed: [],
	                removedCount: 0
	            });
	        }
	        return registerListener$1(this, listener);
	    };
	    ObservableArrayAdministration.prototype.getArrayLength = function () {
	        this.atom.reportObserved();
	        return this.values.length;
	    };
	    ObservableArrayAdministration.prototype.setArrayLength = function (newLength) {
	        if (typeof newLength !== "number" || newLength < 0)
	            throw new Error("[mobx.array] Out of range: " + newLength);
	        var currentLength = this.values.length;
	        if (newLength === currentLength)
	            return;
	        else if (newLength > currentLength) {
	            var newItems = new Array(newLength - currentLength);
	            for (var i = 0; i < newLength - currentLength; i++)
	                newItems[i] = undefined; // No Array.fill everywhere...
	            this.spliceWithArray(currentLength, 0, newItems);
	        }
	        else
	            this.spliceWithArray(newLength, currentLength - newLength);
	    };
	    ObservableArrayAdministration.prototype.updateArrayLength = function (oldLength, delta) {
	        if (oldLength !== this.lastKnownLength)
	            throw new Error("[mobx] Modification exception: the internal structure of an observable array was changed.");
	        this.lastKnownLength += delta;
	    };
	    ObservableArrayAdministration.prototype.spliceWithArray = function (index, deleteCount, newItems) {
	        var _this = this;
	        checkIfStateModificationsAreAllowed$1(this.atom);
	        var length = this.values.length;
	        if (index === undefined)
	            index = 0;
	        else if (index > length)
	            index = length;
	        else if (index < 0)
	            index = Math.max(0, length + index);
	        if (arguments.length === 1)
	            deleteCount = length - index;
	        else if (deleteCount === undefined || deleteCount === null)
	            deleteCount = 0;
	        else
	            deleteCount = Math.max(0, Math.min(deleteCount, length - index));
	        if (newItems === undefined)
	            newItems = EMPTY_ARRAY$1;
	        if (hasInterceptors$1(this)) {
	            var change = interceptChange$1(this, {
	                object: this.proxy,
	                type: "splice",
	                index: index,
	                removedCount: deleteCount,
	                added: newItems
	            });
	            if (!change)
	                return EMPTY_ARRAY$1;
	            deleteCount = change.removedCount;
	            newItems = change.added;
	        }
	        newItems = newItems.length === 0 ? newItems : newItems.map(function (v) { return _this.enhancer(v, undefined); });
	        if (process.env.NODE_ENV !== "production") {
	            var lengthDelta = newItems.length - deleteCount;
	            this.updateArrayLength(length, lengthDelta); // checks if internal array wasn't modified
	        }
	        var res = this.spliceItemsIntoValues(index, deleteCount, newItems);
	        if (deleteCount !== 0 || newItems.length !== 0)
	            this.notifyArraySplice(index, newItems, res);
	        return this.dehanceValues(res);
	    };
	    ObservableArrayAdministration.prototype.spliceItemsIntoValues = function (index, deleteCount, newItems) {
	        var _a;
	        if (newItems.length < MAX_SPLICE_SIZE$1) {
	            return (_a = this.values).splice.apply(_a, __spread$1([index, deleteCount], newItems));
	        }
	        else {
	            var res = this.values.slice(index, index + deleteCount);
	            this.values = this.values
	                .slice(0, index)
	                .concat(newItems, this.values.slice(index + deleteCount));
	            return res;
	        }
	    };
	    ObservableArrayAdministration.prototype.notifyArrayChildUpdate = function (index, newValue, oldValue) {
	        var notifySpy = !this.owned && isSpyEnabled$1();
	        var notify = hasListeners$1(this);
	        var change = notify || notifySpy
	            ? {
	                object: this.proxy,
	                type: "update",
	                index: index,
	                newValue: newValue,
	                oldValue: oldValue
	            }
	            : null;
	        // The reason why this is on right hand side here (and not above), is this way the uglifier will drop it, but it won't
	        // cause any runtime overhead in development mode without NODE_ENV set, unless spying is enabled
	        if (notifySpy && process.env.NODE_ENV !== "production")
	            spyReportStart$1(__assign$1(__assign$1({}, change), { name: this.atom.name }));
	        this.atom.reportChanged();
	        if (notify)
	            notifyListeners$1(this, change);
	        if (notifySpy && process.env.NODE_ENV !== "production")
	            spyReportEnd$1();
	    };
	    ObservableArrayAdministration.prototype.notifyArraySplice = function (index, added, removed) {
	        var notifySpy = !this.owned && isSpyEnabled$1();
	        var notify = hasListeners$1(this);
	        var change = notify || notifySpy
	            ? {
	                object: this.proxy,
	                type: "splice",
	                index: index,
	                removed: removed,
	                added: added,
	                removedCount: removed.length,
	                addedCount: added.length
	            }
	            : null;
	        if (notifySpy && process.env.NODE_ENV !== "production")
	            spyReportStart$1(__assign$1(__assign$1({}, change), { name: this.atom.name }));
	        this.atom.reportChanged();
	        // conform: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/observe
	        if (notify)
	            notifyListeners$1(this, change);
	        if (notifySpy && process.env.NODE_ENV !== "production")
	            spyReportEnd$1();
	    };
	    return ObservableArrayAdministration;
	}());
	var arrayExtensions$1 = {
	    intercept: function (handler) {
	        return this[$mobx$1].intercept(handler);
	    },
	    observe: function (listener, fireImmediately) {
	        if (fireImmediately === void 0) { fireImmediately = false; }
	        var adm = this[$mobx$1];
	        return adm.observe(listener, fireImmediately);
	    },
	    clear: function () {
	        return this.splice(0);
	    },
	    replace: function (newItems) {
	        var adm = this[$mobx$1];
	        return adm.spliceWithArray(0, adm.values.length, newItems);
	    },
	    /**
	     * Converts this array back to a (shallow) javascript structure.
	     * For a deep clone use mobx.toJS
	     */
	    toJS: function () {
	        return this.slice();
	    },
	    toJSON: function () {
	        // Used by JSON.stringify
	        return this.toJS();
	    },
	    /*
	     * functions that do alter the internal structure of the array, (based on lib.es6.d.ts)
	     * since these functions alter the inner structure of the array, the have side effects.
	     * Because the have side effects, they should not be used in computed function,
	     * and for that reason the do not call dependencyState.notifyObserved
	     */
	    splice: function (index, deleteCount) {
	        var newItems = [];
	        for (var _i = 2; _i < arguments.length; _i++) {
	            newItems[_i - 2] = arguments[_i];
	        }
	        var adm = this[$mobx$1];
	        switch (arguments.length) {
	            case 0:
	                return [];
	            case 1:
	                return adm.spliceWithArray(index);
	            case 2:
	                return adm.spliceWithArray(index, deleteCount);
	        }
	        return adm.spliceWithArray(index, deleteCount, newItems);
	    },
	    spliceWithArray: function (index, deleteCount, newItems) {
	        var adm = this[$mobx$1];
	        return adm.spliceWithArray(index, deleteCount, newItems);
	    },
	    push: function () {
	        var items = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            items[_i] = arguments[_i];
	        }
	        var adm = this[$mobx$1];
	        adm.spliceWithArray(adm.values.length, 0, items);
	        return adm.values.length;
	    },
	    pop: function () {
	        return this.splice(Math.max(this[$mobx$1].values.length - 1, 0), 1)[0];
	    },
	    shift: function () {
	        return this.splice(0, 1)[0];
	    },
	    unshift: function () {
	        var items = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            items[_i] = arguments[_i];
	        }
	        var adm = this[$mobx$1];
	        adm.spliceWithArray(0, 0, items);
	        return adm.values.length;
	    },
	    reverse: function () {
	        // reverse by default mutates in place before returning the result
	        // which makes it both a 'derivation' and a 'mutation'.
	        // so we deviate from the default and just make it an dervitation
	        if (process.env.NODE_ENV !== "production") {
	            console.warn("[mobx] `observableArray.reverse()` will not update the array in place. Use `observableArray.slice().reverse()` to suppress this warning and perform the operation on a copy, or `observableArray.replace(observableArray.slice().reverse())` to reverse & update in place");
	        }
	        var clone = this.slice();
	        return clone.reverse.apply(clone, arguments);
	    },
	    sort: function (compareFn) {
	        // sort by default mutates in place before returning the result
	        // which goes against all good practices. Let's not change the array in place!
	        if (process.env.NODE_ENV !== "production") {
	            console.warn("[mobx] `observableArray.sort()` will not update the array in place. Use `observableArray.slice().sort()` to suppress this warning and perform the operation on a copy, or `observableArray.replace(observableArray.slice().sort())` to sort & update in place");
	        }
	        var clone = this.slice();
	        return clone.sort.apply(clone, arguments);
	    },
	    remove: function (value) {
	        var adm = this[$mobx$1];
	        var idx = adm.dehanceValues(adm.values).indexOf(value);
	        if (idx > -1) {
	            this.splice(idx, 1);
	            return true;
	        }
	        return false;
	    },
	    get: function (index) {
	        var adm = this[$mobx$1];
	        if (adm) {
	            if (index < adm.values.length) {
	                adm.atom.reportObserved();
	                return adm.dehanceValue(adm.values[index]);
	            }
	            console.warn("[mobx.array] Attempt to read an array index (" + index + ") that is out of bounds (" + adm.values.length + "). Please check length first. Out of bound indices will not be tracked by MobX");
	        }
	        return undefined;
	    },
	    set: function (index, newValue) {
	        var adm = this[$mobx$1];
	        var values = adm.values;
	        if (index < values.length) {
	            // update at index in range
	            checkIfStateModificationsAreAllowed$1(adm.atom);
	            var oldValue = values[index];
	            if (hasInterceptors$1(adm)) {
	                var change = interceptChange$1(adm, {
	                    type: "update",
	                    object: adm.proxy,
	                    index: index,
	                    newValue: newValue
	                });
	                if (!change)
	                    return;
	                newValue = change.newValue;
	            }
	            newValue = adm.enhancer(newValue, oldValue);
	            var changed = newValue !== oldValue;
	            if (changed) {
	                values[index] = newValue;
	                adm.notifyArrayChildUpdate(index, newValue, oldValue);
	            }
	        }
	        else if (index === values.length) {
	            // add a new item
	            adm.spliceWithArray(index, 0, [newValue]);
	        }
	        else {
	            // out of bounds
	            throw new Error("[mobx.array] Index out of bounds, " + index + " is larger than " + values.length);
	        }
	    }
	};
	[
	    "concat",
	    "every",
	    "filter",
	    "forEach",
	    "indexOf",
	    "join",
	    "lastIndexOf",
	    "map",
	    "reduce",
	    "reduceRight",
	    "slice",
	    "some",
	    "toString",
	    "toLocaleString"
	].forEach(function (funcName) {
	    arrayExtensions$1[funcName] = function () {
	        var adm = this[$mobx$1];
	        adm.atom.reportObserved();
	        var res = adm.dehanceValues(adm.values);
	        return res[funcName].apply(res, arguments);
	    };
	});
	var isObservableArrayAdministration$1 = createInstanceofPredicate$1("ObservableArrayAdministration", ObservableArrayAdministration$1);
	function isObservableArray$1(thing) {
	    return isObject$2(thing) && isObservableArrayAdministration$1(thing[$mobx$1]);
	}

	var _a$2;
	var ObservableMapMarker$1 = {};
	// just extend Map? See also https://gist.github.com/nestharus/13b4d74f2ef4a2f4357dbd3fc23c1e54
	// But: https://github.com/mobxjs/mobx/issues/1556
	var ObservableMap$1 = /** @class */ (function () {
	    function ObservableMap(initialData, enhancer, name) {
	        if (enhancer === void 0) { enhancer = deepEnhancer$1; }
	        if (name === void 0) { name = "ObservableMap@" + getNextId$1(); }
	        this.enhancer = enhancer;
	        this.name = name;
	        this[_a$2] = ObservableMapMarker$1;
	        this._keysAtom = createAtom$1(this.name + ".keys()");
	        this[Symbol.toStringTag] = "Map";
	        if (typeof Map !== "function") {
	            throw new Error("mobx.map requires Map polyfill for the current browser. Check babel-polyfill or core-js/es6/map.js");
	        }
	        this._data = new Map();
	        this._hasMap = new Map();
	        this.merge(initialData);
	    }
	    ObservableMap.prototype._has = function (key) {
	        return this._data.has(key);
	    };
	    ObservableMap.prototype.has = function (key) {
	        var _this = this;
	        if (!globalState$1.trackingDerivation)
	            return this._has(key);
	        var entry = this._hasMap.get(key);
	        if (!entry) {
	            // todo: replace with atom (breaking change)
	            var newEntry = (entry = new ObservableValue$1(this._has(key), referenceEnhancer$1, this.name + "." + stringifyKey$1(key) + "?", false));
	            this._hasMap.set(key, newEntry);
	            onBecomeUnobserved$1(newEntry, function () { return _this._hasMap.delete(key); });
	        }
	        return entry.get();
	    };
	    ObservableMap.prototype.set = function (key, value) {
	        var hasKey = this._has(key);
	        if (hasInterceptors$1(this)) {
	            var change = interceptChange$1(this, {
	                type: hasKey ? "update" : "add",
	                object: this,
	                newValue: value,
	                name: key
	            });
	            if (!change)
	                return this;
	            value = change.newValue;
	        }
	        if (hasKey) {
	            this._updateValue(key, value);
	        }
	        else {
	            this._addValue(key, value);
	        }
	        return this;
	    };
	    ObservableMap.prototype.delete = function (key) {
	        var _this = this;
	        if (hasInterceptors$1(this)) {
	            var change = interceptChange$1(this, {
	                type: "delete",
	                object: this,
	                name: key
	            });
	            if (!change)
	                return false;
	        }
	        if (this._has(key)) {
	            var notifySpy = isSpyEnabled$1();
	            var notify = hasListeners$1(this);
	            var change = notify || notifySpy
	                ? {
	                    type: "delete",
	                    object: this,
	                    oldValue: this._data.get(key).value,
	                    name: key
	                }
	                : null;
	            if (notifySpy && process.env.NODE_ENV !== "production")
	                spyReportStart$1(__assign$1(__assign$1({}, change), { name: this.name, key: key }));
	            transaction$1(function () {
	                _this._keysAtom.reportChanged();
	                _this._updateHasMapEntry(key, false);
	                var observable = _this._data.get(key);
	                observable.setNewValue(undefined);
	                _this._data.delete(key);
	            });
	            if (notify)
	                notifyListeners$1(this, change);
	            if (notifySpy && process.env.NODE_ENV !== "production")
	                spyReportEnd$1();
	            return true;
	        }
	        return false;
	    };
	    ObservableMap.prototype._updateHasMapEntry = function (key, value) {
	        var entry = this._hasMap.get(key);
	        if (entry) {
	            entry.setNewValue(value);
	        }
	    };
	    ObservableMap.prototype._updateValue = function (key, newValue) {
	        var observable = this._data.get(key);
	        newValue = observable.prepareNewValue(newValue);
	        if (newValue !== globalState$1.UNCHANGED) {
	            var notifySpy = isSpyEnabled$1();
	            var notify = hasListeners$1(this);
	            var change = notify || notifySpy
	                ? {
	                    type: "update",
	                    object: this,
	                    oldValue: observable.value,
	                    name: key,
	                    newValue: newValue
	                }
	                : null;
	            if (notifySpy && process.env.NODE_ENV !== "production")
	                spyReportStart$1(__assign$1(__assign$1({}, change), { name: this.name, key: key }));
	            observable.setNewValue(newValue);
	            if (notify)
	                notifyListeners$1(this, change);
	            if (notifySpy && process.env.NODE_ENV !== "production")
	                spyReportEnd$1();
	        }
	    };
	    ObservableMap.prototype._addValue = function (key, newValue) {
	        var _this = this;
	        checkIfStateModificationsAreAllowed$1(this._keysAtom);
	        transaction$1(function () {
	            var observable = new ObservableValue$1(newValue, _this.enhancer, _this.name + "." + stringifyKey$1(key), false);
	            _this._data.set(key, observable);
	            newValue = observable.value; // value might have been changed
	            _this._updateHasMapEntry(key, true);
	            _this._keysAtom.reportChanged();
	        });
	        var notifySpy = isSpyEnabled$1();
	        var notify = hasListeners$1(this);
	        var change = notify || notifySpy
	            ? {
	                type: "add",
	                object: this,
	                name: key,
	                newValue: newValue
	            }
	            : null;
	        if (notifySpy && process.env.NODE_ENV !== "production")
	            spyReportStart$1(__assign$1(__assign$1({}, change), { name: this.name, key: key }));
	        if (notify)
	            notifyListeners$1(this, change);
	        if (notifySpy && process.env.NODE_ENV !== "production")
	            spyReportEnd$1();
	    };
	    ObservableMap.prototype.get = function (key) {
	        if (this.has(key))
	            return this.dehanceValue(this._data.get(key).get());
	        return this.dehanceValue(undefined);
	    };
	    ObservableMap.prototype.dehanceValue = function (value) {
	        if (this.dehancer !== undefined) {
	            return this.dehancer(value);
	        }
	        return value;
	    };
	    ObservableMap.prototype.keys = function () {
	        this._keysAtom.reportObserved();
	        return this._data.keys();
	    };
	    ObservableMap.prototype.values = function () {
	        var self = this;
	        var nextIndex = 0;
	        var keys = Array.from(this.keys());
	        return makeIterable$1({
	            next: function () {
	                return nextIndex < keys.length
	                    ? { value: self.get(keys[nextIndex++]), done: false }
	                    : { done: true };
	            }
	        });
	    };
	    ObservableMap.prototype.entries = function () {
	        var self = this;
	        var nextIndex = 0;
	        var keys = Array.from(this.keys());
	        return makeIterable$1({
	            next: function () {
	                if (nextIndex < keys.length) {
	                    var key = keys[nextIndex++];
	                    return {
	                        value: [key, self.get(key)],
	                        done: false
	                    };
	                }
	                return { done: true };
	            }
	        });
	    };
	    ObservableMap.prototype[(_a$2 = $mobx$1, Symbol.iterator)] = function () {
	        return this.entries();
	    };
	    ObservableMap.prototype.forEach = function (callback, thisArg) {
	        var e_1, _b;
	        try {
	            for (var _c = __values$1(this), _d = _c.next(); !_d.done; _d = _c.next()) {
	                var _e = __read$1(_d.value, 2), key = _e[0], value = _e[1];
	                callback.call(thisArg, value, key, this);
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	    };
	    /** Merge another object into this object, returns this. */
	    ObservableMap.prototype.merge = function (other) {
	        var _this = this;
	        if (isObservableMap$1(other)) {
	            other = other.toJS();
	        }
	        transaction$1(function () {
	            if (isPlainObject$4(other))
	                getPlainObjectKeys$1(other).forEach(function (key) { return _this.set(key, other[key]); });
	            else if (Array.isArray(other))
	                other.forEach(function (_b) {
	                    var _c = __read$1(_b, 2), key = _c[0], value = _c[1];
	                    return _this.set(key, value);
	                });
	            else if (isES6Map$1(other)) {
	                if (other.constructor !== Map)
	                    fail$1("Cannot initialize from classes that inherit from Map: " + other.constructor.name); // prettier-ignore
	                other.forEach(function (value, key) { return _this.set(key, value); });
	            }
	            else if (other !== null && other !== undefined)
	                fail$1("Cannot initialize map from " + other);
	        });
	        return this;
	    };
	    ObservableMap.prototype.clear = function () {
	        var _this = this;
	        transaction$1(function () {
	            untracked$1(function () {
	                var e_2, _b;
	                try {
	                    for (var _c = __values$1(_this.keys()), _d = _c.next(); !_d.done; _d = _c.next()) {
	                        var key = _d.value;
	                        _this.delete(key);
	                    }
	                }
	                catch (e_2_1) { e_2 = { error: e_2_1 }; }
	                finally {
	                    try {
	                        if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
	                    }
	                    finally { if (e_2) throw e_2.error; }
	                }
	            });
	        });
	    };
	    ObservableMap.prototype.replace = function (values) {
	        var _this = this;
	        transaction$1(function () {
	            // grab all the keys that are present in the new map but not present in the current map
	            // and delete them from the map, then merge the new map
	            // this will cause reactions only on changed values
	            var newKeys = getMapLikeKeys$1(values);
	            var oldKeys = Array.from(_this.keys());
	            var missingKeys = oldKeys.filter(function (k) { return newKeys.indexOf(k) === -1; });
	            missingKeys.forEach(function (k) { return _this.delete(k); });
	            _this.merge(values);
	        });
	        return this;
	    };
	    Object.defineProperty(ObservableMap.prototype, "size", {
	        get: function () {
	            this._keysAtom.reportObserved();
	            return this._data.size;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    /**
	     * Returns a plain object that represents this map.
	     * Note that all the keys being stringified.
	     * If there are duplicating keys after converting them to strings, behaviour is undetermined.
	     */
	    ObservableMap.prototype.toPOJO = function () {
	        var e_3, _b;
	        var res = {};
	        try {
	            for (var _c = __values$1(this), _d = _c.next(); !_d.done; _d = _c.next()) {
	                var _e = __read$1(_d.value, 2), key = _e[0], value = _e[1];
	                // We lie about symbol key types due to https://github.com/Microsoft/TypeScript/issues/1863
	                res[typeof key === "symbol" ? key : stringifyKey$1(key)] = value;
	            }
	        }
	        catch (e_3_1) { e_3 = { error: e_3_1 }; }
	        finally {
	            try {
	                if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
	            }
	            finally { if (e_3) throw e_3.error; }
	        }
	        return res;
	    };
	    /**
	     * Returns a shallow non observable object clone of this map.
	     * Note that the values migth still be observable. For a deep clone use mobx.toJS.
	     */
	    ObservableMap.prototype.toJS = function () {
	        return new Map(this);
	    };
	    ObservableMap.prototype.toJSON = function () {
	        // Used by JSON.stringify
	        return this.toPOJO();
	    };
	    ObservableMap.prototype.toString = function () {
	        var _this = this;
	        return (this.name +
	            "[{ " +
	            Array.from(this.keys())
	                .map(function (key) { return stringifyKey$1(key) + ": " + ("" + _this.get(key)); })
	                .join(", ") +
	            " }]");
	    };
	    /**
	     * Observes this object. Triggers for the events 'add', 'update' and 'delete'.
	     * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe
	     * for callback details
	     */
	    ObservableMap.prototype.observe = function (listener, fireImmediately) {
	        process.env.NODE_ENV !== "production" &&
	            invariant$1(fireImmediately !== true, "`observe` doesn't support fireImmediately=true in combination with maps.");
	        return registerListener$1(this, listener);
	    };
	    ObservableMap.prototype.intercept = function (handler) {
	        return registerInterceptor$1(this, handler);
	    };
	    return ObservableMap;
	}());
	/* 'var' fixes small-build issue */
	var isObservableMap$1 = createInstanceofPredicate$1("ObservableMap", ObservableMap$1);

	var _a$1$1;
	var ObservableSetMarker$1 = {};
	var ObservableSet$1 = /** @class */ (function () {
	    function ObservableSet(initialData, enhancer, name) {
	        if (enhancer === void 0) { enhancer = deepEnhancer$1; }
	        if (name === void 0) { name = "ObservableSet@" + getNextId$1(); }
	        this.name = name;
	        this[_a$1$1] = ObservableSetMarker$1;
	        this._data = new Set();
	        this._atom = createAtom$1(this.name);
	        this[Symbol.toStringTag] = "Set";
	        if (typeof Set !== "function") {
	            throw new Error("mobx.set requires Set polyfill for the current browser. Check babel-polyfill or core-js/es6/set.js");
	        }
	        this.enhancer = function (newV, oldV) { return enhancer(newV, oldV, name); };
	        if (initialData) {
	            this.replace(initialData);
	        }
	    }
	    ObservableSet.prototype.dehanceValue = function (value) {
	        if (this.dehancer !== undefined) {
	            return this.dehancer(value);
	        }
	        return value;
	    };
	    ObservableSet.prototype.clear = function () {
	        var _this = this;
	        transaction$1(function () {
	            untracked$1(function () {
	                var e_1, _b;
	                try {
	                    for (var _c = __values$1(_this._data.values()), _d = _c.next(); !_d.done; _d = _c.next()) {
	                        var value = _d.value;
	                        _this.delete(value);
	                    }
	                }
	                catch (e_1_1) { e_1 = { error: e_1_1 }; }
	                finally {
	                    try {
	                        if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
	                    }
	                    finally { if (e_1) throw e_1.error; }
	                }
	            });
	        });
	    };
	    ObservableSet.prototype.forEach = function (callbackFn, thisArg) {
	        var e_2, _b;
	        try {
	            for (var _c = __values$1(this), _d = _c.next(); !_d.done; _d = _c.next()) {
	                var value = _d.value;
	                callbackFn.call(thisArg, value, value, this);
	            }
	        }
	        catch (e_2_1) { e_2 = { error: e_2_1 }; }
	        finally {
	            try {
	                if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
	            }
	            finally { if (e_2) throw e_2.error; }
	        }
	    };
	    Object.defineProperty(ObservableSet.prototype, "size", {
	        get: function () {
	            this._atom.reportObserved();
	            return this._data.size;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    ObservableSet.prototype.add = function (value) {
	        var _this = this;
	        checkIfStateModificationsAreAllowed$1(this._atom);
	        if (hasInterceptors$1(this)) {
	            var change = interceptChange$1(this, {
	                type: "add",
	                object: this,
	                newValue: value
	            });
	            if (!change)
	                return this;
	            // TODO: ideally, value = change.value would be done here, so that values can be
	            // changed by interceptor. Same applies for other Set and Map api's.
	        }
	        if (!this.has(value)) {
	            transaction$1(function () {
	                _this._data.add(_this.enhancer(value, undefined));
	                _this._atom.reportChanged();
	            });
	            var notifySpy = isSpyEnabled$1();
	            var notify = hasListeners$1(this);
	            var change = notify || notifySpy
	                ? {
	                    type: "add",
	                    object: this,
	                    newValue: value
	                }
	                : null;
	            if (notifySpy && process.env.NODE_ENV !== "production")
	                spyReportStart$1(change);
	            if (notify)
	                notifyListeners$1(this, change);
	            if (notifySpy && process.env.NODE_ENV !== "production")
	                spyReportEnd$1();
	        }
	        return this;
	    };
	    ObservableSet.prototype.delete = function (value) {
	        var _this = this;
	        if (hasInterceptors$1(this)) {
	            var change = interceptChange$1(this, {
	                type: "delete",
	                object: this,
	                oldValue: value
	            });
	            if (!change)
	                return false;
	        }
	        if (this.has(value)) {
	            var notifySpy = isSpyEnabled$1();
	            var notify = hasListeners$1(this);
	            var change = notify || notifySpy
	                ? {
	                    type: "delete",
	                    object: this,
	                    oldValue: value
	                }
	                : null;
	            if (notifySpy && process.env.NODE_ENV !== "production")
	                spyReportStart$1(__assign$1(__assign$1({}, change), { name: this.name }));
	            transaction$1(function () {
	                _this._atom.reportChanged();
	                _this._data.delete(value);
	            });
	            if (notify)
	                notifyListeners$1(this, change);
	            if (notifySpy && process.env.NODE_ENV !== "production")
	                spyReportEnd$1();
	            return true;
	        }
	        return false;
	    };
	    ObservableSet.prototype.has = function (value) {
	        this._atom.reportObserved();
	        return this._data.has(this.dehanceValue(value));
	    };
	    ObservableSet.prototype.entries = function () {
	        var nextIndex = 0;
	        var keys = Array.from(this.keys());
	        var values = Array.from(this.values());
	        return makeIterable$1({
	            next: function () {
	                var index = nextIndex;
	                nextIndex += 1;
	                return index < values.length
	                    ? { value: [keys[index], values[index]], done: false }
	                    : { done: true };
	            }
	        });
	    };
	    ObservableSet.prototype.keys = function () {
	        return this.values();
	    };
	    ObservableSet.prototype.values = function () {
	        this._atom.reportObserved();
	        var self = this;
	        var nextIndex = 0;
	        var observableValues = Array.from(this._data.values());
	        return makeIterable$1({
	            next: function () {
	                return nextIndex < observableValues.length
	                    ? { value: self.dehanceValue(observableValues[nextIndex++]), done: false }
	                    : { done: true };
	            }
	        });
	    };
	    ObservableSet.prototype.replace = function (other) {
	        var _this = this;
	        if (isObservableSet$1(other)) {
	            other = other.toJS();
	        }
	        transaction$1(function () {
	            if (Array.isArray(other)) {
	                _this.clear();
	                other.forEach(function (value) { return _this.add(value); });
	            }
	            else if (isES6Set$1(other)) {
	                _this.clear();
	                other.forEach(function (value) { return _this.add(value); });
	            }
	            else if (other !== null && other !== undefined) {
	                fail$1("Cannot initialize set from " + other);
	            }
	        });
	        return this;
	    };
	    ObservableSet.prototype.observe = function (listener, fireImmediately) {
	        // TODO 'fireImmediately' can be true?
	        process.env.NODE_ENV !== "production" &&
	            invariant$1(fireImmediately !== true, "`observe` doesn't support fireImmediately=true in combination with sets.");
	        return registerListener$1(this, listener);
	    };
	    ObservableSet.prototype.intercept = function (handler) {
	        return registerInterceptor$1(this, handler);
	    };
	    ObservableSet.prototype.toJS = function () {
	        return new Set(this);
	    };
	    ObservableSet.prototype.toString = function () {
	        return this.name + "[ " + Array.from(this).join(", ") + " ]";
	    };
	    ObservableSet.prototype[(_a$1$1 = $mobx$1, Symbol.iterator)] = function () {
	        return this.values();
	    };
	    return ObservableSet;
	}());
	var isObservableSet$1 = createInstanceofPredicate$1("ObservableSet", ObservableSet$1);

	var ObservableObjectAdministration$1 = /** @class */ (function () {
	    function ObservableObjectAdministration(target, values, name, defaultEnhancer) {
	        if (values === void 0) { values = new Map(); }
	        this.target = target;
	        this.values = values;
	        this.name = name;
	        this.defaultEnhancer = defaultEnhancer;
	        this.keysAtom = new Atom$1(name + ".keys");
	    }
	    ObservableObjectAdministration.prototype.read = function (key) {
	        return this.values.get(key).get();
	    };
	    ObservableObjectAdministration.prototype.write = function (key, newValue) {
	        var instance = this.target;
	        var observable = this.values.get(key);
	        if (observable instanceof ComputedValue$1) {
	            observable.set(newValue);
	            return;
	        }
	        // intercept
	        if (hasInterceptors$1(this)) {
	            var change = interceptChange$1(this, {
	                type: "update",
	                object: this.proxy || instance,
	                name: key,
	                newValue: newValue
	            });
	            if (!change)
	                return;
	            newValue = change.newValue;
	        }
	        newValue = observable.prepareNewValue(newValue);
	        // notify spy & observers
	        if (newValue !== globalState$1.UNCHANGED) {
	            var notify = hasListeners$1(this);
	            var notifySpy = isSpyEnabled$1();
	            var change = notify || notifySpy
	                ? {
	                    type: "update",
	                    object: this.proxy || instance,
	                    oldValue: observable.value,
	                    name: key,
	                    newValue: newValue
	                }
	                : null;
	            if (notifySpy && process.env.NODE_ENV !== "production")
	                spyReportStart$1(__assign$1(__assign$1({}, change), { name: this.name, key: key }));
	            observable.setNewValue(newValue);
	            if (notify)
	                notifyListeners$1(this, change);
	            if (notifySpy && process.env.NODE_ENV !== "production")
	                spyReportEnd$1();
	        }
	    };
	    ObservableObjectAdministration.prototype.has = function (key) {
	        var map = this.pendingKeys || (this.pendingKeys = new Map());
	        var entry = map.get(key);
	        if (entry)
	            return entry.get();
	        else {
	            var exists = !!this.values.get(key);
	            // Possible optimization: Don't have a separate map for non existing keys,
	            // but store them in the values map instead, using a special symbol to denote "not existing"
	            entry = new ObservableValue$1(exists, referenceEnhancer$1, this.name + "." + stringifyKey$1(key) + "?", false);
	            map.set(key, entry);
	            return entry.get(); // read to subscribe
	        }
	    };
	    ObservableObjectAdministration.prototype.addObservableProp = function (propName, newValue, enhancer) {
	        if (enhancer === void 0) { enhancer = this.defaultEnhancer; }
	        var target = this.target;
	        assertPropertyConfigurable$1(target, propName);
	        if (hasInterceptors$1(this)) {
	            var change = interceptChange$1(this, {
	                object: this.proxy || target,
	                name: propName,
	                type: "add",
	                newValue: newValue
	            });
	            if (!change)
	                return;
	            newValue = change.newValue;
	        }
	        var observable = new ObservableValue$1(newValue, enhancer, this.name + "." + stringifyKey$1(propName), false);
	        this.values.set(propName, observable);
	        newValue = observable.value; // observableValue might have changed it
	        Object.defineProperty(target, propName, generateObservablePropConfig$1(propName));
	        this.notifyPropertyAddition(propName, newValue);
	    };
	    ObservableObjectAdministration.prototype.addComputedProp = function (propertyOwner, // where is the property declared?
	    propName, options) {
	        var target = this.target;
	        options.name = options.name || this.name + "." + stringifyKey$1(propName);
	        this.values.set(propName, new ComputedValue$1(options));
	        if (propertyOwner === target || isPropertyConfigurable$1(propertyOwner, propName))
	            Object.defineProperty(propertyOwner, propName, generateComputedPropConfig$1(propName));
	    };
	    ObservableObjectAdministration.prototype.remove = function (key) {
	        if (!this.values.has(key))
	            return;
	        var target = this.target;
	        if (hasInterceptors$1(this)) {
	            var change = interceptChange$1(this, {
	                object: this.proxy || target,
	                name: key,
	                type: "remove"
	            });
	            if (!change)
	                return;
	        }
	        try {
	            startBatch$1();
	            var notify = hasListeners$1(this);
	            var notifySpy = isSpyEnabled$1();
	            var oldObservable = this.values.get(key);
	            var oldValue = oldObservable && oldObservable.get();
	            oldObservable && oldObservable.set(undefined);
	            // notify key and keyset listeners
	            this.keysAtom.reportChanged();
	            this.values.delete(key);
	            if (this.pendingKeys) {
	                var entry = this.pendingKeys.get(key);
	                if (entry)
	                    entry.set(false);
	            }
	            // delete the prop
	            delete this.target[key];
	            var change = notify || notifySpy
	                ? {
	                    type: "remove",
	                    object: this.proxy || target,
	                    oldValue: oldValue,
	                    name: key
	                }
	                : null;
	            if (notifySpy && process.env.NODE_ENV !== "production")
	                spyReportStart$1(__assign$1(__assign$1({}, change), { name: this.name, key: key }));
	            if (notify)
	                notifyListeners$1(this, change);
	            if (notifySpy && process.env.NODE_ENV !== "production")
	                spyReportEnd$1();
	        }
	        finally {
	            endBatch$1();
	        }
	    };
	    ObservableObjectAdministration.prototype.illegalAccess = function (owner, propName) {
	        /**
	         * This happens if a property is accessed through the prototype chain, but the property was
	         * declared directly as own property on the prototype.
	         *
	         * E.g.:
	         * class A {
	         * }
	         * extendObservable(A.prototype, { x: 1 })
	         *
	         * classB extens A {
	         * }
	         * console.log(new B().x)
	         *
	         * It is unclear whether the property should be considered 'static' or inherited.
	         * Either use `console.log(A.x)`
	         * or: decorate(A, { x: observable })
	         *
	         * When using decorate, the property will always be redeclared as own property on the actual instance
	         */
	        console.warn("Property '" + propName + "' of '" + owner + "' was accessed through the prototype chain. Use 'decorate' instead to declare the prop or access it statically through it's owner");
	    };
	    /**
	     * Observes this object. Triggers for the events 'add', 'update' and 'delete'.
	     * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe
	     * for callback details
	     */
	    ObservableObjectAdministration.prototype.observe = function (callback, fireImmediately) {
	        process.env.NODE_ENV !== "production" &&
	            invariant$1(fireImmediately !== true, "`observe` doesn't support the fire immediately property for observable objects.");
	        return registerListener$1(this, callback);
	    };
	    ObservableObjectAdministration.prototype.intercept = function (handler) {
	        return registerInterceptor$1(this, handler);
	    };
	    ObservableObjectAdministration.prototype.notifyPropertyAddition = function (key, newValue) {
	        var notify = hasListeners$1(this);
	        var notifySpy = isSpyEnabled$1();
	        var change = notify || notifySpy
	            ? {
	                type: "add",
	                object: this.proxy || this.target,
	                name: key,
	                newValue: newValue
	            }
	            : null;
	        if (notifySpy && process.env.NODE_ENV !== "production")
	            spyReportStart$1(__assign$1(__assign$1({}, change), { name: this.name, key: key }));
	        if (notify)
	            notifyListeners$1(this, change);
	        if (notifySpy && process.env.NODE_ENV !== "production")
	            spyReportEnd$1();
	        if (this.pendingKeys) {
	            var entry = this.pendingKeys.get(key);
	            if (entry)
	                entry.set(true);
	        }
	        this.keysAtom.reportChanged();
	    };
	    ObservableObjectAdministration.prototype.getKeys = function () {
	        var e_1, _a;
	        this.keysAtom.reportObserved();
	        // return Reflect.ownKeys(this.values) as any
	        var res = [];
	        try {
	            for (var _b = __values$1(this.values), _c = _b.next(); !_c.done; _c = _b.next()) {
	                var _d = __read$1(_c.value, 2), key = _d[0], value = _d[1];
	                if (value instanceof ObservableValue$1)
	                    res.push(key);
	            }
	        }
	        catch (e_1_1) { e_1 = { error: e_1_1 }; }
	        finally {
	            try {
	                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
	            }
	            finally { if (e_1) throw e_1.error; }
	        }
	        return res;
	    };
	    return ObservableObjectAdministration;
	}());
	function asObservableObject$1(target, name, defaultEnhancer) {
	    if (name === void 0) { name = ""; }
	    if (defaultEnhancer === void 0) { defaultEnhancer = deepEnhancer$1; }
	    if (Object.prototype.hasOwnProperty.call(target, $mobx$1))
	        return target[$mobx$1];
	    process.env.NODE_ENV !== "production" &&
	        invariant$1(Object.isExtensible(target), "Cannot make the designated object observable; it is not extensible");
	    if (!isPlainObject$4(target))
	        name = (target.constructor.name || "ObservableObject") + "@" + getNextId$1();
	    if (!name)
	        name = "ObservableObject@" + getNextId$1();
	    var adm = new ObservableObjectAdministration$1(target, new Map(), stringifyKey$1(name), defaultEnhancer);
	    addHiddenProp$1(target, $mobx$1, adm);
	    return adm;
	}
	var observablePropertyConfigs$1 = Object.create(null);
	var computedPropertyConfigs$1 = Object.create(null);
	function generateObservablePropConfig$1(propName) {
	    return (observablePropertyConfigs$1[propName] ||
	        (observablePropertyConfigs$1[propName] = {
	            configurable: true,
	            enumerable: true,
	            get: function () {
	                return this[$mobx$1].read(propName);
	            },
	            set: function (v) {
	                this[$mobx$1].write(propName, v);
	            }
	        }));
	}
	function getAdministrationForComputedPropOwner$1(owner) {
	    var adm = owner[$mobx$1];
	    if (!adm) {
	        // because computed props are declared on proty,
	        // the current instance might not have been initialized yet
	        initializeInstance$1(owner);
	        return owner[$mobx$1];
	    }
	    return adm;
	}
	function generateComputedPropConfig$1(propName) {
	    return (computedPropertyConfigs$1[propName] ||
	        (computedPropertyConfigs$1[propName] = {
	            configurable: globalState$1.computedConfigurable,
	            enumerable: false,
	            get: function () {
	                return getAdministrationForComputedPropOwner$1(this).read(propName);
	            },
	            set: function (v) {
	                getAdministrationForComputedPropOwner$1(this).write(propName, v);
	            }
	        }));
	}
	var isObservableObjectAdministration$1 = createInstanceofPredicate$1("ObservableObjectAdministration", ObservableObjectAdministration$1);
	function isObservableObject$1(thing) {
	    if (isObject$2(thing)) {
	        // Initializers run lazily when transpiling to babel, so make sure they are run...
	        initializeInstance$1(thing);
	        return isObservableObjectAdministration$1(thing[$mobx$1]);
	    }
	    return false;
	}

	function getAtom$1(thing, property) {
	    if (typeof thing === "object" && thing !== null) {
	        if (isObservableArray$1(thing)) {
	            if (property !== undefined)
	                fail$1(process.env.NODE_ENV !== "production" &&
	                    "It is not possible to get index atoms from arrays");
	            return thing[$mobx$1].atom;
	        }
	        if (isObservableSet$1(thing)) {
	            return thing[$mobx$1];
	        }
	        if (isObservableMap$1(thing)) {
	            var anyThing = thing;
	            if (property === undefined)
	                return anyThing._keysAtom;
	            var observable = anyThing._data.get(property) || anyThing._hasMap.get(property);
	            if (!observable)
	                fail$1(process.env.NODE_ENV !== "production" &&
	                    "the entry '" + property + "' does not exist in the observable map '" + getDebugName$1(thing) + "'");
	            return observable;
	        }
	        // Initializers run lazily when transpiling to babel, so make sure they are run...
	        initializeInstance$1(thing);
	        if (property && !thing[$mobx$1])
	            thing[property]; // See #1072
	        if (isObservableObject$1(thing)) {
	            if (!property)
	                return fail$1(process.env.NODE_ENV !== "production" && "please specify a property");
	            var observable = thing[$mobx$1].values.get(property);
	            if (!observable)
	                fail$1(process.env.NODE_ENV !== "production" &&
	                    "no observable property '" + property + "' found on the observable object '" + getDebugName$1(thing) + "'");
	            return observable;
	        }
	        if (isAtom$1(thing) || isComputedValue$1(thing) || isReaction$1(thing)) {
	            return thing;
	        }
	    }
	    else if (typeof thing === "function") {
	        if (isReaction$1(thing[$mobx$1])) {
	            // disposer function
	            return thing[$mobx$1];
	        }
	    }
	    return fail$1(process.env.NODE_ENV !== "production" && "Cannot obtain atom from " + thing);
	}
	function getAdministration$1(thing, property) {
	    if (!thing)
	        fail$1("Expecting some object");
	    if (property !== undefined)
	        return getAdministration$1(getAtom$1(thing, property));
	    if (isAtom$1(thing) || isComputedValue$1(thing) || isReaction$1(thing))
	        return thing;
	    if (isObservableMap$1(thing) || isObservableSet$1(thing))
	        return thing;
	    // Initializers run lazily when transpiling to babel, so make sure they are run...
	    initializeInstance$1(thing);
	    if (thing[$mobx$1])
	        return thing[$mobx$1];
	    fail$1(process.env.NODE_ENV !== "production" && "Cannot obtain administration from " + thing);
	}
	function getDebugName$1(thing, property) {
	    var named;
	    if (property !== undefined)
	        named = getAtom$1(thing, property);
	    else if (isObservableObject$1(thing) || isObservableMap$1(thing) || isObservableSet$1(thing))
	        named = getAdministration$1(thing);
	    else
	        named = getAtom$1(thing); // valid for arrays as well
	    return named.name;
	}

	var toString$4 = Object.prototype.toString;
	function deepEqual$1(a, b, depth) {
	    if (depth === void 0) { depth = -1; }
	    return eq$1(a, b, depth);
	}
	// Copied from https://github.com/jashkenas/underscore/blob/5c237a7c682fb68fd5378203f0bf22dce1624854/underscore.js#L1186-L1289
	// Internal recursive comparison function for `isEqual`.
	function eq$1(a, b, depth, aStack, bStack) {
	    // Identical objects are equal. `0 === -0`, but they aren't identical.
	    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
	    if (a === b)
	        return a !== 0 || 1 / a === 1 / b;
	    // `null` or `undefined` only equal to itself (strict comparison).
	    if (a == null || b == null)
	        return false;
	    // `NaN`s are equivalent, but non-reflexive.
	    if (a !== a)
	        return b !== b;
	    // Exhaust primitive checks
	    var type = typeof a;
	    if (type !== "function" && type !== "object" && typeof b != "object")
	        return false;
	    // Compare `[[Class]]` names.
	    var className = toString$4.call(a);
	    if (className !== toString$4.call(b))
	        return false;
	    switch (className) {
	        // Strings, numbers, regular expressions, dates, and booleans are compared by value.
	        case "[object RegExp]":
	        // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
	        case "[object String]":
	            // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
	            // equivalent to `new String("5")`.
	            return "" + a === "" + b;
	        case "[object Number]":
	            // `NaN`s are equivalent, but non-reflexive.
	            // Object(NaN) is equivalent to NaN.
	            if (+a !== +a)
	                return +b !== +b;
	            // An `egal` comparison is performed for other numeric values.
	            return +a === 0 ? 1 / +a === 1 / b : +a === +b;
	        case "[object Date]":
	        case "[object Boolean]":
	            // Coerce dates and booleans to numeric primitive values. Dates are compared by their
	            // millisecond representations. Note that invalid dates with millisecond representations
	            // of `NaN` are not equivalent.
	            return +a === +b;
	        case "[object Symbol]":
	            return (typeof Symbol !== "undefined" && Symbol.valueOf.call(a) === Symbol.valueOf.call(b));
	        case "[object Map]":
	        case "[object Set]":
	            // Maps and Sets are unwrapped to arrays of entry-pairs, adding an incidental level.
	            // Hide this extra level by increasing the depth.
	            if (depth >= 0) {
	                depth++;
	            }
	            break;
	    }
	    // Unwrap any wrapped objects.
	    a = unwrap$1(a);
	    b = unwrap$1(b);
	    var areArrays = className === "[object Array]";
	    if (!areArrays) {
	        if (typeof a != "object" || typeof b != "object")
	            return false;
	        // Objects with different constructors are not equivalent, but `Object`s or `Array`s
	        // from different frames are.
	        var aCtor = a.constructor, bCtor = b.constructor;
	        if (aCtor !== bCtor &&
	            !(typeof aCtor === "function" &&
	                aCtor instanceof aCtor &&
	                typeof bCtor === "function" &&
	                bCtor instanceof bCtor) &&
	            ("constructor" in a && "constructor" in b)) {
	            return false;
	        }
	    }
	    if (depth === 0) {
	        return false;
	    }
	    else if (depth < 0) {
	        depth = -1;
	    }
	    // Assume equality for cyclic structures. The algorithm for detecting cyclic
	    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
	    // Initializing stack of traversed objects.
	    // It's done here since we only need them for objects and arrays comparison.
	    aStack = aStack || [];
	    bStack = bStack || [];
	    var length = aStack.length;
	    while (length--) {
	        // Linear search. Performance is inversely proportional to the number of
	        // unique nested structures.
	        if (aStack[length] === a)
	            return bStack[length] === b;
	    }
	    // Add the first object to the stack of traversed objects.
	    aStack.push(a);
	    bStack.push(b);
	    // Recursively compare objects and arrays.
	    if (areArrays) {
	        // Compare array lengths to determine if a deep comparison is necessary.
	        length = a.length;
	        if (length !== b.length)
	            return false;
	        // Deep compare the contents, ignoring non-numeric properties.
	        while (length--) {
	            if (!eq$1(a[length], b[length], depth - 1, aStack, bStack))
	                return false;
	        }
	    }
	    else {
	        // Deep compare objects.
	        var keys = Object.keys(a);
	        var key = void 0;
	        length = keys.length;
	        // Ensure that both objects contain the same number of properties before comparing deep equality.
	        if (Object.keys(b).length !== length)
	            return false;
	        while (length--) {
	            // Deep compare each member
	            key = keys[length];
	            if (!(has$1$3(b, key) && eq$1(a[key], b[key], depth - 1, aStack, bStack)))
	                return false;
	        }
	    }
	    // Remove the first object from the stack of traversed objects.
	    aStack.pop();
	    bStack.pop();
	    return true;
	}
	function unwrap$1(a) {
	    if (isObservableArray$1(a))
	        return a.slice();
	    if (isES6Map$1(a) || isObservableMap$1(a))
	        return Array.from(a.entries());
	    if (isES6Set$1(a) || isObservableSet$1(a))
	        return Array.from(a.entries());
	    return a;
	}
	function has$1$3(a, key) {
	    return Object.prototype.hasOwnProperty.call(a, key);
	}

	function makeIterable$1(iterator) {
	    iterator[Symbol.iterator] = getSelf$1;
	    return iterator;
	}
	function getSelf$1() {
	    return this;
	}

	/*
	The only reason for this file to exist is pure horror:
	Without it rollup can make the bundling fail at any point in time; when it rolls up the files in the wrong order
	it will cause undefined errors (for example because super classes or local variables not being hoisted).
	With this file that will still happen,
	but at least in this file we can magically reorder the imports with trial and error until the build succeeds again.
	*/

	/**
	 * (c) Michel Weststrate 2015 - 2018
	 * MIT Licensed
	 *
	 * Welcome to the mobx sources! To get an global overview of how MobX internally works,
	 * this is a good place to start:
	 * https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.xvbh6qd74
	 *
	 * Source folders:
	 * ===============
	 *
	 * - api/     Most of the public static methods exposed by the module can be found here.
	 * - core/    Implementation of the MobX algorithm; atoms, derivations, reactions, dependency trees, optimizations. Cool stuff can be found here.
	 * - types/   All the magic that is need to have observable objects, arrays and values is in this folder. Including the modifiers like `asFlat`.
	 * - utils/   Utility stuff.
	 *
	 */
	if (typeof Proxy === "undefined" || typeof Symbol === "undefined") {
	    throw new Error("[mobx] MobX 5+ requires Proxy and Symbol objects. If your environment doesn't support Symbol or Proxy objects, please downgrade to MobX 4. For React Native Android, consider upgrading JSCore.");
	}
	try {
	    // define process.env if needed
	    // if this is not a production build in the first place
	    // (in which case the expression below would be substituted with 'production')
	    process.env.NODE_ENV;
	}
	catch (e) {
	    var g$2 = getGlobal$2();
	    if (typeof process === "undefined")
	        g$2.process = {};
	    g$2.process.env = {};
	}
	(function () {
	    function testCodeMinification() { }
	    if (testCodeMinification.name !== "testCodeMinification" &&
	        process.env.NODE_ENV !== "production" &&
	        typeof process !== 'undefined' && process.env.IGNORE_MOBX_MINIFY_WARNING !== "true") {
	        // trick so it doesn't get replaced
	        var varName = ["process", "env", "NODE_ENV"].join(".");
	        console.warn("[mobx] you are running a minified build, but '" + varName + "' was not set to 'production' in your bundler. This results in an unnecessarily large and slow bundle");
	    }
	})();
	if (typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === "object") {
	    // See: https://github.com/andykog/mobx-devtools/
	    __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({
	        spy: spy$1,
	        extras: {
	            getDebugName: getDebugName$1
	        },
	        $mobx: $mobx$1
	    });
	}

	function toString$1$1(obj) {
	  return Object.prototype.toString.call(obj)
	}

	// Generated by CoffeeScript 1.12.5
	var isNumber;

	var isNumber$1 = isNumber = function(value) {
	  return toString$1$1(value) === '[object Number]';
	};

	// src/index.coffee
	var getOwnSymbols;
	var objectAssign$2;
	var shouldUseNative$2;
	var toObject$2;
	var slice = [].slice;

	getOwnSymbols = Object.getOwnPropertySymbols;

	toObject$2 = function(val) {
	  if (val === null || val === void 0) {
	    throw new TypeError('Object.assign cannot be called with null or undefined');
	  }
	  return Object(val);
	};

	shouldUseNative$2 = function() {
	  var i, j, k, len, letter, order2, ref, test1, test2, test3;
	  try {
	    if (!Object.assign) {
	      return false;
	    }
	    test1 = new String('abc');
	    test1[5] = 'de';
	    if (Object.getOwnPropertyNames(test1)[0] === '5') {
	      return false;
	    }
	    test2 = {};
	    for (i = j = 0; j <= 9; i = ++j) {
	      test2['_' + String.fromCharCode(i)] = i;
	    }
	    order2 = Object.getOwnPropertyNames(test2).map(function(n) {
	      return test2[n];
	    });
	    if (order2.join('') !== '0123456789') {
	      return false;
	    }
	    test3 = {};
	    ref = 'abcdefghijklmnopqrst'.split('');
	    for (k = 0, len = ref.length; k < len; k++) {
	      letter = ref[k];
	      test3[letter] = letter;
	    }
	    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
	      return false;
	    }
	    return true;
	  } catch (error) {
	    return false;
	  }
	};

	var index$2 = objectAssign$2 = (function() {
	  if (shouldUseNative$2()) {
	    return Object.assign;
	  }
	  return function() {
	    var from, j, k, key, len, len1, ref, source, sources, symbol, target, to;
	    target = arguments[0], sources = 2 <= arguments.length ? slice.call(arguments, 1) : [];
	    to = toObject$2(target);
	    for (j = 0, len = sources.length; j < len; j++) {
	      source = sources[j];
	      from = Object(source);
	      for (key in from) {
	        if (Object.prototype.hasOwnProperty.call(from, key)) {
	          to[key] = from[key];
	        }
	      }
	      if (getOwnSymbols) {
	        ref = getOwnSymbols(from);
	        for (k = 0, len1 = ref.length; k < len1; k++) {
	          symbol = ref[k];
	          if (Object.prototype.propIsEnumerable.call(from, symbol)) {
	            to[symbol] = from[symbol];
	          }
	        }
	      }
	    }
	    return to;
	  };
	})();

	// src/cookies.coffee
	var Cookies;

	Cookies = (function() {
	  function Cookies(defaults) {
	    this.defaults = defaults != null ? defaults : {};
	    this.get = (function(_this) {
	      return function(key) {
	        return _this.read(key);
	      };
	    })(this);
	    this.getJSON = (function(_this) {
	      return function(key) {
	        try {
	          return JSON.parse(_this.read(key));
	        } catch (error) {
	          return {};
	        }
	      };
	    })(this);
	    this.remove = (function(_this) {
	      return function(key, attrs) {
	        return _this.write(key, '', index$2({
	          expires: -1
	        }, attrs));
	      };
	    })(this);
	    this.set = (function(_this) {
	      return function(key, value, attrs) {
	        return _this.write(key, value, attrs);
	      };
	    })(this);
	  }

	  Cookies.prototype.read = function(key) {
	    var cookie, cookies, i, kv, len, name, parts, rdecode, result;
	    if (!key) {
	      result = {};
	    }
	    cookies = document.cookie ? document.cookie.split('; ') : [];
	    rdecode = /(%[0-9A-Z]{2})+/g;
	    for (i = 0, len = cookies.length; i < len; i++) {
	      kv = cookies[i];
	      parts = kv.split('=');
	      cookie = parts.slice(1).join('=');
	      if (cookie.charAt(0) === '"') {
	        cookie = cookie.slice(1, -1);
	      }
	      try {
	        name = parts[0].replace(rdecode, decodeURIComponent);
	        cookie = cookie.replace(rdecode, decodeURIComponent);
	        if (key === name) {
	          return cookie;
	        }
	        if (!key) {
	          result[name] = cookie;
	        }
	      } catch (error) {
	      }
	    }
	    return result;
	  };

	  Cookies.prototype.write = function(key, value, attrs) {
	    var attr, expires, name, result, strAttrs;
	    attrs = index$2({
	      path: '/'
	    }, this.defaults, attrs);
	    if (isNumber$1(attrs.expires)) {
	      expires = new Date;
	      expires.setMilliseconds(expires.getMilliseconds() + attrs.expires * 864e+5);
	      attrs.expires = expires;
	    }
	    attrs.expires = attrs.expires ? attrs.expires.toUTCString() : '';
	    try {
	      result = JSON.stringify(value);
	      if (/^[\{\[]/.test(result)) {
	        value = result;
	      }
	    } catch (error) {
	    }
	    value = encodeURIComponent(String(value)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
	    key = encodeURIComponent(String(key));
	    key = key.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);
	    key = key.replace(/[\(\)]/g, escape);
	    strAttrs = '';
	    for (name in attrs) {
	      attr = attrs[name];
	      if (!attr) {
	        continue;
	      }
	      strAttrs += '; ' + name;
	      if (attr === true) {
	        continue;
	      }
	      strAttrs += '=' + attr;
	    }
	    return document.cookie = key + '=' + value + strAttrs;
	  };

	  return Cookies;

	})();

	var Cookies$1 = Cookies;

	// src/index.coffee
	var index$1$1 = new Cookies$1();

	// src/cookie-storage.coffee
	var cookieStorage = (function() {
	  var key;
	  key = function(k) {
	    return "" + k;
	  };
	  return {
	    get: function(k) {
	      return index$1$1.getJSON(key(k));
	    },
	    set: function(k, v, opts) {
	      var ks, ref;
	      ks = (ref = index$1$1.getJSON(key('_keys'))) != null ? ref : [];
	      ks.push(k);
	      index$1$1.set(key('_keys'), ks);
	      return index$1$1.set(key(k, opts), v);
	    },
	    remove: function(k) {
	      return index$1$1.remove(key(k));
	    },
	    clear: function() {
	      var i, k, ks, len, ref;
	      ks = (ref = index$1$1.getJSON(key('_keys'))) != null ? ref : [];
	      for (i = 0, len = ks.length; i < len; i++) {
	        k = ks[i];
	        index$1$1.remove(k);
	      }
	      return index$1$1.remove(key('_keys'));
	    }
	  };
	})();

	// src/storage.coffee
	var storage = function(backend) {
	  var root, store;
	  root = typeof window === 'undefined' ? global : window;
	  try {
	    store = root[backend + 'Storage'];
	  } catch (error) {
	    return {
	      get: function() {
	        return void 0;
	      },
	      set: function() {
	        return void 0;
	      },
	      remove: function() {
	        return void 0;
	      },
	      clear: function() {
	        return void 0;
	      }
	    };
	  }
	  return {
	    get: function(k) {
	      try {
	        return JSON.parse(store.getItem(k));
	      } catch (error) {
	        console.error('Unable to parse', k);
	        return void 0;
	      }
	    },
	    set: function(k, v, opts) {
	      return store.setItem(k, JSON.stringify(v));
	    },
	    remove: function(k) {
	      return store.removeItem(k);
	    },
	    clear: function() {
	      return store.clear();
	    }
	  };
	};

	// src/local-storage.coffee
	var localStorage = storage('local');

	// src/pretend-storage.coffee
	var pretendStorage = (function() {
	  var key, pretendStorage;
	  pretendStorage = {};
	  key = function(k) {
	    return "" + k;
	  };
	  return {
	    get: function(k) {
	      return pretendStorage[key(k)];
	    },
	    set: function(k, v, opts) {
	      return pretendStorage[key(k)] = v;
	    },
	    remove: function(k) {
	      return delete pretendStorage[key(k)];
	    },
	    clear: function() {
	      var results;
	      results = [];
	      for (key in pretendStorage) {
	        results.push(delete pretendStorage[key(k)]);
	      }
	      return results;
	    }
	  };
	})();

	// src/index.coffee
	var supported;

	supported = function(storage) {
	  var ok, testStr;
	  try {
	    testStr = '__akasha__test__';
	    storage.set(testStr, testStr);
	    ok = (storage.get(testStr)) === testStr;
	    storage.remove(testStr);
	    return ok;
	  } catch (error) {
	    return false;
	  }
	};

	var index$2$1 = (function() {
	  if (supported(localStorage)) {
	    return localStorage;
	  } else if (supported(cookieStorage)) {
	    return cookieStorage;
	  } else {
	    return pretendStorage;
	  }
	})();
	// These functions need to be synced with the backend
	// Input sanitization for georate compared
	const clean = function (str) {
	    if (str == null) {
	        str = '';
	    }
	    return str.toUpperCase().replace(/\s/g, '');
	};
	/**
	 * Check if georate matches country + state + city/postalCode
	 * We assume that georates are built correctly (they are pulled from server)
	 * @param grs list of GeoRates
	 * @param ctr country
	 * @param st state
	 * @param ct city
	 * @param pc postalCode
	 * @return return if it is matched and level of match
	 */
	const matchesGeoRate = (g, country, state, city, postalCode) => {
	    const ctr = clean(country);
	    const st = clean(state);
	    const ct = clean(city);
	    const pc = clean(postalCode);
	    const ctr2 = clean(g.country);
	    // Invalid input
	    if (!ctr || !st || (!ct && !pc)) {
	        return [false, 0];
	    }
	    // Country is Wild Card
	    if (!ctr2) {
	        return [true, 0];
	    }
	    if (ctr2 === ctr) {
	        const st2 = clean(g.state);
	        // "Country Match"
	        if (!st2) {
	            return [true, 1];
	        }
	        if (st2 === st) {
	            const ct2 = clean(g.city);
	            // State Match
	            if (!ct2 && !g.postalCodes) {
	                return [true, 2];
	            }
	            // City Match
	            if (ct2 && (ct2 === ct)) {
	                return [true, 3];
	            }
	            if (g.postalCodes) {
	                const codes = g.postalCodes.split(',');
	                for (let code of Array.from(codes)) {
	                    // Postal Code Match
	                    if (clean(code) === pc) {
	                        return [true, 3];
	                    }
	                }
	            }
	            // City/Postal Code Mismatch
	            return [false, 2];
	        }
	        // State Mismatch
	        return [false, 1];
	    }
	    // No Match
	    return [false, 0];
	};
	/**
	 * Get the closest georate from a set of georates
	 * @param grs list of GeoRates
	 * @param ctr country
	 * @param st state
	 * @param ct city
	 * @param pc postalCode
	 * @return closest georate, level of match, and index
	 */
	const closestGeoRate = (grs, ctr, st, ct, pc) => {
	    let retGr;
	    let currentLevel = -1;
	    let idx = -1;
	    for (let i in grs) {
	        const gr = grs[i];
	        const [isMatch, level] = matchesGeoRate(gr, ctr, st, ct, pc);
	        if (isMatch && (level > currentLevel)) {
	            if (level === 3) {
	                return [gr, level, parseInt(i, 10)];
	            }
	            retGr = grs[i];
	            currentLevel = level;
	            idx = parseInt(i, 10);
	        }
	    }
	    return [retGr, currentLevel, idx];
	};

	/**
	 * Product is something that goes in a cart, we sync these from the server but
	 * only keep the fields we care about
	 */
	class Product {
	    constructor(raw, client) {
	        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
	        this.client = client;
	        this.id = (_a = raw.id) !== null && _a !== void 0 ? _a : '';
	        this.productId = (_b = raw.productId) !== null && _b !== void 0 ? _b : '';
	        this.slug = (_c = raw.slug) !== null && _c !== void 0 ? _c : '';
	        this.productSlug = (_d = raw.productSlug) !== null && _d !== void 0 ? _d : '';
	        this.name = (_e = raw.name) !== null && _e !== void 0 ? _e : '';
	        this.productName = (_f = raw.productName) !== null && _f !== void 0 ? _f : '';
	        this.price = (_g = raw.price) !== null && _g !== void 0 ? _g : 0;
	        this.listPrice = (_h = raw.listPrice) !== null && _h !== void 0 ? _h : 0;
	        this.description = (_j = raw.description) !== null && _j !== void 0 ? _j : '';
	        this.imageURL = (_k = raw.imageURL) !== null && _k !== void 0 ? _k : '';
	        if (raw && raw.image) {
	            this.image = {
	                url: raw.image.url,
	            };
	        }
	        else {
	            this.image = {
	                url: '',
	            };
	        }
	        this.bootstrapPromise = client.product.get(this.id).then((product) => {
	            Object.assign(this, product);
	            this.productId = product.id;
	            this.productSlug = product.slug;
	            this.productName = product.name;
	            this.imageURL = product.image.url;
	            return this;
	        }).catch((err) => {
	            throw err;
	        });
	    }
	}
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", String)
	], Product.prototype, "id", void 0);
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", String)
	], Product.prototype, "productId", void 0);
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", String)
	], Product.prototype, "slug", void 0);
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", String)
	], Product.prototype, "productSlug", void 0);
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", String)
	], Product.prototype, "name", void 0);
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", String)
	], Product.prototype, "productName", void 0);
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", Number)
	], Product.prototype, "price", void 0);
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", Number)
	], Product.prototype, "listPrice", void 0);
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", String)
	], Product.prototype, "description", void 0);
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", Promise)
	], Product.prototype, "bootstrapPromise", void 0);
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", Object)
	], Product.prototype, "client", void 0);
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", String)
	], Product.prototype, "imageURL", void 0);
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", Object)
	], Product.prototype, "image", void 0);

	/**
	 * A combination of cart and quantity
	 */
	class LineItem extends Product {
	    constructor(raw, client) {
	        super(raw, client);
	        this.quantity = 1;
	        this.locked = false;
	        this.ignore = false;
	        this.quantity = raw.quantity;
	        this.locked = raw.locked;
	        this.ignore = raw.ignore;
	    }
	    get total() {
	        return this.quantity * this.price;
	    }
	    get data() {
	        return {
	            id: this.id,
	            productId: this.productId,
	            slug: this.slug,
	            productSlug: this.productSlug,
	            name: this.name,
	            productName: this.name,
	            price: this.price,
	            listPrice: this.listPrice,
	            description: this.description,
	            imageURL: this.imageURL,
	            image: {
	                url: this.imageURL,
	            },
	            quantity: this.quantity,
	            locked: this.locked,
	            ignore: this.ignore,
	        };
	    }
	}
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", Number)
	], LineItem.prototype, "quantity", void 0);
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", Boolean)
	], LineItem.prototype, "locked", void 0);
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", Boolean)
	], LineItem.prototype, "ignore", void 0);
	__decorate$1([
	    computed$2,
	    __metadata$1("design:type", Object),
	    __metadata$1("design:paramtypes", [])
	], LineItem.prototype, "total", null);
	__decorate$1([
	    computed$2,
	    __metadata$1("design:type", Object),
	    __metadata$1("design:paramtypes", [])
	], LineItem.prototype, "data", null);

	/**
	 * Order contains information about what the user is buying
	 */
	class Order {
	    constructor(raw = {}, taxRates = [], shippingRates = [], client, cartAPI) {
	        var _a, _b, _c, _d, _e;
	        this.id = '';
	        this.userId = '';
	        this.couponCodes = [];
	        this.referrerId = '';
	        this.templateId = '';
	        /**
	         * Overwrite subtotal only available in itemless modes
	         */
	        this._subtotal = 0;
	        this.client = client;
	        this.taxRates = taxRates;
	        this.shippingRates = shippingRates;
	        this.items = raw.items ? raw.items.map((x) => new LineItem(x, client)) : [];
	        this.bootstrapPromise = Promise.all(this.items.map((x) => x.bootstrapPromise));
	        this.type = (_a = raw.type) !== null && _a !== void 0 ? _a : 'stripe';
	        this.storeId = (_b = raw.storeId) !== null && _b !== void 0 ? _b : '';
	        this.currency = (raw.currency && raw.currency.toLowerCase) ? raw.currency.toLowerCase() : 'usd';
	        this.referrerId = raw.referrerId;
	        this.mode = (_c = raw.mode) !== null && _c !== void 0 ? _c : '';
	        this.subtotal = (_d = raw.subtotal) !== null && _d !== void 0 ? _d : 0;
	        this.templateId = raw.templateId;
	        this.shippingAddress = (_e = raw.shippingAddress) !== null && _e !== void 0 ? _e : {
	            country: '',
	            state: '',
	            city: '',
	            postalCode: '',
	        };
	        this.metadata = raw.metadata;
	        if (raw.couponCodes && raw.couponCodes.length > 0) {
	            this.bootstrapPromise = Promise.all([cartAPI.setCoupon(raw.couponCodes[0]), this.bootstrapPromise]);
	        }
	        // Save order on any update
	        autorun$1(() => {
	            Order.save(this);
	        });
	        // Define reaction for storeid
	        reaction(() => this.storeId, (storeId) => {
	            cartAPI.cartSetStore(storeId);
	        });
	        // clear items when we switch to itemless mode
	        reaction(() => this.mode, () => {
	            if (this.inItemlessMode) {
	                cartAPI.clear();
	            }
	        });
	    }
	    get(id) {
	        for (const item of this.items) {
	            if (item.id !== id && item.productId !== id && item.productSlug !== id) {
	                continue;
	            }
	            return item;
	        }
	        return undefined;
	    }
	    /**
	     * @return the number of items on the order
	     */
	    get size() {
	        return this.items.length;
	    }
	    get inItemlessMode() {
	        return this.mode === 'deposit' || this.mode === 'contribution';
	    }
	    static load(client, taxRates = [], shippingRates = [], cartAPI) {
	        var _a;
	        return new Order((_a = index$2$1.get('order')) !== null && _a !== void 0 ? _a : {}, [], [], client, cartAPI);
	    }
	    static save(order) {
	        index$2$1.set('order', order.data);
	    }
	    static clear() {
	        index$2$1.remove('order');
	    }
	    get discount() {
	        const coupon = this.coupon;
	        let discount = 0;
	        if (coupon != null) {
	            switch (coupon.type) {
	                case 'flat':
	                    if ((coupon.productId == null) || (coupon.productId === '')) {
	                        discount = (coupon.amount || 0);
	                    }
	                    else {
	                        for (const item of this.items) {
	                            if (item.productId === coupon.productId) {
	                                let { quantity } = item;
	                                if (coupon.once) {
	                                    quantity = 1;
	                                }
	                                discount += (coupon.amount || 0) * quantity;
	                            }
	                        }
	                    }
	                    break;
	                case 'percent':
	                    if ((coupon.productId == null) || (coupon.productId === '')) {
	                        for (const item of this.items) {
	                            let { quantity } = item;
	                            if (coupon.once) {
	                                quantity = 1;
	                            }
	                            discount += (coupon.amount || 0) * item.price * quantity * 0.01;
	                        }
	                    }
	                    else {
	                        for (const item of this.items) {
	                            if (item.productId === coupon.productId) {
	                                let { quantity } = item;
	                                if (coupon.once) {
	                                    quantity = 1;
	                                }
	                                discount += (coupon.amount || 0) * item.price * quantity * 0.01;
	                            }
	                        }
	                    }
	                    discount = Math.floor(discount);
	                    break;
	            }
	        }
	        return discount;
	    }
	    get subtotal() {
	        if (this.inItemlessMode) {
	            return this._subtotal;
	        }
	        let subtotal = 0;
	        let items = this.items;
	        for (const item of items) {
	            subtotal += item.price * item.quantity;
	        }
	        return subtotal;
	    }
	    set subtotal(st) {
	        if (this.inItemlessMode) {
	            this._subtotal = st;
	        }
	    }
	    get taxRate() {
	        let rate = {
	            percent: 0,
	            cost: 0,
	        };
	        const country = this.shippingAddress.country;
	        const state = this.shippingAddress.state;
	        const city = this.shippingAddress.city;
	        const postalCode = this.shippingAddress.postalCode;
	        let [gr, l, i] = closestGeoRate(this.taxRates, country, state, city, postalCode);
	        return gr !== null && gr !== void 0 ? gr : rate;
	    }
	    get tax() {
	        const taxRate = this.taxRate;
	        return Math.ceil((taxRate.percent != null ? taxRate.percent : 0) * this.subtotal) +
	            (taxRate.cost != null ? taxRate.cost : 0);
	    }
	    get shippingRate() {
	        let rate = {
	            percent: 0,
	            cost: 0,
	        };
	        const country = this.shippingAddress.country;
	        const state = this.shippingAddress.state;
	        const city = this.shippingAddress.city;
	        const postalCode = this.shippingAddress.postalCode;
	        let [gr, l, i] = closestGeoRate(this.shippingRates, country, state, city, postalCode);
	        return gr !== null && gr !== void 0 ? gr : rate;
	    }
	    get shipping() {
	        const shippingRate = this.shippingRate;
	        return Math.ceil((shippingRate.percent != null ? shippingRate.percent : 0) * this.subtotal) +
	            (shippingRate.cost != null ? shippingRate.cost : 0);
	    }
	    get total() {
	        return this.subtotal + this.shipping + this.tax - this.discount;
	    }
	    get data() {
	        return {
	            id: this.id,
	            userId: this.userId,
	            currency: this.currency,
	            items: this.items.map((item) => item.data),
	            shippingAddress: this.shippingAddress,
	            mode: this.mode,
	            storeId: this.storeId,
	            type: this.type,
	            subtotal: this.subtotal,
	            total: this.total,
	            tax: this.tax,
	            shipping: this.shipping,
	            discount: this.discount,
	            couponCodes: this.couponCodes,
	            metadata: this.metadata,
	            referrerId: this.referrerId,
	            templateId: this.templateId,
	        };
	    }
	}
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", String)
	], Order.prototype, "id", void 0);
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", String)
	], Order.prototype, "userId", void 0);
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", Array)
	], Order.prototype, "items", void 0);
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", String)
	], Order.prototype, "type", void 0);
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", String)
	], Order.prototype, "storeId", void 0);
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", String)
	], Order.prototype, "currency", void 0);
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", String)
	], Order.prototype, "mode", void 0);
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", Object)
	], Order.prototype, "client", void 0);
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", Array)
	], Order.prototype, "couponCodes", void 0);
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", Object)
	], Order.prototype, "coupon", void 0);
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", Array)
	], Order.prototype, "taxRates", void 0);
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", Array)
	], Order.prototype, "shippingRates", void 0);
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", Object)
	], Order.prototype, "shippingAddress", void 0);
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", Number)
	], Order.prototype, "number", void 0);
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", Object)
	], Order.prototype, "metadata", void 0);
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", String)
	], Order.prototype, "referrerId", void 0);
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", String)
	], Order.prototype, "templateId", void 0);
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", Number)
	], Order.prototype, "_subtotal", void 0);
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", Promise)
	], Order.prototype, "bootstrapPromise", void 0);
	__decorate$1([
	    computed$2,
	    __metadata$1("design:type", Number),
	    __metadata$1("design:paramtypes", [])
	], Order.prototype, "size", null);
	__decorate$1([
	    computed$2,
	    __metadata$1("design:type", Boolean),
	    __metadata$1("design:paramtypes", [])
	], Order.prototype, "inItemlessMode", null);
	__decorate$1([
	    computed$2,
	    __metadata$1("design:type", Number),
	    __metadata$1("design:paramtypes", [])
	], Order.prototype, "discount", null);
	__decorate$1([
	    computed$2,
	    __metadata$1("design:type", Number),
	    __metadata$1("design:paramtypes", [Number])
	], Order.prototype, "subtotal", null);
	__decorate$1([
	    computed$2,
	    __metadata$1("design:type", Object),
	    __metadata$1("design:paramtypes", [])
	], Order.prototype, "taxRate", null);
	__decorate$1([
	    computed$2,
	    __metadata$1("design:type", Number),
	    __metadata$1("design:paramtypes", [])
	], Order.prototype, "tax", null);
	__decorate$1([
	    computed$2,
	    __metadata$1("design:type", Object),
	    __metadata$1("design:paramtypes", [])
	], Order.prototype, "shippingRate", null);
	__decorate$1([
	    computed$2,
	    __metadata$1("design:type", Number),
	    __metadata$1("design:paramtypes", [])
	], Order.prototype, "shipping", null);
	__decorate$1([
	    computed$2,
	    __metadata$1("design:type", Number),
	    __metadata$1("design:paramtypes", [])
	], Order.prototype, "total", null);
	__decorate$1([
	    computed$2,
	    __metadata$1("design:type", Object),
	    __metadata$1("design:paramtypes", [])
	], Order.prototype, "data", null);

	class User {
	    constructor(raw = {}, cartAPI) {
	        var _a, _b, _c;
	        this.email = (_a = raw.email) !== null && _a !== void 0 ? _a : '';
	        this.firstName = (_b = raw.firstName) !== null && _b !== void 0 ? _b : '';
	        this.lastName = (_c = raw.lastName) !== null && _c !== void 0 ? _c : '';
	        // Save order on any update
	        // autorun(() => {
	        //   User.save(this)
	        // })
	        // Define reaction for storeid
	        reaction(() => this.email, (email) => {
	            cartAPI.cartSetEmail(email);
	        });
	        // Define reaction for username
	        reaction(() => this.firstName + ' ' + this.lastName, (name) => {
	            cartAPI.cartSetName(name);
	        });
	    }
	}
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", String)
	], User.prototype, "email", void 0);
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", String)
	], User.prototype, "firstName", void 0);
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", String)
	], User.prototype, "lastName", void 0);

	/**
	 * Cart keeps track of items being added and removed from the cart/order
	 */
	class Commerce {
	    /**
	     * Create an instance of Commerce
	     * @param client is the http client for talking to carts
	     * @param order is the default order configuration
	     * @param taxRates is an array of IGeoRates for taxes
	     * @param shippingRates is an array of IGeoRates for taxes
	     * @param analytics is the call to the analytics library
	     * @param aPT is a function for transforming analytics objects before sending
	     * them
	     */
	    constructor(client, order, taxRates = [], shippingRates = [], analytics = undefined, aPT = (v) => v) {
	        /**
	         * metadata of the current cart
	         */
	        this.cart = {
	            id: '',
	            storeId: '',
	            email: '',
	            name: '',
	        };
	        /**
	         * updateQueue contains the list of cart item updates so we can ensure
	         * updates are pushed fifo
	         */
	        this.updateQueue = [];
	        /**
	         * updateQueuePromise is a reference to the promise generated by the
	         * updateQueue for the purposes of awaiting outside of the direct call
	         */
	        this.updateQueuePromise = new Promise((res) => { res(); });
	        /**
	         * payment is the object for tracking the user's payment information
	         */
	        this.payment = {};
	        this.client = client;
	        this.order = order ? new Order(order, taxRates, shippingRates, client, this) : Order.load(client, taxRates, shippingRates, this);
	        this.user = new User({}, this);
	        this.analytics = analytics;
	        this.analyticsProductTransform = aPT;
	        this.bootstrapPromise = this.order.bootstrapPromise;
	        // this.cartInit()
	    }
	    /**
	     * @return the items on the order
	     */
	    get items() {
	        var _a;
	        return (_a = this.order.items) !== null && _a !== void 0 ? _a : [];
	    }
	    /**
	     * @return the number of items on the order
	     */
	    get size() {
	        return this.order.size;
	    }
	    /**
	     * Get the cart id
	     * @return the cartId of the current cart from storage.  If there is no
	     * current cart, return empty
	     */
	    get cartId() {
	        var _a;
	        return (_a = index$2$1.get('cart.id')) !== null && _a !== void 0 ? _a : '';
	    }
	    /**
	     * Get the cart id
	     */
	    get isCartInit() {
	        return !!this.cartId;
	    }
	    get storeId() {
	        return this.order.storeId;
	    }
	    /**
	     * Initialize the cart system.
	     * @return initialized or recovered cart instance
	     */
	    async cartInit() {
	        // check for if the cartId exists and either create a new cart or load cart
	        // id
	        if (!this.isCartInit) {
	            this.cart = await this.client.cart.create();
	            index$2$1.set('cart', this.cart);
	        }
	        else {
	            this.cart.id = this.cartId;
	        }
	        runInAction$1(() => {
	            this.order = new Order(index$2$1.get('order'), [], [], this.client, this);
	        });
	        return this.cart;
	    }
	    /**
	     * Get the current state of a specific lineitem
	     * @param id the product id of a lineitem
	     * @return lineitem or undefined if product isn't in cart
	     */
	    async get(id) {
	        // Check the item on the order
	        let item = this.order.get(id);
	        if (item) {
	            return item;
	        }
	        // Check the item in the queue
	        for (const request of this.updateQueue) {
	            if (request[0] !== id) {
	                continue;
	            }
	            const li = new LineItem({
	                id: request[0],
	                quantity: request[1],
	                locked: request[2],
	                ignore: request[3],
	            }, this.client);
	            try {
	                await li.bootstrapPromise;
	            }
	            catch (err) {
	                return;
	            }
	            return li;
	        }
	    }
	    /**
	     * Set a lineitem by product id.  Add lineitem to asynchronous update queue
	     * @param id productId
	     * @param quantity amount of productId in cart
	     * @param locked is this lineitem modifiable in the UI
	     * @param ignore is this lineitem ignored by the UI (loading in progress,
	     * freebie etc)
	     * @return promise for when all set operations are completed
	     */
	    async set(id, quantity, locked = false, ignore = false) {
	        if (this.updateQueue.length === 0) {
	            this.updateQueue.push([id, quantity, locked, ignore]);
	            this.updateQueuePromise = this.executeUpdates();
	            await this.updateQueuePromise;
	        }
	        else {
	            this.updateQueue.push([id, quantity, locked, ignore]);
	            await this.updateQueuePromise;
	        }
	    }
	    /**
	     * Refresh a lineitem by product id.  Add lineitem to asynchronous update queue
	     * @return return the LineItem if it exists or nothing if it doesn't.
	     */
	    async refresh(id) {
	        let item = await this.get(id);
	        if (item) {
	            await this.updateQueue.push([id, item.quantity, item.locked, item.ignore]);
	            return await this.get(id);
	        }
	        return;
	    }
	    /**
	     * Execute all queued updates
	     * @return promise for when all queued updates are done
	     */
	    async executeUpdates() {
	        const items = this.items;
	        if (!this.updateQueue.length) {
	            return;
	        }
	        let updateQueueRequest = this.updateQueue[0];
	        // Resolve or escape if empty queue
	        if (!updateQueueRequest) {
	            this.updateQueue.shift();
	            return;
	        }
	        let [id, quantity, locked, ignore] = updateQueueRequest;
	        // log('eu', id)
	        // Resolve or escape if itemless mode
	        if (this.order.inItemlessMode && quantity > 0) {
	            this.updateQueue.shift();
	            return await this.executeUpdates();
	        }
	        // log('eu2')
	        // handle negative quantities.
	        if (quantity < 0) {
	            this.updateQueue.shift();
	            quantity = 0;
	        }
	        // delete item
	        if (quantity === 0) {
	            await this.del(id);
	            this.updateQueue.shift();
	            return await this.executeUpdates();
	        }
	        // log('eu3')
	        // try and update item quantity
	        if (await this.executeUpdateItem(id, quantity, locked, ignore) != null) {
	            this.updateQueue.shift();
	            return await this.executeUpdates();
	        }
	        // log('eu4')
	        // Fetch up to date information at time of checkout openning
	        // TODO: Think about revising so we don't report old prices if they changed after checkout is open
	        const li = new LineItem({
	            id,
	            quantity,
	            locked,
	            ignore
	        }, this.client);
	        // log('eu4.5')
	        try {
	            await li.bootstrapPromise;
	        }
	        catch (err) {
	            this.updateQueue.shift();
	            return await this.executeUpdates();
	        }
	        // log('eu5', this.analytics)
	        runInAction$1(() => {
	            items.push(li);
	            let a = {
	                id: li.productId,
	                sku: li.productSlug,
	                name: li.productName,
	                quantity: quantity,
	                price: li.price / 100
	            };
	            if (this.analytics) {
	                if (this.analyticsProductTransform != null) {
	                    a = this.analyticsProductTransform(a);
	                }
	                this.analytics.track('Added Product', a);
	            }
	        });
	        await this.cartSetItem(li.productId, quantity);
	        this.updateQueue.shift();
	        return this.executeUpdates();
	    }
	    /**
	     * Execute update for item
	     * @param id productId
	     * @param quantity amount of productId in cart
	     * @param locked is this lineitem modifiable in the UI
	     * @param ignore is this lineitem ignored by the UI (loading in progress,
	     * freebie etc)
	     * @return LineItem if item is updated or undefined if something was invalid
	     */
	    async executeUpdateItem(id, quantity, locked, ignore) {
	        const items = this.items;
	        for (const k in items) {
	            const item = items[k];
	            // ignore if not a match to id
	            if (item.id !== id &&
	                item.productId !== id &&
	                item.productSlug !== id) {
	                continue;
	            }
	            const oldValue = item.quantity;
	            item.quantity = quantity;
	            item.locked = locked;
	            item.ignore = ignore;
	            const newValue = quantity;
	            const deltaQuantity = newValue - oldValue;
	            if (deltaQuantity > 0) {
	                let a = {
	                    id: item.productId,
	                    sku: item.productSlug,
	                    name: item.productName,
	                    quantity: deltaQuantity,
	                    price: item.price / 100
	                };
	                if (this.analytics) {
	                    if (this.analyticsProductTransform != null) {
	                        a = this.analyticsProductTransform(a);
	                    }
	                    this.analytics.track('Added Product', a);
	                }
	                this.cartSetItem(item.productId, quantity);
	            }
	            else if (deltaQuantity < 0) {
	                let a = {
	                    id: item.productId,
	                    sku: item.productSlug,
	                    name: item.productName,
	                    quantity: deltaQuantity,
	                    price: item.price / 100
	                };
	                if (this.analytics) {
	                    if (this.analyticsProductTransform != null) {
	                        a = this.analyticsProductTransform(a);
	                    }
	                    this.analytics.track('Removed Product', a);
	                }
	            }
	            this.items[k].quantity = quantity;
	            this.items[k].locked = locked;
	            this.items[k].ignore = ignore;
	            await this.cartSetItem(item.productId, quantity);
	            return this.items[k];
	        }
	    }
	    /**
	     * Delete an item
	     * @param id productId
	     * @return LineItem that was deleted
	     */
	    async del(id) {
	        const items = this.items;
	        let itemToDeleteIndex = items.length;
	        for (const k in items) {
	            const item = items[k];
	            if (item.productId === id ||
	                item.productSlug === id ||
	                item.id === id) {
	                itemToDeleteIndex = parseInt(k);
	                break;
	            }
	        }
	        if (itemToDeleteIndex >= items.length) {
	            return;
	        }
	        const item = items[itemToDeleteIndex];
	        // Remove the itemToDelete from the items list
	        this.items.splice(itemToDeleteIndex, 1);
	        let a = {
	            id: item.productId,
	            sku: item.productSlug,
	            name: item.productName,
	            quantity: item.quantity,
	            price: item.price / 100,
	        };
	        if (this.analytics) {
	            if (this.analyticsProductTransform != null) {
	                a = this.analyticsProductTransform(a);
	            }
	            this.analytics.track('Removed Product', a);
	        }
	        await this.cartSetItem(item.productId, 0);
	        runInAction$1(() => {
	            item.quantity = 0;
	        });
	        return item;
	    }
	    /**
	     * Set the cart's items directly on the server (shouldn't be used directly in high level
	     * operations)
	     * @param id productId
	     * @param quantity of product
	     * @return ICart returned from server
	     */
	    async cartSetItem(id, quantity) {
	        if (this.isCartInit) {
	            console.log('cart item');
	            this.cart.id = this.cartId;
	            return this.client.cart.set({
	                id: this.cartId,
	                productId: id,
	                quantity: quantity,
	                storeId: this.storeId,
	            });
	        }
	    }
	    /**
	     * Set the cart's store directly on the server (shouldn't be used directly in high level
	     * operations)
	     * @param storeId id of the store
	     * @return ICart returned from server
	     */
	    async cartSetStore(storeId) {
	        if (this.isCartInit) {
	            this.cart.id = this.cartId;
	            this.cart.storeId = storeId || this.storeId;
	            return this.client.cart.update(this.cart);
	        }
	    }
	    /**
	     * Set the cart's email directly on the server (shouldn't be used directly in high level
	     * operations)
	     * @param email user email
	     * @return ICart returned from server
	     */
	    async cartSetEmail(email) {
	        if (this.isCartInit) {
	            this.cart.id = this.cartId;
	            this.cart.email = this.user.email;
	            return this.client.cart.update(this.cart);
	        }
	    }
	    /**
	     * Set the cart's user name directly on the server (shouldn't be used directly in high level
	     * operations)
	     * @param name user's name
	     * @return ICart returned from server
	     */
	    async cartSetName(name) {
	        if (this.isCartInit) {
	            this.cart.id = this.cartId;
	            this.cart.name = name;
	            return this.client.cart.update(this.cart);
	        }
	    }
	    /**
	     * Set the cart's user name directly on the server (shouldn't be used directly in high level
	     * operations)
	     * @param name user's name
	     * @return ICart returned from server
	     */
	    async clear() {
	        this.updateQueue.length = 0;
	        const itemsClone = this.items.slice(0);
	        await Promise.all(itemsClone.map((item) => this.set(item.productId, 0)));
	        return;
	    }
	    /**
	     * Apply a coupon/promoCode
	     * @param code coupon code/ID
	     * @return ICoupon returned from server
	     */
	    async setCoupon(code) {
	        if (code) {
	            try {
	                let coupon = await this.client.coupon.get(code);
	                if (!coupon.enabled) {
	                    return;
	                }
	                runInAction$1(() => {
	                    this.order.coupon = coupon;
	                    this.order.couponCodes = [code];
	                });
	                if (coupon.freeProductId) {
	                    await this.client.product.get(coupon.freeProductId);
	                }
	                return coupon;
	            }
	            catch (err) {
	                return;
	            }
	        }
	    }
	    /**
	     * Checkout the order
	     * @param payment contains the user's credit card credentials
	     * @return IOrder returned from server's capture endpoint
	     */
	    async checkout(payment) {
	        // TODO: Add support for referral programs back
	        let order = Object.assign({}, this.order.data);
	        let user = Object.assign({}, this.user);
	        let opts = {
	            order,
	            payment,
	            user,
	        };
	        try {
	            let authorizedOrder = await this.client.checkout.authorize(opts);
	            if (authorizedOrder) {
	                runInAction$1(() => {
	                    this.order.id = authorizedOrder.id;
	                    this.order.userId = authorizedOrder.userId;
	                });
	                let capturedOrder = await this.client.checkout.capture(this.order.id);
	                if (!capturedOrder) {
	                    throw new Error('Checkout failed for unknown reasons, please try again later.');
	                }
	                runInAction$1(() => {
	                    this.order.number = capturedOrder.number;
	                });
	                let options = {
	                    orderId: capturedOrder.id,
	                    total: capturedOrder.total / 100,
	                    // revenue: parseFloat(order.total/100),
	                    shipping: capturedOrder.shipping / 100,
	                    tax: capturedOrder.tax / 100,
	                    discount: capturedOrder.discount / 100,
	                    coupon: capturedOrder.couponCodes ? capturedOrder.couponCodes[0] : '',
	                    currency: capturedOrder.currency,
	                    products: [],
	                };
	                for (const item of this.items) {
	                    let a = {
	                        id: item.productId,
	                        sku: item.productSlug,
	                        name: item.productName,
	                        quantity: item.quantity,
	                        price: item.price / 100,
	                    };
	                    if (this.analytics) {
	                        if (this.analyticsProductTransform != null) {
	                            a = this.analyticsProductTransform(a);
	                        }
	                    }
	                    options.products.push(a);
	                }
	                if (this.analytics) {
	                    this.analytics.track('Completed Order', options);
	                }
	                return capturedOrder;
	            }
	        }
	        catch (err) {
	            console.log('checkout error', err);
	            throw err;
	        }
	        return;
	    }
	}
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", Object)
	], Commerce.prototype, "cart", void 0);
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", Object)
	], Commerce.prototype, "client", void 0);
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", Array)
	], Commerce.prototype, "updateQueue", void 0);
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", Promise)
	], Commerce.prototype, "updateQueuePromise", void 0);
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", Order
	    /**
	     * user is an object for tracking the user's contact information
	     */
	    )
	], Commerce.prototype, "order", void 0);
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", User
	    /**
	     * payment is the object for tracking the user's payment information
	     */
	    )
	], Commerce.prototype, "user", void 0);
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", Object)
	], Commerce.prototype, "payment", void 0);
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", Object)
	], Commerce.prototype, "analytics", void 0);
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", Function)
	], Commerce.prototype, "analyticsProductTransform", void 0);
	__decorate$1([
	    observable$1,
	    __metadata$1("design:type", Promise)
	], Commerce.prototype, "bootstrapPromise", void 0);
	__decorate$1([
	    computed$2,
	    __metadata$1("design:type", Array),
	    __metadata$1("design:paramtypes", [])
	], Commerce.prototype, "items", null);
	__decorate$1([
	    computed$2,
	    __metadata$1("design:type", Number),
	    __metadata$1("design:paramtypes", [])
	], Commerce.prototype, "size", null);
	__decorate$1([
	    computed$2,
	    __metadata$1("design:type", String),
	    __metadata$1("design:paramtypes", [])
	], Commerce.prototype, "cartId", null);
	__decorate$1([
	    computed$2,
	    __metadata$1("design:type", Boolean),
	    __metadata$1("design:paramtypes", [])
	], Commerce.prototype, "isCartInit", null);
	__decorate$1([
	    computed$2,
	    __metadata$1("design:type", String),
	    __metadata$1("design:paramtypes", [])
	], Commerce.prototype, "storeId", null);
	__decorate$1([
	    action$1,
	    __metadata$1("design:type", Function),
	    __metadata$1("design:paramtypes", []),
	    __metadata$1("design:returntype", Promise)
	], Commerce.prototype, "cartInit", null);
	__decorate$1([
	    action$1,
	    __metadata$1("design:type", Function),
	    __metadata$1("design:paramtypes", [Object, Object, Object, Object]),
	    __metadata$1("design:returntype", Promise)
	], Commerce.prototype, "set", null);
	__decorate$1([
	    action$1,
	    __metadata$1("design:type", Function),
	    __metadata$1("design:paramtypes", [Object]),
	    __metadata$1("design:returntype", Promise)
	], Commerce.prototype, "refresh", null);
	__decorate$1([
	    action$1,
	    __metadata$1("design:type", Function),
	    __metadata$1("design:paramtypes", []),
	    __metadata$1("design:returntype", Promise)
	], Commerce.prototype, "executeUpdates", null);
	__decorate$1([
	    action$1,
	    __metadata$1("design:type", Function),
	    __metadata$1("design:paramtypes", [String, Number, Boolean, Boolean]),
	    __metadata$1("design:returntype", Promise)
	], Commerce.prototype, "executeUpdateItem", null);
	__decorate$1([
	    action$1,
	    __metadata$1("design:type", Function),
	    __metadata$1("design:paramtypes", [String]),
	    __metadata$1("design:returntype", Promise)
	], Commerce.prototype, "del", null);
	__decorate$1([
	    action$1,
	    __metadata$1("design:type", Function),
	    __metadata$1("design:paramtypes", [String, Number]),
	    __metadata$1("design:returntype", Promise)
	], Commerce.prototype, "cartSetItem", null);
	__decorate$1([
	    action$1,
	    __metadata$1("design:type", Function),
	    __metadata$1("design:paramtypes", [String]),
	    __metadata$1("design:returntype", Promise)
	], Commerce.prototype, "cartSetStore", null);
	__decorate$1([
	    action$1,
	    __metadata$1("design:type", Function),
	    __metadata$1("design:paramtypes", [String]),
	    __metadata$1("design:returntype", Promise)
	], Commerce.prototype, "cartSetEmail", null);
	__decorate$1([
	    action$1,
	    __metadata$1("design:type", Function),
	    __metadata$1("design:paramtypes", [String]),
	    __metadata$1("design:returntype", Promise)
	], Commerce.prototype, "cartSetName", null);
	__decorate$1([
	    action$1,
	    __metadata$1("design:type", Function),
	    __metadata$1("design:paramtypes", []),
	    __metadata$1("design:returntype", Promise)
	], Commerce.prototype, "clear", null);
	__decorate$1([
	    action$1,
	    __metadata$1("design:type", Function),
	    __metadata$1("design:paramtypes", [String]),
	    __metadata$1("design:returntype", Promise)
	], Commerce.prototype, "setCoupon", null);
	__decorate$1([
	    action$1,
	    __metadata$1("design:type", Function),
	    __metadata$1("design:paramtypes", [Object]),
	    __metadata$1("design:returntype", Promise)
	], Commerce.prototype, "checkout", null);
	//# sourceMappingURL=index.esm.js.map

	function toString$5(obj) {
	  return Object.prototype.toString.call(obj)
	}

	// Generated by CoffeeScript 1.12.5
	var isNumber$2;

	var isNumber$3 = isNumber$2 = function(value) {
	  return toString$5(value) === '[object Number]';
	};

	//# sourceMappingURL=number.js.map

	// src/index.coffee
	var getOwnSymbols$1;
	var objectAssign$3;
	var shouldUseNative$3;
	var toObject$3;
	var slice$1 = [].slice;

	getOwnSymbols$1 = Object.getOwnPropertySymbols;

	toObject$3 = function(val) {
	  if (val === null || val === void 0) {
	    throw new TypeError('Object.assign cannot be called with null or undefined');
	  }
	  return Object(val);
	};

	shouldUseNative$3 = function() {
	  var i, j, k, len, letter, order2, ref, test1, test2, test3;
	  try {
	    if (!Object.assign) {
	      return false;
	    }
	    test1 = new String('abc');
	    test1[5] = 'de';
	    if (Object.getOwnPropertyNames(test1)[0] === '5') {
	      return false;
	    }
	    test2 = {};
	    for (i = j = 0; j <= 9; i = ++j) {
	      test2['_' + String.fromCharCode(i)] = i;
	    }
	    order2 = Object.getOwnPropertyNames(test2).map(function(n) {
	      return test2[n];
	    });
	    if (order2.join('') !== '0123456789') {
	      return false;
	    }
	    test3 = {};
	    ref = 'abcdefghijklmnopqrst'.split('');
	    for (k = 0, len = ref.length; k < len; k++) {
	      letter = ref[k];
	      test3[letter] = letter;
	    }
	    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
	      return false;
	    }
	    return true;
	  } catch (error) {
	    return false;
	  }
	};

	var index$3 = objectAssign$3 = (function() {
	  if (shouldUseNative$3()) {
	    return Object.assign;
	  }
	  return function() {
	    var from, j, k, key, len, len1, ref, source, sources, symbol, target, to;
	    target = arguments[0], sources = 2 <= arguments.length ? slice$1.call(arguments, 1) : [];
	    to = toObject$3(target);
	    for (j = 0, len = sources.length; j < len; j++) {
	      source = sources[j];
	      from = Object(source);
	      for (key in from) {
	        if (Object.prototype.hasOwnProperty.call(from, key)) {
	          to[key] = from[key];
	        }
	      }
	      if (getOwnSymbols$1) {
	        ref = getOwnSymbols$1(from);
	        for (k = 0, len1 = ref.length; k < len1; k++) {
	          symbol = ref[k];
	          if (Object.prototype.propIsEnumerable.call(from, symbol)) {
	            to[symbol] = from[symbol];
	          }
	        }
	      }
	    }
	    return to;
	  };
	})();
	//# sourceMappingURL=es-object-assign.mjs.map

	// src/cookies.coffee
	var Cookies$2;

	Cookies$2 = (function() {
	  function Cookies(defaults) {
	    this.defaults = defaults != null ? defaults : {};
	    this.get = (function(_this) {
	      return function(key) {
	        return _this.read(key);
	      };
	    })(this);
	    this.getJSON = (function(_this) {
	      return function(key) {
	        try {
	          return JSON.parse(_this.read(key));
	        } catch (error) {
	          return {};
	        }
	      };
	    })(this);
	    this.remove = (function(_this) {
	      return function(key, attrs) {
	        return _this.write(key, '', index$3({
	          expires: -1
	        }, attrs));
	      };
	    })(this);
	    this.set = (function(_this) {
	      return function(key, value, attrs) {
	        return _this.write(key, value, attrs);
	      };
	    })(this);
	  }

	  Cookies.prototype.read = function(key) {
	    var cookie, cookies, i, kv, len, name, parts, rdecode, result;
	    if (!key) {
	      result = {};
	    }
	    cookies = document.cookie ? document.cookie.split('; ') : [];
	    rdecode = /(%[0-9A-Z]{2})+/g;
	    for (i = 0, len = cookies.length; i < len; i++) {
	      kv = cookies[i];
	      parts = kv.split('=');
	      cookie = parts.slice(1).join('=');
	      if (cookie.charAt(0) === '"') {
	        cookie = cookie.slice(1, -1);
	      }
	      try {
	        name = parts[0].replace(rdecode, decodeURIComponent);
	        cookie = cookie.replace(rdecode, decodeURIComponent);
	        if (key === name) {
	          return cookie;
	        }
	        if (!key) {
	          result[name] = cookie;
	        }
	      } catch (error) {
	      }
	    }
	    return result;
	  };

	  Cookies.prototype.write = function(key, value, attrs) {
	    var attr, expires, name, result, strAttrs;
	    attrs = index$3({
	      path: '/'
	    }, this.defaults, attrs);
	    if (isNumber$3(attrs.expires)) {
	      expires = new Date;
	      expires.setMilliseconds(expires.getMilliseconds() + attrs.expires * 864e+5);
	      attrs.expires = expires;
	    }
	    attrs.expires = attrs.expires ? attrs.expires.toUTCString() : '';
	    try {
	      result = JSON.stringify(value);
	      if (/^[\{\[]/.test(result)) {
	        value = result;
	      }
	    } catch (error) {
	    }
	    value = encodeURIComponent(String(value)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent);
	    key = encodeURIComponent(String(key));
	    key = key.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);
	    key = key.replace(/[\(\)]/g, escape);
	    strAttrs = '';
	    for (name in attrs) {
	      attr = attrs[name];
	      if (!attr) {
	        continue;
	      }
	      strAttrs += '; ' + name;
	      if (attr === true) {
	        continue;
	      }
	      strAttrs += '=' + attr;
	    }
	    return document.cookie = key + '=' + value + strAttrs;
	  };

	  return Cookies;

	})();

	var Cookies$1$1 = Cookies$2;

	// src/index.coffee
	var index$4 = new Cookies$1$1();
	//# sourceMappingURL=cookies.mjs.map

	// src/cookie-storage.coffee
	var cookieStorage$1 = (function() {
	  var key;
	  key = function(k) {
	    return "" + k;
	  };
	  return {
	    get: function(k) {
	      return index$4.getJSON(key(k));
	    },
	    set: function(k, v, opts) {
	      var ks, ref;
	      ks = (ref = index$4.getJSON(key('_keys'))) != null ? ref : [];
	      ks.push(k);
	      index$4.set(key('_keys'), ks);
	      return index$4.set(key(k, opts), v);
	    },
	    remove: function(k) {
	      return index$4.remove(key(k));
	    },
	    clear: function() {
	      var i, k, ks, len, ref;
	      ks = (ref = index$4.getJSON(key('_keys'))) != null ? ref : [];
	      for (i = 0, len = ks.length; i < len; i++) {
	        k = ks[i];
	        index$4.remove(k);
	      }
	      return index$4.remove(key('_keys'));
	    }
	  };
	})();

	// src/storage.coffee
	var storage$1 = function(backend) {
	  var root, store;
	  root = typeof window === 'undefined' ? global : window;
	  try {
	    store = root[backend + 'Storage'];
	  } catch (error) {
	    return {
	      get: function() {
	        return void 0;
	      },
	      set: function() {
	        return void 0;
	      },
	      remove: function() {
	        return void 0;
	      },
	      clear: function() {
	        return void 0;
	      }
	    };
	  }
	  return {
	    get: function(k) {
	      try {
	        return JSON.parse(store.getItem(k));
	      } catch (error) {
	        console.error('Unable to parse', k);
	        return void 0;
	      }
	    },
	    set: function(k, v, opts) {
	      return store.setItem(k, JSON.stringify(v));
	    },
	    remove: function(k) {
	      return store.removeItem(k);
	    },
	    clear: function() {
	      return store.clear();
	    }
	  };
	};

	// src/local-storage.coffee
	var localStorage$1 = storage$1('local');

	// src/pretend-storage.coffee
	var pretendStorage$1 = (function() {
	  var key, pretendStorage;
	  pretendStorage = {};
	  key = function(k) {
	    return "" + k;
	  };
	  return {
	    get: function(k) {
	      return pretendStorage[key(k)];
	    },
	    set: function(k, v, opts) {
	      return pretendStorage[key(k)] = v;
	    },
	    remove: function(k) {
	      return delete pretendStorage[key(k)];
	    },
	    clear: function() {
	      var results;
	      results = [];
	      for (key in pretendStorage) {
	        results.push(delete pretendStorage[key(k)]);
	      }
	      return results;
	    }
	  };
	})();

	// src/index.coffee
	var supported$1;

	supported$1 = function(storage) {
	  var ok, testStr;
	  try {
	    testStr = '__akasha__test__';
	    storage.set(testStr, testStr);
	    ok = (storage.get(testStr)) === testStr;
	    storage.remove(testStr);
	    return ok;
	  } catch (error) {
	    return false;
	  }
	};

	var index$5 = (function() {
	  if (supported$1(localStorage$1)) {
	    return localStorage$1;
	  } else if (supported$1(cookieStorage$1)) {
	    return cookieStorage$1;
	  } else {
	    return pretendStorage$1;
	  }
	})();
	//# sourceMappingURL=akasha.mjs.map

	class ShopStore {
	    constructor(client, analytics, raw) {
	        this.lastChecked = undefined;
	        this.countries = [];
	        this.isLoading = false;
	        this.step = 0;
	        this.bootstrapPromise = new Promise(() => { });
	        this._payment = {
	            account: {
	                name: '',
	                number: '',
	                cvc: '',
	                month: '',
	                year: '',
	            },
	        };
	        Object.assign(this, raw);
	        this.client = client;
	        this.commerce = new Commerce(client, undefined, [], [], analytics);
	        if (!this.order.currency) {
	            this.order.currency = 'usd';
	        }
	        this.load();
	    }
	    save() {
	        index$5.set('library.lastChecked', this.lastChecked);
	        index$5.set('library.countries', this.countries);
	    }
	    async load() {
	        let resolve, reject;
	        this.bootstrapPromise = new Promise((res, rej) => {
	            resolve = res;
	            reject = rej;
	        });
	        this.isLoading = true;
	        this.countries = index$5.get('library.countries') || [];
	        this.lastChecked = renderDate(new Date(), rfc3339);
	        try {
	            let res = await this.client.library.shopjs({
	                hasCountries: !!this.countries && this.countries.length != 0,
	                lastChecked: renderDate(this.lastChecked || '2000-01-01', rfc3339),
	            });
	            runInAction(() => {
	                this.countries = res.countries || this.countries;
	                this.save();
	                this.isLoading = false;
	            });
	            resolve();
	        }
	        catch (e) {
	            runInAction(() => {
	                this.isLoading = false;
	            });
	            reject(e);
	        }
	    }
	    get countryOptions() {
	        let countries = this.countries.slice().sort((a, b) => {
	            if (a.code.toUpperCase() == 'US') {
	                return -1;
	            }
	            else if (b.code.toUpperCase() == 'US') {
	                return 1;
	            }
	            if (a.name < b.name) {
	                return -1;
	            }
	            if (a.name > b.name) {
	                return 1;
	            }
	            return 0;
	        });
	        let options = {};
	        for (let k in countries) {
	            let country = countries[k];
	            options[country.code.toUpperCase()] = country.name;
	        }
	        return options;
	    }
	    get stateOptions() {
	        let options = {};
	        let countries = this.countries;
	        for (let k in countries) {
	            let country = countries[k];
	            let cCode = country.code.toUpperCase();
	            let c = options[cCode];
	            if (!c) {
	                c = options[cCode] = {};
	            }
	            let subdivisions = country.subdivisions.slice().sort((a, b) => {
	                if (a.name < b.name) {
	                    return -1;
	                }
	                if (a.name > b.name) {
	                    return 1;
	                }
	                return 0;
	            });
	            for (let k2 in subdivisions) {
	                let subdivision = subdivisions[k2];
	                c[subdivision.code.toUpperCase()] = subdivision.name;
	            }
	        }
	        return options;
	    }
	    setCoupon(code) {
	        return this.commerce.setCoupon(code);
	    }
	    setAddress(k, v) {
	        this.commerce.order.shippingAddress[k] = v;
	    }
	    get address() {
	        return this.commerce.order.shippingAddress;
	    }
	    setPayment(k, v) {
	        this._payment.account[k] = v;
	    }
	    get payment() {
	        return this._payment.account;
	    }
	    setOrder(k, v) {
	        return this.commerce.order[k] = v;
	    }
	    get order() {
	        return this.commerce.order;
	    }
	    setUser(k, v) {
	        this.commerce.user[k] = v;
	    }
	    get user() {
	        return this.commerce.user;
	    }
	    async checkout() {
	        if (this.isLoading) {
	            return;
	        }
	        this.isLoading = true;
	        try {
	            let o = await this.commerce.checkout(this._payment);
	            this.isLoading = false;
	            Order.clear();
	            return o;
	        }
	        catch (e) {
	            this.isLoading = false;
	            throw e;
	        }
	    }
	    async setItem(id, quantity) {
	        if (quantity) {
	            this.track('Viewed Checkout Step', { step: 1 });
	        }
	        await this.commerce.set(id, quantity);
	        if (quantity) {
	            this.track('Completed Checkout Step', { step: 1 });
	        }
	    }
	    track(event, opts) {
	        if (this.commerce.analytics) {
	            this.commerce.analytics.track(event, opts);
	        }
	    }
	    get count() {
	        return this.order.items.reduce((a, b) => a + b.quantity, 0);
	    }
	}
	__decorate([
	    observable,
	    __metadata("design:type", Object)
	], ShopStore.prototype, "lastChecked", void 0);
	__decorate([
	    observable,
	    __metadata("design:type", Array)
	], ShopStore.prototype, "countries", void 0);
	__decorate([
	    observable,
	    __metadata("design:type", Object)
	], ShopStore.prototype, "isLoading", void 0);
	__decorate([
	    observable,
	    __metadata("design:type", Object)
	], ShopStore.prototype, "tempOrder", void 0);
	__decorate([
	    observable,
	    __metadata("design:type", Number)
	], ShopStore.prototype, "step", void 0);
	__decorate([
	    observable,
	    __metadata("design:type", Commerce)
	], ShopStore.prototype, "commerce", void 0);
	__decorate([
	    observable,
	    __metadata("design:type", Promise)
	], ShopStore.prototype, "bootstrapPromise", void 0);
	__decorate([
	    observable,
	    __metadata("design:type", Object)
	], ShopStore.prototype, "client", void 0);
	__decorate([
	    observable,
	    __metadata("design:type", Object)
	], ShopStore.prototype, "_payment", void 0);
	__decorate([
	    action,
	    __metadata("design:type", Function),
	    __metadata("design:paramtypes", []),
	    __metadata("design:returntype", Promise)
	], ShopStore.prototype, "load", null);
	__decorate([
	    computed$1,
	    __metadata("design:type", Object),
	    __metadata("design:paramtypes", [])
	], ShopStore.prototype, "countryOptions", null);
	__decorate([
	    computed$1,
	    __metadata("design:type", Object),
	    __metadata("design:paramtypes", [])
	], ShopStore.prototype, "stateOptions", null);
	__decorate([
	    action,
	    __metadata("design:type", Function),
	    __metadata("design:paramtypes", [String]),
	    __metadata("design:returntype", Promise)
	], ShopStore.prototype, "setCoupon", null);
	__decorate([
	    action,
	    __metadata("design:type", Function),
	    __metadata("design:paramtypes", [String, Object]),
	    __metadata("design:returntype", void 0)
	], ShopStore.prototype, "setAddress", null);
	__decorate([
	    computed$1,
	    __metadata("design:type", Object),
	    __metadata("design:paramtypes", [])
	], ShopStore.prototype, "address", null);
	__decorate([
	    action,
	    __metadata("design:type", Function),
	    __metadata("design:paramtypes", [String, Object]),
	    __metadata("design:returntype", void 0)
	], ShopStore.prototype, "setPayment", null);
	__decorate([
	    computed$1,
	    __metadata("design:type", Object),
	    __metadata("design:paramtypes", [])
	], ShopStore.prototype, "payment", null);
	__decorate([
	    action,
	    __metadata("design:type", Function),
	    __metadata("design:paramtypes", [String, Object]),
	    __metadata("design:returntype", void 0)
	], ShopStore.prototype, "setOrder", null);
	__decorate([
	    computed$1,
	    __metadata("design:type", Object),
	    __metadata("design:paramtypes", [])
	], ShopStore.prototype, "order", null);
	__decorate([
	    action,
	    __metadata("design:type", Function),
	    __metadata("design:paramtypes", [String, Object]),
	    __metadata("design:returntype", void 0)
	], ShopStore.prototype, "setUser", null);
	__decorate([
	    computed$1,
	    __metadata("design:type", Object),
	    __metadata("design:paramtypes", [])
	], ShopStore.prototype, "user", null);
	__decorate([
	    action,
	    __metadata("design:type", Function),
	    __metadata("design:paramtypes", []),
	    __metadata("design:returntype", Promise)
	], ShopStore.prototype, "checkout", null);
	__decorate([
	    action,
	    __metadata("design:type", Function),
	    __metadata("design:paramtypes", [String, Number]),
	    __metadata("design:returntype", Promise)
	], ShopStore.prototype, "setItem", null);
	__decorate([
	    action,
	    __metadata("design:type", Function),
	    __metadata("design:paramtypes", [String, Object]),
	    __metadata("design:returntype", void 0)
	], ShopStore.prototype, "track", null);
	__decorate([
	    computed$1,
	    __metadata("design:type", Number),
	    __metadata("design:paramtypes", [])
	], ShopStore.prototype, "count", null);

	let client;
	let store;
	const getStore = (cl, analytics = undefined, opts = {}) => {
	    client = cl ? cl : client;
	    if (!client) {
	        return;
	    }
	    if (!store) {
	        store = new ShopStore(client, analytics, opts);
	    }
	    return store;
	};

	const checkout = (client, opts = {}) => {
	    let el = opts.el;
	    const ShopJS = () => {
	        const shopStore = useLocalStore(() => (getStore(client, { track: (event, opts) => console.log(event, opts) })));
	        return useObserver(() => (React__default.createElement(Checkout, { forms: [PaymentForm, ShippingForm], stepLabels: ['Payment Info', 'Shipping Info', 'Confirm Order'], contactIcon: opts.contactIcon, contactTitle: opts.contactTitle, shippingIcon: opts.shippingIcon, shippingTitle: opts.shippingTitle, paymentIcon: opts.paymentIcon, paymentTitle: opts.paymentTitle, cartIcon: opts.cartIcon, cartTitle: opts.cartTitle, address: shopStore.address, setAddress: (k, v) => shopStore.setAddress(k, v), order: shopStore.order, setOrder: (k, v) => shopStore.setOrder(k, v), payment: shopStore.payment, setPayment: (k, v) => shopStore.setPayment(k, v), user: shopStore.user, setUser: (k, v) => shopStore.setUser(k, v), setCoupon: (c) => shopStore.setCoupon(c), checkout: () => shopStore.checkout(), setItem: (id, quantity) => shopStore.setItem(id, quantity), countryOptions: shopStore.countryOptions, stateOptions: shopStore.stateOptions, isLoading: shopStore.isLoading, track: (event, opts) => shopStore.track(event, opts), termsUrl: opts.termsUrl || '/terms', showDescription: opts.showDescription, showTotals: opts.showTotals, cartCheckoutUrl: opts.cartCheckoutUrl, nativeSelects: opts.nativeSelects })));
	    };
	    ReactDOM__default.render(React__default.createElement(ShopJS, null), el);
	};
	const cart = (client, opts = {}) => {
	    let el = opts.el;
	    const ShopJSCart = () => {
	        const shopStore = useLocalStore(() => (getStore(client, { track: (event, opts) => console.log(event, opts) })));
	        return useObserver(() => (React__default.createElement(Cart$1, { cartIcon: opts.cartIcon, cartTitle: opts.cartTitle, order: shopStore.order, setCoupon: (c) => shopStore.setCoupon(c), setItem: (id, quantity) => shopStore.setItem(id, quantity), locked: opts.locked, showDescription: opts.showDescription, showTotals: opts.showTotals, cartCheckoutUrl: opts.cartCheckoutUrl, nativeSelects: opts.nativeSelects })));
	    };
	    ReactDOM__default.render(React__default.createElement(ShopJSCart, null), el);
	};
	const count = (client, opts = {}) => {
	    let el = opts.el;
	    const ShopJSCartCount = () => {
	        const shopStore = useLocalStore(() => (getStore(client, { track: (event, opts) => console.log(event, opts) })));
	        return useObserver(() => (React__default.createElement(CartCount, { count: shopStore.count })));
	    };
	    ReactDOM__default.render(React__default.createElement(ShopJSCartCount, null), el);
	};
	const shopify = function (client, opts = {}) {
	    const cartEl1 = document.getElementById('CartContainer');
	    cartEl1.removeAttribute('id');
	    const cartEl2 = cartEl1.cloneNode(true);
	    cartEl1.parentNode.replaceChild(cartEl2, cartEl1);
	    const countEl1 = document.getElementById('CartCount');
	    countEl1.removeAttribute('id');
	    const countEl2 = countEl1.cloneNode(true);
	    countEl1.parentNode.replaceChild(countEl2, countEl1);
	    cart(client, {
	        ...opts,
	        el: cartEl2,
	        showDescription: false,
	        showTotals: false,
	        nativeSelects: true,
	    });
	    count(client, {
	        ...opts,
	        el: countEl2,
	        showDescription: false,
	        nativeSelects: true,
	    });
	    // if (window.location.pathname.indexOf('cart') > -1) {
	    const checkoutEl1 = document.querySelector('form.cart');
	    checkoutEl1.removeAttribute('id');
	    const checkoutEl2 = checkoutEl1.cloneNode(true);
	    checkoutEl1.parentNode.replaceChild(checkoutEl2, checkoutEl1);
	    checkout(client, {
	        ...opts,
	        el: checkoutEl2,
	        showDescription: false,
	        nativeSelects: true,
	    });
	    // }
	    const css = document.createElement('style');
	    css.type = 'text/css';
	    const styles = `
  .cart-drawer.drawer .cart-items {
    padding: 0 !important;
  }
  .cart-drawer.drawer .cart {
    padding: 0 !important;
  }
  .cart-drawer.drawer .cart-icon {
    display: none;
  }
  .cart-drawer.drawer .cart-your-items-title {
    display: none;
  }
  `;
	    css.appendChild(document.createTextNode(styles));
	    document.getElementsByTagName('head')[0].appendChild(css);
	    document.getElementsByClassName('addToCart');
	};

	// src/promise-inspection.coffee
	var PromiseInspection;

	var PromiseInspection$1 = PromiseInspection = (function() {
	  function PromiseInspection(arg) {
	    this.state = arg.state, this.value = arg.value, this.reason = arg.reason;
	  }

	  PromiseInspection.prototype.isFulfilled = function() {
	    return this.state === 'fulfilled';
	  };

	  PromiseInspection.prototype.isRejected = function() {
	    return this.state === 'rejected';
	  };

	  return PromiseInspection;

	})();

	// src/utils.coffee
	var _undefined$1 = void 0;

	var _undefinedString$1 = 'undefined';

	// src/soon.coffee
	var soon;

	soon = (function() {
	  var bufferSize, callQueue, cqYield, fq, fqStart;
	  fq = [];
	  fqStart = 0;
	  bufferSize = 1024;
	  callQueue = function() {
	    var err;
	    while (fq.length - fqStart) {
	      try {
	        fq[fqStart]();
	      } catch (error) {
	        err = error;
	        if (typeof console !== 'undefined') {
	          console.error(err);
	        }
	      }
	      fq[fqStart++] = _undefined$1;
	      if (fqStart === bufferSize) {
	        fq.splice(0, bufferSize);
	        fqStart = 0;
	      }
	    }
	  };
	  cqYield = (function() {
	    var dd, mo;
	    if (typeof MutationObserver !== _undefinedString$1) {
	      dd = document.createElement('div');
	      mo = new MutationObserver(callQueue);
	      mo.observe(dd, {
	        attributes: true
	      });
	      return function() {
	        dd.setAttribute('a', 0);
	      };
	    }
	    if (typeof setImmediate !== _undefinedString$1) {
	      return function() {
	        setImmediate(callQueue);
	      };
	    }
	    return function() {
	      setTimeout(callQueue, 0);
	    };
	  })();
	  return function(fn) {
	    fq.push(fn);
	    if (fq.length - fqStart === 1) {
	      cqYield();
	    }
	  };
	})();

	var soon$1 = soon;

	// src/promise.coffee
	var Promise$1$1;
	var STATE_FULFILLED;
	var STATE_PENDING;
	var STATE_REJECTED;
	var _undefined;
	var rejectClient;
	var resolveClient;

	_undefined = void 0;

	STATE_PENDING = _undefined;

	STATE_FULFILLED = 'fulfilled';

	STATE_REJECTED = 'rejected';

	resolveClient = function(c, arg) {
	  var err, yret;
	  if (typeof c.y === 'function') {
	    try {
	      yret = c.y.call(_undefined, arg);
	      c.p.resolve(yret);
	    } catch (error) {
	      err = error;
	      c.p.reject(err);
	    }
	  } else {
	    c.p.resolve(arg);
	  }
	};

	rejectClient = function(c, reason) {
	  var err, yret;
	  if (typeof c.n === 'function') {
	    try {
	      yret = c.n.call(_undefined, reason);
	      c.p.resolve(yret);
	    } catch (error) {
	      err = error;
	      c.p.reject(err);
	    }
	  } else {
	    c.p.reject(reason);
	  }
	};

	Promise$1$1 = (function() {
	  function Promise(fn) {
	    if (fn) {
	      fn((function(_this) {
	        return function(arg) {
	          return _this.resolve(arg);
	        };
	      })(this), (function(_this) {
	        return function(arg) {
	          return _this.reject(arg);
	        };
	      })(this));
	    }
	  }

	  Promise.prototype.resolve = function(value) {
	    var clients, err, first, next;
	    if (this.state !== STATE_PENDING) {
	      return;
	    }
	    if (value === this) {
	      return this.reject(new TypeError('Attempt to resolve promise with self'));
	    }
	    if (value && (typeof value === 'function' || typeof value === 'object')) {
	      try {
	        first = true;
	        next = value.then;
	        if (typeof next === 'function') {
	          next.call(value, (function(_this) {
	            return function(ra) {
	              if (first) {
	                if (first) {
	                  first = false;
	                }
	                _this.resolve(ra);
	              }
	            };
	          })(this), (function(_this) {
	            return function(rr) {
	              if (first) {
	                first = false;
	                _this.reject(rr);
	              }
	            };
	          })(this));
	          return;
	        }
	      } catch (error) {
	        err = error;
	        if (first) {
	          this.reject(err);
	        }
	        return;
	      }
	    }
	    this.state = STATE_FULFILLED;
	    this.v = value;
	    if (clients = this.c) {
	      soon$1((function(_this) {
	        return function() {
	          var c, i, len;
	          for (i = 0, len = clients.length; i < len; i++) {
	            c = clients[i];
	            resolveClient(c, value);
	          }
	        };
	      })());
	    }
	  };

	  Promise.prototype.reject = function(reason) {
	    var clients;
	    if (this.state !== STATE_PENDING) {
	      return;
	    }
	    this.state = STATE_REJECTED;
	    this.v = reason;
	    if (clients = this.c) {
	      soon$1(function() {
	        var c, i, len;
	        for (i = 0, len = clients.length; i < len; i++) {
	          c = clients[i];
	          rejectClient(c, reason);
	        }
	      });
	    } else if (!Promise.suppressUncaughtRejectionError && typeof console !== 'undefined') {
	      console.log('Broken Promise, please catch rejections: ', reason, reason ? reason.stack : null);
	    }
	  };

	  Promise.prototype.then = function(onFulfilled, onRejected) {
	    var a, client, p, s;
	    p = new Promise;
	    client = {
	      y: onFulfilled,
	      n: onRejected,
	      p: p
	    };
	    if (this.state === STATE_PENDING) {
	      if (this.c) {
	        this.c.push(client);
	      } else {
	        this.c = [client];
	      }
	    } else {
	      s = this.state;
	      a = this.v;
	      soon$1(function() {
	        if (s === STATE_FULFILLED) {
	          resolveClient(client, a);
	        } else {
	          rejectClient(client, a);
	        }
	      });
	    }
	    return p;
	  };

	  Promise.prototype["catch"] = function(cfn) {
	    return this.then(null, cfn);
	  };

	  Promise.prototype["finally"] = function(cfn) {
	    return this.then(cfn, cfn);
	  };

	  Promise.prototype.timeout = function(ms, msg) {
	    msg = msg || 'timeout';
	    return new Promise((function(_this) {
	      return function(resolve, reject) {
	        setTimeout(function() {
	          return reject(Error(msg));
	        }, ms);
	        _this.then(function(val) {
	          resolve(val);
	        }, function(err) {
	          reject(err);
	        });
	      };
	    })(this));
	  };

	  Promise.prototype.callback = function(cb) {
	    if (typeof cb === 'function') {
	      this.then(function(val) {
	        return cb(null, val);
	      });
	      this["catch"](function(err) {
	        return cb(err, null);
	      });
	    }
	    return this;
	  };

	  return Promise;

	})();

	var Promise$2 = Promise$1$1;

	// src/helpers.coffee
	var resolve = function(val) {
	  var z;
	  z = new Promise$2;
	  z.resolve(val);
	  return z;
	};

	var reject = function(err) {
	  var z;
	  z = new Promise$2;
	  z.reject(err);
	  return z;
	};

	var all = function(ps) {
	  var i, j, len, p, rc, resolvePromise, results, retP;
	  results = [];
	  rc = 0;
	  retP = new Promise$2();
	  resolvePromise = function(p, i) {
	    if (!p || typeof p.then !== 'function') {
	      p = resolve(p);
	    }
	    p.then(function(yv) {
	      results[i] = yv;
	      rc++;
	      if (rc === ps.length) {
	        retP.resolve(results);
	      }
	    }, function(nv) {
	      retP.reject(nv);
	    });
	  };
	  for (i = j = 0, len = ps.length; j < len; i = ++j) {
	    p = ps[i];
	    resolvePromise(p, i);
	  }
	  if (!ps.length) {
	    retP.resolve(results);
	  }
	  return retP;
	};

	var reflect = function(promise) {
	  return new Promise$2(function(resolve, reject) {
	    return promise.then(function(value) {
	      return resolve(new PromiseInspection$1({
	        state: 'fulfilled',
	        value: value
	      }));
	    })["catch"](function(err) {
	      return resolve(new PromiseInspection$1({
	        state: 'rejected',
	        reason: err
	      }));
	    });
	  });
	};

	var settle = function(promises) {
	  return all(promises.map(reflect));
	};

	// src/index.coffee
	Promise$2.all = all;

	Promise$2.reflect = reflect;

	Promise$2.reject = reject;

	Promise$2.resolve = resolve;

	Promise$2.settle = settle;

	Promise$2.soon = soon$1;
	//# sourceMappingURL=broken.mjs.map

	// src/parse-headers.coffee
	var isArray;
	var parseHeaders;
	var trim;

	trim = function(s) {
	  return s.replace(/^\s*|\s*$/g, '');
	};

	isArray = function(obj) {
	  return Object.prototype.toString.call(obj) === '[object Array]';
	};

	var parseHeaders$1 = parseHeaders = function(headers) {
	  var i, index, key, len, ref, result, row, value;
	  if (!headers) {
	    return {};
	  }
	  result = {};
	  ref = trim(headers).split('\n');
	  for (i = 0, len = ref.length; i < len; i++) {
	    row = ref[i];
	    index = row.indexOf(':');
	    key = trim(row.slice(0, index)).toLowerCase();
	    value = trim(row.slice(index + 1));
	    if (typeof result[key] === 'undefined') {
	      result[key] = value;
	    } else if (isArray(result[key])) {
	      result[key].push(value);
	    } else {
	      result[key] = [result[key], value];
	    }
	    return;
	  }
	  return result;
	};

	// src/index.coffee

	/*
	 * Copyright 2015 Scott Brady
	 * MIT License
	 * https://github.com/scottbrady/xhr-promise/blob/master/LICENSE
	 */
	var XhrPromise;
	var defaults;

	defaults = {
	  method: 'GET',
	  headers: {},
	  data: null,
	  username: null,
	  password: null,
	  async: true
	};


	/*
	 * Module to wrap an XhrPromise in a promise.
	 */

	XhrPromise = (function() {
	  function XhrPromise() {}

	  XhrPromise.DEFAULT_CONTENT_TYPE = 'application/x-www-form-urlencoded; charset=UTF-8';

	  XhrPromise.Promise = Promise$2;


	  /*
	   * XhrPromise.send(options) -> Promise
	   * - options (Object): URL, method, data, etc.
	   *
	   * Create the XHR object and wire up event handlers to use a promise.
	   */

	  XhrPromise.prototype.send = function(options) {
	    if (options == null) {
	      options = {};
	    }
	    options = index$3({}, defaults, options);
	    return new Promise$2((function(_this) {
	      return function(resolve, reject) {
	        var e, header, ref, value, xhr;
	        if (!XMLHttpRequest) {
	          _this._handleError('browser', reject, null, "browser doesn't support XMLHttpRequest");
	          return;
	        }
	        if (typeof options.url !== 'string' || options.url.length === 0) {
	          _this._handleError('url', reject, null, 'URL is a required parameter');
	          return;
	        }
	        _this._xhr = xhr = new XMLHttpRequest();
	        xhr.onload = function() {
	          var responseText;
	          _this._detachWindowUnload();
	          try {
	            responseText = _this._getResponseText();
	          } catch (error) {
	            _this._handleError('parse', reject, null, 'invalid JSON response');
	            return;
	          }
	          return resolve({
	            url: _this._getResponseUrl(),
	            headers: _this._getHeaders(),
	            responseText: responseText,
	            status: xhr.status,
	            statusText: xhr.statusText,
	            xhr: xhr
	          });
	        };
	        xhr.onerror = function() {
	          return _this._handleError('error', reject);
	        };
	        xhr.ontimeout = function() {
	          return _this._handleError('timeout', reject);
	        };
	        xhr.onabort = function() {
	          return _this._handleError('abort', reject);
	        };
	        _this._attachWindowUnload();
	        xhr.open(options.method, options.url, options.async, options.username, options.password);
	        if ((options.data != null) && !options.headers['Content-Type']) {
	          options.headers['Content-Type'] = _this.constructor.DEFAULT_CONTENT_TYPE;
	        }
	        ref = options.headers;
	        for (header in ref) {
	          value = ref[header];
	          xhr.setRequestHeader(header, value);
	        }
	        try {
	          return xhr.send(options.data);
	        } catch (error) {
	          e = error;
	          return _this._handleError('send', reject, null, e.toString());
	        }
	      };
	    })(this));
	  };


	  /*
	   * XhrPromise.getXHR() -> XhrPromise
	   */

	  XhrPromise.prototype.getXHR = function() {
	    return this._xhr;
	  };


	  /*
	   * XhrPromise._attachWindowUnload()
	   *
	   * Fix for IE 9 and IE 10
	   * Internet Explorer freezes when you close a webpage during an XHR request
	   * https://support.microsoft.com/kb/2856746
	   *
	   */

	  XhrPromise.prototype._attachWindowUnload = function() {
	    this._unloadHandler = this._handleWindowUnload.bind(this);
	    if (window.attachEvent) {
	      return window.attachEvent('onunload', this._unloadHandler);
	    }
	  };


	  /*
	   * XhrPromise._detachWindowUnload()
	   */

	  XhrPromise.prototype._detachWindowUnload = function() {
	    if (window.detachEvent) {
	      return window.detachEvent('onunload', this._unloadHandler);
	    }
	  };


	  /*
	   * XhrPromise._getHeaders() -> Object
	   */

	  XhrPromise.prototype._getHeaders = function() {
	    return parseHeaders$1(this._xhr.getAllResponseHeaders());
	  };


	  /*
	   * XhrPromise._getResponseText() -> Mixed
	   *
	   * Parses response text JSON if present.
	   */

	  XhrPromise.prototype._getResponseText = function() {
	    var responseText;
	    responseText = typeof this._xhr.responseText === 'string' ? this._xhr.responseText : '';
	    switch (this._xhr.getResponseHeader('Content-Type')) {
	      case 'application/json':
	      case 'text/javascript':
	        responseText = JSON.parse(responseText + '');
	    }
	    return responseText;
	  };


	  /*
	   * XhrPromise._getResponseUrl() -> String
	   *
	   * Actual response URL after following redirects.
	   */

	  XhrPromise.prototype._getResponseUrl = function() {
	    if (this._xhr.responseURL != null) {
	      return this._xhr.responseURL;
	    }
	    if (/^X-Request-URL:/m.test(this._xhr.getAllResponseHeaders())) {
	      return this._xhr.getResponseHeader('X-Request-URL');
	    }
	    return '';
	  };


	  /*
	   * XhrPromise._handleError(reason, reject, status, statusText)
	   * - reason (String)
	   * - reject (Function)
	   * - status (String)
	   * - statusText (String)
	   */

	  XhrPromise.prototype._handleError = function(reason, reject, status, statusText) {
	    this._detachWindowUnload();
	    return reject({
	      reason: reason,
	      status: status || this._xhr.status,
	      statusText: statusText || this._xhr.statusText,
	      xhr: this._xhr
	    });
	  };


	  /*
	   * XhrPromise._handleWindowUnload()
	   */

	  XhrPromise.prototype._handleWindowUnload = function() {
	    return this._xhr.abort();
	  };

	  return XhrPromise;

	})();

	var XhrPromise$1 = XhrPromise;
	//# sourceMappingURL=es-xhr-promise.mjs.map

	// node_modules/es-tostring/index.mjs
	function toString$6(obj) {
	  return Object.prototype.toString.call(obj)
	}

	// node_modules/es-is/function.js
	// Generated by CoffeeScript 1.12.5
	var isFunction$2;

	var isFunction$1$1 = isFunction$2 = function(value) {
	  var str;
	  if (typeof window !== 'undefined' && value === window.alert) {
	    return true;
	  }
	  str = toString$6(value);
	  return str === '[object Function]' || str === '[object GeneratorFunction]' || str === '[object AsyncFunction]';
	};

	// node_modules/es-is/string.js

	// src/utils.coffee
	var updateParam;

	var statusOk = function(res) {
	  return res.status === 200;
	};

	var statusCreated = function(res) {
	  return res.status === 201;
	};

	var GET = 'GET';

	var POST = 'POST';

	var PATCH = 'PATCH';

	var newError = function(data, res, err) {
	  var message, ref, ref1, ref2, ref3, ref4;
	  if (res == null) {
	    res = {};
	  }
	  message = (ref = (ref1 = res.data) != null ? (ref2 = ref1.error) != null ? ref2.message : void 0 : void 0) != null ? ref : 'Request failed';
	  if (err == null) {
	    err = new Error(message);
	  }
	  err.data = res.data;
	  err.msg = message;
	  err.req = data;
	  err.responseText = res.data;
	  err.status = res.status;
	  err.type = (ref3 = res.data) != null ? (ref4 = ref3.error) != null ? ref4.type : void 0 : void 0;
	  return err;
	};

	updateParam = function(url, key, value) {
	  var hash, re, separator;
	  re = new RegExp('([?&])' + key + '=.*?(&|#|$)(.*)', 'gi');
	  if (re.test(url)) {
	    if (value != null) {
	      return url.replace(re, '$1' + key + '=' + value + '$2$3');
	    } else {
	      hash = url.split('#');
	      url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');
	      if (hash[1] != null) {
	        url += '#' + hash[1];
	      }
	      return url;
	    }
	  } else {
	    if (value != null) {
	      separator = url.indexOf('?') !== -1 ? '&' : '?';
	      hash = url.split('#');
	      url = hash[0] + separator + key + '=' + value;
	      if (hash[1] != null) {
	        url += '#' + hash[1];
	      }
	      return url;
	    } else {
	      return url;
	    }
	  }
	};

	var updateQuery = function(url, data) {
	  var k, v;
	  if (typeof data !== 'object') {
	    return url;
	  }
	  for (k in data) {
	    v = data[k];
	    url = updateParam(url, k, v);
	  }
	  return url;
	};

	// src/api.coffee
	var Api;

	Api = (function() {
	  Api.BLUEPRINTS = {};

	  Api.CLIENT = null;

	  function Api(opts) {
	    var blueprints, client, k, v;
	    if (opts == null) {
	      opts = {};
	    }
	    if (!(this instanceof Api)) {
	      return new Api(opts);
	    }
	    blueprints = opts.blueprints, client = opts.client;
	    this.client = client || new this.constructor.CLIENT(opts);
	    if (blueprints == null) {
	      blueprints = this.constructor.BLUEPRINTS;
	    }
	    for (k in blueprints) {
	      v = blueprints[k];
	      this.addBlueprints(k, v);
	    }
	  }

	  Api.prototype.addBlueprints = function(api, blueprints) {
	    var bp, name;
	    if (this[api] == null) {
	      this[api] = {};
	    }
	    for (name in blueprints) {
	      bp = blueprints[name];
	      this.addBlueprint(api, name, bp);
	    }
	  };

	  Api.prototype.addBlueprint = function(api, name, bp) {
	    var method;
	    if (isFunction$1$1(bp)) {
	      return this[api][name] = (function(_this) {
	        return function() {
	          return bp.apply(_this, arguments);
	        };
	      })(this);
	    }
	    if (bp.expects == null) {
	      bp.expects = statusOk;
	    }
	    if (bp.method == null) {
	      bp.method = GET;
	    }
	    method = (function(_this) {
	      return function(data, cb) {
	        var key;
	        key = void 0;
	        if (bp.useCustomerToken) {
	          key = _this.client.getCustomerToken();
	        }
	        return _this.client.request(bp, data, key).then(function(res) {
	          var ref, ref1;
	          if (((ref = res.data) != null ? ref.error : void 0) != null) {
	            throw newError(data, res);
	          }
	          if (!bp.expects(res)) {
	            throw newError(data, res);
	          }
	          if (bp.process != null) {
	            bp.process.call(_this, res);
	          }
	          return (ref1 = res.data) != null ? ref1 : res.body;
	        }).callback(cb);
	      };
	    })(this);
	    return this[api][name] = method;
	  };

	  Api.prototype.setKey = function(key) {
	    return this.client.setKey(key);
	  };

	  Api.prototype.setCustomerToken = function(key) {
	    return this.client.setCustomerToken(key);
	  };

	  Api.prototype.getCustomerToken = function() {
	    return this.client.getCustomerToken();
	  };

	  Api.prototype.deleteCustomerToken = function() {
	    return this.client.deleteCustomerToken();
	  };

	  Api.prototype.setStore = function(id) {
	    this.storeId = id;
	    return this.client.setStore(id);
	  };

	  return Api;

	})();

	var Api$1 = Api;

	// src/client/client.coffee
	var Client,
	  slice$2 = [].slice;

	Client = (function() {
	  function Client(opts) {
	    var k, v;
	    if (opts == null) {
	      opts = {};
	    }
	    this.opts = {
	      debug: false,
	      endpoint: 'https://api.hanzo.io',
	      session: {
	        name: 'hzo',
	        expires: 7 * 24 * 3600 * 1000
	      }
	    };
	    for (k in opts) {
	      v = opts[k];
	      this.opts[k] = v;
	    }
	  }

	  Client.prototype.getKey = function() {
	    return this.opts.key;
	  };

	  Client.prototype.setKey = function(key) {
	    return this.opts.key = key;
	  };

	  Client.prototype.getCustomerToken = function() {
	    var session;
	    if ((session = index$4.getJSON(this.opts.session.name)) != null) {
	      if (session.customerToken != null) {
	        this.customerToken = session.customerToken;
	      }
	    }
	    return this.customerToken;
	  };

	  Client.prototype.setCustomerToken = function(key) {
	    index$4.set(this.opts.session.name, {
	      customerToken: key
	    }, {
	      expires: this.opts.session.expires
	    });
	    return this.customerToken = key;
	  };

	  Client.prototype.deleteCustomerToken = function() {
	    index$4.set(this.opts.session.name, {
	      customerToken: null
	    }, {
	      expires: this.opts.session.expires
	    });
	    return this.customerToken = null;
	  };

	  Client.prototype.url = function(url, data, key) {
	    if (isFunction$1$1(url)) {
	      url = url.call(this, data);
	    }
	    return updateQuery(this.opts.endpoint + url, {
	      token: key
	    });
	  };

	  Client.prototype.log = function() {
	    var args;
	    args = 1 <= arguments.length ? slice$2.call(arguments, 0) : [];
	    args.unshift('hanzo.js>');
	    if (this.opts.debug && (typeof console !== "undefined" && console !== null)) {
	      return console.log.apply(console, args);
	    }
	  };

	  return Client;

	})();

	var Client$1 = Client;

	// src/client/browser.coffee
	var BrowserClient,
	  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
	  hasProp = {}.hasOwnProperty;

	BrowserClient = (function(superClass) {
	  extend(BrowserClient, superClass);

	  function BrowserClient(opts) {
	    BrowserClient.__super__.constructor.call(this, opts);
	    if (!(this instanceof BrowserClient)) {
	      return new BrowserClient(opts);
	    }
	    this.getCustomerToken();
	  }

	  BrowserClient.prototype.request = function(blueprint, data, key) {
	    var opts;
	    if (data == null) {
	      data = {};
	    }
	    if (key == null) {
	      key = this.getKey();
	    }
	    opts = {
	      url: this.url(blueprint.url, data, key),
	      method: blueprint.method
	    };
	    if (blueprint.method !== 'GET') {
	      opts.headers = {
	        'Content-Type': 'application/json'
	      };
	    }
	    if (blueprint.method === 'GET') {
	      opts.url = updateQuery(opts.url, data);
	    } else {
	      opts.data = JSON.stringify(data);
	    }
	    this.log('request', {
	      key: key,
	      opts: opts
	    });
	    return (new XhrPromise$1).send(opts).then((function(_this) {
	      return function(res) {
	        _this.log('response', res);
	        res.data = res.responseText;
	        return res;
	      };
	    })(this))["catch"]((function(_this) {
	      return function(res) {
	        var err, ref;
	        try {
	          res.data = (ref = res.responseText) != null ? ref : JSON.parse(res.xhr.responseText);
	        } catch (error) {
	          err = error;
	        }
	        err = newError(data, res, err);
	        _this.log('response', res);
	        _this.log('error', err);
	        throw err;
	      };
	    })(this));
	  };

	  return BrowserClient;

	})(Client$1);

	var Client$2 = BrowserClient;

	// src/blueprints/url.coffee
	var sp;

	var storePrefixed = sp = function(u) {
	  return function(x) {
	    var url;
	    if (isFunction$1$1(u)) {
	      url = u(x);
	    } else {
	      url = u;
	    }
	    if (this.storeId != null) {
	      return ("/store/" + this.storeId) + url;
	    } else {
	      return url;
	    }
	  };
	};

	var byId = function(name) {
	  switch (name) {
	    case 'coupon':
	      return sp(function(x) {
	        var ref;
	        return "/coupon/" + ((ref = x.code) != null ? ref : x);
	      });
	    case 'collection':
	      return sp(function(x) {
	        var ref;
	        return "/collection/" + ((ref = x.slug) != null ? ref : x);
	      });
	    case 'product':
	      return sp(function(x) {
	        var ref, ref1;
	        return "/product/" + ((ref = (ref1 = x.id) != null ? ref1 : x.slug) != null ? ref : x);
	      });
	    case 'variant':
	      return sp(function(x) {
	        var ref, ref1;
	        return "/variant/" + ((ref = (ref1 = x.id) != null ? ref1 : x.sku) != null ? ref : x);
	      });
	    case 'site':
	      return function(x) {
	        var ref, ref1;
	        return "/site/" + ((ref = (ref1 = x.id) != null ? ref1 : x.name) != null ? ref : x);
	      };
	    default:
	      return function(x) {
	        var ref;
	        return "/" + name + "/" + ((ref = x.id) != null ? ref : x);
	      };
	  }
	};

	// src/blueprints/browser.coffee
	var blueprints, createBlueprint, fn, fn1, i$2, j$1, len, len1, marketingModels, model, models;

	createBlueprint = function(name) {
	  var endpoint;
	  endpoint = "/" + name;
	  return {
	    list: {
	      url: endpoint,
	      method: GET,
	      expects: statusOk
	    },
	    get: {
	      url: byId(name),
	      method: GET,
	      expects: statusOk
	    }
	  };
	};

	blueprints = {
	  library: {
	    shopjs: {
	      url: '/library/shopjs',
	      method: POST,
	      expects: statusOk
	    }
	  },
	  account: {
	    get: {
	      url: '/account',
	      method: GET,
	      expects: statusOk,
	      useCustomerToken: true
	    },
	    update: {
	      url: '/account',
	      method: PATCH,
	      expects: statusOk,
	      useCustomerToken: true
	    },
	    exists: {
	      url: function(x) {
	        var ref, ref1, ref2;
	        return "/account/exists/" + ((ref = (ref1 = (ref2 = x.email) != null ? ref2 : x.username) != null ? ref1 : x.id) != null ? ref : x);
	      },
	      method: GET,
	      expects: statusOk,
	      process: function(res) {
	        return res.data.exists;
	      }
	    },
	    create: {
	      url: '/account/create',
	      method: POST,
	      expects: statusCreated
	    },
	    enable: {
	      url: function(x) {
	        var ref;
	        return "/account/enable/" + ((ref = x.tokenId) != null ? ref : x);
	      },
	      method: POST,
	      expects: statusOk
	    },
	    login: {
	      url: '/account/login',
	      method: POST,
	      expects: statusOk,
	      process: function(res) {
	        this.setCustomerToken(res.data.token);
	        return res;
	      }
	    },
	    logout: function() {
	      return this.deleteCustomerToken();
	    },
	    reset: {
	      url: '/account/reset',
	      method: POST,
	      expects: statusOk,
	      useCustomerToken: true
	    },
	    updateOrder: {
	      url: function(x) {
	        var ref, ref1;
	        return "/account/order/" + ((ref = (ref1 = x.orderId) != null ? ref1 : x.id) != null ? ref : x);
	      },
	      method: PATCH,
	      expects: statusOk,
	      useCustomerToken: true
	    },
	    confirm: {
	      url: function(x) {
	        var ref;
	        return "/account/confirm/" + ((ref = x.tokenId) != null ? ref : x);
	      },
	      method: POST,
	      expects: statusOk,
	      useCustomerToken: true
	    },
	    paymentMethod: {
	      url: function(x) {
	        return "/account/paymentmethod/" + x.type;
	      },
	      method: POST,
	      expects: statusCreated,
	      useCustomerToken: true
	    }
	  },
	  cart: {
	    create: {
	      url: '/cart',
	      method: POST,
	      expects: statusCreated
	    },
	    update: {
	      url: function(x) {
	        var ref;
	        return "/cart/" + ((ref = x.id) != null ? ref : x);
	      },
	      method: PATCH,
	      expects: statusOk
	    },
	    discard: {
	      url: function(x) {
	        var ref;
	        return "/cart/" + ((ref = x.id) != null ? ref : x) + "/discard";
	      },
	      method: POST,
	      expects: statusOk
	    },
	    set: {
	      url: function(x) {
	        var ref;
	        return "/cart/" + ((ref = x.id) != null ? ref : x) + "/set";
	      },
	      method: POST,
	      expects: statusOk
	    }
	  },
	  review: {
	    create: {
	      url: '/review',
	      method: POST,
	      expects: statusCreated
	    },
	    get: {
	      url: function(x) {
	        var ref;
	        return "/review/" + ((ref = x.id) != null ? ref : x);
	      },
	      method: GET,
	      expects: statusOk
	    }
	  },
	  checkout: {
	    authorize: {
	      url: storePrefixed('/checkout/authorize'),
	      method: POST,
	      expects: statusOk
	    },
	    capture: {
	      url: storePrefixed(function(x) {
	        var ref;
	        return "/checkout/capture/" + ((ref = x.orderId) != null ? ref : x);
	      }),
	      method: POST,
	      expects: statusOk
	    },
	    charge: {
	      url: storePrefixed('/checkout/charge'),
	      method: POST,
	      expects: statusOk
	    },
	    paypal: {
	      url: storePrefixed('/checkout/paypal'),
	      method: POST,
	      expects: statusOk
	    }
	  },
	  referrer: {
	    create: {
	      url: '/referrer',
	      method: POST,
	      expects: statusCreated
	    },
	    get: {
	      url: function(x) {
	        var ref;
	        return "/referrer/" + ((ref = x.id) != null ? ref : x);
	      },
	      method: GET,
	      expects: statusOk
	    }
	  },
	  marketing: {
	    create: {
	      url: '/marketing',
	      method: POST,
	      expects: statusCreated
	    }
	  }
	};

	models = ['collection', 'coupon', 'product', 'variant', 'movie', 'watchlist', 'copy', 'media'];

	fn = function(model) {
	  return blueprints[model] = createBlueprint(model);
	};
	for (i$2 = 0, len = models.length; i$2 < len; i$2++) {
	  model = models[i$2];
	  fn(model);
	}

	marketingModels = ['adcampaign', 'adconfig', 'adset', 'ad'];

	fn1 = function(model) {
	  return blueprints[model] = createBlueprint("marketing/" + model);
	};
	for (j$1 = 0, len1 = marketingModels.length; j$1 < len1; j$1++) {
	  model = marketingModels[j$1];
	  fn1(model);
	}

	var blueprints$1 = blueprints;

	// src/browser.coffee
	var Hanzo;

	Api$1.BLUEPRINTS = blueprints$1;

	Api$1.CLIENT = Client$2;

	Hanzo = function(opts) {
	  if (opts == null) {
	    opts = {};
	  }
	  if (opts.client == null) {
	    opts.client = new Client$2(opts);
	  }
	  if (opts.blueprints == null) {
	    opts.blueprints = blueprints$1;
	  }
	  return new Api$1(opts);
	};

	Hanzo.Api = Api$1;

	Hanzo.Client = Client$2;

	var Hanzo$1 = Hanzo;
	//# sourceMappingURL=hanzo.mjs.map

	if (typeof window !== 'undefined') {
	    window['ShopJS'] = {
	        Client: Hanzo$1,
	        ShippingForm,
	        PaymentForm,
	        Checkout,
	        start: checkout,
	        cart,
	        count,
	        shopify,
	        set: (...args) => {
	            const s = getStore();
	            if (!s) {
	                throw new Error('Use ShopJS.start before setting any items');
	            }
	            s.commerce.set.apply(s.commerce, args);
	        },
	        clear: () => {
	            const s = getStore();
	            if (!s) {
	                throw new Error('Use ShopJS.start before setting any items');
	            }
	            s.commerce.clear();
	        }
	    };
	}

	exports.Cart = Cart$1;
	exports.CartCount = CartCount;
	exports.Checkout = Checkout;
	exports.Client = Hanzo$1;
	exports.PaymentForm = PaymentForm;
	exports.ShippingForm = ShippingForm;
	exports.cart = cart;
	exports.count = count;
	exports.getStore = getStore;
	exports.shopify = shopify;
	exports.start = checkout;

	Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=index.umd.js.map
