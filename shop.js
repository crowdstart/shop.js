(function (global) {
  var process = {
    title: 'browser',
    browser: true,
    env: {},
    argv: [],
    nextTick: function (fn) {
      setTimeout(fn, 0)
    },
    cwd: function () {
      return '/'
    },
    chdir: function () {
    }
  };
  // Require a module
  function rqzt(file, callback) {
    if ({}.hasOwnProperty.call(rqzt.cache, file))
      return rqzt.cache[file];
    // Handle async require
    if (typeof callback == 'function') {
      rqzt.load(file, callback);
      return
    }
    var resolved = rqzt.resolve(file);
    if (!resolved)
      throw new Error('Failed to resolve module ' + file);
    var module$ = {
      id: file,
      rqzt: rqzt,
      filename: file,
      exports: {},
      loaded: false,
      parent: null,
      children: []
    };
    var dirname = file.slice(0, file.lastIndexOf('/') + 1);
    rqzt.cache[file] = module$.exports;
    resolved.call(module$.exports, module$, module$.exports, dirname, file);
    module$.loaded = true;
    return rqzt.cache[file] = module$.exports
  }
  rqzt.modules = {};
  rqzt.cache = {};
  rqzt.resolve = function (file) {
    return {}.hasOwnProperty.call(rqzt.modules, file) ? rqzt.modules[file] : void 0
  };
  // Define normal static module
  rqzt.define = function (file, fn) {
    rqzt.modules[file] = fn
  };
  // source: src/utils/patches.coffee
  rqzt.define('./utils/patches', function (module, exports, __dirname, __filename, process) {
    var agent, ieMajor, ieMinor, matches, raf, reg;
    agent = navigator.userAgent;
    reg = /MSIE\s?(\d+)(?:\.(\d+))?/i;
    matches = agent.match(reg);
    if (matches != null) {
      ieMajor = matches[1];
      ieMinor = matches[2]
    }
    if (window.Promise == null) {
      window.Promise = rqzt('broken/dist/broken')
    }
    raf = rqzt('raf');
    if (window.requestAnimationFrame == null) {
      window.requestAnimationFrame = raf
    }
    if (window.cancelAnimationFrame == null) {
      window.cancelAnimationFrame = raf.cancel
    }
    module.exports = {
      ieVersion: {
        major: ieMajor,
        minor: ieMinor
      }
    }
  });
  // source: node_modules/broken/dist/broken.js
  rqzt.define('broken/dist/broken', function (module, exports, __dirname, __filename, process) {
    'use strict';
    var PromiseInspection;
    var PromiseInspection$1 = PromiseInspection = function () {
      function PromiseInspection(arg) {
        this.state = arg.state, this.value = arg.value, this.reason = arg.reason
      }
      PromiseInspection.prototype.isFulfilled = function () {
        return this.state === 'fulfilled'
      };
      PromiseInspection.prototype.isRejected = function () {
        return this.state === 'rejected'
      };
      return PromiseInspection
    }();
    var _undefined$1 = void 0;
    var _undefinedString$1 = 'undefined';
    var soon;
    soon = function () {
      var bufferSize, callQueue, cqYield, fq, fqStart;
      fq = [];
      fqStart = 0;
      bufferSize = 1024;
      callQueue = function () {
        var err;
        while (fq.length - fqStart) {
          try {
            fq[fqStart]()
          } catch (error) {
            err = error;
            if (global.console) {
              global.console.error(err)
            }
          }
          fq[fqStart++] = _undefined$1;
          if (fqStart === bufferSize) {
            fq.splice(0, bufferSize);
            fqStart = 0
          }
        }
      };
      cqYield = function () {
        var dd, mo;
        if (typeof MutationObserver !== _undefinedString$1) {
          dd = document.createElement('div');
          mo = new MutationObserver(callQueue);
          mo.observe(dd, { attributes: true });
          return function () {
            dd.setAttribute('a', 0)
          }
        }
        if (typeof setImmediate !== _undefinedString$1) {
          return function () {
            setImmediate(callQueue)
          }
        }
        return function () {
          setTimeout(callQueue, 0)
        }
      }();
      return function (fn) {
        fq.push(fn);
        if (fq.length - fqStart === 1) {
          cqYield()
        }
      }
    }();
    var soon$1 = soon;
    var Promise$1;
    var STATE_FULFILLED;
    var STATE_PENDING;
    var STATE_REJECTED;
    var _undefined;
    var rejectClient;
    var resolveClient;
    _undefined = void 0;
    STATE_PENDING = _undefined;
    STATE_FULFILLED = 'fulfilled';
    STATE_REJECTED = 'rejected';
    resolveClient = function (c, arg) {
      var err, yret;
      if (typeof c.y === 'function') {
        try {
          yret = c.y.call(_undefined, arg);
          c.p.resolve(yret)
        } catch (error) {
          err = error;
          c.p.reject(err)
        }
      } else {
        c.p.resolve(arg)
      }
    };
    rejectClient = function (c, reason) {
      var err, yret;
      if (typeof c.n === 'function') {
        try {
          yret = c.n.call(_undefined, reason);
          c.p.resolve(yret)
        } catch (error) {
          err = error;
          c.p.reject(err)
        }
      } else {
        c.p.reject(reason)
      }
    };
    Promise$1 = function () {
      function Promise(fn) {
        if (fn) {
          fn(function (_this) {
            return function (arg) {
              return _this.resolve(arg)
            }
          }(this), function (_this) {
            return function (arg) {
              return _this.reject(arg)
            }
          }(this))
        }
      }
      Promise.prototype.resolve = function (value) {
        var clients, err, first, next;
        if (this.state !== STATE_PENDING) {
          return
        }
        if (value === this) {
          return this.reject(new TypeError('Attempt to resolve promise with self'))
        }
        if (value && (typeof value === 'function' || typeof value === 'object')) {
          try {
            first = true;
            next = value.then;
            if (typeof next === 'function') {
              next.call(value, function (_this) {
                return function (ra) {
                  if (first) {
                    if (first) {
                      first = false
                    }
                    _this.resolve(ra)
                  }
                }
              }(this), function (_this) {
                return function (rr) {
                  if (first) {
                    first = false;
                    _this.reject(rr)
                  }
                }
              }(this));
              return
            }
          } catch (error) {
            err = error;
            if (first) {
              this.reject(err)
            }
            return
          }
        }
        this.state = STATE_FULFILLED;
        this.v = value;
        if (clients = this.c) {
          soon$1(function (_this) {
            return function () {
              var c, i, len;
              for (i = 0, len = clients.length; i < len; i++) {
                c = clients[i];
                resolveClient(c, value)
              }
            }
          }(this))
        }
      };
      Promise.prototype.reject = function (reason) {
        var clients;
        if (this.state !== STATE_PENDING) {
          return
        }
        this.state = STATE_REJECTED;
        this.v = reason;
        if (clients = this.c) {
          soon$1(function () {
            var c, i, len;
            for (i = 0, len = clients.length; i < len; i++) {
              c = clients[i];
              rejectClient(c, reason)
            }
          })
        } else if (!Promise.suppressUncaughtRejectionError && global.console) {
          global.console.log('Broken Promise, please catch rejections: ', reason, reason ? reason.stack : null)
        }
      };
      Promise.prototype.then = function (onFulfilled, onRejected) {
        var a, client, p, s;
        p = new Promise;
        client = {
          y: onFulfilled,
          n: onRejected,
          p: p
        };
        if (this.state === STATE_PENDING) {
          if (this.c) {
            this.c.push(client)
          } else {
            this.c = [client]
          }
        } else {
          s = this.state;
          a = this.v;
          soon$1(function () {
            if (s === STATE_FULFILLED) {
              resolveClient(client, a)
            } else {
              rejectClient(client, a)
            }
          })
        }
        return p
      };
      Promise.prototype['catch'] = function (cfn) {
        return this.then(null, cfn)
      };
      Promise.prototype['finally'] = function (cfn) {
        return this.then(cfn, cfn)
      };
      Promise.prototype.timeout = function (ms, msg) {
        msg = msg || 'timeout';
        return new Promise(function (_this) {
          return function (resolve, reject) {
            setTimeout(function () {
              return reject(Error(msg))
            }, ms);
            _this.then(function (val) {
              resolve(val)
            }, function (err) {
              reject(err)
            })
          }
        }(this))
      };
      Promise.prototype.callback = function (cb) {
        if (typeof cb === 'function') {
          this.then(function (val) {
            return cb(null, val)
          });
          this['catch'](function (err) {
            return cb(err, null)
          })
        }
        return this
      };
      return Promise
    }();
    var Promise$2 = Promise$1;
    var resolve = function (val) {
      var z;
      z = new Promise$2;
      z.resolve(val);
      return z
    };
    var reject = function (err) {
      var z;
      z = new Promise$2;
      z.reject(err);
      return z
    };
    var all = function (ps) {
      var i, j, len, p, rc, resolvePromise, results, retP;
      results = [];
      rc = 0;
      retP = new Promise$2;
      resolvePromise = function (p, i) {
        if (!p || typeof p.then !== 'function') {
          p = resolve(p)
        }
        p.then(function (yv) {
          results[i] = yv;
          rc++;
          if (rc === ps.length) {
            retP.resolve(results)
          }
        }, function (nv) {
          retP.reject(nv)
        })
      };
      for (i = j = 0, len = ps.length; j < len; i = ++j) {
        p = ps[i];
        resolvePromise(p, i)
      }
      if (!ps.length) {
        retP.resolve(results)
      }
      return retP
    };
    var reflect = function (promise) {
      return new Promise$2(function (resolve, reject) {
        return promise.then(function (value) {
          return resolve(new PromiseInspection$1({
            state: 'fulfilled',
            value: value
          }))
        })['catch'](function (err) {
          return resolve(new PromiseInspection$1({
            state: 'rejected',
            reason: err
          }))
        })
      })
    };
    var settle = function (promises) {
      return all(promises.map(reflect))
    };
    Promise$2.all = all;
    Promise$2.reflect = reflect;
    Promise$2.reject = reject;
    Promise$2.resolve = resolve;
    Promise$2.settle = settle;
    Promise$2.soon = soon$1;
    module.exports = Promise$2
  });
  // source: node_modules/raf/index.js
  rqzt.define('raf', function (module, exports, __dirname, __filename, process) {
    var now = rqzt('performance-now/lib/performance-now'), root = typeof window === 'undefined' ? global : window, vendors = [
        'moz',
        'webkit'
      ], suffix = 'AnimationFrame', raf = root['request' + suffix], caf = root['cancel' + suffix] || root['cancelRequest' + suffix];
    for (var i = 0; !raf && i < vendors.length; i++) {
      raf = root[vendors[i] + 'Request' + suffix];
      caf = root[vendors[i] + 'Cancel' + suffix] || root[vendors[i] + 'CancelRequest' + suffix]
    }
    // Some versions of FF have rAF but not cAF
    if (!raf || !caf) {
      var last = 0, id = 0, queue = [], frameDuration = 1000 / 60;
      raf = function (callback) {
        if (queue.length === 0) {
          var _now = now(), next = Math.max(0, frameDuration - (_now - last));
          last = next + _now;
          setTimeout(function () {
            var cp = queue.slice(0);
            // Clear queue here to prevent
            // callbacks from appending listeners
            // to the current frame's queue
            queue.length = 0;
            for (var i = 0; i < cp.length; i++) {
              if (!cp[i].cancelled) {
                try {
                  cp[i].callback(last)
                } catch (e) {
                  setTimeout(function () {
                    throw e
                  }, 0)
                }
              }
            }
          }, Math.round(next))
        }
        queue.push({
          handle: ++id,
          callback: callback,
          cancelled: false
        });
        return id
      };
      caf = function (handle) {
        for (var i = 0; i < queue.length; i++) {
          if (queue[i].handle === handle) {
            queue[i].cancelled = true
          }
        }
      }
    }
    module.exports = function (fn) {
      // Wrap in a new function to prevent
      // `cancel` potentially being assigned
      // to the native rAF function
      return raf.call(root, fn)
    };
    module.exports.cancel = function () {
      caf.apply(root, arguments)
    };
    module.exports.polyfill = function () {
      root.requestAnimationFrame = raf;
      root.cancelAnimationFrame = caf
    }
  });
  // source: node_modules/performance-now/lib/performance-now.js
  rqzt.define('performance-now/lib/performance-now', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.7.1
    (function () {
      var getNanoSeconds, hrtime, loadTime;
      if (typeof performance !== 'undefined' && performance !== null && performance.now) {
        module.exports = function () {
          return performance.now()
        }
      } else if (typeof process !== 'undefined' && process !== null && process.hrtime) {
        module.exports = function () {
          return (getNanoSeconds() - loadTime) / 1000000
        };
        hrtime = process.hrtime;
        getNanoSeconds = function () {
          var hr;
          hr = hrtime();
          return hr[0] * 1000000000 + hr[1]
        };
        loadTime = getNanoSeconds()
      } else if (Date.now) {
        module.exports = function () {
          return Date.now() - loadTime
        };
        loadTime = Date.now()
      } else {
        module.exports = function () {
          return new Date().getTime() - loadTime
        };
        loadTime = new Date().getTime()
      }
    }.call(this))
  });
  // source: node_modules/riot/riot.js
  rqzt.define('riot/riot', function (module, exports, __dirname, __filename, process) {
    /* Riot v3.0.7, @license MIT */
    (function (global, factory) {
      typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) : typeof define === 'function' && define.amd ? define(['exports'], factory) : factory(global.riot = global.riot || {})
    }(this, function (exports) {
      'use strict';
      var __TAGS_CACHE = [];
      var __TAG_IMPL = {};
      var GLOBAL_MIXIN = '__global_mixin';
      var ATTRS_PREFIX = 'riot-';
      var REF_DIRECTIVES = [
        'data-ref',
        'ref'
      ];
      var IS_DIRECTIVE = 'data-is';
      var CONDITIONAL_DIRECTIVE = 'if';
      var LOOP_DIRECTIVE = 'each';
      var LOOP_NO_REORDER_DIRECTIVE = 'no-reorder';
      var SHOW_DIRECTIVE = 'show';
      var HIDE_DIRECTIVE = 'hide';
      var T_STRING = 'string';
      var T_OBJECT = 'object';
      var T_UNDEF = 'undefined';
      var T_FUNCTION = 'function';
      var XLINK_NS = 'http://www.w3.org/1999/xlink';
      var XLINK_REGEX = /^xlink:(\w+)/;
      var WIN = typeof window === T_UNDEF ? undefined : window;
      var RE_SPECIAL_TAGS = /^(?:t(?:body|head|foot|[rhd])|caption|col(?:group)?|opt(?:ion|group))$/;
      var RE_SPECIAL_TAGS_NO_OPTION = /^(?:t(?:body|head|foot|[rhd])|caption|col(?:group)?)$/;
      var RE_RESERVED_NAMES = /^(?:_(?:item|id|parent)|update|root|(?:un)?mount|mixin|is(?:Mounted|Loop)|tags|refs|parent|opts|trigger|o(?:n|ff|ne))$/;
      var RE_SVG_TAGS = /^(altGlyph|animate(?:Color)?|circle|clipPath|defs|ellipse|fe(?:Blend|ColorMatrix|ComponentTransfer|Composite|ConvolveMatrix|DiffuseLighting|DisplacementMap|Flood|GaussianBlur|Image|Merge|Morphology|Offset|SpecularLighting|Tile|Turbulence)|filter|font|foreignObject|g(?:lyph)?(?:Ref)?|image|line(?:arGradient)?|ma(?:rker|sk)|missing-glyph|path|pattern|poly(?:gon|line)|radialGradient|rect|stop|svg|switch|symbol|text(?:Path)?|tref|tspan|use)$/;
      var RE_HTML_ATTRS = /([-\w]+) ?= ?(?:"([^"]*)|'([^']*)|({[^}]*}))/g;
      var CASE_SENSITIVE_ATTRIBUTES = { 'viewbox': 'viewBox' };
      var RE_BOOL_ATTRS = /^(?:disabled|checked|readonly|required|allowfullscreen|auto(?:focus|play)|compact|controls|default|formnovalidate|hidden|ismap|itemscope|loop|multiple|muted|no(?:resize|shade|validate|wrap)?|open|reversed|seamless|selected|sortable|truespeed|typemustmatch)$/;
      var IE_VERSION = (WIN && WIN.document || {}).documentMode | 0;
      /**
 * Check whether a DOM node must be considered a part of an svg document
 * @param   { String } name -
 * @returns { Boolean } -
 */
      function isSVGTag(name) {
        return RE_SVG_TAGS.test(name)
      }
      /**
 * Check Check if the passed argument is undefined
 * @param   { String } value -
 * @returns { Boolean } -
 */
      function isBoolAttr(value) {
        return RE_BOOL_ATTRS.test(value)
      }
      /**
 * Check if passed argument is a function
 * @param   { * } value -
 * @returns { Boolean } -
 */
      function isFunction(value) {
        return typeof value === T_FUNCTION
      }
      /**
 * Check if passed argument is an object, exclude null
 * NOTE: use isObject(x) && !isArray(x) to excludes arrays.
 * @param   { * } value -
 * @returns { Boolean } -
 */
      function isObject(value) {
        return value && typeof value === T_OBJECT  // typeof null is 'object'
      }
      /**
 * Check if passed argument is undefined
 * @param   { * } value -
 * @returns { Boolean } -
 */
      function isUndefined(value) {
        return typeof value === T_UNDEF
      }
      /**
 * Check if passed argument is a string
 * @param   { * } value -
 * @returns { Boolean } -
 */
      function isString(value) {
        return typeof value === T_STRING
      }
      /**
 * Check if passed argument is empty. Different from falsy, because we dont consider 0 or false to be blank
 * @param { * } value -
 * @returns { Boolean } -
 */
      function isBlank(value) {
        return isUndefined(value) || value === null || value === ''
      }
      /**
 * Check if passed argument is a kind of array
 * @param   { * } value -
 * @returns { Boolean } -
 */
      function isArray(value) {
        return Array.isArray(value) || value instanceof Array
      }
      /**
 * Check whether object's property could be overridden
 * @param   { Object }  obj - source object
 * @param   { String }  key - object property
 * @returns { Boolean } -
 */
      function isWritable(obj, key) {
        var descriptor = Object.getOwnPropertyDescriptor(obj, key);
        return isUndefined(obj[key]) || descriptor && descriptor.writable
      }
      /**
 * Check if passed argument is a reserved name
 * @param   { String } value -
 * @returns { Boolean } -
 */
      function isReservedName(value) {
        return RE_RESERVED_NAMES.test(value)
      }
      var check = Object.freeze({
        isSVGTag: isSVGTag,
        isBoolAttr: isBoolAttr,
        isFunction: isFunction,
        isObject: isObject,
        isUndefined: isUndefined,
        isString: isString,
        isBlank: isBlank,
        isArray: isArray,
        isWritable: isWritable,
        isReservedName: isReservedName
      });
      /**
 * Shorter and fast way to select multiple nodes in the DOM
 * @param   { String } selector - DOM selector
 * @param   { Object } ctx - DOM node where the targets of our search will is located
 * @returns { Object } dom nodes found
 */
      function $$(selector, ctx) {
        return (ctx || document).querySelectorAll(selector)
      }
      /**
 * Shorter and fast way to select a single node in the DOM
 * @param   { String } selector - unique dom selector
 * @param   { Object } ctx - DOM node where the target of our search will is located
 * @returns { Object } dom node found
 */
      function $(selector, ctx) {
        return (ctx || document).querySelector(selector)
      }
      /**
 * Create a document fragment
 * @returns { Object } document fragment
 */
      function createFrag() {
        return document.createDocumentFragment()
      }
      /**
 * Create a document text node
 * @returns { Object } create a text node to use as placeholder
 */
      function createDOMPlaceholder() {
        return document.createTextNode('')
      }
      /**
 * Create a generic DOM node
 * @param   { String } name - name of the DOM node we want to create
 * @param   { Boolean } isSvg - should we use a SVG as parent node?
 * @returns { Object } DOM node just created
 */
      function mkEl(name, isSvg) {
        return isSvg ? document.createElementNS('http://www.w3.org/2000/svg', 'svg') : document.createElement(name)
      }
      /**
 * Get the outer html of any DOM node SVGs included
 * @param   { Object } el - DOM node to parse
 * @returns { String } el.outerHTML
 */
      function getOuterHTML(el) {
        if (el.outerHTML) {
          return el.outerHTML
        }  // some browsers do not support outerHTML on the SVGs tags
        else {
          var container = mkEl('div');
          container.appendChild(el.cloneNode(true));
          return container.innerHTML
        }
      }
      /**
 * Set the inner html of any DOM node SVGs included
 * @param { Object } container - DOM node where we'll inject new html
 * @param { String } html - html to inject
 */
      function setInnerHTML(container, html) {
        if (!isUndefined(container.innerHTML)) {
          container.innerHTML = html
        }  // some browsers do not support innerHTML on the SVGs tags
        else {
          var doc = new DOMParser().parseFromString(html, 'application/xml');
          var node = container.ownerDocument.importNode(doc.documentElement, true);
          container.appendChild(node)
        }
      }
      /**
 * Remove any DOM attribute from a node
 * @param   { Object } dom - DOM node we want to update
 * @param   { String } name - name of the property we want to remove
 */
      function remAttr(dom, name) {
        dom.removeAttribute(name)
      }
      /**
 * Get the value of any DOM attribute on a node
 * @param   { Object } dom - DOM node we want to parse
 * @param   { String } name - name of the attribute we want to get
 * @returns { String | undefined } name of the node attribute whether it exists
 */
      function getAttr(dom, name) {
        return dom.getAttribute(name)
      }
      /**
 * Set any DOM attribute
 * @param { Object } dom - DOM node we want to update
 * @param { String } name - name of the property we want to set
 * @param { String } val - value of the property we want to set
 */
      function setAttr(dom, name, val) {
        var xlink = XLINK_REGEX.exec(name);
        if (xlink && xlink[1]) {
          dom.setAttributeNS(XLINK_NS, xlink[1], val)
        } else {
          dom.setAttribute(name, val)
        }
      }
      /**
 * Insert safely a tag to fix #1962 #1649
 * @param   { HTMLElement } root - children container
 * @param   { HTMLElement } curr - node to insert
 * @param   { HTMLElement } next - node that should preceed the current node inserted
 */
      function safeInsert(root, curr, next) {
        root.insertBefore(curr, next.parentNode && next)
      }
      /**
 * Minimize risk: only zero or one _space_ between attr & value
 * @param   { String }   html - html string we want to parse
 * @param   { Function } fn - callback function to apply on any attribute found
 */
      function walkAttrs(html, fn) {
        if (!html) {
          return
        }
        var m;
        while (m = RE_HTML_ATTRS.exec(html)) {
          fn(m[1].toLowerCase(), m[2] || m[3] || m[4])
        }
      }
      /**
 * Walk down recursively all the children tags starting dom node
 * @param   { Object }   dom - starting node where we will start the recursion
 * @param   { Function } fn - callback to transform the child node just found
 * @param   { Object }   context - fn can optionally return an object, which is passed to children
 */
      function walkNodes(dom, fn, context) {
        if (dom) {
          var res = fn(dom, context);
          var next;
          // stop the recursion
          if (res === false) {
            return
          }
          dom = dom.firstChild;
          while (dom) {
            next = dom.nextSibling;
            walkNodes(dom, fn, res);
            dom = next
          }
        }
      }
      var dom = Object.freeze({
        $$: $$,
        $: $,
        createFrag: createFrag,
        createDOMPlaceholder: createDOMPlaceholder,
        mkEl: mkEl,
        getOuterHTML: getOuterHTML,
        setInnerHTML: setInnerHTML,
        remAttr: remAttr,
        getAttr: getAttr,
        setAttr: setAttr,
        safeInsert: safeInsert,
        walkAttrs: walkAttrs,
        walkNodes: walkNodes
      });
      var styleNode;
      var cssTextProp;
      var byName = {};
      var remainder = [];
      var needsInject = false;
      // skip the following code on the server
      if (WIN) {
        styleNode = function () {
          // create a new style element with the correct type
          var newNode = mkEl('style');
          setAttr(newNode, 'type', 'text/css');
          // replace any user node or insert the new one into the head
          var userNode = $('style[type=riot]');
          if (userNode) {
            if (userNode.id) {
              newNode.id = userNode.id
            }
            userNode.parentNode.replaceChild(newNode, userNode)
          } else {
            document.getElementsByTagName('head')[0].appendChild(newNode)
          }
          return newNode
        }();
        cssTextProp = styleNode.styleSheet
      }
      /**
 * Object that will be used to inject and manage the css of every tag instance
 */
      var styleManager = {
        styleNode: styleNode,
        /**
   * Save a tag style to be later injected into DOM
   * @param { String } css - css string
   * @param { String } name - if it's passed we will map the css to a tagname
   */
        add: function add(css, name) {
          if (name) {
            byName[name] = css
          } else {
            remainder.push(css)
          }
          needsInject = true
        },
        /**
   * Inject all previously saved tag styles into DOM
   * innerHTML seems slow: http://jsperf.com/riot-insert-style
   */
        inject: function inject() {
          if (!WIN || !needsInject) {
            return
          }
          needsInject = false;
          var style = Object.keys(byName).map(function (k) {
            return byName[k]
          }).concat(remainder).join('\n');
          if (cssTextProp) {
            cssTextProp.cssText = style
          } else {
            styleNode.innerHTML = style
          }
        }
      };
      /**
 * The riot template engine
 * @version v3.0.1
 */
      /**
 * riot.util.brackets
 *
 * - `brackets    ` - Returns a string or regex based on its parameter
 * - `brackets.set` - Change the current riot brackets
 *
 * @module
 */
      /* global riot */
      var brackets = function (UNDEF) {
        var REGLOB = 'g', R_MLCOMMS = /\/\*[^*]*\*+(?:[^*\/][^*]*\*+)*\//g, R_STRINGS = /"[^"\\]*(?:\\[\S\s][^"\\]*)*"|'[^'\\]*(?:\\[\S\s][^'\\]*)*'/g, S_QBLOCKS = R_STRINGS.source + '|' + /(?:\breturn\s+|(?:[$\w\)\]]|\+\+|--)\s*(\/)(?![*\/]))/.source + '|' + /\/(?=[^*\/])[^[\/\\]*(?:(?:\[(?:\\.|[^\]\\]*)*\]|\\.)[^[\/\\]*)*?(\/)[gim]*/.source, UNSUPPORTED = RegExp('[\\' + 'x00-\\x1F<>a-zA-Z0-9\'",;\\\\]'), NEED_ESCAPE = /(?=[[\]()*+?.^$|])/g, FINDBRACES = {
            '(': RegExp('([()])|' + S_QBLOCKS, REGLOB),
            '[': RegExp('([[\\]])|' + S_QBLOCKS, REGLOB),
            '{': RegExp('([{}])|' + S_QBLOCKS, REGLOB)
          }, DEFAULT = '{ }';
        var _pairs = [
          '{',
          '}',
          '{',
          '}',
          /{[^}]*}/,
          /\\([{}])/g,
          /\\({)|{/g,
          RegExp('\\\\(})|([[({])|(})|' + S_QBLOCKS, REGLOB),
          DEFAULT,
          /^\s*{\^?\s*([$\w]+)(?:\s*,\s*(\S+))?\s+in\s+(\S.*)\s*}/,
          /(^|[^\\]){=[\S\s]*?}/
        ];
        var cachedBrackets = UNDEF, _regex, _cache = [], _settings;
        function _loopback(re) {
          return re
        }
        function _rewrite(re, bp) {
          if (!bp) {
            bp = _cache
          }
          return new RegExp(re.source.replace(/{/g, bp[2]).replace(/}/g, bp[3]), re.global ? REGLOB : '')
        }
        function _create(pair) {
          if (pair === DEFAULT) {
            return _pairs
          }
          var arr = pair.split(' ');
          if (arr.length !== 2 || UNSUPPORTED.test(pair)) {
            throw new Error('Unsupported brackets "' + pair + '"')
          }
          arr = arr.concat(pair.replace(NEED_ESCAPE, '\\').split(' '));
          arr[4] = _rewrite(arr[1].length > 1 ? /{[\S\s]*?}/ : _pairs[4], arr);
          arr[5] = _rewrite(pair.length > 3 ? /\\({|})/g : _pairs[5], arr);
          arr[6] = _rewrite(_pairs[6], arr);
          arr[7] = RegExp('\\\\(' + arr[3] + ')|([[({])|(' + arr[3] + ')|' + S_QBLOCKS, REGLOB);
          arr[8] = pair;
          return arr
        }
        function _brackets(reOrIdx) {
          return reOrIdx instanceof RegExp ? _regex(reOrIdx) : _cache[reOrIdx]
        }
        _brackets.split = function split(str, tmpl, _bp) {
          // istanbul ignore next: _bp is for the compiler
          if (!_bp) {
            _bp = _cache
          }
          var parts = [], match, isexpr, start, pos, re = _bp[6];
          isexpr = start = re.lastIndex = 0;
          while (match = re.exec(str)) {
            pos = match.index;
            if (isexpr) {
              if (match[2]) {
                re.lastIndex = skipBraces(str, match[2], re.lastIndex);
                continue
              }
              if (!match[3]) {
                continue
              }
            }
            if (!match[1]) {
              unescapeStr(str.slice(start, pos));
              start = re.lastIndex;
              re = _bp[6 + (isexpr ^= 1)];
              re.lastIndex = start
            }
          }
          if (str && start < str.length) {
            unescapeStr(str.slice(start))
          }
          return parts;
          function unescapeStr(s) {
            if (tmpl || isexpr) {
              parts.push(s && s.replace(_bp[5], '$1'))
            } else {
              parts.push(s)
            }
          }
          function skipBraces(s, ch, ix) {
            var match, recch = FINDBRACES[ch];
            recch.lastIndex = ix;
            ix = 1;
            while (match = recch.exec(s)) {
              if (match[1] && !(match[1] === ch ? ++ix : --ix)) {
                break
              }
            }
            return ix ? s.length : recch.lastIndex
          }
        };
        _brackets.hasExpr = function hasExpr(str) {
          return _cache[4].test(str)
        };
        _brackets.loopKeys = function loopKeys(expr) {
          var m = expr.match(_cache[9]);
          return m ? {
            key: m[1],
            pos: m[2],
            val: _cache[0] + m[3].trim() + _cache[1]
          } : { val: expr.trim() }
        };
        _brackets.array = function array(pair) {
          return pair ? _create(pair) : _cache
        };
        function _reset(pair) {
          if ((pair || (pair = DEFAULT)) !== _cache[8]) {
            _cache = _create(pair);
            _regex = pair === DEFAULT ? _loopback : _rewrite;
            _cache[9] = _regex(_pairs[9])
          }
          cachedBrackets = pair
        }
        function _setSettings(o) {
          var b;
          o = o || {};
          b = o.brackets;
          Object.defineProperty(o, 'brackets', {
            set: _reset,
            get: function () {
              return cachedBrackets
            },
            enumerable: true
          });
          _settings = o;
          _reset(b)
        }
        Object.defineProperty(_brackets, 'settings', {
          set: _setSettings,
          get: function () {
            return _settings
          }
        });
        /* istanbul ignore next: in the browser riot is always in the scope */
        _brackets.settings = typeof riot !== 'undefined' && riot.settings || {};
        _brackets.set = _reset;
        _brackets.R_STRINGS = R_STRINGS;
        _brackets.R_MLCOMMS = R_MLCOMMS;
        _brackets.S_QBLOCKS = S_QBLOCKS;
        return _brackets
      }();
      /**
 * @module tmpl
 *
 * tmpl          - Root function, returns the template value, render with data
 * tmpl.hasExpr  - Test the existence of a expression inside a string
 * tmpl.loopKeys - Get the keys for an 'each' loop (used by `_each`)
 */
      var tmpl = function () {
        var _cache = {};
        function _tmpl(str, data) {
          if (!str) {
            return str
          }
          return (_cache[str] || (_cache[str] = _create(str))).call(data, _logErr)
        }
        _tmpl.hasExpr = brackets.hasExpr;
        _tmpl.loopKeys = brackets.loopKeys;
        // istanbul ignore next
        _tmpl.clearCache = function () {
          _cache = {}
        };
        _tmpl.errorHandler = null;
        function _logErr(err, ctx) {
          err.riotData = {
            tagName: ctx && ctx.root && ctx.root.tagName,
            _riot_id: ctx && ctx._riot_id
          };
          if (_tmpl.errorHandler) {
            _tmpl.errorHandler(err)
          } else if (typeof console !== 'undefined' && typeof console.error === 'function') {
            if (err.riotData.tagName) {
              void 0
            }
            void 0
          }
        }
        function _create(str) {
          var expr = _getTmpl(str);
          if (expr.slice(0, 11) !== 'try{return ') {
            expr = 'return ' + expr
          }
          return new Function('E', expr + ';')  // eslint-disable-line no-new-func
        }
        var CH_IDEXPR = String.fromCharCode(8279), RE_CSNAME = /^(?:(-?[_A-Za-z\xA0-\xFF][-\w\xA0-\xFF]*)|\u2057(\d+)~):/, RE_QBLOCK = RegExp(brackets.S_QBLOCKS, 'g'), RE_DQUOTE = /\u2057/g, RE_QBMARK = /\u2057(\d+)~/g;
        function _getTmpl(str) {
          var qstr = [], expr, parts = brackets.split(str.replace(RE_DQUOTE, '"'), 1);
          if (parts.length > 2 || parts[0]) {
            var i, j, list = [];
            for (i = j = 0; i < parts.length; ++i) {
              expr = parts[i];
              if (expr && (expr = i & 1 ? _parseExpr(expr, 1, qstr) : '"' + expr.replace(/\\/g, '\\\\').replace(/\r\n?|\n/g, '\\n').replace(/"/g, '\\"') + '"')) {
                list[j++] = expr
              }
            }
            expr = j < 2 ? list[0] : '[' + list.join(',') + '].join("")'
          } else {
            expr = _parseExpr(parts[1], 0, qstr)
          }
          if (qstr[0]) {
            expr = expr.replace(RE_QBMARK, function (_, pos) {
              return qstr[pos].replace(/\r/g, '\\r').replace(/\n/g, '\\n')
            })
          }
          return expr
        }
        var RE_BREND = {
          '(': /[()]/g,
          '[': /[[\]]/g,
          '{': /[{}]/g
        };
        function _parseExpr(expr, asText, qstr) {
          expr = expr.replace(RE_QBLOCK, function (s, div) {
            return s.length > 2 && !div ? CH_IDEXPR + (qstr.push(s) - 1) + '~' : s
          }).replace(/\s+/g, ' ').trim().replace(/\ ?([[\({},?\.:])\ ?/g, '$1');
          if (expr) {
            var list = [], cnt = 0, match;
            while (expr && (match = expr.match(RE_CSNAME)) && !match.index) {
              var key, jsb, re = /,|([[{(])|$/g;
              expr = RegExp.rightContext;
              key = match[2] ? qstr[match[2]].slice(1, -1).trim().replace(/\s+/g, ' ') : match[1];
              while (jsb = (match = re.exec(expr))[1]) {
                skipBraces(jsb, re)
              }
              jsb = expr.slice(0, match.index);
              expr = RegExp.rightContext;
              list[cnt++] = _wrapExpr(jsb, 1, key)
            }
            expr = !cnt ? _wrapExpr(expr, asText) : cnt > 1 ? '[' + list.join(',') + '].join(" ").trim()' : list[0]
          }
          return expr;
          function skipBraces(ch, re) {
            var mm, lv = 1, ir = RE_BREND[ch];
            ir.lastIndex = re.lastIndex;
            while (mm = ir.exec(expr)) {
              if (mm[0] === ch) {
                ++lv
              } else if (!--lv) {
                break
              }
            }
            re.lastIndex = lv ? expr.length : ir.lastIndex
          }
        }
        // istanbul ignore next: not both
        var
          // eslint-disable-next-line max-len
          JS_CONTEXT = '"in this?this:' + (typeof window !== 'object' ? 'global' : 'window') + ').', JS_VARNAME = /[,{][\$\w]+(?=:)|(^ *|[^$\w\.{])(?!(?:typeof|true|false|null|undefined|in|instanceof|is(?:Finite|NaN)|void|NaN|new|Date|RegExp|Math)(?![$\w]))([$_A-Za-z][$\w]*)/g, JS_NOPROPS = /^(?=(\.[$\w]+))\1(?:[^.[(]|$)/;
        function _wrapExpr(expr, asText, key) {
          var tb;
          expr = expr.replace(JS_VARNAME, function (match, p, mvar, pos, s) {
            if (mvar) {
              pos = tb ? 0 : pos + match.length;
              if (mvar !== 'this' && mvar !== 'global' && mvar !== 'window') {
                match = p + '("' + mvar + JS_CONTEXT + mvar;
                if (pos) {
                  tb = (s = s[pos]) === '.' || s === '(' || s === '['
                }
              } else if (pos) {
                tb = !JS_NOPROPS.test(s.slice(pos))
              }
            }
            return match
          });
          if (tb) {
            expr = 'try{return ' + expr + '}catch(e){E(e,this)}'
          }
          if (key) {
            expr = (tb ? 'function(){' + expr + '}.call(this)' : '(' + expr + ')') + '?"' + key + '":""'
          } else if (asText) {
            expr = 'function(v){' + (tb ? expr.replace('return ', 'v=') : 'v=(' + expr + ')') + ';return v||v===0?v:""}.call(this)'
          }
          return expr
        }
        _tmpl.version = brackets.version = 'v3.0.1';
        return _tmpl
      }();
      var observable$1 = function (el) {
        /**
   * Extend the original object or create a new empty one
   * @type { Object }
   */
        el = el || {};
        /**
   * Private variables
   */
        var callbacks = {}, slice = Array.prototype.slice;
        /**
   * Public Api
   */
        // extend the el object adding the observable methods
        Object.defineProperties(el, {
          /**
     * Listen to the given `event` ands
     * execute the `callback` each time an event is triggered.
     * @param  { String } event - event id
     * @param  { Function } fn - callback function
     * @returns { Object } el
     */
          on: {
            value: function (event, fn) {
              if (typeof fn == 'function') {
                (callbacks[event] = callbacks[event] || []).push(fn)
              }
              return el
            },
            enumerable: false,
            writable: false,
            configurable: false
          },
          /**
     * Removes the given `event` listeners
     * @param   { String } event - event id
     * @param   { Function } fn - callback function
     * @returns { Object } el
     */
          off: {
            value: function (event, fn) {
              if (event == '*' && !fn) {
                callbacks = {}
              } else {
                if (fn) {
                  var arr = callbacks[event];
                  for (var i = 0, cb; cb = arr && arr[i]; ++i) {
                    if (cb == fn) {
                      arr.splice(i--, 1)
                    }
                  }
                } else {
                  delete callbacks[event]
                }
              }
              return el
            },
            enumerable: false,
            writable: false,
            configurable: false
          },
          /**
     * Listen to the given `event` and
     * execute the `callback` at most once
     * @param   { String } event - event id
     * @param   { Function } fn - callback function
     * @returns { Object } el
     */
          one: {
            value: function (event, fn) {
              function on() {
                el.off(event, on);
                fn.apply(el, arguments)
              }
              return el.on(event, on)
            },
            enumerable: false,
            writable: false,
            configurable: false
          },
          /**
     * Execute all callback functions that listen to
     * the given `event`
     * @param   { String } event - event id
     * @returns { Object } el
     */
          trigger: {
            value: function (event) {
              var arguments$1 = arguments;
              // getting the arguments
              var arglen = arguments.length - 1, args = new Array(arglen), fns, fn, i;
              for (i = 0; i < arglen; i++) {
                args[i] = arguments$1[i + 1]  // skip first argument
              }
              fns = slice.call(callbacks[event] || [], 0);
              for (i = 0; fn = fns[i]; ++i) {
                fn.apply(el, args)
              }
              if (callbacks['*'] && event != '*') {
                el.trigger.apply(el, [
                  '*',
                  event
                ].concat(args))
              }
              return el
            },
            enumerable: false,
            writable: false,
            configurable: false
          }
        });
        return el
      };
      /**
 * Specialized function for looping an array-like collection with `each={}`
 * @param   { Array } list - collection of items
 * @param   {Function} fn - callback function
 * @returns { Array } the array looped
 */
      function each(list, fn) {
        var len = list ? list.length : 0;
        for (var i = 0, el; i < len; ++i) {
          el = list[i];
          // return false -> current item was removed by fn during the loop
          if (fn(el, i) === false) {
            i--
          }
        }
        return list
      }
      /**
 * Check whether an array contains an item
 * @param   { Array } array - target array
 * @param   { * } item - item to test
 * @returns { Boolean } -
 */
      function contains(array, item) {
        return ~array.indexOf(item)
      }
      /**
 * Convert a string containing dashes to camel case
 * @param   { String } str - input string
 * @returns { String } my-string -> myString
 */
      function toCamel(str) {
        return str.replace(/-(\w)/g, function (_, c) {
          return c.toUpperCase()
        })
      }
      /**
 * Faster String startsWith alternative
 * @param   { String } str - source string
 * @param   { String } value - test string
 * @returns { Boolean } -
 */
      function startsWith(str, value) {
        return str.slice(0, value.length) === value
      }
      /**
 * Helper function to set an immutable property
 * @param   { Object } el - object where the new property will be set
 * @param   { String } key - object key where the new property will be stored
 * @param   { * } value - value of the new property
 * @param   { Object } options - set the propery overriding the default options
 * @returns { Object } - the initial object
 */
      function defineProperty(el, key, value, options) {
        Object.defineProperty(el, key, extend({
          value: value,
          enumerable: false,
          writable: false,
          configurable: true
        }, options));
        return el
      }
      /**
 * Extend any object with other properties
 * @param   { Object } src - source object
 * @returns { Object } the resulting extended object
 *
 * var obj = { foo: 'baz' }
 * extend(obj, {bar: 'bar', foo: 'bar'})
 * console.log(obj) => {bar: 'bar', foo: 'bar'}
 *
 */
      function extend(src) {
        var obj, args = arguments;
        for (var i = 1; i < args.length; ++i) {
          if (obj = args[i]) {
            for (var key in obj) {
              // check if this property of the source object could be overridden
              if (isWritable(src, key)) {
                src[key] = obj[key]
              }
            }
          }
        }
        return src
      }
      var misc = Object.freeze({
        each: each,
        contains: contains,
        toCamel: toCamel,
        startsWith: startsWith,
        defineProperty: defineProperty,
        extend: extend
      });
      var EVENTS_PREFIX_REGEX = /^on/;
      /**
 * Trigger DOM events
 * @param   { HTMLElement } dom - dom element target of the event
 * @param   { Function } handler - user function
 * @param   { Object } e - event object
 */
      function handleEvent(dom, handler, e) {
        var ptag = this._parent, item = this._item;
        if (!item) {
          while (ptag && !item) {
            item = ptag._item;
            ptag = ptag._parent
          }
        }
        // override the event properties
        if (isWritable(e, 'currentTarget')) {
          e.currentTarget = dom
        }
        if (isWritable(e, 'target')) {
          e.target = e.srcElement
        }
        if (isWritable(e, 'which')) {
          e.which = e.charCode || e.keyCode
        }
        e.item = item;
        handler.call(this, e);
        if (!e.preventUpdate) {
          var p = getImmediateCustomParentTag(this);
          // fixes #2083
          if (p.isMounted) {
            p.update()
          }
        }
      }
      /**
 * Attach an event to a DOM node
 * @param { String } name - event name
 * @param { Function } handler - event callback
 * @param { Object } dom - dom node
 * @param { Tag } tag - tag instance
 */
      function setEventHandler(name, handler, dom, tag) {
        var eventName, cb = handleEvent.bind(tag, dom, handler);
        if (!dom.addEventListener) {
          dom[name] = cb;
          return
        }
        // avoid to bind twice the same event
        dom[name] = null;
        // normalize event name
        eventName = name.replace(EVENTS_PREFIX_REGEX, '');
        // cache the callback directly on the DOM node
        if (!dom._riotEvents) {
          dom._riotEvents = {}
        }
        if (dom._riotEvents[name]) {
          dom.removeEventListener(eventName, dom._riotEvents[name])
        }
        dom._riotEvents[name] = cb;
        dom.addEventListener(eventName, cb, false)
      }
      /**
 * Update dynamically created data-is tags with changing expressions
 * @param { Object } expr - expression tag and expression info
 * @param { Tag } parent - parent for tag creation
 */
      function updateDataIs(expr, parent) {
        var tagName = tmpl(expr.value, parent), conf;
        if (expr.tag && expr.tagName === tagName) {
          expr.tag.update();
          return
        }
        // sync _parent to accommodate changing tagnames
        if (expr.tag) {
          each(expr.attrs, function (a) {
            return setAttr(expr.tag.root, a.name, a.value)
          });
          expr.tag.unmount(true)
        }
        expr.impl = __TAG_IMPL[tagName];
        conf = {
          root: expr.dom,
          parent: parent,
          hasImpl: true,
          tagName: tagName
        };
        expr.tag = initChildTag(expr.impl, conf, expr.dom.innerHTML, parent);
        expr.tagName = tagName;
        expr.tag.mount();
        // parent is the placeholder tag, not the dynamic tag so clean up
        parent.on('unmount', function () {
          var delName = expr.tag.opts.dataIs, tags = expr.tag.parent.tags, _tags = expr.tag._parent.tags;
          arrayishRemove(tags, delName, expr.tag);
          arrayishRemove(_tags, delName, expr.tag);
          expr.tag.unmount()
        })
      }
      /**
 * Update on single tag expression
 * @this Tag
 * @param { Object } expr - expression logic
 * @returns { undefined }
 */
      function updateExpression(expr) {
        var dom = expr.dom, attrName = expr.attr, isToggle = contains([
            SHOW_DIRECTIVE,
            HIDE_DIRECTIVE
          ], attrName), value = tmpl(expr.expr, this), isValueAttr = attrName === 'riot-value', isVirtual = expr.root && expr.root.tagName === 'VIRTUAL', parent = dom && (expr.parent || dom.parentNode), old;
        if (expr.bool) {
          value = value ? attrName : false
        } else if (isUndefined(value) || value === null) {
          value = ''
        }
        if (expr._riot_id) {
          // if it's a tag
          if (expr.isMounted) {
            expr.update()  // if it hasn't been mounted yet, do that now.
          } else {
            expr.mount();
            if (isVirtual) {
              var frag = document.createDocumentFragment();
              makeVirtual.call(expr, frag);
              expr.root.parentElement.replaceChild(frag, expr.root)
            }
          }
          return
        }
        old = expr.value;
        expr.value = value;
        if (expr.update) {
          expr.update();
          return
        }
        if (expr.isRtag && value) {
          return updateDataIs(expr, this)
        }
        if (old === value) {
          return
        }
        // no change, so nothing more to do
        if (isValueAttr && dom.value === value) {
          return
        }
        // textarea and text nodes have no attribute name
        if (!attrName) {
          // about #815 w/o replace: the browser converts the value to a string,
          // the comparison by "==" does too, but not in the server
          value += '';
          // test for parent avoids error with invalid assignment to nodeValue
          if (parent) {
            // cache the parent node because somehow it will become null on IE
            // on the next iteration
            expr.parent = parent;
            if (parent.tagName === 'TEXTAREA') {
              parent.value = value;
              // #1113
              if (!IE_VERSION) {
                dom.nodeValue = value
              }  // #1625 IE throws here, nodeValue
            }  // will be available on 'updated'
            else {
              dom.nodeValue = value
            }
          }
          return
        }
        // remove original attribute
        if (!expr.isAttrRemoved || !value) {
          remAttr(dom, attrName);
          expr.isAttrRemoved = true
        }
        // event handler
        if (isFunction(value)) {
          setEventHandler(attrName, value, dom, this)  // show / hide
        } else if (isToggle) {
          if (attrName === HIDE_DIRECTIVE) {
            value = !value
          }
          dom.style.display = value ? '' : 'none'  // field value
        } else if (isValueAttr) {
          dom.value = value  // <img src="{ expr }">
        } else if (startsWith(attrName, ATTRS_PREFIX) && attrName !== IS_DIRECTIVE) {
          attrName = attrName.slice(ATTRS_PREFIX.length);
          if (CASE_SENSITIVE_ATTRIBUTES[attrName]) {
            attrName = CASE_SENSITIVE_ATTRIBUTES[attrName]
          }
          if (value != null) {
            setAttr(dom, attrName, value)
          }
        } else {
          // <select> <option selected={true}> </select>
          if (attrName === 'selected' && parent && /^(SELECT|OPTGROUP)$/.test(parent.tagName) && value) {
            parent.value = dom.value
          }
          if (expr.bool) {
            dom[attrName] = value;
            if (!value) {
              return
            }
          }
          if (value === 0 || value && typeof value !== T_OBJECT) {
            setAttr(dom, attrName, value)
          }
        }
      }
      /**
 * Update all the expressions in a Tag instance
 * @this Tag
 * @param { Array } expressions - expression that must be re evaluated
 */
      function updateAllExpressions(expressions) {
        each(expressions, updateExpression.bind(this))
      }
      var IfExpr = {
        init: function init(dom, tag, expr) {
          remAttr(dom, CONDITIONAL_DIRECTIVE);
          this.tag = tag;
          this.expr = expr;
          this.stub = document.createTextNode('');
          this.pristine = dom;
          var p = dom.parentNode;
          p.insertBefore(this.stub, dom);
          p.removeChild(dom);
          return this
        },
        update: function update() {
          var newValue = tmpl(this.expr, this.tag);
          if (newValue && !this.current) {
            // insert
            this.current = this.pristine.cloneNode(true);
            this.stub.parentNode.insertBefore(this.current, this.stub);
            this.expressions = [];
            parseExpressions.apply(this.tag, [
              this.current,
              this.expressions,
              true
            ])
          } else if (!newValue && this.current) {
            // remove
            unmountAll(this.expressions);
            if (this.current._tag) {
              this.current._tag.unmount()
            } else if (this.current.parentNode) {
              this.current.parentNode.removeChild(this.current)
            }
            this.current = null;
            this.expressions = []
          }
          if (newValue) {
            updateAllExpressions.call(this.tag, this.expressions)
          }
        },
        unmount: function unmount() {
          unmountAll(this.expressions || []);
          delete this.pristine;
          delete this.parentNode;
          delete this.stub
        }
      };
      var RefExpr = {
        init: function init(dom, parent, attrName, attrValue) {
          this.dom = dom;
          this.attr = attrName;
          this.rawValue = attrValue;
          this.parent = parent;
          this.hasExp = tmpl.hasExpr(attrValue);
          this.firstRun = true;
          return this
        },
        update: function update() {
          var value = this.rawValue;
          if (this.hasExp) {
            value = tmpl(this.rawValue, this.parent)
          }
          // if nothing changed, we're done
          if (!this.firstRun && value === this.value) {
            return
          }
          var customParent = this.parent && getImmediateCustomParentTag(this.parent);
          // if the referenced element is a custom tag, then we set the tag itself, rather than DOM
          var tagOrDom = this.tag || this.dom;
          // the name changed, so we need to remove it from the old key (if present)
          if (!isBlank(this.value) && customParent) {
            arrayishRemove(customParent.refs, this.value, tagOrDom)
          }
          if (isBlank(value)) {
            // if the value is blank, we remove it
            remAttr(this.dom, this.attr)
          } else {
            // add it to the refs of parent tag (this behavior was changed >=3.0)
            if (customParent) {
              arrayishAdd(customParent.refs, value, tagOrDom)
            }
            // set the actual DOM attr
            setAttr(this.dom, this.attr, value)
          }
          this.value = value;
          this.firstRun = false
        },
        unmount: function unmount() {
          var tagOrDom = this.tag || this.dom;
          var customParent = this.parent && getImmediateCustomParentTag(this.parent);
          if (!isBlank(this.value) && customParent) {
            arrayishRemove(customParent.refs, this.value, tagOrDom)
          }
          delete this.dom;
          delete this.parent
        }
      };
      /**
 * Convert the item looped into an object used to extend the child tag properties
 * @param   { Object } expr - object containing the keys used to extend the children tags
 * @param   { * } key - value to assign to the new object returned
 * @param   { * } val - value containing the position of the item in the array
 * @param   { Object } base - prototype object for the new item
 * @returns { Object } - new object containing the values of the original item
 *
 * The variables 'key' and 'val' are arbitrary.
 * They depend on the collection type looped (Array, Object)
 * and on the expression used on the each tag
 *
 */
      function mkitem(expr, key, val, base) {
        var item = base ? Object.create(base) : {};
        item[expr.key] = key;
        if (expr.pos) {
          item[expr.pos] = val
        }
        return item
      }
      /**
 * Unmount the redundant tags
 * @param   { Array } items - array containing the current items to loop
 * @param   { Array } tags - array containing all the children tags
 * @param   { String } tagName - key used to identify the type of tag
 */
      function unmountRedundant(items, tags, tagName) {
        var i = tags.length, j = items.length, t;
        while (i > j) {
          t = tags[--i];
          tags.splice(i, 1);
          t.unmount();
          arrayishRemove(t.parent, tagName, t, true)
        }
      }
      /**
 * Move the nested custom tags in non custom loop tags
 * @this Tag
 * @param   { Number } i - current position of the loop tag
 */
      function moveNestedTags(i) {
        var this$1 = this;
        each(Object.keys(this.tags), function (tagName) {
          var tag = this$1.tags[tagName];
          if (isArray(tag)) {
            each(tag, function (t) {
              moveChildTag.apply(t, [
                tagName,
                i
              ])
            })
          } else {
            moveChildTag.apply(tag, [
              tagName,
              i
            ])
          }
        })
      }
      /**
 * Move a child tag
 * @this Tag
 * @param   { HTMLElement } root - dom node containing all the loop children
 * @param   { Tag } nextTag - instance of the next tag preceding the one we want to move
 * @param   { Boolean } isVirtual - is it a virtual tag?
 */
      function move(root, nextTag, isVirtual) {
        if (isVirtual) {
          moveVirtual.apply(this, [
            root,
            nextTag
          ])
        } else {
          safeInsert(root, this.root, nextTag.root)
        }
      }
      /**
 * Insert and mount a child tag
 * @this Tag
 * @param   { HTMLElement } root - dom node containing all the loop children
 * @param   { Tag } nextTag - instance of the next tag preceding the one we want to insert
 * @param   { Boolean } isVirtual - is it a virtual tag?
 */
      function insert(root, nextTag, isVirtual) {
        if (isVirtual) {
          makeVirtual.apply(this, [
            root,
            nextTag
          ])
        } else {
          safeInsert(root, this.root, nextTag.root)
        }
      }
      /**
 * Append a new tag into the DOM
 * @this Tag
 * @param   { HTMLElement } root - dom node containing all the loop children
 * @param   { Boolean } isVirtual - is it a virtual tag?
 */
      function append(root, isVirtual) {
        if (isVirtual) {
          makeVirtual.call(this, root)
        } else {
          root.appendChild(this.root)
        }
      }
      /**
 * Manage tags having the 'each'
 * @param   { HTMLElement } dom - DOM node we need to loop
 * @param   { Tag } parent - parent tag instance where the dom node is contained
 * @param   { String } expr - string contained in the 'each' attribute
 * @returns { Object } expression object for this each loop
 */
      function _each(dom, parent, expr) {
        // remove the each property from the original tag
        remAttr(dom, LOOP_DIRECTIVE);
        var mustReorder = typeof getAttr(dom, LOOP_NO_REORDER_DIRECTIVE) !== T_STRING || remAttr(dom, LOOP_NO_REORDER_DIRECTIVE), tagName = getTagName(dom), impl = __TAG_IMPL[tagName] || { tmpl: getOuterHTML(dom) }, useRoot = RE_SPECIAL_TAGS.test(tagName), parentNode = dom.parentNode, ref = createDOMPlaceholder(), child = getTag(dom), ifExpr = getAttr(dom, CONDITIONAL_DIRECTIVE), tags = [], oldItems = [], hasKeys, isLoop = true, isAnonymous = !__TAG_IMPL[tagName], isVirtual = dom.tagName === 'VIRTUAL';
        // parse the each expression
        expr = tmpl.loopKeys(expr);
        expr.isLoop = true;
        if (ifExpr) {
          remAttr(dom, CONDITIONAL_DIRECTIVE)
        }
        // insert a marked where the loop tags will be injected
        parentNode.insertBefore(ref, dom);
        parentNode.removeChild(dom);
        expr.update = function updateEach() {
          // get the new items collection
          var items = tmpl(expr.val, parent), frag = createFrag(), isObject$$1 = !isArray(items), root = ref.parentNode;
          // object loop. any changes cause full redraw
          if (isObject$$1) {
            hasKeys = items || false;
            items = hasKeys ? Object.keys(items).map(function (key) {
              return mkitem(expr, items[key], key)
            }) : []
          } else {
            hasKeys = false
          }
          if (ifExpr) {
            items = items.filter(function (item, i) {
              if (expr.key && !isObject$$1) {
                return !!tmpl(ifExpr, mkitem(expr, item, i, parent))
              }
              return !!tmpl(ifExpr, extend(Object.create(parent), item))
            })
          }
          // loop all the new items
          each(items, function (item, i) {
            // reorder only if the items are objects
            var doReorder = mustReorder && typeof item === T_OBJECT && !hasKeys, oldPos = oldItems.indexOf(item), isNew = !~oldPos, mustAppend = i <= tags.length, pos = !isNew && doReorder ? oldPos : i,
              // does a tag exist in this position?
              tag = tags[pos];
            item = !hasKeys && expr.key ? mkitem(expr, item, i) : item;
            // new tag
            if (doReorder && isNew  // by default we always try to reorder the DOM elements
|| !doReorder && !tag  // with no-reorder we just update the old tags
) {
              tag = new Tag$1(impl, {
                parent: parent,
                isLoop: isLoop,
                isAnonymous: isAnonymous,
                root: useRoot ? root : dom.cloneNode(),
                item: item
              }, dom.innerHTML);
              // mount the tag
              tag.mount();
              if (mustAppend) {
                append.apply(tag, [
                  frag || root,
                  isVirtual
                ])
              } else {
                insert.apply(tag, [
                  root,
                  tags[i],
                  isVirtual
                ])
              }
              if (!mustAppend) {
                oldItems.splice(i, 0, item)
              }
              tags.splice(i, 0, tag);
              if (child) {
                arrayishAdd(parent.tags, tagName, tag, true)
              }
              pos = i  // handled here so no move
            } else {
              tag.update(item)
            }
            // reorder the tag if it's not located in its previous position
            if (pos !== i && doReorder) {
              // #closes 2040
              if (contains(items, oldItems[i])) {
                move.apply(tag, [
                  root,
                  tags[i],
                  isVirtual
                ])
              }
              // update the position attribute if it exists
              if (expr.pos) {
                tag[expr.pos] = i
              }
              // move the old tag instance
              tags.splice(i, 0, tags.splice(pos, 1)[0]);
              // move the old item
              oldItems.splice(i, 0, oldItems.splice(pos, 1)[0]);
              // if the loop tags are not custom
              // we need to move all their custom tags into the right position
              if (!child && tag.tags) {
                moveNestedTags.call(tag, i)
              }
            }
            // cache the original item to use it in the events bound to this node
            // and its children
            tag._item = item;
            // cache the real parent tag internally
            defineProperty(tag, '_parent', parent)
          });
          // remove the redundant tags
          unmountRedundant(items, tags, tagName);
          // clone the items array
          oldItems = items.slice();
          root.insertBefore(frag, ref)
        };
        expr.unmount = function () {
          each(tags, function (t) {
            t.unmount()
          })
        };
        return expr
      }
      /**
 * Walk the tag DOM to detect the expressions to evaluate
 * @this Tag
 * @param   { HTMLElement } root - root tag where we will start digging the expressions
 * @param   { Array } expressions - empty array where the expressions will be added
 * @param   { Boolean } mustIncludeRoot - flag to decide whether the root must be parsed as well
 * @returns { Object } an object containing the root noode and the dom tree
 */
      function parseExpressions(root, expressions, mustIncludeRoot) {
        var this$1 = this;
        var tree = { parent: { children: expressions } };
        walkNodes(root, function (dom, ctx) {
          var type = dom.nodeType, parent = ctx.parent, attr, expr, tagImpl;
          if (!mustIncludeRoot && dom === root) {
            return { parent: parent }
          }
          // text node
          if (type === 3 && dom.parentNode.tagName !== 'STYLE' && tmpl.hasExpr(dom.nodeValue)) {
            parent.children.push({
              dom: dom,
              expr: dom.nodeValue
            })
          }
          if (type !== 1) {
            return ctx
          }
          // not an element
          // loop. each does it's own thing (for now)
          if (attr = getAttr(dom, LOOP_DIRECTIVE)) {
            parent.children.push(_each(dom, this$1, attr));
            return false
          }
          // if-attrs become the new parent. Any following expressions (either on the current
          // element, or below it) become children of this expression.
          if (attr = getAttr(dom, CONDITIONAL_DIRECTIVE)) {
            parent.children.push(Object.create(IfExpr).init(dom, this$1, attr));
            return false
          }
          if (expr = getAttr(dom, IS_DIRECTIVE)) {
            if (tmpl.hasExpr(expr)) {
              parent.children.push({
                isRtag: true,
                expr: expr,
                dom: dom,
                attrs: [].slice.call(dom.attributes)
              });
              return false
            }
          }
          // if this is a tag, stop traversing here.
          // we ignore the root, since parseExpressions is called while we're mounting that root
          tagImpl = getTag(dom);
          if (tagImpl && (dom !== root || mustIncludeRoot)) {
            var conf = {
              root: dom,
              parent: this$1,
              hasImpl: true
            };
            parent.children.push(initChildTag(tagImpl, conf, dom.innerHTML, this$1));
            return false
          }
          // attribute expressions
          parseAttributes.apply(this$1, [
            dom,
            dom.attributes,
            function (attr, expr) {
              if (!expr) {
                return
              }
              parent.children.push(expr)
            }
          ]);
          // whatever the parent is, all child elements get the same parent.
          // If this element had an if-attr, that's the parent for all child elements
          return { parent: parent }
        }, tree);
        return {
          tree: tree,
          root: root
        }
      }
      /**
 * Calls `fn` for every attribute on an element. If that attr has an expression,
 * it is also passed to fn.
 * @this Tag
 * @param   { HTMLElement } dom - dom node to parse
 * @param   { Array } attrs - array of attributes
 * @param   { Function } fn - callback to exec on any iteration
 */
      function parseAttributes(dom, attrs, fn) {
        var this$1 = this;
        each(attrs, function (attr) {
          var name = attr.name, bool = isBoolAttr(name), expr;
          if (contains(REF_DIRECTIVES, name)) {
            expr = Object.create(RefExpr).init(dom, this$1, name, attr.value)
          } else if (tmpl.hasExpr(attr.value)) {
            expr = {
              dom: dom,
              expr: attr.value,
              attr: attr.name,
              bool: bool
            }
          }
          fn(attr, expr)
        })
      }
      /*
  Includes hacks needed for the Internet Explorer version 9 and below
  See: http://kangax.github.io/compat-table/es5/#ie8
       http://codeplanet.io/dropping-ie8/
*/
      var reHasYield = /<yield\b/i;
      var reYieldAll = /<yield\s*(?:\/>|>([\S\s]*?)<\/yield\s*>|>)/gi;
      var reYieldSrc = /<yield\s+to=['"]([^'">]*)['"]\s*>([\S\s]*?)<\/yield\s*>/gi;
      var reYieldDest = /<yield\s+from=['"]?([-\w]+)['"]?\s*(?:\/>|>([\S\s]*?)<\/yield\s*>)/gi;
      var rootEls = {
        tr: 'tbody',
        th: 'tr',
        td: 'tr',
        col: 'colgroup'
      };
      var tblTags = IE_VERSION && IE_VERSION < 10 ? RE_SPECIAL_TAGS : RE_SPECIAL_TAGS_NO_OPTION;
      var GENERIC = 'div';
      /*
  Creates the root element for table or select child elements:
  tr/th/td/thead/tfoot/tbody/caption/col/colgroup/option/optgroup
*/
      function specialTags(el, tmpl, tagName) {
        var select = tagName[0] === 'o', parent = select ? 'select>' : 'table>';
        // trim() is important here, this ensures we don't have artifacts,
        // so we can check if we have only one element inside the parent
        el.innerHTML = '<' + parent + tmpl.trim() + '</' + parent;
        parent = el.firstChild;
        // returns the immediate parent if tr/th/td/col is the only element, if not
        // returns the whole tree, as this can include additional elements
        if (select) {
          parent.selectedIndex = -1  // for IE9, compatible w/current riot behavior
        } else {
          // avoids insertion of cointainer inside container (ex: tbody inside tbody)
          var tname = rootEls[tagName];
          if (tname && parent.childElementCount === 1) {
            parent = $(tname, parent)
          }
        }
        return parent
      }
      /*
  Replace the yield tag from any tag template with the innerHTML of the
  original tag in the page
*/
      function replaceYield(tmpl, html) {
        // do nothing if no yield
        if (!reHasYield.test(tmpl)) {
          return tmpl
        }
        // be careful with #1343 - string on the source having `$1`
        var src = {};
        html = html && html.replace(reYieldSrc, function (_, ref, text) {
          src[ref] = src[ref] || text;
          // preserve first definition
          return ''
        }).trim();
        return tmpl.replace(reYieldDest, function (_, ref, def) {
          // yield with from - to attrs
          return src[ref] || def || ''
        }).replace(reYieldAll, function (_, def) {
          // yield without any "from"
          return html || def || ''
        })
      }
      /**
 * Creates a DOM element to wrap the given content. Normally an `DIV`, but can be
 * also a `TABLE`, `SELECT`, `TBODY`, `TR`, or `COLGROUP` element.
 *
 * @param   { String } tmpl  - The template coming from the custom tag definition
 * @param   { String } html - HTML content that comes from the DOM element where you
 *           will mount the tag, mostly the original tag in the page
 * @param   { Boolean } checkSvg - flag needed to know if we need to force the svg rendering in case of loop nodes
 * @returns { HTMLElement } DOM element with _tmpl_ merged through `YIELD` with the _html_.
 */
      function mkdom(tmpl, html, checkSvg) {
        var match = tmpl && tmpl.match(/^\s*<([-\w]+)/), tagName = match && match[1].toLowerCase(), el = mkEl(GENERIC, checkSvg && isSVGTag(tagName));
        // replace all the yield tags with the tag inner html
        tmpl = replaceYield(tmpl, html);
        /* istanbul ignore next */
        if (tblTags.test(tagName)) {
          el = specialTags(el, tmpl, tagName)
        } else {
          setInnerHTML(el, tmpl)
        }
        el.stub = true;
        return el
      }
      /**
 * Another way to create a riot tag a bit more es6 friendly
 * @param { HTMLElement } el - tag DOM selector or DOM node/s
 * @param { Object } opts - tag logic
 * @returns { Tag } new riot tag instance
 */
      function Tag$2(el, opts) {
        // get the tag properties from the class constructor
        var ref = this;
        var name = ref.name;
        var tmpl = ref.tmpl;
        var css = ref.css;
        var attrs = ref.attrs;
        var onCreate = ref.onCreate;
        // register a new tag and cache the class prototype
        if (!__TAG_IMPL[name]) {
          tag$1(name, tmpl, css, attrs, onCreate);
          // cache the class constructor
          __TAG_IMPL[name].class = this.constructor
        }
        // mount the tag using the class instance
        mountTo(el, name, opts, this);
        // inject the component css
        if (css) {
          styleManager.inject()
        }
        return this
      }
      /**
 * Create a new riot tag implementation
 * @param   { String }   name - name/id of the new riot tag
 * @param   { String }   tmpl - tag template
 * @param   { String }   css - custom tag css
 * @param   { String }   attrs - root tag attributes
 * @param   { Function } fn - user function
 * @returns { String } name/id of the tag just created
 */
      function tag$1(name, tmpl, css, attrs, fn) {
        if (isFunction(attrs)) {
          fn = attrs;
          if (/^[\w\-]+\s?=/.test(css)) {
            attrs = css;
            css = ''
          } else {
            attrs = ''
          }
        }
        if (css) {
          if (isFunction(css)) {
            fn = css
          } else {
            styleManager.add(css)
          }
        }
        name = name.toLowerCase();
        __TAG_IMPL[name] = {
          name: name,
          tmpl: tmpl,
          attrs: attrs,
          fn: fn
        };
        return name
      }
      /**
 * Create a new riot tag implementation (for use by the compiler)
 * @param   { String }   name - name/id of the new riot tag
 * @param   { String }   tmpl - tag template
 * @param   { String }   css - custom tag css
 * @param   { String }   attrs - root tag attributes
 * @param   { Function } fn - user function
 * @returns { String } name/id of the tag just created
 */
      function tag2$1(name, tmpl, css, attrs, fn) {
        if (css) {
          styleManager.add(css, name)
        }
        var exists = !!__TAG_IMPL[name];
        __TAG_IMPL[name] = {
          name: name,
          tmpl: tmpl,
          attrs: attrs,
          fn: fn
        };
        if (exists && util.hotReloader) {
          util.hotReloader(name)
        }
        return name
      }
      /**
 * Mount a tag using a specific tag implementation
 * @param   { * } selector - tag DOM selector or DOM node/s
 * @param   { String } tagName - tag implementation name
 * @param   { Object } opts - tag logic
 * @returns { Array } new tags instances
 */
      function mount$1(selector, tagName, opts) {
        var tags = [];
        function pushTagsTo(root) {
          if (root.tagName) {
            var riotTag = getAttr(root, IS_DIRECTIVE);
            // have tagName? force riot-tag to be the same
            if (tagName && riotTag !== tagName) {
              riotTag = tagName;
              setAttr(root, IS_DIRECTIVE, tagName)
            }
            var tag$$1 = mountTo(root, riotTag || root.tagName.toLowerCase(), opts);
            if (tag$$1) {
              tags.push(tag$$1)
            }
          } else if (root.length) {
            each(root, pushTagsTo)
          }  // assume nodeList
        }
        // inject styles into DOM
        styleManager.inject();
        if (isObject(tagName)) {
          opts = tagName;
          tagName = 0
        }
        var elem;
        var allTags;
        // crawl the DOM to find the tag
        if (isString(selector)) {
          selector = selector === '*' ? // select all registered tags
          // & tags found with the riot-tag attribute set
          allTags = selectTags() : // or just the ones named like the selector
          selector + selectTags(selector.split(/, */));
          // make sure to pass always a selector
          // to the querySelectorAll function
          elem = selector ? $$(selector) : []
        } else
          // probably you have passed already a tag or a NodeList
          {
            elem = selector
          }
        // select all the registered and mount them inside their root elements
        if (tagName === '*') {
          // get all custom tags
          tagName = allTags || selectTags();
          // if the root els it's just a single tag
          if (elem.tagName) {
            elem = $$(tagName, elem)
          } else {
            // select all the children for all the different root elements
            var nodeList = [];
            each(elem, function (_el) {
              return nodeList.push($$(tagName, _el))
            });
            elem = nodeList
          }
          // get rid of the tagName
          tagName = 0
        }
        pushTagsTo(elem);
        return tags
      }
      // Create a mixin that could be globally shared across all the tags
      var mixins = {};
      var globals = mixins[GLOBAL_MIXIN] = {};
      var _id = 0;
      /**
 * Create/Return a mixin by its name
 * @param   { String }  name - mixin name (global mixin if object)
 * @param   { Object }  mix - mixin logic
 * @param   { Boolean } g - is global?
 * @returns { Object }  the mixin logic
 */
      function mixin$1(name, mix, g) {
        // Unnamed global
        if (isObject(name)) {
          mixin$1('__unnamed_' + _id++, name, true);
          return
        }
        var store = g ? globals : mixins;
        // Getter
        if (!mix) {
          if (isUndefined(store[name])) {
            throw new Error('Unregistered mixin: ' + name)
          }
          return store[name]
        }
        // Setter
        store[name] = isFunction(mix) ? extend(mix.prototype, store[name] || {}) && mix : extend(store[name] || {}, mix)
      }
      /**
 * Update all the tags instances created
 * @returns { Array } all the tags instances
 */
      function update$1() {
        return each(__TAGS_CACHE, function (tag$$1) {
          return tag$$1.update()
        })
      }
      function unregister$1(name) {
        delete __TAG_IMPL[name]
      }
      // counter to give a unique id to all the Tag instances
      var __uid = 0;
      /**
 * We need to update opts for this tag. That requires updating the expressions
 * in any attributes on the tag, and then copying the result onto opts.
 * @this Tag
 * @param   {Boolean} isLoop - is it a loop tag?
 * @param   { Tag }  parent - parent tag node
 * @param   { Boolean }  isAnonymous - is it a tag without any impl? (a tag not registered)
 * @param   { Object }  opts - tag options
 * @param   { Array }  instAttrs - tag attributes array
 */
      function updateOpts(isLoop, parent, isAnonymous, opts, instAttrs) {
        // isAnonymous `each` tags treat `dom` and `root` differently. In this case
        // (and only this case) we don't need to do updateOpts, because the regular parse
        // will update those attrs. Plus, isAnonymous tags don't need opts anyway
        if (isLoop && isAnonymous) {
          return
        }
        var ctx = !isAnonymous && isLoop ? this : parent || this;
        each(instAttrs, function (attr) {
          if (attr.expr) {
            updateAllExpressions.call(ctx, [attr.expr])
          }
          opts[toCamel(attr.name)] = attr.expr ? attr.expr.value : attr.value
        })
      }
      /**
 * Tag class
 * @constructor
 * @param { Object } impl - it contains the tag template, and logic
 * @param { Object } conf - tag options
 * @param { String } innerHTML - html that eventually we need to inject in the tag
 */
      function Tag$1(impl, conf, innerHTML) {
        var opts = extend({}, conf.opts), parent = conf.parent, isLoop = conf.isLoop, isAnonymous = conf.isAnonymous, item = cleanUpData(conf.item), instAttrs = [],
          // All attributes on the Tag when it's first parsed
          implAttrs = [],
          // expressions on this type of Tag
          expressions = [], root = conf.root, tagName = conf.tagName || getTagName(root), isVirtual = tagName === 'virtual', propsInSyncWithParent = [], dom;
        // make this tag observable
        observable$1(this);
        // only call unmount if we have a valid __TAG_IMPL (has name property)
        if (impl.name && root._tag) {
          root._tag.unmount(true)
        }
        // not yet mounted
        this.isMounted = false;
        root.isLoop = isLoop;
        defineProperty(this, '_internal', {
          isAnonymous: isAnonymous,
          instAttrs: instAttrs,
          innerHTML: innerHTML,
          // these vars will be needed only for the virtual tags
          virts: [],
          tail: null,
          head: null
        });
        // create a unique id to this tag
        // it could be handy to use it also to improve the virtual dom rendering speed
        defineProperty(this, '_riot_id', ++__uid);
        // base 1 allows test !t._riot_id
        extend(this, {
          root: root,
          opts: opts
        }, item);
        // protect the "tags" and "refs" property from being overridden
        defineProperty(this, 'parent', parent || null);
        defineProperty(this, 'tags', {});
        defineProperty(this, 'refs', {});
        dom = mkdom(impl.tmpl, innerHTML, isLoop);
        /**
   * Update the tag expressions and options
   * @param   { * }  data - data we want to use to extend the tag properties
   * @returns { Tag } the current tag instance
   */
        defineProperty(this, 'update', function tagUpdate(data) {
          if (isFunction(this.shouldUpdate) && !this.shouldUpdate(data)) {
            return this
          }
          // make sure the data passed will not override
          // the component core methods
          data = cleanUpData(data);
          // inherit properties from the parent, but only for isAnonymous tags
          if (isLoop && isAnonymous) {
            inheritFrom.apply(this, [
              this.parent,
              propsInSyncWithParent
            ])
          }
          extend(this, data);
          updateOpts.apply(this, [
            isLoop,
            parent,
            isAnonymous,
            opts,
            instAttrs
          ]);
          if (this.isMounted) {
            this.trigger('update', data)
          }
          updateAllExpressions.call(this, expressions);
          if (this.isMounted) {
            this.trigger('updated')
          }
          return this
        }.bind(this));
        /**
   * Add a mixin to this tag
   * @returns { Tag } the current tag instance
   */
        defineProperty(this, 'mixin', function tagMixin() {
          var this$1 = this;
          each(arguments, function (mix) {
            var instance, props = [], obj;
            mix = isString(mix) ? mixin$1(mix) : mix;
            // check if the mixin is a function
            if (isFunction(mix)) {
              // create the new mixin instance
              instance = new mix
            } else {
              instance = mix
            }
            var proto = Object.getPrototypeOf(instance);
            // build multilevel prototype inheritance chain property list
            do {
              props = props.concat(Object.getOwnPropertyNames(obj || instance))
            } while (obj = Object.getPrototypeOf(obj || instance));
            // loop the keys in the function prototype or the all object keys
            each(props, function (key) {
              // bind methods to this
              // allow mixins to override other properties/parent mixins
              if (key !== 'init') {
                // check for getters/setters
                var descriptor = Object.getOwnPropertyDescriptor(instance, key) || Object.getOwnPropertyDescriptor(proto, key);
                var hasGetterSetter = descriptor && (descriptor.get || descriptor.set);
                // apply method only if it does not already exist on the instance
                if (!this$1.hasOwnProperty(key) && hasGetterSetter) {
                  Object.defineProperty(this$1, key, descriptor)
                } else {
                  this$1[key] = isFunction(instance[key]) ? instance[key].bind(this$1) : instance[key]
                }
              }
            });
            // init method will be called automatically
            if (instance.init) {
              instance.init.bind(this$1)()
            }
          });
          return this
        }.bind(this));
        /**
   * Mount the current tag instance
   * @returns { Tag } the current tag instance
   */
        defineProperty(this, 'mount', function tagMount() {
          var this$1 = this;
          root._tag = this;
          // keep a reference to the tag just created
          // Read all the attrs on this instance. This give us the info we need for updateOpts
          parseAttributes.apply(parent, [
            root,
            root.attributes,
            function (attr, expr) {
              if (!isAnonymous && RefExpr.isPrototypeOf(expr)) {
                expr.tag = this$1
              }
              attr.expr = expr;
              instAttrs.push(attr)
            }
          ]);
          // update the root adding custom attributes coming from the compiler
          implAttrs = [];
          walkAttrs(impl.attrs, function (k, v) {
            implAttrs.push({
              name: k,
              value: v
            })
          });
          parseAttributes.apply(this, [
            root,
            implAttrs,
            function (attr, expr) {
              if (expr) {
                expressions.push(expr)
              } else {
                setAttr(root, attr.name, attr.value)
              }
            }
          ]);
          // children in loop should inherit from true parent
          if (this._parent && isAnonymous) {
            inheritFrom.apply(this, [
              this._parent,
              propsInSyncWithParent
            ])
          }
          // initialiation
          updateOpts.apply(this, [
            isLoop,
            parent,
            isAnonymous,
            opts,
            instAttrs
          ]);
          // add global mixins
          var globalMixin = mixin$1(GLOBAL_MIXIN);
          if (globalMixin) {
            for (var i in globalMixin) {
              if (globalMixin.hasOwnProperty(i)) {
                this$1.mixin(globalMixin[i])
              }
            }
          }
          if (impl.fn) {
            impl.fn.call(this, opts)
          }
          this.trigger('before-mount');
          // parse layout after init. fn may calculate args for nested custom tags
          parseExpressions.apply(this, [
            dom,
            expressions,
            false
          ]);
          this.update(item);
          if (isLoop && isAnonymous) {
            // update the root attribute for the looped elements
            this.root = root = dom.firstChild
          } else {
            while (dom.firstChild) {
              root.appendChild(dom.firstChild)
            }
            if (root.stub) {
              root = parent.root
            }
          }
          defineProperty(this, 'root', root);
          this.isMounted = true;
          // if it's not a child tag we can trigger its mount event
          if (!this.parent || this.parent.isMounted) {
            this.trigger('mount')
          }  // otherwise we need to wait that the parent event gets triggered
          else {
            this.parent.one('mount', function () {
              this$1.trigger('mount')
            })
          }
          return this
        }.bind(this));
        /**
   * Unmount the tag instance
   * @param { Boolean } mustKeepRoot - if it's true the root node will not be removed
   * @returns { Tag } the current tag instance
   */
        defineProperty(this, 'unmount', function tagUnmount(mustKeepRoot) {
          var this$1 = this;
          var el = this.root, p = el.parentNode, ptag, tagIndex = __TAGS_CACHE.indexOf(this);
          this.trigger('before-unmount');
          // clear all attributes coming from the mounted tag
          walkAttrs(impl.attrs, function (name) {
            if (startsWith(name, ATTRS_PREFIX)) {
              name = name.slice(ATTRS_PREFIX.length)
            }
            remAttr(root, name)
          });
          // remove this tag instance from the global virtualDom variable
          if (~tagIndex) {
            __TAGS_CACHE.splice(tagIndex, 1)
          }
          if (p) {
            if (parent) {
              ptag = getImmediateCustomParentTag(parent);
              if (isVirtual) {
                Object.keys(this.tags).forEach(function (tagName) {
                  arrayishRemove(ptag.tags, tagName, this$1.tags[tagName])
                })
              } else {
                arrayishRemove(ptag.tags, tagName, this);
                if (parent !== ptag)
                  // remove from _parent too
                  {
                    arrayishRemove(parent.tags, tagName, this)
                  }
              }
            } else {
              while (el.firstChild) {
                el.removeChild(el.firstChild)
              }
            }
            if (!mustKeepRoot) {
              p.removeChild(el)
            } else {
              // the riot-tag and the data-is attributes aren't needed anymore, remove them
              remAttr(p, IS_DIRECTIVE)
            }
          }
          if (this._internal.virts) {
            each(this._internal.virts, function (v) {
              if (v.parentNode) {
                v.parentNode.removeChild(v)
              }
            })
          }
          // allow expressions to unmount themselves
          unmountAll(expressions);
          each(instAttrs, function (a) {
            return a.expr && a.expr.unmount && a.expr.unmount()
          });
          this.trigger('unmount');
          this.off('*');
          this.isMounted = false;
          delete this.root._tag;
          return this
        }.bind(this))
      }
      /**
 * Detect the tag implementation by a DOM node
 * @param   { Object } dom - DOM node we need to parse to get its tag implementation
 * @returns { Object } it returns an object containing the implementation of a custom tag (template and boot function)
 */
      function getTag(dom) {
        return dom.tagName && __TAG_IMPL[getAttr(dom, IS_DIRECTIVE) || getAttr(dom, IS_DIRECTIVE) || dom.tagName.toLowerCase()]
      }
      /**
 * Inherit properties from a target tag instance
 * @this Tag
 * @param   { Tag } target - tag where we will inherit properties
 * @param   { Array } propsInSyncWithParent - array of properties to sync with the target
 */
      function inheritFrom(target, propsInSyncWithParent) {
        var this$1 = this;
        each(Object.keys(target), function (k) {
          // some properties must be always in sync with the parent tag
          var mustSync = !isReservedName(k) && contains(propsInSyncWithParent, k);
          if (isUndefined(this$1[k]) || mustSync) {
            // track the property to keep in sync
            // so we can keep it updated
            if (!mustSync) {
              propsInSyncWithParent.push(k)
            }
            this$1[k] = target[k]
          }
        })
      }
      /**
 * Move the position of a custom tag in its parent tag
 * @this Tag
 * @param   { String } tagName - key where the tag was stored
 * @param   { Number } newPos - index where the new tag will be stored
 */
      function moveChildTag(tagName, newPos) {
        var parent = this.parent, tags;
        // no parent no move
        if (!parent) {
          return
        }
        tags = parent.tags[tagName];
        if (isArray(tags)) {
          tags.splice(newPos, 0, tags.splice(tags.indexOf(this), 1)[0])
        } else {
          arrayishAdd(parent.tags, tagName, this)
        }
      }
      /**
 * Create a new child tag including it correctly into its parent
 * @param   { Object } child - child tag implementation
 * @param   { Object } opts - tag options containing the DOM node where the tag will be mounted
 * @param   { String } innerHTML - inner html of the child node
 * @param   { Object } parent - instance of the parent tag including the child custom tag
 * @returns { Object } instance of the new child tag just created
 */
      function initChildTag(child, opts, innerHTML, parent) {
        var tag = new Tag$1(child, opts, innerHTML), tagName = opts.tagName || getTagName(opts.root, true), ptag = getImmediateCustomParentTag(parent);
        // fix for the parent attribute in the looped elements
        defineProperty(tag, 'parent', ptag);
        // store the real parent tag
        // in some cases this could be different from the custom parent tag
        // for example in nested loops
        tag._parent = parent;
        // add this tag to the custom parent tag
        arrayishAdd(ptag.tags, tagName, tag);
        // and also to the real parent tag
        if (ptag !== parent) {
          arrayishAdd(parent.tags, tagName, tag)
        }
        // empty the child node once we got its template
        // to avoid that its children get compiled multiple times
        opts.root.innerHTML = '';
        return tag
      }
      /**
 * Loop backward all the parents tree to detect the first custom parent tag
 * @param   { Object } tag - a Tag instance
 * @returns { Object } the instance of the first custom parent tag found
 */
      function getImmediateCustomParentTag(tag) {
        var ptag = tag;
        while (ptag._internal.isAnonymous) {
          if (!ptag.parent) {
            break
          }
          ptag = ptag.parent
        }
        return ptag
      }
      /**
 * Trigger the unmount method on all the expressions
 * @param   { Array } expressions - DOM expressions
 */
      function unmountAll(expressions) {
        each(expressions, function (expr) {
          if (expr instanceof Tag$1) {
            expr.unmount(true)
          } else if (expr.unmount) {
            expr.unmount()
          }
        })
      }
      /**
 * Get the tag name of any DOM node
 * @param   { Object } dom - DOM node we want to parse
 * @param   { Boolean } skipDataIs - hack to ignore the data-is attribute when attaching to parent
 * @returns { String } name to identify this dom node in riot
 */
      function getTagName(dom, skipDataIs) {
        var child = getTag(dom), namedTag = !skipDataIs && getAttr(dom, IS_DIRECTIVE);
        return namedTag && !tmpl.hasExpr(namedTag) ? namedTag : child ? child.name : dom.tagName.toLowerCase()
      }
      /**
 * With this function we avoid that the internal Tag methods get overridden
 * @param   { Object } data - options we want to use to extend the tag instance
 * @returns { Object } clean object without containing the riot internal reserved words
 */
      function cleanUpData(data) {
        if (!(data instanceof Tag$1) && !(data && isFunction(data.trigger))) {
          return data
        }
        var o = {};
        for (var key in data) {
          if (!RE_RESERVED_NAMES.test(key)) {
            o[key] = data[key]
          }
        }
        return o
      }
      /**
 * Set the property of an object for a given key. If something already
 * exists there, then it becomes an array containing both the old and new value.
 * @param { Object } obj - object on which to set the property
 * @param { String } key - property name
 * @param { Object } value - the value of the property to be set
 * @param { Boolean } ensureArray - ensure that the property remains an array
 */
      function arrayishAdd(obj, key, value, ensureArray) {
        var dest = obj[key];
        var isArr = isArray(dest);
        if (dest && dest === value) {
          return
        }
        // if the key was never set, set it once
        if (!dest && ensureArray) {
          obj[key] = [value]
        } else if (!dest) {
          obj[key] = value
        }  // if it was an array and not yet set
        else if (!isArr || isArr && !contains(dest, value)) {
          if (isArr) {
            dest.push(value)
          } else {
            obj[key] = [
              dest,
              value
            ]
          }
        }
      }
      /**
 * Removes an item from an object at a given key. If the key points to an array,
 * then the item is just removed from the array.
 * @param { Object } obj - object on which to remove the property
 * @param { String } key - property name
 * @param { Object } value - the value of the property to be removed
 * @param { Boolean } ensureArray - ensure that the property remains an array
*/
      function arrayishRemove(obj, key, value, ensureArray) {
        if (isArray(obj[key])) {
          each(obj[key], function (item, i) {
            if (item === value) {
              obj[key].splice(i, 1)
            }
          });
          if (!obj[key].length) {
            delete obj[key]
          } else if (obj[key].length === 1 && !ensureArray) {
            obj[key] = obj[key][0]
          }
        } else {
          delete obj[key]
        }  // otherwise just delete the key
      }
      /**
 * Check whether a DOM node is in stub mode, useful for the riot 'if' directive
 * @param   { Object }  dom - DOM node we want to parse
 * @returns { Boolean } -
 */
      function isInStub(dom) {
        while (dom) {
          if (dom.inStub) {
            return true
          }
          dom = dom.parentNode
        }
        return false
      }
      /**
 * Mount a tag creating new Tag instance
 * @param   { Object } root - dom node where the tag will be mounted
 * @param   { String } tagName - name of the riot tag we want to mount
 * @param   { Object } opts - options to pass to the Tag instance
 * @param   { Object } ctx - optional context that will be used to extend an existing class ( used in riot.Tag )
 * @returns { Tag } a new Tag instance
 */
      function mountTo(root, tagName, opts, ctx) {
        var impl = __TAG_IMPL[tagName], implClass = __TAG_IMPL[tagName].class, tag = ctx || (implClass ? Object.create(implClass.prototype) : {}),
          // cache the inner HTML to fix #855
          innerHTML = root._innerHTML = root._innerHTML || root.innerHTML;
        // clear the inner html
        root.innerHTML = '';
        var conf = {
          root: root,
          opts: opts
        };
        if (opts && opts.parent) {
          conf.parent = opts.parent
        }
        if (impl && root) {
          Tag$1.apply(tag, [
            impl,
            conf,
            innerHTML
          ])
        }
        if (tag && tag.mount) {
          tag.mount(true);
          // add this tag to the virtualDom variable
          if (!contains(__TAGS_CACHE, tag)) {
            __TAGS_CACHE.push(tag)
          }
        }
        return tag
      }
      /**
 * Adds the elements for a virtual tag
 * @this Tag
 * @param { Node } src - the node that will do the inserting or appending
 * @param { Tag } target - only if inserting, insert before this tag's first child
 */
      function makeVirtual(src, target) {
        var this$1 = this;
        var head = createDOMPlaceholder(), tail = createDOMPlaceholder(), frag = createFrag(), sib, el;
        this._internal.head = this.root.insertBefore(head, this.root.firstChild);
        this._internal.tail = this.root.appendChild(tail);
        el = this._internal.head;
        while (el) {
          sib = el.nextSibling;
          frag.appendChild(el);
          this$1._internal.virts.push(el);
          // hold for unmounting
          el = sib
        }
        if (target) {
          src.insertBefore(frag, target._internal.head)
        } else {
          src.appendChild(frag)
        }
      }
      /**
 * Move virtual tag and all child nodes
 * @this Tag
 * @param { Node } src  - the node that will do the inserting
 * @param { Tag } target - insert before this tag's first child
 */
      function moveVirtual(src, target) {
        var this$1 = this;
        var el = this._internal.head, frag = createFrag(), sib;
        while (el) {
          sib = el.nextSibling;
          frag.appendChild(el);
          el = sib;
          if (el === this$1._internal.tail) {
            frag.appendChild(el);
            src.insertBefore(frag, target._internal.head);
            break
          }
        }
      }
      /**
 * Get selectors for tags
 * @param   { Array } tags - tag names to select
 * @returns { String } selector
 */
      function selectTags(tags) {
        // select all tags
        if (!tags) {
          var keys = Object.keys(__TAG_IMPL);
          return keys + selectTags(keys)
        }
        return tags.filter(function (t) {
          return !/[^-\w]/.test(t)
        }).reduce(function (list, t) {
          var name = t.trim().toLowerCase();
          return list + ',[' + IS_DIRECTIVE + '="' + name + '"]'
        }, '')
      }
      var tags = Object.freeze({
        getTag: getTag,
        inheritFrom: inheritFrom,
        moveChildTag: moveChildTag,
        initChildTag: initChildTag,
        getImmediateCustomParentTag: getImmediateCustomParentTag,
        unmountAll: unmountAll,
        getTagName: getTagName,
        cleanUpData: cleanUpData,
        arrayishAdd: arrayishAdd,
        arrayishRemove: arrayishRemove,
        isInStub: isInStub,
        mountTo: mountTo,
        makeVirtual: makeVirtual,
        moveVirtual: moveVirtual,
        selectTags: selectTags
      });
      /**
 * Riot public api
 */
      var settings = Object.create(brackets.settings);
      var util = {
        tmpl: tmpl,
        brackets: brackets,
        styleManager: styleManager,
        vdom: __TAGS_CACHE,
        styleNode: styleManager.styleNode,
        // export the riot internal utils as well
        dom: dom,
        check: check,
        misc: misc,
        tags: tags
      };
      // export the core props/methods
      var Tag$$1 = Tag$2;
      var tag$$1 = tag$1;
      var tag2$$1 = tag2$1;
      var mount$$1 = mount$1;
      var mixin$$1 = mixin$1;
      var update$$1 = update$1;
      var unregister$$1 = unregister$1;
      var observable = observable$1;
      var riot$1 = {
        settings: settings,
        util: util,
        // core
        Tag: Tag$$1,
        tag: tag$$1,
        tag2: tag2$$1,
        mount: mount$$1,
        mixin: mixin$$1,
        update: update$$1,
        unregister: unregister$$1,
        observable: observable
      };
      exports.settings = settings;
      exports.util = util;
      exports.Tag = Tag$$1;
      exports.tag = tag$$1;
      exports.tag2 = tag2$$1;
      exports.mount = mount$$1;
      exports.mixin = mixin$$1;
      exports.update = update$$1;
      exports.unregister = unregister$$1;
      exports.observable = observable;
      exports['default'] = riot$1;
      Object.defineProperty(exports, '__esModule', { value: true })
    }))
  });
  // source: node_modules/extend/index.js
  rqzt.define('extend', function (module, exports, __dirname, __filename, process) {
    'use strict';
    var hasOwn = Object.prototype.hasOwnProperty;
    var toStr = Object.prototype.toString;
    var isArray = function isArray(arr) {
      if (typeof Array.isArray === 'function') {
        return Array.isArray(arr)
      }
      return toStr.call(arr) === '[object Array]'
    };
    var isPlainObject = function isPlainObject(obj) {
      if (!obj || toStr.call(obj) !== '[object Object]') {
        return false
      }
      var hasOwnConstructor = hasOwn.call(obj, 'constructor');
      var hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
      // Not own constructor property must be Object
      if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {
        return false
      }
      // Own properties are enumerated firstly, so to speed up,
      // if last one is own, then all properties are own.
      var key;
      for (key in obj) {
      }
      return typeof key === 'undefined' || hasOwn.call(obj, key)
    };
    module.exports = function extend() {
      var options, name, src, copy, copyIsArray, clone, target = arguments[0], i = 1, length = arguments.length, deep = false;
      // Handle a deep copy situation
      if (typeof target === 'boolean') {
        deep = target;
        target = arguments[1] || {};
        // skip the boolean and the target
        i = 2
      } else if (typeof target !== 'object' && typeof target !== 'function' || target == null) {
        target = {}
      }
      for (; i < length; ++i) {
        options = arguments[i];
        // Only deal with non-null/undefined values
        if (options != null) {
          // Extend the base object
          for (name in options) {
            src = target[name];
            copy = options[name];
            // Prevent never-ending loop
            if (target !== copy) {
              // Recurse if we're merging plain objects or arrays
              if (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {
                if (copyIsArray) {
                  copyIsArray = false;
                  clone = src && isArray(src) ? src : []
                } else {
                  clone = src && isPlainObject(src) ? src : {}
                }
                // Never move original objects, clone them
                target[name] = extend(deep, clone, copy)  // Don't bring in undefined values
              } else if (typeof copy !== 'undefined') {
                target[name] = copy
              }
            }
          }
        }
      }
      // Return the modified object
      return target
    }
  });
  // source: node_modules/referential/lib/index.js
  rqzt.define('referential/lib', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.11.1
    var refer;
    refer = rqzt('referential/lib/refer');
    refer.Ref = rqzt('referential/lib/ref');
    module.exports = refer  //# sourceMappingURL=index.js.map
  });
  // source: node_modules/referential/lib/refer.js
  rqzt.define('referential/lib/refer', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.11.1
    var Ref, refer;
    Ref = rqzt('referential/lib/ref');
    module.exports = refer = function (state, ref) {
      var fn, i, len, method, ref1, wrapper;
      if (ref == null) {
        ref = null
      }
      if (ref == null) {
        ref = new Ref(state)
      }
      wrapper = function (key) {
        return ref.get(key)
      };
      ref1 = [
        'value',
        'get',
        'set',
        'extend',
        'index',
        'ref'
      ];
      fn = function (method) {
        return wrapper[method] = function () {
          return ref[method].apply(ref, arguments)
        }
      };
      for (i = 0, len = ref1.length; i < len; i++) {
        method = ref1[i];
        fn(method)
      }
      wrapper.refer = function (key) {
        return refer(null, ref.ref(key))
      };
      wrapper.clone = function (key) {
        return refer(null, ref.clone(key))
      };
      return wrapper
    }  //# sourceMappingURL=refer.js.map
  });
  // source: node_modules/referential/lib/ref.js
  rqzt.define('referential/lib/ref', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.11.1
    var Ref, extend, isArray, isNumber, isObject, isString, nextId;
    extend = rqzt('node.extend');
    isArray = rqzt('is-array');
    isNumber = rqzt('is-number');
    isObject = rqzt('is-object');
    isString = rqzt('is-string');
    nextId = function () {
      var ids;
      ids = 0;
      return function () {
        return ids++
      }
    }();
    module.exports = Ref = function () {
      function Ref(_value, parent, key1) {
        this._value = _value;
        this.parent = parent;
        this.key = key1;
        this._cache = {};
        this._children = {};
        this._id = nextId();
        if (this.parent != null) {
          this.parent._children[this._id] = this
        }
        this
      }
      Ref.prototype._mutate = function (key) {
        var child, id, ref;
        this._cache = {};
        ref = this._children;
        for (id in ref) {
          child = ref[id];
          child._mutate()
        }
        return this
      };
      Ref.prototype.destroy = function () {
        var child, id, ref;
        ref = this._children;
        for (id in ref) {
          child = ref[id];
          child.destroy()
        }
        delete this._cache;
        delete this._children;
        delete this.parent._children[this._id];
        return this
      };
      Ref.prototype.value = function (state) {
        if (!this.parent) {
          if (state != null) {
            this._value = state
          }
          return this._value
        }
        if (state != null) {
          return this.parent.set(this.key, state)
        } else {
          return this.parent.get(this.key)
        }
      };
      Ref.prototype.ref = function (key) {
        if (!key) {
          return this
        }
        return new Ref(null, this, key)
      };
      Ref.prototype.get = function (key) {
        if (!key) {
          return this.value()
        } else {
          if (this._cache[key]) {
            return this._cache[key]
          }
          return this._cache[key] = this.index(key)
        }
      };
      Ref.prototype.set = function (key, value) {
        this._mutate(key);
        if (value == null) {
          this.value(extend(this.value(), key))
        } else {
          this.index(key, value)
        }
        return this
      };
      Ref.prototype.extend = function (key, value) {
        var clone;
        this._mutate(key);
        if (value == null) {
          this.value(extend(true, this.value(), key))
        } else {
          if (isObject(value)) {
            this.value(extend(true, this.ref(key).get(), value))
          } else {
            clone = this.clone();
            this.set(key, value);
            this.value(extend(true, clone.get(), this.value()))
          }
        }
        return this
      };
      Ref.prototype.clone = function (key) {
        return new Ref(extend(true, {}, this.get(key)))
      };
      Ref.prototype.index = function (key, value, obj, prev) {
        var next, prop, props;
        if (obj == null) {
          obj = this.value()
        }
        if (this.parent) {
          return this.parent.index(this.key + '.' + key, value)
        }
        if (isNumber(key)) {
          key = String(key)
        }
        props = key.split('.');
        if (value == null) {
          while (prop = props.shift()) {
            if (!props.length) {
              return obj != null ? obj[prop] : void 0
            }
            obj = obj != null ? obj[prop] : void 0
          }
          return
        }
        while (prop = props.shift()) {
          if (!props.length) {
            return obj[prop] = value
          } else {
            next = props[0];
            if (obj[next] == null) {
              if (isNumber(next)) {
                if (obj[prop] == null) {
                  obj[prop] = []
                }
              } else {
                if (obj[prop] == null) {
                  obj[prop] = {}
                }
              }
            }
          }
          obj = obj[prop]
        }
      };
      return Ref
    }()  //# sourceMappingURL=ref.js.map
  });
  // source: node_modules/node.extend/index.js
  rqzt.define('node.extend', function (module, exports, __dirname, __filename, process) {
    'use strict';
    module.exports = rqzt('node.extend/lib/extend')
  });
  // source: node_modules/node.extend/lib/extend.js
  rqzt.define('node.extend/lib/extend', function (module, exports, __dirname, __filename, process) {
    'use strict';
    /*!
 * node.extend
 * Copyright 2011, John Resig
 * Dual licensed under the MIT or GPL Version 2 licenses.
 * http://jquery.org/license
 *
 * @fileoverview
 * Port of jQuery.extend that actually works on node.js
 */
    var is = rqzt('is');
    var extend = function extend() {
      var target = arguments[0] || {};
      var i = 1;
      var length = arguments.length;
      var deep = false;
      var options, name, src, copy, copyIsArray, clone;
      // Handle a deep copy situation
      if (typeof target === 'boolean') {
        deep = target;
        target = arguments[1] || {};
        // skip the boolean and the target
        i = 2
      }
      // Handle case when target is a string or something (possible in deep copy)
      if (typeof target !== 'object' && !is.fn(target)) {
        target = {}
      }
      for (; i < length; i++) {
        // Only deal with non-null/undefined values
        options = arguments[i];
        if (options != null) {
          if (typeof options === 'string') {
            options = options.split('')
          }
          // Extend the base object
          for (name in options) {
            src = target[name];
            copy = options[name];
            // Prevent never-ending loop
            if (target === copy) {
              continue
            }
            // Recurse if we're merging plain objects or arrays
            if (deep && copy && (is.hash(copy) || (copyIsArray = is.array(copy)))) {
              if (copyIsArray) {
                copyIsArray = false;
                clone = src && is.array(src) ? src : []
              } else {
                clone = src && is.hash(src) ? src : {}
              }
              // Never move original objects, clone them
              target[name] = extend(deep, clone, copy)  // Don't bring in undefined values
            } else if (typeof copy !== 'undefined') {
              target[name] = copy
            }
          }
        }
      }
      // Return the modified object
      return target
    };
    /**
 * @public
 */
    extend.version = '1.1.3';
    /**
 * Exports module.
 */
    module.exports = extend
  });
  // source: node_modules/is/index.js
  rqzt.define('is', function (module, exports, __dirname, __filename, process) {
    /* globals window, HTMLElement */
    'use strict';
    /**!
 * is
 * the definitive JavaScript type testing library
 *
 * @copyright 2013-2014 Enrico Marino / Jordan Harband
 * @license MIT
 */
    var objProto = Object.prototype;
    var owns = objProto.hasOwnProperty;
    var toStr = objProto.toString;
    var symbolValueOf;
    if (typeof Symbol === 'function') {
      symbolValueOf = Symbol.prototype.valueOf
    }
    var isActualNaN = function (value) {
      return value !== value
    };
    var NON_HOST_TYPES = {
      'boolean': 1,
      number: 1,
      string: 1,
      undefined: 1
    };
    var base64Regex = /^([A-Za-z0-9+\/]{4})*([A-Za-z0-9+\/]{4}|[A-Za-z0-9+\/]{3}=|[A-Za-z0-9+\/]{2}==)$/;
    var hexRegex = /^[A-Fa-f0-9]+$/;
    /**
 * Expose `is`
 */
    var is = {};
    /**
 * Test general.
 */
    /**
 * is.type
 * Test if `value` is a type of `type`.
 *
 * @param {Mixed} value value to test
 * @param {String} type type
 * @return {Boolean} true if `value` is a type of `type`, false otherwise
 * @api public
 */
    is.a = is.type = function (value, type) {
      return typeof value === type
    };
    /**
 * is.defined
 * Test if `value` is defined.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if 'value' is defined, false otherwise
 * @api public
 */
    is.defined = function (value) {
      return typeof value !== 'undefined'
    };
    /**
 * is.empty
 * Test if `value` is empty.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is empty, false otherwise
 * @api public
 */
    is.empty = function (value) {
      var type = toStr.call(value);
      var key;
      if (type === '[object Array]' || type === '[object Arguments]' || type === '[object String]') {
        return value.length === 0
      }
      if (type === '[object Object]') {
        for (key in value) {
          if (owns.call(value, key)) {
            return false
          }
        }
        return true
      }
      return !value
    };
    /**
 * is.equal
 * Test if `value` is equal to `other`.
 *
 * @param {Mixed} value value to test
 * @param {Mixed} other value to compare with
 * @return {Boolean} true if `value` is equal to `other`, false otherwise
 */
    is.equal = function equal(value, other) {
      if (value === other) {
        return true
      }
      var type = toStr.call(value);
      var key;
      if (type !== toStr.call(other)) {
        return false
      }
      if (type === '[object Object]') {
        for (key in value) {
          if (!is.equal(value[key], other[key]) || !(key in other)) {
            return false
          }
        }
        for (key in other) {
          if (!is.equal(value[key], other[key]) || !(key in value)) {
            return false
          }
        }
        return true
      }
      if (type === '[object Array]') {
        key = value.length;
        if (key !== other.length) {
          return false
        }
        while (key--) {
          if (!is.equal(value[key], other[key])) {
            return false
          }
        }
        return true
      }
      if (type === '[object Function]') {
        return value.prototype === other.prototype
      }
      if (type === '[object Date]') {
        return value.getTime() === other.getTime()
      }
      return false
    };
    /**
 * is.hosted
 * Test if `value` is hosted by `host`.
 *
 * @param {Mixed} value to test
 * @param {Mixed} host host to test with
 * @return {Boolean} true if `value` is hosted by `host`, false otherwise
 * @api public
 */
    is.hosted = function (value, host) {
      var type = typeof host[value];
      return type === 'object' ? !!host[value] : !NON_HOST_TYPES[type]
    };
    /**
 * is.instance
 * Test if `value` is an instance of `constructor`.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an instance of `constructor`
 * @api public
 */
    is.instance = is['instanceof'] = function (value, constructor) {
      return value instanceof constructor
    };
    /**
 * is.nil / is.null
 * Test if `value` is null.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is null, false otherwise
 * @api public
 */
    is.nil = is['null'] = function (value) {
      return value === null
    };
    /**
 * is.undef / is.undefined
 * Test if `value` is undefined.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is undefined, false otherwise
 * @api public
 */
    is.undef = is.undefined = function (value) {
      return typeof value === 'undefined'
    };
    /**
 * Test arguments.
 */
    /**
 * is.args
 * Test if `value` is an arguments object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an arguments object, false otherwise
 * @api public
 */
    is.args = is.arguments = function (value) {
      var isStandardArguments = toStr.call(value) === '[object Arguments]';
      var isOldArguments = !is.array(value) && is.arraylike(value) && is.object(value) && is.fn(value.callee);
      return isStandardArguments || isOldArguments
    };
    /**
 * Test array.
 */
    /**
 * is.array
 * Test if 'value' is an array.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an array, false otherwise
 * @api public
 */
    is.array = Array.isArray || function (value) {
      return toStr.call(value) === '[object Array]'
    };
    /**
 * is.arguments.empty
 * Test if `value` is an empty arguments object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an empty arguments object, false otherwise
 * @api public
 */
    is.args.empty = function (value) {
      return is.args(value) && value.length === 0
    };
    /**
 * is.array.empty
 * Test if `value` is an empty array.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an empty array, false otherwise
 * @api public
 */
    is.array.empty = function (value) {
      return is.array(value) && value.length === 0
    };
    /**
 * is.arraylike
 * Test if `value` is an arraylike object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an arguments object, false otherwise
 * @api public
 */
    is.arraylike = function (value) {
      return !!value && !is.bool(value) && owns.call(value, 'length') && isFinite(value.length) && is.number(value.length) && value.length >= 0
    };
    /**
 * Test boolean.
 */
    /**
 * is.bool
 * Test if `value` is a boolean.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a boolean, false otherwise
 * @api public
 */
    is.bool = is['boolean'] = function (value) {
      return toStr.call(value) === '[object Boolean]'
    };
    /**
 * is.false
 * Test if `value` is false.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is false, false otherwise
 * @api public
 */
    is['false'] = function (value) {
      return is.bool(value) && Boolean(Number(value)) === false
    };
    /**
 * is.true
 * Test if `value` is true.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is true, false otherwise
 * @api public
 */
    is['true'] = function (value) {
      return is.bool(value) && Boolean(Number(value)) === true
    };
    /**
 * Test date.
 */
    /**
 * is.date
 * Test if `value` is a date.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a date, false otherwise
 * @api public
 */
    is.date = function (value) {
      return toStr.call(value) === '[object Date]'
    };
    /**
 * is.date.valid
 * Test if `value` is a valid date.
 *
 * @param {Mixed} value value to test
 * @returns {Boolean} true if `value` is a valid date, false otherwise
 */
    is.date.valid = function (value) {
      return is.date(value) && !isNaN(Number(value))
    };
    /**
 * Test element.
 */
    /**
 * is.element
 * Test if `value` is an html element.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an HTML Element, false otherwise
 * @api public
 */
    is.element = function (value) {
      return value !== undefined && typeof HTMLElement !== 'undefined' && value instanceof HTMLElement && value.nodeType === 1
    };
    /**
 * Test error.
 */
    /**
 * is.error
 * Test if `value` is an error object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an error object, false otherwise
 * @api public
 */
    is.error = function (value) {
      return toStr.call(value) === '[object Error]'
    };
    /**
 * Test function.
 */
    /**
 * is.fn / is.function (deprecated)
 * Test if `value` is a function.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a function, false otherwise
 * @api public
 */
    is.fn = is['function'] = function (value) {
      var isAlert = typeof window !== 'undefined' && value === window.alert;
      return isAlert || toStr.call(value) === '[object Function]'
    };
    /**
 * Test number.
 */
    /**
 * is.number
 * Test if `value` is a number.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a number, false otherwise
 * @api public
 */
    is.number = function (value) {
      return toStr.call(value) === '[object Number]'
    };
    /**
 * is.infinite
 * Test if `value` is positive or negative infinity.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is positive or negative Infinity, false otherwise
 * @api public
 */
    is.infinite = function (value) {
      return value === Infinity || value === -Infinity
    };
    /**
 * is.decimal
 * Test if `value` is a decimal number.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a decimal number, false otherwise
 * @api public
 */
    is.decimal = function (value) {
      return is.number(value) && !isActualNaN(value) && !is.infinite(value) && value % 1 !== 0
    };
    /**
 * is.divisibleBy
 * Test if `value` is divisible by `n`.
 *
 * @param {Number} value value to test
 * @param {Number} n dividend
 * @return {Boolean} true if `value` is divisible by `n`, false otherwise
 * @api public
 */
    is.divisibleBy = function (value, n) {
      var isDividendInfinite = is.infinite(value);
      var isDivisorInfinite = is.infinite(n);
      var isNonZeroNumber = is.number(value) && !isActualNaN(value) && is.number(n) && !isActualNaN(n) && n !== 0;
      return isDividendInfinite || isDivisorInfinite || isNonZeroNumber && value % n === 0
    };
    /**
 * is.integer
 * Test if `value` is an integer.
 *
 * @param value to test
 * @return {Boolean} true if `value` is an integer, false otherwise
 * @api public
 */
    is.integer = is['int'] = function (value) {
      return is.number(value) && !isActualNaN(value) && value % 1 === 0
    };
    /**
 * is.maximum
 * Test if `value` is greater than 'others' values.
 *
 * @param {Number} value value to test
 * @param {Array} others values to compare with
 * @return {Boolean} true if `value` is greater than `others` values
 * @api public
 */
    is.maximum = function (value, others) {
      if (isActualNaN(value)) {
        throw new TypeError('NaN is not a valid value')
      } else if (!is.arraylike(others)) {
        throw new TypeError('second argument must be array-like')
      }
      var len = others.length;
      while (--len >= 0) {
        if (value < others[len]) {
          return false
        }
      }
      return true
    };
    /**
 * is.minimum
 * Test if `value` is less than `others` values.
 *
 * @param {Number} value value to test
 * @param {Array} others values to compare with
 * @return {Boolean} true if `value` is less than `others` values
 * @api public
 */
    is.minimum = function (value, others) {
      if (isActualNaN(value)) {
        throw new TypeError('NaN is not a valid value')
      } else if (!is.arraylike(others)) {
        throw new TypeError('second argument must be array-like')
      }
      var len = others.length;
      while (--len >= 0) {
        if (value > others[len]) {
          return false
        }
      }
      return true
    };
    /**
 * is.nan
 * Test if `value` is not a number.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is not a number, false otherwise
 * @api public
 */
    is.nan = function (value) {
      return !is.number(value) || value !== value
    };
    /**
 * is.even
 * Test if `value` is an even number.
 *
 * @param {Number} value value to test
 * @return {Boolean} true if `value` is an even number, false otherwise
 * @api public
 */
    is.even = function (value) {
      return is.infinite(value) || is.number(value) && value === value && value % 2 === 0
    };
    /**
 * is.odd
 * Test if `value` is an odd number.
 *
 * @param {Number} value value to test
 * @return {Boolean} true if `value` is an odd number, false otherwise
 * @api public
 */
    is.odd = function (value) {
      return is.infinite(value) || is.number(value) && value === value && value % 2 !== 0
    };
    /**
 * is.ge
 * Test if `value` is greater than or equal to `other`.
 *
 * @param {Number} value value to test
 * @param {Number} other value to compare with
 * @return {Boolean}
 * @api public
 */
    is.ge = function (value, other) {
      if (isActualNaN(value) || isActualNaN(other)) {
        throw new TypeError('NaN is not a valid value')
      }
      return !is.infinite(value) && !is.infinite(other) && value >= other
    };
    /**
 * is.gt
 * Test if `value` is greater than `other`.
 *
 * @param {Number} value value to test
 * @param {Number} other value to compare with
 * @return {Boolean}
 * @api public
 */
    is.gt = function (value, other) {
      if (isActualNaN(value) || isActualNaN(other)) {
        throw new TypeError('NaN is not a valid value')
      }
      return !is.infinite(value) && !is.infinite(other) && value > other
    };
    /**
 * is.le
 * Test if `value` is less than or equal to `other`.
 *
 * @param {Number} value value to test
 * @param {Number} other value to compare with
 * @return {Boolean} if 'value' is less than or equal to 'other'
 * @api public
 */
    is.le = function (value, other) {
      if (isActualNaN(value) || isActualNaN(other)) {
        throw new TypeError('NaN is not a valid value')
      }
      return !is.infinite(value) && !is.infinite(other) && value <= other
    };
    /**
 * is.lt
 * Test if `value` is less than `other`.
 *
 * @param {Number} value value to test
 * @param {Number} other value to compare with
 * @return {Boolean} if `value` is less than `other`
 * @api public
 */
    is.lt = function (value, other) {
      if (isActualNaN(value) || isActualNaN(other)) {
        throw new TypeError('NaN is not a valid value')
      }
      return !is.infinite(value) && !is.infinite(other) && value < other
    };
    /**
 * is.within
 * Test if `value` is within `start` and `finish`.
 *
 * @param {Number} value value to test
 * @param {Number} start lower bound
 * @param {Number} finish upper bound
 * @return {Boolean} true if 'value' is is within 'start' and 'finish'
 * @api public
 */
    is.within = function (value, start, finish) {
      if (isActualNaN(value) || isActualNaN(start) || isActualNaN(finish)) {
        throw new TypeError('NaN is not a valid value')
      } else if (!is.number(value) || !is.number(start) || !is.number(finish)) {
        throw new TypeError('all arguments must be numbers')
      }
      var isAnyInfinite = is.infinite(value) || is.infinite(start) || is.infinite(finish);
      return isAnyInfinite || value >= start && value <= finish
    };
    /**
 * Test object.
 */
    /**
 * is.object
 * Test if `value` is an object.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is an object, false otherwise
 * @api public
 */
    is.object = function (value) {
      return toStr.call(value) === '[object Object]'
    };
    /**
 * is.primitive
 * Test if `value` is a primitive.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a primitive, false otherwise
 * @api public
 */
    is.primitive = function isPrimitive(value) {
      if (!value) {
        return true
      }
      if (typeof value === 'object' || is.object(value) || is.fn(value) || is.array(value)) {
        return false
      }
      return true
    };
    /**
 * is.hash
 * Test if `value` is a hash - a plain object literal.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a hash, false otherwise
 * @api public
 */
    is.hash = function (value) {
      return is.object(value) && value.constructor === Object && !value.nodeType && !value.setInterval
    };
    /**
 * Test regexp.
 */
    /**
 * is.regexp
 * Test if `value` is a regular expression.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a regexp, false otherwise
 * @api public
 */
    is.regexp = function (value) {
      return toStr.call(value) === '[object RegExp]'
    };
    /**
 * Test string.
 */
    /**
 * is.string
 * Test if `value` is a string.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if 'value' is a string, false otherwise
 * @api public
 */
    is.string = function (value) {
      return toStr.call(value) === '[object String]'
    };
    /**
 * Test base64 string.
 */
    /**
 * is.base64
 * Test if `value` is a valid base64 encoded string.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if 'value' is a base64 encoded string, false otherwise
 * @api public
 */
    is.base64 = function (value) {
      return is.string(value) && (!value.length || base64Regex.test(value))
    };
    /**
 * Test base64 string.
 */
    /**
 * is.hex
 * Test if `value` is a valid hex encoded string.
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if 'value' is a hex encoded string, false otherwise
 * @api public
 */
    is.hex = function (value) {
      return is.string(value) && (!value.length || hexRegex.test(value))
    };
    /**
 * is.symbol
 * Test if `value` is an ES6 Symbol
 *
 * @param {Mixed} value value to test
 * @return {Boolean} true if `value` is a Symbol, false otherise
 * @api public
 */
    is.symbol = function (value) {
      return typeof Symbol === 'function' && toStr.call(value) === '[object Symbol]' && typeof symbolValueOf.call(value) === 'symbol'
    };
    module.exports = is
  });
  // source: node_modules/is-array/index.js
  rqzt.define('is-array', function (module, exports, __dirname, __filename, process) {
    /**
 * isArray
 */
    var isArray = Array.isArray;
    /**
 * toString
 */
    var str = Object.prototype.toString;
    /**
 * Whether or not the given `val`
 * is an array.
 *
 * example:
 *
 *        isArray([]);
 *        // > true
 *        isArray(arguments);
 *        // > false
 *        isArray('');
 *        // > false
 *
 * @param {mixed} val
 * @return {bool}
 */
    module.exports = isArray || function (val) {
      return !!val && '[object Array]' == str.call(val)
    }
  });
  // source: node_modules/is-number/index.js
  rqzt.define('is-number', function (module, exports, __dirname, __filename, process) {
    /*!
 * is-number <https://github.com/jonschlinkert/is-number>
 *
 * Copyright (c) 2014-2015, Jon Schlinkert.
 * Licensed under the MIT License.
 */
    'use strict';
    var typeOf = rqzt('kind-of');
    module.exports = function isNumber(num) {
      var type = typeOf(num);
      if (type === 'string') {
        if (!num.trim())
          return false
      } else if (type !== 'number') {
        return false
      }
      return num - num + 1 >= 0
    }
  });
  // source: node_modules/kind-of/index.js
  rqzt.define('kind-of', function (module, exports, __dirname, __filename, process) {
    var isBuffer = rqzt('is-buffer');
    var toString = Object.prototype.toString;
    /**
 * Get the native `typeof` a value.
 *
 * @param  {*} `val`
 * @return {*} Native javascript type
 */
    module.exports = function kindOf(val) {
      // primitivies
      if (typeof val === 'undefined') {
        return 'undefined'
      }
      if (val === null) {
        return 'null'
      }
      if (val === true || val === false || val instanceof Boolean) {
        return 'boolean'
      }
      if (typeof val === 'string' || val instanceof String) {
        return 'string'
      }
      if (typeof val === 'number' || val instanceof Number) {
        return 'number'
      }
      // functions
      if (typeof val === 'function' || val instanceof Function) {
        return 'function'
      }
      // array
      if (typeof Array.isArray !== 'undefined' && Array.isArray(val)) {
        return 'array'
      }
      // check for instances of RegExp and Date before calling `toString`
      if (val instanceof RegExp) {
        return 'regexp'
      }
      if (val instanceof Date) {
        return 'date'
      }
      // other objects
      var type = toString.call(val);
      if (type === '[object RegExp]') {
        return 'regexp'
      }
      if (type === '[object Date]') {
        return 'date'
      }
      if (type === '[object Arguments]') {
        return 'arguments'
      }
      if (type === '[object Error]') {
        return 'error'
      }
      // buffer
      if (typeof Buffer !== 'undefined' && isBuffer(val)) {
        return 'buffer'
      }
      // es6: Map, WeakMap, Set, WeakSet
      if (type === '[object Set]') {
        return 'set'
      }
      if (type === '[object WeakSet]') {
        return 'weakset'
      }
      if (type === '[object Map]') {
        return 'map'
      }
      if (type === '[object WeakMap]') {
        return 'weakmap'
      }
      if (type === '[object Symbol]') {
        return 'symbol'
      }
      // typed arrays
      if (type === '[object Int8Array]') {
        return 'int8array'
      }
      if (type === '[object Uint8Array]') {
        return 'uint8array'
      }
      if (type === '[object Uint8ClampedArray]') {
        return 'uint8clampedarray'
      }
      if (type === '[object Int16Array]') {
        return 'int16array'
      }
      if (type === '[object Uint16Array]') {
        return 'uint16array'
      }
      if (type === '[object Int32Array]') {
        return 'int32array'
      }
      if (type === '[object Uint32Array]') {
        return 'uint32array'
      }
      if (type === '[object Float32Array]') {
        return 'float32array'
      }
      if (type === '[object Float64Array]') {
        return 'float64array'
      }
      // must be a plain object
      return 'object'
    }
  });
  // source: node_modules/is-buffer/index.js
  rqzt.define('is-buffer', function (module, exports, __dirname, __filename, process) {
    /*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
    // The _isBuffer check is for Safari 5-7 support, because it's missing
    // Object.prototype.constructor. Remove this eventually
    module.exports = function (obj) {
      return obj != null && (isBuffer(obj) || isSlowBuffer(obj) || !!obj._isBuffer)
    };
    function isBuffer(obj) {
      return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
    }
    // For Node v0.10 support. Remove this eventually.
    function isSlowBuffer(obj) {
      return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isBuffer(obj.slice(0, 0))
    }
  });
  // source: node_modules/is-object/index.js
  rqzt.define('is-object', function (module, exports, __dirname, __filename, process) {
    'use strict';
    module.exports = function isObject(x) {
      return typeof x === 'object' && x !== null
    }
  });
  // source: node_modules/is-string/index.js
  rqzt.define('is-string', function (module, exports, __dirname, __filename, process) {
    'use strict';
    var strValue = String.prototype.valueOf;
    var tryStringObject = function tryStringObject(value) {
      try {
        strValue.call(value);
        return true
      } catch (e) {
        return false
      }
    };
    var toStr = Object.prototype.toString;
    var strClass = '[object String]';
    var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';
    module.exports = function isString(value) {
      if (typeof value === 'string') {
        return true
      }
      if (typeof value !== 'object') {
        return false
      }
      return hasToStringTag ? tryStringObject(value) : toStr.call(value) === strClass
    }
  });
  // source: src/utils/store.coffee
  rqzt.define('./utils/store', function (module, exports, __dirname, __filename, process) {
    var cookie, md5, postFix, store;
    store = rqzt('store/store');
    cookie = rqzt('js-cookie/src/js.cookie');
    md5 = rqzt('crypto-js/md5');
    postFix = md5(window.location.host);
    if (store.enabled) {
      module.exports = {
        get: function (k) {
          k += '_' + postFix;
          return store.get(k)
        },
        set: function (k, v) {
          k += '_' + postFix;
          return store.set(k, v)
        },
        remove: function (k) {
          k += '_' + postFix;
          return store.remove(k)
        },
        clear: function () {
          return store.clear()
        }
      }
    } else {
      module.exports = {
        get: function (k) {
          var e, v;
          k += '_' + postFix;
          v = cookie.get(k);
          try {
            v = JSON.parse(v)
          } catch (error) {
            e = error
          }
          return v
        },
        set: function (k, v) {
          var keys, ref;
          k += '_' + postFix;
          keys = (ref = cookie.get('_keys' + postFix)) != null ? ref : '';
          cookie.set('_keys', keys += ' ' + k);
          return cookie.set(k, JSON.stringify(v))
        },
        remove: function (k) {
          k += '_' + postFix;
          return cookie.remove(k)
        },
        clear: function () {
          var i, k, keys, ks, len, ref;
          keys = (ref = cookie.get('_keys' + postFix)) != null ? ref : '';
          ks = keys.split(' ');
          for (i = 0, len = ks.length; i < len; i++) {
            k = ks[i];
            cookie.remove(k)
          }
          return cookie.remove('_keys')
        }
      }
    }
  });
  // source: node_modules/store/store.js
  rqzt.define('store/store', function (module, exports, __dirname, __filename, process) {
    'use strict'  // Module export pattern from
                  // https://github.com/umdjs/umd/blob/master/returnExports.js
;
    (function (root, factory) {
      if (typeof define === 'function' && define.amd) {
        // AMD. Register as an anonymous module.
        define([], factory)
      } else if (typeof exports === 'object') {
        // Node. Does not work with strict CommonJS, but
        // only CommonJS-like environments that support module.exports,
        // like Node.
        module.exports = factory()
      } else {
        // Browser globals (root is window)
        root.store = factory()
      }
    }(this, function () {
      // Store.js
      var store = {}, win = typeof window != 'undefined' ? window : global, doc = win.document, localStorageName = 'localStorage', scriptTag = 'script', storage;
      store.disabled = false;
      store.version = '1.3.20';
      store.set = function (key, value) {
      };
      store.get = function (key, defaultVal) {
      };
      store.has = function (key) {
        return store.get(key) !== undefined
      };
      store.remove = function (key) {
      };
      store.clear = function () {
      };
      store.transact = function (key, defaultVal, transactionFn) {
        if (transactionFn == null) {
          transactionFn = defaultVal;
          defaultVal = null
        }
        if (defaultVal == null) {
          defaultVal = {}
        }
        var val = store.get(key, defaultVal);
        transactionFn(val);
        store.set(key, val)
      };
      store.getAll = function () {
      };
      store.forEach = function () {
      };
      store.serialize = function (value) {
        return JSON.stringify(value)
      };
      store.deserialize = function (value) {
        if (typeof value != 'string') {
          return undefined
        }
        try {
          return JSON.parse(value)
        } catch (e) {
          return value || undefined
        }
      };
      // Functions to encapsulate questionable FireFox 3.6.13 behavior
      // when about.config::dom.storage.enabled === false
      // See https://github.com/marcuswestin/store.js/issues#issue/13
      function isLocalStorageNameSupported() {
        try {
          return localStorageName in win && win[localStorageName]
        } catch (err) {
          return false
        }
      }
      if (isLocalStorageNameSupported()) {
        storage = win[localStorageName];
        store.set = function (key, val) {
          if (val === undefined) {
            return store.remove(key)
          }
          storage.setItem(key, store.serialize(val));
          return val
        };
        store.get = function (key, defaultVal) {
          var val = store.deserialize(storage.getItem(key));
          return val === undefined ? defaultVal : val
        };
        store.remove = function (key) {
          storage.removeItem(key)
        };
        store.clear = function () {
          storage.clear()
        };
        store.getAll = function () {
          var ret = {};
          store.forEach(function (key, val) {
            ret[key] = val
          });
          return ret
        };
        store.forEach = function (callback) {
          for (var i = 0; i < storage.length; i++) {
            var key = storage.key(i);
            callback(key, store.get(key))
          }
        }
      } else if (doc && doc.documentElement.addBehavior) {
        var storageOwner, storageContainer;
        // Since #userData storage applies only to specific paths, we need to
        // somehow link our data to a specific path.  We choose /favicon.ico
        // as a pretty safe option, since all browsers already make a request to
        // this URL anyway and being a 404 will not hurt us here.  We wrap an
        // iframe pointing to the favicon in an ActiveXObject(htmlfile) object
        // (see: http://msdn.microsoft.com/en-us/library/aa752574(v=VS.85).aspx)
        // since the iframe access rules appear to allow direct access and
        // manipulation of the document element, even for a 404 page.  This
        // document can be used instead of the current document (which would
        // have been limited to the current path) to perform #userData storage.
        try {
          storageContainer = new ActiveXObject('htmlfile');
          storageContainer.open();
          storageContainer.write('<' + scriptTag + '>document.w=window</' + scriptTag + '><iframe src="/favicon.ico"></iframe>');
          storageContainer.close();
          storageOwner = storageContainer.w.frames[0].document;
          storage = storageOwner.createElement('div')
        } catch (e) {
          // somehow ActiveXObject instantiation failed (perhaps some special
          // security settings or otherwse), fall back to per-path storage
          storage = doc.createElement('div');
          storageOwner = doc.body
        }
        var withIEStorage = function (storeFunction) {
          return function () {
            var args = Array.prototype.slice.call(arguments, 0);
            args.unshift(storage);
            // See http://msdn.microsoft.com/en-us/library/ms531081(v=VS.85).aspx
            // and http://msdn.microsoft.com/en-us/library/ms531424(v=VS.85).aspx
            storageOwner.appendChild(storage);
            storage.addBehavior('#default#userData');
            storage.load(localStorageName);
            var result = storeFunction.apply(store, args);
            storageOwner.removeChild(storage);
            return result
          }
        };
        // In IE7, keys cannot start with a digit or contain certain chars.
        // See https://github.com/marcuswestin/store.js/issues/40
        // See https://github.com/marcuswestin/store.js/issues/83
        var forbiddenCharsRegex = new RegExp('[!"#$%&\'()*+,/\\\\:;<=>?@[\\]^`{|}~]', 'g');
        var ieKeyFix = function (key) {
          return key.replace(/^d/, '___$&').replace(forbiddenCharsRegex, '___')
        };
        store.set = withIEStorage(function (storage, key, val) {
          key = ieKeyFix(key);
          if (val === undefined) {
            return store.remove(key)
          }
          storage.setAttribute(key, store.serialize(val));
          storage.save(localStorageName);
          return val
        });
        store.get = withIEStorage(function (storage, key, defaultVal) {
          key = ieKeyFix(key);
          var val = store.deserialize(storage.getAttribute(key));
          return val === undefined ? defaultVal : val
        });
        store.remove = withIEStorage(function (storage, key) {
          key = ieKeyFix(key);
          storage.removeAttribute(key);
          storage.save(localStorageName)
        });
        store.clear = withIEStorage(function (storage) {
          var attributes = storage.XMLDocument.documentElement.attributes;
          storage.load(localStorageName);
          for (var i = attributes.length - 1; i >= 0; i--) {
            storage.removeAttribute(attributes[i].name)
          }
          storage.save(localStorageName)
        });
        store.getAll = function (storage) {
          var ret = {};
          store.forEach(function (key, val) {
            ret[key] = val
          });
          return ret
        };
        store.forEach = withIEStorage(function (storage, callback) {
          var attributes = storage.XMLDocument.documentElement.attributes;
          for (var i = 0, attr; attr = attributes[i]; ++i) {
            callback(attr.name, store.deserialize(storage.getAttribute(attr.name)))
          }
        })
      }
      try {
        var testKey = '__storejs__';
        store.set(testKey, testKey);
        if (store.get(testKey) != testKey) {
          store.disabled = true
        }
        store.remove(testKey)
      } catch (e) {
        store.disabled = true
      }
      store.enabled = !store.disabled;
      return store
    }))
  });
  // source: node_modules/js-cookie/src/js.cookie.js
  rqzt.define('js-cookie/src/js.cookie', function (module, exports, __dirname, __filename, process) {
    /*!
 * JavaScript Cookie v2.1.3
 * https://github.com/js-cookie/js-cookie
 *
 * Copyright 2006, 2015 Klaus Hartl & Fagner Brack
 * Released under the MIT license
 */
    ;
    (function (factory) {
      var registeredInModuleLoader = false;
      if (typeof define === 'function' && define.amd) {
        define(factory);
        registeredInModuleLoader = true
      }
      if (typeof exports === 'object') {
        module.exports = factory();
        registeredInModuleLoader = true
      }
      if (!registeredInModuleLoader) {
        var OldCookies = window.Cookies;
        var api = window.Cookies = factory();
        api.noConflict = function () {
          window.Cookies = OldCookies;
          return api
        }
      }
    }(function () {
      function extend() {
        var i = 0;
        var result = {};
        for (; i < arguments.length; i++) {
          var attributes = arguments[i];
          for (var key in attributes) {
            result[key] = attributes[key]
          }
        }
        return result
      }
      function init(converter) {
        function api(key, value, attributes) {
          var result;
          if (typeof document === 'undefined') {
            return
          }
          // Write
          if (arguments.length > 1) {
            attributes = extend({ path: '/' }, api.defaults, attributes);
            if (typeof attributes.expires === 'number') {
              var expires = new Date;
              expires.setMilliseconds(expires.getMilliseconds() + attributes.expires * 86400000);
              attributes.expires = expires
            }
            try {
              result = JSON.stringify(value);
              if (/^[\{\[]/.test(result)) {
                value = result
              }
            } catch (e) {
            }
            if (!converter.write) {
              value = encodeURIComponent(String(value)).replace(/%(23|24|26|2B|3A|3C|3E|3D|2F|3F|40|5B|5D|5E|60|7B|7D|7C)/g, decodeURIComponent)
            } else {
              value = converter.write(value, key)
            }
            key = encodeURIComponent(String(key));
            key = key.replace(/%(23|24|26|2B|5E|60|7C)/g, decodeURIComponent);
            key = key.replace(/[\(\)]/g, escape);
            return document.cookie = [
              key,
              '=',
              value,
              attributes.expires ? '; expires=' + attributes.expires.toUTCString() : '',
              // use expires attribute, max-age is not supported by IE
              attributes.path ? '; path=' + attributes.path : '',
              attributes.domain ? '; domain=' + attributes.domain : '',
              attributes.secure ? '; secure' : ''
            ].join('')
          }
          // Read
          if (!key) {
            result = {}
          }
          // To prevent the for loop in the first place assign an empty array
          // in case there are no cookies at all. Also prevents odd result when
          // calling "get()"
          var cookies = document.cookie ? document.cookie.split('; ') : [];
          var rdecode = /(%[0-9A-Z]{2})+/g;
          var i = 0;
          for (; i < cookies.length; i++) {
            var parts = cookies[i].split('=');
            var cookie = parts.slice(1).join('=');
            if (cookie.charAt(0) === '"') {
              cookie = cookie.slice(1, -1)
            }
            try {
              var name = parts[0].replace(rdecode, decodeURIComponent);
              cookie = converter.read ? converter.read(cookie, name) : converter(cookie, name) || cookie.replace(rdecode, decodeURIComponent);
              if (this.json) {
                try {
                  cookie = JSON.parse(cookie)
                } catch (e) {
                }
              }
              if (key === name) {
                result = cookie;
                break
              }
              if (!key) {
                result[name] = cookie
              }
            } catch (e) {
            }
          }
          return result
        }
        api.set = api;
        api.get = function (key) {
          return api.call(api, key)
        };
        api.getJSON = function () {
          return api.apply({ json: true }, [].slice.call(arguments))
        };
        api.defaults = {};
        api.remove = function (key, attributes) {
          api(key, '', extend(attributes, { expires: -1 }))
        };
        api.withConverter = init;
        return api
      }
      return init(function () {
      })
    }))
  });
  // source: node_modules/crypto-js/md5.js
  rqzt.define('crypto-js/md5', function (module, exports, __dirname, __filename, process) {
    ;
    (function (root, factory) {
      if (typeof exports === 'object') {
        // CommonJS
        module.exports = exports = factory(rqzt('crypto-js/core'))
      } else if (typeof define === 'function' && define.amd) {
        // AMD
        define(['./core'], factory)
      } else {
        // Global (browser)
        factory(root.CryptoJS)
      }
    }(this, function (CryptoJS) {
      (function (Math) {
        // Shortcuts
        var C = CryptoJS;
        var C_lib = C.lib;
        var WordArray = C_lib.WordArray;
        var Hasher = C_lib.Hasher;
        var C_algo = C.algo;
        // Constants table
        var T = [];
        // Compute constants
        (function () {
          for (var i = 0; i < 64; i++) {
            T[i] = Math.abs(Math.sin(i + 1)) * 4294967296 | 0
          }
        }());
        /**
	     * MD5 hash algorithm.
	     */
        var MD5 = C_algo.MD5 = Hasher.extend({
          _doReset: function () {
            this._hash = new WordArray.init([
              1732584193,
              4023233417,
              2562383102,
              271733878
            ])
          },
          _doProcessBlock: function (M, offset) {
            // Swap endian
            for (var i = 0; i < 16; i++) {
              // Shortcuts
              var offset_i = offset + i;
              var M_offset_i = M[offset_i];
              M[offset_i] = (M_offset_i << 8 | M_offset_i >>> 24) & 16711935 | (M_offset_i << 24 | M_offset_i >>> 8) & 4278255360
            }
            // Shortcuts
            var H = this._hash.words;
            var M_offset_0 = M[offset + 0];
            var M_offset_1 = M[offset + 1];
            var M_offset_2 = M[offset + 2];
            var M_offset_3 = M[offset + 3];
            var M_offset_4 = M[offset + 4];
            var M_offset_5 = M[offset + 5];
            var M_offset_6 = M[offset + 6];
            var M_offset_7 = M[offset + 7];
            var M_offset_8 = M[offset + 8];
            var M_offset_9 = M[offset + 9];
            var M_offset_10 = M[offset + 10];
            var M_offset_11 = M[offset + 11];
            var M_offset_12 = M[offset + 12];
            var M_offset_13 = M[offset + 13];
            var M_offset_14 = M[offset + 14];
            var M_offset_15 = M[offset + 15];
            // Working varialbes
            var a = H[0];
            var b = H[1];
            var c = H[2];
            var d = H[3];
            // Computation
            a = FF(a, b, c, d, M_offset_0, 7, T[0]);
            d = FF(d, a, b, c, M_offset_1, 12, T[1]);
            c = FF(c, d, a, b, M_offset_2, 17, T[2]);
            b = FF(b, c, d, a, M_offset_3, 22, T[3]);
            a = FF(a, b, c, d, M_offset_4, 7, T[4]);
            d = FF(d, a, b, c, M_offset_5, 12, T[5]);
            c = FF(c, d, a, b, M_offset_6, 17, T[6]);
            b = FF(b, c, d, a, M_offset_7, 22, T[7]);
            a = FF(a, b, c, d, M_offset_8, 7, T[8]);
            d = FF(d, a, b, c, M_offset_9, 12, T[9]);
            c = FF(c, d, a, b, M_offset_10, 17, T[10]);
            b = FF(b, c, d, a, M_offset_11, 22, T[11]);
            a = FF(a, b, c, d, M_offset_12, 7, T[12]);
            d = FF(d, a, b, c, M_offset_13, 12, T[13]);
            c = FF(c, d, a, b, M_offset_14, 17, T[14]);
            b = FF(b, c, d, a, M_offset_15, 22, T[15]);
            a = GG(a, b, c, d, M_offset_1, 5, T[16]);
            d = GG(d, a, b, c, M_offset_6, 9, T[17]);
            c = GG(c, d, a, b, M_offset_11, 14, T[18]);
            b = GG(b, c, d, a, M_offset_0, 20, T[19]);
            a = GG(a, b, c, d, M_offset_5, 5, T[20]);
            d = GG(d, a, b, c, M_offset_10, 9, T[21]);
            c = GG(c, d, a, b, M_offset_15, 14, T[22]);
            b = GG(b, c, d, a, M_offset_4, 20, T[23]);
            a = GG(a, b, c, d, M_offset_9, 5, T[24]);
            d = GG(d, a, b, c, M_offset_14, 9, T[25]);
            c = GG(c, d, a, b, M_offset_3, 14, T[26]);
            b = GG(b, c, d, a, M_offset_8, 20, T[27]);
            a = GG(a, b, c, d, M_offset_13, 5, T[28]);
            d = GG(d, a, b, c, M_offset_2, 9, T[29]);
            c = GG(c, d, a, b, M_offset_7, 14, T[30]);
            b = GG(b, c, d, a, M_offset_12, 20, T[31]);
            a = HH(a, b, c, d, M_offset_5, 4, T[32]);
            d = HH(d, a, b, c, M_offset_8, 11, T[33]);
            c = HH(c, d, a, b, M_offset_11, 16, T[34]);
            b = HH(b, c, d, a, M_offset_14, 23, T[35]);
            a = HH(a, b, c, d, M_offset_1, 4, T[36]);
            d = HH(d, a, b, c, M_offset_4, 11, T[37]);
            c = HH(c, d, a, b, M_offset_7, 16, T[38]);
            b = HH(b, c, d, a, M_offset_10, 23, T[39]);
            a = HH(a, b, c, d, M_offset_13, 4, T[40]);
            d = HH(d, a, b, c, M_offset_0, 11, T[41]);
            c = HH(c, d, a, b, M_offset_3, 16, T[42]);
            b = HH(b, c, d, a, M_offset_6, 23, T[43]);
            a = HH(a, b, c, d, M_offset_9, 4, T[44]);
            d = HH(d, a, b, c, M_offset_12, 11, T[45]);
            c = HH(c, d, a, b, M_offset_15, 16, T[46]);
            b = HH(b, c, d, a, M_offset_2, 23, T[47]);
            a = II(a, b, c, d, M_offset_0, 6, T[48]);
            d = II(d, a, b, c, M_offset_7, 10, T[49]);
            c = II(c, d, a, b, M_offset_14, 15, T[50]);
            b = II(b, c, d, a, M_offset_5, 21, T[51]);
            a = II(a, b, c, d, M_offset_12, 6, T[52]);
            d = II(d, a, b, c, M_offset_3, 10, T[53]);
            c = II(c, d, a, b, M_offset_10, 15, T[54]);
            b = II(b, c, d, a, M_offset_1, 21, T[55]);
            a = II(a, b, c, d, M_offset_8, 6, T[56]);
            d = II(d, a, b, c, M_offset_15, 10, T[57]);
            c = II(c, d, a, b, M_offset_6, 15, T[58]);
            b = II(b, c, d, a, M_offset_13, 21, T[59]);
            a = II(a, b, c, d, M_offset_4, 6, T[60]);
            d = II(d, a, b, c, M_offset_11, 10, T[61]);
            c = II(c, d, a, b, M_offset_2, 15, T[62]);
            b = II(b, c, d, a, M_offset_9, 21, T[63]);
            // Intermediate hash value
            H[0] = H[0] + a | 0;
            H[1] = H[1] + b | 0;
            H[2] = H[2] + c | 0;
            H[3] = H[3] + d | 0
          },
          _doFinalize: function () {
            // Shortcuts
            var data = this._data;
            var dataWords = data.words;
            var nBitsTotal = this._nDataBytes * 8;
            var nBitsLeft = data.sigBytes * 8;
            // Add padding
            dataWords[nBitsLeft >>> 5] |= 128 << 24 - nBitsLeft % 32;
            var nBitsTotalH = Math.floor(nBitsTotal / 4294967296);
            var nBitsTotalL = nBitsTotal;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 15] = (nBitsTotalH << 8 | nBitsTotalH >>> 24) & 16711935 | (nBitsTotalH << 24 | nBitsTotalH >>> 8) & 4278255360;
            dataWords[(nBitsLeft + 64 >>> 9 << 4) + 14] = (nBitsTotalL << 8 | nBitsTotalL >>> 24) & 16711935 | (nBitsTotalL << 24 | nBitsTotalL >>> 8) & 4278255360;
            data.sigBytes = (dataWords.length + 1) * 4;
            // Hash final blocks
            this._process();
            // Shortcuts
            var hash = this._hash;
            var H = hash.words;
            // Swap endian
            for (var i = 0; i < 4; i++) {
              // Shortcut
              var H_i = H[i];
              H[i] = (H_i << 8 | H_i >>> 24) & 16711935 | (H_i << 24 | H_i >>> 8) & 4278255360
            }
            // Return final computed hash
            return hash
          },
          clone: function () {
            var clone = Hasher.clone.call(this);
            clone._hash = this._hash.clone();
            return clone
          }
        });
        function FF(a, b, c, d, x, s, t) {
          var n = a + (b & c | ~b & d) + x + t;
          return (n << s | n >>> 32 - s) + b
        }
        function GG(a, b, c, d, x, s, t) {
          var n = a + (b & d | c & ~d) + x + t;
          return (n << s | n >>> 32 - s) + b
        }
        function HH(a, b, c, d, x, s, t) {
          var n = a + (b ^ c ^ d) + x + t;
          return (n << s | n >>> 32 - s) + b
        }
        function II(a, b, c, d, x, s, t) {
          var n = a + (c ^ (b | ~d)) + x + t;
          return (n << s | n >>> 32 - s) + b
        }
        /**
	     * Shortcut function to the hasher's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     *
	     * @return {WordArray} The hash.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hash = CryptoJS.MD5('message');
	     *     var hash = CryptoJS.MD5(wordArray);
	     */
        C.MD5 = Hasher._createHelper(MD5);
        /**
	     * Shortcut function to the HMAC's object interface.
	     *
	     * @param {WordArray|string} message The message to hash.
	     * @param {WordArray|string} key The secret key.
	     *
	     * @return {WordArray} The HMAC.
	     *
	     * @static
	     *
	     * @example
	     *
	     *     var hmac = CryptoJS.HmacMD5(message, key);
	     */
        C.HmacMD5 = Hasher._createHmacHelper(MD5)
      }(Math));
      return CryptoJS.MD5
    }))
  });
  // source: node_modules/crypto-js/core.js
  rqzt.define('crypto-js/core', function (module, exports, __dirname, __filename, process) {
    ;
    (function (root, factory) {
      if (typeof exports === 'object') {
        // CommonJS
        module.exports = exports = factory()
      } else if (typeof define === 'function' && define.amd) {
        // AMD
        define([], factory)
      } else {
        // Global (browser)
        root.CryptoJS = factory()
      }
    }(this, function () {
      /**
	 * CryptoJS core components.
	 */
      var CryptoJS = CryptoJS || function (Math, undefined) {
        /*
	     * Local polyfil of Object.create
	     */
        var create = Object.create || function () {
          function F() {
          }
          ;
          return function (obj) {
            var subtype;
            F.prototype = obj;
            subtype = new F;
            F.prototype = null;
            return subtype
          }
        }();
        /**
	     * CryptoJS namespace.
	     */
        var C = {};
        /**
	     * Library namespace.
	     */
        var C_lib = C.lib = {};
        /**
	     * Base object for prototypal inheritance.
	     */
        var Base = C_lib.Base = function () {
          return {
            /**
	             * Creates a new object that inherits from this object.
	             *
	             * @param {Object} overrides Properties to copy into the new object.
	             *
	             * @return {Object} The new object.
	             *
	             * @static
	             *
	             * @example
	             *
	             *     var MyType = CryptoJS.lib.Base.extend({
	             *         field: 'value',
	             *
	             *         method: function () {
	             *         }
	             *     });
	             */
            extend: function (overrides) {
              // Spawn
              var subtype = create(this);
              // Augment
              if (overrides) {
                subtype.mixIn(overrides)
              }
              // Create default initializer
              if (!subtype.hasOwnProperty('init') || this.init === subtype.init) {
                subtype.init = function () {
                  subtype.$super.init.apply(this, arguments)
                }
              }
              // Initializer's prototype is the subtype object
              subtype.init.prototype = subtype;
              // Reference supertype
              subtype.$super = this;
              return subtype
            },
            /**
	             * Extends this object and runs the init method.
	             * Arguments to create() will be passed to init().
	             *
	             * @return {Object} The new object.
	             *
	             * @static
	             *
	             * @example
	             *
	             *     var instance = MyType.create();
	             */
            create: function () {
              var instance = this.extend();
              instance.init.apply(instance, arguments);
              return instance
            },
            /**
	             * Initializes a newly created object.
	             * Override this method to add some logic when your objects are created.
	             *
	             * @example
	             *
	             *     var MyType = CryptoJS.lib.Base.extend({
	             *         init: function () {
	             *             // ...
	             *         }
	             *     });
	             */
            init: function () {
            },
            /**
	             * Copies properties into this object.
	             *
	             * @param {Object} properties The properties to mix in.
	             *
	             * @example
	             *
	             *     MyType.mixIn({
	             *         field: 'value'
	             *     });
	             */
            mixIn: function (properties) {
              for (var propertyName in properties) {
                if (properties.hasOwnProperty(propertyName)) {
                  this[propertyName] = properties[propertyName]
                }
              }
              // IE won't copy toString using the loop above
              if (properties.hasOwnProperty('toString')) {
                this.toString = properties.toString
              }
            },
            /**
	             * Creates a copy of this object.
	             *
	             * @return {Object} The clone.
	             *
	             * @example
	             *
	             *     var clone = instance.clone();
	             */
            clone: function () {
              return this.init.prototype.extend(this)
            }
          }
        }();
        /**
	     * An array of 32-bit words.
	     *
	     * @property {Array} words The array of 32-bit words.
	     * @property {number} sigBytes The number of significant bytes in this word array.
	     */
        var WordArray = C_lib.WordArray = Base.extend({
          /**
	         * Initializes a newly created word array.
	         *
	         * @param {Array} words (Optional) An array of 32-bit words.
	         * @param {number} sigBytes (Optional) The number of significant bytes in the words.
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.lib.WordArray.create();
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);
	         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);
	         */
          init: function (words, sigBytes) {
            words = this.words = words || [];
            if (sigBytes != undefined) {
              this.sigBytes = sigBytes
            } else {
              this.sigBytes = words.length * 4
            }
          },
          /**
	         * Converts this word array to a string.
	         *
	         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex
	         *
	         * @return {string} The stringified word array.
	         *
	         * @example
	         *
	         *     var string = wordArray + '';
	         *     var string = wordArray.toString();
	         *     var string = wordArray.toString(CryptoJS.enc.Utf8);
	         */
          toString: function (encoder) {
            return (encoder || Hex).stringify(this)
          },
          /**
	         * Concatenates a word array to this word array.
	         *
	         * @param {WordArray} wordArray The word array to append.
	         *
	         * @return {WordArray} This word array.
	         *
	         * @example
	         *
	         *     wordArray1.concat(wordArray2);
	         */
          concat: function (wordArray) {
            // Shortcuts
            var thisWords = this.words;
            var thatWords = wordArray.words;
            var thisSigBytes = this.sigBytes;
            var thatSigBytes = wordArray.sigBytes;
            // Clamp excess bits
            this.clamp();
            // Concat
            if (thisSigBytes % 4) {
              // Copy one byte at a time
              for (var i = 0; i < thatSigBytes; i++) {
                var thatByte = thatWords[i >>> 2] >>> 24 - i % 4 * 8 & 255;
                thisWords[thisSigBytes + i >>> 2] |= thatByte << 24 - (thisSigBytes + i) % 4 * 8
              }
            } else {
              // Copy one word at a time
              for (var i = 0; i < thatSigBytes; i += 4) {
                thisWords[thisSigBytes + i >>> 2] = thatWords[i >>> 2]
              }
            }
            this.sigBytes += thatSigBytes;
            // Chainable
            return this
          },
          /**
	         * Removes insignificant bits.
	         *
	         * @example
	         *
	         *     wordArray.clamp();
	         */
          clamp: function () {
            // Shortcuts
            var words = this.words;
            var sigBytes = this.sigBytes;
            // Clamp
            words[sigBytes >>> 2] &= 4294967295 << 32 - sigBytes % 4 * 8;
            words.length = Math.ceil(sigBytes / 4)
          },
          /**
	         * Creates a copy of this word array.
	         *
	         * @return {WordArray} The clone.
	         *
	         * @example
	         *
	         *     var clone = wordArray.clone();
	         */
          clone: function () {
            var clone = Base.clone.call(this);
            clone.words = this.words.slice(0);
            return clone
          },
          /**
	         * Creates a word array filled with random bytes.
	         *
	         * @param {number} nBytes The number of random bytes to generate.
	         *
	         * @return {WordArray} The random word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.lib.WordArray.random(16);
	         */
          random: function (nBytes) {
            var words = [];
            var r = function (m_w) {
              var m_w = m_w;
              var m_z = 987654321;
              var mask = 4294967295;
              return function () {
                m_z = 36969 * (m_z & 65535) + (m_z >> 16) & mask;
                m_w = 18000 * (m_w & 65535) + (m_w >> 16) & mask;
                var result = (m_z << 16) + m_w & mask;
                result /= 4294967296;
                result += 0.5;
                return result * (Math.random() > 0.5 ? 1 : -1)
              }
            };
            for (var i = 0, rcache; i < nBytes; i += 4) {
              var _r = r((rcache || Math.random()) * 4294967296);
              rcache = _r() * 987654071;
              words.push(_r() * 4294967296 | 0)
            }
            return new WordArray.init(words, nBytes)
          }
        });
        /**
	     * Encoder namespace.
	     */
        var C_enc = C.enc = {};
        /**
	     * Hex encoding strategy.
	     */
        var Hex = C_enc.Hex = {
          /**
	         * Converts a word array to a hex string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The hex string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);
	         */
          stringify: function (wordArray) {
            // Shortcuts
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            // Convert
            var hexChars = [];
            for (var i = 0; i < sigBytes; i++) {
              var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              hexChars.push((bite >>> 4).toString(16));
              hexChars.push((bite & 15).toString(16))
            }
            return hexChars.join('')
          },
          /**
	         * Converts a hex string to a word array.
	         *
	         * @param {string} hexStr The hex string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);
	         */
          parse: function (hexStr) {
            // Shortcut
            var hexStrLength = hexStr.length;
            // Convert
            var words = [];
            for (var i = 0; i < hexStrLength; i += 2) {
              words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << 24 - i % 8 * 4
            }
            return new WordArray.init(words, hexStrLength / 2)
          }
        };
        /**
	     * Latin1 encoding strategy.
	     */
        var Latin1 = C_enc.Latin1 = {
          /**
	         * Converts a word array to a Latin1 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The Latin1 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);
	         */
          stringify: function (wordArray) {
            // Shortcuts
            var words = wordArray.words;
            var sigBytes = wordArray.sigBytes;
            // Convert
            var latin1Chars = [];
            for (var i = 0; i < sigBytes; i++) {
              var bite = words[i >>> 2] >>> 24 - i % 4 * 8 & 255;
              latin1Chars.push(String.fromCharCode(bite))
            }
            return latin1Chars.join('')
          },
          /**
	         * Converts a Latin1 string to a word array.
	         *
	         * @param {string} latin1Str The Latin1 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);
	         */
          parse: function (latin1Str) {
            // Shortcut
            var latin1StrLength = latin1Str.length;
            // Convert
            var words = [];
            for (var i = 0; i < latin1StrLength; i++) {
              words[i >>> 2] |= (latin1Str.charCodeAt(i) & 255) << 24 - i % 4 * 8
            }
            return new WordArray.init(words, latin1StrLength)
          }
        };
        /**
	     * UTF-8 encoding strategy.
	     */
        var Utf8 = C_enc.Utf8 = {
          /**
	         * Converts a word array to a UTF-8 string.
	         *
	         * @param {WordArray} wordArray The word array.
	         *
	         * @return {string} The UTF-8 string.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);
	         */
          stringify: function (wordArray) {
            try {
              return decodeURIComponent(escape(Latin1.stringify(wordArray)))
            } catch (e) {
              throw new Error('Malformed UTF-8 data')
            }
          },
          /**
	         * Converts a UTF-8 string to a word array.
	         *
	         * @param {string} utf8Str The UTF-8 string.
	         *
	         * @return {WordArray} The word array.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);
	         */
          parse: function (utf8Str) {
            return Latin1.parse(unescape(encodeURIComponent(utf8Str)))
          }
        };
        /**
	     * Abstract buffered block algorithm template.
	     *
	     * The property blockSize must be implemented in a concrete subtype.
	     *
	     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0
	     */
        var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({
          /**
	         * Resets this block algorithm's data buffer to its initial state.
	         *
	         * @example
	         *
	         *     bufferedBlockAlgorithm.reset();
	         */
          reset: function () {
            // Initial values
            this._data = new WordArray.init;
            this._nDataBytes = 0
          },
          /**
	         * Adds new data to this block algorithm's buffer.
	         *
	         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.
	         *
	         * @example
	         *
	         *     bufferedBlockAlgorithm._append('data');
	         *     bufferedBlockAlgorithm._append(wordArray);
	         */
          _append: function (data) {
            // Convert string to WordArray, else assume WordArray already
            if (typeof data == 'string') {
              data = Utf8.parse(data)
            }
            // Append
            this._data.concat(data);
            this._nDataBytes += data.sigBytes
          },
          /**
	         * Processes available data blocks.
	         *
	         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.
	         *
	         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.
	         *
	         * @return {WordArray} The processed data.
	         *
	         * @example
	         *
	         *     var processedData = bufferedBlockAlgorithm._process();
	         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');
	         */
          _process: function (doFlush) {
            // Shortcuts
            var data = this._data;
            var dataWords = data.words;
            var dataSigBytes = data.sigBytes;
            var blockSize = this.blockSize;
            var blockSizeBytes = blockSize * 4;
            // Count blocks ready
            var nBlocksReady = dataSigBytes / blockSizeBytes;
            if (doFlush) {
              // Round up to include partial blocks
              nBlocksReady = Math.ceil(nBlocksReady)
            } else {
              // Round down to include only full blocks,
              // less the number of blocks that must remain in the buffer
              nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0)
            }
            // Count words ready
            var nWordsReady = nBlocksReady * blockSize;
            // Count bytes ready
            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);
            // Process blocks
            if (nWordsReady) {
              for (var offset = 0; offset < nWordsReady; offset += blockSize) {
                // Perform concrete-algorithm logic
                this._doProcessBlock(dataWords, offset)
              }
              // Remove processed words
              var processedWords = dataWords.splice(0, nWordsReady);
              data.sigBytes -= nBytesReady
            }
            // Return processed words
            return new WordArray.init(processedWords, nBytesReady)
          },
          /**
	         * Creates a copy of this object.
	         *
	         * @return {Object} The clone.
	         *
	         * @example
	         *
	         *     var clone = bufferedBlockAlgorithm.clone();
	         */
          clone: function () {
            var clone = Base.clone.call(this);
            clone._data = this._data.clone();
            return clone
          },
          _minBufferSize: 0
        });
        /**
	     * Abstract hasher template.
	     *
	     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)
	     */
        var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({
          /**
	         * Configuration options.
	         */
          cfg: Base.extend(),
          /**
	         * Initializes a newly created hasher.
	         *
	         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.
	         *
	         * @example
	         *
	         *     var hasher = CryptoJS.algo.SHA256.create();
	         */
          init: function (cfg) {
            // Apply config defaults
            this.cfg = this.cfg.extend(cfg);
            // Set initial values
            this.reset()
          },
          /**
	         * Resets this hasher to its initial state.
	         *
	         * @example
	         *
	         *     hasher.reset();
	         */
          reset: function () {
            // Reset data buffer
            BufferedBlockAlgorithm.reset.call(this);
            // Perform concrete-hasher logic
            this._doReset()
          },
          /**
	         * Updates this hasher with a message.
	         *
	         * @param {WordArray|string} messageUpdate The message to append.
	         *
	         * @return {Hasher} This hasher.
	         *
	         * @example
	         *
	         *     hasher.update('message');
	         *     hasher.update(wordArray);
	         */
          update: function (messageUpdate) {
            // Append
            this._append(messageUpdate);
            // Update the hash
            this._process();
            // Chainable
            return this
          },
          /**
	         * Finalizes the hash computation.
	         * Note that the finalize operation is effectively a destructive, read-once operation.
	         *
	         * @param {WordArray|string} messageUpdate (Optional) A final message update.
	         *
	         * @return {WordArray} The hash.
	         *
	         * @example
	         *
	         *     var hash = hasher.finalize();
	         *     var hash = hasher.finalize('message');
	         *     var hash = hasher.finalize(wordArray);
	         */
          finalize: function (messageUpdate) {
            // Final message update
            if (messageUpdate) {
              this._append(messageUpdate)
            }
            // Perform concrete-hasher logic
            var hash = this._doFinalize();
            return hash
          },
          blockSize: 512 / 32,
          /**
	         * Creates a shortcut function to a hasher's object interface.
	         *
	         * @param {Hasher} hasher The hasher to create a helper for.
	         *
	         * @return {Function} The shortcut function.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);
	         */
          _createHelper: function (hasher) {
            return function (message, cfg) {
              return new hasher.init(cfg).finalize(message)
            }
          },
          /**
	         * Creates a shortcut function to the HMAC's object interface.
	         *
	         * @param {Hasher} hasher The hasher to use in this HMAC helper.
	         *
	         * @return {Function} The shortcut function.
	         *
	         * @static
	         *
	         * @example
	         *
	         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);
	         */
          _createHmacHelper: function (hasher) {
            return function (message, key) {
              return new C_algo.HMAC.init(hasher, key).finalize(message)
            }
          }
        });
        /**
	     * Algorithm namespace.
	     */
        var C_algo = C.algo = {};
        return C
      }(Math);
      return CryptoJS
    }))
  });
  // source: node_modules/commerce.js/lib/index.js
  rqzt.define('commerce.js/lib', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.11.1
    module.exports = { Cart: rqzt('commerce.js/lib/cart') }  //# sourceMappingURL=index.js.map
  });
  // source: node_modules/commerce.js/lib/cart.js
  rqzt.define('commerce.js/lib/cart', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.11.1
    var Cart, Promise, analytics;
    analytics = rqzt('commerce.js/lib/analytics');
    Promise = rqzt('broken/dist/broken');
    Cart = function () {
      Cart.prototype.waits = 0;
      Cart.prototype.queue = null;
      Cart.prototype.data = null;
      Cart.prototype.client = null;
      Cart.prototype.cartPromise = null;
      Cart.prototype.promise = null;
      Cart.prototype.reject = null;
      Cart.prototype.resolve = null;
      Cart.prototype.opts = {};
      function Cart(client, data1, opts) {
        this.client = client;
        this.data = data1;
        this.opts = opts != null ? opts : {};
        this.queue = [];
        this.invoice()
      }
      Cart.prototype.initCart = function () {
        var cartId, i, item, items, j, len;
        cartId = this.data.get('order.cartId');
        if (!cartId && this.client.cart != null) {
          return this.client.cart.create().then(function (_this) {
            return function (cart) {
              var i, item, items, j, len;
              _this.data.set('order.cartId', cart.id);
              items = _this.data.get('order.items');
              for (i = j = 0, len = items.length; j < len; i = ++j) {
                item = items[i];
                _this._cartSet(item.productId, item.quantity)
              }
              return _this.onCart(cart.id)
            }
          }(this))
        } else {
          this.onCart(cartId);
          items = this.data.get('order.items');
          for (i = j = 0, len = items.length; j < len; i = ++j) {
            item = items[i];
            this._cartSet(item.productId, item.quantity)
          }
          return this.onCart(cartId)
        }
      };
      Cart.prototype.onCart = function (cartId) {
      };
      Cart.prototype._cartSet = function (id, quantity) {
        var cartId;
        cartId = this.data.get('order.cartId');
        if (cartId && this.client.cart != null) {
          return this.client.cart.set({
            id: cartId,
            productId: id,
            quantity: quantity
          })
        }
      };
      Cart.prototype._cartUpdate = function (cart) {
        var cartId;
        cartId = this.data.get('order.cartId');
        if (cartId && this.client.cart != null) {
          cart.id = cartId;
          return this.client.cart.update(cart)
        }
      };
      Cart.prototype.set = function (id, quantity, locked) {
        if (locked == null) {
          locked = false
        }
        this.queue.push([
          id,
          quantity,
          locked
        ]);
        if (this.queue.length === 1) {
          this.promise = new Promise(function (_this) {
            return function (resolve, reject) {
              _this.resolve = resolve;
              return _this.reject = reject
            }
          }(this));
          this._set()
        }
        return this.promise
      };
      Cart.prototype.get = function (id) {
        var i, item, items, j, k, len, len1, ref;
        items = this.data.get('order.items');
        for (i = j = 0, len = items.length; j < len; i = ++j) {
          item = items[i];
          if (item.id !== id && item.productId !== id && item.productSlug !== id) {
            continue
          }
          return item
        }
        ref = this.queue;
        for (i = k = 0, len1 = ref.length; k < len1; i = ++k) {
          item = ref[i];
          if (item[0] !== id) {
            continue
          }
          return {
            id: item[0],
            quantity: item[2],
            locked: item[3]
          }
        }
      };
      Cart.prototype._set = function () {
        var a, deltaQuantity, i, id, item, items, j, k, len, len1, locked, newValue, oldValue, quantity, ref;
        items = this.data.get('order.items');
        if (this.queue.length === 0) {
          this.invoice();
          if (this.resolve != null) {
            this.resolve(items)
          }
          return
        }
        ref = this.queue[0], id = ref[0], quantity = ref[1], locked = ref[2];
        if (quantity === 0) {
          for (i = j = 0, len = items.length; j < len; i = ++j) {
            item = items[i];
            if (item.productId === id || item.productSlug === id || item.id === id) {
              break
            }
          }
          if (i < items.length) {
            this.data.set('order.items', []);
            items.splice(i, 1);
            this.onUpdate();
            a = {
              id: item.productId,
              sku: item.productSlug,
              name: item.productName,
              quantity: item.quantity,
              price: parseFloat(item.price / 100)
            };
            if (this.opts.analyticsProductTransform != null) {
              a = this.opts.analyticsProductTransform(a)
            }
            analytics.track('Removed Product', a);
            this.data.set('order.items', items);
            this._cartSet(item.productId, 0);
            this.onUpdate(item)
          }
          this.queue.shift();
          this._set();
          return
        }
        for (i = k = 0, len1 = items.length; k < len1; i = ++k) {
          item = items[i];
          if (item.id !== id && item.productId !== id && item.productSlug !== id) {
            continue
          }
          oldValue = item.quantity;
          item.quantity = quantity;
          item.locked = locked;
          newValue = quantity;
          deltaQuantity = newValue - oldValue;
          if (deltaQuantity > 0) {
            a = {
              id: item.productId,
              sku: item.productSlug,
              name: item.productName,
              quantity: deltaQuantity,
              price: parseFloat(item.price / 100)
            };
            if (this.opts.analyticsProductTransform != null) {
              a = this.opts.analyticsProductTransform(a)
            }
            analytics.track('Added Product', a)
          } else if (deltaQuantity < 0) {
            a = {
              id: item.productId,
              sku: item.productSlug,
              name: item.productName,
              quantity: deltaQuantity,
              price: parseFloat(item.price / 100)
            };
            if (this.opts.analyticsProductTransform != null) {
              a = this.opts.analyticsProductTransform(a)
            }
            analytics.track('Removed Product', a)
          }
          this.data.set('order.items.' + i + '.quantity', quantity);
          this.data.set('order.items.' + i + '.locked', locked);
          this._cartSet(item.productId, quantity);
          this.onUpdate(item);
          this.queue.shift();
          this._set();
          return
        }
        items.push({
          id: id,
          quantity: quantity,
          locked: locked
        });
        this.waits++;
        return this.load(id)
      };
      Cart.prototype.load = function (id) {
        return this.client.product.get(id).then(function (_this) {
          return function (product) {
            var a, i, item, items, j, len;
            _this.waits--;
            items = _this.data.get('order.items');
            for (i = j = 0, len = items.length; j < len; i = ++j) {
              item = items[i];
              if (product.id === item.id || product.slug === item.id) {
                a = {
                  id: product.id,
                  sku: product.slug,
                  name: product.name,
                  quantity: item.quantity,
                  price: parseFloat(product.price / 100)
                };
                if (_this.opts.analyticsProductTransform != null) {
                  a = _this.opts.analyticsProductTransform(a)
                }
                analytics.track('Added Product', a);
                _this.update(product, item);
                _this.data.set('order.items.' + i, item);
                _this._cartSet(product.id, item.quantity);
                break
              }
            }
            _this.queue.shift();
            return _this._set()
          }
        }(this))['catch'](function (_this) {
          return function (err) {
            var i, item, items, j, len;
            _this.waits--;
            void 0;
            items = _this.data.get('order.items');
            for (i = j = 0, len = items.length; j < len; i = ++j) {
              item = items[i];
              if (item.id === id) {
                items.splice(i, 1);
                _this.data.set('order.items', items);
                break
              }
            }
            _this.queue.shift();
            return _this._set()
          }
        }(this))
      };
      Cart.prototype.refresh = function (id) {
        var items;
        items = this.data.get('order.items');
        return this.client.product.get(id).then(function (_this) {
          return function (product) {
            var i, item, j, len;
            _this.waits--;
            for (i = j = 0, len = items.length; j < len; i = ++j) {
              item = items[i];
              if (product.id === item.productId || product.slug === item.productSlug) {
                _this.update(product, item);
                break
              }
            }
            return items
          }
        }(this))['catch'](function (err) {
          return void 0
        })
      };
      Cart.prototype.update = function (product, item) {
        delete item.id;
        item.productId = product.id;
        item.productSlug = product.slug;
        item.productName = product.name;
        item.price = product.price;
        item.listPrice = product.listPrice;
        item.description = product.description;
        return this.onUpdate(item)
      };
      Cart.prototype.onUpdate = function (item) {
      };
      Cart.prototype.promoCode = function (promoCode) {
        if (promoCode != null) {
          this.invoice();
          return this.client.coupon.get(promoCode).then(function (_this) {
            return function (coupon) {
              if (coupon.enabled) {
                _this.data.set('order.coupon', coupon);
                _this.data.set('order.couponCodes', [promoCode]);
                _this._cartUpdate({
                  coupon: coupon,
                  couponCodes: [promoCode]
                });
                if (coupon.freeProductId !== '' && coupon.freeQuantity > 0) {
                  return _this.client.product.get(coupon.freeProductId).then(function (freeProduct) {
                    return _this.invoice()
                  })['catch'](function (err) {
                    throw new Error('This coupon is invalid.')
                  })
                } else {
                  _this.invoice()
                }
              } else {
                throw new Error('This code is expired.')
              }
            }
          }(this))
        }
        return this.data.get('order.promoCode')
      };
      Cart.prototype.taxRates = function (taxRates) {
        if (taxRates != null) {
          this.data.set('taxRates', taxRates);
          this.invoice()
        }
        return this.data.get('taxRates')
      };
      Cart.prototype.shippingRates = function (shippingRates) {
        if (shippingRates != null) {
          this.data.set('shippingRates', shippingRates);
          this.invoice()
        }
        return this.data.get('shippingRates')
      };
      Cart.prototype.invoice = function () {
        var city, country, coupon, discount, item, items, j, k, l, len, len1, len2, len3, len4, len5, m, n, o, quantity, ref, ref1, ref2, ref3, ref4, shipping, shippingRate, shippingRateFilter, shippingRates, state, subtotal, tax, taxRate, taxRateFilter, taxRates;
        items = this.data.get('order.items');
        discount = 0;
        coupon = this.data.get('order.coupon');
        if (coupon != null) {
          switch (coupon.type) {
          case 'flat':
            if (coupon.productId == null || coupon.productId === '') {
              discount = coupon.amount || 0
            } else {
              ref = this.data.get('order.items');
              for (j = 0, len = ref.length; j < len; j++) {
                item = ref[j];
                if (item.productId === coupon.productId) {
                  quantity = item.quantity;
                  if (coupon.once) {
                    quantity = 1
                  }
                  discount += (coupon.amount || 0) * quantity
                }
              }
            }
            break;
          case 'percent':
            if (coupon.productId == null || coupon.productId === '') {
              ref1 = this.data.get('order.items');
              for (k = 0, len1 = ref1.length; k < len1; k++) {
                item = ref1[k];
                quantity = item.quantity;
                if (coupon.once) {
                  quantity = 1
                }
                discount += (coupon.amount || 0) * item.price * quantity * 0.01
              }
            } else {
              ref2 = this.data.get('order.items');
              for (l = 0, len2 = ref2.length; l < len2; l++) {
                item = ref2[l];
                if (item.productId === coupon.productId) {
                  quantity = item.quantity;
                  if (coupon.once) {
                    quantity = 1
                  }
                  discount += (coupon.amount || 0) * item.price * quantity * 0.01
                }
              }
            }
            discount = Math.floor(discount)
          }
        }
        this.data.set('order.discount', discount);
        items = this.data.get('order.items');
        subtotal = -discount;
        for (m = 0, len3 = items.length; m < len3; m++) {
          item = items[m];
          subtotal += item.price * item.quantity
        }
        this.data.set('order.subtotal', subtotal);
        taxRates = this.data.get('taxRates');
        if (taxRates != null) {
          for (n = 0, len4 = taxRates.length; n < len4; n++) {
            taxRateFilter = taxRates[n];
            city = this.data.get('order.shippingAddress.city');
            if (!city || taxRateFilter.city != null && taxRateFilter.city.toLowerCase() !== city.toLowerCase()) {
              continue
            }
            state = this.data.get('order.shippingAddress.state');
            if (!state || taxRateFilter.state != null && taxRateFilter.state.toLowerCase() !== state.toLowerCase()) {
              continue
            }
            country = this.data.get('order.shippingAddress.country');
            if (!country || taxRateFilter.country != null && taxRateFilter.country.toLowerCase() !== country.toLowerCase()) {
              continue
            }
            this.data.set('order.taxRate', taxRateFilter.taxRate);
            break
          }
        }
        shippingRates = this.data.get('shippingRates');
        if (shippingRates != null) {
          for (o = 0, len5 = shippingRates.length; o < len5; o++) {
            shippingRateFilter = shippingRates[o];
            city = this.data.get('order.shippingAddress.city');
            if (!city || shippingRateFilter.city != null && shippingRateFilter.city.toLowerCase() !== city.toLowerCase()) {
              continue
            }
            state = this.data.get('order.shippingAddress.state');
            if (!state || shippingRateFilter.state != null && shippingRateFilter.state.toLowerCase() !== state.toLowerCase()) {
              continue
            }
            country = this.data.get('order.shippingAddress.country');
            if (!country || shippingRateFilter.country != null && shippingRateFilter.country.toLowerCase() !== country.toLowerCase()) {
              continue
            }
            this.data.set('order.shippingRate', shippingRateFilter.shippingRate);
            break
          }
        }
        taxRate = (ref3 = this.data.get('order.taxRate')) != null ? ref3 : 0;
        tax = Math.ceil((taxRate != null ? taxRate : 0) * subtotal);
        shippingRate = (ref4 = this.data.get('order.shippingRate')) != null ? ref4 : 0;
        shipping = shippingRate;
        this.data.set('order.shipping', shipping);
        this.data.set('order.tax', tax);
        return this.data.set('order.total', subtotal + shipping + tax)
      };
      Cart.prototype.checkout = function () {
        var data;
        this.invoice();
        data = {
          user: this.data.get('user'),
          order: this.data.get('order'),
          payment: this.data.get('payment')
        };
        return this.client.checkout.authorize(data).then(function (_this) {
          return function (order) {
            var a, i, item, j, len, options, p, p2, ref, referralProgram;
            _this.data.set('coupon', _this.data.get('order.coupon') || {});
            _this.data.set('order', order);
            p = _this.client.checkout.capture(order.id).then(function (order) {
              _this.data.set('order', order);
              return order
            })['catch'](function (err) {
              var ref;
              if (typeof window !== 'undefined' && window !== null) {
                if ((ref = window.Raven) != null) {
                  ref.captureException(err)
                }
              }
              return void 0
            });
            referralProgram = _this.data.get('referralProgram');
            if (referralProgram != null) {
              p2 = _this.client.referrer.create({
                userId: data.order.userId,
                orderId: data.order.orderId,
                program: referralProgram,
                programId: _this.data.get('referralProgram.id')
              })['catch'](function (err) {
                var ref;
                if (typeof window !== 'undefined' && window !== null) {
                  if ((ref = window.Raven) != null) {
                    ref.captureException(err)
                  }
                }
                return void 0
              });
              p = Promise.settle([
                p,
                p2
              ]).then(function (pis) {
                var referrer;
                order = pis[0].value;
                referrer = pis[1].value;
                _this.data.set('referrerId', referrer.id);
                return order
              })['catch'](function (err) {
                var ref;
                if (typeof window !== 'undefined' && window !== null) {
                  if ((ref = window.Raven) != null) {
                    ref.captureException(err)
                  }
                }
                return void 0
              })
            }
            options = {
              orderId: _this.data.get('order.id'),
              total: parseFloat(_this.data.get('order.total') / 100),
              shipping: parseFloat(_this.data.get('order.shipping') / 100),
              tax: parseFloat(_this.data.get('order.tax') / 100),
              discount: parseFloat(_this.data.get('order.discount') / 100),
              coupon: _this.data.get('order.couponCodes.0') || '',
              currency: _this.data.get('order.currency'),
              products: []
            };
            ref = _this.data.get('order.items');
            for (i = j = 0, len = ref.length; j < len; i = ++j) {
              item = ref[i];
              a = {
                id: item.productId,
                sku: item.productSlug,
                name: item.productName,
                quantity: item.quantity,
                price: parseFloat(item.price / 100)
              };
              if (_this.opts.analyticsProductTransform != null) {
                a = _this.opts.analyticsProductTransform(a)
              }
              options.products[i] = a
            }
            analytics.track('Completed Order', options);
            return { p: p }
          }
        }(this))
      };
      return Cart
    }();
    module.exports = Cart  //# sourceMappingURL=cart.js.map
  });
  // source: node_modules/commerce.js/lib/analytics.js
  rqzt.define('commerce.js/lib/analytics', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.11.1
    module.exports = {
      track: function (event, data) {
        var err;
        if ((typeof window !== 'undefined' && window !== null ? window.analytics : void 0) != null) {
          try {
            return window.analytics.track(event, data)
          } catch (error) {
            err = error;
            return void 0
          }
        }
      }
    }  //# sourceMappingURL=analytics.js.map
  });
  // source: node_modules/hanzo.js/lib/browser.js
  rqzt.define('hanzo.js/lib/browser', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var Api, Client;
    if (global.Hanzo == null) {
      global.Hanzo = {}
    }
    Api = rqzt('hanzo.js/lib/api');
    Client = rqzt('hanzo.js/lib/client/xhr');
    Api.CLIENT = Client;
    Api.BLUEPRINTS = rqzt('hanzo.js/lib/blueprints/browser');
    Hanzo.Api = Api;
    Hanzo.Client = Client;
    module.exports = Hanzo  //# sourceMappingURL=browser.js.map
  });
  // source: node_modules/hanzo.js/lib/api.js
  rqzt.define('hanzo.js/lib/api', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var Api, isFunction, isString, newError, ref, statusOk;
    ref = rqzt('hanzo.js/lib/utils'), isFunction = ref.isFunction, isString = ref.isString, newError = ref.newError, statusOk = ref.statusOk;
    module.exports = Api = function () {
      Api.BLUEPRINTS = {};
      Api.CLIENT = null;
      function Api(opts) {
        var blueprints, client, debug, endpoint, k, key, v;
        if (opts == null) {
          opts = {}
        }
        if (!(this instanceof Api)) {
          return new Api(opts)
        }
        endpoint = opts.endpoint, debug = opts.debug, key = opts.key, client = opts.client, blueprints = opts.blueprints;
        this.debug = debug;
        if (blueprints == null) {
          blueprints = this.constructor.BLUEPRINTS
        }
        if (client) {
          this.client = client
        } else {
          this.client = new this.constructor.CLIENT({
            debug: debug,
            endpoint: endpoint,
            key: key
          })
        }
        for (k in blueprints) {
          v = blueprints[k];
          this.addBlueprints(k, v)
        }
      }
      Api.prototype.addBlueprints = function (api, blueprints) {
        var bp, fn, name;
        if (this[api] == null) {
          this[api] = {}
        }
        fn = function (_this) {
          return function (name, bp) {
            var method;
            if (isFunction(bp)) {
              return _this[api][name] = function () {
                return bp.apply(_this, arguments)
              }
            }
            if (bp.expects == null) {
              bp.expects = statusOk
            }
            if (bp.method == null) {
              bp.method = 'POST'
            }
            method = function (data, cb) {
              var key;
              key = void 0;
              if (bp.useCustomerToken) {
                key = _this.client.getCustomerToken()
              }
              return _this.client.request(bp, data, key).then(function (res) {
                var ref1, ref2;
                if (((ref1 = res.data) != null ? ref1.error : void 0) != null) {
                  throw newError(data, res)
                }
                if (!bp.expects(res)) {
                  throw newError(data, res)
                }
                if (bp.process != null) {
                  bp.process.call(_this, res)
                }
                return (ref2 = res.data) != null ? ref2 : res.body
              }).callback(cb)
            };
            return _this[api][name] = method
          }
        }(this);
        for (name in blueprints) {
          bp = blueprints[name];
          fn(name, bp)
        }
      };
      Api.prototype.setKey = function (key) {
        return this.client.setKey(key)
      };
      Api.prototype.setCustomerToken = function (key) {
        return this.client.setCustomerToken(key)
      };
      Api.prototype.deleteCustomerToken = function () {
        return this.client.deleteCustomerToken()
      };
      Api.prototype.setStore = function (id) {
        this.storeId = id;
        return this.client.setStore(id)
      };
      return Api
    }()  //# sourceMappingURL=api.js.map
  });
  // source: node_modules/hanzo.js/lib/utils.js
  rqzt.define('hanzo.js/lib/utils', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var updateParam;
    exports.isFunction = function (fn) {
      return typeof fn === 'function'
    };
    exports.isString = function (s) {
      return typeof s === 'string'
    };
    exports.statusOk = function (res) {
      return res.status === 200
    };
    exports.statusCreated = function (res) {
      return res.status === 201
    };
    exports.statusNoContent = function (res) {
      return res.status === 204
    };
    exports.newError = function (data, res, err) {
      var message, ref, ref1, ref2, ref3, ref4;
      if (res == null) {
        res = {}
      }
      message = (ref = res != null ? (ref1 = res.data) != null ? (ref2 = ref1.error) != null ? ref2.message : void 0 : void 0 : void 0) != null ? ref : 'Request failed';
      if (err == null) {
        err = new Error(message);
        err.message = message
      }
      err.req = data;
      err.data = res.data;
      err.responseText = res.data;
      err.status = res.status;
      err.type = (ref3 = res.data) != null ? (ref4 = ref3.error) != null ? ref4.type : void 0 : void 0;
      return err
    };
    updateParam = function (url, key, value) {
      var hash, re, separator;
      re = new RegExp('([?&])' + key + '=.*?(&|#|$)(.*)', 'gi');
      if (re.test(url)) {
        if (value != null) {
          return url.replace(re, '$1' + key + '=' + value + '$2$3')
        } else {
          hash = url.split('#');
          url = hash[0].replace(re, '$1$3').replace(/(&|\?)$/, '');
          if (hash[1] != null) {
            url += '#' + hash[1]
          }
          return url
        }
      } else {
        if (value != null) {
          separator = url.indexOf('?') !== -1 ? '&' : '?';
          hash = url.split('#');
          url = hash[0] + separator + key + '=' + value;
          if (hash[1] != null) {
            url += '#' + hash[1]
          }
          return url
        } else {
          return url
        }
      }
    };
    exports.updateQuery = function (url, data) {
      var k, v;
      if (typeof data !== 'object') {
        return url
      }
      for (k in data) {
        v = data[k];
        url = updateParam(url, k, v)
      }
      return url
    }  //# sourceMappingURL=utils.js.map
  });
  // source: node_modules/hanzo.js/lib/client/xhr.js
  rqzt.define('hanzo.js/lib/client/xhr', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var Xhr, XhrClient, cookie, isFunction, newError, ref, updateQuery;
    Xhr = rqzt('xhr-promise-es6/lib');
    Xhr.Promise = rqzt('broken/dist/broken');
    cookie = rqzt('js-cookie/src/js.cookie');
    ref = rqzt('hanzo.js/lib/utils'), isFunction = ref.isFunction, newError = ref.newError, updateQuery = ref.updateQuery;
    module.exports = XhrClient = function () {
      XhrClient.prototype.debug = false;
      XhrClient.prototype.endpoint = 'https://api.hanzo.io';
      XhrClient.prototype.sessionName = 'hnzo';
      function XhrClient(opts) {
        if (opts == null) {
          opts = {}
        }
        if (!(this instanceof XhrClient)) {
          return new XhrClient(opts)
        }
        this.key = opts.key, this.debug = opts.debug;
        if (opts.endpoint) {
          this.setEndpoint(opts.endpoint)
        }
        this.getCustomerToken()
      }
      XhrClient.prototype.setEndpoint = function (endpoint) {
        return this.endpoint = endpoint.replace(/\/$/, '')
      };
      XhrClient.prototype.setStore = function (id) {
        return this.storeId = id
      };
      XhrClient.prototype.setKey = function (key) {
        return this.key = key
      };
      XhrClient.prototype.getKey = function () {
        return this.key || this.constructor.KEY
      };
      XhrClient.prototype.getCustomerToken = function () {
        var session;
        if ((session = cookie.getJSON(this.sessionName)) != null) {
          if (session.customerToken != null) {
            this.customerToken = session.customerToken
          }
        }
        return this.customerToken
      };
      XhrClient.prototype.setCustomerToken = function (key) {
        cookie.set(this.sessionName, { customerToken: key }, { expires: 7 * 24 * 3600 * 1000 });
        return this.customerToken = key
      };
      XhrClient.prototype.deleteCustomerToken = function () {
        cookie.set(this.sessionName, { customerToken: null }, { expires: 7 * 24 * 3600 * 1000 });
        return this.customerToken = null
      };
      XhrClient.prototype.getUrl = function (url, data, key) {
        if (isFunction(url)) {
          url = url.call(this, data)
        }
        return updateQuery(this.endpoint + url, { token: key })
      };
      XhrClient.prototype.request = function (blueprint, data, key) {
        var opts;
        if (data == null) {
          data = {}
        }
        if (key == null) {
          key = this.getKey()
        }
        opts = {
          url: this.getUrl(blueprint.url, data, key),
          method: blueprint.method
        };
        if (blueprint.method !== 'GET') {
          opts.headers = { 'Content-Type': 'application/json' }
        }
        if (blueprint.method === 'GET') {
          opts.url = updateQuery(opts.url, data)
        } else {
          opts.data = JSON.stringify(data)
        }
        if (this.debug) {
          void 0;
          void 0;
          void 0;
          void 0
        }
        return new Xhr().send(opts).then(function (res) {
          if (this.debug) {
            void 0;
            void 0
          }
          res.data = res.responseText;
          return res
        })['catch'](function (res) {
          var err, error, ref1;
          try {
            res.data = (ref1 = res.responseText) != null ? ref1 : JSON.parse(res.xhr.responseText)
          } catch (error) {
            err = error
          }
          err = newError(data, res);
          if (this.debug) {
            void 0;
            void 0;
            void 0
          }
          throw err
        })
      };
      return XhrClient
    }()  //# sourceMappingURL=xhr.js.map
  });
  // source: node_modules/xhr-promise-es6/lib/index.js
  rqzt.define('xhr-promise-es6/lib', function (module, exports, __dirname, __filename, process) {
    /*
 * Copyright 2015 Scott Brady
 * MIT License
 * https://github.com/scottbrady/xhr-promise/blob/master/LICENSE
 */
    var ParseHeaders, XMLHttpRequestPromise, objectAssign;
    ParseHeaders = rqzt('parse-headers/parse-headers');
    objectAssign = rqzt('object-assign');
    /*
 * Module to wrap an XMLHttpRequest in a promise.
 */
    module.exports = XMLHttpRequestPromise = function () {
      function XMLHttpRequestPromise() {
      }
      XMLHttpRequestPromise.DEFAULT_CONTENT_TYPE = 'application/x-www-form-urlencoded; charset=UTF-8';
      XMLHttpRequestPromise.Promise = global.Promise;
      /*
   * XMLHttpRequestPromise.send(options) -> Promise
   * - options (Object): URL, method, data, etc.
   *
   * Create the XHR object and wire up event handlers to use a promise.
   */
      XMLHttpRequestPromise.prototype.send = function (options) {
        var defaults;
        if (options == null) {
          options = {}
        }
        defaults = {
          method: 'GET',
          data: null,
          headers: {},
          async: true,
          username: null,
          password: null
        };
        options = objectAssign({}, defaults, options);
        return new this.constructor.Promise(function (_this) {
          return function (resolve, reject) {
            var e, header, ref, value, xhr;
            if (!XMLHttpRequest) {
              _this._handleError('browser', reject, null, "browser doesn't support XMLHttpRequest");
              return
            }
            if (typeof options.url !== 'string' || options.url.length === 0) {
              _this._handleError('url', reject, null, 'URL is a required parameter');
              return
            }
            _this._xhr = xhr = new XMLHttpRequest;
            xhr.onload = function () {
              var responseText;
              _this._detachWindowUnload();
              try {
                responseText = _this._getResponseText()
              } catch (_error) {
                _this._handleError('parse', reject, null, 'invalid JSON response');
                return
              }
              return resolve({
                url: _this._getResponseUrl(),
                status: xhr.status,
                statusText: xhr.statusText,
                responseText: responseText,
                headers: _this._getHeaders(),
                xhr: xhr
              })
            };
            xhr.onerror = function () {
              return _this._handleError('error', reject)
            };
            xhr.ontimeout = function () {
              return _this._handleError('timeout', reject)
            };
            xhr.onabort = function () {
              return _this._handleError('abort', reject)
            };
            _this._attachWindowUnload();
            xhr.open(options.method, options.url, options.async, options.username, options.password);
            if (options.data != null && !options.headers['Content-Type']) {
              options.headers['Content-Type'] = _this.constructor.DEFAULT_CONTENT_TYPE
            }
            ref = options.headers;
            for (header in ref) {
              value = ref[header];
              xhr.setRequestHeader(header, value)
            }
            try {
              return xhr.send(options.data)
            } catch (_error) {
              e = _error;
              return _this._handleError('send', reject, null, e.toString())
            }
          }
        }(this))
      };
      /*
   * XMLHttpRequestPromise.getXHR() -> XMLHttpRequest
   */
      XMLHttpRequestPromise.prototype.getXHR = function () {
        return this._xhr
      };
      /*
   * XMLHttpRequestPromise._attachWindowUnload()
   *
   * Fix for IE 9 and IE 10
   * Internet Explorer freezes when you close a webpage during an XHR request
   * https://support.microsoft.com/kb/2856746
   *
   */
      XMLHttpRequestPromise.prototype._attachWindowUnload = function () {
        this._unloadHandler = this._handleWindowUnload.bind(this);
        if (window.attachEvent) {
          return window.attachEvent('onunload', this._unloadHandler)
        }
      };
      /*
   * XMLHttpRequestPromise._detachWindowUnload()
   */
      XMLHttpRequestPromise.prototype._detachWindowUnload = function () {
        if (window.detachEvent) {
          return window.detachEvent('onunload', this._unloadHandler)
        }
      };
      /*
   * XMLHttpRequestPromise._getHeaders() -> Object
   */
      XMLHttpRequestPromise.prototype._getHeaders = function () {
        return ParseHeaders(this._xhr.getAllResponseHeaders())
      };
      /*
   * XMLHttpRequestPromise._getResponseText() -> Mixed
   *
   * Parses response text JSON if present.
   */
      XMLHttpRequestPromise.prototype._getResponseText = function () {
        var responseText;
        responseText = typeof this._xhr.responseText === 'string' ? this._xhr.responseText : '';
        switch (this._xhr.getResponseHeader('Content-Type')) {
        case 'application/json':
        case 'text/javascript':
          responseText = JSON.parse(responseText + '')
        }
        return responseText
      };
      /*
   * XMLHttpRequestPromise._getResponseUrl() -> String
   *
   * Actual response URL after following redirects.
   */
      XMLHttpRequestPromise.prototype._getResponseUrl = function () {
        if (this._xhr.responseURL != null) {
          return this._xhr.responseURL
        }
        if (/^X-Request-URL:/m.test(this._xhr.getAllResponseHeaders())) {
          return this._xhr.getResponseHeader('X-Request-URL')
        }
        return ''
      };
      /*
   * XMLHttpRequestPromise._handleError(reason, reject, status, statusText)
   * - reason (String)
   * - reject (Function)
   * - status (String)
   * - statusText (String)
   */
      XMLHttpRequestPromise.prototype._handleError = function (reason, reject, status, statusText) {
        this._detachWindowUnload();
        return reject({
          reason: reason,
          status: status || this._xhr.status,
          statusText: statusText || this._xhr.statusText,
          xhr: this._xhr
        })
      };
      /*
   * XMLHttpRequestPromise._handleWindowUnload()
   */
      XMLHttpRequestPromise.prototype._handleWindowUnload = function () {
        return this._xhr.abort()
      };
      return XMLHttpRequestPromise
    }()
  });
  // source: node_modules/parse-headers/parse-headers.js
  rqzt.define('parse-headers/parse-headers', function (module, exports, __dirname, __filename, process) {
    var trim = rqzt('trim'), forEach = rqzt('for-each'), isArray = function (arg) {
        return Object.prototype.toString.call(arg) === '[object Array]'
      };
    module.exports = function (headers) {
      if (!headers)
        return {};
      var result = {};
      forEach(trim(headers).split('\n'), function (row) {
        var index = row.indexOf(':'), key = trim(row.slice(0, index)).toLowerCase(), value = trim(row.slice(index + 1));
        if (typeof result[key] === 'undefined') {
          result[key] = value
        } else if (isArray(result[key])) {
          result[key].push(value)
        } else {
          result[key] = [
            result[key],
            value
          ]
        }
      });
      return result
    }
  });
  // source: node_modules/trim/index.js
  rqzt.define('trim', function (module, exports, __dirname, __filename, process) {
    exports = module.exports = trim;
    function trim(str) {
      return str.replace(/^\s*|\s*$/g, '')
    }
    exports.left = function (str) {
      return str.replace(/^\s*/, '')
    };
    exports.right = function (str) {
      return str.replace(/\s*$/, '')
    }
  });
  // source: node_modules/for-each/index.js
  rqzt.define('for-each', function (module, exports, __dirname, __filename, process) {
    var isFunction = rqzt('is-function');
    module.exports = forEach;
    var toString = Object.prototype.toString;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    function forEach(list, iterator, context) {
      if (!isFunction(iterator)) {
        throw new TypeError('iterator must be a function')
      }
      if (arguments.length < 3) {
        context = this
      }
      if (toString.call(list) === '[object Array]')
        forEachArray(list, iterator, context);
      else if (typeof list === 'string')
        forEachString(list, iterator, context);
      else
        forEachObject(list, iterator, context)
    }
    function forEachArray(array, iterator, context) {
      for (var i = 0, len = array.length; i < len; i++) {
        if (hasOwnProperty.call(array, i)) {
          iterator.call(context, array[i], i, array)
        }
      }
    }
    function forEachString(string, iterator, context) {
      for (var i = 0, len = string.length; i < len; i++) {
        // no such thing as a sparse string.
        iterator.call(context, string.charAt(i), i, string)
      }
    }
    function forEachObject(object, iterator, context) {
      for (var k in object) {
        if (hasOwnProperty.call(object, k)) {
          iterator.call(context, object[k], k, object)
        }
      }
    }
  });
  // source: node_modules/is-function/index.js
  rqzt.define('is-function', function (module, exports, __dirname, __filename, process) {
    module.exports = isFunction;
    var toString = Object.prototype.toString;
    function isFunction(fn) {
      var string = toString.call(fn);
      return string === '[object Function]' || typeof fn === 'function' && string !== '[object RegExp]' || typeof window !== 'undefined' && (fn === window.setTimeout || fn === window.alert || fn === window.confirm || fn === window.prompt)
    }
    ;
  });
  // source: node_modules/object-assign/index.js
  rqzt.define('object-assign', function (module, exports, __dirname, __filename, process) {
    /*
object-assign
(c) Sindre Sorhus
@license MIT
*/
    'use strict';
    /* eslint-disable no-unused-vars */
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === undefined) {
        throw new TypeError('Object.assign cannot be called with null or undefined')
      }
      return Object(val)
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false
        }
        // Detect buggy property enumeration order in older V8 versions.
        // https://bugs.chromium.org/p/v8/issues/detail?id=4118
        var test1 = new String('abc');
        // eslint-disable-line no-new-wrappers
        test1[5] = 'de';
        if (Object.getOwnPropertyNames(test1)[0] === '5') {
          return false
        }
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2['_' + String.fromCharCode(i)] = i
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
          return test2[n]
        });
        if (order2.join('') !== '0123456789') {
          return false
        }
        // https://bugs.chromium.org/p/v8/issues/detail?id=3056
        var test3 = {};
        'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
          test3[letter] = letter
        });
        if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {
          return false
        }
        return true
      } catch (err) {
        // We don't expect any of the above to throw, but better to be safe.
        return false
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function (target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key]
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]]
            }
          }
        }
      }
      return to
    }
  });
  // source: node_modules/hanzo.js/lib/blueprints/browser.js
  rqzt.define('hanzo.js/lib/blueprints/browser', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var blueprints, byId, createBlueprint, fn, i, isFunction, len, model, models, ref, ref1, statusCreated, statusNoContent, statusOk, storePrefixed;
    ref = rqzt('hanzo.js/lib/utils'), isFunction = ref.isFunction, statusCreated = ref.statusCreated, statusNoContent = ref.statusNoContent, statusOk = ref.statusOk;
    ref1 = rqzt('hanzo.js/lib/blueprints/url'), byId = ref1.byId, storePrefixed = ref1.storePrefixed;
    createBlueprint = function (name) {
      var endpoint;
      endpoint = '/' + name;
      return {
        list: {
          url: endpoint,
          method: 'GET',
          expects: statusOk
        },
        get: {
          url: byId(name),
          method: 'GET',
          expects: statusOk
        }
      }
    };
    blueprints = {
      account: {
        get: {
          url: '/account',
          method: 'GET',
          expects: statusOk,
          useCustomerToken: true
        },
        update: {
          url: '/account',
          method: 'PATCH',
          expects: statusOk,
          useCustomerToken: true
        },
        exists: {
          url: function (x) {
            var ref2, ref3, ref4;
            return '/account/exists/' + ((ref2 = (ref3 = (ref4 = x.email) != null ? ref4 : x.username) != null ? ref3 : x.id) != null ? ref2 : x)
          },
          method: 'GET',
          expects: statusOk,
          process: function (res) {
            return res.data.exists
          }
        },
        create: {
          url: '/account/create',
          method: 'POST',
          expects: statusCreated
        },
        enable: {
          url: function (x) {
            var ref2;
            return '/account/enable/' + ((ref2 = x.tokenId) != null ? ref2 : x)
          },
          method: 'POST',
          expects: statusOk
        },
        login: {
          url: '/account/login',
          method: 'POST',
          expects: statusOk,
          process: function (res) {
            this.setCustomerToken(res.data.token);
            return res
          }
        },
        logout: function () {
          return this.deleteCustomerToken()
        },
        reset: {
          url: '/account/reset',
          method: 'POST',
          expects: statusOk,
          useCustomerToken: true
        },
        updateOrder: {
          url: function (x) {
            var ref2, ref3;
            return '/account/order/' + ((ref2 = (ref3 = x.orderId) != null ? ref3 : x.id) != null ? ref2 : x)
          },
          method: 'PATCH',
          expects: statusOk,
          useCustomerToken: true
        },
        confirm: {
          url: function (x) {
            var ref2;
            return '/account/confirm/' + ((ref2 = x.tokenId) != null ? ref2 : x)
          },
          method: 'POST',
          expects: statusOk,
          useCustomerToken: true
        }
      },
      cart: {
        create: {
          url: '/cart',
          method: 'POST',
          expects: statusCreated
        },
        update: {
          url: function (x) {
            var ref2;
            return '/cart/' + ((ref2 = x.id) != null ? ref2 : x)
          },
          method: 'PATCH',
          expects: statusOk
        },
        discard: {
          url: function (x) {
            var ref2;
            return '/cart/' + ((ref2 = x.id) != null ? ref2 : x) + '/discard'
          },
          method: 'POST',
          expects: statusOk
        },
        set: {
          url: function (x) {
            var ref2;
            return '/cart/' + ((ref2 = x.id) != null ? ref2 : x) + '/set'
          },
          method: 'POST',
          expects: statusOk
        }
      },
      review: {
        create: {
          url: '/review',
          method: 'POST',
          expects: statusCreated
        },
        get: {
          url: function (x) {
            var ref2;
            return '/review/' + ((ref2 = x.id) != null ? ref2 : x)
          },
          method: 'GET',
          expects: statusOk
        }
      },
      checkout: {
        authorize: {
          url: storePrefixed('/checkout/authorize'),
          method: 'POST',
          expects: statusOk
        },
        capture: {
          url: storePrefixed(function (x) {
            var ref2;
            return '/checkout/capture/' + ((ref2 = x.orderId) != null ? ref2 : x)
          }),
          method: 'POST',
          expects: statusOk
        },
        charge: {
          url: storePrefixed('/checkout/charge'),
          method: 'POST',
          expects: statusOk
        },
        paypal: {
          url: storePrefixed('/checkout/paypal'),
          method: 'POST',
          expects: statusOk
        }
      },
      referrer: {
        create: {
          url: '/referrer',
          method: 'POST',
          expects: statusCreated
        },
        get: {
          url: function (x) {
            var ref2;
            return '/referrer/' + ((ref2 = x.id) != null ? ref2 : x)
          },
          method: 'GET',
          expects: statusOk
        }
      }
    };
    models = [
      'collection',
      'coupon',
      'product',
      'variant'
    ];
    fn = function (model) {
      return blueprints[model] = createBlueprint(model)
    };
    for (i = 0, len = models.length; i < len; i++) {
      model = models[i];
      fn(model)
    }
    module.exports = blueprints  //# sourceMappingURL=browser.js.map
  });
  // source: node_modules/hanzo.js/lib/blueprints/url.js
  rqzt.define('hanzo.js/lib/blueprints/url', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var isFunction, sp;
    isFunction = rqzt('hanzo.js/lib/utils').isFunction;
    exports.storePrefixed = sp = function (u) {
      return function (x) {
        var url;
        if (isFunction(u)) {
          url = u(x)
        } else {
          url = u
        }
        if (this.storeId != null) {
          return '/store/' + this.storeId + url
        } else {
          return url
        }
      }
    };
    exports.byId = function (name) {
      switch (name) {
      case 'coupon':
        return sp(function (x) {
          var ref;
          return '/coupon/' + ((ref = x.code) != null ? ref : x)
        });
      case 'collection':
        return sp(function (x) {
          var ref;
          return '/collection/' + ((ref = x.slug) != null ? ref : x)
        });
      case 'product':
        return sp(function (x) {
          var ref, ref1;
          return '/product/' + ((ref = (ref1 = x.id) != null ? ref1 : x.slug) != null ? ref : x)
        });
      case 'variant':
        return sp(function (x) {
          var ref, ref1;
          return '/variant/' + ((ref = (ref1 = x.id) != null ? ref1 : x.sku) != null ? ref : x)
        });
      case 'site':
        return function (x) {
          var ref, ref1;
          return '/site/' + ((ref = (ref1 = x.id) != null ? ref1 : x.name) != null ? ref : x)
        };
      default:
        return function (x) {
          var ref;
          return '/' + name + '/' + ((ref = x.id) != null ? ref : x)
        }
      }
    }  //# sourceMappingURL=url.js.map
  });
  // source: src/mediator.coffee
  rqzt.define('./mediator', function (module, exports, __dirname, __filename, process) {
    var riot;
    riot = rqzt('riot/riot');
    module.exports = riot.observable({})
  });
  // source: src/events.coffee
  rqzt.define('./events', function (module, exports, __dirname, __filename, process) {
    module.exports = {
      Ready: 'ready',
      SetData: 'set-data',
      TryUpdateItem: 'try-update-item',
      UpdateItem: 'update-item',
      UpdateItems: 'update-items',
      Change: 'change',
      ChangeSuccess: 'change-success',
      ChangeFailed: 'change-failed',
      Submit: 'submit',
      SubmitShippingAddress: 'submit-shipping-address',
      SubmitSuccess: 'submit-success',
      SubmitFailed: 'submit-failed',
      ForceApplyPromoCode: 'force-apply-promocode',
      ApplyPromoCode: 'apply-promocode',
      ApplyPromoCodeSuccess: 'apply-promocode-success',
      ApplyPromoCodeFailed: 'apply-promocode-failed',
      Login: 'login',
      LoginSuccess: 'login-success',
      LoginFailed: 'login-failed',
      Register: 'register',
      RegisterSuccess: 'register-success',
      RegisterFailed: 'register-failed',
      RegisterComplete: 'register-complete',
      RegisterCompleteSuccess: 'register-complete-success',
      RegisterCompleteFailed: 'register-complete-failed',
      ResetPassword: 'reset-password',
      ResetPasswordSuccess: 'reset-password-success',
      ResetPasswordFailed: 'reset-password-failed',
      ResetPasswordComplete: 'reset-password-complete',
      ResetPasswordCompleteSuccess: 'reset-password-complete-success',
      ResetPasswordCompleteFailed: 'reset-password-complete-failed',
      ProfileLoad: 'profile-load',
      ProfileLoadSuccess: 'profile-load-success',
      ProfileLoadFailed: 'profile-load-failed',
      ProfileUpdate: 'profile-update',
      ProfileUpdateSuccess: 'profile-update-success',
      ProfileUpdateFailed: 'profile-update-failed',
      ShippingAddressUpdate: 'shipping-address-update',
      ShippingAddressUpdateSuccess: 'shipping-address-update-success',
      ShippingAddressUpdateFailed: 'shipping-address-update-failed',
      DeleteLineItem: 'delete-line-item',
      CreateReferralProgram: 'create-referral-program',
      CreateReferralProgramSuccess: 'create-referral-program-success',
      CreateReferralProgramFailed: 'create-referral-program-failed'
    }
  });
  // source: src/utils/analytics.coffee
  rqzt.define('./utils/analytics', function (module, exports, __dirname, __filename, process) {
    module.exports = {
      track: function (event, data) {
        var err;
        if ((typeof window !== 'undefined' && window !== null ? window.analytics : void 0) != null) {
          try {
            return window.analytics.track(event, data)
          } catch (error) {
            err = error;
            return void 0
          }
        }
      }
    }
  });
  // source: src/shop.coffee
  rqzt.define('./shop', function (module, exports, __dirname, __filename, process) {
    var Shop;
    module.exports = Shop = function () {
      function Shop() {
      }
      return Shop
    }()
  });
  // source: src/forms/index.coffee
  rqzt.define('./forms', function (module, exports, __dirname, __filename, process) {
    module.exports = {
      Checkout: rqzt('./forms/checkout'),
      CheckoutShippingAddress: rqzt('./forms/checkout-shippingaddress'),
      Cart: rqzt('./forms/cart'),
      LineItem: rqzt('./forms/lineitem'),
      LineItems: rqzt('./forms/lineitems'),
      Login: rqzt('./forms/login'),
      Order: rqzt('./forms/order'),
      Orders: rqzt('./forms/orders'),
      Profile: rqzt('./forms/profile'),
      Register: rqzt('./forms/register'),
      RegisterComplete: rqzt('./forms/register-complete'),
      ResetPassword: rqzt('./forms/reset-password'),
      ResetPasswordComplete: rqzt('./forms/reset-password-complete'),
      ShippingAddress: rqzt('./forms/shippingaddress'),
      register: function () {
        this.Checkout.register();
        this.Cart.register();
        this.LineItem.register();
        this.LineItems.register();
        this.Login.register();
        this.Order.register();
        this.Orders.register();
        this.Profile.register();
        this.Register.register();
        this.RegisterComplete.register();
        this.ResetPassword.register();
        this.ResetPasswordComplete.register();
        return this.ShippingAddress.register()
      }
    }
  });
  // source: src/forms/checkout.coffee
  rqzt.define('./forms/checkout', function (module, exports, __dirname, __filename, process) {
    var CheckoutForm, CrowdControl, Events, m, store, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    CrowdControl = rqzt('crowdcontrol/lib');
    m = rqzt('./mediator');
    Events = rqzt('./events');
    store = rqzt('./utils/store');
    module.exports = CheckoutForm = function (superClass) {
      extend(CheckoutForm, superClass);
      function CheckoutForm() {
        return CheckoutForm.__super__.constructor.apply(this, arguments)
      }
      CheckoutForm.prototype.tag = 'checkout';
      CheckoutForm.prototype.html = '<form onsubmit={submit}>\n  <yield/>\n</form>';
      CheckoutForm.prototype.errorMessage = '';
      CheckoutForm.prototype.loading = false;
      CheckoutForm.prototype.checkedOut = false;
      CheckoutForm.prototype.configs = rqzt('./forms/config');
      CheckoutForm.prototype.init = function () {
        CheckoutForm.__super__.init.apply(this, arguments);
        return m.on(Events.ChangeSuccess, function (_this) {
          return function (name, value) {
            if (name === 'user.email') {
              return _this.cart._cartUpdate({
                email: value,
                mailchimp: { checkoutUrl: _this.data.get('order.checkoutUrl') },
                currency: _this.data.get('order.currency')
              })
            }
          }
        }(this))
      };
      CheckoutForm.prototype._submit = function (event) {
        var email;
        if (this.loading || this.checkedOut) {
          return
        }
        this.loading = true;
        m.trigger(Events.Submit, this.tag);
        this.errorMessage = '';
        this.update();
        email = '';
        return this.client.account.exists(this.data.get('user.email')).then(function (_this) {
          return function (res) {
            var cart;
            if (res.exists) {
              _this.data.set('user.id', _this.data.get('user.email'));
              email = _this.data.get('user.email');
              cart = {
                userId: email,
                email: email,
                mailchimp: { checkoutUrl: _this.data.get('order.checkoutUrl') },
                currency: _this.data.get('order.currency')
              };
              _this.cart._cartUpdate(cart)
            }
            _this.data.set('order.email', email);
            _this.update();
            return _this.cart.checkout().then(function (pRef) {
              return pRef.p.then(function () {
                var hasErrored;
                hasErrored = false;
                setTimeout(function () {
                  if (!hasErrored) {
                    _this.loading = false;
                    store.clear();
                    _this.checkedOut = true;
                    return _this.update()
                  }
                }, 200);
                return m.trigger(Events.SubmitSuccess)
              })['catch'](function (err) {
                var hasErrored, ref;
                if (typeof window !== 'undefined' && window !== null) {
                  if ((ref = window.Raven) != null) {
                    ref.captureException(err)
                  }
                }
                hasErrored = true;
                _this.loading = false;
                void 0;
                _this.errorMessage = 'Unable to complete your transaction. Please try again later.';
                m.trigger(Events.SubmitFailed, err);
                return _this.update()
              })
            })['catch'](function (err) {
              var ref;
              _this.loading = false;
              void 0;
              if (err.type === 'authorization-error') {
                _this.errorMessage = err.message
              } else {
                if (typeof window !== 'undefined' && window !== null) {
                  if ((ref = window.Raven) != null) {
                    ref.captureException(err)
                  }
                }
                _this.errorMessage = 'Unable to complete your transaction. Please try again later.'
              }
              m.trigger(Events.SubmitFailed, err);
              return _this.update()
            })
          }
        }(this))['catch'](function (_this) {
          return function (err) {
            var ref;
            _this.loading = false;
            void 0;
            if (err.type === 'authorization-error') {
              _this.errorMessage = err.message
            } else {
              if (typeof window !== 'undefined' && window !== null) {
                if ((ref = window.Raven) != null) {
                  ref.captureException(err)
                }
              }
              _this.errorMessage = 'Unable to complete your transaction. Please try again later.'
            }
            m.trigger(Events.SubmitFailed, err);
            return _this.update()
          }
        }(this))
      };
      return CheckoutForm
    }(CrowdControl.Views.Form)
  });
  // source: node_modules/crowdcontrol/lib/index.js
  rqzt.define('crowdcontrol/lib', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var CrowdControl, r, riot;
    r = rqzt('crowdcontrol/lib/riot');
    riot = r();
    CrowdControl = {
      Views: rqzt('crowdcontrol/lib/views'),
      tags: [],
      start: function (opts) {
        return this.tags = riot.mount('*', opts)
      },
      update: function () {
        var i, len, ref, results, tag;
        ref = this.tags;
        results = [];
        for (i = 0, len = ref.length; i < len; i++) {
          tag = ref[i];
          results.push(tag.update())
        }
        return results
      },
      riot: r
    };
    if (module.exports != null) {
      module.exports = CrowdControl
    }
    if (typeof window !== 'undefined' && window !== null) {
      if (window.Crowdstart != null) {
        window.Crowdstart.Crowdcontrol = CrowdControl
      } else {
        window.Crowdstart = { CrowdControl: CrowdControl }
      }
    }  //# sourceMappingURL=index.js.map
  });
  // source: node_modules/crowdcontrol/lib/riot.js
  rqzt.define('crowdcontrol/lib/riot', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var r;
    r = function () {
      return this.riot
    };
    r.set = function (riot) {
      this.riot = riot
    };
    r.riot = typeof window !== 'undefined' && window !== null ? window.riot : void 0;
    module.exports = r  //# sourceMappingURL=riot.js.map
  });
  // source: node_modules/crowdcontrol/lib/views/index.js
  rqzt.define('crowdcontrol/lib/views', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    module.exports = {
      Form: rqzt('crowdcontrol/lib/views/form'),
      Input: rqzt('crowdcontrol/lib/views/input'),
      View: rqzt('crowdcontrol/lib/views/view')
    }  //# sourceMappingURL=index.js.map
  });
  // source: node_modules/crowdcontrol/lib/views/form.js
  rqzt.define('crowdcontrol/lib/views/form', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var Form, Promise, View, inputify, observable, settle, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    View = rqzt('crowdcontrol/lib/views/view');
    inputify = rqzt('crowdcontrol/lib/views/inputify');
    observable = rqzt('crowdcontrol/lib/riot')().observable;
    Promise = rqzt('broken/dist/broken');
    settle = rqzt('promise-settle');
    Form = function (superClass) {
      extend(Form, superClass);
      function Form() {
        return Form.__super__.constructor.apply(this, arguments)
      }
      Form.prototype.configs = null;
      Form.prototype.inputs = null;
      Form.prototype.data = null;
      Form.prototype.initInputs = function () {
        var input, name, ref, results1;
        this.inputs = {};
        if (this.configs != null) {
          this.inputs = inputify(this.data, this.configs);
          ref = this.inputs;
          results1 = [];
          for (name in ref) {
            input = ref[name];
            results1.push(observable(input))
          }
          return results1
        }
      };
      Form.prototype.init = function () {
        return this.initInputs()
      };
      Form.prototype.submit = function (e) {
        var input, name, pRef, ps, ref;
        ps = [];
        ref = this.inputs;
        for (name in ref) {
          input = ref[name];
          pRef = {};
          input.trigger('validate', pRef);
          ps.push(pRef.p)
        }
        settle(ps).then(function (_this) {
          return function (results) {
            var i, len, result;
            for (i = 0, len = results.length; i < len; i++) {
              result = results[i];
              if (!result.isFulfilled()) {
                return
              }
            }
            return _this._submit.apply(_this, arguments)
          }
        }(this));
        if (e != null) {
          e.preventDefault();
          e.stopPropagation()
        }
        return false
      };
      Form.prototype._submit = function () {
      };
      return Form
    }(View);
    module.exports = Form  //# sourceMappingURL=form.js.map
  });
  // source: node_modules/crowdcontrol/lib/views/view.js
  rqzt.define('crowdcontrol/lib/views/view', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var View, collapsePrototype, isFunction, objectAssign, riot, setPrototypeOf;
    riot = rqzt('crowdcontrol/lib/riot')();
    objectAssign = rqzt('object-assign');
    setPrototypeOf = function () {
      var mixinProperties, setProtoOf;
      setProtoOf = function (obj, proto) {
        return obj.__proto__ = proto
      };
      mixinProperties = function (obj, proto) {
        var prop, results;
        results = [];
        for (prop in proto) {
          if (obj[prop] == null) {
            results.push(obj[prop] = proto[prop])
          } else {
            results.push(void 0)
          }
        }
        return results
      };
      if (Object.setPrototypeOf || { __proto__: [] } instanceof Array) {
        return setProtoOf
      } else {
        return mixinProperties
      }
    }();
    isFunction = rqzt('is-function');
    collapsePrototype = function (collapse, proto) {
      var parentProto;
      if (proto === View.prototype) {
        return
      }
      parentProto = Object.getPrototypeOf(proto);
      collapsePrototype(collapse, parentProto);
      return objectAssign(collapse, parentProto)
    };
    View = function () {
      View.register = function () {
        return new this
      };
      View.prototype.tag = '';
      View.prototype.html = '';
      View.prototype.css = '';
      View.prototype.attrs = '';
      View.prototype.events = null;
      function View() {
        var newProto;
        newProto = collapsePrototype({}, this);
        this.beforeInit();
        riot.tag(this.tag, this.html, this.css, this.attrs, function (opts) {
          var fn, handler, k, name, parent, proto, ref, ref1, self, v;
          if (newProto != null) {
            for (k in newProto) {
              v = newProto[k];
              if (isFunction(v)) {
                (function (_this) {
                  return function (v) {
                    var oldFn;
                    if (_this[k] != null) {
                      oldFn = _this[k];
                      return _this[k] = function () {
                        oldFn.apply(_this, arguments);
                        return v.apply(_this, arguments)
                      }
                    } else {
                      return _this[k] = function () {
                        return v.apply(_this, arguments)
                      }
                    }
                  }
                }(this)(v))
              } else {
                this[k] = v
              }
            }
          }
          self = this;
          parent = (ref = self.parent) != null ? ref : opts.parent;
          proto = Object.getPrototypeOf(self);
          while (parent && parent !== proto) {
            setPrototypeOf(self, parent);
            self = parent;
            parent = self.parent;
            proto = Object.getPrototypeOf(self)
          }
          if (opts != null) {
            for (k in opts) {
              v = opts[k];
              this[k] = v
            }
          }
          if (this.events != null) {
            ref1 = this.events;
            fn = function (_this) {
              return function (name, handler) {
                if (typeof handler === 'string') {
                  return _this.on(name, function () {
                    return _this[handler].apply(_this, arguments)
                  })
                } else {
                  return _this.on(name, function () {
                    return handler.apply(_this, arguments)
                  })
                }
              }
            }(this);
            for (name in ref1) {
              handler = ref1[name];
              fn(name, handler)
            }
          }
          return this.init(opts)
        })
      }
      View.prototype.beforeInit = function () {
      };
      View.prototype.init = function () {
      };
      return View
    }();
    module.exports = View  //# sourceMappingURL=view.js.map
  });
  // source: node_modules/crowdcontrol/lib/views/inputify.js
  rqzt.define('crowdcontrol/lib/views/inputify', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var Promise, inputify, isFunction, isRef, refer;
    Promise = rqzt('broken/dist/broken');
    isFunction = rqzt('is-function');
    refer = rqzt('referential/lib');
    isRef = function (o) {
      return o != null && isFunction(o.ref)
    };
    inputify = function (data, configs) {
      var config, fn, inputs, name, ref;
      ref = data;
      if (!isRef(ref)) {
        ref = refer(data)
      }
      inputs = {};
      fn = function (name, config) {
        var fn1, i, input, len, middleware, middlewareFn, validate;
        middleware = [];
        if (config && config.length > 0) {
          fn1 = function (name, middlewareFn) {
            return middleware.push(function (pair) {
              ref = pair[0], name = pair[1];
              return Promise.resolve(pair).then(function (pair) {
                return middlewareFn.call(pair[0], pair[0].get(pair[1]), pair[1], pair[0])
              }).then(function (v) {
                ref.set(name, v);
                return pair
              })
            })
          };
          for (i = 0, len = config.length; i < len; i++) {
            middlewareFn = config[i];
            fn1(name, middlewareFn)
          }
        }
        middleware.push(function (pair) {
          ref = pair[0], name = pair[1];
          return Promise.resolve(ref.get(name))
        });
        validate = function (ref, name) {
          var j, len1, p;
          p = Promise.resolve([
            ref,
            name
          ]);
          for (j = 0, len1 = middleware.length; j < len1; j++) {
            middlewareFn = middleware[j];
            p = p.then(middlewareFn)
          }
          return p
        };
        input = {
          name: name,
          ref: ref,
          config: config,
          validate: validate
        };
        return inputs[name] = input
      };
      for (name in configs) {
        config = configs[name];
        fn(name, config)
      }
      return inputs
    };
    module.exports = inputify  //# sourceMappingURL=inputify.js.map
  });
  // source: node_modules/promise-settle/index.js
  rqzt.define('promise-settle', function (module, exports, __dirname, __filename, process) {
    'use strict';
    module.exports = rqzt('promise-settle/lib/promise-settle')
  });
  // source: node_modules/promise-settle/lib/promise-settle.js
  rqzt.define('promise-settle/lib/promise-settle', function (module, exports, __dirname, __filename, process) {
    'use strict';
    module.exports = settle;
    function settle(promises) {
      return Promise.resolve().then(function () {
        return promises
      }).then(function (promises) {
        if (!Array.isArray(promises))
          throw new TypeError('Expected an array of Promises');
        var promiseResults = promises.map(function (promise) {
          return Promise.resolve().then(function () {
            return promise
          }).then(function (result) {
            return promiseResult(result)
          }).catch(function (err) {
            return promiseResult(null, err)
          })
        });
        return Promise.all(promiseResults)
      })
    }
    function promiseResult(result, err) {
      var isFulfilled = typeof err === 'undefined';
      var value = isFulfilled ? returns.bind(result) : throws.bind(new Error('Promise is rejected'));
      var isRejected = !isFulfilled;
      var reason = isRejected ? returns.bind(err) : throws.bind(new Error('Promise is fulfilled'));
      return {
        isFulfilled: returns.bind(isFulfilled),
        isRejected: returns.bind(isRejected),
        value: value,
        reason: reason
      }
    }
    function returns() {
      return this
    }
    function throws() {
      throw this
    }
  });
  // source: node_modules/crowdcontrol/lib/views/input.js
  rqzt.define('crowdcontrol/lib/views/input', function (module, exports, __dirname, __filename, process) {
    // Generated by CoffeeScript 1.10.0
    var Input, View, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    View = rqzt('crowdcontrol/lib/views/view');
    Input = function (superClass) {
      extend(Input, superClass);
      function Input() {
        return Input.__super__.constructor.apply(this, arguments)
      }
      Input.prototype.input = null;
      Input.prototype.valid = false;
      Input.prototype.errorMessage = '';
      Input.prototype.errorHtml = '<div class="error-container" if="{ errorMessage }">\n  <div class="error-message">{ errorMessage }</div>\n</div>';
      Input.prototype.beforeInit = function () {
        return this.html += this.errorHtml
      };
      Input.prototype.init = function () {
        return this.input.on('validate', function (_this) {
          return function (pRef) {
            return _this.validate(pRef)
          }
        }(this))
      };
      Input.prototype.getValue = function (event) {
        return event.target.value
      };
      Input.prototype.change = function (event) {
        var name, ref, ref1, value;
        ref1 = this.input, ref = ref1.ref, name = ref1.name;
        value = this.getValue(event);
        if (value === ref.get(name)) {
          return
        }
        this.input.ref.set(name, value);
        this.clearError();
        return this.validate()
      };
      Input.prototype.error = function (err) {
        var ref1;
        return this.errorMessage = (ref1 = err != null ? err.message : void 0) != null ? ref1 : err
      };
      Input.prototype.changed = function () {
      };
      Input.prototype.clearError = function () {
        return this.errorMessage = ''
      };
      Input.prototype.validate = function (pRef) {
        var p;
        p = this.input.validate(this.input.ref, this.input.name).then(function (_this) {
          return function (value) {
            _this.changed(value);
            _this.valid = true;
            return _this.update()
          }
        }(this))['catch'](function (_this) {
          return function (err) {
            _this.error(err);
            _this.valid = false;
            _this.update();
            throw err
          }
        }(this));
        if (pRef != null) {
          pRef.p = p
        }
        return p
      };
      return Input
    }(View);
    module.exports = Input  //# sourceMappingURL=input.js.map
  });
  // source: src/forms/config.coffee
  rqzt.define('./forms/config', function (module, exports, __dirname, __filename, process) {
    var agreeToTerms, cardNumber, cvc, expiration, isEcardGiftRequired, isEmail, isPostalRequired, isRequired, ref, requiresStripe, splitName;
    ref = rqzt('./forms/middleware'), isRequired = ref.isRequired, isEmail = ref.isEmail, splitName = ref.splitName, isPostalRequired = ref.isPostalRequired, requiresStripe = ref.requiresStripe, expiration = ref.expiration, cardNumber = ref.cardNumber, cvc = ref.cvc, isEcardGiftRequired = ref.isEcardGiftRequired, agreeToTerms = ref.agreeToTerms;
    module.exports = {
      'user.email': [
        isRequired,
        isEmail
      ],
      'user.name': [
        isRequired,
        splitName
      ],
      'order.shippingAddress.name': [isRequired],
      'order.shippingAddress.line1': [isRequired],
      'order.shippingAddress.line2': null,
      'order.shippingAddress.city': [isRequired],
      'order.shippingAddress.state': [isRequired],
      'order.shippingAddress.postalCode': [isPostalRequired],
      'order.shippingAddress.country': [isRequired],
      'order.gift': null,
      'order.giftType': null,
      'order.giftEmail': [
        isEcardGiftRequired,
        isEmail
      ],
      'order.giftMessage': null,
      'order.promoCode': null,
      'payment.account.name': [isRequired],
      'payment.account.number': [
        requiresStripe,
        cardNumber
      ],
      'payment.account.expiry': [
        requiresStripe,
        expiration
      ],
      'payment.account.cvc': [
        requiresStripe,
        cvc
      ],
      'terms': [agreeToTerms]
    }
  });
  // source: src/forms/middleware.coffee
  rqzt.define('./forms/middleware', function (module, exports, __dirname, __filename, process) {
    var Promise, cardUtils, countryUtils, emailRe, middleware, requestAnimationFrame, indexOf = [].indexOf || function (item) {
        for (var i = 0, l = this.length; i < l; i++) {
          if (i in this && this[i] === item)
            return i
        }
        return -1
      };
    Promise = rqzt('broken/dist/broken');
    requestAnimationFrame = rqzt('raf');
    countryUtils = rqzt('./utils/country');
    cardUtils = rqzt('./utils/card');
    emailRe = /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;
    middleware = {
      isRequired: function (value) {
        if (value && value !== '') {
          return value
        }
        throw new Error('Required')
      },
      isEmail: function (value) {
        if (!value) {
          return value
        }
        if (emailRe.test(value)) {
          return value.toLowerCase()
        }
        throw new Error('Enter a valid email')
      },
      isNewPassword: function (value) {
        if (!this.get('user.currentPassword')) {
          if (value) {
            throw new Error('Current password required')
          }
          return value
        }
        return middleware.isPassword(value)
      },
      isPassword: function (value) {
        if (!value) {
          throw new Error('Required')
        }
        if (value.length >= 6) {
          return value
        }
        throw new Error('Password must be atleast 6 characters long')
      },
      matchesPassword: function (value) {
        if (!this.get('user.password')) {
          return value
        }
        if (value === this.get('user.password')) {
          return value
        }
        throw new Error('Passwords must match')
      },
      splitName: function (value) {
        var firstName, lastName, parts;
        if (!value) {
          return value
        }
        parts = value.trim().split(' ');
        firstName = parts.shift();
        lastName = parts.join(' ');
        if (!lastName) {
          lastName = ' '
        }
        this.set('user.firstName', firstName);
        this.set('user.lastName', lastName);
        return value
      },
      isPostalRequired: function (value) {
        if (countryUtils.requiresPostalCode(this.get('order.shippingAddress.country') || '') && (value == null || value === '')) {
          throw new Error('Required for Selected Country')
        }
      },
      isEcardGiftRequired: function (value) {
        if (!this.get('order.gift') || this.get('order.giftType') !== 'ecard' || value && value !== '') {
          return value
        }
        throw new Error('Required')
      },
      requiresStripe: function (value) {
        if (this('order.type') === 'stripe' && (value == null || value === '')) {
          throw new Error('Required')
        }
        return value
      },
      requireTerms: function (value) {
        if (!value) {
          throw new Error('Please read and agree to the terms and conditions.')
        }
        return value
      },
      cardNumber: function (value) {
        var card, cardNumber, length, ref;
        if (!value) {
          return value
        }
        if (this.get('order.type') !== 'stripe') {
          return value
        }
        card = cardUtils.cardFromNumber(value);
        if (!card) {
          throw new Error('Enter a valid card number')
        }
        cardNumber = value.replace(/\D/g, '');
        length = cardNumber.length;
        if (!/^\d+$/.test(cardNumber)) {
          throw new Error('Enter a valid card number')
        }
        if (!((ref = cardNumber.length, indexOf.call(card.length, ref) >= 0) && card.luhn === false || cardUtils.luhnCheck(cardNumber))) {
          throw new Error('Enter a valid card number')
        }
        return value
      },
      expiration: function (value) {
        var base, base1, date, digitsOnly, length, month, now, nowMonth, nowYear, year;
        if (!value) {
          return value
        }
        if (this('order.type') !== 'stripe') {
          return value
        }
        digitsOnly = value.replace(/\D/g, '');
        length = digitsOnly.length;
        if (length !== 4) {
          throw new Error('Enter a valid date')
        }
        date = value.split('/');
        if (date.length < 2) {
          throw new Error('Enter a valid date')
        }
        now = new Date;
        nowYear = now.getFullYear();
        nowMonth = now.getMonth() + 1;
        month = typeof (base = date[0]).trim === 'function' ? base.trim() : void 0;
        year = ('' + nowYear).substr(0, 2) + (typeof (base1 = date[1]).trim === 'function' ? base1.trim() : void 0);
        if (parseInt(year, 10) < nowYear) {
          throw new Error('Your card is expired')
        } else if (parseInt(year, 10) === nowYear && parseInt(month, 10) < nowMonth) {
          throw new Error('Your card is expired')
        }
        this.set('payment.account.month', month);
        this.set('payment.account.year', year);
        return value
      },
      cvc: function (value) {
        var card, cvc, ref;
        if (!value) {
          return value
        }
        if (this('order.type') !== 'stripe') {
          return value
        }
        card = cardUtils.cardFromNumber(this.get('payment.account.number'));
        cvc = value.trim();
        if (!/^\d+$/.test(cvc)) {
          throw new Error('Enter a valid cvc')
        }
        if (card && card.type) {
          if (ref = cvc.length, indexOf.call(card != null ? card.cvcLength : void 0, ref) < 0) {
            throw new Error('Enter a valid cvc')
          }
        } else {
          if (!(cvc.length >= 3 && cvc.length <= 4)) {
            throw new Error('Enter a valid cvc')
          }
        }
        return cvc
      },
      agreeToTerms: function (value) {
        if (value === true) {
          return value
        }
        throw new Error('Agree to the terms and conditions')
      }
    };
    module.exports = middleware
  });
  // source: src/utils/country.coffee
  rqzt.define('./utils/country', function (module, exports, __dirname, __filename, process) {
    module.exports = {
      requiresPostalCode: function (code) {
        code = code.toLowerCase();
        return code === 'dz' || code === 'ar' || code === 'am' || code === 'au' || code === 'at' || code === 'az' || code === 'a2' || code === 'bd' || code === 'by' || code === 'be' || code === 'ba' || code === 'br' || code === 'bn' || code === 'bg' || code === 'ca' || code === 'ic' || code === 'cn' || code === 'hr' || code === 'cy' || code === 'cz' || code === 'dk' || code === 'en' || code === 'ee' || code === 'fo' || code === 'fi' || code === 'fr' || code === 'ge' || code === 'de' || code === 'gr' || code === 'gl' || code === 'gu' || code === 'gg' || code === 'ho' || code === 'hu' || code === 'in' || code === 'id' || code === 'il' || code === 'it' || code === 'jp' || code === 'je' || code === 'kz' || code === 'kr' || code === 'ko' || code === 'kg' || code === 'lv' || code === 'li' || code === 'lt' || code === 'lu' || code === 'mk' || code === 'mg' || code === 'm3' || code === 'my' || code === 'mh' || code === 'mq' || code === 'yt' || code === 'mx' || code === 'mn' || code === 'me' || code === 'nl' || code === 'nz' || code === 'nb' || code === 'no' || code === 'pk' || code === 'ph' || code === 'pl' || code === 'po' || code === 'pt' || code === 'pr' || code === 're' || code === 'ru' || code === 'sa' || code === 'sf' || code === 'cs' || code === 'sg' || code === 'sk' || code === 'si' || code === 'za' || code === 'es' || code === 'lk' || code === 'nt' || code === 'sx' || code === 'uv' || code === 'vl' || code === 'se' || code === 'ch' || code === 'tw' || code === 'tj' || code === 'th' || code === 'tu' || code === 'tn' || code === 'tr' || code === 'tm' || code === 'vi' || code === 'ua' || code === 'gb' || code === 'us' || code === 'uy' || code === 'uz' || code === 'va' || code === 'vn' || code === 'wl' || code === 'ya'
      }
    }
  });
  // source: src/utils/card.coffee
  rqzt.define('./utils/card', function (module, exports, __dirname, __filename, process) {
    var cards, defaultFormat;
    defaultFormat = /(\d{1,4})/g;
    cards = [
      {
        type: 'amex',
        pattern: /^3[47]/,
        format: /(\d{1,4})(\d{1,6})?(\d{1,5})?/,
        length: [15],
        cvcLength: [4],
        luhn: true
      },
      {
        type: 'dankort',
        pattern: /^5019/,
        format: defaultFormat,
        length: [16],
        cvcLength: [3],
        luhn: true
      },
      {
        type: 'dinersclub',
        pattern: /^(36|38|30[0-5])/,
        format: /(\d{1,4})(\d{1,6})?(\d{1,4})?/,
        length: [14],
        cvcLength: [3],
        luhn: true
      },
      {
        type: 'discover',
        pattern: /^(6011|65|64[4-9]|622)/,
        format: defaultFormat,
        length: [16],
        cvcLength: [3],
        luhn: true
      },
      {
        type: 'jcb',
        pattern: /^35/,
        format: defaultFormat,
        length: [16],
        cvcLength: [3],
        luhn: true
      },
      {
        type: 'laser',
        pattern: /^(6706|6771|6709)/,
        format: defaultFormat,
        length: [
          16,
          17,
          18,
          19
        ],
        cvcLength: [3],
        luhn: true
      },
      {
        type: 'maestro',
        pattern: /^(5018|5020|5038|6304|6703|6708|6759|676[1-3])/,
        format: defaultFormat,
        length: [
          12,
          13,
          14,
          15,
          16,
          17,
          18,
          19
        ],
        cvcLength: [3],
        luhn: true
      },
      {
        type: 'mastercard',
        pattern: /^(5[1-5]|677189)|^(222[1-9]|2[3-6]\d{2}|27[0-1]\d|2720)/,
        format: defaultFormat,
        length: [16],
        cvcLength: [3],
        luhn: true
      },
      {
        type: 'unionpay',
        pattern: /^62/,
        format: defaultFormat,
        length: [
          16,
          17,
          18,
          19
        ],
        cvcLength: [3],
        luhn: false
      },
      {
        type: 'visaelectron',
        pattern: /^4(026|17500|405|508|844|91[37])/,
        format: defaultFormat,
        length: [16],
        cvcLength: [3],
        luhn: true
      },
      {
        type: 'elo',
        pattern: /^(4011|438935|45(1416|76|7393)|50(4175|6699|67|90[4-7])|63(6297|6368))/,
        format: defaultFormat,
        length: [16],
        cvcLength: [3],
        luhn: true
      },
      {
        type: 'visa',
        pattern: /^4/,
        format: defaultFormat,
        length: [
          13,
          16,
          19
        ],
        cvcLength: [3],
        luhn: true
      }
    ];
    module.exports = {
      luhnCheck: function (num) {
        var digit, digits, i, len, odd, sum;
        odd = true;
        sum = 0;
        digits = (num + '').split('').reverse();
        for (i = 0, len = digits.length; i < len; i++) {
          digit = digits[i];
          digit = parseInt(digit, 10);
          if (odd = !odd) {
            digit *= 2
          }
          if (digit > 9) {
            digit -= 9
          }
          sum += digit
        }
        return sum % 10 === 0
      },
      cardFromNumber: function (num) {
        var card, i, len;
        num = (num + '').replace(/\D/g, '');
        for (i = 0, len = cards.length; i < len; i++) {
          card = cards[i];
          if (card.pattern.test(num)) {
            return card
          }
        }
      },
      cardType: function (num) {
        var ref;
        if (!num) {
          return null
        }
        return ((ref = cardFromNumber(num)) != null ? ref.type : void 0) || null
      },
      restrictNumeric: function (e) {
        var input;
        if (e.metaKey || e.ctrlKey) {
          return true
        }
        if (e.which === 32) {
          return e.preventDefault()
        }
        if (e.which === 0) {
          return true
        }
        if (e.which < 33) {
          return true
        }
        input = String.fromCharCode(e.which);
        if (!/[\d\s]/.test(input)) {
          return e.preventDefault()
        }
      }
    }
  });
  // source: src/forms/checkout-shippingaddress.coffee
  rqzt.define('./forms/checkout-shippingaddress', function (module, exports, __dirname, __filename, process) {
    var CheckoutShippingAddressForm, CrowdControl, Events, isEmail, isPostalRequired, isRequired, m, ref, riot, splitName, store, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    CrowdControl = rqzt('crowdcontrol/lib');
    riot = rqzt('riot/riot');
    m = rqzt('./mediator');
    Events = rqzt('./events');
    ref = rqzt('./forms/middleware'), isRequired = ref.isRequired, isEmail = ref.isEmail, splitName = ref.splitName, isRequired = ref.isRequired, isPostalRequired = ref.isPostalRequired;
    store = rqzt('./utils/store');
    module.exports = CheckoutShippingAddressForm = function (superClass) {
      extend(CheckoutShippingAddressForm, superClass);
      function CheckoutShippingAddressForm() {
        return CheckoutShippingAddressForm.__super__.constructor.apply(this, arguments)
      }
      CheckoutShippingAddressForm.prototype.tag = 'checkout-shippingaddress';
      CheckoutShippingAddressForm.prototype.html = '<form onsubmit={submit}>\n  <yield/>\n</form>';
      CheckoutShippingAddressForm.prototype.configs = {
        'user.email': [
          isRequired,
          isEmail
        ],
        'user.name': [
          isRequired,
          splitName
        ],
        'order.shippingAddress.name': [isRequired],
        'order.shippingAddress.line1': [isRequired],
        'order.shippingAddress.line2': null,
        'order.shippingAddress.city': [isRequired],
        'order.shippingAddress.state': [isRequired],
        'order.shippingAddress.postalCode': [isPostalRequired],
        'order.shippingAddress.country': [isRequired]
      };
      CheckoutShippingAddressForm.prototype.init = function () {
        return CheckoutShippingAddressForm.__super__.init.apply(this, arguments)
      };
      CheckoutShippingAddressForm.prototype._submit = function () {
        m.trigger(Events.SubmitShippingAddress);
        store.set('checkout-user', this.data.get('user'));
        store.set('checkout-shippingAddress', this.data.get('order.shippingAddress'));
        return this.update()
      };
      return CheckoutShippingAddressForm
    }(CrowdControl.Views.Form)
  });
  // source: src/forms/cart.coffee
  rqzt.define('./forms/cart', function (module, exports, __dirname, __filename, process) {
    var CartForm, CrowdControl, Events, m, store, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    CrowdControl = rqzt('crowdcontrol/lib');
    m = rqzt('./mediator');
    Events = rqzt('./events');
    store = rqzt('./utils/store');
    module.exports = CartForm = function (superClass) {
      extend(CartForm, superClass);
      function CartForm() {
        return CartForm.__super__.constructor.apply(this, arguments)
      }
      CartForm.prototype.tag = 'cart';
      CartForm.prototype.html = '<yield>\n  <lineitems if="{ !isEmpty() }"></lineitems>\n</yield>';
      CartForm.prototype.init = function () {
        var promoCode;
        CartForm.__super__.init.apply(this, arguments);
        promoCode = store.get('promoCode');
        if (promoCode) {
          this.data.set('order.promoCode', promoCode);
          this.applyPromoCode();
          this.update()
        }
        return m.on(Events.ForceApplyPromoCode, function (_this) {
          return function () {
            return _this.applyPromoCode()
          }
        }(this))
      };
      CartForm.prototype.configs = { 'order.promoCode': null };
      CartForm.prototype.applying = false;
      CartForm.prototype.promoMessage = '';
      CartForm.prototype.isEmpty = function () {
        return this.data('order.items').length === 0
      };
      CartForm.prototype.count = function () {
        var count, i, item, len, ref;
        count = 0;
        ref = this.data('order.items');
        for (i = 0, len = ref.length; i < len; i++) {
          item = ref[i];
          count += item.quantity
        }
        return count
      };
      CartForm.prototype.applyPromoCode = function () {
        var promoCode;
        this.promoMessage = '';
        promoCode = this.data.get('order.promoCode');
        if (!promoCode) {
          return
        }
        store.set('promoCode', promoCode);
        this.promoMessage = 'Applying...';
        this.applying = true;
        m.trigger(Events.ApplyPromoCode, promoCode);
        return this.cart.promoCode(promoCode).then(function (_this) {
          return function () {
            var coupon;
            _this.applying = false;
            coupon = _this.data.get('order.coupon');
            if ((coupon != null ? coupon.freeProductId : void 0) != null && coupon.freeProductId !== '' && coupon.freeQuantity > 0) {
              _this.promoMessage = coupon.freeQuantity + ' Free ' + freeProduct.name
            } else {
              _this.promoMessage = promoCode + ' Applied!'
            }
            m.trigger(Events.ApplyPromoCodeSuccess, coupon);
            return _this.update()
          }
        }(this))['catch'](function (_this) {
          return function (err) {
            var coupon;
            store.remove('promoCode');
            _this.applying = false;
            coupon = _this.data.get('order.coupon');
            if (coupon != null ? coupon.enabled : void 0) {
              _this.promoMessage = 'This code is expired.'
            } else {
              _this.promoMessage = 'This code is invalid.'
            }
            m.trigger(Events.ApplyPromoCodeFailed, err);
            return _this.update()
          }
        }(this))
      };
      return CartForm
    }(CrowdControl.Views.Form)
  });
  // source: src/forms/lineitem.coffee
  rqzt.define('./forms/lineitem', function (module, exports, __dirname, __filename, process) {
    var CrowdControl, Events, LineItemForm, m, riot, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    CrowdControl = rqzt('crowdcontrol/lib');
    riot = rqzt('riot/riot');
    m = rqzt('./mediator');
    Events = rqzt('./events');
    module.exports = LineItemForm = function (superClass) {
      extend(LineItemForm, superClass);
      function LineItemForm() {
        return LineItemForm.__super__.constructor.apply(this, arguments)
      }
      LineItemForm.prototype.tag = 'lineitem';
      LineItemForm.prototype.html = rqzt('./Users/zk/work/hanzo/shop.js/templates/forms/lineitem');
      LineItemForm.prototype.configs = { 'quantity': null };
      LineItemForm.prototype.init = function () {
        return LineItemForm.__super__.init.apply(this, arguments)
      };
      LineItemForm.prototype['delete'] = function (event) {
        return m.trigger(Events.DeleteLineItem, this.data)
      };
      return LineItemForm
    }(CrowdControl.Views.Form)
  });
  // source: templates/forms/lineitem.pug
  rqzt.define('./Users/zk/work/hanzo/shop.js/templates/forms/lineitem', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<yield>\n  <div class="product-quantity-container" if="{ !data.get(\'locked\') }">\n    <quantity-select-control></quantity-select-control>\n  </div>\n  <div class="product-quantity-container locked" if="{ data.get(\'locked\') }">{ data.get(\'quantity\') }</div>\n  <div class="product-text-container">\n    <div class="product-name">{ data.get(\'productName\') }</div>\n    <div class="product-slug">{ data.get(\'productSlug\') }</div>\n    <div class="product-description" if="{ data.get(\'description\') }">{ data.get(\'description\') }</div>\n  </div>\n  <div class="product-delete" onclick="{ delete }"></div>\n  <div class="product-price-container">\n    <div class="product-price">{ renderCurrency(parentData.get(\'currency\'), data.get().price * data.get().quantity) }\n      <div class="product-currency">{ parentData.get(\'currency\').toUpperCase() }</div>\n    </div>\n    <div class="product-list-price" if="{ data.get().listPrice &gt; data.get().price }">{ renderCurrency(parentData.get(\'currency\'), data.get().listPrice * data.get().quantity) }\n      <div class="product-currency">{ parentData.get(\'currency\').toUpperCase() }</div>\n    </div>\n  </div>\n</yield>'
  });
  // source: src/forms/lineitems.coffee
  rqzt.define('./forms/lineitems', function (module, exports, __dirname, __filename, process) {
    var CrowdControl, Events, LineItems, m, riot, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    CrowdControl = rqzt('crowdcontrol/lib');
    riot = rqzt('riot/riot');
    m = rqzt('./mediator');
    Events = rqzt('./events');
    module.exports = LineItems = function (superClass) {
      extend(LineItems, superClass);
      function LineItems() {
        return LineItems.__super__.constructor.apply(this, arguments)
      }
      LineItems.prototype.tag = 'lineitems';
      LineItems.prototype.html = rqzt('./Users/zk/work/hanzo/shop.js/templates/forms/lineitems');
      LineItems.prototype.init = function () {
        if (this.parentData != null) {
          this.data = this.parentData
        }
        LineItems.__super__.init.apply(this, arguments);
        return this.on('update', function (_this) {
          return function () {
            if (_this.parentData != null) {
              return _this.data = _this.parentData
            }
          }
        }(this))
      };
      return LineItems
    }(CrowdControl.Views.View)
  });
  // source: templates/forms/lineitems.pug
  rqzt.define('./Users/zk/work/hanzo/shop.js/templates/forms/lineitems', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<lineitem each="{ item, v in data(\'order.items\') }" parent-data="{ this.parent.data.ref(\'order\') }" data="{ this.parent.data.ref(\'order.items.\' + v) }">\n  <yield></yield>\n</lineitem>'
  });
  // source: src/forms/login.coffee
  rqzt.define('./forms/login', function (module, exports, __dirname, __filename, process) {
    var CrowdControl, Events, LoginForm, isEmail, isPassword, isRequired, m, ref, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    CrowdControl = rqzt('crowdcontrol/lib');
    ref = rqzt('./forms/middleware'), isRequired = ref.isRequired, isEmail = ref.isEmail, isPassword = ref.isPassword;
    m = rqzt('./mediator');
    Events = rqzt('./events');
    module.exports = LoginForm = function (superClass) {
      extend(LoginForm, superClass);
      function LoginForm() {
        return LoginForm.__super__.constructor.apply(this, arguments)
      }
      LoginForm.prototype.tag = 'login';
      LoginForm.prototype.html = '<form onsubmit={submit}>\n  <yield/>\n</form>';
      LoginForm.prototype.configs = {
        'user.email': [
          isRequired,
          isEmail
        ],
        'user.password': [isPassword]
      };
      LoginForm.prototype.errorMessage = '';
      LoginForm.prototype._submit = function (event) {
        var opts;
        opts = {
          email: this.data.get('user.email'),
          password: this.data.get('user.password')
        };
        this.errorMessage = '';
        this.update();
        m.trigger(Events.Login);
        return this.client.account.login(opts).then(function (_this) {
          return function (res) {
            m.trigger(Events.LoginSuccess, res);
            return _this.update()
          }
        }(this))['catch'](function (_this) {
          return function (err) {
            _this.errorMessage = err.message;
            m.trigger(Events.LoginFailed, err);
            return _this.update()
          }
        }(this))
      };
      return LoginForm
    }(CrowdControl.Views.Form)
  });
  // source: src/forms/order.coffee
  rqzt.define('./forms/order', function (module, exports, __dirname, __filename, process) {
    var CrowdControl, Events, OrderForm, m, refer, riot, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    CrowdControl = rqzt('crowdcontrol/lib');
    riot = rqzt('riot/riot');
    m = rqzt('./mediator');
    Events = rqzt('./events');
    refer = rqzt('referential/lib');
    module.exports = OrderForm = function (superClass) {
      extend(OrderForm, superClass);
      function OrderForm() {
        return OrderForm.__super__.constructor.apply(this, arguments)
      }
      OrderForm.prototype.tag = 'order';
      OrderForm.prototype.html = rqzt('./Users/zk/work/hanzo/shop.js/templates/forms/order');
      OrderForm.prototype.parentData = null;
      OrderForm.prototype.init = function () {
        OrderForm.__super__.init.apply(this, arguments);
        this.parentData = refer({});
        return this.on('update', function (_this) {
          return function () {
            var i, item, items, j, len, results;
            if (_this.data != null) {
              _this.parentData.set('order', _this.data.get());
              items = _this.data.get('items');
              if (items == null) {
                return
              }
              results = [];
              for (i = j = 0, len = items.length; j < len; i = ++j) {
                item = items[i];
                results.push(_this.parentData.set('order.items.' + i + '.locked', true))
              }
              return results
            }
          }
        }(this))
      };
      OrderForm.prototype['delete'] = function (event) {
        return m.trigger(Events.DeleteLineItem, this.data)
      };
      return OrderForm
    }(CrowdControl.Views.Form)
  });
  // source: templates/forms/order.pug
  rqzt.define('./Users/zk/work/hanzo/shop.js/templates/forms/order', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<yield>\n  <div class="order-information">\n    <div class="order-number-container">\n      <div class="order-number-label">Order Number:</div>\n      <div class="order-number">{ data.get(\'number\') }</div>\n    </div>\n    <div class="order-date-container">\n      <div class="order-date-label">Purchase Date:</div>\n      <div class="order-date">{ renderDate(data.get(\'createdAt\'), \'LL\') }</div>\n    </div>\n    <lineitems if="{ !isEmpty() }"></lineitems>\n    <div class="discount-container">\n      <div class="discount-label">Discount:</div>\n      <div class="discount">{ renderCurrency(data.get(\'currency\'), data.get(\'discount\'))}</div>\n    </div>\n    <div class="subtotal-container">\n      <div class="subtotal-label">Subtotal:</div>\n      <div class="subtotal">{ renderCurrency(data.get(\'currency\'), data.get(\'subtotal\'))}</div>\n    </div>\n    <div class="shipping-container">\n      <div class="shipping-label">Shipping:</div>\n      <div class="shipping">{ renderCurrency(data.get(\'currency\'), data.get(\'shipping\'))}</div>\n    </div>\n    <div class="tax-container">\n      <div class="tax-label">Tax({ data.get(\'tax\') / data.get(\'subtotal\') * 100 }%):</div>\n      <div class="tax">{ renderCurrency(data.get(\'currency\'), data.get(\'tax\'))}</div>\n    </div>\n    <div class="total-container">\n      <div class="total-label">Total:</div>\n      <div class="total">{ renderCurrency(data.get(\'currency\'), data.get(\'total\'))}&nbsp;{ data.get(\'currency\').toUpperCase() }</div>\n    </div>\n  </div>\n  <div class="address-information">\n    <div class="street">{ data.get(\'shippingAddress.line1\') }</div>\n    <div class="apartment" if="{ data.get(\'shippingAddress.line2\') }">{ data.get(\'shippingAddress.line2\') }</div>\n    <div class="city">{ data.get(\'shippingAddress.city\') }</div>\n    <div class="state" if="{ data.get(\'shippingAddress.state\')}">{ data.get(\'shippingAddress.state\').toUpperCase() }</div>\n    <div class="state" if="{ data.get(\'shippingAddress.postalCode\')}">{ data.get(\'shippingAddress.postalCode\') }</div>\n    <div class="country">{ data.get(\'shippingAddress.country\').toUpperCase() }</div>\n  </div>\n</yield>'
  });
  // source: src/forms/orders.coffee
  rqzt.define('./forms/orders', function (module, exports, __dirname, __filename, process) {
    var CrowdControl, Events, Orders, m, refer, riot, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    CrowdControl = rqzt('crowdcontrol/lib');
    riot = rqzt('riot/riot');
    m = rqzt('./mediator');
    Events = rqzt('./events');
    refer = rqzt('referential/lib');
    module.exports = Orders = function (superClass) {
      extend(Orders, superClass);
      function Orders() {
        return Orders.__super__.constructor.apply(this, arguments)
      }
      Orders.prototype.tag = 'orders';
      Orders.prototype.html = rqzt('./Users/zk/work/hanzo/shop.js/templates/forms/orders');
      Orders.prototype.init = function () {
        return Orders.__super__.init.apply(this, arguments)
      };
      return Orders
    }(CrowdControl.Views.View)
  });
  // source: templates/forms/orders.pug
  rqzt.define('./Users/zk/work/hanzo/shop.js/templates/forms/orders', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<order each="{ order, v in data(\'user.orders\') }" parent-data="{ this.parent.data.get(\'user\') }" data="{ this.parent.data.ref(\'user.orders.\' + v) }" if="{ order.paymentStatus != \'unpaid\' }">\n  <yield></yield>\n</order>'
  });
  // source: src/forms/profile.coffee
  rqzt.define('./forms/profile', function (module, exports, __dirname, __filename, process) {
    var CrowdControl, Events, ProfileForm, isEmail, isNewPassword, isRequired, m, matchesPassword, ref, splitName, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    CrowdControl = rqzt('crowdcontrol/lib');
    ref = rqzt('./forms/middleware'), isRequired = ref.isRequired, isEmail = ref.isEmail, isNewPassword = ref.isNewPassword, splitName = ref.splitName, matchesPassword = ref.matchesPassword;
    m = rqzt('./mediator');
    Events = rqzt('./events');
    module.exports = ProfileForm = function (superClass) {
      extend(ProfileForm, superClass);
      function ProfileForm() {
        return ProfileForm.__super__.constructor.apply(this, arguments)
      }
      ProfileForm.prototype.tag = 'profile';
      ProfileForm.prototype.html = '<form onsubmit={submit}>\n  <yield/>\n</form>';
      ProfileForm.prototype.configs = {
        'user.email': [
          isRequired,
          isEmail
        ],
        'user.name': [
          isRequired,
          splitName
        ],
        'user.currentPassword': [isNewPassword],
        'user.password': [isNewPassword],
        'user.passwordConfirm': [
          isNewPassword,
          matchesPassword
        ]
      };
      ProfileForm.prototype.errorMessage = '';
      ProfileForm.prototype.hasOrders = function () {
        var orders;
        orders = this.data.get('user.orders');
        return orders && orders.length > 0
      };
      ProfileForm.prototype.init = function () {
        m.trigger(Events.ProfileLoad);
        this.client.account.get().then(function (_this) {
          return function (res) {
            var firstName, lastName;
            _this.data.set('user', res);
            firstName = _this.data.get('user.firstName');
            lastName = _this.data.get('user.lastName');
            _this.data.set('user.name', firstName + ' ' + lastName);
            if (_this.data.get('referralProgram') && (res.referrers == null || res.referrers.length === 0)) {
              return requestAnimationFrame(function () {
                m.trigger(Events.CreateReferralProgram);
                return _this.client.referrer.create({
                  program: _this.data.get('referralProgram'),
                  programId: _this.data.get('referralProgram.id'),
                  userId: res.id
                }).then(function (res2) {
                  var refrs;
                  refrs = [res2];
                  _this.data.set('user.referrers', refrs);
                  m.trigger(Events.CreateReferralProgramSuccess, refrs);
                  m.trigger(Events.ProfileLoadSuccess, res);
                  return riot.update()
                })['catch'](function (err) {
                  _this.errorMessage = err.message;
                  m.trigger(Events.CreateReferralProgramFailed, err);
                  m.trigger(Events.ProfileLoadSuccess, res);
                  return riot.update()
                })
              })
            } else {
              m.trigger(Events.ProfileLoadSuccess, res);
              return riot.update()
            }
          }
        }(this))['catch'](function (_this) {
          return function (err) {
            _this.errorMessage = err.message;
            m.trigger(Events.ProfileLoadFailed, err);
            return riot.update()
          }
        }(this));
        return ProfileForm.__super__.init.apply(this, arguments)
      };
      ProfileForm.prototype._submit = function (event) {
        var opts;
        opts = {
          email: this.data.get('user.email'),
          firstName: this.data.get('user.firstName'),
          lastName: this.data.get('user.lastName'),
          currentPassword: this.data.get('user.currentPassword'),
          password: this.data.get('user.password'),
          passwordConfirm: this.data.get('user.passwordConfirm')
        };
        this.errorMessage = '';
        this.update();
        m.trigger(Events.ProfileUpdate);
        return this.client.account.update(opts).then(function (_this) {
          return function (res) {
            _this.data.set('user.currentPassword', null);
            _this.data.set('user.password', null);
            _this.data.set('user.passwordConfirm', null);
            m.trigger(Events.ProfileUpdateSuccess, res);
            return _this.update()
          }
        }(this))['catch'](function (_this) {
          return function (err) {
            _this.errorMessage = err.message;
            m.trigger(Events.ProfileUpdateFailed, err);
            return _this.update()
          }
        }(this))
      };
      return ProfileForm
    }(CrowdControl.Views.Form)
  });
  // source: src/forms/register.coffee
  rqzt.define('./forms/register', function (module, exports, __dirname, __filename, process) {
    var CrowdControl, Events, RegisterForm, isEmail, isPassword, isRequired, m, matchesPassword, ref, splitName, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    CrowdControl = rqzt('crowdcontrol/lib');
    ref = rqzt('./forms/middleware'), isRequired = ref.isRequired, isEmail = ref.isEmail, isPassword = ref.isPassword, splitName = ref.splitName, matchesPassword = ref.matchesPassword;
    m = rqzt('./mediator');
    Events = rqzt('./events');
    module.exports = RegisterForm = function (superClass) {
      extend(RegisterForm, superClass);
      function RegisterForm() {
        return RegisterForm.__super__.constructor.apply(this, arguments)
      }
      RegisterForm.prototype.tag = 'register';
      RegisterForm.prototype.html = '<form onsubmit={submit}>\n  <yield/>\n</form>';
      RegisterForm.prototype.immediateLogin = false;
      RegisterForm.prototype.immediateLoginLatency = 400;
      RegisterForm.prototype.configs = {
        'user.email': [
          isRequired,
          isEmail
        ],
        'user.name': [
          isRequired,
          splitName
        ],
        'user.password': [isPassword],
        'user.passwordConfirm': [
          isPassword,
          matchesPassword
        ]
      };
      RegisterForm.prototype.source = '';
      RegisterForm.prototype.errorMessage = '';
      RegisterForm.prototype.init = function () {
        return RegisterForm.__super__.init.apply(this, arguments)
      };
      RegisterForm.prototype._submit = function (event) {
        var captcha, opts;
        opts = {
          email: this.data.get('user.email'),
          firstName: this.data.get('user.firstName'),
          lastName: this.data.get('user.lastName'),
          password: this.data.get('user.password'),
          passwordConfirm: this.data.get('user.passwordConfirm'),
          referrerId: this.data.get('order.referrerId'),
          metadata: { source: this.source }
        };
        captcha = this.data.get('user.g-recaptcha-response');
        if (captcha) {
          opts['g-recaptcha-response'] = captcha
        }
        this.errorMessage = '';
        this.update();
        m.trigger(Events.Register);
        return this.client.account.create(opts).then(function (_this) {
          return function (res) {
            var latency;
            m.trigger(Events.RegisterSuccess, res);
            _this.update();
            if (_this.immediateLogin && res.token) {
              _this.client.setCustomerToken(res.token);
              latency = _this.immediateLoginLatency / 2;
              return setTimeout(function () {
                m.trigger(Events.Login);
                return setTimeout(function () {
                  m.trigger(Events.LoginSuccess, res);
                  return _this.update()
                }, latency)
              }, latency)
            }
          }
        }(this))['catch'](function (_this) {
          return function (err) {
            _this.errorMessage = err.message;
            m.trigger(Events.RegisterFailed, err);
            return _this.update()
          }
        }(this))
      };
      return RegisterForm
    }(CrowdControl.Views.Form)
  });
  // source: src/forms/register-complete.coffee
  rqzt.define('./forms/register-complete', function (module, exports, __dirname, __filename, process) {
    var CrowdControl, Events, RegisterComplete, isPassword, isRequired, m, matchesPassword, ref, splitName, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    CrowdControl = rqzt('crowdcontrol/lib');
    ref = rqzt('./forms/middleware'), isRequired = ref.isRequired, isPassword = ref.isPassword, splitName = ref.splitName, matchesPassword = ref.matchesPassword;
    m = rqzt('./mediator');
    Events = rqzt('./events');
    module.exports = RegisterComplete = function (superClass) {
      extend(RegisterComplete, superClass);
      function RegisterComplete() {
        return RegisterComplete.__super__.constructor.apply(this, arguments)
      }
      RegisterComplete.prototype.tag = 'register-complete';
      RegisterComplete.prototype.html = '<form onsubmit={submit}>\n  <yield/>\n</form>';
      RegisterComplete.prototype.twoStageSignUp = false;
      RegisterComplete.prototype.configs = {
        'user.name': [
          isRequired,
          splitName
        ],
        'user.password': [isPassword],
        'user.passwordConfirm': [
          isPassword,
          matchesPassword
        ]
      };
      RegisterComplete.prototype.errorMessage = '';
      RegisterComplete.prototype.init = function () {
        RegisterComplete.__super__.init.apply(this, arguments);
        if (!this.twoStageSignUp) {
          return this._submit()
        }
      };
      RegisterComplete.prototype._submit = function (event) {
        var firstName, lastName, opts;
        opts = {
          password: this.data.get('user.password'),
          passwordConfirm: this.data.get('user.passwordConfirm'),
          tokenId: this.data.get('tokenId')
        };
        firstName = this.data.get('user.firstName');
        lastName = this.data.get('user.lastName');
        if (firstName) {
          opts.firstName = firstName
        }
        if (lastName) {
          opts.lastName = lastName
        }
        this.errorMessage = '';
        this.update();
        m.trigger(Events.RegisterComplete);
        return this.client.account.enable(opts).then(function (_this) {
          return function (res) {
            if (res.token) {
              _this.client.setCustomerToken(res.token)
            }
            m.trigger(Events.RegisterCompleteSuccess, res);
            return _this.update()
          }
        }(this))['catch'](function (_this) {
          return function (err) {
            _this.errorMessage = err.message;
            m.trigger(Events.RegisterCompleteFailed, err);
            return _this.update()
          }
        }(this))
      };
      return RegisterComplete
    }(CrowdControl.Views.Form)
  });
  // source: src/forms/reset-password.coffee
  rqzt.define('./forms/reset-password', function (module, exports, __dirname, __filename, process) {
    var CrowdControl, Events, ResetPasswordForm, isEmail, isRequired, m, ref, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    CrowdControl = rqzt('crowdcontrol/lib');
    ref = rqzt('./forms/middleware'), isRequired = ref.isRequired, isEmail = ref.isEmail;
    m = rqzt('./mediator');
    Events = rqzt('./events');
    module.exports = ResetPasswordForm = function (superClass) {
      extend(ResetPasswordForm, superClass);
      function ResetPasswordForm() {
        return ResetPasswordForm.__super__.constructor.apply(this, arguments)
      }
      ResetPasswordForm.prototype.tag = 'reset-password';
      ResetPasswordForm.prototype.html = '<form onsubmit={submit}>\n  <yield/>\n</form>';
      ResetPasswordForm.prototype.configs = {
        'user.email': [
          isRequired,
          isEmail
        ]
      };
      ResetPasswordForm.prototype.errorMessage = '';
      ResetPasswordForm.prototype.init = function () {
        return ResetPasswordForm.__super__.init.apply(this, arguments)
      };
      ResetPasswordForm.prototype._submit = function (event) {
        var opts;
        opts = { email: this.data.get('user.email') };
        this.errorMessage = '';
        this.update();
        m.trigger(Events.ResetPassword);
        return this.client.account.reset(opts).then(function (_this) {
          return function (res) {
            m.trigger(Events.ResetPasswordSuccess, res);
            return _this.update()
          }
        }(this))['catch'](function (_this) {
          return function (err) {
            _this.errorMessage = err.message;
            m.trigger(Events.ResetPasswordFailed, err);
            return _this.update()
          }
        }(this))
      };
      return ResetPasswordForm
    }(CrowdControl.Views.Form)
  });
  // source: src/forms/reset-password-complete.coffee
  rqzt.define('./forms/reset-password-complete', function (module, exports, __dirname, __filename, process) {
    var CrowdControl, Events, ResetPasswordCompleteForm, isPassword, m, matchesPassword, ref, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    CrowdControl = rqzt('crowdcontrol/lib');
    ref = rqzt('./forms/middleware'), isPassword = ref.isPassword, matchesPassword = ref.matchesPassword;
    m = rqzt('./mediator');
    Events = rqzt('./events');
    module.exports = ResetPasswordCompleteForm = function (superClass) {
      extend(ResetPasswordCompleteForm, superClass);
      function ResetPasswordCompleteForm() {
        return ResetPasswordCompleteForm.__super__.constructor.apply(this, arguments)
      }
      ResetPasswordCompleteForm.prototype.tag = 'reset-password-complete';
      ResetPasswordCompleteForm.prototype.html = '<form onsubmit={submit}>\n  <yield/>\n</form>';
      ResetPasswordCompleteForm.prototype.configs = {
        'user.password': [isPassword],
        'user.passwordConfirm': [
          isPassword,
          matchesPassword
        ]
      };
      ResetPasswordCompleteForm.prototype.errorMessage = '';
      ResetPasswordCompleteForm.prototype.init = function () {
        return ResetPasswordCompleteForm.__super__.init.apply(this, arguments)
      };
      ResetPasswordCompleteForm.prototype._submit = function (event) {
        var opts;
        opts = {
          password: this.data.get('user.password'),
          passwordConfirm: this.data.get('user.passwordConfirm'),
          tokenId: this.data.get('tokenId')
        };
        this.errorMessage = '';
        this.update();
        m.trigger(Events.ResetPasswordComplete);
        return this.client.account.confirm(opts).then(function (_this) {
          return function (res) {
            if (res.token) {
              _this.client.setCustomerToken(res.token)
            }
            m.trigger(Events.ResetPasswordCompleteSuccess, res);
            return _this.update()
          }
        }(this))['catch'](function (_this) {
          return function (err) {
            _this.errorMessage = err.message.replace('Token', 'Link');
            m.trigger(Events.ResetPasswordCompleteFailed, err);
            return _this.update()
          }
        }(this))
      };
      return ResetPasswordCompleteForm
    }(CrowdControl.Views.Form)
  });
  // source: src/forms/shippingaddress.coffee
  rqzt.define('./forms/shippingaddress', function (module, exports, __dirname, __filename, process) {
    var CrowdControl, Events, ShippingAddressForm, isPostalRequired, isRequired, m, ref, riot, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    CrowdControl = rqzt('crowdcontrol/lib');
    riot = rqzt('riot/riot');
    m = rqzt('./mediator');
    Events = rqzt('./events');
    ref = rqzt('./forms/middleware'), isRequired = ref.isRequired, isPostalRequired = ref.isPostalRequired;
    module.exports = ShippingAddressForm = function (superClass) {
      extend(ShippingAddressForm, superClass);
      function ShippingAddressForm() {
        return ShippingAddressForm.__super__.constructor.apply(this, arguments)
      }
      ShippingAddressForm.prototype.tag = 'shippingaddress';
      ShippingAddressForm.prototype.html = '<form onsubmit={submit}>\n  <yield/>\n</form>';
      ShippingAddressForm.prototype.configs = {
        'order.shippingAddress.name': [isRequired],
        'order.shippingAddress.line1': [isRequired],
        'order.shippingAddress.line2': null,
        'order.shippingAddress.city': [isRequired],
        'order.shippingAddress.state': [isRequired],
        'order.shippingAddress.postalCode': [isPostalRequired],
        'order.shippingAddress.country': [isRequired]
      };
      ShippingAddressForm.prototype.errorMessage = '';
      ShippingAddressForm.prototype.init = function () {
        if (this.parentData != null) {
          this.data = this.parentData
        }
        ShippingAddressForm.__super__.init.apply(this, arguments);
        return this.on('update', function (_this) {
          return function () {
            if (_this.parentData != null) {
              return _this.data = _this.parentData
            }
          }
        }(this))
      };
      ShippingAddressForm.prototype._submit = function () {
        var opts;
        opts = {
          id: this.data.get('order.id'),
          shippingAddress: this.data.get('order.shippingAddress')
        };
        this.errorMessage = '';
        this.update();
        m.trigger(Events.ShippingAddressUpdate);
        return this.client.account.updateOrder(opts).then(function (_this) {
          return function (res) {
            m.trigger(Events.ShippingAddressUpdateSuccess, res);
            return _this.update()
          }
        }(this))['catch'](function (_this) {
          return function (err) {
            _this.errorMessage = err.message;
            m.trigger(Events.ShippingAddressUpdateFailed, err);
            return _this.update()
          }
        }(this))
      };
      return ShippingAddressForm
    }(CrowdControl.Views.Form)
  });
  // source: src/widgets/index.coffee
  rqzt.define('./widgets', function (module, exports, __dirname, __filename, process) {
    module.exports = {
      CartCounter: rqzt('./widgets/cart-counter'),
      NestedForm: rqzt('./widgets/nested-form'),
      register: function () {
        this.CartCounter.register();
        return this.NestedForm.register()
      }
    }
  });
  // source: src/widgets/cart-counter.coffee
  rqzt.define('./widgets/cart-counter', function (module, exports, __dirname, __filename, process) {
    var CartCounterForm, CrowdControl, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    CrowdControl = rqzt('crowdcontrol/lib');
    rqzt('./utils/patches');
    module.exports = CartCounterForm = function (superClass) {
      extend(CartCounterForm, superClass);
      function CartCounterForm() {
        return CartCounterForm.__super__.constructor.apply(this, arguments)
      }
      CartCounterForm.prototype.tag = 'cart-counter';
      CartCounterForm.prototype.html = rqzt('./Users/zk/work/hanzo/shop.js/templates/widgets/cart-counter');
      CartCounterForm.prototype.init = function () {
        return CartCounterForm.__super__.init.apply(this, arguments)
      };
      CartCounterForm.prototype.countItems = function () {
        var count, i, item, items, j, len;
        items = this.data.get('order.items');
        count = 0;
        for (i = j = 0, len = items.length; j < len; i = ++j) {
          item = items[i];
          count += item.quantity
        }
        return count
      };
      CartCounterForm.prototype.totalPrice = function () {
        var i, item, items, j, len, price;
        items = this.data.get('order.items');
        price = 0;
        for (i = j = 0, len = items.length; j < len; i = ++j) {
          item = items[i];
          price += item.price * item.quantity
        }
        return price
      };
      return CartCounterForm
    }(CrowdControl.Views.View)
  });
  // source: templates/widgets/cart-counter.pug
  rqzt.define('./Users/zk/work/hanzo/shop.js/templates/widgets/cart-counter', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<div class="cart-count">({ countItems() })</div>\n<div class="cart-price">({ renderCurrency(data.get(\'order.currency\'), totalPrice()) })</div>'
  });
  // source: src/widgets/nested-form.coffee
  rqzt.define('./widgets/nested-form', function (module, exports, __dirname, __filename, process) {
    var CrowdControl, NestedForm, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    CrowdControl = rqzt('crowdcontrol/lib');
    module.exports = NestedForm = function (superClass) {
      extend(NestedForm, superClass);
      function NestedForm() {
        return NestedForm.__super__.constructor.apply(this, arguments)
      }
      NestedForm.prototype.tag = 'nested-form';
      NestedForm.prototype.html = '<form method="{ method }" action="{ action }">\n  <yield></yield>\n</form>';
      return NestedForm
    }(CrowdControl.Views.View)
  });
  // source: src/controls/index.coffee
  rqzt.define('./controls', function (module, exports, __dirname, __filename, process) {
    module.exports = {
      Control: rqzt('./controls/control'),
      Text: rqzt('./controls/text'),
      TextArea: rqzt('./controls/textarea'),
      Checkbox: rqzt('./controls/checkbox'),
      Select: rqzt('./controls/select'),
      QuantitySelect: rqzt('./controls/quantity-select'),
      CountrySelect: rqzt('./controls/country-select'),
      StateSelect: rqzt('./controls/state-select'),
      UserEmail: rqzt('./controls/user-email'),
      UserName: rqzt('./controls/user-name'),
      UserCurrentPassword: rqzt('./controls/user-current-password'),
      UserPassword: rqzt('./controls/user-password'),
      UserPasswordConfirm: rqzt('./controls/user-password-confirm'),
      ShippingAddressName: rqzt('./controls/shippingaddress-name'),
      ShippingAddressLine1: rqzt('./controls/shippingaddress-line1'),
      ShippingAddressLine2: rqzt('./controls/shippingaddress-line2'),
      ShippingAddressCity: rqzt('./controls/shippingaddress-city'),
      ShippingAddressPostalCode: rqzt('./controls/shippingaddress-postalcode'),
      ShippingAddressState: rqzt('./controls/shippingaddress-state'),
      ShippingAddressCountry: rqzt('./controls/shippingaddress-country'),
      CardName: rqzt('./controls/card-name'),
      CardNumber: rqzt('./controls/card-number'),
      CardExpiry: rqzt('./controls/card-expiry'),
      CardCVC: rqzt('./controls/card-cvc'),
      Terms: rqzt('./controls/terms'),
      GiftToggle: rqzt('./controls/gift-toggle'),
      GiftType: rqzt('./controls/gift-type'),
      GiftEmail: rqzt('./controls/gift-email'),
      GiftMessage: rqzt('./controls/gift-message'),
      PromoCode: rqzt('./controls/promocode'),
      register: function () {
        this.Text.register();
        this.TextArea.register();
        this.Checkbox.register();
        this.Select.register();
        this.QuantitySelect.register();
        this.CountrySelect.register();
        this.StateSelect.register();
        this.UserEmail.register();
        this.UserName.register();
        this.UserCurrentPassword.register();
        this.UserPassword.register();
        this.UserPasswordConfirm.register();
        this.ShippingAddressName.register();
        this.ShippingAddressLine1.register();
        this.ShippingAddressLine2.register();
        this.ShippingAddressCity.register();
        this.ShippingAddressPostalCode.register();
        this.ShippingAddressState.register();
        this.ShippingAddressCountry.register();
        this.CardName.register();
        this.CardNumber.register();
        this.CardExpiry.register();
        this.CardCVC.register();
        this.Terms.register();
        this.GiftToggle.register();
        this.GiftType.register();
        this.GiftEmail.register();
        this.GiftMessage.register();
        return this.PromoCode.register()
      }
    }
  });
  // source: src/controls/control.coffee
  rqzt.define('./controls/control', function (module, exports, __dirname, __filename, process) {
    var Control, CrowdControl, Events, m, riot, scrolling, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    CrowdControl = rqzt('crowdcontrol/lib');
    m = rqzt('./mediator');
    Events = rqzt('./events');
    riot = rqzt('riot/riot');
    scrolling = false;
    module.exports = Control = function (superClass) {
      extend(Control, superClass);
      function Control() {
        return Control.__super__.constructor.apply(this, arguments)
      }
      Control.prototype.init = function () {
        if (this.input == null && this.inputs != null) {
          this.input = this.inputs[this.lookup]
        }
        if (this.input != null) {
          return Control.__super__.init.apply(this, arguments)
        }
      };
      Control.prototype.getValue = function (event) {
        var ref;
        return (ref = $(event.target).val()) != null ? ref.trim() : void 0
      };
      Control.prototype.error = function (err) {
        if (err instanceof DOMException) {
          void 0;
          return
        }
        Control.__super__.error.apply(this, arguments);
        if (!scrolling) {
          scrolling = true;
          $('html, body').animate({ scrollTop: $(this.root).offset().top - $(window).height() / 2 }, {
            complete: function () {
              return scrolling = false
            },
            duration: 500
          })
        }
        return m.trigger(Events.ChangeFailed, this.input.name, this.input.ref.get(this.input.name))
      };
      Control.prototype.change = function () {
        Control.__super__.change.apply(this, arguments);
        return m.trigger(Events.Change, this.input.name, this.input.ref.get(this.input.name))
      };
      Control.prototype.changed = function (value) {
        m.trigger(Events.ChangeSuccess, this.input.name, value);
        return riot.update()
      };
      Control.prototype.value = function () {
        return this.input.ref(this.input.name)
      };
      return Control
    }(CrowdControl.Views.Input)
  });
  // source: src/controls/text.coffee
  rqzt.define('./controls/text', function (module, exports, __dirname, __filename, process) {
    var Control, Text, placeholder, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Control = rqzt('./controls/control');
    placeholder = rqzt('./utils/placeholder');
    module.exports = Text = function (superClass) {
      extend(Text, superClass);
      function Text() {
        return Text.__super__.constructor.apply(this, arguments)
      }
      Text.prototype.tag = 'text-control';
      Text.prototype.html = rqzt('./Users/zk/work/hanzo/shop.js/templates/controls/text');
      Text.prototype.type = 'text';
      Text.prototype.formElement = 'input';
      Text.prototype.autoComplete = 'on';
      Text.prototype.init = function () {
        Text.__super__.init.apply(this, arguments);
        return this.on('updated', function (_this) {
          return function () {
            var el;
            el = _this.root.getElementsByTagName(_this.formElement)[0];
            if (_this.type !== 'password') {
              return placeholder(el)
            }
          }
        }(this))
      };
      return Text
    }(Control)
  });
  // source: src/utils/placeholder.coffee
  rqzt.define('./utils/placeholder', function (module, exports, __dirname, __filename, process) {
    var hidePlaceholderOnFocus, unfocusOnAnElement;
    hidePlaceholderOnFocus = function (event) {
      var target;
      target = event.currentTarget ? event.currentTarget : event.srcElement;
      if (target.value === target.getAttribute('placeholder')) {
        return target.value = ''
      }
    };
    unfocusOnAnElement = function (event) {
      var target;
      target = event.currentTarget ? event.currentTarget : event.srcElement;
      if (target.value === '') {
        return target.value = target.getAttribute('placeholder')
      }
    };
    if (document.createElement('input').placeholder != null) {
      module.exports = function () {
      }
    } else {
      module.exports = function (input) {
        var ref;
        input = (ref = input[0]) != null ? ref : input;
        if (input._placeholdered != null) {
          return
        }
        Object.defineProperty(input, '_placeholdered', {
          value: true,
          writable: true
        });
        if (!input.value) {
          input.value = input.getAttribute('placeholder')
        }
        if (input.addEventListener) {
          input.addEventListener('click', hidePlaceholderOnFocus, false);
          return input.addEventListener('blur', unfocusOnAnElement, false)
        } else if (input.attachEvent) {
          input.attachEvent('onclick', hidePlaceholderOnFocus);
          return input.attachEvent('onblur', unfocusOnAnElement)
        }
      }
    }
  });
  // source: templates/controls/text.pug
  rqzt.define('./Users/zk/work/hanzo/shop.js/templates/controls/text', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<input class="{invalid: errorMessage, valid: valid}" id="{ input.name }" name="{ name || input.name }" type="{ type }" onchange="{ change }" onblur="{ change }" riot-value="{ input.ref(input.name) }" placeholder="{ placeholder }" autocomplete="{ autoComplete }"/>\n<yield></yield>'
  });
  // source: src/controls/textarea.coffee
  rqzt.define('./controls/textarea', function (module, exports, __dirname, __filename, process) {
    var Text, TextArea, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Text = rqzt('./controls/text');
    module.exports = TextArea = function (superClass) {
      extend(TextArea, superClass);
      function TextArea() {
        return TextArea.__super__.constructor.apply(this, arguments)
      }
      TextArea.prototype.tag = 'textarea-control';
      TextArea.prototype.html = rqzt('./Users/zk/work/hanzo/shop.js/templates/controls/textarea');
      TextArea.prototype.formElement = 'textarea';
      return TextArea
    }(Text)
  });
  // source: templates/controls/textarea.pug
  rqzt.define('./Users/zk/work/hanzo/shop.js/templates/controls/textarea', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<textarea class="{invalid: errorMessage, valid: valid}" id="{ input.name }" name="{ name || input.name }" rows="{ rows }" cols="{ cols }" type="text" onchange="{ change }" onblur="{ change }" placeholder="{ placeholder }">{ input.ref(input.name) }</textarea>\n<yield></yield>'
  });
  // source: src/controls/checkbox.coffee
  rqzt.define('./controls/checkbox', function (module, exports, __dirname, __filename, process) {
    var Checkbox, Control, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Control = rqzt('./controls/control');
    module.exports = Checkbox = function (superClass) {
      extend(Checkbox, superClass);
      function Checkbox() {
        return Checkbox.__super__.constructor.apply(this, arguments)
      }
      Checkbox.prototype.tag = 'checkbox-control';
      Checkbox.prototype.html = rqzt('./Users/zk/work/hanzo/shop.js/templates/controls/checkbox');
      Checkbox.prototype.getValue = function (event) {
        return event.target.checked
      };
      return Checkbox
    }(Control)
  });
  // source: templates/controls/checkbox.pug
  rqzt.define('./Users/zk/work/hanzo/shop.js/templates/controls/checkbox', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<input class="{invalid: errorMessage, valid: valid}" id="{ input.name }" name="{ name || input.name }" type="checkbox" onchange="{ change }" onblur="{ change }" checked="{ input.ref(input.name) }"/>\n<yield></yield>'
  });
  // source: src/controls/select.coffee
  rqzt.define('./controls/select', function (module, exports, __dirname, __filename, process) {
    var Select, Text, coolDown, isABrokenBrowser, isObject, requestAnimationFrame, riot, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Text = rqzt('./controls/text');
    riot = rqzt('riot/riot');
    isObject = rqzt('is-object');
    requestAnimationFrame = rqzt('raf');
    isABrokenBrowser = window.navigator.userAgent.indexOf('MSIE') > 0 || window.navigator.userAgent.indexOf('Trident') > 0;
    coolDown = -1;
    module.exports = Select = function (superClass) {
      extend(Select, superClass);
      function Select() {
        return Select.__super__.constructor.apply(this, arguments)
      }
      Select.prototype.tag = 'select-control';
      Select.prototype.html = rqzt('./Users/zk/work/hanzo/shop.js/templates/controls/select');
      Select.prototype.tags = false;
      Select.prototype.min = 10;
      Select.prototype.selectOptions = {};
      Select.prototype.options = function () {
        return this.selectOptions
      };
      Select.prototype.readOnly = false;
      Select.prototype.ignore = false;
      Select.prototype.events = {
        updated: function () {
          return this.onUpdated()
        }
      };
      Select.prototype.getValue = function (event) {
        var ref;
        return (ref = $(event.target).val()) != null ? ref.trim().toLowerCase() : void 0
      };
      Select.prototype.change = function () {
        Select.__super__.change.apply(this, arguments);
        return riot.update()
      };
      Select.prototype.initSelect = function ($select) {
        var $input, invertedOptions, name, options, ref, select, value;
        options = [];
        invertedOptions = {};
        ref = this.options();
        for (value in ref) {
          name = ref[value];
          options.push({
            text: name,
            value: value
          });
          invertedOptions[name] = value
        }
        $select.selectize({ dropdownParent: 'body' }).on('change', function (_this) {
          return function (event) {
            if (coolDown !== -1) {
              return
            }
            coolDown = setTimeout(function () {
              return coolDown = -1
            }, 100);
            _this.change(event);
            event.preventDefault();
            event.stopPropagation();
            return false
          }
        }(this));
        select = $select[0];
        select.selectize.addOption(options);
        select.selectize.addItem([this.input.ref.get(this.input.name)] || [], true);
        select.selectize.refreshOptions(false);
        $input = $select.parent().find('.selectize-input input:first');
        $input.on('change', function (event) {
          var val;
          val = $(event.target).val();
          if (invertedOptions[val] != null) {
            return $select[0].selectize.setValue(invertedOptions[val])
          }
        });
        if (this.readOnly) {
          return $input.attr('readonly', true)
        }
      };
      Select.prototype.init = function (opts) {
        Select.__super__.init.apply(this, arguments);
        return this.style = this.style || 'width:100%'
      };
      Select.prototype.onUpdated = function () {
        var $control, $select, select, v;
        if (this.input == null) {
          return
        }
        $select = $(this.root).find('select');
        select = $select[0];
        if (select != null) {
          v = this.input.ref.get(this.input.name);
          if (!this.initialized) {
            return requestAnimationFrame(function (_this) {
              return function () {
                _this.initSelect($select);
                return _this.initialized = true
              }
            }(this))
          } else if (select.selectize != null && v !== select.selectize.getValue()) {
            select.selectize.clear(true);
            return select.selectize.addItem(v, true)
          }
        } else {
          $control = $(this.root).find('.selectize-control');
          if ($control[0] == null) {
            return requestAnimationFrame(function (_this) {
              return function () {
                return _this.update()
              }
            }(this))
          }
        }
      };
      return Select
    }(Text)
  });
  // source: templates/controls/select.pug
  rqzt.define('./Users/zk/work/hanzo/shop.js/templates/controls/select', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<select class="{invalid: errorMessage, valid: valid}" id="{ input.name }" style="{ style };" name="{ name || input.name }" onchange="{ change }" onblur="{ change }" placeholder="{ placeholder }"></select>\n<yield></yield>'
  });
  // source: src/controls/quantity-select.coffee
  rqzt.define('./controls/quantity-select', function (module, exports, __dirname, __filename, process) {
    var Events, QuantitySelect, Select, i, j, m, opts, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Select = rqzt('./controls/select');
    Events = rqzt('./events');
    m = rqzt('./mediator');
    opts = {};
    for (i = j = 1; j < 100; i = ++j) {
      opts[i] = i
    }
    module.exports = QuantitySelect = function (superClass) {
      extend(QuantitySelect, superClass);
      function QuantitySelect() {
        return QuantitySelect.__super__.constructor.apply(this, arguments)
      }
      QuantitySelect.prototype.tag = 'quantity-select-control';
      QuantitySelect.prototype.lookup = 'quantity';
      QuantitySelect.prototype.options = function () {
        return opts
      };
      QuantitySelect.prototype.init = function () {
        return QuantitySelect.__super__.init.apply(this, arguments)
      };
      QuantitySelect.prototype.readOnly = true;
      QuantitySelect.prototype.getValue = function (event) {
        var ref;
        return parseFloat((ref = $(event.target).val()) != null ? ref.trim() : void 0)
      };
      QuantitySelect.prototype.change = function (e) {
        var newValue, oldValue;
        if (e.target == null) {
          return
        }
        oldValue = this.data.get('quantity');
        QuantitySelect.__super__.change.apply(this, arguments);
        newValue = this.data.get('quantity');
        this.data.set('quantity', oldValue);
        return this.cart.set(this.data.get('productId'), newValue)
      };
      return QuantitySelect
    }(Select)
  });
  // source: src/controls/country-select.coffee
  rqzt.define('./controls/country-select', function (module, exports, __dirname, __filename, process) {
    var CountrySelect, Select, countries, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Select = rqzt('./controls/select');
    countries = rqzt('./data/countries');
    module.exports = CountrySelect = function (superClass) {
      extend(CountrySelect, superClass);
      function CountrySelect() {
        return CountrySelect.__super__.constructor.apply(this, arguments)
      }
      CountrySelect.prototype.tag = 'country-select-control';
      CountrySelect.prototype.options = function () {
        return countries.data
      };
      CountrySelect.prototype.init = function () {
        CountrySelect.__super__.init.apply(this, arguments);
        return this.on('update', function (_this) {
          return function () {
            var country, k, ref, v;
            country = _this.input.ref.get('order.shippingAddress.country');
            if (country) {
              country = country.toLowerCase();
              if (country.length === 2) {
                return _this.input.ref.set('order.shippingAddress.country', country)
              } else {
                ref = countries.data;
                for (k in ref) {
                  v = ref[k];
                  if (v.toLowerCase() === country) {
                    _this.input.ref.set('order.shippingAddress.country', k);
                    return
                  }
                }
              }
            }
          }
        }(this))
      };
      return CountrySelect
    }(Select)
  });
  // source: src/data/countries.coffee
  rqzt.define('./data/countries', function (module, exports, __dirname, __filename, process) {
    module.exports = {
      data: {
        af: 'Afghanistan',
        ax: 'Åland Islands',
        al: 'Albania',
        dz: 'Algeria',
        as: 'American Samoa',
        ad: 'Andorra',
        ao: 'Angola',
        ai: 'Anguilla',
        aq: 'Antarctica',
        ag: 'Antigua and Barbuda',
        ar: 'Argentina',
        am: 'Armenia',
        aw: 'Aruba',
        au: 'Australia',
        at: 'Austria',
        az: 'Azerbaijan',
        bs: 'Bahamas',
        bh: 'Bahrain',
        bd: 'Bangladesh',
        bb: 'Barbados',
        by: 'Belarus',
        be: 'Belgium',
        bz: 'Belize',
        bj: 'Benin',
        bm: 'Bermuda',
        bt: 'Bhutan',
        bo: 'Bolivia',
        bq: 'Bonaire, Sint Eustatius and Saba',
        ba: 'Bosnia and Herzegovina',
        bw: 'Botswana',
        bv: 'Bouvet Island',
        br: 'Brazil',
        io: 'British Indian Ocean Territory',
        bn: 'Brunei Darussalam',
        bg: 'Bulgaria',
        bf: 'Burkina Faso',
        bi: 'Burundi',
        kh: 'Cambodia',
        cm: 'Cameroon',
        ca: 'Canada',
        cv: 'Cabo Verde',
        ky: 'Cayman Islands',
        cf: 'Central African Republic',
        td: 'Chad',
        cl: 'Chile',
        cn: 'China',
        cx: 'Christmas Island',
        cc: 'Cocos (Keeling) Islands',
        co: 'Colombia',
        km: 'Comoros',
        cg: 'Congo',
        cd: 'Congo (Democratic Republic)',
        ck: 'Cook Islands',
        cr: 'Costa Rica',
        ci: "Côte d'Ivoire",
        hr: 'Croatia',
        cu: 'Cuba',
        cw: 'Curaçao',
        cy: 'Cyprus',
        cz: 'Czech Republic',
        dk: 'Denmark',
        dj: 'Djibouti',
        dm: 'Dominica',
        'do': 'Dominican Republic',
        ec: 'Ecuador',
        eg: 'Egypt',
        sv: 'El Salvador',
        gq: 'Equatorial Guinea',
        er: 'Eritrea',
        ee: 'Estonia',
        et: 'Ethiopia',
        fk: 'Falkland Islands',
        fo: 'Faroe Islands',
        fj: 'Fiji',
        fi: 'Finland',
        fr: 'France',
        gf: 'French Guiana',
        pf: 'French Polynesia',
        tf: 'French Southern Territories',
        ga: 'Gabon',
        gm: 'Gambia',
        ge: 'Georgia',
        de: 'Germany',
        gh: 'Ghana',
        gi: 'Gibraltar',
        gr: 'Greece',
        gl: 'Greenland',
        gd: 'Grenada',
        gp: 'Guadeloupe',
        gu: 'Guam',
        gt: 'Guatemala',
        gg: 'Guernsey',
        gn: 'Guinea',
        gw: 'Guinea-Bissau',
        gy: 'Guyana',
        ht: 'Haiti',
        hm: 'Heard Island and McDonald Islands',
        va: 'Holy See',
        hn: 'Honduras',
        hk: 'Hong Kong',
        hu: 'Hungary',
        is: 'Iceland',
        'in': 'India',
        id: 'Indonesia',
        ir: 'Iran',
        iq: 'Iraq',
        ie: 'Ireland',
        im: 'Isle of Man',
        il: 'Israel',
        it: 'Italy',
        jm: 'Jamaica',
        jp: 'Japan',
        je: 'Jersey',
        jo: 'Jordan',
        kz: 'Kazakhstan',
        ke: 'Kenya',
        ki: 'Kiribati',
        kp: "Korea (Democratic People's Republic of)",
        kr: 'Korea (Republic of)',
        kw: 'Kuwait',
        kg: 'Kyrgyzstan',
        la: "Lao People's Democratic Republic",
        lv: 'Latvia',
        lb: 'Lebanon',
        ls: 'Lesotho',
        lr: 'Liberia',
        ly: 'Libya',
        li: 'Liechtenstein',
        lt: 'Lithuania',
        lu: 'Luxembourg',
        mo: 'Macao',
        mk: 'Macedonia',
        mg: 'Madagascar',
        mw: 'Malawi',
        my: 'Malaysia',
        mv: 'Maldives',
        ml: 'Mali',
        mt: 'Malta',
        mh: 'Marshall Islands',
        mq: 'Martinique',
        mr: 'Mauritania',
        mu: 'Mauritius',
        yt: 'Mayotte',
        mx: 'Mexico',
        fm: 'Micronesia',
        md: 'Moldova',
        mc: 'Monaco',
        mn: 'Mongolia',
        me: 'Montenegro',
        ms: 'Montserrat',
        ma: 'Morocco',
        mz: 'Mozambique',
        mm: 'Myanmar',
        na: 'Namibia',
        nr: 'Nauru',
        np: 'Nepal',
        nl: 'Netherlands',
        nc: 'New Caledonia',
        nz: 'New Zealand',
        ni: 'Nicaragua',
        ne: 'Niger',
        ng: 'Nigeria',
        nu: 'Niue',
        nf: 'Norfolk Island',
        mp: 'Northern Mariana Islands',
        no: 'Norway',
        om: 'Oman',
        pk: 'Pakistan',
        pw: 'Palau',
        ps: 'Palestine',
        pa: 'Panama',
        pg: 'Papua New Guinea',
        py: 'Paraguay',
        pe: 'Peru',
        ph: 'Philippines',
        pn: 'Pitcairn',
        pl: 'Poland',
        pt: 'Portugal',
        pr: 'Puerto Rico',
        qa: 'Qatar',
        re: 'Réunion',
        ro: 'Romania',
        ru: 'Russian Federation',
        rw: 'Rwanda',
        bl: 'Saint Barthélemy',
        sh: 'Saint Helena, Ascension and Tristan da Cunha',
        kn: 'Saint Kitts and Nevis',
        lc: 'Saint Lucia',
        mf: 'Saint Martin (French)',
        pm: 'Saint Pierre and Miquelon',
        vc: 'Saint Vincent and the Grenadines',
        ws: 'Samoa',
        sm: 'San Marino',
        st: 'Sao Tome and Principe',
        sa: 'Saudi Arabia',
        sn: 'Senegal',
        rs: 'Serbia',
        sc: 'Seychelles',
        sl: 'Sierra Leone',
        sg: 'Singapore',
        sx: 'Sint Maarten (Dutch)',
        sk: 'Slovakia',
        si: 'Slovenia',
        sb: 'Solomon Islands',
        so: 'Somalia',
        za: 'South Africa',
        gs: 'South Georgia and the South Sandwich Islands',
        ss: 'South Sudan',
        es: 'Spain',
        lk: 'Sri Lanka',
        sd: 'Sudan',
        sr: 'Suriname',
        sj: 'Svalbard and Jan Mayen',
        sz: 'Swaziland',
        se: 'Sweden',
        ch: 'Switzerland',
        sy: 'Syrian Arab Republic',
        tw: 'Taiwan',
        tj: 'Tajikistan',
        tz: 'Tanzania',
        th: 'Thailand',
        tl: 'Timor-Leste',
        tg: 'Togo',
        tk: 'Tokelau',
        to: 'Tonga',
        tt: 'Trinidad and Tobago',
        tn: 'Tunisia',
        tr: 'Turkey',
        tm: 'Turkmenistan',
        tc: 'Turks and Caicos Islands',
        tv: 'Tuvalu',
        ug: 'Uganda',
        ua: 'Ukraine',
        ae: 'United Arab Emirates',
        gb: 'United Kingdom of Great Britain and Northern Ireland',
        us: 'United States of America',
        um: 'United States Minor Outlying Islands',
        uy: 'Uruguay',
        uz: 'Uzbekistan',
        vu: 'Vanuatu',
        ve: 'Venezuela',
        vn: 'Viet Nam',
        vg: 'Virgin Islands (British)',
        vi: 'Virgin Islands (U.S.)',
        wf: 'Wallis and Futuna',
        eh: 'Western Sahara',
        ye: 'Yemen',
        zm: 'Zambia',
        zw: 'Zimbabwe'
      }
    }
  });
  // source: src/controls/state-select.coffee
  rqzt.define('./controls/state-select', function (module, exports, __dirname, __filename, process) {
    var Select, StateSelect, states, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Select = rqzt('./controls/select');
    states = rqzt('./data/states');
    module.exports = StateSelect = function (superClass) {
      extend(StateSelect, superClass);
      function StateSelect() {
        return StateSelect.__super__.constructor.apply(this, arguments)
      }
      StateSelect.prototype.tag = 'state-select-control';
      StateSelect.prototype.html = rqzt('./Users/zk/work/hanzo/shop.js/templates/controls/state-select');
      StateSelect.prototype.options = function () {
        return states.data
      };
      StateSelect.prototype.countryField = 'order.shippingAddress.country';
      StateSelect.prototype.init = function () {
        StateSelect.__super__.init.apply(this, arguments);
        return this.on('update', function (_this) {
          return function () {
            var k, ref, state, v;
            if (_this.input == null) {
              return
            }
            state = _this.input.ref.get('order.shippingAddress.state');
            if (state) {
              state = state.toLowerCase();
              if (state.length === 2) {
                return _this.input.ref.set('order.shippingAddress.state', state)
              } else {
                ref = states.data;
                for (k in ref) {
                  v = ref[k];
                  if (v.toLowerCase() === state) {
                    _this.input.ref.set('order.shippingAddress.state', k);
                    return
                  }
                }
              }
            }
          }
        }(this))
      };
      StateSelect.prototype.onUpdated = function () {
        var value;
        if (this.input == null) {
          return
        }
        if (this.input.ref.get(this.countryField) === 'us') {
          $(this.root).find('.selectize-control').show()
        } else {
          $(this.root).find('.selectize-control').hide();
          value = this.input.ref.get(this.input.name);
          if (value) {
            this.input.ref.set(this.input.name, value.toUpperCase())
          }
        }
        return StateSelect.__super__.onUpdated.apply(this, arguments)
      };
      return StateSelect
    }(Select)
  });
  // source: src/data/states.coffee
  rqzt.define('./data/states', function (module, exports, __dirname, __filename, process) {
    module.exports = {
      data: {
        ak: 'Alaska',
        al: 'Alabama',
        ar: 'Arkansas',
        az: 'Arizona',
        ca: 'California',
        co: 'Colorado',
        ct: 'Connecticut',
        dc: 'District of Columbia',
        de: 'Delaware',
        fl: 'Florida',
        ga: 'Georgia',
        hi: 'Hawaii',
        ia: 'Iowa',
        id: 'Idaho',
        il: 'Illinois',
        'in': 'Indiana',
        ks: 'Kansas',
        ky: 'Kentucky',
        la: 'Louisiana',
        ma: 'Massachusetts',
        md: 'Maryland',
        me: 'Maine',
        mi: 'Michigan',
        mn: 'Minnesota',
        mo: 'Missouri',
        ms: 'Mississippi',
        mt: 'Montana',
        nc: 'North Carolina',
        nd: 'North Dakota',
        ne: 'Nebraska',
        nh: 'New Hampshire',
        nj: 'New Jersey',
        nm: 'New Mexico',
        nv: 'Nevada',
        ny: 'New York',
        oh: 'Ohio',
        ok: 'Oklahoma',
        or: 'Oregon',
        pa: 'Pennsylvania',
        ri: 'Rhode Island',
        sc: 'South Carolina',
        sd: 'South Dakota',
        tn: 'Tennessee',
        tx: 'Texas',
        ut: 'Utah',
        va: 'Virginia',
        vt: 'Vermont',
        wa: 'Washington',
        wi: 'Wisconsin',
        wv: 'West Virginia',
        wy: 'Wyoming',
        aa: 'U.S. Armed Forces – Americas',
        ae: 'U.S. Armed Forces – Europe',
        ap: 'U.S. Armed Forces – Pacific'
      }
    }
  });
  // source: templates/controls/state-select.pug
  rqzt.define('./Users/zk/work/hanzo/shop.js/templates/controls/state-select', function (module, exports, __dirname, __filename, process) {
    module.exports = '\n<input class="{invalid: errorMessage, valid: valid}" if="{ input.ref(countryField) !== &quot;us&quot; }" id="{ input.name }" name="{ name || input.name }" type="text" onchange="{ change }" onblur="{ change }" riot-value="{ input.ref(input.name) }" placeholder="{ placeholder }"/>\n<select class="{invalid: errorMessage, valid: valid}" if="{ input.ref(countryField) == &quot;us&quot; }" id="{ input.name }" name="{ name || input.name }" onchange="{ change }" onblur="{ change }" data-placeholder="{ placeholder }"></select>\n<yield></yield>'
  });
  // source: src/controls/user-email.coffee
  rqzt.define('./controls/user-email', function (module, exports, __dirname, __filename, process) {
    var Text, UserName, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Text = rqzt('./controls/text');
    module.exports = UserName = function (superClass) {
      extend(UserName, superClass);
      function UserName() {
        return UserName.__super__.constructor.apply(this, arguments)
      }
      UserName.prototype.tag = 'user-name';
      UserName.prototype.lookup = 'user.name';
      return UserName
    }(Text)
  });
  // source: src/controls/user-name.coffee
  rqzt.define('./controls/user-name', function (module, exports, __dirname, __filename, process) {
    var Text, UserEmail, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Text = rqzt('./controls/text');
    module.exports = UserEmail = function (superClass) {
      extend(UserEmail, superClass);
      function UserEmail() {
        return UserEmail.__super__.constructor.apply(this, arguments)
      }
      UserEmail.prototype.tag = 'user-email';
      UserEmail.prototype.lookup = 'user.email';
      return UserEmail
    }(Text)
  });
  // source: src/controls/user-current-password.coffee
  rqzt.define('./controls/user-current-password', function (module, exports, __dirname, __filename, process) {
    var Text, UserCurrentPassword, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Text = rqzt('./controls/text');
    module.exports = UserCurrentPassword = function (superClass) {
      extend(UserCurrentPassword, superClass);
      function UserCurrentPassword() {
        return UserCurrentPassword.__super__.constructor.apply(this, arguments)
      }
      UserCurrentPassword.prototype.tag = 'user-current-password';
      UserCurrentPassword.prototype.lookup = 'user.currentPassword';
      UserCurrentPassword.prototype.type = 'password';
      UserCurrentPassword.prototype.autoComplete = 'off';
      UserCurrentPassword.prototype.init = function () {
        return UserCurrentPassword.__super__.init.apply(this, arguments)
      };
      return UserCurrentPassword
    }(Text)
  });
  // source: src/controls/user-password.coffee
  rqzt.define('./controls/user-password', function (module, exports, __dirname, __filename, process) {
    var Text, UserPassword, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Text = rqzt('./controls/text');
    module.exports = UserPassword = function (superClass) {
      extend(UserPassword, superClass);
      function UserPassword() {
        return UserPassword.__super__.constructor.apply(this, arguments)
      }
      UserPassword.prototype.tag = 'user-password';
      UserPassword.prototype.lookup = 'user.password';
      UserPassword.prototype.type = 'password';
      return UserPassword
    }(Text)
  });
  // source: src/controls/user-password-confirm.coffee
  rqzt.define('./controls/user-password-confirm', function (module, exports, __dirname, __filename, process) {
    var Text, UserPasswordConfirm, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Text = rqzt('./controls/text');
    module.exports = UserPasswordConfirm = function (superClass) {
      extend(UserPasswordConfirm, superClass);
      function UserPasswordConfirm() {
        return UserPasswordConfirm.__super__.constructor.apply(this, arguments)
      }
      UserPasswordConfirm.prototype.tag = 'user-password-confirm';
      UserPasswordConfirm.prototype.lookup = 'user.passwordConfirm';
      UserPasswordConfirm.prototype.type = 'password';
      UserPasswordConfirm.prototype.autoComplete = 'off';
      UserPasswordConfirm.prototype.init = function () {
        return UserPasswordConfirm.__super__.init.apply(this, arguments)
      };
      return UserPasswordConfirm
    }(Text)
  });
  // source: src/controls/shippingaddress-name.coffee
  rqzt.define('./controls/shippingaddress-name', function (module, exports, __dirname, __filename, process) {
    var ShippingAddressName, Text, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Text = rqzt('./controls/text');
    module.exports = ShippingAddressName = function (superClass) {
      extend(ShippingAddressName, superClass);
      function ShippingAddressName() {
        return ShippingAddressName.__super__.constructor.apply(this, arguments)
      }
      ShippingAddressName.prototype.tag = 'shippingaddress-name';
      ShippingAddressName.prototype.lookup = 'order.shippingAddress.name';
      return ShippingAddressName
    }(Text)
  });
  // source: src/controls/shippingaddress-line1.coffee
  rqzt.define('./controls/shippingaddress-line1', function (module, exports, __dirname, __filename, process) {
    var ShippingAddressLine1, Text, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Text = rqzt('./controls/text');
    module.exports = ShippingAddressLine1 = function (superClass) {
      extend(ShippingAddressLine1, superClass);
      function ShippingAddressLine1() {
        return ShippingAddressLine1.__super__.constructor.apply(this, arguments)
      }
      ShippingAddressLine1.prototype.tag = 'shippingaddress-line1';
      ShippingAddressLine1.prototype.lookup = 'order.shippingAddress.line1';
      return ShippingAddressLine1
    }(Text)
  });
  // source: src/controls/shippingaddress-line2.coffee
  rqzt.define('./controls/shippingaddress-line2', function (module, exports, __dirname, __filename, process) {
    var ShippingAddressLine2, Text, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Text = rqzt('./controls/text');
    module.exports = ShippingAddressLine2 = function (superClass) {
      extend(ShippingAddressLine2, superClass);
      function ShippingAddressLine2() {
        return ShippingAddressLine2.__super__.constructor.apply(this, arguments)
      }
      ShippingAddressLine2.prototype.tag = 'shippingaddress-line2';
      ShippingAddressLine2.prototype.lookup = 'order.shippingAddress.line2';
      return ShippingAddressLine2
    }(Text)
  });
  // source: src/controls/shippingaddress-city.coffee
  rqzt.define('./controls/shippingaddress-city', function (module, exports, __dirname, __filename, process) {
    var ShippingAddressCity, Text, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Text = rqzt('./controls/text');
    module.exports = ShippingAddressCity = function (superClass) {
      extend(ShippingAddressCity, superClass);
      function ShippingAddressCity() {
        return ShippingAddressCity.__super__.constructor.apply(this, arguments)
      }
      ShippingAddressCity.prototype.tag = 'shippingaddress-city';
      ShippingAddressCity.prototype.lookup = 'order.shippingAddress.city';
      return ShippingAddressCity
    }(Text)
  });
  // source: src/controls/shippingaddress-postalcode.coffee
  rqzt.define('./controls/shippingaddress-postalcode', function (module, exports, __dirname, __filename, process) {
    var ShippingAddressPostalCode, Text, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Text = rqzt('./controls/text');
    module.exports = ShippingAddressPostalCode = function (superClass) {
      extend(ShippingAddressPostalCode, superClass);
      function ShippingAddressPostalCode() {
        return ShippingAddressPostalCode.__super__.constructor.apply(this, arguments)
      }
      ShippingAddressPostalCode.prototype.tag = 'shippingaddress-postalcode';
      ShippingAddressPostalCode.prototype.lookup = 'order.shippingAddress.postalCode';
      return ShippingAddressPostalCode
    }(Text)
  });
  // source: src/controls/shippingaddress-state.coffee
  rqzt.define('./controls/shippingaddress-state', function (module, exports, __dirname, __filename, process) {
    var ShippingAddressState, StateSelect, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    StateSelect = rqzt('./controls/state-select');
    module.exports = ShippingAddressState = function (superClass) {
      extend(ShippingAddressState, superClass);
      function ShippingAddressState() {
        return ShippingAddressState.__super__.constructor.apply(this, arguments)
      }
      ShippingAddressState.prototype.tag = 'shippingaddress-state';
      ShippingAddressState.prototype.lookup = 'order.shippingAddress.state';
      return ShippingAddressState
    }(StateSelect)
  });
  // source: src/controls/shippingaddress-country.coffee
  rqzt.define('./controls/shippingaddress-country', function (module, exports, __dirname, __filename, process) {
    var CountrySelect, ShippingAddressCountry, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    CountrySelect = rqzt('./controls/country-select');
    module.exports = ShippingAddressCountry = function (superClass) {
      extend(ShippingAddressCountry, superClass);
      function ShippingAddressCountry() {
        return ShippingAddressCountry.__super__.constructor.apply(this, arguments)
      }
      ShippingAddressCountry.prototype.tag = 'shippingaddress-country';
      ShippingAddressCountry.prototype.lookup = 'order.shippingAddress.country';
      return ShippingAddressCountry
    }(CountrySelect)
  });
  // source: src/controls/card-name.coffee
  rqzt.define('./controls/card-name', function (module, exports, __dirname, __filename, process) {
    var CardName, Text, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Text = rqzt('./controls/text');
    module.exports = CardName = function (superClass) {
      extend(CardName, superClass);
      function CardName() {
        return CardName.__super__.constructor.apply(this, arguments)
      }
      CardName.prototype.tag = 'card-name';
      CardName.prototype.lookup = 'payment.account.name';
      return CardName
    }(Text)
  });
  // source: src/controls/card-number.coffee
  rqzt.define('./controls/card-number', function (module, exports, __dirname, __filename, process) {
    var CardNumber, Text, cardUtils, keys, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty, indexOf = [].indexOf || function (item) {
        for (var i = 0, l = this.length; i < l; i++) {
          if (i in this && this[i] === item)
            return i
        }
        return -1
      };
    Text = rqzt('./controls/text');
    cardUtils = rqzt('./utils/card');
    keys = rqzt('./utils/keys');
    module.exports = CardNumber = function (superClass) {
      extend(CardNumber, superClass);
      function CardNumber() {
        return CardNumber.__super__.constructor.apply(this, arguments)
      }
      CardNumber.prototype.tag = 'card-number';
      CardNumber.prototype.lookup = 'payment.account.number';
      CardNumber.prototype.cardType = '';
      CardNumber.prototype.events = {
        updated: function () {
          return this.onUpdated()
        }
      };
      CardNumber.prototype.init = function () {
        return CardNumber.__super__.init.apply(this, arguments)
      };
      CardNumber.prototype.onUpdated = function () {
        var $input;
        if (!this.first) {
          $input = $($(this.root).find('input')[0]);
          $input.on('keypress', cardUtils.restrictNumeric);
          $input.on('keypress', function (_this) {
            return function (e) {
              var card, i, j, k, length, newValue, ref, ref1, ref2, upperLength, value;
              if (ref = e.which, indexOf.call(keys.numeric, ref) < 0) {
                return true
              }
              $input.removeClass(_this.cardType + ' identified unknown');
              value = $input.val() + String.fromCharCode(e.which);
              value = value.replace(/\D/g, '');
              length = value.length;
              upperLength = 16;
              card = cardUtils.cardFromNumber(value);
              if (card) {
                upperLength = card.length[card.length.length - 1];
                _this.cardType = card.type;
                if (_this.cardType) {
                  $input.addClass(_this.cardType + ' identified')
                } else {
                  $input.addClass('unknown')
                }
              }
              if (length > upperLength) {
                return false
              }
              newValue = value[0];
              if (length > 1) {
                if (card && card.type === 'amex') {
                  for (i = j = 1, ref1 = length - 1; 1 <= ref1 ? j <= ref1 : j >= ref1; i = 1 <= ref1 ? ++j : --j) {
                    if (i === 3 || i === 9) {
                      newValue += value[i] + ' '
                    } else {
                      newValue += value[i]
                    }
                  }
                } else {
                  for (i = k = 1, ref2 = length - 1; 1 <= ref2 ? k <= ref2 : k >= ref2; i = 1 <= ref2 ? ++k : --k) {
                    if ((i + 1) % 4 === 0 && i !== length - 1) {
                      newValue += value[i] + ' '
                    } else {
                      newValue += value[i]
                    }
                  }
                }
              }
              $input.val(newValue);
              return e.preventDefault()
            }
          }(this));
          return this.first = true
        }
      };
      return CardNumber
    }(Text)
  });
  // source: src/utils/keys.coffee
  rqzt.define('./utils/keys', function (module, exports, __dirname, __filename, process) {
    module.exports = {
      ignore: [
        8,
        9,
        13,
        20,
        27,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40
      ],
      numeric: [
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57
      ]
    }
  });
  // source: src/controls/card-expiry.coffee
  rqzt.define('./controls/card-expiry', function (module, exports, __dirname, __filename, process) {
    var CardExpiry, Text, cardUtils, keys, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty, indexOf = [].indexOf || function (item) {
        for (var i = 0, l = this.length; i < l; i++) {
          if (i in this && this[i] === item)
            return i
        }
        return -1
      };
    Text = rqzt('./controls/text');
    cardUtils = rqzt('./utils/card');
    keys = rqzt('./utils/keys');
    module.exports = CardExpiry = function (superClass) {
      extend(CardExpiry, superClass);
      function CardExpiry() {
        return CardExpiry.__super__.constructor.apply(this, arguments)
      }
      CardExpiry.prototype.tag = 'card-expiry';
      CardExpiry.prototype.lookup = 'payment.account.expiry';
      CardExpiry.prototype.events = {
        updated: function () {
          return this.onUpdated()
        }
      };
      CardExpiry.prototype.init = function () {
        return CardExpiry.__super__.init.apply(this, arguments)
      };
      CardExpiry.prototype.onUpdated = function () {
        var $input;
        if (!this.first) {
          $input = $($(this.root).find('input')[0]);
          $input.on('keypress', cardUtils.restrictNumeric);
          $input.on('keypress', function (e) {
            var ref, value;
            if (ref = e.which, indexOf.call(keys.numeric, ref) < 0) {
              return true
            }
            value = $input.val() + String.fromCharCode(e.which);
            if (value.length > 7) {
              return false
            }
            if (/^\d$/.test(value) && (value !== '0' && value !== '1')) {
              $input.val('0' + value + ' / ');
              return e.preventDefault()
            } else if (/^\d\d$/.test(value)) {
              $input.val(value + ' / ');
              return e.preventDefault()
            }
          });
          return this.first = true
        }
      };
      return CardExpiry
    }(Text)
  });
  // source: src/controls/card-cvc.coffee
  rqzt.define('./controls/card-cvc', function (module, exports, __dirname, __filename, process) {
    var CardCVC, Text, cardUtils, keys, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty, indexOf = [].indexOf || function (item) {
        for (var i = 0, l = this.length; i < l; i++) {
          if (i in this && this[i] === item)
            return i
        }
        return -1
      };
    Text = rqzt('./controls/text');
    cardUtils = rqzt('./utils/card');
    keys = rqzt('./utils/keys');
    module.exports = CardCVC = function (superClass) {
      extend(CardCVC, superClass);
      function CardCVC() {
        return CardCVC.__super__.constructor.apply(this, arguments)
      }
      CardCVC.prototype.tag = 'card-cvc';
      CardCVC.prototype.lookup = 'payment.account.cvc';
      CardCVC.prototype.events = {
        updated: function () {
          return this.onUpdated()
        }
      };
      CardCVC.prototype.init = function () {
        return CardCVC.__super__.init.apply(this, arguments)
      };
      CardCVC.prototype.onUpdated = function () {
        var $input;
        if (!this.first) {
          $input = $($(this.root).find('input')[0]);
          $input.on('keypress', cardUtils.restrictNumeric);
          $input.on('keypress', function (e) {
            var ref, value;
            if (ref = e.which, indexOf.call(keys.numeric, ref) < 0) {
              return true
            }
            value = $input.val() + String.fromCharCode(e.which);
            if (value.length > 4) {
              return false
            }
          });
          return this.first = true
        }
      };
      return CardCVC
    }(Text)
  });
  // source: src/controls/terms.coffee
  rqzt.define('./controls/terms', function (module, exports, __dirname, __filename, process) {
    var Checkbox, Terms, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Checkbox = rqzt('./controls/checkbox');
    module.exports = Terms = function (superClass) {
      extend(Terms, superClass);
      function Terms() {
        return Terms.__super__.constructor.apply(this, arguments)
      }
      Terms.prototype.tag = 'terms';
      Terms.prototype.lookup = 'terms';
      return Terms
    }(Checkbox)
  });
  // source: src/controls/gift-toggle.coffee
  rqzt.define('./controls/gift-toggle', function (module, exports, __dirname, __filename, process) {
    var Checkbox, GiftToggle, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Checkbox = rqzt('./controls/checkbox');
    module.exports = GiftToggle = function (superClass) {
      extend(GiftToggle, superClass);
      function GiftToggle() {
        return GiftToggle.__super__.constructor.apply(this, arguments)
      }
      GiftToggle.prototype.tag = 'gift-toggle';
      GiftToggle.prototype.lookup = 'order.gift';
      return GiftToggle
    }(Checkbox)
  });
  // source: src/controls/gift-type.coffee
  rqzt.define('./controls/gift-type', function (module, exports, __dirname, __filename, process) {
    var GiftType, Select, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Select = rqzt('./controls/state-select');
    module.exports = GiftType = function (superClass) {
      extend(GiftType, superClass);
      function GiftType() {
        return GiftType.__super__.constructor.apply(this, arguments)
      }
      GiftType.prototype.tag = 'gift-type';
      GiftType.prototype.lookup = 'order.giftType';
      return GiftType
    }(Select)
  });
  // source: src/controls/gift-email.coffee
  rqzt.define('./controls/gift-email', function (module, exports, __dirname, __filename, process) {
    var GiftEmail, Text, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Text = rqzt('./controls/text');
    module.exports = GiftEmail = function (superClass) {
      extend(GiftEmail, superClass);
      function GiftEmail() {
        return GiftEmail.__super__.constructor.apply(this, arguments)
      }
      GiftEmail.prototype.tag = 'gift-email';
      GiftEmail.prototype.lookup = 'order.giftEmail';
      return GiftEmail
    }(Text)
  });
  // source: src/controls/gift-message.coffee
  rqzt.define('./controls/gift-message', function (module, exports, __dirname, __filename, process) {
    var GiftMessage, TextArea, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    TextArea = rqzt('./controls/textarea');
    module.exports = GiftMessage = function (superClass) {
      extend(GiftMessage, superClass);
      function GiftMessage() {
        return GiftMessage.__super__.constructor.apply(this, arguments)
      }
      GiftMessage.prototype.tag = 'gift-message';
      GiftMessage.prototype.lookup = 'order.giftMessage';
      return GiftMessage
    }(TextArea)
  });
  // source: src/controls/promocode.coffee
  rqzt.define('./controls/promocode', function (module, exports, __dirname, __filename, process) {
    var PromoCode, Text, extend = function (child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key))
            child[key] = parent[key]
        }
        function ctor() {
          this.constructor = child
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor;
        child.__super__ = parent.prototype;
        return child
      }, hasProp = {}.hasOwnProperty;
    Text = rqzt('./controls/text');
    module.exports = PromoCode = function (superClass) {
      extend(PromoCode, superClass);
      function PromoCode() {
        return PromoCode.__super__.constructor.apply(this, arguments)
      }
      PromoCode.prototype.tag = 'promocode';
      PromoCode.prototype.lookup = 'order.promoCode';
      return PromoCode
    }(Text)
  });
  // source: src/utils/currency.coffee
  rqzt.define('./utils/currency', function (module, exports, __dirname, __filename, process) {
    var currencySeparator, currencySigns, digitsOnlyRe, isZeroDecimal;
    currencySigns = rqzt('./data/currencies').data;
    currencySeparator = '.';
    digitsOnlyRe = new RegExp('[^\\d.-]', 'g');
    isZeroDecimal = function (code) {
      if (code === 'bif' || code === 'clp' || code === 'djf' || code === 'gnf' || code === 'jpy' || code === 'kmf' || code === 'krw' || code === 'mga' || code === 'pyg' || code === 'rwf' || code === 'vnd' || code === 'vuv' || code === 'xaf' || code === 'xof' || code === 'xpf') {
        return true
      }
      return false
    };
    module.exports = {
      renderUpdatedUICurrency: function (code, uiCurrency) {
        var currentCurrencySign;
        currentCurrencySign = currencySigns[code];
        return Util.renderUICurrencyFromJSON(Util.renderJSONCurrencyFromUI(uiCurrency))
      },
      renderUICurrencyFromJSON: function (code, jsonCurrency) {
        var currentCurrencySign;
        if (isNaN(jsonCurrency)) {
          jsonCurrency = 0
        }
        currentCurrencySign = currencySigns[code];
        jsonCurrency = '' + jsonCurrency;
        if (isZeroDecimal(code)) {
          return currentCurrencySign + jsonCurrency
        }
        while (jsonCurrency.length < 3) {
          jsonCurrency = '0' + jsonCurrency
        }
        return currentCurrencySign + jsonCurrency.substr(0, jsonCurrency.length - 2) + '.' + jsonCurrency.substr(-2)
      },
      renderJSONCurrencyFromUI: function (code, uiCurrency) {
        var currentCurrencySign, parts;
        currentCurrencySign = currencySigns[code];
        if (isZeroDecimal(code)) {
          return parseInt(('' + uiCurrency).replace(digitsOnlyRe, '').replace(currencySeparator, ''), 10)
        }
        parts = uiCurrency.split(currencySeparator);
        if (parts.length > 1) {
          parts[1] = parts[1].substr(0, 2);
          while (parts[1].length < 2) {
            parts[1] += '0'
          }
        } else {
          parts[1] = '00'
        }
        return parseInt(parseFloat(parts[0].replace(digitsOnlyRe, '')) * 100 + parseFloat(parts[1].replace(digitsOnlyRe, '')), 10)
      }
    }
  });
  // source: src/data/currencies.coffee
  rqzt.define('./data/currencies', function (module, exports, __dirname, __filename, process) {
    module.exports = {
      data: {
        'aud': '$',
        'cad': '$',
        'eur': '€',
        'gbp': '£',
        'hkd': '$',
        'jpy': '¥',
        'nzd': '$',
        'sgd': '$',
        'usd': '$',
        'ghc': '¢',
        'ars': '$',
        'bsd': '$',
        'bbd': '$',
        'bmd': '$',
        'bnd': '$',
        'kyd': '$',
        'clp': '$',
        'cop': '$',
        'xcd': '$',
        'svc': '$',
        'fjd': '$',
        'gyd': '$',
        'lrd': '$',
        'mxn': '$',
        'nad': '$',
        'sbd': '$',
        'srd': '$',
        'tvd': '$',
        'bob': '$b',
        'uyu': '$u',
        'egp': '£',
        'fkp': '£',
        'gip': '£',
        'ggp': '£',
        'imp': '£',
        'jep': '£',
        'lbp': '£',
        'shp': '£',
        'syp': '£',
        'cny': '¥',
        'afn': '؋',
        'thb': '฿',
        'khr': '៛',
        'crc': '₡',
        'trl': '₤',
        'ngn': '₦',
        'kpw': '₩',
        'krw': '₩',
        'ils': '₪',
        'vnd': '₫',
        'lak': '₭',
        'mnt': '₮',
        'cup': '₱',
        'php': '₱',
        'uah': '₴',
        'mur': '₨',
        'npr': '₨',
        'pkr': '₨',
        'scr': '₨',
        'lkr': '₨',
        'irr': '﷼',
        'omr': '﷼',
        'qar': '﷼',
        'sar': '﷼',
        'yer': '﷼',
        'pab': 'b/.',
        'vef': 'bs',
        'bzd': 'bz$',
        'nio': 'c$',
        'chf': 'chf',
        'huf': 'ft',
        'awg': 'ƒ',
        'ang': 'ƒ',
        'pyg': 'gs',
        'jmd': 'j$',
        'czk': 'kč',
        'bam': 'km',
        'hrk': 'kn',
        'dkk': 'kr',
        'eek': 'kr',
        'isk': 'kr',
        'nok': 'kr',
        'sek': 'kr',
        'hnl': 'l',
        'ron': 'lei',
        'all': 'lek',
        'lvl': 'ls',
        'ltl': 'lt',
        'mzn': 'mt',
        'twd': 'nt$',
        'bwp': 'p',
        'byr': 'p.',
        'gtq': 'q',
        'zar': 'r',
        'brl': 'r$',
        'dop': 'rd$',
        'myr': 'rm',
        'idr': 'rp',
        'sos': 's',
        'pen': 's/.',
        'ttd': 'tt$',
        'zwd': 'z$',
        'pln': 'zł',
        'mkd': 'ден',
        'rsd': 'Дин.',
        'bgn': 'лв',
        'kzt': 'лв',
        'kgs': 'лв',
        'uzs': 'лв',
        'azn': 'ман',
        'rub': 'руб',
        'inr': '',
        'try': '',
        '': ''
      }
    }
  });
  // source: src/utils/dates.coffee
  rqzt.define('./utils/dates', function (module, exports, __dirname, __filename, process) {
    var moment;
    moment = rqzt('moment/moment');
    module.exports = function (date, format) {
      return moment(date).format(format)
    }
  });
  // source: node_modules/moment/moment.js
  rqzt.define('moment/moment', function (module, exports, __dirname, __filename, process) {
    //! moment.js
    //! version : 2.17.1
    //! authors : Tim Wood, Iskren Chernev, Moment.js contributors
    //! license : MIT
    //! momentjs.com
    ;
    (function (global, factory) {
      typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.moment = factory()
    }(this, function () {
      'use strict';
      var hookCallback;
      function hooks() {
        return hookCallback.apply(null, arguments)
      }
      // This is done to register the method called with moment()
      // without creating circular dependencies.
      function setHookCallback(callback) {
        hookCallback = callback
      }
      function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]'
      }
      function isObject(input) {
        // IE8 will treat undefined and null as object if it wasn't for
        // input != null
        return input != null && Object.prototype.toString.call(input) === '[object Object]'
      }
      function isObjectEmpty(obj) {
        var k;
        for (k in obj) {
          // even if its not own property I'd still call it non-empty
          return false
        }
        return true
      }
      function isNumber(input) {
        return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]'
      }
      function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]'
      }
      function map(arr, fn) {
        var res = [], i;
        for (i = 0; i < arr.length; ++i) {
          res.push(fn(arr[i], i))
        }
        return res
      }
      function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b)
      }
      function extend(a, b) {
        for (var i in b) {
          if (hasOwnProp(b, i)) {
            a[i] = b[i]
          }
        }
        if (hasOwnProp(b, 'toString')) {
          a.toString = b.toString
        }
        if (hasOwnProp(b, 'valueOf')) {
          a.valueOf = b.valueOf
        }
        return a
      }
      function createUTC(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc()
      }
      function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
          empty: false,
          unusedTokens: [],
          unusedInput: [],
          overflow: -2,
          charsLeftOver: 0,
          nullInput: false,
          invalidMonth: null,
          invalidFormat: false,
          userInvalidated: false,
          iso: false,
          parsedDateParts: [],
          meridiem: null
        }
      }
      function getParsingFlags(m) {
        if (m._pf == null) {
          m._pf = defaultParsingFlags()
        }
        return m._pf
      }
      var some;
      if (Array.prototype.some) {
        some = Array.prototype.some
      } else {
        some = function (fun) {
          var t = Object(this);
          var len = t.length >>> 0;
          for (var i = 0; i < len; i++) {
            if (i in t && fun.call(this, t[i], i, t)) {
              return true
            }
          }
          return false
        }
      }
      var some$1 = some;
      function isValid(m) {
        if (m._isValid == null) {
          var flags = getParsingFlags(m);
          var parsedParts = some$1.call(flags.parsedDateParts, function (i) {
            return i != null
          });
          var isNowValid = !isNaN(m._d.getTime()) && flags.overflow < 0 && !flags.empty && !flags.invalidMonth && !flags.invalidWeekday && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
          if (m._strict) {
            isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === undefined
          }
          if (Object.isFrozen == null || !Object.isFrozen(m)) {
            m._isValid = isNowValid
          } else {
            return isNowValid
          }
        }
        return m._isValid
      }
      function createInvalid(flags) {
        var m = createUTC(NaN);
        if (flags != null) {
          extend(getParsingFlags(m), flags)
        } else {
          getParsingFlags(m).userInvalidated = true
        }
        return m
      }
      function isUndefined(input) {
        return input === void 0
      }
      // Plugins that add properties should also add the key here (null value),
      // so we can properly clone ourselves.
      var momentProperties = hooks.momentProperties = [];
      function copyConfig(to, from) {
        var i, prop, val;
        if (!isUndefined(from._isAMomentObject)) {
          to._isAMomentObject = from._isAMomentObject
        }
        if (!isUndefined(from._i)) {
          to._i = from._i
        }
        if (!isUndefined(from._f)) {
          to._f = from._f
        }
        if (!isUndefined(from._l)) {
          to._l = from._l
        }
        if (!isUndefined(from._strict)) {
          to._strict = from._strict
        }
        if (!isUndefined(from._tzm)) {
          to._tzm = from._tzm
        }
        if (!isUndefined(from._isUTC)) {
          to._isUTC = from._isUTC
        }
        if (!isUndefined(from._offset)) {
          to._offset = from._offset
        }
        if (!isUndefined(from._pf)) {
          to._pf = getParsingFlags(from)
        }
        if (!isUndefined(from._locale)) {
          to._locale = from._locale
        }
        if (momentProperties.length > 0) {
          for (i in momentProperties) {
            prop = momentProperties[i];
            val = from[prop];
            if (!isUndefined(val)) {
              to[prop] = val
            }
          }
        }
        return to
      }
      var updateInProgress = false;
      // Moment prototype object
      function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
          this._d = new Date(NaN)
        }
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
          updateInProgress = true;
          hooks.updateOffset(this);
          updateInProgress = false
        }
      }
      function isMoment(obj) {
        return obj instanceof Moment || obj != null && obj._isAMomentObject != null
      }
      function absFloor(number) {
        if (number < 0) {
          // -0 -> 0
          return Math.ceil(number) || 0
        } else {
          return Math.floor(number)
        }
      }
      function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion, value = 0;
        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
          value = absFloor(coercedNumber)
        }
        return value
      }
      // compare two arrays, return the number of differences
      function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i;
        for (i = 0; i < len; i++) {
          if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
            diffs++
          }
        }
        return diffs + lengthDiff
      }
      function warn(msg) {
        if (hooks.suppressDeprecationWarnings === false && typeof console !== 'undefined' && console.warn) {
          void 0
        }
      }
      function deprecate(msg, fn) {
        var firstTime = true;
        return extend(function () {
          if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(null, msg)
          }
          if (firstTime) {
            var args = [];
            var arg;
            for (var i = 0; i < arguments.length; i++) {
              arg = '';
              if (typeof arguments[i] === 'object') {
                arg += '\n[' + i + '] ';
                for (var key in arguments[0]) {
                  arg += key + ': ' + arguments[0][key] + ', '
                }
                arg = arg.slice(0, -2)  // Remove trailing comma and space
              } else {
                arg = arguments[i]
              }
              args.push(arg)
            }
            warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + new Error().stack);
            firstTime = false
          }
          return fn.apply(this, arguments)
        }, fn)
      }
      var deprecations = {};
      function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
          hooks.deprecationHandler(name, msg)
        }
        if (!deprecations[name]) {
          warn(msg);
          deprecations[name] = true
        }
      }
      hooks.suppressDeprecationWarnings = false;
      hooks.deprecationHandler = null;
      function isFunction(input) {
        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]'
      }
      function set(config) {
        var prop, i;
        for (i in config) {
          prop = config[i];
          if (isFunction(prop)) {
            this[i] = prop
          } else {
            this['_' + i] = prop
          }
        }
        this._config = config;
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _ordinalParseLenient.
        this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + /\d{1,2}/.source)
      }
      function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig), prop;
        for (prop in childConfig) {
          if (hasOwnProp(childConfig, prop)) {
            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
              res[prop] = {};
              extend(res[prop], parentConfig[prop]);
              extend(res[prop], childConfig[prop])
            } else if (childConfig[prop] != null) {
              res[prop] = childConfig[prop]
            } else {
              delete res[prop]
            }
          }
        }
        for (prop in parentConfig) {
          if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
            // make sure changes to properties don't modify parent config
            res[prop] = extend({}, res[prop])
          }
        }
        return res
      }
      function Locale(config) {
        if (config != null) {
          this.set(config)
        }
      }
      var keys;
      if (Object.keys) {
        keys = Object.keys
      } else {
        keys = function (obj) {
          var i, res = [];
          for (i in obj) {
            if (hasOwnProp(obj, i)) {
              res.push(i)
            }
          }
          return res
        }
      }
      var keys$1 = keys;
      var defaultCalendar = {
        sameDay: '[Today at] LT',
        nextDay: '[Tomorrow at] LT',
        nextWeek: 'dddd [at] LT',
        lastDay: '[Yesterday at] LT',
        lastWeek: '[Last] dddd [at] LT',
        sameElse: 'L'
      };
      function calendar(key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output
      }
      var defaultLongDateFormat = {
        LTS: 'h:mm:ss A',
        LT: 'h:mm A',
        L: 'MM/DD/YYYY',
        LL: 'MMMM D, YYYY',
        LLL: 'MMMM D, YYYY h:mm A',
        LLLL: 'dddd, MMMM D, YYYY h:mm A'
      };
      function longDateFormat(key) {
        var format = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
        if (format || !formatUpper) {
          return format
        }
        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
          return val.slice(1)
        });
        return this._longDateFormat[key]
      }
      var defaultInvalidDate = 'Invalid date';
      function invalidDate() {
        return this._invalidDate
      }
      var defaultOrdinal = '%d';
      var defaultOrdinalParse = /\d{1,2}/;
      function ordinal(number) {
        return this._ordinal.replace('%d', number)
      }
      var defaultRelativeTime = {
        future: 'in %s',
        past: '%s ago',
        s: 'a few seconds',
        m: 'a minute',
        mm: '%d minutes',
        h: 'an hour',
        hh: '%d hours',
        d: 'a day',
        dd: '%d days',
        M: 'a month',
        MM: '%d months',
        y: 'a year',
        yy: '%d years'
      };
      function relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number)
      }
      function pastFuture(diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output)
      }
      var aliases = {};
      function addUnitAlias(unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit
      }
      function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined
      }
      function normalizeObjectUnits(inputObject) {
        var normalizedInput = {}, normalizedProp, prop;
        for (prop in inputObject) {
          if (hasOwnProp(inputObject, prop)) {
            normalizedProp = normalizeUnits(prop);
            if (normalizedProp) {
              normalizedInput[normalizedProp] = inputObject[prop]
            }
          }
        }
        return normalizedInput
      }
      var priorities = {};
      function addUnitPriority(unit, priority) {
        priorities[unit] = priority
      }
      function getPrioritizedUnits(unitsObj) {
        var units = [];
        for (var u in unitsObj) {
          units.push({
            unit: u,
            priority: priorities[u]
          })
        }
        units.sort(function (a, b) {
          return a.priority - b.priority
        });
        return units
      }
      function makeGetSet(unit, keepTime) {
        return function (value) {
          if (value != null) {
            set$1(this, unit, value);
            hooks.updateOffset(this, keepTime);
            return this
          } else {
            return get(this, unit)
          }
        }
      }
      function get(mom, unit) {
        return mom.isValid() ? mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN
      }
      function set$1(mom, unit, value) {
        if (mom.isValid()) {
          mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value)
        }
      }
      // MOMENTS
      function stringGet(units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
          return this[units]()
        }
        return this
      }
      function stringSet(units, value) {
        if (typeof units === 'object') {
          units = normalizeObjectUnits(units);
          var prioritized = getPrioritizedUnits(units);
          for (var i = 0; i < prioritized.length; i++) {
            this[prioritized[i].unit](units[prioritized[i].unit])
          }
        } else {
          units = normalizeUnits(units);
          if (isFunction(this[units])) {
            return this[units](value)
          }
        }
        return this
      }
      function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number), zerosToFill = targetLength - absNumber.length, sign = number >= 0;
        return (sign ? forceSign ? '+' : '' : '-') + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber
      }
      var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;
      var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;
      var formatFunctions = {};
      var formatTokenFunctions = {};
      // token:    'M'
      // padded:   ['MM', 2]
      // ordinal:  'Mo'
      // callback: function () { this.month() + 1 }
      function addFormatToken(token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
          func = function () {
            return this[callback]()
          }
        }
        if (token) {
          formatTokenFunctions[token] = func
        }
        if (padded) {
          formatTokenFunctions[padded[0]] = function () {
            return zeroFill(func.apply(this, arguments), padded[1], padded[2])
          }
        }
        if (ordinal) {
          formatTokenFunctions[ordinal] = function () {
            return this.localeData().ordinal(func.apply(this, arguments), token)
          }
        }
      }
      function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
          return input.replace(/^\[|\]$/g, '')
        }
        return input.replace(/\\/g, '')
      }
      function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;
        for (i = 0, length = array.length; i < length; i++) {
          if (formatTokenFunctions[array[i]]) {
            array[i] = formatTokenFunctions[array[i]]
          } else {
            array[i] = removeFormattingTokens(array[i])
          }
        }
        return function (mom) {
          var output = '', i;
          for (i = 0; i < length; i++) {
            output += array[i] instanceof Function ? array[i].call(mom, format) : array[i]
          }
          return output
        }
      }
      // format date using native date object
      function formatMoment(m, format) {
        if (!m.isValid()) {
          return m.localeData().invalidDate()
        }
        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);
        return formatFunctions[format](m)
      }
      function expandFormat(format, locale) {
        var i = 5;
        function replaceLongDateFormatTokens(input) {
          return locale.longDateFormat(input) || input
        }
        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
          format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
          localFormattingTokens.lastIndex = 0;
          i -= 1
        }
        return format
      }
      var match1 = /\d/;
      //       0 - 9
      var match2 = /\d\d/;
      //      00 - 99
      var match3 = /\d{3}/;
      //     000 - 999
      var match4 = /\d{4}/;
      //    0000 - 9999
      var match6 = /[+-]?\d{6}/;
      // -999999 - 999999
      var match1to2 = /\d\d?/;
      //       0 - 99
      var match3to4 = /\d\d\d\d?/;
      //     999 - 9999
      var match5to6 = /\d\d\d\d\d\d?/;
      //   99999 - 999999
      var match1to3 = /\d{1,3}/;
      //       0 - 999
      var match1to4 = /\d{1,4}/;
      //       0 - 9999
      var match1to6 = /[+-]?\d{1,6}/;
      // -999999 - 999999
      var matchUnsigned = /\d+/;
      //       0 - inf
      var matchSigned = /[+-]?\d+/;
      //    -inf - inf
      var matchOffset = /Z|[+-]\d\d:?\d\d/gi;
      // +00:00 -00:00 +0000 -0000 or Z
      var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi;
      // +00 -00 +00:00 -00:00 +0000 -0000 or Z
      var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/;
      // 123456789 123456789.123
      // any word (or two) characters or numbers including two/three word month in arabic.
      // includes scottish gaelic two word and hyphenated months
      var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;
      var regexes = {};
      function addRegexToken(token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
          return isStrict && strictRegex ? strictRegex : regex
        }
      }
      function getParseRegexForToken(token, config) {
        if (!hasOwnProp(regexes, token)) {
          return new RegExp(unescapeFormat(token))
        }
        return regexes[token](config._strict, config._locale)
      }
      // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
      function unescapeFormat(s) {
        return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
          return p1 || p2 || p3 || p4
        }))
      }
      function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&')
      }
      var tokens = {};
      function addParseToken(token, callback) {
        var i, func = callback;
        if (typeof token === 'string') {
          token = [token]
        }
        if (isNumber(callback)) {
          func = function (input, array) {
            array[callback] = toInt(input)
          }
        }
        for (i = 0; i < token.length; i++) {
          tokens[token[i]] = func
        }
      }
      function addWeekParseToken(token, callback) {
        addParseToken(token, function (input, array, config, token) {
          config._w = config._w || {};
          callback(input, config._w, config, token)
        })
      }
      function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
          tokens[token](input, config._a, config, token)
        }
      }
      var YEAR = 0;
      var MONTH = 1;
      var DATE = 2;
      var HOUR = 3;
      var MINUTE = 4;
      var SECOND = 5;
      var MILLISECOND = 6;
      var WEEK = 7;
      var WEEKDAY = 8;
      var indexOf;
      if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf
      } else {
        indexOf = function (o) {
          // I know
          var i;
          for (i = 0; i < this.length; ++i) {
            if (this[i] === o) {
              return i
            }
          }
          return -1
        }
      }
      var indexOf$1 = indexOf;
      function daysInMonth(year, month) {
        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate()
      }
      // FORMATTING
      addFormatToken('M', [
        'MM',
        2
      ], 'Mo', function () {
        return this.month() + 1
      });
      addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format)
      });
      addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format)
      });
      // ALIASES
      addUnitAlias('month', 'M');
      // PRIORITY
      addUnitPriority('month', 8);
      // PARSING
      addRegexToken('M', match1to2);
      addRegexToken('MM', match1to2, match2);
      addRegexToken('MMM', function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict)
      });
      addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict)
      });
      addParseToken([
        'M',
        'MM'
      ], function (input, array) {
        array[MONTH] = toInt(input) - 1
      });
      addParseToken([
        'MMM',
        'MMMM'
      ], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
          array[MONTH] = month
        } else {
          getParsingFlags(config).invalidMonth = input
        }
      });
      // LOCALES
      var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
      var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
      function localeMonths(m, format) {
        if (!m) {
          return this._months
        }
        return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()]
      }
      var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
      function localeMonthsShort(m, format) {
        if (!m) {
          return this._monthsShort
        }
        return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()]
      }
      function handleStrictParse(monthName, format, strict) {
        var i, ii, mom, llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
          // this is not used
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
          for (i = 0; i < 12; ++i) {
            mom = createUTC([
              2000,
              i
            ]);
            this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
            this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase()
          }
        }
        if (strict) {
          if (format === 'MMM') {
            ii = indexOf$1.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null
          } else {
            ii = indexOf$1.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null
          }
        } else {
          if (format === 'MMM') {
            ii = indexOf$1.call(this._shortMonthsParse, llc);
            if (ii !== -1) {
              return ii
            }
            ii = indexOf$1.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null
          } else {
            ii = indexOf$1.call(this._longMonthsParse, llc);
            if (ii !== -1) {
              return ii
            }
            ii = indexOf$1.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null
          }
        }
      }
      function localeMonthsParse(monthName, format, strict) {
        var i, mom, regex;
        if (this._monthsParseExact) {
          return handleStrictParse.call(this, monthName, format, strict)
        }
        if (!this._monthsParse) {
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = []
        }
        // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse
        for (i = 0; i < 12; i++) {
          // make the regex if we don't have it already
          mom = createUTC([
            2000,
            i
          ]);
          if (strict && !this._longMonthsParse[i]) {
            this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
            this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i')
          }
          if (!strict && !this._monthsParse[i]) {
            regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
            this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i')
          }
          // test the regex
          if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
            return i
          } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
            return i
          } else if (!strict && this._monthsParse[i].test(monthName)) {
            return i
          }
        }
      }
      // MOMENTS
      function setMonth(mom, value) {
        var dayOfMonth;
        if (!mom.isValid()) {
          // No op
          return mom
        }
        if (typeof value === 'string') {
          if (/^\d+$/.test(value)) {
            value = toInt(value)
          } else {
            value = mom.localeData().monthsParse(value);
            // TODO: Another silent failure?
            if (!isNumber(value)) {
              return mom
            }
          }
        }
        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom
      }
      function getSetMonth(value) {
        if (value != null) {
          setMonth(this, value);
          hooks.updateOffset(this, true);
          return this
        } else {
          return get(this, 'Month')
        }
      }
      function getDaysInMonth() {
        return daysInMonth(this.year(), this.month())
      }
      var defaultMonthsShortRegex = matchWord;
      function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this)
          }
          if (isStrict) {
            return this._monthsShortStrictRegex
          } else {
            return this._monthsShortRegex
          }
        } else {
          if (!hasOwnProp(this, '_monthsShortRegex')) {
            this._monthsShortRegex = defaultMonthsShortRegex
          }
          return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex
        }
      }
      var defaultMonthsRegex = matchWord;
      function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this)
          }
          if (isStrict) {
            return this._monthsStrictRegex
          } else {
            return this._monthsRegex
          }
        } else {
          if (!hasOwnProp(this, '_monthsRegex')) {
            this._monthsRegex = defaultMonthsRegex
          }
          return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex
        }
      }
      function computeMonthsParse() {
        function cmpLenRev(a, b) {
          return b.length - a.length
        }
        var shortPieces = [], longPieces = [], mixedPieces = [], i, mom;
        for (i = 0; i < 12; i++) {
          // make the regex if we don't have it already
          mom = createUTC([
            2000,
            i
          ]);
          shortPieces.push(this.monthsShort(mom, ''));
          longPieces.push(this.months(mom, ''));
          mixedPieces.push(this.months(mom, ''));
          mixedPieces.push(this.monthsShort(mom, ''))
        }
        // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
          shortPieces[i] = regexEscape(shortPieces[i]);
          longPieces[i] = regexEscape(longPieces[i])
        }
        for (i = 0; i < 24; i++) {
          mixedPieces[i] = regexEscape(mixedPieces[i])
        }
        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i')
      }
      // FORMATTING
      addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? '' + y : '+' + y
      });
      addFormatToken(0, [
        'YY',
        2
      ], 0, function () {
        return this.year() % 100
      });
      addFormatToken(0, [
        'YYYY',
        4
      ], 0, 'year');
      addFormatToken(0, [
        'YYYYY',
        5
      ], 0, 'year');
      addFormatToken(0, [
        'YYYYYY',
        6,
        true
      ], 0, 'year');
      // ALIASES
      addUnitAlias('year', 'y');
      // PRIORITIES
      addUnitPriority('year', 1);
      // PARSING
      addRegexToken('Y', matchSigned);
      addRegexToken('YY', match1to2, match2);
      addRegexToken('YYYY', match1to4, match4);
      addRegexToken('YYYYY', match1to6, match6);
      addRegexToken('YYYYYY', match1to6, match6);
      addParseToken([
        'YYYYY',
        'YYYYYY'
      ], YEAR);
      addParseToken('YYYY', function (input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input)
      });
      addParseToken('YY', function (input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input)
      });
      addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10)
      });
      // HELPERS
      function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365
      }
      function isLeapYear(year) {
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0
      }
      // HOOKS
      hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000)
      };
      // MOMENTS
      var getSetYear = makeGetSet('FullYear', true);
      function getIsLeapYear() {
        return isLeapYear(this.year())
      }
      function createDate(y, m, d, h, M, s, ms) {
        //can't just apply() to create a date:
        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
        var date = new Date(y, m, d, h, M, s, ms);
        //the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
          date.setFullYear(y)
        }
        return date
      }
      function createUTCDate(y) {
        var date = new Date(Date.UTC.apply(null, arguments));
        //the Date.UTC function remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
          date.setUTCFullYear(y)
        }
        return date
      }
      // start-of-first-week - start-of-year
      function firstWeekOffset(year, dow, doy) {
        var
          // first-week day -- which january is always in the first week (4 for iso, 1 for other)
          fwd = 7 + dow - doy,
          // first-week day local weekday -- which local weekday is fwd
          fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
        return -fwdlw + fwd - 1
      }
      //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
      function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
        if (dayOfYear <= 0) {
          resYear = year - 1;
          resDayOfYear = daysInYear(resYear) + dayOfYear
        } else if (dayOfYear > daysInYear(year)) {
          resYear = year + 1;
          resDayOfYear = dayOfYear - daysInYear(year)
        } else {
          resYear = year;
          resDayOfYear = dayOfYear
        }
        return {
          year: resYear,
          dayOfYear: resDayOfYear
        }
      }
      function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
        if (week < 1) {
          resYear = mom.year() - 1;
          resWeek = week + weeksInYear(resYear, dow, doy)
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
          resWeek = week - weeksInYear(mom.year(), dow, doy);
          resYear = mom.year() + 1
        } else {
          resYear = mom.year();
          resWeek = week
        }
        return {
          week: resWeek,
          year: resYear
        }
      }
      function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7
      }
      // FORMATTING
      addFormatToken('w', [
        'ww',
        2
      ], 'wo', 'week');
      addFormatToken('W', [
        'WW',
        2
      ], 'Wo', 'isoWeek');
      // ALIASES
      addUnitAlias('week', 'w');
      addUnitAlias('isoWeek', 'W');
      // PRIORITIES
      addUnitPriority('week', 5);
      addUnitPriority('isoWeek', 5);
      // PARSING
      addRegexToken('w', match1to2);
      addRegexToken('ww', match1to2, match2);
      addRegexToken('W', match1to2);
      addRegexToken('WW', match1to2, match2);
      addWeekParseToken([
        'w',
        'ww',
        'W',
        'WW'
      ], function (input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input)
      });
      // HELPERS
      // LOCALES
      function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week
      }
      var defaultLocaleWeek = {
        dow: 0,
        // Sunday is the first day of the week.
        doy: 6  // The week that contains Jan 1st is the first week of the year.
      };
      function localeFirstDayOfWeek() {
        return this._week.dow
      }
      function localeFirstDayOfYear() {
        return this._week.doy
      }
      // MOMENTS
      function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd')
      }
      function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd')
      }
      // FORMATTING
      addFormatToken('d', 0, 'do', 'day');
      addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format)
      });
      addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format)
      });
      addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format)
      });
      addFormatToken('e', 0, 0, 'weekday');
      addFormatToken('E', 0, 0, 'isoWeekday');
      // ALIASES
      addUnitAlias('day', 'd');
      addUnitAlias('weekday', 'e');
      addUnitAlias('isoWeekday', 'E');
      // PRIORITY
      addUnitPriority('day', 11);
      addUnitPriority('weekday', 11);
      addUnitPriority('isoWeekday', 11);
      // PARSING
      addRegexToken('d', match1to2);
      addRegexToken('e', match1to2);
      addRegexToken('E', match1to2);
      addRegexToken('dd', function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict)
      });
      addRegexToken('ddd', function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict)
      });
      addRegexToken('dddd', function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict)
      });
      addWeekParseToken([
        'dd',
        'ddd',
        'dddd'
      ], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
          week.d = weekday
        } else {
          getParsingFlags(config).invalidWeekday = input
        }
      });
      addWeekParseToken([
        'd',
        'e',
        'E'
      ], function (input, week, config, token) {
        week[token] = toInt(input)
      });
      // HELPERS
      function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
          return input
        }
        if (!isNaN(input)) {
          return parseInt(input, 10)
        }
        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
          return input
        }
        return null
      }
      function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
          return locale.weekdaysParse(input) % 7 || 7
        }
        return isNaN(input) ? null : input
      }
      // LOCALES
      var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
      function localeWeekdays(m, format) {
        if (!m) {
          return this._weekdays
        }
        return isArray(this._weekdays) ? this._weekdays[m.day()] : this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()]
      }
      var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
      function localeWeekdaysShort(m) {
        return m ? this._weekdaysShort[m.day()] : this._weekdaysShort
      }
      var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
      function localeWeekdaysMin(m) {
        return m ? this._weekdaysMin[m.day()] : this._weekdaysMin
      }
      function handleStrictParse$1(weekdayName, format, strict) {
        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._minWeekdaysParse = [];
          for (i = 0; i < 7; ++i) {
            mom = createUTC([
              2000,
              1
            ]).day(i);
            this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
            this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase()
          }
        }
        if (strict) {
          if (format === 'dddd') {
            ii = indexOf$1.call(this._weekdaysParse, llc);
            return ii !== -1 ? ii : null
          } else if (format === 'ddd') {
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null
          } else {
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null
          }
        } else {
          if (format === 'dddd') {
            ii = indexOf$1.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii
            }
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
              return ii
            }
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null
          } else if (format === 'ddd') {
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
              return ii
            }
            ii = indexOf$1.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii
            }
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null
          } else {
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            if (ii !== -1) {
              return ii
            }
            ii = indexOf$1.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii
            }
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null
          }
        }
      }
      function localeWeekdaysParse(weekdayName, format, strict) {
        var i, mom, regex;
        if (this._weekdaysParseExact) {
          return handleStrictParse$1.call(this, weekdayName, format, strict)
        }
        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._minWeekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._fullWeekdaysParse = []
        }
        for (i = 0; i < 7; i++) {
          // make the regex if we don't have it already
          mom = createUTC([
            2000,
            1
          ]).day(i);
          if (strict && !this._fullWeekdaysParse[i]) {
            this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '.?') + '$', 'i');
            this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '.?') + '$', 'i');
            this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '.?') + '$', 'i')
          }
          if (!this._weekdaysParse[i]) {
            regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
            this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i')
          }
          // test the regex
          if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
            return i
          } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
            return i
          } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
            return i
          } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
            return i
          }
        }
      }
      // MOMENTS
      function getSetDayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
          input = parseWeekday(input, this.localeData());
          return this.add(input - day, 'd')
        } else {
          return day
        }
      }
      function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd')
      }
      function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN
        }
        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.
        if (input != null) {
          var weekday = parseIsoWeekday(input, this.localeData());
          return this.day(this.day() % 7 ? weekday : weekday - 7)
        } else {
          return this.day() || 7
        }
      }
      var defaultWeekdaysRegex = matchWord;
      function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this)
          }
          if (isStrict) {
            return this._weekdaysStrictRegex
          } else {
            return this._weekdaysRegex
          }
        } else {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
            this._weekdaysRegex = defaultWeekdaysRegex
          }
          return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex
        }
      }
      var defaultWeekdaysShortRegex = matchWord;
      function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this)
          }
          if (isStrict) {
            return this._weekdaysShortStrictRegex
          } else {
            return this._weekdaysShortRegex
          }
        } else {
          if (!hasOwnProp(this, '_weekdaysShortRegex')) {
            this._weekdaysShortRegex = defaultWeekdaysShortRegex
          }
          return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex
        }
      }
      var defaultWeekdaysMinRegex = matchWord;
      function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this)
          }
          if (isStrict) {
            return this._weekdaysMinStrictRegex
          } else {
            return this._weekdaysMinRegex
          }
        } else {
          if (!hasOwnProp(this, '_weekdaysMinRegex')) {
            this._weekdaysMinRegex = defaultWeekdaysMinRegex
          }
          return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex
        }
      }
      function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
          return b.length - a.length
        }
        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i, mom, minp, shortp, longp;
        for (i = 0; i < 7; i++) {
          // make the regex if we don't have it already
          mom = createUTC([
            2000,
            1
          ]).day(i);
          minp = this.weekdaysMin(mom, '');
          shortp = this.weekdaysShort(mom, '');
          longp = this.weekdays(mom, '');
          minPieces.push(minp);
          shortPieces.push(shortp);
          longPieces.push(longp);
          mixedPieces.push(minp);
          mixedPieces.push(shortp);
          mixedPieces.push(longp)
        }
        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 7; i++) {
          shortPieces[i] = regexEscape(shortPieces[i]);
          longPieces[i] = regexEscape(longPieces[i]);
          mixedPieces[i] = regexEscape(mixedPieces[i])
        }
        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;
        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i')
      }
      // FORMATTING
      function hFormat() {
        return this.hours() % 12 || 12
      }
      function kFormat() {
        return this.hours() || 24
      }
      addFormatToken('H', [
        'HH',
        2
      ], 0, 'hour');
      addFormatToken('h', [
        'hh',
        2
      ], 0, hFormat);
      addFormatToken('k', [
        'kk',
        2
      ], 0, kFormat);
      addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2)
      });
      addFormatToken('hmmss', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2)
      });
      addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2)
      });
      addFormatToken('Hmmss', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2)
      });
      function meridiem(token, lowercase) {
        addFormatToken(token, 0, 0, function () {
          return this.localeData().meridiem(this.hours(), this.minutes(), lowercase)
        })
      }
      meridiem('a', true);
      meridiem('A', false);
      // ALIASES
      addUnitAlias('hour', 'h');
      // PRIORITY
      addUnitPriority('hour', 13);
      // PARSING
      function matchMeridiem(isStrict, locale) {
        return locale._meridiemParse
      }
      addRegexToken('a', matchMeridiem);
      addRegexToken('A', matchMeridiem);
      addRegexToken('H', match1to2);
      addRegexToken('h', match1to2);
      addRegexToken('HH', match1to2, match2);
      addRegexToken('hh', match1to2, match2);
      addRegexToken('hmm', match3to4);
      addRegexToken('hmmss', match5to6);
      addRegexToken('Hmm', match3to4);
      addRegexToken('Hmmss', match5to6);
      addParseToken([
        'H',
        'HH'
      ], HOUR);
      addParseToken([
        'a',
        'A'
      ], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input
      });
      addParseToken([
        'h',
        'hh'
      ], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true
      });
      addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true
      });
      addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true
      });
      addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos))
      });
      addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2))
      });
      // LOCALES
      function localeIsPM(input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return (input + '').toLowerCase().charAt(0) === 'p'
      }
      var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
      function localeMeridiem(hours, minutes, isLower) {
        if (hours > 11) {
          return isLower ? 'pm' : 'PM'
        } else {
          return isLower ? 'am' : 'AM'
        }
      }
      // MOMENTS
      // Setting the hour should keep the time, because the user explicitly
      // specified which hour he wants. So trying to maintain the same hour (in
      // a new timezone) makes sense. Adding/subtracting hours does not follow
      // this rule.
      var getSetHour = makeGetSet('Hours', true);
      // months
      // week
      // weekdays
      // meridiem
      var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        ordinalParse: defaultOrdinalParse,
        relativeTime: defaultRelativeTime,
        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,
        week: defaultLocaleWeek,
        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,
        meridiemParse: defaultLocaleMeridiemParse
      };
      // internal storage for locale config files
      var locales = {};
      var localeFamilies = {};
      var globalLocale;
      function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key
      }
      // pick the locale from the array
      // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
      // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
      function chooseLocale(names) {
        var i = 0, j, next, locale, split;
        while (i < names.length) {
          split = normalizeLocale(names[i]).split('-');
          j = split.length;
          next = normalizeLocale(names[i + 1]);
          next = next ? next.split('-') : null;
          while (j > 0) {
            locale = loadLocale(split.slice(0, j).join('-'));
            if (locale) {
              return locale
            }
            if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
              //the next array item is better than a shallower substring of this one
              break
            }
            j--
          }
          i++
        }
        return null
      }
      function loadLocale(name) {
        var oldLocale = null;
        // TODO: Find a better way to register and load all the locales in Node
        if (!locales[name] && typeof module !== 'undefined' && module && module.exports) {
          try {
            oldLocale = globalLocale._abbr;
            require('./locale/' + name);
            // because defineLocale currently also sets the global locale, we
            // want to undo that for lazy loaded locales
            getSetGlobalLocale(oldLocale)
          } catch (e) {
          }
        }
        return locales[name]
      }
      // This function will load locale and then set the global locale.  If
      // no arguments are passed in, it will simply return the current global
      // locale key.
      function getSetGlobalLocale(key, values) {
        var data;
        if (key) {
          if (isUndefined(values)) {
            data = getLocale(key)
          } else {
            data = defineLocale(key, values)
          }
          if (data) {
            // moment.duration._locale = moment._locale = data;
            globalLocale = data
          }
        }
        return globalLocale._abbr
      }
      function defineLocale(name, config) {
        if (config !== null) {
          var parentConfig = baseConfig;
          config.abbr = name;
          if (locales[name] != null) {
            deprecateSimple('defineLocaleOverride', 'use moment.updateLocale(localeName, config) to change ' + 'an existing locale. moment.defineLocale(localeName, ' + 'config) should only be used for creating a new locale ' + 'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
            parentConfig = locales[name]._config
          } else if (config.parentLocale != null) {
            if (locales[config.parentLocale] != null) {
              parentConfig = locales[config.parentLocale]._config
            } else {
              if (!localeFamilies[config.parentLocale]) {
                localeFamilies[config.parentLocale] = []
              }
              localeFamilies[config.parentLocale].push({
                name: name,
                config: config
              });
              return null
            }
          }
          locales[name] = new Locale(mergeConfigs(parentConfig, config));
          if (localeFamilies[name]) {
            localeFamilies[name].forEach(function (x) {
              defineLocale(x.name, x.config)
            })
          }
          // backwards compat for now: also set the locale
          // make sure we set the locale AFTER all child locales have been
          // created, so we won't end up with the child locale set.
          getSetGlobalLocale(name);
          return locales[name]
        } else {
          // useful for testing
          delete locales[name];
          return null
        }
      }
      function updateLocale(name, config) {
        if (config != null) {
          var locale, parentConfig = baseConfig;
          // MERGE
          if (locales[name] != null) {
            parentConfig = locales[name]._config
          }
          config = mergeConfigs(parentConfig, config);
          locale = new Locale(config);
          locale.parentLocale = locales[name];
          locales[name] = locale;
          // backwards compat for now: also set the locale
          getSetGlobalLocale(name)
        } else {
          // pass null for config to unupdate, useful for tests
          if (locales[name] != null) {
            if (locales[name].parentLocale != null) {
              locales[name] = locales[name].parentLocale
            } else if (locales[name] != null) {
              delete locales[name]
            }
          }
        }
        return locales[name]
      }
      // returns locale data
      function getLocale(key) {
        var locale;
        if (key && key._locale && key._locale._abbr) {
          key = key._locale._abbr
        }
        if (!key) {
          return globalLocale
        }
        if (!isArray(key)) {
          //short-circuit everything else
          locale = loadLocale(key);
          if (locale) {
            return locale
          }
          key = [key]
        }
        return chooseLocale(key)
      }
      function listLocales() {
        return keys$1(locales)
      }
      function checkOverflow(m) {
        var overflow;
        var a = m._a;
        if (a && getParsingFlags(m).overflow === -2) {
          overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
          if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
            overflow = DATE
          }
          if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
            overflow = WEEK
          }
          if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
            overflow = WEEKDAY
          }
          getParsingFlags(m).overflow = overflow
        }
        return m
      }
      // iso 8601 regex
      // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
      var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
      var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
      var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;
      var isoDates = [
        [
          'YYYYYY-MM-DD',
          /[+-]\d{6}-\d\d-\d\d/
        ],
        [
          'YYYY-MM-DD',
          /\d{4}-\d\d-\d\d/
        ],
        [
          'GGGG-[W]WW-E',
          /\d{4}-W\d\d-\d/
        ],
        [
          'GGGG-[W]WW',
          /\d{4}-W\d\d/,
          false
        ],
        [
          'YYYY-DDD',
          /\d{4}-\d{3}/
        ],
        [
          'YYYY-MM',
          /\d{4}-\d\d/,
          false
        ],
        [
          'YYYYYYMMDD',
          /[+-]\d{10}/
        ],
        [
          'YYYYMMDD',
          /\d{8}/
        ],
        // YYYYMM is NOT allowed by the standard
        [
          'GGGG[W]WWE',
          /\d{4}W\d{3}/
        ],
        [
          'GGGG[W]WW',
          /\d{4}W\d{2}/,
          false
        ],
        [
          'YYYYDDD',
          /\d{7}/
        ]
      ];
      // iso time formats and regexes
      var isoTimes = [
        [
          'HH:mm:ss.SSSS',
          /\d\d:\d\d:\d\d\.\d+/
        ],
        [
          'HH:mm:ss,SSSS',
          /\d\d:\d\d:\d\d,\d+/
        ],
        [
          'HH:mm:ss',
          /\d\d:\d\d:\d\d/
        ],
        [
          'HH:mm',
          /\d\d:\d\d/
        ],
        [
          'HHmmss.SSSS',
          /\d\d\d\d\d\d\.\d+/
        ],
        [
          'HHmmss,SSSS',
          /\d\d\d\d\d\d,\d+/
        ],
        [
          'HHmmss',
          /\d\d\d\d\d\d/
        ],
        [
          'HHmm',
          /\d\d\d\d/
        ],
        [
          'HH',
          /\d\d/
        ]
      ];
      var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;
      // date from iso format
      function configFromISO(config) {
        var i, l, string = config._i, match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string), allowTime, dateFormat, timeFormat, tzFormat;
        if (match) {
          getParsingFlags(config).iso = true;
          for (i = 0, l = isoDates.length; i < l; i++) {
            if (isoDates[i][1].exec(match[1])) {
              dateFormat = isoDates[i][0];
              allowTime = isoDates[i][2] !== false;
              break
            }
          }
          if (dateFormat == null) {
            config._isValid = false;
            return
          }
          if (match[3]) {
            for (i = 0, l = isoTimes.length; i < l; i++) {
              if (isoTimes[i][1].exec(match[3])) {
                // match[2] should be 'T' or space
                timeFormat = (match[2] || ' ') + isoTimes[i][0];
                break
              }
            }
            if (timeFormat == null) {
              config._isValid = false;
              return
            }
          }
          if (!allowTime && timeFormat != null) {
            config._isValid = false;
            return
          }
          if (match[4]) {
            if (tzRegex.exec(match[4])) {
              tzFormat = 'Z'
            } else {
              config._isValid = false;
              return
            }
          }
          config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
          configFromStringAndFormat(config)
        } else {
          config._isValid = false
        }
      }
      // date from iso format or fallback
      function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);
        if (matched !== null) {
          config._d = new Date(+matched[1]);
          return
        }
        configFromISO(config);
        if (config._isValid === false) {
          delete config._isValid;
          hooks.createFromInputFallback(config)
        }
      }
      hooks.createFromInputFallback = deprecate('value provided is not in a recognized ISO format. moment construction falls back to js Date(), ' + 'which is not reliable across all browsers and versions. Non ISO date formats are ' + 'discouraged and will be removed in an upcoming major release. Please refer to ' + 'http://momentjs.com/guides/#/warnings/js-date/ for more info.', function (config) {
        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''))
      });
      // Pick the first defined of two or three arguments.
      function defaults(a, b, c) {
        if (a != null) {
          return a
        }
        if (b != null) {
          return b
        }
        return c
      }
      function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
          return [
            nowValue.getUTCFullYear(),
            nowValue.getUTCMonth(),
            nowValue.getUTCDate()
          ]
        }
        return [
          nowValue.getFullYear(),
          nowValue.getMonth(),
          nowValue.getDate()
        ]
      }
      // convert an array to a date.
      // the array should mirror the parameters below
      // note: all values past the year are optional and will default to the lowest possible value.
      // [year, month, day , hour, minute, second, millisecond]
      function configFromArray(config) {
        var i, date, input = [], currentDate, yearToUse;
        if (config._d) {
          return
        }
        currentDate = currentDateArray(config);
        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
          dayOfYearFromWeekInfo(config)
        }
        //if the day of the year is set, figure out what it is
        if (config._dayOfYear) {
          yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
          if (config._dayOfYear > daysInYear(yearToUse)) {
            getParsingFlags(config)._overflowDayOfYear = true
          }
          date = createUTCDate(yearToUse, 0, config._dayOfYear);
          config._a[MONTH] = date.getUTCMonth();
          config._a[DATE] = date.getUTCDate()
        }
        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
          config._a[i] = input[i] = currentDate[i]
        }
        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
          config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i]
        }
        // Check for 24:00:00.000
        if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
          config._nextDay = true;
          config._a[HOUR] = 0
        }
        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm)
        }
        if (config._nextDay) {
          config._a[HOUR] = 24
        }
      }
      function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;
        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
          dow = 1;
          doy = 4;
          // TODO: We need to take the current isoWeekYear, but that depends on
          // how we interpret now (local, utc, fixed offset). So create
          // a now version of current config (take local/utc/offset flags, and
          // create now).
          weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
          week = defaults(w.W, 1);
          weekday = defaults(w.E, 1);
          if (weekday < 1 || weekday > 7) {
            weekdayOverflow = true
          }
        } else {
          dow = config._locale._week.dow;
          doy = config._locale._week.doy;
          var curWeek = weekOfYear(createLocal(), dow, doy);
          weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
          // Default to current week.
          week = defaults(w.w, curWeek.week);
          if (w.d != null) {
            // weekday -- low day numbers are considered next week
            weekday = w.d;
            if (weekday < 0 || weekday > 6) {
              weekdayOverflow = true
            }
          } else if (w.e != null) {
            // local weekday -- counting starts from begining of week
            weekday = w.e + dow;
            if (w.e < 0 || w.e > 6) {
              weekdayOverflow = true
            }
          } else {
            // default to begining of week
            weekday = dow
          }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
          getParsingFlags(config)._overflowWeeks = true
        } else if (weekdayOverflow != null) {
          getParsingFlags(config)._overflowWeekday = true
        } else {
          temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
          config._a[YEAR] = temp.year;
          config._dayOfYear = temp.dayOfYear
        }
      }
      // constant that refers to the ISO standard
      hooks.ISO_8601 = function () {
      };
      // date from string and format string
      function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === hooks.ISO_8601) {
          configFromISO(config);
          return
        }
        config._a = [];
        getParsingFlags(config).empty = true;
        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i, i, parsedInput, tokens, token, skipped, stringLength = string.length, totalParsedInputLength = 0;
        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];
        for (i = 0; i < tokens.length; i++) {
          token = tokens[i];
          parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
          // console.log('token', token, 'parsedInput', parsedInput,
          //         'regex', getParseRegexForToken(token, config));
          if (parsedInput) {
            skipped = string.substr(0, string.indexOf(parsedInput));
            if (skipped.length > 0) {
              getParsingFlags(config).unusedInput.push(skipped)
            }
            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
            totalParsedInputLength += parsedInput.length
          }
          // don't parse if it's not a known token
          if (formatTokenFunctions[token]) {
            if (parsedInput) {
              getParsingFlags(config).empty = false
            } else {
              getParsingFlags(config).unusedTokens.push(token)
            }
            addTimeToArrayFromToken(token, parsedInput, config)
          } else if (config._strict && !parsedInput) {
            getParsingFlags(config).unusedTokens.push(token)
          }
        }
        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
          getParsingFlags(config).unusedInput.push(string)
        }
        // clear _12h flag if hour is <= 12
        if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
          getParsingFlags(config).bigHour = undefined
        }
        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);
        configFromArray(config);
        checkOverflow(config)
      }
      function meridiemFixWrap(locale, hour, meridiem) {
        var isPm;
        if (meridiem == null) {
          // nothing to do
          return hour
        }
        if (locale.meridiemHour != null) {
          return locale.meridiemHour(hour, meridiem)
        } else if (locale.isPM != null) {
          // Fallback
          isPm = locale.isPM(meridiem);
          if (isPm && hour < 12) {
            hour += 12
          }
          if (!isPm && hour === 12) {
            hour = 0
          }
          return hour
        } else {
          // this is not supposed to happen
          return hour
        }
      }
      // date from string and array of format strings
      function configFromStringAndArray(config) {
        var tempConfig, bestMoment, scoreToBeat, i, currentScore;
        if (config._f.length === 0) {
          getParsingFlags(config).invalidFormat = true;
          config._d = new Date(NaN);
          return
        }
        for (i = 0; i < config._f.length; i++) {
          currentScore = 0;
          tempConfig = copyConfig({}, config);
          if (config._useUTC != null) {
            tempConfig._useUTC = config._useUTC
          }
          tempConfig._f = config._f[i];
          configFromStringAndFormat(tempConfig);
          if (!isValid(tempConfig)) {
            continue
          }
          // if there is any input that was not parsed add a penalty for that format
          currentScore += getParsingFlags(tempConfig).charsLeftOver;
          //or tokens
          currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
          getParsingFlags(tempConfig).score = currentScore;
          if (scoreToBeat == null || currentScore < scoreToBeat) {
            scoreToBeat = currentScore;
            bestMoment = tempConfig
          }
        }
        extend(config, bestMoment || tempConfig)
      }
      function configFromObject(config) {
        if (config._d) {
          return
        }
        var i = normalizeObjectUnits(config._i);
        config._a = map([
          i.year,
          i.month,
          i.day || i.date,
          i.hour,
          i.minute,
          i.second,
          i.millisecond
        ], function (obj) {
          return obj && parseInt(obj, 10)
        });
        configFromArray(config)
      }
      function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
          // Adding is smart enough around DST
          res.add(1, 'd');
          res._nextDay = undefined
        }
        return res
      }
      function prepareConfig(config) {
        var input = config._i, format = config._f;
        config._locale = config._locale || getLocale(config._l);
        if (input === null || format === undefined && input === '') {
          return createInvalid({ nullInput: true })
        }
        if (typeof input === 'string') {
          config._i = input = config._locale.preparse(input)
        }
        if (isMoment(input)) {
          return new Moment(checkOverflow(input))
        } else if (isDate(input)) {
          config._d = input
        } else if (isArray(format)) {
          configFromStringAndArray(config)
        } else if (format) {
          configFromStringAndFormat(config)
        } else {
          configFromInput(config)
        }
        if (!isValid(config)) {
          config._d = null
        }
        return config
      }
      function configFromInput(config) {
        var input = config._i;
        if (input === undefined) {
          config._d = new Date(hooks.now())
        } else if (isDate(input)) {
          config._d = new Date(input.valueOf())
        } else if (typeof input === 'string') {
          configFromString(config)
        } else if (isArray(input)) {
          config._a = map(input.slice(0), function (obj) {
            return parseInt(obj, 10)
          });
          configFromArray(config)
        } else if (typeof input === 'object') {
          configFromObject(config)
        } else if (isNumber(input)) {
          // from milliseconds
          config._d = new Date(input)
        } else {
          hooks.createFromInputFallback(config)
        }
      }
      function createLocalOrUTC(input, format, locale, strict, isUTC) {
        var c = {};
        if (locale === true || locale === false) {
          strict = locale;
          locale = undefined
        }
        if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
          input = undefined
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;
        return createFromConfig(c)
      }
      function createLocal(input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false)
      }
      var prototypeMin = deprecate('moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
          return other < this ? this : other
        } else {
          return createInvalid()
        }
      });
      var prototypeMax = deprecate('moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/', function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
          return other > this ? this : other
        } else {
          return createInvalid()
        }
      });
      // Pick a moment m from moments so that m[fn](other) is true for all
      // other. This relies on the function fn to be transitive.
      //
      // moments should either be an array of moment objects or an array, whose
      // first element is an array of moment objects.
      function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
          moments = moments[0]
        }
        if (!moments.length) {
          return createLocal()
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
          if (!moments[i].isValid() || moments[i][fn](res)) {
            res = moments[i]
          }
        }
        return res
      }
      // TODO: Use [].sort instead?
      function min() {
        var args = [].slice.call(arguments, 0);
        return pickBy('isBefore', args)
      }
      function max() {
        var args = [].slice.call(arguments, 0);
        return pickBy('isAfter', args)
      }
      var now = function () {
        return Date.now ? Date.now() : +new Date
      };
      function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration), years = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months = normalizedInput.month || 0, weeks = normalizedInput.week || 0, days = normalizedInput.day || 0, hours = normalizedInput.hour || 0, minutes = normalizedInput.minute || 0, seconds = normalizedInput.second || 0, milliseconds = normalizedInput.millisecond || 0;
        // representation for dateAddRemove
        this._milliseconds = +milliseconds + seconds * 1000 + // 1000
        minutes * 60000 + // 1000 * 60
        hours * 1000 * 60 * 60;
        //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days + weeks * 7;
        // It is impossible translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months + quarters * 3 + years * 12;
        this._data = {};
        this._locale = getLocale();
        this._bubble()
      }
      function isDuration(obj) {
        return obj instanceof Duration
      }
      function absRound(number) {
        if (number < 0) {
          return Math.round(-1 * number) * -1
        } else {
          return Math.round(number)
        }
      }
      // FORMATTING
      function offset(token, separator) {
        addFormatToken(token, 0, 0, function () {
          var offset = this.utcOffset();
          var sign = '+';
          if (offset < 0) {
            offset = -offset;
            sign = '-'
          }
          return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~offset % 60, 2)
        })
      }
      offset('Z', ':');
      offset('ZZ', '');
      // PARSING
      addRegexToken('Z', matchShortOffset);
      addRegexToken('ZZ', matchShortOffset);
      addParseToken([
        'Z',
        'ZZ'
      ], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input)
      });
      // HELPERS
      // timezone chunker
      // '+10:00' > ['10',  '00']
      // '-1530'  > ['-15', '30']
      var chunkOffset = /([\+\-]|\d\d)/gi;
      function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher);
        if (matches === null) {
          return null
        }
        var chunk = matches[matches.length - 1] || [];
        var parts = (chunk + '').match(chunkOffset) || [
          '-',
          0,
          0
        ];
        var minutes = +(parts[1] * 60) + toInt(parts[2]);
        return minutes === 0 ? 0 : parts[0] === '+' ? minutes : -minutes
      }
      // Return a moment from input, that is local/utc/zone equivalent to model.
      function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
          res = model.clone();
          diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
          // Use low-level api, because this fn is low-level api.
          res._d.setTime(res._d.valueOf() + diff);
          hooks.updateOffset(res, false);
          return res
        } else {
          return createLocal(input).local()
        }
      }
      function getDateOffset(m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15
      }
      // HOOKS
      // This function will be called whenever a moment is mutated.
      // It is intended to keep the offset in sync with the timezone.
      hooks.updateOffset = function () {
      };
      // MOMENTS
      // keepLocalTime = true means only change the timezone, without
      // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
      // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
      // +0200, so we adjust the time as needed, to be valid.
      //
      // Keeping the time actually adds/subtracts (one hour)
      // from the actual represented time. That is why we call updateOffset
      // a second time. In case it wants us to change the offset again
      // _changeInProgress == true case, then we have to adjust, because
      // there is no such time in the given timezone.
      function getSetOffset(input, keepLocalTime) {
        var offset = this._offset || 0, localAdjust;
        if (!this.isValid()) {
          return input != null ? this : NaN
        }
        if (input != null) {
          if (typeof input === 'string') {
            input = offsetFromString(matchShortOffset, input);
            if (input === null) {
              return this
            }
          } else if (Math.abs(input) < 16) {
            input = input * 60
          }
          if (!this._isUTC && keepLocalTime) {
            localAdjust = getDateOffset(this)
          }
          this._offset = input;
          this._isUTC = true;
          if (localAdjust != null) {
            this.add(localAdjust, 'm')
          }
          if (offset !== input) {
            if (!keepLocalTime || this._changeInProgress) {
              addSubtract(this, createDuration(input - offset, 'm'), 1, false)
            } else if (!this._changeInProgress) {
              this._changeInProgress = true;
              hooks.updateOffset(this, true);
              this._changeInProgress = null
            }
          }
          return this
        } else {
          return this._isUTC ? offset : getDateOffset(this)
        }
      }
      function getSetZone(input, keepLocalTime) {
        if (input != null) {
          if (typeof input !== 'string') {
            input = -input
          }
          this.utcOffset(input, keepLocalTime);
          return this
        } else {
          return -this.utcOffset()
        }
      }
      function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime)
      }
      function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
          this.utcOffset(0, keepLocalTime);
          this._isUTC = false;
          if (keepLocalTime) {
            this.subtract(getDateOffset(this), 'm')
          }
        }
        return this
      }
      function setOffsetToParsedOffset() {
        if (this._tzm != null) {
          this.utcOffset(this._tzm)
        } else if (typeof this._i === 'string') {
          var tZone = offsetFromString(matchOffset, this._i);
          if (tZone != null) {
            this.utcOffset(tZone)
          } else {
            this.utcOffset(0, true)
          }
        }
        return this
      }
      function hasAlignedHourOffset(input) {
        if (!this.isValid()) {
          return false
        }
        input = input ? createLocal(input).utcOffset() : 0;
        return (this.utcOffset() - input) % 60 === 0
      }
      function isDaylightSavingTime() {
        return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset()
      }
      function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) {
          return this._isDSTShifted
        }
        var c = {};
        copyConfig(c, this);
        c = prepareConfig(c);
        if (c._a) {
          var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
          this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0
        } else {
          this._isDSTShifted = false
        }
        return this._isDSTShifted
      }
      function isLocal() {
        return this.isValid() ? !this._isUTC : false
      }
      function isUtcOffset() {
        return this.isValid() ? this._isUTC : false
      }
      function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false
      }
      // ASP.NET json date format regex
      var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;
      // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
      // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
      // and further modified to allow for strings containing both week and day
      var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;
      function createDuration(input, key) {
        var duration = input,
          // matching against regexp is expensive, do it on demand
          match = null, sign, ret, diffRes;
        if (isDuration(input)) {
          duration = {
            ms: input._milliseconds,
            d: input._days,
            M: input._months
          }
        } else if (isNumber(input)) {
          duration = {};
          if (key) {
            duration[key] = input
          } else {
            duration.milliseconds = input
          }
        } else if (!!(match = aspNetRegex.exec(input))) {
          sign = match[1] === '-' ? -1 : 1;
          duration = {
            y: 0,
            d: toInt(match[DATE]) * sign,
            h: toInt(match[HOUR]) * sign,
            m: toInt(match[MINUTE]) * sign,
            s: toInt(match[SECOND]) * sign,
            ms: toInt(absRound(match[MILLISECOND] * 1000)) * sign  // the millisecond decimal point is included in the match
          }
        } else if (!!(match = isoRegex.exec(input))) {
          sign = match[1] === '-' ? -1 : 1;
          duration = {
            y: parseIso(match[2], sign),
            M: parseIso(match[3], sign),
            w: parseIso(match[4], sign),
            d: parseIso(match[5], sign),
            h: parseIso(match[6], sign),
            m: parseIso(match[7], sign),
            s: parseIso(match[8], sign)
          }
        } else if (duration == null) {
          // checks for null or undefined
          duration = {}
        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
          diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));
          duration = {};
          duration.ms = diffRes.milliseconds;
          duration.M = diffRes.months
        }
        ret = new Duration(duration);
        if (isDuration(input) && hasOwnProp(input, '_locale')) {
          ret._locale = input._locale
        }
        return ret
      }
      createDuration.fn = Duration.prototype;
      function parseIso(inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign
      }
      function positiveMomentsDifference(base, other) {
        var res = {
          milliseconds: 0,
          months: 0
        };
        res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
          --res.months
        }
        res.milliseconds = +other - +base.clone().add(res.months, 'M');
        return res
      }
      function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
          return {
            milliseconds: 0,
            months: 0
          }
        }
        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
          res = positiveMomentsDifference(base, other)
        } else {
          res = positiveMomentsDifference(other, base);
          res.milliseconds = -res.milliseconds;
          res.months = -res.months
        }
        return res
      }
      // TODO: remove 'name' arg after deprecation is removed
      function createAdder(direction, name) {
        return function (val, period) {
          var dur, tmp;
          //invert the arguments, but complain about it
          if (period !== null && !isNaN(+period)) {
            deprecateSimple(name, 'moment().' + name + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' + 'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
            tmp = val;
            val = period;
            period = tmp
          }
          val = typeof val === 'string' ? +val : val;
          dur = createDuration(val, period);
          addSubtract(this, dur, direction);
          return this
        }
      }
      function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds, days = absRound(duration._days), months = absRound(duration._months);
        if (!mom.isValid()) {
          // No op
          return
        }
        updateOffset = updateOffset == null ? true : updateOffset;
        if (milliseconds) {
          mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding)
        }
        if (days) {
          set$1(mom, 'Date', get(mom, 'Date') + days * isAdding)
        }
        if (months) {
          setMonth(mom, get(mom, 'Month') + months * isAdding)
        }
        if (updateOffset) {
          hooks.updateOffset(mom, days || months)
        }
      }
      var add = createAdder(1, 'add');
      var subtract = createAdder(-1, 'subtract');
      function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6 ? 'sameElse' : diff < -1 ? 'lastWeek' : diff < 0 ? 'lastDay' : diff < 1 ? 'sameDay' : diff < 2 ? 'nextDay' : diff < 7 ? 'nextWeek' : 'sameElse'
      }
      function calendar$1(time, formats) {
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || createLocal(), sod = cloneWithOffset(now, this).startOf('day'), format = hooks.calendarFormat(this, sod) || 'sameElse';
        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);
        return this.format(output || this.localeData().calendar(format, this, createLocal(now)))
      }
      function clone() {
        return new Moment(this)
      }
      function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
          return false
        }
        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
        if (units === 'millisecond') {
          return this.valueOf() > localInput.valueOf()
        } else {
          return localInput.valueOf() < this.clone().startOf(units).valueOf()
        }
      }
      function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
          return false
        }
        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
        if (units === 'millisecond') {
          return this.valueOf() < localInput.valueOf()
        } else {
          return this.clone().endOf(units).valueOf() < localInput.valueOf()
        }
      }
      function isBetween(from, to, units, inclusivity) {
        inclusivity = inclusivity || '()';
        return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) && (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units))
      }
      function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input), inputMs;
        if (!(this.isValid() && localInput.isValid())) {
          return false
        }
        units = normalizeUnits(units || 'millisecond');
        if (units === 'millisecond') {
          return this.valueOf() === localInput.valueOf()
        } else {
          inputMs = localInput.valueOf();
          return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf()
        }
      }
      function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units)
      }
      function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units)
      }
      function diff(input, units, asFloat) {
        var that, zoneDelta, delta, output;
        if (!this.isValid()) {
          return NaN
        }
        that = cloneWithOffset(input, this);
        if (!that.isValid()) {
          return NaN
        }
        zoneDelta = (that.utcOffset() - this.utcOffset()) * 60000;
        units = normalizeUnits(units);
        if (units === 'year' || units === 'month' || units === 'quarter') {
          output = monthDiff(this, that);
          if (units === 'quarter') {
            output = output / 3
          } else if (units === 'year') {
            output = output / 12
          }
        } else {
          delta = this - that;
          output = units === 'second' ? delta / 1000 : // 1000
          units === 'minute' ? delta / 60000 : // 1000 * 60
          units === 'hour' ? delta / 3600000 : // 1000 * 60 * 60
          units === 'day' ? (delta - zoneDelta) / 86400000 : // 1000 * 60 * 60 * 24, negate dst
          units === 'week' ? (delta - zoneDelta) / 604800000 : // 1000 * 60 * 60 * 24 * 7, negate dst
          delta
        }
        return asFloat ? output : absFloor(output)
      }
      function monthDiff(a, b) {
        // difference in months
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()),
          // b is in (anchor - 1 month, anchor + 1 month)
          anchor = a.clone().add(wholeMonthDiff, 'months'), anchor2, adjust;
        if (b - anchor < 0) {
          anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
          // linear across the month
          adjust = (b - anchor) / (anchor - anchor2)
        } else {
          anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
          // linear across the month
          adjust = (b - anchor) / (anchor2 - anchor)
        }
        //check for negative zero, return zero if negative zero
        return -(wholeMonthDiff + adjust) || 0
      }
      hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
      hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';
      function toString() {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ')
      }
      function toISOString() {
        var m = this.clone().utc();
        if (0 < m.year() && m.year() <= 9999) {
          if (isFunction(Date.prototype.toISOString)) {
            // native implementation is ~50x faster, use it when we can
            return this.toDate().toISOString()
          } else {
            return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]')
          }
        } else {
          return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]')
        }
      }
      /**
 * Return a human readable representation of a moment that can
 * also be evaluated to get a new moment which is the same
 *
 * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
 */
      function inspect() {
        if (!this.isValid()) {
          return 'moment.invalid(/* ' + this._i + ' */)'
        }
        var func = 'moment';
        var zone = '';
        if (!this.isLocal()) {
          func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
          zone = 'Z'
        }
        var prefix = '[' + func + '("]';
        var year = 0 < this.year() && this.year() <= 9999 ? 'YYYY' : 'YYYYYY';
        var datetime = '-MM-DD[T]HH:mm:ss.SSS';
        var suffix = zone + '[")]';
        return this.format(prefix + year + datetime + suffix)
      }
      function format(inputString) {
        if (!inputString) {
          inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output)
      }
      function from(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
          return createDuration({
            to: this,
            from: time
          }).locale(this.locale()).humanize(!withoutSuffix)
        } else {
          return this.localeData().invalidDate()
        }
      }
      function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix)
      }
      function to(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
          return createDuration({
            from: this,
            to: time
          }).locale(this.locale()).humanize(!withoutSuffix)
        } else {
          return this.localeData().invalidDate()
        }
      }
      function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix)
      }
      // If passed a locale key, it will set the locale for this
      // instance.  Otherwise, it will return the locale configuration
      // variables for this instance.
      function locale(key) {
        var newLocaleData;
        if (key === undefined) {
          return this._locale._abbr
        } else {
          newLocaleData = getLocale(key);
          if (newLocaleData != null) {
            this._locale = newLocaleData
          }
          return this
        }
      }
      var lang = deprecate('moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.', function (key) {
        if (key === undefined) {
          return this.localeData()
        } else {
          return this.locale(key)
        }
      });
      function localeData() {
        return this._locale
      }
      function startOf(units) {
        units = normalizeUnits(units);
        // the following switch intentionally omits break keywords
        // to utilize falling through the cases.
        switch (units) {
        case 'year':
          this.month(0);
        /* falls through */
        case 'quarter':
        case 'month':
          this.date(1);
        /* falls through */
        case 'week':
        case 'isoWeek':
        case 'day':
        case 'date':
          this.hours(0);
        /* falls through */
        case 'hour':
          this.minutes(0);
        /* falls through */
        case 'minute':
          this.seconds(0);
        /* falls through */
        case 'second':
          this.milliseconds(0)
        }
        // weeks are a special case
        if (units === 'week') {
          this.weekday(0)
        }
        if (units === 'isoWeek') {
          this.isoWeekday(1)
        }
        // quarters are also special
        if (units === 'quarter') {
          this.month(Math.floor(this.month() / 3) * 3)
        }
        return this
      }
      function endOf(units) {
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond') {
          return this
        }
        // 'date' is an alias for 'day', so it should be considered as such.
        if (units === 'date') {
          units = 'day'
        }
        return this.startOf(units).add(1, units === 'isoWeek' ? 'week' : units).subtract(1, 'ms')
      }
      function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 60000
      }
      function unix() {
        return Math.floor(this.valueOf() / 1000)
      }
      function toDate() {
        return new Date(this.valueOf())
      }
      function toArray() {
        var m = this;
        return [
          m.year(),
          m.month(),
          m.date(),
          m.hour(),
          m.minute(),
          m.second(),
          m.millisecond()
        ]
      }
      function toObject() {
        var m = this;
        return {
          years: m.year(),
          months: m.month(),
          date: m.date(),
          hours: m.hours(),
          minutes: m.minutes(),
          seconds: m.seconds(),
          milliseconds: m.milliseconds()
        }
      }
      function toJSON() {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null
      }
      function isValid$1() {
        return isValid(this)
      }
      function parsingFlags() {
        return extend({}, getParsingFlags(this))
      }
      function invalidAt() {
        return getParsingFlags(this).overflow
      }
      function creationData() {
        return {
          input: this._i,
          format: this._f,
          locale: this._locale,
          isUTC: this._isUTC,
          strict: this._strict
        }
      }
      // FORMATTING
      addFormatToken(0, [
        'gg',
        2
      ], 0, function () {
        return this.weekYear() % 100
      });
      addFormatToken(0, [
        'GG',
        2
      ], 0, function () {
        return this.isoWeekYear() % 100
      });
      function addWeekYearFormatToken(token, getter) {
        addFormatToken(0, [
          token,
          token.length
        ], 0, getter)
      }
      addWeekYearFormatToken('gggg', 'weekYear');
      addWeekYearFormatToken('ggggg', 'weekYear');
      addWeekYearFormatToken('GGGG', 'isoWeekYear');
      addWeekYearFormatToken('GGGGG', 'isoWeekYear');
      // ALIASES
      addUnitAlias('weekYear', 'gg');
      addUnitAlias('isoWeekYear', 'GG');
      // PRIORITY
      addUnitPriority('weekYear', 1);
      addUnitPriority('isoWeekYear', 1);
      // PARSING
      addRegexToken('G', matchSigned);
      addRegexToken('g', matchSigned);
      addRegexToken('GG', match1to2, match2);
      addRegexToken('gg', match1to2, match2);
      addRegexToken('GGGG', match1to4, match4);
      addRegexToken('gggg', match1to4, match4);
      addRegexToken('GGGGG', match1to6, match6);
      addRegexToken('ggggg', match1to6, match6);
      addWeekParseToken([
        'gggg',
        'ggggg',
        'GGGG',
        'GGGGG'
      ], function (input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input)
      });
      addWeekParseToken([
        'gg',
        'GG'
      ], function (input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input)
      });
      // MOMENTS
      function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy)
      }
      function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4)
      }
      function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4)
      }
      function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy)
      }
      function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
          return weekOfYear(this, dow, doy).year
        } else {
          weeksTarget = weeksInYear(input, dow, doy);
          if (week > weeksTarget) {
            week = weeksTarget
          }
          return setWeekAll.call(this, input, week, weekday, dow, doy)
        }
      }
      function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this
      }
      // FORMATTING
      addFormatToken('Q', 0, 'Qo', 'quarter');
      // ALIASES
      addUnitAlias('quarter', 'Q');
      // PRIORITY
      addUnitPriority('quarter', 7);
      // PARSING
      addRegexToken('Q', match1);
      addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3
      });
      // MOMENTS
      function getSetQuarter(input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3)
      }
      // FORMATTING
      addFormatToken('D', [
        'DD',
        2
      ], 'Do', 'date');
      // ALIASES
      addUnitAlias('date', 'D');
      // PRIOROITY
      addUnitPriority('date', 9);
      // PARSING
      addRegexToken('D', match1to2);
      addRegexToken('DD', match1to2, match2);
      addRegexToken('Do', function (isStrict, locale) {
        return isStrict ? locale._ordinalParse : locale._ordinalParseLenient
      });
      addParseToken([
        'D',
        'DD'
      ], DATE);
      addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0], 10)
      });
      // MOMENTS
      var getSetDayOfMonth = makeGetSet('Date', true);
      // FORMATTING
      addFormatToken('DDD', [
        'DDDD',
        3
      ], 'DDDo', 'dayOfYear');
      // ALIASES
      addUnitAlias('dayOfYear', 'DDD');
      // PRIORITY
      addUnitPriority('dayOfYear', 4);
      // PARSING
      addRegexToken('DDD', match1to3);
      addRegexToken('DDDD', match3);
      addParseToken([
        'DDD',
        'DDDD'
      ], function (input, array, config) {
        config._dayOfYear = toInt(input)
      });
      // HELPERS
      // MOMENTS
      function getSetDayOfYear(input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 86400000) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, 'd')
      }
      // FORMATTING
      addFormatToken('m', [
        'mm',
        2
      ], 0, 'minute');
      // ALIASES
      addUnitAlias('minute', 'm');
      // PRIORITY
      addUnitPriority('minute', 14);
      // PARSING
      addRegexToken('m', match1to2);
      addRegexToken('mm', match1to2, match2);
      addParseToken([
        'm',
        'mm'
      ], MINUTE);
      // MOMENTS
      var getSetMinute = makeGetSet('Minutes', false);
      // FORMATTING
      addFormatToken('s', [
        'ss',
        2
      ], 0, 'second');
      // ALIASES
      addUnitAlias('second', 's');
      // PRIORITY
      addUnitPriority('second', 15);
      // PARSING
      addRegexToken('s', match1to2);
      addRegexToken('ss', match1to2, match2);
      addParseToken([
        's',
        'ss'
      ], SECOND);
      // MOMENTS
      var getSetSecond = makeGetSet('Seconds', false);
      // FORMATTING
      addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100)
      });
      addFormatToken(0, [
        'SS',
        2
      ], 0, function () {
        return ~~(this.millisecond() / 10)
      });
      addFormatToken(0, [
        'SSS',
        3
      ], 0, 'millisecond');
      addFormatToken(0, [
        'SSSS',
        4
      ], 0, function () {
        return this.millisecond() * 10
      });
      addFormatToken(0, [
        'SSSSS',
        5
      ], 0, function () {
        return this.millisecond() * 100
      });
      addFormatToken(0, [
        'SSSSSS',
        6
      ], 0, function () {
        return this.millisecond() * 1000
      });
      addFormatToken(0, [
        'SSSSSSS',
        7
      ], 0, function () {
        return this.millisecond() * 10000
      });
      addFormatToken(0, [
        'SSSSSSSS',
        8
      ], 0, function () {
        return this.millisecond() * 100000
      });
      addFormatToken(0, [
        'SSSSSSSSS',
        9
      ], 0, function () {
        return this.millisecond() * 1000000
      });
      // ALIASES
      addUnitAlias('millisecond', 'ms');
      // PRIORITY
      addUnitPriority('millisecond', 16);
      // PARSING
      addRegexToken('S', match1to3, match1);
      addRegexToken('SS', match1to3, match2);
      addRegexToken('SSS', match1to3, match3);
      var token;
      for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned)
      }
      function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000)
      }
      for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs)
      }
      // MOMENTS
      var getSetMillisecond = makeGetSet('Milliseconds', false);
      // FORMATTING
      addFormatToken('z', 0, 0, 'zoneAbbr');
      addFormatToken('zz', 0, 0, 'zoneName');
      // MOMENTS
      function getZoneAbbr() {
        return this._isUTC ? 'UTC' : ''
      }
      function getZoneName() {
        return this._isUTC ? 'Coordinated Universal Time' : ''
      }
      var proto = Moment.prototype;
      proto.add = add;
      proto.calendar = calendar$1;
      proto.clone = clone;
      proto.diff = diff;
      proto.endOf = endOf;
      proto.format = format;
      proto.from = from;
      proto.fromNow = fromNow;
      proto.to = to;
      proto.toNow = toNow;
      proto.get = stringGet;
      proto.invalidAt = invalidAt;
      proto.isAfter = isAfter;
      proto.isBefore = isBefore;
      proto.isBetween = isBetween;
      proto.isSame = isSame;
      proto.isSameOrAfter = isSameOrAfter;
      proto.isSameOrBefore = isSameOrBefore;
      proto.isValid = isValid$1;
      proto.lang = lang;
      proto.locale = locale;
      proto.localeData = localeData;
      proto.max = prototypeMax;
      proto.min = prototypeMin;
      proto.parsingFlags = parsingFlags;
      proto.set = stringSet;
      proto.startOf = startOf;
      proto.subtract = subtract;
      proto.toArray = toArray;
      proto.toObject = toObject;
      proto.toDate = toDate;
      proto.toISOString = toISOString;
      proto.inspect = inspect;
      proto.toJSON = toJSON;
      proto.toString = toString;
      proto.unix = unix;
      proto.valueOf = valueOf;
      proto.creationData = creationData;
      // Year
      proto.year = getSetYear;
      proto.isLeapYear = getIsLeapYear;
      // Week Year
      proto.weekYear = getSetWeekYear;
      proto.isoWeekYear = getSetISOWeekYear;
      // Quarter
      proto.quarter = proto.quarters = getSetQuarter;
      // Month
      proto.month = getSetMonth;
      proto.daysInMonth = getDaysInMonth;
      // Week
      proto.week = proto.weeks = getSetWeek;
      proto.isoWeek = proto.isoWeeks = getSetISOWeek;
      proto.weeksInYear = getWeeksInYear;
      proto.isoWeeksInYear = getISOWeeksInYear;
      // Day
      proto.date = getSetDayOfMonth;
      proto.day = proto.days = getSetDayOfWeek;
      proto.weekday = getSetLocaleDayOfWeek;
      proto.isoWeekday = getSetISODayOfWeek;
      proto.dayOfYear = getSetDayOfYear;
      // Hour
      proto.hour = proto.hours = getSetHour;
      // Minute
      proto.minute = proto.minutes = getSetMinute;
      // Second
      proto.second = proto.seconds = getSetSecond;
      // Millisecond
      proto.millisecond = proto.milliseconds = getSetMillisecond;
      // Offset
      proto.utcOffset = getSetOffset;
      proto.utc = setOffsetToUTC;
      proto.local = setOffsetToLocal;
      proto.parseZone = setOffsetToParsedOffset;
      proto.hasAlignedHourOffset = hasAlignedHourOffset;
      proto.isDST = isDaylightSavingTime;
      proto.isLocal = isLocal;
      proto.isUtcOffset = isUtcOffset;
      proto.isUtc = isUtc;
      proto.isUTC = isUtc;
      // Timezone
      proto.zoneAbbr = getZoneAbbr;
      proto.zoneName = getZoneName;
      // Deprecations
      proto.dates = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
      proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
      proto.years = deprecate('years accessor is deprecated. Use year instead', getSetYear);
      proto.zone = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
      proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);
      function createUnix(input) {
        return createLocal(input * 1000)
      }
      function createInZone() {
        return createLocal.apply(null, arguments).parseZone()
      }
      function preParsePostFormat(string) {
        return string
      }
      var proto$1 = Locale.prototype;
      proto$1.calendar = calendar;
      proto$1.longDateFormat = longDateFormat;
      proto$1.invalidDate = invalidDate;
      proto$1.ordinal = ordinal;
      proto$1.preparse = preParsePostFormat;
      proto$1.postformat = preParsePostFormat;
      proto$1.relativeTime = relativeTime;
      proto$1.pastFuture = pastFuture;
      proto$1.set = set;
      // Month
      proto$1.months = localeMonths;
      proto$1.monthsShort = localeMonthsShort;
      proto$1.monthsParse = localeMonthsParse;
      proto$1.monthsRegex = monthsRegex;
      proto$1.monthsShortRegex = monthsShortRegex;
      // Week
      proto$1.week = localeWeek;
      proto$1.firstDayOfYear = localeFirstDayOfYear;
      proto$1.firstDayOfWeek = localeFirstDayOfWeek;
      // Day of Week
      proto$1.weekdays = localeWeekdays;
      proto$1.weekdaysMin = localeWeekdaysMin;
      proto$1.weekdaysShort = localeWeekdaysShort;
      proto$1.weekdaysParse = localeWeekdaysParse;
      proto$1.weekdaysRegex = weekdaysRegex;
      proto$1.weekdaysShortRegex = weekdaysShortRegex;
      proto$1.weekdaysMinRegex = weekdaysMinRegex;
      // Hours
      proto$1.isPM = localeIsPM;
      proto$1.meridiem = localeMeridiem;
      function get$1(format, index, field, setter) {
        var locale = getLocale();
        var utc = createUTC().set(setter, index);
        return locale[field](utc, format)
      }
      function listMonthsImpl(format, index, field) {
        if (isNumber(format)) {
          index = format;
          format = undefined
        }
        format = format || '';
        if (index != null) {
          return get$1(format, index, field, 'month')
        }
        var i;
        var out = [];
        for (i = 0; i < 12; i++) {
          out[i] = get$1(format, i, field, 'month')
        }
        return out
      }
      // ()
      // (5)
      // (fmt, 5)
      // (fmt)
      // (true)
      // (true, 5)
      // (true, fmt, 5)
      // (true, fmt)
      function listWeekdaysImpl(localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
          if (isNumber(format)) {
            index = format;
            format = undefined
          }
          format = format || ''
        } else {
          format = localeSorted;
          index = format;
          localeSorted = false;
          if (isNumber(format)) {
            index = format;
            format = undefined
          }
          format = format || ''
        }
        var locale = getLocale(), shift = localeSorted ? locale._week.dow : 0;
        if (index != null) {
          return get$1(format, (index + shift) % 7, field, 'day')
        }
        var i;
        var out = [];
        for (i = 0; i < 7; i++) {
          out[i] = get$1(format, (i + shift) % 7, field, 'day')
        }
        return out
      }
      function listMonths(format, index) {
        return listMonthsImpl(format, index, 'months')
      }
      function listMonthsShort(format, index) {
        return listMonthsImpl(format, index, 'monthsShort')
      }
      function listWeekdays(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays')
      }
      function listWeekdaysShort(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort')
      }
      function listWeekdaysMin(localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin')
      }
      getSetGlobalLocale('en', {
        ordinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function (number) {
          var b = number % 10, output = toInt(number % 100 / 10) === 1 ? 'th' : b === 1 ? 'st' : b === 2 ? 'nd' : b === 3 ? 'rd' : 'th';
          return number + output
        }
      });
      // Side effect imports
      hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
      hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);
      var mathAbs = Math.abs;
      function abs() {
        var data = this._data;
        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);
        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);
        return this
      }
      function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);
        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;
        return duration._bubble()
      }
      // supports only 2.0-style add(1, 's') or add(duration)
      function add$1(input, value) {
        return addSubtract$1(this, input, value, 1)
      }
      // supports only 2.0-style subtract(1, 's') or subtract(duration)
      function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1)
      }
      function absCeil(number) {
        if (number < 0) {
          return Math.floor(number)
        } else {
          return Math.ceil(number)
        }
      }
      function bubble() {
        var milliseconds = this._milliseconds;
        var days = this._days;
        var months = this._months;
        var data = this._data;
        var seconds, minutes, hours, years, monthsFromDays;
        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (!(milliseconds >= 0 && days >= 0 && months >= 0 || milliseconds <= 0 && days <= 0 && months <= 0)) {
          milliseconds += absCeil(monthsToDays(months) + days) * 86400000;
          days = 0;
          months = 0
        }
        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;
        seconds = absFloor(milliseconds / 1000);
        data.seconds = seconds % 60;
        minutes = absFloor(seconds / 60);
        data.minutes = minutes % 60;
        hours = absFloor(minutes / 60);
        data.hours = hours % 24;
        days += absFloor(hours / 24);
        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));
        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;
        data.days = days;
        data.months = months;
        data.years = years;
        return this
      }
      function daysToMonths(days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return days * 4800 / 146097
      }
      function monthsToDays(months) {
        // the reverse of daysToMonths
        return months * 146097 / 4800
      }
      function as(units) {
        var days;
        var months;
        var milliseconds = this._milliseconds;
        units = normalizeUnits(units);
        if (units === 'month' || units === 'year') {
          days = this._days + milliseconds / 86400000;
          months = this._months + daysToMonths(days);
          return units === 'month' ? months : months / 12
        } else {
          // handle milliseconds separately because of floating point math errors (issue #1867)
          days = this._days + Math.round(monthsToDays(this._months));
          switch (units) {
          case 'week':
            return days / 7 + milliseconds / 604800000;
          case 'day':
            return days + milliseconds / 86400000;
          case 'hour':
            return days * 24 + milliseconds / 3600000;
          case 'minute':
            return days * 1440 + milliseconds / 60000;
          case 'second':
            return days * 86400 + milliseconds / 1000;
          // Math.floor prevents floating point math errors here
          case 'millisecond':
            return Math.floor(days * 86400000) + milliseconds;
          default:
            throw new Error('Unknown unit ' + units)
          }
        }
      }
      // TODO: Use this.as('ms')?
      function valueOf$1() {
        return this._milliseconds + this._days * 86400000 + this._months % 12 * 2592000000 + toInt(this._months / 12) * 31536000000
      }
      function makeAs(alias) {
        return function () {
          return this.as(alias)
        }
      }
      var asMilliseconds = makeAs('ms');
      var asSeconds = makeAs('s');
      var asMinutes = makeAs('m');
      var asHours = makeAs('h');
      var asDays = makeAs('d');
      var asWeeks = makeAs('w');
      var asMonths = makeAs('M');
      var asYears = makeAs('y');
      function get$2(units) {
        units = normalizeUnits(units);
        return this[units + 's']()
      }
      function makeGetter(name) {
        return function () {
          return this._data[name]
        }
      }
      var milliseconds = makeGetter('milliseconds');
      var seconds = makeGetter('seconds');
      var minutes = makeGetter('minutes');
      var hours = makeGetter('hours');
      var days = makeGetter('days');
      var months = makeGetter('months');
      var years = makeGetter('years');
      function weeks() {
        return absFloor(this.days() / 7)
      }
      var round = Math.round;
      var thresholds = {
        s: 45,
        // seconds to minute
        m: 45,
        // minutes to hour
        h: 22,
        // hours to day
        d: 26,
        // days to month
        M: 11  // months to year
      };
      // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
      function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture)
      }
      function relativeTime$1(posNegDuration, withoutSuffix, locale) {
        var duration = createDuration(posNegDuration).abs();
        var seconds = round(duration.as('s'));
        var minutes = round(duration.as('m'));
        var hours = round(duration.as('h'));
        var days = round(duration.as('d'));
        var months = round(duration.as('M'));
        var years = round(duration.as('y'));
        var a = seconds < thresholds.s && [
          's',
          seconds
        ] || minutes <= 1 && ['m'] || minutes < thresholds.m && [
          'mm',
          minutes
        ] || hours <= 1 && ['h'] || hours < thresholds.h && [
          'hh',
          hours
        ] || days <= 1 && ['d'] || days < thresholds.d && [
          'dd',
          days
        ] || months <= 1 && ['M'] || months < thresholds.M && [
          'MM',
          months
        ] || years <= 1 && ['y'] || [
          'yy',
          years
        ];
        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a)
      }
      // This function allows you to set the rounding function for relative time strings
      function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === undefined) {
          return round
        }
        if (typeof roundingFunction === 'function') {
          round = roundingFunction;
          return true
        }
        return false
      }
      // This function allows you to set a threshold for relative time strings
      function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === undefined) {
          return false
        }
        if (limit === undefined) {
          return thresholds[threshold]
        }
        thresholds[threshold] = limit;
        return true
      }
      function humanize(withSuffix) {
        var locale = this.localeData();
        var output = relativeTime$1(this, !withSuffix, locale);
        if (withSuffix) {
          output = locale.pastFuture(+this, output)
        }
        return locale.postformat(output)
      }
      var abs$1 = Math.abs;
      function toISOString$1() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        var seconds = abs$1(this._milliseconds) / 1000;
        var days = abs$1(this._days);
        var months = abs$1(this._months);
        var minutes, hours, years;
        // 3600 seconds -> 60 minutes -> 1 hour
        minutes = absFloor(seconds / 60);
        hours = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;
        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;
        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        var Y = years;
        var M = months;
        var D = days;
        var h = hours;
        var m = minutes;
        var s = seconds;
        var total = this.asSeconds();
        if (!total) {
          // this is the same as C#'s (Noda) and python (isodate)...
          // but not other JS (goog.date)
          return 'P0D'
        }
        return (total < 0 ? '-' : '') + 'P' + (Y ? Y + 'Y' : '') + (M ? M + 'M' : '') + (D ? D + 'D' : '') + (h || m || s ? 'T' : '') + (h ? h + 'H' : '') + (m ? m + 'M' : '') + (s ? s + 'S' : '')
      }
      var proto$2 = Duration.prototype;
      proto$2.abs = abs;
      proto$2.add = add$1;
      proto$2.subtract = subtract$1;
      proto$2.as = as;
      proto$2.asMilliseconds = asMilliseconds;
      proto$2.asSeconds = asSeconds;
      proto$2.asMinutes = asMinutes;
      proto$2.asHours = asHours;
      proto$2.asDays = asDays;
      proto$2.asWeeks = asWeeks;
      proto$2.asMonths = asMonths;
      proto$2.asYears = asYears;
      proto$2.valueOf = valueOf$1;
      proto$2._bubble = bubble;
      proto$2.get = get$2;
      proto$2.milliseconds = milliseconds;
      proto$2.seconds = seconds;
      proto$2.minutes = minutes;
      proto$2.hours = hours;
      proto$2.days = days;
      proto$2.weeks = weeks;
      proto$2.months = months;
      proto$2.years = years;
      proto$2.humanize = humanize;
      proto$2.toISOString = toISOString$1;
      proto$2.toString = toISOString$1;
      proto$2.toJSON = toISOString$1;
      proto$2.locale = locale;
      proto$2.localeData = localeData;
      // Deprecations
      proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
      proto$2.lang = lang;
      // Side effect imports
      // FORMATTING
      addFormatToken('X', 0, 0, 'unix');
      addFormatToken('x', 0, 0, 'valueOf');
      // PARSING
      addRegexToken('x', matchSigned);
      addRegexToken('X', matchTimestamp);
      addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input, 10) * 1000)
      });
      addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input))
      });
      // Side effect imports
      hooks.version = '2.17.1';
      setHookCallback(createLocal);
      hooks.fn = proto;
      hooks.min = min;
      hooks.max = max;
      hooks.now = now;
      hooks.utc = createUTC;
      hooks.unix = createUnix;
      hooks.months = listMonths;
      hooks.isDate = isDate;
      hooks.locale = getSetGlobalLocale;
      hooks.invalid = createInvalid;
      hooks.duration = createDuration;
      hooks.isMoment = isMoment;
      hooks.weekdays = listWeekdays;
      hooks.parseZone = createInZone;
      hooks.localeData = getLocale;
      hooks.isDuration = isDuration;
      hooks.monthsShort = listMonthsShort;
      hooks.weekdaysMin = listWeekdaysMin;
      hooks.defineLocale = defineLocale;
      hooks.updateLocale = updateLocale;
      hooks.locales = listLocales;
      hooks.weekdaysShort = listWeekdaysShort;
      hooks.normalizeUnits = normalizeUnits;
      hooks.relativeTimeRounding = getSetRelativeTimeRounding;
      hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
      hooks.calendarFormat = getCalendarFormat;
      hooks.prototype = proto;
      return hooks
    }))
  });
  // source: src/index.coffee
  rqzt.define('./index', function (module, exports, __dirname, __filename, process) {
    var Cart, Events, Promise, Shop, analytics, children, elementsToMount, extend, getMCIds, getQueries, getReferrer, itemUpdateQueue, k, m, ref, ref1, ref2, refer, riot, root, searchQueue, store, tagNames, v, waits, indexOf = [].indexOf || function (item) {
        for (var i = 0, l = this.length; i < l; i++) {
          if (i in this && this[i] === item)
            return i
        }
        return -1
      };
    rqzt('./utils/patches');
    Promise = rqzt('broken/dist/broken');
    riot = rqzt('riot/riot');
    extend = rqzt('extend');
    if (typeof window !== 'undefined' && window !== null) {
      window.riot = riot
    }
    refer = rqzt('referential/lib');
    store = rqzt('./utils/store');
    Cart = rqzt('commerce.js/lib').Cart;
    window.Crowdstart = rqzt('hanzo.js/lib/browser');
    m = rqzt('./mediator');
    Events = rqzt('./events');
    analytics = rqzt('./utils/analytics');
    Shop = rqzt('./shop');
    Shop.Forms = rqzt('./forms');
    Shop.Events = Events;
    Shop.Widgets = rqzt('./widgets');
    Shop.Controls = rqzt('./controls');
    Shop.CrowdControl = rqzt('crowdcontrol/lib');
    Shop.Referential = refer;
    Shop.CrowdControl.Views.View.prototype.renderCurrency = rqzt('./utils/currency').renderUICurrencyFromJSON;
    Shop.CrowdControl.Views.View.prototype.renderDate = rqzt('./utils/dates');
    Shop.CrowdControl.Views.View.prototype.isEmpty = function () {
      return Shop.isEmpty()
    };
    Shop.use = function (templates) {
      var ref, ref1;
      if (templates != null ? (ref = templates.Controls) != null ? ref.Error : void 0 : void 0) {
        Shop.Controls.Control.prototype.errorHtml = templates.Controls.Error
      }
      if (templates != null ? (ref1 = templates.Controls) != null ? ref1.Text : void 0 : void 0) {
        return Shop.Controls.Text.prototype.html = templates.Controls.Text
      }
    };
    Shop.riot = riot;
    Shop.analytics = analytics;
    Shop.isEmpty = function () {
      var items;
      items = this.data.get('order.items');
      return items.length === 0
    };
    getQueries = function () {
      var err, k, match, q, qs, search, v;
      search = /([^&=]+)=?([^&]*)/g;
      q = window.location.href.split('?')[1];
      qs = {};
      if (q != null) {
        while (match = search.exec(q)) {
          k = match[1];
          try {
            k = decodeURIComponent(k)
          } catch (error) {
          }
          v = match[2];
          try {
            v = decodeURIComponent(v)
          } catch (error) {
            err = error
          }
          qs[k] = v
        }
      }
      return qs
    };
    getReferrer = function (qs) {
      if (qs.referrer != null) {
        return qs.referrer
      } else {
        return store.get('referrer')
      }
    };
    getMCIds = function (qs) {
      return [
        qs['mc_eid'],
        qs['mc_cid']
      ]
    };
    tagNames = [];
    ref = Shop.Forms;
    for (k in ref) {
      v = ref[k];
      if (v.prototype.tag != null) {
        tagNames.push(v.prototype.tag.toUpperCase())
      }
    }
    searchQueue = [document.body];
    elementsToMount = [];
    while (true) {
      if (searchQueue.length === 0) {
        break
      }
      root = searchQueue.shift();
      if (root == null) {
        continue
      }
      if (root.tagName != null && (ref1 = root.tagName, indexOf.call(tagNames, ref1) >= 0)) {
        elementsToMount.push(root)
      } else if (((ref2 = root.children) != null ? ref2.length : void 0) > 0) {
        children = Array.prototype.slice.call(root.children);
        children.unshift(0);
        children.unshift(searchQueue.length);
        searchQueue.splice.apply(searchQueue, children)
      }
    }
    Shop.start = function (opts) {
      var cartId, checkoutShippingAddress, checkoutUser, data, i, item, items, j, k2, len, len1, meta, p, promo, ps, queries, r, ref10, ref11, ref12, ref13, ref14, ref15, ref16, ref17, ref18, ref3, ref4, ref5, ref6, ref7, ref8, ref9, referrer, tag, tags, v2;
      if (opts == null) {
        opts = {}
      }
      if (opts.key == null) {
        throw new Error('Please specify your API Key')
      }
      Shop.Forms.register();
      Shop.Widgets.register();
      Shop.Controls.register();
      referrer = '';
      queries = getQueries();
      if ((ref3 = opts.config) != null ? ref3.hashReferrer : void 0) {
        r = window.location.hash.replace('#', '');
        if (r !== '') {
          referrer = r
        } else {
          referrer = (ref4 = getReferrer(queries)) != null ? ref4 : (ref5 = opts.order) != null ? ref5.referrer : void 0
        }
      } else {
        referrer = (ref6 = getReferrer(queries)) != null ? ref6 : (ref7 = opts.order) != null ? ref7.referrer : void 0
      }
      store.set('referrer', referrer);
      promo = (ref8 = queries.promo) != null ? ref8 : '';
      items = store.get('items');
      cartId = store.get('cartId');
      meta = store.get('order.metadata');
      this.data = refer({
        taxRates: opts.taxRates || [],
        shippingRates: opts.shippingRates || [],
        tokenId: queries.tokenid,
        terms: (ref9 = opts.terms) != null ? ref9 : false,
        order: {
          giftType: 'physical',
          type: 'stripe',
          shippingRate: ((ref10 = opts.config) != null ? ref10.shippingRate : void 0) || ((ref11 = opts.order) != null ? ref11.shippingRate : void 0) || 0,
          taxRate: ((ref12 = opts.config) != null ? ref12.taxRate : void 0) || ((ref13 = opts.order) != null ? ref13.taxRate : void 0) || 0,
          currency: ((ref14 = opts.config) != null ? ref14.currency : void 0) || ((ref15 = opts.order) != null ? ref15.currency : void 0) || 'usd',
          referrerId: referrer,
          shippingAddress: { country: 'us' },
          discount: 0,
          tax: 0,
          subtotal: 0,
          total: 0,
          items: items != null ? items : [],
          cartId: cartId != null ? cartId : null,
          checkoutUrl: (ref16 = (ref17 = opts.config) != null ? ref17.checkoutUrl : void 0) != null ? ref16 : null,
          metadata: meta != null ? meta : {}
        }
      });
      data = this.data.get();
      for (k in opts) {
        v = opts[k];
        if (opts[k]) {
          if (data[k] == null) {
            data[k] = opts[k]
          } else {
            ref18 = data[k];
            for (k2 in ref18) {
              v2 = ref18[k2];
              extend(data[k][k2], opts[k][k2])
            }
          }
        }
      }
      this.data.set(data);
      checkoutUser = store.get('checkout-user');
      checkoutShippingAddress = store.get('checkout-shippingAddress');
      if (checkoutUser) {
        this.data.set('user', checkoutUser);
        store.remove('checkout-user')
      }
      if (checkoutShippingAddress) {
        this.data.set('order.shippingAddress', checkoutShippingAddress);
        store.remove('checkout-shippingAddress')
      }
      this.client = new window.Crowdstart.Api({
        key: opts.key,
        endpoint: opts.endpoint
      });
      this.cart = new Cart(this.client, this.data, opts.cartOptions);
      this.cart.onCart = function (_this) {
        return function () {
          var _, cart, mcCId, ref19;
          store.set('cartId', _this.data.get('order.cartId'));
          ref19 = getMCIds(queries), _ = ref19[0], mcCId = ref19[1];
          cart = {
            mailchimp: { checkoutUrl: _this.data.get('order.checkoutUrl') },
            currency: _this.data.get('order.currency')
          };
          if (mcCId) {
            cart.mailchimp.campaignId = mcCId
          }
          return _this.client.account.get().then(function (res) {
            return _this.cart._cartUpdate({
              userId: res.email,
              email: res.email
            })
          })['catch'](function () {
          })
        }
      }(this);
      tags = riot.mount(elementsToMount, {
        data: this.data,
        cart: this.cart,
        client: this.client
      });
      riot.update = function () {
        var i, len, results, tag;
        results = [];
        for (i = 0, len = tags.length; i < len; i++) {
          tag = tags[i];
          results.push(tag.update())
        }
        return results
      };
      this.cart.onUpdate = function (_this) {
        return function (item) {
          items = _this.data.get('order.items');
          store.set('items', items);
          _this.cart._cartUpdate({
            tax: _this.data.get('order.tax'),
            total: _this.data.get('order.total')
          });
          if (item != null) {
            m.trigger(Events.UpdateItem, item)
          }
          meta = _this.data.get('order.metadata');
          store.set('order.metadata', meta);
          _this.cart.invoice();
          return riot.update()
        }
      }(this);
      if (referrer != null && referrer !== '') {
        this.client.referrer.get(referrer).then(function (_this) {
          return function (res) {
            var promoCode;
            promoCode = res.affiliate.couponId;
            _this.data.set('order.promoCode', promocode);
            return m.trigger(Events.ForceApplyPromoCode)
          }
        }(this))['catch'](function () {
        })
      } else if (promo !== '') {
        this.data.set('order.promoCode', promo);
        m.trigger(Events.ForceApplyPromoCode)
      }
      ps = [];
      for (i = 0, len = tags.length; i < len; i++) {
        tag = tags[i];
        p = new Promise(function (resolve) {
          return tag.one('updated', function () {
            return resolve()
          })
        });
        ps.push(p)
      }
      Promise.settle(ps).then(function () {
        requestAnimationFrame(function () {
          return m.trigger(Events.Ready)
        });
        return setTimeout(function () {
          return riot.update()
        }, 1000)
      })['catch'](function (err) {
        var ref19;
        return typeof window !== 'undefined' && window !== null ? (ref19 = window.Raven) != null ? ref19.captureException(err) : void 0 : void 0
      });
      m.data = this.data;
      m.on(Events.SetData, function (_this) {
        return function (data1) {
          _this.data = data1;
          return _this.cart.invoice()
        }
      }(this));
      m.on(Events.DeleteLineItem, function (item) {
        var id;
        id = item.get('id');
        if (!id) {
          id = item.get('productId')
        }
        if (!id) {
          id = item.get('productSlug')
        }
        return Shop.setItem(id, 0)
      });
      m.trigger(Events.SetData, this.data);
      m.on('error', function (err) {
        var ref19;
        void 0;
        return typeof window !== 'undefined' && window !== null ? (ref19 = window.Raven) != null ? ref19.captureException(err) : void 0 : void 0
      });
      if (items != null && items.length > 0) {
        for (j = 0, len1 = items.length; j < len1; j++) {
          item = items[j];
          if (item.id != null) {
            this.cart.load(item.id)
          } else if (item.productId != null) {
            this.cart.refresh(item.productId)
          }
        }
      }
      riot.update();
      return m
    };
    waits = 0;
    itemUpdateQueue = [];
    Shop.initCart = function () {
      return this.cart.initCart()
    };
    Shop.setItem = function (id, quantity, locked) {
      var p;
      if (locked == null) {
        locked = false
      }
      m.trigger(Events.TryUpdateItem, id);
      p = this.cart.set(id, quantity, locked);
      if (this.promise !== p) {
        this.promise = p;
        return this.promise.then(function (_this) {
          return function () {
            riot.update();
            return m.trigger(Events.UpdateItems, _this.data.get('order.items'))
          }
        }(this))['catch'](function (err) {
          var ref3;
          return typeof window !== 'undefined' && window !== null ? (ref3 = window.Raven) != null ? ref3.captureException(err) : void 0 : void 0
        })
      }
    };
    Shop.getItem = function (id) {
      return this.cart.get(id)
    };
    module.exports = window.Crowdstart.Shop = Shop
  });
  rqzt('./index')
}.call(this, this))//# sourceMappingURL=data:application/json;charset=utf-8;base64,